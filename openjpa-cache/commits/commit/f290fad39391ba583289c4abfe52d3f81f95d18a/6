{"sha":"f290fad39391ba583289c4abfe52d3f81f95d18a","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyOTBmYWQzOTM5MWJhNTgzMjg5YzRhYmZlNTJkM2Y4MWY5NWQxOGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T00:53:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T00:53:24Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e70e22978192e69c0226f5039af58d37b107914","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e70e22978192e69c0226f5039af58d37b107914"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f290fad39391ba583289c4abfe52d3f81f95d18a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f290fad39391ba583289c4abfe52d3f81f95d18a","html_url":"https://github.com/apache/openjpa/commit/f290fad39391ba583289c4abfe52d3f81f95d18a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f290fad39391ba583289c4abfe52d3f81f95d18a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"82164a8c3bcd281532692875dbb05797c1b5bb76","url":"https://api.github.com/repos/apache/openjpa/commits/82164a8c3bcd281532692875dbb05797c1b5bb76","html_url":"https://github.com/apache/openjpa/commit/82164a8c3bcd281532692875dbb05797c1b5bb76"}],"stats":{"total":447552,"additions":447552,"deletions":0},"files":[{"sha":"5e2a8f266c4cd99ffce2ea16f590ebce484e58df","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Simple test case to test the GenerationType for @Id...\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestGenerationType\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(IdentityGenerationType.class);\n+\n+        /*\n+         * If the DBDictionary doesn't support AutoAssign(ment) of column\n+         * values, then null out the emf instance to prevent the rest of\n+         * the tests from executing.\n+         */\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        if (!conf.getDBDictionaryInstance().supportsAutoAssign) {\n+            emf = null;\n+        }\n+\n+    }\n+\n+    public void testCreateEntityManager() {\n+        if (emf == null)\n+            return;\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityTransaction t = em.getTransaction();\n+        assertNotNull(t);\n+        t.begin();\n+        t.setRollbackOnly();\n+        t.rollback();\n+\n+        // openjpa-facade test\n+        assertTrue(em instanceof OpenJPAEntityManager);\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+        ojem.getFetchPlan().setMaxFetchDepth(-1);\n+        assertEquals(-1, ojem.getFetchPlan().getMaxFetchDepth());\n+        em.close();\n+    }\n+\n+    public void testPersist() {\n+        if (emf == null)\n+            return;\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new IdentityGenerationType());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        if (emf == null)\n+            return;\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        IdentityGenerationType igt = new IdentityGenerationType();\n+        igt.setSomeData(\"SomeString\");\n+        em.persist(igt);\n+        // add another IdentityGenerationType object\n+        em.persist(new IdentityGenerationType());\n+        em.getTransaction().commit();\n+\n+        // Check to make sure there are two objects...\n+        Query q = em.createQuery(\"select x from IdentityGenerationType x\");\n+        List l = q.getResultList();\n+        assertEquals(2, l.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestGenerationType.class);\n+    }\n+}\n+"},{"sha":"ab378a7eb454a5e62e813e4ced237f6b3fa4bb10","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+public class TestSQLBigDecimalId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SQLBigDecimalIdEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\r\n+        BigDecimal decimal = new BigDecimal(time);\r\n+\r\n+        SQLBigDecimalIdEntity e = new SQLBigDecimalIdEntity();\r\n+        e.setId(decimal);\r\n+        e.setData(1);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(time, e.getId().longValue());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(SQLBigDecimalIdEntity.class, decimal);\r\n+        assertEquals(1, e.getData());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(SQLBigDecimalIdEntity.class);\r\n+    }\r\n+}\r"},{"sha":"5d62bf1e8e6b27a7ef74ce0bc5f0727a199cb62b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+public class TestSQLBigIntegerId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SQLBigIntegerIdEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\r\n+        BigInteger integer = new BigDecimal(time).toBigInteger();\r\n+\r\n+        SQLBigIntegerIdEntity e = new SQLBigIntegerIdEntity();\r\n+        e.setId(integer);\r\n+        e.setData(1);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(time, e.getId().longValue());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(SQLBigIntegerIdEntity.class, integer);\r\n+        assertEquals(1, e.getData());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(SQLBigIntegerIdEntity.class);\r\n+    }\r\n+}\r"},{"sha":"dc3c7471ea9716dbf9cce4d38b2502e2a7f23f87","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import java.sql.Date;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that entities can use SQL dates as identity values.\n+ *\n+ * @author Abe White\n+ */\n+public class TestSQLDateId\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SQLDateIdEntity.class);\n+    }\n+\n+    public void testPersist() {\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\n+\n+        SQLDateIdEntity e = new SQLDateIdEntity();\n+        e.setId(new Date(time));\n+        e.setData(1);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        assertEquals(time, e.getId().getTime());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e = em.find(SQLDateIdEntity.class, new Date(time));\n+        assertEquals(1, e.getData());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(SQLDateIdEntity.class);\n+    }\n+}\n+"},{"sha":"d3cb08ae75778c127bfe089dbc7dc62b27253fcf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class AbstractBase {\n+\n+    @Id\n+    private String id;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+}\n+"},{"sha":"3e7a9570e0a9ac2a5dbdb20748829d7798efc526","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class ConcreteSubclass \n+    extends AbstractBase {\n+\n+    private int subclassData;\n+\n+    public int getSubclassData() {\n+        return subclassData;\n+    }\n+\n+    public void setSubclassData(int subclassData) {\n+        this.subclassData = subclassData;\n+    }\n+}\n+"},{"sha":"4c9406e3fbee3dcab4048538f9d80e0e566955f4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class EntityL3 \n+    extends MappedSuperclassL2 {\n+\n+    private int l3data;\n+\n+    public int getL3Data() {\n+        return l3data;\n+    }\n+\n+    public void setL3Data(int data) {\n+        l3data = data;\n+    }\n+}\n+"},{"sha":"5cd092fe2ffa442ccf3fdd7bc0dfb46697c3b17a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class EntityL3Sibling \n+    extends MappedSuperclassL2 {\n+\n+    private int siblingl3data;\n+\n+    public int getSiblingL3Data() {\n+        return siblingl3data;\n+    }\n+\n+    public void setSiblingL3Data(int data) {\n+        siblingl3data = data;\n+    }\n+}\n+"},{"sha":"1af667d4353e11f10058e3cb5f14552d8c9ceeca","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass\n+public class MappedSuperclassBase {\n+\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.AUTO)\n+    private long id;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+}\n+"},{"sha":"d8a62110f9316a17588b68000a0ff57c7c72c77e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassL2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass \n+public class MappedSuperclassL2 \n+    extends MappedSuperclassBase {\n+\n+    private int l2data;\n+\n+    public int getL2Data() {\n+        return l2data;\n+    }\n+\n+    public void setL2Data(int data) {\n+        l2data = data;\n+    }\n+}\n+"},{"sha":"ff42f6466ee7d6ae69da6b68362ca7aab8eb3483","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class NoGenEntityL3 \n+    extends NoGenMappedSuperclassL2 {\n+\n+    private int l3data;\n+\n+    public int getL3Data() {\n+        return l3data;\n+    }\n+\n+    public void setL3Data(int data) {\n+        l3data = data;\n+    }\n+}\n+"},{"sha":"38450becaa2d9c9c316a13bb84354c205ae542c0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity \r\n+public class NoGenEntityL3Sibling \r\n+    extends NoGenMappedSuperclassL2 {\r\n+\r\n+    private int siblingl3data;\r\n+\r\n+    public int getSiblingL3Data() {\r\n+        return siblingl3data;\r\n+    }\r\n+\r\n+    public void setSiblingL3Data(int data) {\r\n+        siblingl3data = data;\r\n+    }\r\n+}\r\n+\r"},{"sha":"eb29d6798278387d99d9a4e91b12428866e2c95e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass\n+public class NoGenMappedSuperclassBase {\n+\n+    @Id\n+    private long id;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+}\n+"},{"sha":"820ae810630f1298a1c49e5960f559c460985c53","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass \n+public class NoGenMappedSuperclassL2 \n+    extends NoGenMappedSuperclassBase {\n+\n+    private int l2data;\n+\n+    public int getL2Data() {\n+        return l2data;\n+    }\n+\n+    public void setL2Data(int data) {\n+        l2data = data;\n+    }\n+}\n+"},{"sha":"2838e269e43940e8b12fe0b7faf7356403d5090b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","status":"added","additions":640,"deletions":0,"changes":640,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,640 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.inheritance.entity.AbstractClass;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass2;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass3;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass4;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass5;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass6;\n+import org.apache.openjpa.persistence.inheritance.entity.ManagedIface;\n+import org.apache.openjpa.persistence.inheritance.entity.ManagedIface2;\n+import org.apache.openjpa.persistence.inheritance.entity.MappedSuper;\n+import org.apache.openjpa.persistence.inheritance.entity.MidClass;\n+import org.apache.openjpa.persistence.inheritance.entity.MidClass2;\n+import org.apache.openjpa.persistence.inheritance.entity.MidClass3;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassA;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassB;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassC;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassD;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassE;\n+import org.apache.openjpa.persistence.inheritance.entity.ImplClassA;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassF;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassG;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassH;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassI;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassJ;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassK;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * This test verifies that OpenJPA uses a single-table inheritance\n+ * strategy and default discriminator column if no inheritance strategy \n+ * is defined.\n+ * \n+ * OpenJPA JIRA: {@link http://issues.apache.org/jira/browse/OPENJPA-670}\n+\n+ * @author Jeremy Bauer\n+ *\n+ */\n+public class TestDefaultInheritanceStrategy \n+    extends SingleEMFTestCase {\n+    \n+    public void setUp() {\n+        setUp(BaseClass.class, SubclassA.class, SubclassB.class,\n+            SubclassC.class, MappedSuper.class, SubclassD.class,\n+            BaseClass2.class, MidClass.class, SubclassE.class,\n+            ManagedIface.class, ImplClassA.class,\n+            ManagedIface2.class, BaseClass3.class, SubclassF.class,\n+            BaseClass4.class, SubclassG.class,\n+            BaseClass5.class, MidClass2.class, SubclassH.class,\n+            AbstractClass.class, SubclassI.class, SubclassJ.class,\n+            BaseClass6.class, SubclassK.class);\n+    }\n+\n+    private Class[] classArray(Class... classes) {\n+        return classes;\n+    }\n+    \n+    /**\n+     * This variation tests a default simple class hierarchy with no inheritance\n+     * or discriminator column annotations defined.  \n+     */\n+    public void testSimpleDefaultInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        // Create some entities\n+        SubclassA sca = new SubclassA();\n+        sca.setId(0);\n+        sca.setName(\"SubclassABaseClassName0\");\n+        sca.setClassAName(\"SubclassAName0\");\n+\n+        SubclassA sca2 = new SubclassA();\n+        sca2.setId(1);\n+        sca2.setName(\"SubclassABaseClassName1\");\n+        sca2.setClassAName(\"SubclassAName1\");\n+\n+        SubclassB scb = new SubclassB();\n+        scb.setId(2);\n+        scb.setName(\"SubclassBBaseClassName\");\n+        scb.setClassBName(\"SubclassBName\");\n+\n+        BaseClass b = new BaseClass();\n+        b.setName(\"BaseClassName\");\n+        b.setId(3);\n+\n+        em.getTransaction().begin();\n+        em.persist(sca);\n+        em.persist(sca2);\n+        em.persist(scb);\n+        em.persist(b);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        \n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS\", 4, BaseClass.class);\n+                \n+        verifyInheritanceQueryResult(em, \"SubclassA\", \n+            classArray(SubclassA.class), 0, 1);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassB\", \n+            classArray(SubclassB.class), 2);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass\", \n+            classArray(BaseClass.class), 0, 1, 2, 3);\n+        \n+        em.close();\n+    }\n+\n+    /**\n+     * This variation ensures that a mapped superclass does not cause the\n+     * production of a discriminator column.\n+     */\n+    public void testMappedSuperclass() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Add two entities, each extending the same mapped interface\n+        em.getTransaction().begin();\n+        SubclassC sc = new SubclassC();\n+        sc.setId(0);\n+        sc.setName(\"SubclassCMappedSuperName\");\n+        sc.setClassCName(\"SubclassCName\");\n+\n+        SubclassD sd = new SubclassD();\n+        sd.setId(1);\n+        sd.setName(\"SubclassDMappedSuperName\");\n+        sd.setClassDName(\"SubclassDName\");\n+        \n+        em.persist(sc);\n+        em.persist(sd);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+                \n+        // The subclasses should not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassC\");\n+        verifyNoDypeColumn(em, \"SubclassD\");\n+\n+        // Query the subclass entities.  Make sure the counts are correct and\n+        // the result is castable to the mapped sc.\n+        verifyInheritanceQueryResult(em, \"SubclassC\", \n+                classArray(SubclassC.class, MappedSuper.class), 0);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassD\", \n+                classArray(SubclassD.class, MappedSuper.class), 1);\n+                \n+        em.close();\n+    }\n+\n+    /**\n+     * This variation ensures that a 3-level inheritance hierarchy uses \n+     * a discriminator column at the root class level.\n+     */\n+    public void testTwoLevelInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Add two entities, each extending the same mapped interface\n+        em.getTransaction().begin();\n+        SubclassE sc = new SubclassE();\n+        sc.setId(0);\n+        sc.setName(\"SubclassEBaseClassName\");\n+        sc.setMidClassName(\"SubclassEMidClassName\");\n+        sc.setClassEName(\"SubclassCName\");\n+\n+        MidClass mc = new MidClass();\n+        mc.setId(1);\n+        mc.setName(\"MidClassBaseClassName\");\n+        mc.setMidClassName(\"MidClassName\");\n+\n+        BaseClass2 b2 = new BaseClass2();\n+        b2.setName(\"BaseClass2Name\");\n+        b2.setId(2);\n+        \n+        em.persist(sc);\n+        em.persist(mc);\n+        em.persist(b2);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        // Verify that baseclass2 contains a discriminator column\n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS2\", 3, \n+                BaseClass2.class);\n+        \n+        // Verify that the subclass tables do not contain a discriminator column\n+        verifyNoDypeColumn(em, \"MidClass\");\n+        verifyNoDypeColumn(em, \"SubclassE\");\n+\n+        // Query the subclass tables.  Make sure the counts are correct and\n+        // the result is castable to the mapped sc.\n+        verifyInheritanceQueryResult(em, \"SubclassE\", \n+                classArray(SubclassE.class, MidClass.class, BaseClass2.class),\n+                0);\n+\n+        verifyInheritanceQueryResult(em, \"MidClass\", \n+                classArray(MidClass.class), 0, 1);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass2\", \n+                classArray(BaseClass2.class), 0, 1, 2);\n+\n+        em.close();\n+    }\n+\n+    /**\n+     * This variation verifies that an entity with a managed interface\n+     * does not use a discriminator column.\n+     */\n+    public void testManagedInterface() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+\n+        // Add some entities\n+        em.getTransaction().begin();\n+        ManagedIface mif = em.createInstance(ManagedIface.class);\n+        mif.setIntFieldSup(10);\n+                \n+        ImplClassA ica = new ImplClassA();\n+        ica.setImplClassAName(\"ImplClassAName\");\n+        ica.setIntFieldSup(11);\n+        \n+        em.persist(mif);\n+        em.persist(ica);        \n+        em.getTransaction().commit();\n+\n+        em.clear();\n+\n+        // Verify that the iface table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"ManagedIface\");\n+\n+        // Verify that the impl table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"ImplClassA\");\n+        \n+        // Query the subclass tables.  Make sure the counts are correct and\n+        // the result is castable to the entity and interface types.\n+        verifyInheritanceQueryResult(em, \"ImplClassA\", \n+                classArray(ImplClassA.class, ManagedIface.class), ica.getId());\n+\n+        // Query the interface2 table.  Make sure the count is correct and\n+        // the result is castable to the interface type.\n+        verifyInheritanceQueryResult(em, \"ManagedIface\", \n+                classArray(ManagedIface.class), mif.getId(),\n+                ica.getId());\n+        \n+        em.close();\n+    }\n+\n+    /**\n+     * This variation verifies that an entity with managed interface\n+     * and a superclass DOES use a discriminator column.\n+     */\n+    public void testManagedInterfaceAndBase() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+\n+        // Add some entities\n+        em.getTransaction().begin();\n+        ManagedIface2 mif2 = em.createInstance(ManagedIface2.class);\n+        mif2.setIntFieldSup(12);\n+                \n+        SubclassF scf = new SubclassF();\n+        scf.setClassFName(\"SubclassFName\");\n+        scf.setIntFieldSup(13);\n+\n+        BaseClass3 bc3 = new BaseClass3();\n+        bc3.setName(\"BaseClass3\");\n+\n+        em.persist(mif2);\n+        em.persist(scf);  \n+        em.persist(bc3);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+\n+        // Verify that the iface table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"ManagedIface2\");\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassF\");\n+\n+        // Verify that the base class does contain a discriminator column\n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS3\", 2, \n+            BaseClass3.class);\n+\n+        // Query the subclass table.  Make sure the counts are correct and\n+        // the result is castable to the entity and interface types.\n+        verifyInheritanceQueryResult(em, \"SubclassF\", \n+            classArray(SubclassF.class, ManagedIface2.class, BaseClass3.class),\n+            scf.getId());\n+        \n+        // Query the base class table.  Make sure the counts are correct and\n+        // the result is castable to the entity and interface types.\n+        verifyInheritanceQueryResult(em, \"BaseClass3\", \n+            classArray(BaseClass3.class),\n+            scf.getId(), bc3.getId());\n+\n+        // Query the interface2 table.  Make sure the count is correct and\n+        // the result is castable to the interface type.\n+        verifyInheritanceQueryResult(em, \"ManagedIface2\", \n+                classArray(ManagedIface2.class),\n+                scf.getId(), mif2.getId());        \n+        em.close();\n+    }\n+    \n+    /**\n+     * This variation tests a default simple class hierarchy with a inheritance\n+     * annotation defined on the subclass.  \n+     */\n+    public void testSubclassSpecifiedInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        // Create some entities\n+        SubclassG scg = new SubclassG();\n+        scg.setId(0);\n+        scg.setName(\"SubclassGBaseClass4Name\");\n+        scg.setClassGName(\"SubclassGName\");\n+\n+        BaseClass4 b = new BaseClass4();\n+        b.setName(\"BaseClass4Name\");\n+        b.setId(1);\n+\n+        em.getTransaction().begin();\n+        em.persist(scg);\n+        em.persist(b);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        \n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS4\", 2, \n+            BaseClass4.class);\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassG\");\n+        \n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"SubclassG\", \n+            classArray(SubclassG.class, BaseClass4.class), 0);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass4\", \n+                classArray(BaseClass4.class), 0, 1);\n+        \n+        em.close();\n+    }    \n+    \n+    /**\n+     * This variation tests a default inheritance hierarchy with circular\n+     * relationships:\n+     *    BaseClass5 has rel to SubclassH\n+     *    MidClass2 extends BaseClass5 inherits rel to SubclassH\n+     *    SubClassH extends MidClass2 has rel to BaseClass5\n+     */    \n+    public void testCircularInheritedRelationships() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Create and persist some related & inherited entities\n+        SubclassH sch = new SubclassH();\n+        sch.setId(1);\n+        sch.setClassHName(\"SubclassHName\");\n+        sch.setName(\"SubclassHBaseClass5Name\");\n+        sch.setMidClass2Name(\"SubclassHMidClass2Name\");\n+    \n+        BaseClass5 bc5 = new BaseClass5();\n+        bc5.setId(2);\n+        bc5.setName(\"BaseClass5Name\");\n+        bc5.setSubclassh(sch);\n+        \n+        sch.setBaseclass5(bc5);\n+        \n+        MidClass2 mc2 = new MidClass2();\n+        mc2.setId(3);\n+        mc2.setMidClass2Name(\"MidClass2Name\");\n+        mc2.setName(\"MidClass2BaseClass5Name\");\n+        mc2.setSubclassh(sch);\n+        \n+        em.getTransaction().begin();\n+        em.persist(sch);\n+        em.persist(bc5);\n+        em.persist(mc2);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS5\", 3, \n+                BaseClass5.class);\n+\n+        // Verify that the midclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"MidClass2\");\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassH\");\n+        \n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"SubclassH\", \n+            classArray(SubclassH.class, MidClass2.class, BaseClass5.class),\n+            1);\n+\n+        verifyInheritanceQueryResult(em, \"MidClass2\", \n+                classArray(MidClass2.class, BaseClass5.class),\n+                1, 3);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass5\", \n+                classArray(BaseClass5.class),\n+                1, 2, 3);\n+        \n+        em.clear();\n+        \n+        // Validate entity relationships\n+        sch = em.find(SubclassH.class, 1);\n+        assertEquals(sch.getName(),\"SubclassHBaseClass5Name\");\n+        assertEquals(sch.getMidClass2Name(), \"SubclassHMidClass2Name\");\n+        // SubclassH has relationship to BaseClass5\n+        assertEquals(sch.getBaseclass5().getId(), 2);\n+\n+        bc5 = em.find(BaseClass5.class, 3);\n+        assertEquals(bc5.getName(),\"MidClass2BaseClass5Name\");\n+        // BaseClass5 has relationship to SubclassH through MidClass2\n+        assertEquals(bc5.getSubclassh().getId(), 1);        \n+        \n+        bc5 = em.find(BaseClass5.class, 2);\n+        assertEquals(bc5.getName(),\"BaseClass5Name\");\n+        // BaseClass5 has relationship to SubclassH\n+        assertEquals(bc5.getSubclassh().getId(), 1);        \n+\n+        mc2 = em.find(MidClass2.class, 3);\n+        assertEquals(mc2.getName(),\"MidClass2BaseClass5Name\");\n+        assertEquals(mc2.getMidClass2Name(), \"MidClass2Name\");\n+        // MidClass2 has relationship to SubclassH\n+        assertEquals(bc5.getSubclassh().getId(), 1);        \n+\n+        em.close();\n+    }\n+    \n+    /**\n+     * This variation verifies default inheritance with an abstract\n+     * entity.\n+     */\n+    public void testAbstractEntityInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+       \n+        SubclassI sci = new SubclassI();\n+        sci.setId(1);\n+        sci.setClassIName(\"SubclassIName\");\n+        sci.setName(\"SubclassIBaseClassName\");\n+        \n+        SubclassJ scj = new SubclassJ();\n+        scj.setId(2);\n+        scj.setClassJName(\"SubclassJName\");\n+        scj.setName(\"SubclassJBaseClassName\");\n+        \n+        em.getTransaction().begin();\n+        em.persist(sci);\n+        em.persist(scj);    \n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        verifyDtypeColumnEntriesAndMapping(em, \"ABSTRACTCLASS\", 2, \n+                AbstractClass.class);\n+\n+        // Verify that the midclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassI\");\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassJ\");        \n+        \n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"AbstractClass\", \n+            classArray(AbstractClass.class), 1, 2);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassI\", \n+                classArray(AbstractClass.class, SubclassI.class), 1);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassJ\", \n+                classArray(AbstractClass.class, SubclassJ.class), 2);        \n+        \n+        em.close();\n+    }\n+    \n+    /**\n+     * This variation verifies that default inheritance is used when\n+     * there is a non-entity superclass in the mix:\n+     *   non-entity MidClass3 extends BaseClass6\n+     *   SubClassJ extends MidClass3\n+     */\n+    public void testMidNonEntityInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        SubclassK sck = new SubclassK();\n+        sck.setId(1);\n+        sck.setClassKName(\"SubclassKName\");\n+        sck.setMidClass3Name(\"SubclassKMidClass3Name\");\n+        sck.setName(\"SubclassKBaseClass6Name\");\n+                \n+        BaseClass6 bk6 = new BaseClass6();\n+        bk6.setId(3);\n+        bk6.setName(\"BaseClass6Name\");\n+        \n+        em.getTransaction().begin();\n+        em.persist(sck);\n+        em.persist(bk6);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+        \n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS6\", 2, \n+                BaseClass6.class);\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassK\");           \n+\n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"BaseClass6\", \n+            classArray(BaseClass6.class), 1, 3);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassK\", \n+                classArray(BaseClass6.class, MidClass3.class, SubclassK.class),\n+                1);        \n+\n+        em.close();        \n+    }\n+\n+    /**\n+     * Verifies that a table contains the specified number of entries\n+     * in its DTYPE (default discriminator) column.\n+     * @param em  Entity nanager\n+     * @param table  Name of the table to query\n+     * @param entries  Expected column entry count\n+     * @param baseClass Class mapping to verify\n+     */\n+    private void verifyDtypeColumnEntriesAndMapping(EntityManager em, \n+        String table, int entries, Class baseClass) {\n+        try {\n+            Query qry = em.createNativeQuery(\"SELECT DTYPE FROM \" + table);\n+            List vals = qry.getResultList();\n+            assertTrue(\"Query should have returned \" + entries + \" values\", \n+                vals.size() == entries);\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception querying DTYPE column: \" + e.getMessage());\n+        }        \n+        \n+        // Check the discriminator column of the class mapping.  \n+        ClassMapping cm = getMapping(baseClass);\n+        Discriminator d = cm.getDiscriminator();\n+        Column[] cols = d.getColumns();\n+        assertTrue(\"Discriminator should use DTYPE column\", \n+            (cols != null && cols.length == 1 && \n+            cols[0].getName().equals(\"DTYPE\"))); \n+    }\n+\n+    /**\n+     * Verifies that a table does not contain a DTYPE column.\n+     * @param em  Entity manager\n+     * @param table Name of the table to query\n+     */\n+    private void verifyNoDypeColumn(EntityManager em, String table) {\n+        try {\n+            Query qry = em.createNativeQuery(\"SELECT DTYPE FROM \" + table);\n+            qry.getResultList();\n+            fail(\"Expected exception.  DTYPE column should not exist on \" + \n+                table);\n+        }\n+        catch (Exception e) {\n+            // Expected exception\n+        }        \n+    }    \n+\n+    /**\n+     * Verifies the resulting entity count and expected entity ids from a \n+     * simple entity query.  This method requires a \"getId\" method on the\n+     * entity type in order to work properly.\n+     * \n+     * @param em entity manager\n+     * @param entity entity name\n+     * @param entityType entity class\n+     * @param expectedValues variable list of expected integral id values.\n+     */\n+    private void verifyInheritanceQueryResult(EntityManager em, String entity,\n+        Class[] types, int... expectedValues) {\n+        Query qry = em.createQuery(\"SELECT e FROM \" + entity + \" e\");\n+        List col = qry.getResultList();\n+        assertTrue(\"Query should return \" + expectedValues.length + \" entities\",\n+            col.size() == expectedValues.length);\n+        int count = 0;\n+        for (int i = 0; i < col.size(); i++) {\n+            Object ent = col.get(i);\n+            // If a list of supers or interfaces is provided, make sure\n+            // the returned type is an instance of those types\n+            if (types != null) {\n+                for (int j = 0; j < types.length; j++ )\n+                    assertTrue(types[j].isInstance(ent));\n+            }\n+            int id = -1;\n+            try {\n+                Method mth = ent.getClass().getMethod(\"getId\", (Class[])null);\n+                id = (Integer)mth.invoke(ent, (Object[])null);\n+            } catch (Exception e) {\n+                fail(\"Caught unexepcted exception getting entity id: \" \n+                    + e.getMessage());\n+            }\n+            for (int j = 0; j < expectedValues.length; j++)\n+                if (expectedValues[j] == id)                   \n+                    count++;\n+        }\n+        assertTrue(\"Returned expected entities\", \n+                count == expectedValues.length);\n+    }    \n+}"},{"sha":"f65a82eafba3a20fcb8bc322660b8173c3b10a38","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that you can find a concrete subclass record when passing in its\n+ * abstract base class to EntityManager.find().\n+ *\n+ * @author Abe White\n+ */\n+public class TestFindAbstractClass\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AbstractBase.class, ConcreteSubclass.class);\n+\n+        ConcreteSubclass e = new ConcreteSubclass();\n+        e.setId(\"id\");\n+        e.setSubclassData(1); \n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testFind() {\n+        EntityManager em = emf.createEntityManager();\n+        AbstractBase e = em.find(AbstractBase.class, \"id\");\n+        assertNotNull(e);\n+        assertTrue(e instanceof ConcreteSubclass);\n+        assertEquals(1, ((ConcreteSubclass) e).getSubclassData());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestFindAbstractClass.class);\n+    }\n+}\n+"},{"sha":"a4a0c1f87b36139140d09d83f4f97a2fb3bcc19d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Perform basic operations on an inheritance hierarchy involving multiple\n+ * @MappedSuperclasses.\n+ *\n+ * @author Abe White\n+ */\n+public class TestMultipleMappedSuperclassHierarchy\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(MappedSuperclassBase.class, MappedSuperclassL2.class,\n+            EntityL3.class);\n+    }\n+\n+    public void testPersist() {\n+        EntityL3 ent = new EntityL3();\n+        ent.setL2Data(99); \n+        ent.setL3Data(100);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(ent);\n+        em.getTransaction().commit();\n+        long id = ent.getId();\n+        assertTrue(id != 0);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ent = em.find(EntityL3.class, id);\n+        assertNotNull(ent);\n+        assertEquals(99, ent.getL2Data());\n+        assertEquals(100, ent.getL3Data());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestMultipleMappedSuperclassHierarchy.class);\n+    }\n+}\n+"},{"sha":"bd7c43ea695b2fd88aa79b7af9a0985d6181cda7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that sibling classes with a shared id value declared in their \n+ * mapped superclass are distinguished correctly.\n+ *\n+ * @author Abe White\n+ */\n+public class TestSharedMappedSuperclassIdValue\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, NoGenMappedSuperclassBase.class, \n+                NoGenMappedSuperclassL2.class, NoGenEntityL3.class, \n+                NoGenEntityL3Sibling.class);\n+\n+        NoGenEntityL3 ent = new NoGenEntityL3();\n+        ent.setId(1L);\n+        ent.setL2Data(99); \n+        ent.setL3Data(100);\n+        NoGenEntityL3Sibling sib = new NoGenEntityL3Sibling();\n+        sib.setId(1L);\n+        sib.setL2Data(100); \n+        sib.setSiblingL3Data(101);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(ent);\n+        em.persist(sib);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testFind() {\n+        EntityManager em = emf.createEntityManager();\n+        NoGenEntityL3 ent = em.find(NoGenEntityL3.class, 1L);\n+        assertNotNull(ent);\n+        assertEquals(99, ent.getL2Data());\n+        assertEquals(100, ent.getL3Data());\n+\n+        NoGenEntityL3Sibling sib = em.find(NoGenEntityL3Sibling.class, 1L);\n+        assertNotNull(sib);\n+        assertEquals(100, sib.getL2Data());\n+        assertEquals(101, sib.getSiblingL3Data());\n+\n+        em.close();\n+    }\n+\n+    public void testGetReference() {\n+        EntityManager em = emf.createEntityManager();\n+        NoGenEntityL3 ent = em.getReference(NoGenEntityL3.class, 1L);\n+        assertNotNull(ent);\n+\n+        NoGenEntityL3Sibling sib = em.getReference(NoGenEntityL3Sibling.class, 1L);\n+        assertNotNull(sib);\n+\n+        assertEquals(99, ent.getL2Data());\n+        assertEquals(100, ent.getL3Data());\n+        assertEquals(100, sib.getL2Data());\n+        assertEquals(101, sib.getSiblingL3Data());\n+\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestSharedMappedSuperclassIdValue.class);\n+    }\n+}\n+"},{"sha":"2ae5fc7273f7ad30f9dfa1cc8995405aff7cb3f8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\r\n+\r\n+/**\r\n+ * Test that entities, mapped superclasses, and embeddables can all share\r\n+ * the same short names without any collisions.\r\n+ */\r\n+public class TestSharedUnqualifiedClassNames\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(org.apache.openjpa.persistence.inheritance.mappedsuperclass\r\n+                .SharedName1.class,\r\n+            org.apache.openjpa.persistence.inheritance.entity\r\n+                .SharedName1.class,\r\n+            org.apache.openjpa.persistence.inheritance.embeddable\r\n+                .SharedName2.class,\r\n+            org.apache.openjpa.persistence.inheritance.entity\r\n+                .SharedName2.class);\r\n+        emf.createEntityManager().close();\r\n+    }\r\n+\r\n+        public void testMappedSuperclass() {\r\n+        ClassMetaData meta = emf.getConfiguration()\r\n+            .getMetaDataRepositoryInstance()\r\n+            .getMetaData(\"SharedName1\", getClass().getClassLoader(), true);\r\n+        assertEquals(\r\n+            org.apache.openjpa.persistence.inheritance.entity.SharedName1.class,\r\n+            meta.getDescribedType());\r\n+    }\r\n+\r\n+    public void testEmbeddable() {\r\n+        ClassMetaData meta = emf.getConfiguration()\r\n+            .getMetaDataRepositoryInstance()\r\n+            .getMetaData(\"SharedName2\", getClass().getClassLoader(), true);\r\n+        assertEquals(\r\n+            org.apache.openjpa.persistence.inheritance.entity.SharedName2.class,\r\n+            meta.getDescribedType());\r\n+    }\r\n+}\r"},{"sha":"948bdb61f1fae6d88267a5172b1782c3eb3f8471","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n+\r\n+@Entity\r\n+@Table(name=\"TEST\")\r\n+public class RelationOwner {\r\n+\t\r\n+\tprivate Integer id;\r\n+\tprivate Collection<Superclass> supers = new ArrayList<Superclass>();\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId() { return id;\t}\r\n+\tpublic void setId(Integer id) { this.id = id; }\r\n+\t\r\n+\t@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\r\n+\t@ElementJoinColumn(name=\"TEST\", referencedColumnName=\"ID\")\r\n+\tpublic Collection<Superclass> getSupers() {\treturn supers; }\r\n+\tpublic void setSupers(Collection<Superclass> supers) { this.supers = supers; }\r\n+}\r"},{"sha":"612802b734b103ab226817ec62416924d0da67c6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+public class SubID extends SuperID {\r\n+\r\n+}\r"},{"sha":"e1c9b3151fac4d3dda997d935158d483dcc507a3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(SubID.class)\r\n+@Table(name=\"SUB\")\r\n+public class Subclass extends Superclass {\r\n+\t\r\n+\tprivate String attr2;\r\n+\t\r\n+\t@Column(name=\"ATTR2\")\r\n+\tpublic String getAttr2() { return attr2; }\r\n+\tpublic void setAttr2(String attr2) { this.attr2 = attr2; }\r\n+\r\n+}\r"},{"sha":"a5de491975ab0c1167e6a0dc122737460c33f2e3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public abstract class SuperID implements Serializable {\r\n+\t\r\n+\tprivate Integer id;\r\n+\r\n+\tpublic Integer getId() { return id; }\r\n+\tpublic void setId(Integer id) {\tthis.id = id; }\r\n+\t\r\n+\tpublic int hashCode() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (obj == this) return true;\r\n+\t\tif (!(obj instanceof SuperID)) return false;\r\n+\t\tSuperID pk = (SuperID) obj;\r\n+\t\tif ( pk.getId().equals(id)) {\r\n+\t\t\treturn true;\r\n+\t\t} else {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"063806afc7eacb65db6bd17cb38ae2b3219d1cc3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(SuperID.class)\r\n+@Table(name=\"SUPER\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+public abstract class Superclass {\r\n+\t\r\n+\tprivate Integer id;\r\n+\tprivate String attr1;\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId() { return id; }\r\n+\tpublic void setId(Integer id) {\tthis.id = id; }\r\n+\t\r\n+\t@Column(name=\"ATTR1\")\r\n+\tpublic String getAttr1() { return attr1; }\r\n+\tpublic void setAttr1(String attr1) { this.attr1 = attr1; }\r\n+}\r"},{"sha":"1aa23140ceb57c47b455301eae4609e2df0fd1b5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that you traverse an inverse key-baesd relation to an abstract\n+ * class using joined inheritance.\n+ */\n+public class TestAbstractJoinedAppId\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Superclass.class, Subclass.class, RelationOwner.class, \n+            DROP_TABLES);\n+\n+        Subclass s = new Subclass();\n+        s.setId(99);\n+        s.setAttr1(\"supattr\");\n+        s.setAttr2(\"subattr\");\n+    \n+        RelationOwner ro = new RelationOwner();\n+        ro.setId(1);\n+        ro.setSupers(Arrays.asList(new Superclass[] { s }));\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(ro);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testTraverseRelation() {\n+        EntityManager em = emf.createEntityManager();\n+        RelationOwner ro = em.find(RelationOwner.class, 1);\n+        assertNotNull(ro);\n+\n+        Collection supers = ro.getSupers();\n+        assertEquals(1, supers.size());        \n+        Superclass s = (Superclass) supers.iterator().next();\n+        assertTrue(s instanceof Subclass);\n+        assertEquals(new Integer(99), s.getId());\n+        assertEquals(\"supattr\", s.getAttr1());\n+        assertEquals(\"subattr\", ((Subclass) s).getAttr2());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestAbstractJoinedAppId.class);\n+    }\n+}\n+"},{"sha":"4dd8221e49d3812a4278085799e53122094550b2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.embeddable;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+\r\n+/**\r\n+ * This class has the same name as {@link\r\n+ * org.apache.openjpa.persistence.inheritance.entity.SharedName2}\r\n+ */\r\n+@Embeddable\r\n+public class SharedName2 {\r\n+\r\n+}\r"},{"sha":"3679142e502bda0492a304613bc26dc6b27935e4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public abstract class AbstractClass {\n+\n+    @Id\n+    private int id;\n+        \n+    @Basic\n+    private String name;\n+    \n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    abstract public void setVersion(int version);\n+\n+    abstract public int getVersion();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Name=\" + name;\n+    }\n+}"},{"sha":"e89862fe749acd5c2fefacf13ecee986ba5fe5b3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"459167fbf30f502eedbcdd9f1f4f002d7a44abd8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass2 {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"4e9c81975d607d324032c24127be8c9d8c69af34","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass3 {\n+\n+    @Id @GeneratedValue\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"f070cc635ad658c28105da656ec758dd692a2ac0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass4 {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"651ac4ab20cb279c3566d6109a6d127913ee1634","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass5 {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+    \n+    @OneToOne\n+    private SubclassH subclassh;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+    public void setSubclassh(SubclassH subclassh) {\n+        this.subclassh = subclassh;\n+    }\n+\n+    public SubclassH getSubclassh() {\n+        return subclassh;\n+    }\n+\n+}"},{"sha":"1c3267b79399012f3ea0a05282debfdcaaa428d9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class BaseClass6 {\n+\n+    @Id\n+    private int id;\n+        \n+    @Basic\n+    private String name;\n+    \n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Name=\" + name;\n+    }\n+}"},{"sha":"2a9928dd02e0777da24769392829ee28b29cf70d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class ImplClassA implements ManagedIface {\n+\n+    @Basic\n+    private String implClassAName;\n+    \n+    @Id \n+    @GeneratedValue\n+    private int id;\n+    \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setImplClassAName(String implClassAName) {\n+        this.implClassAName = implClassAName;\n+    }\n+\n+    public String getImplClassAName() {\n+        return implClassAName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";implClassAName=\" + implClassAName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+}"},{"sha":"ca73892d8dd77d943ac65491c238b7e4bc899374","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface ManagedIface {\n+    @Id @GeneratedValue\n+    public int getId();\n+    public void setId(int id);\n+\n+    public int getIntFieldSup();\n+    public void setIntFieldSup(int i);\n+}"},{"sha":"029fbbbd5f70a66081cdd1dd045c45b2ef883207","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface ManagedIface2 {\n+    @Id @GeneratedValue\n+    public int getId();\n+    public void setId(int id);\n+\n+    public int getIntFieldSup();\n+    public void setIntFieldSup(int i);\n+}"},{"sha":"3cd30dfdf2626ae3c4d840e653a512d34b0d9ed6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass\n+public class MappedSuper {\n+\n+    @Id\n+    private int id;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"4ef32d951b5f096030ef1ca78d515a5a0b7b1b1f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MidClass extends BaseClass2 {\n+\n+    @Basic\n+    private String midClassName;\n+\n+    public void setMidClassName(String midClassName) {\n+        this.midClassName = midClassName;\n+    }\n+\n+    public String getMidClassName() {\n+        return midClassName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";midClassName=\" + midClassName;\n+    }\n+}"},{"sha":"8edfcd685e341c0748b1a52a401678726550404b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MidClass2 extends BaseClass5 {\n+\n+    @Basic\n+    private String midClass2Name;\n+\n+    public void setMidClass2Name(String midClass2Name) {\n+        this.midClass2Name = midClass2Name;\n+    }\n+\n+    public String getMidClass2Name() {\n+        return midClass2Name;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";midClass2Name=\" + midClass2Name;\n+    }\n+}"},{"sha":"7153a301999255252466d208bcfdd285905619f8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+public class MidClass3 extends BaseClass6 {\n+\n+    private String midClass3Name;\n+\n+    public void setMidClass3Name(String midClass3Name) {\n+        this.midClass3Name = midClass3Name;\n+    }\n+\n+    public String getMidClass2Name() {\n+        return midClass3Name;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";midClass3Name=\" + midClass3Name;\n+    }\n+}"},{"sha":"ddf26e8f24ac71ed956ef3f29772c75d6ed63f44","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * This class has the same name as {@link\r\n+ * org.apache.openjpa.persistence.inheritance.mappedsuperclass.SharedName1}\r\n+ */\r\n+@Entity\r\n+public class SharedName1 {\r\n+\r\n+    @Id\r\n+    private long id;\r\n+}\r"},{"sha":"ed9f500e9ff9c657d4ac5913f77228a59bcb5fd3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * This class has the same name as {@link\r\n+ * org.apache.openjpa.persistence.inheritance.embeddable.SharedName2}\r\n+ */\r\n+@Entity\r\n+public class SharedName2 {\r\n+\r\n+    @Id\r\n+    private long id;\r\n+}\r"},{"sha":"2ea9f30c17b775d294b84e0291cb230bb60be5d4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassA extends BaseClass {\n+\n+    @Basic\n+    private String classAName;\n+\n+    public void setClassAName(String classAName) {\n+        this.classAName = classAName;\n+    }\n+\n+    public String getClassAName() {\n+        return classAName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classAName=\" + classAName;\n+    }\n+}"},{"sha":"831a36097cc023bd8c8eb4a11036361820138311","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassB extends BaseClass {\n+    \n+    @Basic\n+    private String classBName;\n+\n+    public void setClassBName(String classBName) {\n+        this.classBName = classBName;\n+    }\n+\n+    public String getClassBName() {\n+        return classBName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classBName=\" + classBName;\n+    }\n+\n+}"},{"sha":"ce7425489113b529eee892b5a96c56df8dfea1d7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassC extends MappedSuper {\n+\n+    @Basic\n+    private String classCName;\n+\n+    public void setClassCName(String classCName) {\n+        this.classCName = classCName;\n+    }\n+\n+    public String getClassAName() {\n+        return classCName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classCName=\" + classCName;\n+    }\n+    \n+}"},{"sha":"7ac96510a8d435b87925249508ac71ad175f8217","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassD extends MappedSuper {\n+\n+    @Basic\n+    private String classDName;\n+\n+    public void setClassDName(String classDName) {\n+        this.classDName = classDName;\n+    }\n+\n+    public String getClassDName() {\n+        return classDName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classDName=\" + classDName;\n+    }\n+    \n+}"},{"sha":"3dcdfbd699a1959458aa7510c6ce57f5d89c7b14","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassE extends MidClass {\n+\n+    @Basic\n+    private String classEName;\n+\n+    public void setClassEName(String classEName) {\n+        this.classEName = classEName;\n+    }\n+\n+    public String getClassEName() {\n+        return classEName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classEName=\" + classEName;\n+    }\n+}"},{"sha":"21515281a6d6f2e260e48fa4e472b007a87632d7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassF extends BaseClass3 implements ManagedIface2  {\n+\n+    @Basic\n+    private String classFName;\n+        \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setClassFName(String classFName) {\n+        this.classFName = classFName;\n+    }\n+\n+    public String getClassFName() {\n+        return classFName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classFName=\" + classFName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+}"},{"sha":"936dc9993556dd42d2319fb8fa01c5057bf8dc2f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+\n+@Entity\n+@Inheritance\n+public class SubclassG extends BaseClass4 {\n+\n+    @Basic\n+    private String classGName;\n+        \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setClassGName(String classGName) {\n+        this.classGName = classGName;\n+    }\n+\n+    public String getClassGName() {\n+        return classGName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classGName=\" + classGName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+\n+}"},{"sha":"a72cc144759a468f5a5bb7b84e7e133448d00dfd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class SubclassH extends MidClass2 {\n+\n+    @Basic\n+    private String classHName;\n+        \n+    @Basic\n+    private int intFieldSup;\n+    \n+    @OneToOne\n+    private BaseClass5 baseclass5;\n+    \n+    public void setClassHName(String classHName) {\n+        this.classHName = classHName;\n+    }\n+\n+    public String getClassHName() {\n+        return classHName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classHName=\" + classHName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+\n+    public void setBaseclass5(BaseClass5 baseclass5) {\n+        this.baseclass5 = baseclass5;\n+    }\n+\n+    public BaseClass5 getBaseclass5() {\n+        return baseclass5;\n+    }\n+\n+}"},{"sha":"e46280a5907b19266cba513393f4b0aa85bc0865","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class SubclassI extends AbstractClass {\n+\n+    @Basic\n+    private String classIName;\n+   \n+    @Version\n+    private int version;\n+            \n+    public void setClassIName(String classIName) {\n+        this.classIName = classIName;\n+    }\n+\n+    public String getClassIName() {\n+        return classIName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classIName=\" + classIName + \n+        \";Version=\" + version;\n+    }\n+    \n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"bbc398a141946c41f1c125b4b692123f9dbd4c70","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class SubclassJ extends AbstractClass {\n+\n+    @Basic\n+    private String classJName;\n+   \n+    @Version\n+    private int version;\n+            \n+    public void setClassJName(String classJName) {\n+        this.classJName = classJName;\n+    }\n+\n+    public String getClassJName() {\n+        return classJName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classJName=\" + classJName + \n+        \";Version=\" + version;\n+    }\n+    \n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"ffe5986fcfbad8021d22f4f0c6ce1586b511448e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassK extends MidClass3 {\n+\n+    @Basic\n+    private String classKName;\n+               \n+    public void setClassKName(String classKName) {\n+        this.classKName = classKName;\n+    }\n+\n+    public String getClassKName() {\n+        return classKName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classKName=\" + classKName; \n+    }    \n+}"},{"sha":"07a4c090a5e1d319369421cdaf061ad980cf11ec","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n+\r\n+import javax.persistence.MappedSuperclass;\r\n+\r\n+/**\r\n+ * This class has the same name as {@link\r\n+ * org.apache.openjpa.persistence.inheritance.entity.SharedName1}\r\n+ */\r\n+@MappedSuperclass\r\n+public class SharedName1 {\r\n+\r\n+}\r"},{"sha":"a5f5622fabfef091f6dd90dea3f16c775a622324","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.MappedSuperclass;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * An abstract base entity class with auto-generated identty and version field.\r\n+ * Used for testing special case of table-per-class inheritance strategy when \r\n+ * the root of persistent inheritance hierarchy is abstract and itself \r\n+ * derives from an abstract MappedSuperClass (i.e. this class).\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+@MappedSuperclass\r\n+public abstract class BaseEntity {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@Version\r\n+\tprivate long version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic long getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"1572ffb0eedd6154eaa07d00662b6d221b209f71","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class EnglishParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"},{"sha":"16aba3f065fea0f0db965b6928854c89edaf366a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class FrenchParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"},{"sha":"8852f56e074fd0fa92985f3940fe38edd04d52af","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class GermanParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"},{"sha":"f9e25c4e8df19468eb5f1642e8d6fa20d764a02f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,155 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests a domain featureSelection with following characteristics:\r\n+ * a) A typical bidirectional ManyToOne/OneToMany relation \r\n+ *    EntityA references a single instance of EntityB\r\n+ *    EntityB references a collection of EntityA\r\n+ * b) EntityB itself is abstract \r\n+ * c) Many concrete subclasses of EntityB exist\r\n+ * d) EntityB uses TABLE_PER_CLASS inheritance strategy, hence no mapping table \r\n+ *    exists for EntityB itself.\r\n+ * e) Relation field in EntityA is declared as abstract type EntityB (for which\r\n+ * f) all the domain classes i.e. EntityA, EntityB and all its subclasses is\r\n+ *    derived from an abstract MappedSuperClass which holds primary key and\r\n+ *    version fields.\r\n+ *    \r\n+ *  The test addresses a reported error [1] in mapping the above domain featureSelection.\r\n+ *  The test verifies basic persist, query and delete operations on the domain\r\n+ *  featureSelection.\r\n+ *  \r\n+ *  [1] <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-602\"> OPENJPA-602</A>}\r\n+ *        \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestTablePerClassInheritanceWithAbstractRoot extends\r\n+\t\tSingleEMFTestCase {\r\n+\tClass[] UNJOINED_SUBCLASSES = {\r\n+\t\t\tEnglishParagraph.class, \r\n+\t\t\tFrenchParagraph.class, \r\n+\t\t\tGermanParagraph.class};\r\n+\t\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, \r\n+        \t\t\"openjpa.Log\", \"SQL=TRACE\", \r\n+        \t\tTranslation.class, BaseEntity.class,\r\n+        \t\tEnglishParagraph.class, FrenchParagraph.class, \r\n+        \t\tGermanParagraph.class, Translatable.class);\r\n+    }\r\n+    \r\n+\tpublic void testConsistency() {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t/**\r\n+\t\t * Aggregate query operations can not be performed on unjoined \r\n+\t\t * subclasses. Hence all concrete subclasses of abstract base\r\n+\t\t * class is counted separately to count all Translatable instances.\r\n+\t\t */\r\n+\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationBefore = count(Translation.class);\r\n+\t\t\r\n+\t\tEnglishParagraph english = new EnglishParagraph();\r\n+\t\tFrenchParagraph french   = new FrenchParagraph();\r\n+\t\tGermanParagraph german   = new GermanParagraph();\r\n+\t\t\r\n+\t\tTranslation translation1 = new Translation(); \r\n+\t\tTranslation translation2 = new Translation(); \r\n+\t\tTranslation translation3 = new Translation(); \r\n+\t\tTranslation translation4 = new Translation(); \r\n+\t\t\r\n+\t\tenglish.setContent(\"Hello\");\r\n+\t\tfrench.setContent(\"Bon jour\");\r\n+\t\tgerman.setContent(\"Guten Tag\");\r\n+\r\n+\t\t\r\n+\t\ttranslation1.setTranslatable(english);\r\n+\t\ttranslation2.setTranslatable(english);\r\n+\t\ttranslation3.setTranslatable(french);\r\n+\t\ttranslation4.setTranslatable(german);\r\n+\t\t\r\n+\t\tenglish.addTranslation(translation1);\r\n+\t\tenglish.addTranslation(translation2);\r\n+\t\tfrench.addTranslation(translation3);\r\n+\t\tgerman.addTranslation(translation4);\r\n+\t\t\r\n+\t\tem.persist(translation1);\r\n+\t\tem.persist(translation2);\r\n+\t\tem.persist(translation3);\r\n+\t\tem.persist(translation4);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tem.clear();\r\n+\r\n+\t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationAfter  = count(Translation.class);\r\n+\t\t\r\n+\t\tassertEquals(nTranslatableBefore+3, nTranslatableAfter);\r\n+\t\tassertEquals(nTranslationBefore+4, nTranslationAfter);\r\n+\t\t\r\n+\t\t/**\r\n+\t\t * Verify that if A refers to B then A must be a member of the set \r\n+\t\t * referred by B\r\n+\t\t */\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Translation> result = em.createQuery(\"SELECT p FROM Translation p\")\r\n+\t\t\t.getResultList();\r\n+\t\tassertTrue(!result.isEmpty());\r\n+\t\tfor (Translation translation : result) {\r\n+\t\t\tassertTrue(translation.getTranslatable()\r\n+\t\t\t\t\t.getTranslations().contains(translation));\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\t\r\n+\tvoid linkConsistently(Translation translation, Translatable translatable) {\r\n+\t\ttranslatable.addTranslation(translation);\r\n+\t\ttranslation.setTranslatable(translatable);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count the number of instances in the given class by aggregate JPQL query.\r\n+\t */\r\n+\tpublic int count(Class c) {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\treturn ((Number) em.createQuery(\"SELECT COUNT(p) FROM \" + \r\n+\t\t\t\tc.getSimpleName() + \" p\").getSingleResult()).intValue();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count total number of instances of all the given classes by separate JPQL\r\n+\t * aggregate query. Useful when a base class has unjoined subclasses.\r\n+\t */\r\n+\tpublic int count(Class... classes) {\r\n+\t\tint total = 0;\r\n+\t\tfor (Class c:classes) {\r\n+\t\t\ttotal += count(c);\r\n+\t\t}\r\n+\t\treturn total;\r\n+\t}\r\n+\t\r\n+}\r"},{"sha":"f995bfaedbc380301d58b946c703cf47d75c67ae","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+/**\r\n+ * An abstract persistent class used as root of inheritance hierarchy and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+public abstract class Translatable extends BaseEntity {\r\n+\t@OneToMany(mappedBy=\"translatable\", cascade=CascadeType.PERSIST)\r\n+\tprivate Set<Translation> translations;\r\n+\t\r\n+\tpublic void addTranslation(Translation t) {\r\n+\t\tif (translations == null)\r\n+\t\t\ttranslations = new HashSet<Translation>();\r\n+\t\ttranslations.add(t);\r\n+\t}\r\n+\t\r\n+\tpublic Set<Translation> getTranslations() {\r\n+\t\treturn Collections.unmodifiableSet(translations);\r\n+\t}\r\n+}\r"},{"sha":"1b93a0390c2e8a357d4dde4b371463e54c6e6659","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"TRANSLATIONS\")\r\n+/**\r\n+ * An persistent class that refers to a polymorphic uni-cardinality relation. \r\n+ * The polymorphic relation itself derives from an abstract class that uses\r\n+ * table-per-class inheritance strategy.\r\n+ *   \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class Translation extends BaseEntity {\r\n+\t@ManyToOne(cascade=CascadeType.PERSIST)\r\n+\tprivate Translatable translatable;\r\n+\r\n+\tpublic Translatable getTranslatable() {\r\n+\t\treturn translatable;\r\n+\t}\r\n+\r\n+\tpublic void setTranslatable(Translatable translatable) {\r\n+\t\tthis.translatable = translatable;\r\n+\t}\r\n+}\r"},{"sha":"031fea4df45c4ea39a57caea14c386902e78de2f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.serializable;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class Employee extends Person {\n+\n+    private float salary;\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + Float.floatToIntBits(getSalary());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (!super.equals(obj))\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        final Employee other = (Employee) obj;\n+        if (Float.floatToIntBits(getSalary()) != Float.floatToIntBits(other\n+                .getSalary()))\n+            return false;\n+        return true;\n+    }\n+\n+}"},{"sha":"72143db00c77a35d359ef974171feee4db25839c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.serializable;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Person implements Serializable {\n+\n+    private static final long serialVersionUID = -862917178229746730L;\n+\n+    private int id; \n+    \n+    private String firstName;\n+    \n+    private String lastName;\n+\n+    @Id\n+    @GeneratedValue\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+                + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+                + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        final Person other = (Person) obj;\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null)\n+                return false;\n+        } else if (!getFirstName().equals(other.getFirstName()))\n+            return false;\n+        if (getId() != other.getId())\n+            return false;\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null)\n+                return false;\n+        } else if (!getLastName().equals(other.getLastName()))\n+            return false;\n+        return true;\n+    } \n+}"},{"sha":"179c7319871f8765cc5bfed7dea60a4d36febe85","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.serializable;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSerialization extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Person.class, Employee.class, \"openjpa.DetachState\",\n+                \"fgs(DetachedStateField=true)\");\n+    }\n+\n+    /**\n+     * Simulates detaching and sending an entity to a remote client. The remote\n+     * client updates the detached entity and sends it back to the server. The\n+     * server merges the entity back into a persistence context and commits the\n+     * changes. \n+     */\n+    public void testDetachedUpdate() {\n+        Employee emp = new Employee();\n+        emp.setFirstName(\"John\");\n+        emp.setLastName(\"Doe\");\n+        emp.setSalary(15000);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(emp);\n+        em.refresh(emp);\n+        int id = emp.getId();\n+\n+        em.getTransaction().commit();\n+\n+        // detach\n+        em.clear();\n+        emp.setFirstName(\"Jane\");\n+\n+        Employee deserialized = (Employee) serializeObject(emp);\n+\n+        assertNotNull(deserialized);\n+        assertEquals(emp, deserialized);\n+\n+        em.getTransaction().begin();\n+        em.merge(deserialized);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        emp = em.find(Employee.class, id);\n+\n+        assertEquals(deserialized, emp);\n+    }\n+\n+    /**\n+     * Helper to serialize an object to a byte[]\n+     */\n+    private Object serializeObject(Object orig) {\n+        Object deserialized = null;\n+\n+        try {\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ObjectOutputStream oos = new ObjectOutputStream(baos);\n+            oos.writeObject(orig);\n+\n+            ByteArrayInputStream bais = new ByteArrayInputStream(baos\n+                    .toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+            deserialized = ois.readObject();\n+        } catch (Exception e) {\n+            fail(e.toString());\n+        }\n+        return deserialized;\n+    }\n+}"},{"sha":"b9aba608c6a2706573b6987e16a5dbc1bdcc0b00","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.regexp.RE;\r\n+\r\n+/**\r\n+ * Utility class to verify whether a set of fragments appear in a list of\r\n+ * possible SQL statement.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class SQLSniffer {\r\n+\t\r\n+\tprivate static Map<String, RE> cache = new HashMap<String, RE>();\r\n+\t/**\r\n+\t * Checks that the given set of regular expressions occur in at least one of\r\n+\t * the given input SQL.\r\n+\t */\r\n+\tpublic static boolean matches(List<String> SQLs, String...regexes) {\r\n+\t\tif (SQLs == null || regexes == null)\r\n+\t\t\treturn false;\r\n+\t\tfor (String sql : SQLs) {\r\n+\t\t\tboolean matched = true;\r\n+\t\t\tfor (String key : regexes) {\r\n+\t\t\t\tRE regex = getRegularExpression(key);\r\n+\t\t\t\tif (!regex.match(sql)) {\r\n+\t\t\t\t\tmatched = false;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matched)\r\n+\t\t\t\treturn true;\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\t\r\n+\tprivate static RE getRegularExpression(String regex) {\r\n+\t\tif (cache.containsKey(regex)) \r\n+\t\t\treturn cache.get(regex);\r\n+\t\tRE re = new RE(regex);\r\n+\t\tcache.put(regex, re);\r\n+\t\treturn re;\r\n+\t}\r\n+}\r"},{"sha":"60e6f1164ae57e3408e11840a8f80d606b35c29b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Testcase that verifies the names for Foreign Key columns is as expected.\n+ */\n+public class TestFKColumnNames extends TestCase {\n+\n+    OpenJPAEntityManagerFactorySPI emf =\n+            (OpenJPAEntityManagerFactorySPI) Persistence\n+                    .createEntityManagerFactory(\"test\");\n+\n+    /**\n+     * <P>\n+     * If a Foreign Key field contains a SQL reserved word, the resulting column\n+     * should be named ${reservedWord}_ID, not ${reservedWord}<B>0</B>_ID.\n+     * </P>\n+     * <P>\n+     * This test does not take into account and DB specific reserved words and\n+     * can be run with any DBDictionary.\n+     * </P>\n+     */\n+    public void testSQLKeywords() {\n+        MappingRepository repos =\n+                (MappingRepository) emf.getConfiguration()\n+                        .getMetaDataRepositoryInstance();\n+\n+        assertEquals(\"SELECT_ID\", repos.getMapping(Inner1.class, null, true)\n+                .getFieldMapping(\"select\").getColumns()[0].getName());\n+\n+        assertEquals(\"FROM_ID\", repos.getMapping(Inner2.class, null, true)\n+                .getFieldMapping(\"from\").getColumns()[0].getName());\n+    }\n+\n+    @Entity\n+    public static class Inner1 {\n+        @Id\n+        @GeneratedValue\n+        int id;\n+\n+        @OneToOne\n+        Inner2 select;\n+\n+        public Inner2 getSelect() {\n+            return select;\n+        }\n+\n+        public void setSelect(Inner2 select) {\n+            this.select = select;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    @Entity\n+    public static class Inner2 {\n+        @Id\n+        @GeneratedValue\n+        int id;\n+\n+        @OneToOne\n+        Inner1 from;\n+\n+        public Inner1 getFrom() {\n+            return from;\n+        }\n+\n+        public void setFrom(Inner1 from) {\n+            this.from = from;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+    }\n+}"},{"sha":"41c0298fb2d6920bedffee052d518482974b6674","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.InvalidStateException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+\n+public class TestIsolationLevelOverride\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class,\n+            \"openjpa.Optimistic\", \"false\",\n+            \"openjpa.LockManager\", \"pessimistic\");\n+    }\n+\n+    public void testIsolationOverrideViaFetchPlan() {\n+        testIsolationLevelOverride(false, false);\n+    }\n+\n+    public void testIsolationOverrideViaHint() {\n+        testIsolationLevelOverride(true, false);\n+    }\n+\n+    public void testIsolationOverrideViaStringHint() {\n+        testIsolationLevelOverride(true, true);\n+    }\n+\n+    public void testIsolationLevelOverride(boolean useHintsAndQueries,\n+        boolean useStringHints) {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+\n+        // hsql doesn't support locking; circumvent the test\n+        if (dict instanceof HSQLDictionary)\n+            return;\n+\n+        sql.clear();\n+        try {\n+            em.getTransaction().begin();\n+            if (useHintsAndQueries) {\n+                Query q = em.createQuery(\n+                \"select o from AllFieldTypes o where o.intField = :p\");\n+                q.setParameter(\"p\", 0);\n+                if (useStringHints) {\n+                    q.setHint(\"openjpa.FetchPlan.Isolation\", \"SERIALIZABLE\");\n+                } else {\n+                    q.setHint(\"openjpa.FetchPlan.Isolation\",\n+                        IsolationLevel.SERIALIZABLE);\n+                }\n+\n+                assertEquals(IsolationLevel.SERIALIZABLE,\n+                    ((JDBCFetchPlan) ((OpenJPAQuery) q).getFetchPlan())\n+                        .getIsolation());\n+\n+                q.getResultList();\n+                if (dict instanceof DB2Dictionary) {\n+                    int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                    if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                        || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n+                        assertEquals(1, sql.size());\n+                        assertContainsSQL(\" FOR UPDATE\");\n+                    }\n+                    // it is DB2 v82 or later\n+                    else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                        || db2server == DB2Dictionary.db2UDBV82OrLater) {\n+                        assertEquals(1, sql.size());\n+                        assertContainsSQL(\" FOR READ ONLY WITH RR USE AND KEEP \" \n+                            + \"UPDATE LOCKS\");\n+                    }\n+                    else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n+                        assertEquals(1, sql.size());\n+                        assertContainsSQL(\" FOR READ ONLY WITH RR USE AND KEEP\" \n+                            + \" EXCLUSIVE LOCKS\");\n+                    }    \n+                    else {\n+                        fail(\"OpenJPA currently only supports \" \n+                            +\"per-query isolation level configuration on the\" \n+                            +\" following databases: DB2\");\n+                    }\n+                }    \n+            } else {\n+                ((JDBCFetchPlan) em.getFetchPlan())\n+                    .setIsolation(IsolationLevel.SERIALIZABLE);\n+                em.find(AllFieldTypes.class, 0);\n+                if (dict instanceof DB2Dictionary ) {\n+                    int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                    if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                        || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n+                        assertEquals(1, sql.size());\n+                        assertContainsSQL(\" optimize for 1 row FOR UPDATE\");\n+                    }\n+                    // it is DB2 v82 or later\n+                    else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                        || db2server == DB2Dictionary.db2UDBV82OrLater) {\n+                        assertEquals(1, sql.size());\n+                        assertContainsSQL(\" optimize for 1 row\"\n+                            + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n+                            );\n+                    }\n+                    else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n+                        assertEquals(1, sql.size());\n+                        assertContainsSQL(\" optimize for 1 row\"\n+                            + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE\" \n+                            + \" LOCKS\");\n+                    }    \n+                    else {\n+                        fail(\"OpenJPA currently only supports per-query\" \n+                            +\" isolation level configuration on the following\" \n+                            +\" databases: DB2\");\n+                    }\n+                }    \n+            }\n+        } catch (InvalidStateException pe) {\n+            // if we're not using DB2, we expect an InvalidStateException.\n+            if (dict instanceof DB2Dictionary)\n+                throw pe;\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"988c79193a72d6d5902d04ce7c152c3703d066ef","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,166 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import java.sql.ResultSet;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\r\n+import org.apache.openjpa.jdbc.kernel.LRSSizes;\r\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\r\n+\r\n+public class TestJDBCEnumToKernelConstantMappings\r\n+    extends TestCase {\r\n+\r\n+    public void testEagerFetchModes() {\r\n+        assertEquals(EagerFetchModes.EAGER_NONE,\r\n+            FetchMode.NONE.toKernelConstant());\r\n+        assertEquals(FetchMode.NONE,\r\n+            FetchMode.fromKernelConstant(\r\n+                EagerFetchModes.EAGER_NONE));\r\n+        assertEquals(FetchMode.NONE.toKernelConstant(),\r\n+            FetchMode.NONE.ordinal());\r\n+\r\n+        assertEquals(EagerFetchModes.EAGER_JOIN,\r\n+            FetchMode.JOIN.toKernelConstant());\r\n+        assertEquals(FetchMode.JOIN,\r\n+            FetchMode.fromKernelConstant(\r\n+                EagerFetchModes.EAGER_JOIN));\r\n+        assertEquals(FetchMode.JOIN.toKernelConstant(),\r\n+            FetchMode.JOIN.ordinal());\r\n+\r\n+        assertEquals(EagerFetchModes.EAGER_PARALLEL,\r\n+            FetchMode.PARALLEL.toKernelConstant());\r\n+        assertEquals(FetchMode.PARALLEL,\r\n+            FetchMode.fromKernelConstant(\r\n+                EagerFetchModes.EAGER_PARALLEL));\r\n+        assertEquals(FetchMode.PARALLEL.toKernelConstant(),\r\n+            FetchMode.PARALLEL.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(EagerFetchModes.class),\r\n+            FetchMode.values().length);\r\n+    }\r\n+\r\n+    public void testLRSSizeType() {\r\n+        assertEquals(LRSSizes.SIZE_UNKNOWN,\r\n+            LRSSizeAlgorithm.UNKNOWN.toKernelConstant());\r\n+        assertEquals(LRSSizeAlgorithm.UNKNOWN,\r\n+            LRSSizeAlgorithm.fromKernelConstant(\r\n+                LRSSizes.SIZE_UNKNOWN));\r\n+        assertEquals(LRSSizeAlgorithm.UNKNOWN.toKernelConstant(),\r\n+            LRSSizeAlgorithm.UNKNOWN.ordinal());\r\n+\r\n+        assertEquals(LRSSizes.SIZE_LAST,\r\n+            LRSSizeAlgorithm.LAST.toKernelConstant());\r\n+        assertEquals(LRSSizeAlgorithm.LAST,\r\n+            LRSSizeAlgorithm.fromKernelConstant(\r\n+                LRSSizes.SIZE_LAST));\r\n+        assertEquals(LRSSizeAlgorithm.LAST.toKernelConstant(),\r\n+            LRSSizeAlgorithm.LAST.ordinal());\r\n+\r\n+        assertEquals(LRSSizes.SIZE_QUERY,\r\n+            LRSSizeAlgorithm.QUERY.toKernelConstant());\r\n+        assertEquals(LRSSizeAlgorithm.QUERY,\r\n+            LRSSizeAlgorithm.fromKernelConstant(\r\n+                LRSSizes.SIZE_QUERY));\r\n+        assertEquals(LRSSizeAlgorithm.QUERY.toKernelConstant(),\r\n+            LRSSizeAlgorithm.QUERY.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(LRSSizes.class),\r\n+            LRSSizeAlgorithm.values().length);\r\n+    }\r\n+\r\n+    public void testJoinSyntaxType() {\r\n+        assertEquals(JoinSyntaxes.SYNTAX_SQL92,\r\n+            JoinSyntax.SQL92.toKernelConstant());\r\n+        assertEquals(JoinSyntax.SQL92,\r\n+            JoinSyntax.fromKernelConstant(\r\n+                JoinSyntaxes.SYNTAX_SQL92));\r\n+        assertEquals(JoinSyntax.SQL92.toKernelConstant(),\r\n+            JoinSyntax.SQL92.ordinal());\r\n+\r\n+        assertEquals(JoinSyntaxes.SYNTAX_TRADITIONAL,\r\n+            JoinSyntax.TRADITIONAL.toKernelConstant());\r\n+        assertEquals(JoinSyntax.TRADITIONAL,\r\n+            JoinSyntax.fromKernelConstant(\r\n+                JoinSyntaxes.SYNTAX_TRADITIONAL));\r\n+        assertEquals(JoinSyntax.TRADITIONAL.toKernelConstant(),\r\n+            JoinSyntax.TRADITIONAL.ordinal());\r\n+\r\n+        assertEquals(JoinSyntaxes.SYNTAX_DATABASE,\r\n+            JoinSyntax.DATABASE.toKernelConstant());\r\n+        assertEquals(JoinSyntax.DATABASE,\r\n+            JoinSyntax.fromKernelConstant(\r\n+                JoinSyntaxes.SYNTAX_DATABASE));\r\n+        assertEquals(JoinSyntax.DATABASE.toKernelConstant(),\r\n+            JoinSyntax.DATABASE.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(JoinSyntaxes.class),\r\n+            JoinSyntax.values().length);\r\n+    }\r\n+\r\n+    public void testResultSetType() {\r\n+        assertEquals(ResultSet.TYPE_FORWARD_ONLY,\r\n+            ResultSetType.FORWARD_ONLY.toKernelConstant());\r\n+        assertEquals(ResultSetType.FORWARD_ONLY,\r\n+            ResultSetType.fromKernelConstant(\r\n+                ResultSet.TYPE_FORWARD_ONLY));\r\n+\r\n+        assertEquals(ResultSet.TYPE_SCROLL_INSENSITIVE,\r\n+            ResultSetType.SCROLL_INSENSITIVE.toKernelConstant());\r\n+        assertEquals(ResultSetType.SCROLL_INSENSITIVE,\r\n+            ResultSetType.fromKernelConstant(\r\n+                ResultSet.TYPE_SCROLL_INSENSITIVE));\r\n+\r\n+        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE,\r\n+            ResultSetType.SCROLL_SENSITIVE.toKernelConstant());\r\n+        assertEquals(ResultSetType.SCROLL_SENSITIVE,\r\n+            ResultSetType.fromKernelConstant(\r\n+                ResultSet.TYPE_SCROLL_SENSITIVE));\r\n+\r\n+        assertEquals(3, ResultSetType.values().length);\r\n+    }\r\n+\r\n+    public void testFetchDirection() {\r\n+        assertEquals(ResultSet.FETCH_FORWARD,\r\n+            FetchDirection.FORWARD.toKernelConstant());\r\n+        assertEquals(FetchDirection.FORWARD,\r\n+            FetchDirection.fromKernelConstant(\r\n+                ResultSet.FETCH_FORWARD));\r\n+\r\n+        assertEquals(ResultSet.FETCH_REVERSE,\r\n+            FetchDirection.REVERSE.toKernelConstant());\r\n+        assertEquals(FetchDirection.REVERSE,\r\n+            FetchDirection.fromKernelConstant(\r\n+                ResultSet.FETCH_REVERSE));\r\n+\r\n+        assertEquals(ResultSet.FETCH_UNKNOWN,\r\n+            FetchDirection.UNKNOWN.toKernelConstant());\r\n+        assertEquals(FetchDirection.UNKNOWN,\r\n+            FetchDirection.fromKernelConstant(\r\n+                ResultSet.FETCH_UNKNOWN));\r\n+\r\n+        assertEquals(3, FetchDirection.values().length);\r\n+    }\r\n+\r\n+\r\n+    private int getConstantCount(Class cls) {\r\n+        return cls.getDeclaredFields().length;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"c8ba92349078a8b2061d2a480a987da3900919db","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n+import org.apache.openjpa.jdbc.sql.HSQLDictionary;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+\r\n+public class TestOptimizeForClause\r\n+    extends SQLListenerTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class);\r\n+    }\r\n+\r\n+    public void testOptimizeForClauseViaHint() {\r\n+        testOptimizeForClause(true,false,false);\r\n+    }\r\n+\r\n+    public void testOptimizeForClauseViaFind() {\r\n+        testOptimizeForClause(false,true,false);\r\n+    }\r\n+    public void testOptimizeForClauseViaQueryHint() {\r\n+        testOptimizeForClause(false,true,true);\r\n+    }\r\n+    public void testOptimizeForClause(boolean hint,\r\n+        boolean find, boolean queryHint) {\r\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\r\n+            .getDBDictionaryInstance();\r\n+\r\n+        // hsql doesn't support optimizing; circumvent the test\r\n+        if (dict instanceof HSQLDictionary)\r\n+            return;\r\n+\r\n+        sql.clear();\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            if (hint || queryHint) {\r\n+                if (hint) {\r\n+                    Query q = em.createQuery(\r\n+                    \"select o from AllFieldTypes o where o.intField = :p\");\r\n+                    q.setParameter(\"p\", 0);\r\n+                    q.setHint(\"openjpa.hint.OptimizeResultCount\"\r\n+                         ,new Integer(8));\r\n+                    q.getResultList();\r\n+                }    \r\n+                else {\r\n+                    OpenJPAQuery q =  OpenJPAPersistence.cast (em.createQuery \r\n+                        (\"select o from AllFieldTypes o where o.intField \" +\r\n+                         \"= :p\"));\r\n+                    q.setParameter(\"p\", 0);\r\n+                    q.setHint(q.HINT_RESULT_COUNT, new Integer(8)); \r\n+                    q.getResultList();\r\n+               }     \r\n+               if (dict instanceof DB2Dictionary) {\r\n+                   assertEquals(1, sql.size());\r\n+                   assertContainsSQL(\" optimize for 8 row\");\r\n+               }\r\n+            }\r\n+            else {\r\n+                 em.find(AllFieldTypes.class, 0);\r\n+                 if (dict instanceof DB2Dictionary ) {\r\n+                    assertEquals(1, sql.size());\r\n+                    assertContainsSQL(\" optimize for 1 row\");\r\n+                }\r\n+                   \r\n+            }\r\n+        } catch (InvalidStateException pe) {\r\n+            // if we're not using DB2, we expect an InvalidStateException.\r\n+            if (dict instanceof DB2Dictionary)\r\n+                throw pe;\r\n+        } finally {\r\n+            em.getTransaction().rollback();\r\n+            em.close();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"3c6cdf965506b10957358901d0bfed27b51f72ce","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+\n+public class TestSelectForUpdateOverride\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class,\n+            \"openjpa.Optimistic\", \"false\",\n+            \"openjpa.LockManager\", \"pessimistic\",\n+            \"openjpa.ReadLockLevel\", \"none\");\n+    }\n+\n+    public void testSelectForUpdateOverride() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI)\n+            OpenJPAPersistence.cast(emf.createEntityManager());\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+\n+        // hsql doesn't support locking; circumvent the test\n+        if (dict instanceof HSQLDictionary)\n+            return;\n+\n+        sql.clear();\n+        try {\n+            em.getTransaction().begin();\n+            OpenJPAPersistence.cast(em).getFetchPlan()\n+                .setReadLockMode(LockModeType.WRITE);\n+            em.find(AllFieldTypes.class, 0);\n+            assertEquals(1, sql.size());\n+            if (dict instanceof DB2Dictionary) {\n+                int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                    || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n+                    assertEquals(1, sql.size());\n+                    assertContainsSQL(\" optimize for 1 row FOR UPDATE\");\n+                }\n+                // it is DB2 v82 or later\n+                else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                    || db2server == DB2Dictionary.db2UDBV82OrLater) {\n+                    assertEquals(1, sql.size());\n+                    assertContainsSQL(\" optimize for 1 row\"\n+                        + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\");\n+                }\n+                else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n+                    assertEquals(1, sql.size());\n+                    assertContainsSQL(\" optimize for 1 row\"\n+                        + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n+                        );\n+                }    \n+                else {\n+                    fail(\"OpenJPA currently only supports per-query isolation \" \n+                        + \"level configuration on the following databases: \"\n+                        + \"DB2\");\n+                }\n+            }    \n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"e4400fbdaa328880c0b28ceaecb93829a6c382b1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","status":"added","additions":312,"deletions":0,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,312 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"ANNOTEST1\")\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@DiscriminatorColumn(name = \"ANNOCLS\")\r\n+@DiscriminatorValue(\"ANNO1\")\r\n+@SecondaryTables({ @SecondaryTable(name = \"OTHER_ANNOTEST1\",\r\n+    pkJoinColumns = @PrimaryKeyJoinColumn(name = \"OTHER_PK\",\r\n+        referencedColumnName = \"PK\")) })\r\n+public class AnnoTest1 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    protected Long pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"ANNOVER\")\r\n+    protected int version;\r\n+\r\n+    @Basic\r\n+    protected int basic;\r\n+\r\n+    @Transient\r\n+    protected int trans;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"OTHERVALUE\", table = \"OTHER_ANNOTEST1\")\r\n+    protected int otherTableBasic;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"SELFONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 selfOneOne;\r\n+\r\n+    @OneToOne\r\n+    @PrimaryKeyJoinColumn\r\n+    protected AnnoTest1 pkJoinSelfOneOne;\r\n+\r\n+    @OneToOne\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"ONEONE_PK1\", referencedColumnName = \"PK1\"),\r\n+    @JoinColumn(name = \"ONEONE_PK2\", referencedColumnName = \"PK2\") })\r\n+    protected AnnoTest2 oneOne;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"OTHERONE_PK1\", referencedColumnName = \"PK1\",\r\n+        table = \"OTHER_ANNOTEST1\"),\r\n+    @JoinColumn(name = \"OTHERONE_PK2\", referencedColumnName = \"PK2\",\r\n+        table = \"OTHER_ANNOTEST1\") })\r\n+    protected AnnoTest2 otherTableOneOne;\r\n+\r\n+    @OneToOne(mappedBy = \"inverseOneOne\", fetch = FetchType.LAZY)\r\n+    protected AnnoTest2 inverseOwnerOneOne;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"BLOBVAL\")\r\n+    protected byte[] blob;\r\n+\r\n+    @Basic\r\n+    @Lob\r\n+    @Column(name = \"SERVAL\")\r\n+    protected Object serial;\r\n+\r\n+    @Column(name = \"CLOBVAL\")\r\n+    @Lob\r\n+    protected String clob;\r\n+\r\n+    // un-annotated enum should be persisted by default\r\n+    @Column(name = \"ENUMVAL\")\r\n+    protected InheritanceType enumeration;\r\n+\r\n+    @Enumerated\r\n+    @Column(name = \"ORD_ENUMVAL\")\r\n+    protected InheritanceType ordinalEnumeration;\r\n+\r\n+    @Enumerated(EnumType.STRING)\r\n+    @Column(name = \"STR_ENUMVAL\")\r\n+    protected InheritanceType stringEnumeration;\r\n+\r\n+    @OneToMany\r\n+    @ElementJoinColumn(name = \"ONEMANY_PK\", referencedColumnName = \"PK\")\r\n+    protected Set<AnnoTest2> oneMany = new HashSet();\r\n+\r\n+    @OneToMany(mappedBy = \"oneManyOwner\")\r\n+    protected Set<AnnoTest2> inverseOwnerOneMany = new HashSet();\r\n+\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"ANNOTEST1_MANYMANY\",\r\n+        joinColumns = @JoinColumn(name = \"MANY_PK\"),\r\n+        inverseJoinColumns = {\r\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") })\r\n+    protected Set<AnnoTest2> manyMany = new HashSet();\r\n+\r\n+    @ManyToMany(mappedBy = \"manyMany\")\r\n+    protected Set<AnnoTest2> inverseOwnerManyMany = new HashSet();\r\n+\r\n+    @MapKey\r\n+    @OneToMany\r\n+    protected Map<Integer, Flat1> defaultMapKey = new HashMap();\r\n+\r\n+    @MapKey(name = \"basic\")\r\n+    @OneToMany\r\n+    protected Map<Integer, Flat1> namedMapKey = new HashMap();\r\n+\r\n+    @MapKey(name = \"basic\")\r\n+    @OneToMany(mappedBy = \"oneManyOwner\")\r\n+    protected Map<String, AnnoTest2> inverseOwnerMapKey = new HashMap();\r\n+\r\n+    public AnnoTest1() {\r\n+    }\r\n+\r\n+    public AnnoTest1(long pk) {\r\n+        this(new Long(pk));\r\n+    }\r\n+\r\n+    public AnnoTest1(Long pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public void setPk(Long val) {\r\n+        pk = val;\r\n+    }\r\n+\r\n+    public Long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setTransient(int i) {\r\n+        trans = i;\r\n+    }\r\n+\r\n+    public int getTransient() {\r\n+        return trans;\r\n+    }\r\n+\r\n+    public void setOtherTableBasic(int i) {\r\n+        otherTableBasic = i;\r\n+    }\r\n+\r\n+    public int getOtherTableBasic() {\r\n+        return otherTableBasic;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(AnnoTest1 other) {\r\n+        selfOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getSelfOneOne() {\r\n+        return selfOneOne;\r\n+    }\r\n+\r\n+    public void setPKJoinSelfOneOne(AnnoTest1 other) {\r\n+        pkJoinSelfOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getPKJoinSelfOneOne() {\r\n+        return pkJoinSelfOneOne;\r\n+    }\r\n+\r\n+    public void setOneOne(AnnoTest2 other) {\r\n+        oneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getOneOne() {\r\n+        return oneOne;\r\n+    }\r\n+\r\n+    public void setOtherTableOneOne(AnnoTest2 other) {\r\n+        otherTableOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getOtherTableOneOne() {\r\n+        return otherTableOneOne;\r\n+    }\r\n+\r\n+    public void setInverseOwnerOneOne(AnnoTest2 other) {\r\n+        inverseOwnerOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getInverseOwnerOneOne() {\r\n+        return inverseOwnerOneOne;\r\n+    }\r\n+\r\n+    public void setBlob(byte[] bytes) {\r\n+        blob = bytes;\r\n+    }\r\n+\r\n+    public byte[] getBlob() {\r\n+        return blob;\r\n+    }\r\n+\r\n+    public void setSerialized(Object o) {\r\n+        serial = o;\r\n+    }\r\n+\r\n+    public Object getSerialized() {\r\n+        return serial;\r\n+    }\r\n+\r\n+    public void setClob(String s) {\r\n+        clob = s;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clob;\r\n+    }\r\n+\r\n+    public InheritanceType getEnumeration() {\r\n+        return enumeration;\r\n+    }\r\n+\r\n+    public void setEnumeration(InheritanceType val) {\r\n+        enumeration = val;\r\n+    }\r\n+\r\n+    public InheritanceType getOrdinalEnumeration() {\r\n+        return ordinalEnumeration;\r\n+    }\r\n+\r\n+    public void setOrdinalEnumeration(InheritanceType val) {\r\n+        ordinalEnumeration = val;\r\n+    }\r\n+\r\n+    public InheritanceType getStringEnumeration() {\r\n+        return stringEnumeration;\r\n+    }\r\n+\r\n+    public void setStringEnumeration(InheritanceType val) {\r\n+        stringEnumeration = val;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getOneMany() {\r\n+        return oneMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getInverseOwnerOneMany() {\r\n+        return inverseOwnerOneMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getManyMany() {\r\n+        return manyMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getInverseOwnerManyMany() {\r\n+        return inverseOwnerManyMany;\r\n+    }\r\n+\r\n+    public Map<Integer, Flat1> getDefaultMapKey() {\r\n+        return this.defaultMapKey;\r\n+    }\r\n+\r\n+    public void setDefaultMapKey(Map<Integer, Flat1> defaultMapKey) {\r\n+        this.defaultMapKey = defaultMapKey;\r\n+    }\r\n+\r\n+    public Map<Integer, Flat1> getNamedMapKey() {\r\n+        return this.namedMapKey;\r\n+    }\r\n+\r\n+    public void setNamedMapKey(Map<Integer, Flat1> namedMapKey) {\r\n+        this.namedMapKey = namedMapKey;\r\n+    }\r\n+\r\n+    public Map<String, AnnoTest2> getInverseOwnerMapKey() {\r\n+        return this.inverseOwnerMapKey;\r\n+    }\r\n+\r\n+    public void setInverseOwnerMapKey(\r\n+        Map<String, AnnoTest2> inverseOwnerMapKey) {\r\n+        this.inverseOwnerMapKey = inverseOwnerMapKey;\r\n+    }\r\n+}\r\n+\r"},{"sha":"d2321d6fd5ff6a0cd25f01d1f14bdbe869b6d0fd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,166 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"ANNOTEST2\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"ANNOCLS\")\r\n+@DiscriminatorValue(\"ANNO2\")\r\n+@IdClass(AnnoTest2.Oid.class)\r\n+public class AnnoTest2 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK1\")\r\n+    protected long pk1;\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK2\")\r\n+    protected String pk2;\r\n+\r\n+    @Version\r\n+    @Column(name = \"ANNOVER\")\r\n+    protected Date version;\r\n+\r\n+    @Basic\r\n+    protected String basic;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"INVERSEONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 inverseOneOne;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"MANYONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 oneManyOwner;\r\n+\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"ANNOTEST2_MANYMANY\",\r\n+        joinColumns = {\r\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") },\r\n+        inverseJoinColumns =\r\n+        @JoinColumn(name = \"MANYE_PK\", referencedColumnName = \"PK\"))\r\n+    protected Set<AnnoTest1> manyMany = new HashSet();\r\n+\r\n+    public AnnoTest2() {\r\n+    }\r\n+\r\n+    public AnnoTest2(long pk1, String pk2) {\r\n+        this.pk1 = pk1;\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public void setPk1(long val) {\r\n+        pk1 = val;\r\n+    }\r\n+\r\n+    public long getPk1() {\r\n+        return pk1;\r\n+    }\r\n+\r\n+    public void setPk2(String str) {\r\n+        pk2 = str;\r\n+    }\r\n+\r\n+    public String getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public Date getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(String s) {\r\n+        basic = s;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setInverseOneOne(AnnoTest1 other) {\r\n+        inverseOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getInverseOneOne() {\r\n+        return inverseOneOne;\r\n+    }\r\n+\r\n+    public void setOneManyOwner(AnnoTest1 other) {\r\n+        oneManyOwner = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getOneManyOwner() {\r\n+        return oneManyOwner;\r\n+    }\r\n+\r\n+    public Set getManyMany() {\r\n+        return manyMany;\r\n+    }\r\n+\r\n+    public static class Oid {\r\n+\r\n+        public long pk1;\r\n+        public String pk2;\r\n+\r\n+        public Oid() {\r\n+        }\r\n+\r\n+        public Oid(long pk1, String pk2) {\r\n+            this.pk1 = pk1;\r\n+            this.pk2 = pk2;\r\n+        }\r\n+\r\n+        public Oid(String str) {\r\n+            if (str != null) {\r\n+                int index = str.indexOf(\",\");\r\n+                pk1 = Long.parseLong(str.substring(0, index));\r\n+                pk2 = str.substring(index + 1);\r\n+                if (\"null\".equals(pk2))\r\n+                    pk2 = null;\r\n+            }\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == this)\r\n+                return true;\r\n+            if (!(o instanceof Oid))\r\n+                return false;\r\n+            Oid other = (Oid) o;\r\n+            if (pk1 != other.pk1)\r\n+                return false;\r\n+            if (pk2 == null)\r\n+                return other.pk2 == null;\r\n+            return pk2.equals(other.pk2);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return ((int) pk1) + (pk2 == null ? 0 : pk2.hashCode());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk1 + \",\" + (pk2 == null ? \"null\" : pk2);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"f989ea9b1007a4b7b77002925d842766156324c4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"ANNO3\")\r\n+@Table(name = \"ANNOTEST3\")\r\n+@PrimaryKeyJoinColumns(@PrimaryKeyJoinColumn(name = \"SUB_PK\",\r\n+    referencedColumnName = \"PK\"))\r\n+public class AnnoTest3 extends AnnoTest1 {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"SUBBASIC\")\r\n+    protected int basic2;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    protected AnnoTest2 subOneOne;\r\n+\r\n+    public AnnoTest3() {\r\n+    }\r\n+\r\n+    public AnnoTest3(long pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public AnnoTest3(Long pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public void setBasic2(int i) {\r\n+        basic2 = i;\r\n+    }\r\n+\r\n+    public int getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+\r\n+    public AnnoTest2 getSubOneOne() {\r\n+        return subOneOne;\r\n+    }\r\n+\r\n+    public void setSubOneOne(AnnoTest2 anno2) {\r\n+        subOneOne = anno2;\r\n+    }\r\n+}\r"},{"sha":"a66ba8e55b086d4a9155f93c760fcbe0a1933cdc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@SqlResultSetMapping(name = \"EmbedMapping\", entities = {\r\n+@EntityResult(entityClass = EmbedOwner.class, fields = {\r\n+@FieldResult(name = \"pk\", column = \"OWNER_PK\"),\r\n+@FieldResult(name = \"basic\", column = \"OWNER_BASIC\"),\r\n+@FieldResult(name = \"embed.basic\", column = \"EMBED_BASIC\"),\r\n+@FieldResult(name = \"embed.clob\", column = \"EMBED_CLOB\")\r\n+    })\r\n+    })\r\n+public class EmbedOwner {\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name = \"basic\", column = @Column(name = \"OVER_BASIC\"))\r\n+    @AssociationOverride(name = \"owner\",\r\n+        joinColumns = @JoinColumn(name = \"OVER_OWNER\"))\r\n+    protected EmbedValue embed;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"OWN_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected int pk;\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setEmbed(EmbedValue embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+\r\n+    public EmbedValue getEmbed() {\r\n+        return embed;\r\n+    }\r\n+}\r"},{"sha":"d95680c4de419b5029e715f0173c9c406ba3c218","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Embeddable\r\n+public class EmbedValue {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"EMB_CLOB\")\r\n+    protected String clob;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"EMB_BLOB\")\r\n+    protected byte[] blob;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"EMB_REL\")\r\n+    protected EmbedOwner owner;\r\n+\r\n+    @Transient\r\n+    private int transientField;\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setClob(String clob) {\r\n+        this.clob = clob;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clob;\r\n+    }\r\n+\r\n+    public void setBlob(byte[] blob) {\r\n+        this.blob = blob;\r\n+    }\r\n+\r\n+    public byte[] getBlob() {\r\n+        return blob;\r\n+    }\r\n+\r\n+    public void setOwner(EmbedOwner owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public EmbedOwner getOwner() {\r\n+        return owner;\r\n+    }\r\n+}\r"},{"sha":"081e794e8bd7dff1191aa2d07bc4c45b303e23e7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Same as EmbedValue but no blobs for suitable use as key/value/element\r\n+ * in oracle.\r\n+ */\r\n+@Embeddable\r\n+public class EmbedValue2 {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_INTBASIC\")\r\n+    protected int intBasic;\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setIntBasic(int intBasic) {\r\n+        this.intBasic = intBasic;\r\n+    }\r\n+\r\n+    public int getIntBasic() {\r\n+        return intBasic;\r\n+    }\r\n+}\r"},{"sha":"15dcf2f7593b69b3be8d001287f3a833b2e32139","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@MappedSuperclass\r\n+public class EmbeddableSuper {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"SUPVERS\")\r\n+    private int version;\r\n+\r\n+    @Transient\r\n+    private int trans;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"CLOBVAL\")\r\n+    protected String clob;\r\n+\r\n+    public EmbeddableSuper() {\r\n+    }\r\n+\r\n+    public long getPK() {\r\n+        return this.pk;\r\n+    }\r\n+\r\n+    public void setPK(long pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getTrans() {\r\n+        return this.trans;\r\n+    }\r\n+\r\n+    public void setTrans(int trans) {\r\n+        this.trans = trans;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return this.clob;\r\n+    }\r\n+\r\n+    public void setClob(String clob) {\r\n+        this.clob = clob;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+}\r"},{"sha":"c476ad913b8d603f02bc40287ebddd5dd3556230","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorColumn(name = \"DISC\")\r\n+@AttributeOverrides({\r\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"CC\")),\r\n+    @AttributeOverride(name = \"version\", column = @Column(name = \"VERSVAL\"))\r\n+})\r\n+public class EmbeddableSuperSub\r\n+    extends EmbeddableSuper {\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddableSuperSub sub;\r\n+\r\n+    @ManyToOne\r\n+    // #####\r\n+    private EmbeddableSuper sup;\r\n+\r\n+    public EmbeddableSuperSub() {\r\n+    }\r\n+\r\n+    public EmbeddableSuperSub getSub() {\r\n+        return this.sub;\r\n+    }\r\n+\r\n+    public void setSub(EmbeddableSuperSub sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+\r\n+    public EmbeddableSuper getSup() {\r\n+        return this.sup;\r\n+    }\r\n+\r\n+    public void setSup(EmbeddableSuper sup) {\r\n+        this.sup = sup;\r\n+    }\r\n+}\r"},{"sha":"5c0f1f5c4fc73c42d8836a51bb6b239fb640a5a0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Embeddable\r\n+public class EmbeddedIdClass {\r\n+\r\n+    @Column(name = \"EPK1\")\r\n+    private long pk1;\r\n+\r\n+    @Column(name = \"EPK2\")\r\n+    private long pk2;\r\n+\r\n+    @Column(name = \"EPK3\")\r\n+    @GeneratedValue\r\n+    private long pk3;\r\n+\r\n+    public long getPk1() {\r\n+        return pk1;\r\n+    }\r\n+\r\n+    public void setPk1(long pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public long getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public void setPk2(long pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public long getPk3() {\r\n+        return pk3;\r\n+    }\r\n+\r\n+    public void setPk3(long pk3) {\r\n+        this.pk3 = pk3;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return pk1 + \":\" + pk2 + \":\" + pk3;\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+        return (int) ((pk1 ^ pk2 ^ pk3) % Integer.MAX_VALUE);\r\n+    }\r\n+\r\n+    public boolean equals(Object other) {\r\n+        if (other == this)\r\n+            return true;\r\n+        if (!(other instanceof EmbeddedIdClass))\r\n+            return false;\r\n+\r\n+        EmbeddedIdClass id = (EmbeddedIdClass) other;\r\n+        return id.pk1 == pk1\r\n+            && id.pk2 == pk2\r\n+            && id.pk3 == pk3;\r\n+    }\r\n+}\r"},{"sha":"ddc1b55191e3324afb1240e60129dbda068ff1c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"EMIDENTITY\")\r\n+@SqlResultSetMapping(name = \"EmbeddedIdMapping\", entities = {\r\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n+@FieldResult(name = \"id.pk1\", column = \"OWNER_PK1\"),\r\n+@FieldResult(name = \"id.pk2\", column = \"OWNER_PK2\"),\r\n+@FieldResult(name = \"id.pk3\", column = \"OWNER_PK3\"),\r\n+@FieldResult(name = \"value\", column = \"OWNER_VAL\"),\r\n+@FieldResult(name = \"relation.id.pk1\", column = \"REL_PK1\"),\r\n+@FieldResult(name = \"relation.id.pk2\", column = \"REL_PK2\"),\r\n+@FieldResult(name = \"relation.id.pk3\", column = \"REL_PK3\")\r\n+    }),\r\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n+@FieldResult(name = \"id.pk1\", column = \"REL_PK1\"),\r\n+@FieldResult(name = \"id.pk2\", column = \"REL_PK2\"),\r\n+@FieldResult(name = \"id.pk3\", column = \"REL_PK3\"),\r\n+@FieldResult(name = \"value\", column = \"REL_VAL\")\r\n+    })\r\n+    })\r\n+public class EmbeddedIdEntity {\r\n+\r\n+    @EmbeddedId\r\n+    private EmbeddedIdClass id;\r\n+\r\n+    @Column(name = \"VAL\")\r\n+    private String value;\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddedIdEntity relation;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"MREL_PK1\", referencedColumnName = \"EPK1\"),\r\n+    @JoinColumn(name = \"MREL_PK2\", referencedColumnName = \"EPK2\")\r\n+        })\r\n+    private EmbeddedIdEntity mapOverrideRelation;\r\n+\r\n+    public EmbeddedIdClass getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(EmbeddedIdClass id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public EmbeddedIdEntity getRelation() {\r\n+        return relation;\r\n+    }\r\n+\r\n+    public void setRelation(EmbeddedIdEntity relation) {\r\n+        this.relation = relation;\r\n+    }\r\n+\r\n+    public EmbeddedIdEntity getMappingOverrideRelation() {\r\n+        return mapOverrideRelation;\r\n+    }\r\n+}\r"},{"sha":"d640e15c1f8b6153aac7e129d10041f4a3e7fdd0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.persistence.*;\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+\r\n+@Entity\r\n+@DataStoreId(strategy = GenerationType.SEQUENCE, generator = \"system\")\r\n+@DataCache(enabled = false)\r\n+@FetchGroup(name = \"detail\", attributes = {\r\n+    @FetchAttribute(name = \"rel\", recursionDepth = -1),\r\n+    @FetchAttribute(name = \"seq\")\r\n+})\r\n+@VersionStrategy(StateComparisonVersionStrategy.ALIAS)\r\n+public class ExtensionsEntity {\r\n+\r\n+    @GeneratedValue(generator = \"uuid-hex\")\r\n+    @Column(name = \"UUID_HEX\")\r\n+    private String uuid;\r\n+    \r\n+    @GeneratedValue(generator = \"uuid-string\")\r\n+    @Column(name = \"UUID_STRING\")\r\n+    private String uuidString;\r\n+\r\n+    @GeneratedValue(generator = \"uuid-type4-hex\")\r\n+    @Column(name = \"UUIDT4_HEX\")\r\n+    private String uuidT4Hex;\r\n+\r\n+    @GeneratedValue(generator = \"uuid-type4-string\")\r\n+    @Column(name = \"UUIDT4_STRING\")\r\n+    private String uuidT4String;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"system\")\r\n+    @ReadOnly\r\n+    private int seq;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"REL_ID\", referencedColumnName = \"ID\")\r\n+    @Dependent\r\n+    @InverseLogical(\"owner\")\r\n+    private ExtensionsEntity rel;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"OWNER_ID\", referencedColumnName = \"ID\")\r\n+    private ExtensionsEntity owner;\r\n+\r\n+    @ManyToMany\r\n+    @LRS\r\n+    private Collection<ExtensionsEntity> lrs;\r\n+\r\n+    @ManyToMany\r\n+    @EagerFetchMode(FetchMode.JOIN)\r\n+    @ElementClassCriteria\r\n+    @ElementDependent\r\n+    private Collection<ExtensionsEntity> eager;\r\n+\r\n+    @ExternalValues({ \"M=1\", \"F=2\" })\r\n+    @Type(int.class)\r\n+    private char externalValues;\r\n+\r\n+    @Persistent\r\n+    @Externalizer(\"getName\")\r\n+    @Factory(\"Class.forName\")\r\n+    private Class externalizer;\r\n+\r\n+    public char getExternalValues() {\r\n+        return this.externalValues;\r\n+    }\r\n+\r\n+    public void setExternalValues(char externalValues) {\r\n+        this.externalValues = externalValues;\r\n+    }\r\n+\r\n+    public Class getExternalizer() {\r\n+        return this.externalizer;\r\n+    }\r\n+\r\n+    public void setExternalizer(Class externalizer) {\r\n+        this.externalizer = externalizer;\r\n+    }\r\n+}\r"},{"sha":"c500a8fa608eb3072500beabd5425b416e191762","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity(name=\"Flat1\")\r\n+@Table(name=\"Flat1\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"EJB_CLS\", length=100)\r\n+public class Flat1 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    protected int pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"EJB_VER\")\r\n+    protected int version;\r\n+\r\n+    @Basic\r\n+    protected int basic;\r\n+\r\n+    public Flat1() {\r\n+    }\r\n+\r\n+    public Flat1(int pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public void setPk(int val) {\r\n+        pk = val;\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+}\r\n+\r"},{"sha":"16d74a001b79118abb173a3156a4018e7b69a27c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity(name=\"Flat2\")\r\n+public class Flat2\r\n+    extends Flat1 {\r\n+\r\n+    @Basic\r\n+    protected String basic2;\r\n+\r\n+    public Flat2() {\r\n+    }\r\n+\r\n+    public Flat2(int pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public void setBasic2(String s) {\r\n+        basic2 = s;\r\n+    }\r\n+\r\n+    public String getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+}\r\n+\r"},{"sha":"9ea4ed94908baa7ea9b56b84449c3d484111c660","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+// non-psql/ora dbs cause issues with SequenceGenerator in auto-mapping\r\n+//@SequenceGenerator(name=\"seq\", sequenceName=\"ejb_sequence\")\r\n+@TableGenerator(name = \"tab\")\r\n+@IdClass(Generator.Oid.class)\r\n+public class Generator {\r\n+\r\n+    @Id\r\n+    protected int pk;\r\n+\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"tab\")\r\n+    protected Integer pk2;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected long pk3;\r\n+\r\n+    @Basic\r\n+    protected String stringField;\r\n+\r\n+    // for non-seq\r\n+    public void setPk(int pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public Integer getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public long getPk3() {\r\n+        return pk3;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String s) {\r\n+        stringField = s;\r\n+    }\r\n+\r\n+    public static class Oid {\r\n+\r\n+        public int pk;\r\n+        public Integer pk2;\r\n+        public long pk3;\r\n+\r\n+        public Oid() {\r\n+        }\r\n+\r\n+        public Oid(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \",\");\r\n+            pk = Integer.parseInt(tok.nextToken());\r\n+            pk2 = Integer.valueOf(tok.nextToken());\r\n+            pk3 = Long.valueOf(tok.nextToken());\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Oid))\r\n+                return false;\r\n+            Oid other = (Oid) o;\r\n+            if (pk != other.pk)\r\n+                return false;\r\n+            if (pk3 != other.pk3)\r\n+                return false;\r\n+            if (pk2 == null)\r\n+                return other.pk2 == null;\r\n+            return pk2.equals(other.pk2);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return pk + (pk2 == null ? 0 : pk2.hashCode())\r\n+                + (int) (pk3 % Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \",\" + pk2 + \",\" + pk3;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"33a31887a21fafc42cb35f40bc49ca45710ec53d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,148 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.awt.*;\r\n+import java.util.*;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.persistence.*;\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name = \"NONSTD_ENTITY\")\r\n+@DataStoreIdColumn(name = \"OID\")\r\n+@DiscriminatorStrategy(ClassNameDiscriminatorStrategy.ALIAS)\r\n+@DiscriminatorColumn(name = \"DISCRIM\", length = 128)\r\n+@XMappingOverride(name = \"superCollection\",\r\n+    containerTable = @ContainerTable(name = \"SUP_COLL\",\r\n+        joinColumns = @XJoinColumn(name = \"OWNER\")),\r\n+    elementColumns = @ElementColumn(name = \"SUP_ELEM\"))\r\n+public class NonstandardMappingEntity\r\n+    extends NonstandardMappingMappedSuper {\r\n+\r\n+    @Persistent(fetch = FetchType.LAZY)\r\n+    @Strategy(\"org.apache.openjpa.persistence.jdbc.annotations.PointHandler\")\r\n+    @Columns({\r\n+    @Column(name = \"X_COL\"),\r\n+    @Column(name = \"Y_COL\")\r\n+        })\r\n+    @Index(name = \"PNT_IDX\")\r\n+    private Point custom;\r\n+\r\n+    @PersistentCollection(elementType = String.class)\r\n+    @ContainerTable(name = \"STRINGS_COLL\",\r\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n+        joinIndex = @Index(enabled = false))\r\n+    @ElementColumn(name = \"STR_ELEM\", length = 127)\r\n+    @OrderColumn(name = \"ORDER_COL\")\r\n+    @ElementIndex\r\n+    private List stringCollection = new ArrayList();\r\n+\r\n+    @PersistentCollection\r\n+    @ContainerTable(name = \"JOIN_COLL\",\r\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n+        joinForeignKey = @ForeignKey)\r\n+    @ElementJoinColumn(name = \"JOIN_ELEM\")\r\n+    @ElementForeignKey\r\n+    @ElementNonpolymorphic(NonpolymorphicType.JOINABLE)\r\n+    private List<NonstandardMappingEntity> joinCollection =\r\n+        new ArrayList<NonstandardMappingEntity>();\r\n+\r\n+    @PersistentMap(keyType = String.class, elementType = String.class)\r\n+    @ContainerTable(name = \"STRINGS_MAP\",\r\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n+        joinIndex = @Index(enabled = false))\r\n+    @KeyColumn(name = \"STR_KEY\", length = 127)\r\n+    @ElementColumn(name = \"STR_VAL\", length = 127)\r\n+    @KeyIndex\r\n+    @ElementIndex\r\n+    private Map stringMap = new HashMap();\r\n+\r\n+    @PersistentMap\r\n+    @ContainerTable(name = \"JOIN_MAP\",\r\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n+        joinForeignKey = @ForeignKey)\r\n+    @KeyJoinColumn(name = \"JOIN_KEY\")\r\n+    @KeyForeignKey\r\n+    @KeyNonpolymorphic\r\n+    @ElementJoinColumn(name = \"JOIN_VAL\")\r\n+    @ElementForeignKey\r\n+    @ElementNonpolymorphic\r\n+    private Map<NonstandardMappingEntity, NonstandardMappingEntity> joinMap =\r\n+        new HashMap<NonstandardMappingEntity, NonstandardMappingEntity>();\r\n+\r\n+    @Embedded\r\n+    @EmbeddedMapping(nullIndicatorAttributeName = \"uuid\", overrides = {\r\n+    @MappingOverride(name = \"rel\",\r\n+        joinColumns = @XJoinColumn(name = \"EM_REL_ID\")),\r\n+    @MappingOverride(name = \"eager\",\r\n+        containerTable = @ContainerTable(name = \"EM_EAGER\"),\r\n+        elementJoinColumns = @ElementJoinColumn(name = \"ELEM_EAGER_ID\"))\r\n+        })\r\n+    private ExtensionsEntity embed;\r\n+\r\n+    @PersistentCollection(elementEmbedded = true)\r\n+    @ContainerTable(name = \"EMBED_COLL\")\r\n+    @ElementEmbeddedMapping(overrides = {\r\n+    @XMappingOverride(name = \"basic\", columns = @Column(name = \"EM_BASIC\"))\r\n+        })\r\n+    private List<EmbedValue2> embedCollection = new ArrayList<EmbedValue2>();\r\n+\r\n+    public Point getCustom() {\r\n+        return this.custom;\r\n+    }\r\n+\r\n+    public void setCustom(Point custom) {\r\n+        this.custom = custom;\r\n+    }\r\n+\r\n+    public List getStringCollection() {\r\n+        return this.stringCollection;\r\n+    }\r\n+\r\n+    public List<NonstandardMappingEntity> getJoinCollection() {\r\n+        return this.joinCollection;\r\n+    }\r\n+\r\n+    public Map getStringMap() {\r\n+        return this.stringMap;\r\n+    }\r\n+\r\n+    public Map<NonstandardMappingEntity,NonstandardMappingEntity> getJoinMap() {\r\n+        return this.joinMap;\r\n+    }\r\n+\r\n+    public ExtensionsEntity getEmbed() {\r\n+        return this.embed;\r\n+    }\r\n+\r\n+    public void setEmbed(ExtensionsEntity embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+\r\n+    public List<EmbedValue2> getEmbedCollection() {\r\n+        return this.embedCollection;\r\n+    }\r\n+}\r"},{"sha":"8cb3508565094d9433228f1602d04c969b373a03","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.*;\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+@MappedSuperclass\r\n+public class NonstandardMappingMappedSuper {\r\n+\r\n+    @PersistentCollection\r\n+    private List<String> superCollection = new ArrayList<String>();\r\n+\r\n+    @ManyToOne\r\n+    @Nonpolymorphic\r\n+    NonstandardMappingEntity superRel;\r\n+\r\n+    public List<String> getSuperCollection() {\r\n+        return this.superCollection;\r\n+    }\r\n+\r\n+    public NonstandardMappingEntity getSuperRel() {\r\n+        return this.superRel;\r\n+    }\r\n+\r\n+    public void setSuperRel(NonstandardMappingEntity superRel) {\r\n+        this.superRel = superRel;\r\n+    }\r\n+}\r"},{"sha":"ea7e2e34da2526810e601988311f473269125c61","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.awt.*;\r\n+\r\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ColumnIO;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * Handler for {@link Point}. This is a sample of how to create custom\r\n+ * handlers, and is in this package for unit testing purposes.\r\n+ */\r\n+public class PointHandler extends AbstractValueHandler {\r\n+\r\n+    /**\r\n+     * Create columns with default names and java type values.  Kodo will\r\n+     * fill in the rest of the information and merge in any information given\r\n+     * in the user's mapping data.  If the user does not give column names,\r\n+     * Kodo will alter your default names as necessary to avoid conflicts and\r\n+     * meet the database's name limitations.\r\n+     *\r\n+     * @param    name    default base name for columns\r\n+     */\r\n+    public Column[] map(ValueMapping vm, String name, ColumnIO io,\r\n+        boolean adapt) {\r\n+        Column xcol = new Column();\r\n+        xcol.setName(\"X\" + name);\r\n+        xcol.setJavaType(JavaTypes.INT);\r\n+        Column ycol = new Column();\r\n+        ycol.setName(\"Y\" + name);\r\n+        ycol.setJavaType(JavaTypes.INT);\r\n+        return new Column[]{ xcol, ycol };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return whether the column value is an exact value that can be used\r\n+     * in state-comparison versioning.\r\n+     */\r\n+    public boolean isVersionable() {\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the object value to its datastore equivalent.\r\n+     */\r\n+    public Object toDataStoreValue(ValueMapping vm, Object val,\r\n+        JDBCStore store) {\r\n+        if (val == null)\r\n+            return null;\r\n+\r\n+        Point p = (Point) val;\r\n+        return new Object[]{ Numbers.valueOf(p.x), Numbers.valueOf(p.y) };\r\n+    }\r\n+\r\n+    /**\r\n+     *  Convert the datastore value to its object equivalent.\r\n+     */\r\n+    public Object toObjectValue(ValueMapping vm, Object val) {\r\n+        Object[] vals = (Object[]) val;\r\n+        if (vals[0] == null || vals[1] == null)\r\n+            return null;\r\n+\r\n+        int x = ((Number) vals[0]).intValue();\r\n+        int y = ((Number) vals[1]).intValue();\r\n+        return new Point(x, y);\r\n+    }\r\n+}\r"},{"sha":"9dbf36612d6ecf03a0227514c28998db1a11a560","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Entity test object that uses property access mode.\r\n+ */\r\n+@Entity\r\n+public class PropertyAccess1 {\r\n+\r\n+    private int id;\r\n+    private String name;\r\n+    private int intVal; // this intentionally does not match the getter name\r\n+\r\n+    protected PropertyAccess1() {\r\n+    }\r\n+\r\n+    public PropertyAccess1(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @Id\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String n) {\r\n+        this.name = n;\r\n+    }\r\n+\r\n+    public int getIntValue() {\r\n+        return intVal;\r\n+    }\r\n+\r\n+    public void setIntValue(int intVal) {\r\n+        this.intVal = intVal;\r\n+    }\r\n+}\r"},{"sha":"d93ce3acdbf6e65df9edcf926c56e402340f9ba7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\r\n+public class TablePerClass1 {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected int pk;\r\n+\r\n+    @Column(name = \"TPC_BASIC\")\r\n+    protected int basic;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverrides({\r\n+    @AttributeOverride(name = \"basic\",\r\n+        column = @Column(name = \"TPC_EMB_BASIC\")),\r\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"TPC_EMB_CLOB\")),\r\n+    @AttributeOverride(name = \"blob\", column = @Column(name = \"TPC_EMB_BLOB\"))\r\n+        })\r\n+    protected EmbedValue embed;\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public EmbedValue getEmbed() {\r\n+        return embed;\r\n+    }\r\n+\r\n+    public void setEmbed(EmbedValue ev) {\r\n+        embed = ev;\r\n+    }\r\n+}\r\n+\r"},{"sha":"cca9d7d7d75684f1996685bf586d6f2ba80a6e1b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class TablePerClass2\r\n+    extends TablePerClass1 {\r\n+\r\n+    @Basic\r\n+    protected String basic2;\r\n+\r\n+    public void setBasic2(String s) {\r\n+        basic2 = s;\r\n+    }\r\n+\r\n+    public String getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+}\r\n+\r"},{"sha":"72dafb2a8d8757173b0e7a443986142f98f6511b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.SubclassJoinDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test discriminator mappings.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestDiscriminator\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class,\r\n+            CLEAR_TABLES);\r\n+        // Commented out since OpenJPA does not have Entity1 and Entity2.\r\n+        // These tests should be ported to use classes that are available\r\n+        // in OpenJPA.\r\n+//        setUp(Entity1.class, Entity2.class, AnnoTest1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+//    public void testNoDefaultJoinedDiscriminatorWithoutColumn() {\r\n+//        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+//        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+//            getMapping(Entity1.class, null, true);\r\n+//        if (conf.getDBDictionaryInstance().joinSyntax\r\n+//            != JoinSyntaxes.SYNTAX_TRADITIONAL) {\r\n+//            assertTrue(cls.getDiscriminator().getStrategy()\r\n+//                instanceof SubclassJoinDiscriminatorStrategy);\r\n+//        } else {\r\n+//            assertEquals(NoneDiscriminatorStrategy.getInstance(),\r\n+//                cls.getDiscriminator().getStrategy());\r\n+//        }\r\n+//        assertEquals(0, cls.getDiscriminator().getColumns().length);\r\n+//    }\r\n+\r\n+    public void testJoinedDiscriminatorWithColumn() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        MappingRepository repo = conf.getMappingRepositoryInstance();\r\n+        ClassMapping cls = repo.getMapping(AnnoTest1.class, \r\n+            null, true);\r\n+        assertTrue(cls.getDiscriminator().getStrategy()\r\n+            instanceof ValueMapDiscriminatorStrategy);\r\n+        assertEquals(1, cls.getDiscriminator().getColumns().length);\r\n+        assertEquals(\"ANNOCLS\", cls.getDiscriminator().getColumns()[0].\r\n+            getName());\r\n+    }\r\n+\r\n+//    public void testDefaultFlatDiscriminator() {\r\n+//        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+//            getMappingRepositoryInstance().getMapping(Entity2.class,\r\n+//            null, true);\r\n+//        assertTrue(cls.getDiscriminator().getStrategy()\r\n+//            instanceof ValueMapDiscriminatorStrategy);\r\n+//        assertEquals(1, cls.getDiscriminator().getColumns().length);\r\n+//    }\r\n+}\r"},{"sha":"8e664029d1df8586cea8f228dc6e567d0d50ef02","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,139 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.sql.Types;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+\r\n+/**\r\n+ * Test for embedded\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestEJBEmbedded extends SingleEMFTestCase {\r\n+\r\n+    private static final String CLOB;\r\n+\r\n+    static {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 1000; i++)\r\n+            buf.append('a');\r\n+        CLOB = buf.toString();\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        setUp(EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testEmbedded() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbedOwner owner = new EmbedOwner();\r\n+        owner.setBasic(\"foo\");\r\n+        EmbedValue embed = new EmbedValue();\r\n+        embed.setClob(CLOB);\r\n+        embed.setBasic(\"bar\");\r\n+        embed.setBlob(\"foobar\".getBytes());\r\n+        embed.setOwner(owner);\r\n+        owner.setEmbed(embed);\r\n+        em.persist(owner);\r\n+        int pk = owner.getPk();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        owner = em.find(EmbedOwner.class, pk);\r\n+        assertEquals(\"foo\", owner.getBasic());\r\n+        embed = owner.getEmbed();\r\n+        assertNotNull(embed);\r\n+        assertEquals(CLOB, embed.getClob());\r\n+        assertEquals(\"bar\", embed.getBasic());\r\n+        assertEquals(\"foobar\", new String(embed.getBlob()));\r\n+        assertEquals(owner, embed.getOwner());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testEmbeddedMetaData() {\r\n+        ClassMetaData ownerMeta =\r\n+            JPAFacadeHelper.getMetaData(emf, EmbedOwner.class);\r\n+        FieldMetaData fmd = ownerMeta.getField(\"embed\");\r\n+        ClassMetaData embeddedMeta = fmd.getDefiningMetaData();\r\n+        assertNotNull(embeddedMeta);\r\n+        assertNull(embeddedMeta.getField(\"transientField\"));\r\n+    }\r\n+\r\n+    public void testNull() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbedOwner owner = new EmbedOwner();\r\n+        owner.setBasic(\"foo\");\r\n+        em.persist(owner);\r\n+        int pk = owner.getPk();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        owner = em.find(EmbedOwner.class, pk);\r\n+        assertEquals(\"foo\", owner.getBasic());\r\n+        EmbedValue embed = owner.getEmbed();\r\n+        assertNotNull(embed);\r\n+        assertNull(embed.getClob());\r\n+        assertNull(embed.getBasic());\r\n+        assertNull(embed.getBlob());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMappingTransferAndOverride() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().getMapping\r\n+            (EmbedOwner.class, null, true);\r\n+        assertEquals(\"OWN_BASIC\", cls.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        ClassMapping embed = cls.getFieldMapping(\"embed\").getEmbeddedMapping();\r\n+        assertEquals(\"EMB_BLOB\", embed.getFieldMapping(\"blob\").\r\n+            getColumns()[0].getName());\r\n+        assertEquals(\"OVER_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        assertEquals(\"OVER_OWNER\", embed.getFieldMapping(\"owner\").\r\n+            getColumns()[0].getName());\r\n+\r\n+        FieldMapping fm = embed.getFieldMapping(\"clob\");\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0)\r\n+                assertTrue(fm.getStrategy() instanceof\r\n+                    MaxEmbeddedClobFieldStrategy);\r\n+            else\r\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n+        } else\r\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n+    }\r\n+}\r"},{"sha":"1f3adc11b8305455e7dc99cc55882935bc12d79e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,136 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.sql.Types;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test embeddable superclasses.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEmbeddableSuperclass\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(EmbeddableSuper.class, EmbeddableSuperSub.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testSuperclassEmbeddedOnly() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(EmbeddableSuper.class, \r\n+            null, true);\r\n+        assertTrue(cls.isEmbeddedOnly());\r\n+        assertEquals(NoneClassStrategy.getInstance(), cls.getStrategy());\r\n+    }\r\n+\r\n+    public void testSubclassMappingDefaultsAndOverrides() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertTrue(!cls.isEmbeddedOnly());\r\n+        assertTrue(cls.getStrategy() instanceof FullClassStrategy);\r\n+        assertEquals(ClassMapping.ID_APPLICATION, cls.getIdentityType());\r\n+        assertTrue(cls.isOpenJPAIdentity());\r\n+\r\n+        FieldMapping fm = cls.getFieldMapping(\"pk\");\r\n+        assertTrue(fm.isPrimaryKey());\r\n+        assertEquals(ValueStrategies.SEQUENCE, fm.getValueStrategy());\r\n+        assertEquals(\"ID\", fm.getColumns()[0].getName());\r\n+\r\n+        assertNull(cls.getField(\"trans\"));\r\n+\r\n+        fm = cls.getFieldMapping(\"clob\");\r\n+        assertEquals(\"CC\", fm.getColumns()[0].getName());\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0)\r\n+                assertTrue(fm.getStrategy() instanceof\r\n+                    MaxEmbeddedClobFieldStrategy);\r\n+            else\r\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n+        } else\r\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n+    }\r\n+\r\n+    public void testSubclassDiscriminatorMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertEquals(\"DISC\", cls.getDiscriminator().getColumns()[0].\r\n+            getName());\r\n+    }\r\n+\r\n+    public void testVersionOverrideMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertEquals(\"VERSVAL\", cls.getVersion().getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testRelationMappings() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        FieldMapping fm = cls.getFieldMapping(\"sub\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n+\r\n+        fm = cls.getFieldMapping(\"sup\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n+    }\r\n+\r\n+    public void testPersistAndFind() {\r\n+        EmbeddableSuperSub parent = new EmbeddableSuperSub();\r\n+        parent.setClob(\"parent\");\r\n+        EmbeddableSuperSub sub = new EmbeddableSuperSub();\r\n+        sub.setClob(\"sub\");\r\n+        EmbeddableSuperSub sup = new EmbeddableSuperSub();\r\n+        sup.setClob(\"sup\");\r\n+        parent.setSub(sub);\r\n+        parent.setSup(sup);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(parent, sub, sup);\r\n+        em.getTransaction().commit();\r\n+        long pk = parent.getPK();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        parent = em.find(EmbeddableSuperSub.class, pk);\r\n+        assertEquals(\"parent\", parent.getClob());\r\n+        assertEquals(\"sub\", parent.getSub().getClob());\r\n+        assertEquals(\"sup\", parent.getSup().getClob());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"333b83532d1b961ade3f2c938a9b6a4e1189d6e9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,244 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test embedded id classes.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEmbeddedId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    EmbeddedIdClass _oid;\r\n+    EmbeddedIdClass _roid;\r\n+\r\n+    public void setUp() {\r\n+        setUp(EmbeddedIdEntity.class, EmbeddedIdClass.class, CLEAR_TABLES);\r\n+\r\n+        _oid = new EmbeddedIdClass();\r\n+        _oid.setPk1(1);\r\n+        _oid.setPk2(2);\r\n+\r\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n+        e.setId(_oid);\r\n+        e.setValue(\"e\");\r\n+\r\n+        _roid = new EmbeddedIdClass();\r\n+        _roid.setPk1(2);\r\n+        _roid.setPk2(3);\r\n+\r\n+        EmbeddedIdEntity rel = new EmbeddedIdEntity();\r\n+        rel.setId(_roid);\r\n+        rel.setValue(\"r\");\r\n+        e.setRelation(rel);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(e, rel);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testGetObjectId() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        assertNotNull(e);\r\n+        assertEquals(\"e\", e.getValue());\r\n+        assertNull(e.getMappingOverrideRelation());\r\n+        assertNotNull(e.getRelation());\r\n+        assertEquals(\"r\", e.getRelation().getValue());\r\n+\r\n+        assertEquals(_oid, em.getObjectId(e));\r\n+        assertEquals(_roid, em.getObjectId(e.getRelation()));\r\n+        assertEquals(_oid, e.getId());\r\n+        assertEquals(_roid, e.getRelation().getId());\r\n+        assertNull(((PersistenceCapable) e.getId()).pcGetGenericContext());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMutateEmbeddedIdFieldValueOfNew() {\r\n+        EmbeddedIdEntity e1 = new EmbeddedIdEntity();\r\n+        e1.setValue(\"e1\");\r\n+        EmbeddedIdEntity e2 = new EmbeddedIdEntity();\r\n+        e2.setValue(\"e2\");\r\n+        EmbeddedIdClass id = new EmbeddedIdClass();\r\n+        e2.setId(id);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(e1, e2);\r\n+\r\n+        EmbeddedIdClass oid = new EmbeddedIdClass();\r\n+        oid.setPk1(4);\r\n+        oid.setPk2(5);\r\n+        e1.setId(oid);\r\n+        e2.getId().setPk1(6);\r\n+        e2.getId().setPk2(7);\r\n+        em.getTransaction().commit();\r\n+\r\n+        EmbeddedIdClass oid1 = e1.getId();\r\n+        assertEquals(oid1, em.getObjectId(e1));\r\n+        assertEquals(4, oid1.getPk1());\r\n+        assertEquals(5, oid1.getPk2());\r\n+\r\n+        EmbeddedIdClass oid2 = e2.getId();\r\n+        // pcl: 30 October 2007: this fails currently; commenting out.\r\n+        // See OPENJPA-425\r\n+        //assertEquals(oid2, em.getObjectId(e2));\r\n+        assertEquals(6, oid2.getPk1());\r\n+        assertEquals(7, oid2.getPk2());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e1 = em.find(EmbeddedIdEntity.class, oid1);\r\n+        e2 = em.find(EmbeddedIdEntity.class, oid2);\r\n+        assertEquals(oid1, em.getObjectId(e1));\r\n+        assertEquals(oid2, em.getObjectId(e2));\r\n+        assertEquals(oid1, e1.getId());\r\n+        assertEquals(oid2, e2.getId());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMutateEmbeddedIdFieldValueOfExisting() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        e.setValue(\"changed\");\r\n+        try {\r\n+            e.getId().setPk1(9);\r\n+            em.getTransaction().commit();\r\n+            fail(\"Committed with changed oid field.\");\r\n+        } catch (RuntimeException re) {\r\n+            if (em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testDetachAttach() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        e.getRelation();\r\n+        em.close();\r\n+\r\n+        e.setValue(\"echanged\");\r\n+        e.getRelation().setValue(\"rchanged\");\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbeddedIdEntity me = (EmbeddedIdEntity) em.mergeAll(e,\r\n+            e.getRelation())[0];\r\n+        assertTrue(me != e);\r\n+        assertNotNull(me.getRelation());\r\n+        assertTrue(me.getRelation() != e.getRelation());\r\n+        assertEquals(\"echanged\", me.getValue());\r\n+        assertEquals(\"rchanged\", me.getRelation().getValue());\r\n+        assertEquals(_oid, me.getId());\r\n+        assertEquals(_oid, em.getObjectId(me));\r\n+        assertEquals(_roid, me.getRelation().getId());\r\n+        assertEquals(_roid, em.getObjectId(me.getRelation()));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testQuery() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        Query q = em.createQuery(\"select e from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        EmbeddedIdEntity e = (EmbeddedIdEntity) q.getSingleResult();\r\n+        assertEquals(_oid, e.getId());\r\n+        assertEquals(\"e\", e.getValue());\r\n+\r\n+        q = em.createQuery(\"select e.id.pk2 from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        assertEquals(new Long(_oid.getPk2()), q.getSingleResult());\r\n+\r\n+        q = em.createQuery(\"select e.id from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        assertEquals(_oid, q.getSingleResult());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testAutoAssigned() {\r\n+        // begin with null id object\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n+        em.persist(e);\r\n+        EmbeddedIdClass oid = e.getId();\r\n+        assertNotNull(oid);\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.getTransaction().commit();\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        // begin with non-null id object\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        e = new EmbeddedIdEntity();\r\n+        oid = new EmbeddedIdClass();\r\n+        oid.setPk1(4);\r\n+        oid.setPk2(5);\r\n+        e.setId(oid);\r\n+        em.persist(e);\r\n+        oid = e.getId();\r\n+        assertEquals(4, oid.getPk1());\r\n+        assertEquals(5, oid.getPk2());\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.getTransaction().commit();\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        // flush before accessing id field\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        e = new EmbeddedIdEntity();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        oid = e.getId();\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"ca0050f5cbc047e9f2ddb867eefba2fcdddc1ed9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test enums and the @Enumerated annotation.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEnumerated\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testMapping() {\r\n+        ClassMapping cls = (ClassMapping) emf.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(AnnoTest1.class, \r\n+            null, true);\r\n+        FieldMapping fm = cls.getDeclaredFieldMapping(\"enumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n+\r\n+        fm = cls.getDeclaredFieldMapping(\"ordinalEnumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n+\r\n+        fm = cls.getDeclaredFieldMapping(\"stringEnumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.STRING, fm.getColumns()[0].getJavaType());\r\n+    }\r\n+\r\n+    public void testBehavior() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        pc.setEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        pc.setOrdinalEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        pc.setStringEnumeration(InheritanceType.JOINED);\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS, pc.getEnumeration());\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS,\r\n+            pc.getOrdinalEnumeration());\r\n+        assertEquals(InheritanceType.JOINED,\r\n+            pc.getStringEnumeration());\r\n+        em.getTransaction().begin();\r\n+        pc.setEnumeration(InheritanceType.JOINED);\r\n+        pc.setOrdinalEnumeration(InheritanceType.JOINED);\r\n+        pc.setStringEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(InheritanceType.JOINED, pc.getEnumeration());\r\n+        assertEquals(InheritanceType.JOINED, pc.getOrdinalEnumeration());\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS,\r\n+            pc.getStringEnumeration());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"e65be4faa136276fec74a2eab65dcf4faa057788","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,138 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.meta.FetchGroup;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.UpdateStrategies;\r\n+import org.apache.openjpa.meta.ValueMetaData;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test the parsing of Kodo metadata extension annotations.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestExtensionAnnotations\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    private ClassMapping _mapping;\r\n+\r\n+    public void setUp() {\r\n+        setUp(ExtensionsEntity.class);\r\n+        _mapping = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(ExtensionsEntity.class,\r\n+            null, true);\r\n+    }\r\n+\r\n+    public void testDataStoreId() {\r\n+        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\r\n+        assertEquals(ValueStrategies.SEQUENCE, _mapping.getIdentityStrategy());\r\n+        assertEquals(\"system\", _mapping.getIdentitySequenceName());\r\n+    }\r\n+\r\n+    public void testDataCache() {\r\n+        assertNull(_mapping.getDataCacheName());\r\n+    }\r\n+\r\n+    public void testFetchGroups() {\r\n+        FetchGroup fg = _mapping.getFetchGroup(\"detail\");\r\n+        assertNotNull(fg);\r\n+        assertFalse(fg.isPostLoad());\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"rel\");\r\n+        assertEquals(1, fm.getCustomFetchGroups().length);\r\n+        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\r\n+        assertEquals(-1, fg.getRecursionDepth(fm));\r\n+        fm = _mapping.getFieldMapping(\"seq\");\r\n+        assertEquals(1, fm.getCustomFetchGroups().length);\r\n+        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\r\n+        assertEquals(1, fg.getRecursionDepth(fm));\r\n+    }\r\n+\r\n+    public void testValueStrategy() {\r\n+        assertEquals(ValueStrategies.UUID_HEX,\r\n+            _mapping.getField(\"uuid\").getValueStrategy());\r\n+        assertEquals(ValueStrategies.UUID_STRING,\r\n+            _mapping.getField(\"uuidString\").getValueStrategy());\r\n+        assertEquals(ValueStrategies.UUID_TYPE4_HEX,\r\n+            _mapping.getField(\"uuidT4Hex\").getValueStrategy());\r\n+        assertEquals(ValueStrategies.UUID_TYPE4_STRING,\r\n+            _mapping.getField(\"uuidT4String\").getValueStrategy());\r\n+        FieldMapping seq = _mapping.getFieldMapping(\"seq\");\r\n+        assertEquals(ValueStrategies.SEQUENCE, seq.getValueStrategy());\r\n+        assertEquals(\"system\", seq.getValueSequenceName());\r\n+    }\r\n+\r\n+    public void testReadOnly() {\r\n+        assertEquals(UpdateStrategies.RESTRICT,\r\n+            _mapping.getField(\"seq\").getUpdateStrategy());\r\n+    }\r\n+\r\n+    public void testInverseLogical() {\r\n+        assertEquals(\"owner\", _mapping.getField(\"rel\").getInverse());\r\n+        assertNull(_mapping.getField(\"owner\").getInverse());\r\n+    }\r\n+\r\n+    public void testDependent() {\r\n+        assertEquals(ValueMetaData.CASCADE_AUTO,\r\n+            _mapping.getField(\"rel\").getCascadeDelete());\r\n+        assertEquals(ValueMetaData.CASCADE_NONE,\r\n+            _mapping.getField(\"eager\").getCascadeDelete());\r\n+        assertEquals(ValueMetaData.CASCADE_AUTO,\r\n+            _mapping.getField(\"eager\").getElement().getCascadeDelete());\r\n+    }\r\n+\r\n+    public void testLRS() {\r\n+        assertTrue(_mapping.getField(\"lrs\").isLRS());\r\n+        assertFalse(_mapping.getField(\"eager\").isLRS());\r\n+    }\r\n+\r\n+    public void testClassCriteria() {\r\n+        assertTrue(_mapping.getFieldMapping(\"eager\").getElementMapping().\r\n+            getUseClassCriteria());\r\n+        assertFalse(_mapping.getFieldMapping(\"eager\").getUseClassCriteria());\r\n+        assertFalse(_mapping.getFieldMapping(\"lrs\").getElementMapping().\r\n+            getUseClassCriteria());\r\n+    }\r\n+\r\n+    public void testExternalValues() {\r\n+        FieldMapping externalValues = _mapping.getFieldMapping\r\n+            (\"externalValues\");\r\n+        assertEquals(JavaTypes.CHAR, externalValues.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.INT, externalValues.getTypeCode());\r\n+        assertEquals(new Integer(1), externalValues.getExternalValueMap().\r\n+            get(new Character('M')));\r\n+        assertEquals(new Integer(2), externalValues.getExternalValueMap().\r\n+            get(new Character('F')));\r\n+    }\r\n+\r\n+    public void testExternalizer() {\r\n+        FieldMapping externalizer = _mapping.getFieldMapping(\"externalizer\");\r\n+        assertEquals(JavaTypes.OBJECT, externalizer.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.STRING, externalizer.getTypeCode());\r\n+        assertEquals(\"java.lang.String\", externalizer.getExternalValue\r\n+            (String.class, null));\r\n+        assertEquals(String.class, externalizer.getFieldValue\r\n+            (String.class.getName(), null));\r\n+    }\r\n+}\r"},{"sha":"7f00de56cb1b03e418a4f8b92efbc7129db2af5f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for InheritanceType.SINGLE_TABLE\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestFlatInheritance extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Flat1.class, Flat2.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Flat1 pc = new Flat1(1);\r\n+        Flat2 pc2 = new Flat2(2);\r\n+        pc.setBasic(10);\r\n+        pc2.setBasic(20);\r\n+        pc2.setBasic2(\"DOG\");\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(Flat1.class, 1);\r\n+        assertEquals(10, pc.getBasic());\r\n+        pc = em.find(Flat1.class, 2);\r\n+        assertEquals(Flat2.class, pc.getClass());\r\n+        assertEquals(20, pc.getBasic());\r\n+        assertEquals(\"DOG\", ((Flat2) pc).getBasic2());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"12533a5ddab78f698ea42e1696e2a62beaec09be","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.enhance.ClassRedefiner;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for generators\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestGenerators extends SingleEMFTestCase {\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        setUp(Generator.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testGet() {\r\n+        if (!PersistenceCapable.class.isAssignableFrom(Generator.class)\r\n+            && !ClassRedefiner.canRedefineClasses())\r\n+            fail(\"This test requires a higher level of enhancement than\"\r\n+                + \" is available in the current environment.\");\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Generator g = new Generator();\r\n+        g.setPk(5);\r\n+        em.persist(g);\r\n+        assertPks(g);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        assertNew();\r\n+    }\r\n+\r\n+    public void testFlush() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Generator g = new Generator();\r\n+        g.setPk(5);\r\n+        em.persist(g);\r\n+        em.flush();\r\n+        assertPks(g);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        assertNew();\r\n+    }\r\n+\r\n+    public void testCommit() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Generator g = new Generator();\r\n+        g.setPk(5);\r\n+        em.persist(g);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        assertNew();\r\n+    }\r\n+\r\n+    private void assertNew() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        Query q = em.createQuery(\"select g from Generator g where \"\r\n+            + \"g.stringField = 'foo'\");\r\n+        for (Object o : q.getResultList())\r\n+            assertPks((Generator) o);\r\n+        em.close();\r\n+    }\r\n+\r\n+    private void assertPks(Generator g) {\r\n+        assertNotEquals(0, g.getPk());\r\n+        assertNotNull(g.getPk2());\r\n+        assertNotEquals(new Integer(0), g);\r\n+        assertNotEquals(0, g.getPk3());\r\n+    }\r\n+}\r"},{"sha":"b5e4b50dfa10a02b22e273480caca4e05d0bb4c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for InheritanceType.JOINED\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestJoinedInheritance extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest3 pc = new AnnoTest3();\r\n+        pc.setPk(new Long(1));\r\n+        pc.setBasic(10);\r\n+        pc.setBasic2(20);\r\n+        em.persist(pc);\r\n+\r\n+        AnnoTest2 pc2 = new AnnoTest2();\r\n+        pc2.setPk1(2);\r\n+        pc2.setPk2(\"bar\");\r\n+        pc2.setInverseOneOne(pc);\r\n+        pc.setSubOneOne(pc2);\r\n+        em.persist(pc2);\r\n+\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc2 = em.find(AnnoTest2.class, new AnnoTest2.Oid(2, \"bar\"));\r\n+        pc = (AnnoTest3) pc2.getInverseOneOne();\r\n+        assertEquals(pc.getInverseOwnerOneOne(), pc2);\r\n+        assertEquals(10, pc.getBasic());\r\n+        assertEquals(20, pc.getBasic2());\r\n+        assertEquals(pc2, pc.getSubOneOne());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"334de0ef92890264f846b25917af0d6121c3f130","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.util.Set;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for m-m\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestManyToMany\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testManyToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(4);\r\n+        em.persist(pc);\r\n+        AnnoTest2 pc2;\r\n+        for (int i = 0; i < 3; i++) {\r\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n+            pc.getManyMany().add(pc2);\r\n+            em.persist(pc2);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(4));\r\n+        Set<AnnoTest2> many = pc.getManyMany();\r\n+        assertEquals(3, many.size());\r\n+        for (AnnoTest2 manyPc2 : many) {\r\n+            switch ((int) manyPc2.getPk1()) {\r\n+                case 5:\r\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 6:\r\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 7:\r\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInverseOwnerManyToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(4);\r\n+        em.persist(pc);\r\n+        AnnoTest2 pc2;\r\n+        for (int i = 0; i < 3; i++) {\r\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n+            pc2.getManyMany().add(pc);\r\n+            em.persist(pc2);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(4));\r\n+        Set<AnnoTest2> many = pc.getInverseOwnerManyMany();\r\n+        assertEquals(3, many.size());\r\n+        for (AnnoTest2 manyPc2 : many) {\r\n+            assertTrue(manyPc2.getManyMany().contains(pc));\r\n+            switch ((int) manyPc2.getPk1()) {\r\n+                case 5:\r\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 6:\r\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 7:\r\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"190129db0a422c7fb0db10ea1d55e334a2f39827","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.MapKey;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test the use of the {@link MapKey} annotation.  Note that we have\r\n+ * more thorough Kodo core tests for the mappings themselves.  See\r\n+ * {@link kodo.jdbc.meta.TestMappedByKeyMaps}.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestMapKey\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Flat1.class, AnnoTest1.class, AnnoTest2.class, CLEAR_TABLES);\r\n+\r\n+    }\r\n+\r\n+    public void testDefaultMapKeyMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"defaultMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(\"pk\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\r\n+            true).getField(\"pk\"), fm.getKey().getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testNamedMapKeyMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"namedMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\r\n+            true).getField(\"basic\"), fm.getKey().getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testInverseOwnerMapKeyMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"inverseOwnerMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof\r\n+            RelationMapInverseKeyFieldStrategy);\r\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(mapping.getRepository().getMetaData(AnnoTest2.class,\r\n+            null, true).getField(\"basic\"), fm.getKey().\r\n+            getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testInsertAndRetrieve() {\r\n+        Flat1 f1 = new Flat1(1);\r\n+        f1.setBasic(100);\r\n+        Flat1 f2 = new Flat1(2);\r\n+        f2.setBasic(200);\r\n+        AnnoTest2 a1 = new AnnoTest2(1L, \"1\");\r\n+        a1.setBasic(\"100\");\r\n+        AnnoTest2 a2 = new AnnoTest2(2L, \"2\");\r\n+        a2.setBasic(\"200\");\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1L);\r\n+        pc.getDefaultMapKey().put(f1.getPk(), f1);\r\n+        pc.getDefaultMapKey().put(f2.getPk(), f2);\r\n+        pc.getNamedMapKey().put(f1.getBasic(), f1);\r\n+        pc.getNamedMapKey().put(f2.getBasic(), f2);\r\n+        pc.getInverseOwnerMapKey().put(a1.getBasic(), a1);\r\n+        pc.getInverseOwnerMapKey().put(a2.getBasic(), a2);\r\n+        a1.setOneManyOwner(pc);\r\n+        a2.setOneManyOwner(pc);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(new Object[]{ pc, f1, f2, a1, a2 });\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(2, pc.getDefaultMapKey().size());\r\n+        assertEquals(1, pc.getDefaultMapKey().get(1).getPk());\r\n+        assertEquals(2, pc.getDefaultMapKey().get(2).getPk());\r\n+        assertEquals(2, pc.getNamedMapKey().size());\r\n+        assertEquals(100, pc.getNamedMapKey().get(100).getBasic());\r\n+        assertEquals(200, pc.getNamedMapKey().get(200).getBasic());\r\n+        assertEquals(2, pc.getInverseOwnerMapKey().size());\r\n+        assertEquals(\"100\", pc.getInverseOwnerMapKey().get(\"100\").\r\n+            getBasic());\r\n+        assertEquals(\"200\", pc.getInverseOwnerMapKey().get(\"200\").\r\n+            getBasic());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"af8cf486da9be6a9682abc0738c1f8503826c821","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.PersistenceException;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+\r\n+public class TestMixedAccess extends PersistenceTestCase {\r\n+\r\n+    public void testMixedAccessEntityError() {\r\n+        try {\r\n+            EntityManagerFactory emf = createEMF(UnenhancedMixedAccess.class);\r\n+            emf.createEntityManager().close();\r\n+        } catch (RuntimeException e) {\r\n+            String msg = e.getMessage();\r\n+            if (!(msg.contains(\"UnenhancedMixedAccess.id\") &&\r\n+                msg.contains(\"UnenhancedMixedAccess.getStringField\")))\r\n+                throw e;\r\n+        }\r\n+    }\r\n+\r\n+    public void testInappropriateTransientError() {\r\n+        try {\r\n+            EntityManagerFactory emf = createEMF(\r\n+                UnenhancedInappropriateTransient.class);\r\n+            emf.createEntityManager().close();\r\n+         } catch (RuntimeException e) {\r\n+            String msg = e.getMessage();\r\n+            if (!(msg.contains(\"UnenhancedInappropriateTransient.id\") &&\r\n+                msg.contains(\"UnenhancedInappropriateTransient.prePersist\")))\r\n+                throw e;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"34f7d762ae7608c200b47cbfd5921fa7d40b67a8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"added","additions":280,"deletions":0,"changes":280,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,280 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.awt.*;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.Discriminator;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClassNameDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test the parsing of non-standard mapping annotations.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestNonstandardMappingAnnotations\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    private ClassMapping _mapping;\r\n+    private DBDictionary _dict;\r\n+\r\n+    public void setUp() {\r\n+        setUp(NonstandardMappingEntity.class, ExtensionsEntity.class,\r\n+            NonstandardMappingMappedSuper.class, EmbedValue2.class,\r\n+            EmbedValue.class,\r\n+            CLEAR_TABLES);\r\n+\r\n+        // trigger complete resolution of metadata etc.\r\n+        emf.createEntityManager().close();\r\n+\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        _dict = conf.getDBDictionaryInstance();\r\n+        _mapping = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\r\n+            NonstandardMappingEntity.class);\r\n+    }\r\n+\r\n+    public void testNonpolymorphic() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"superRel\");\r\n+        assertEquals(ValueMapping.POLY_FALSE, fm.getPolymorphic());\r\n+\r\n+        ValueMapping vm = _mapping.getFieldMapping(\"joinCollection\").\r\n+            getElementMapping();\r\n+        assertEquals(ValueMapping.POLY_JOINABLE, vm.getPolymorphic());\r\n+\r\n+        vm = _mapping.getFieldMapping(\"joinMap\").getKeyMapping();\r\n+        assertEquals(ValueMapping.POLY_FALSE, vm.getPolymorphic());\r\n+        vm = _mapping.getFieldMapping(\"joinMap\").getElementMapping();\r\n+        assertEquals(ValueMapping.POLY_FALSE, vm.getPolymorphic());\r\n+    }\r\n+\r\n+    public void testDataStoreIdColumn() {\r\n+        assertEquals(\"NONSTD_ENTITY\", _mapping.getTable().getName());\r\n+        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\r\n+        assertEquals(1, _mapping.getPrimaryKeyColumns().length);\r\n+        assertEquals(\"OID\", _mapping.getPrimaryKeyColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testDiscriminator() {\r\n+        Discriminator disc = _mapping.getDiscriminator();\r\n+        assertTrue(disc.getStrategy() instanceof\r\n+            ClassNameDiscriminatorStrategy);\r\n+        assertEquals(1, disc.getColumns().length);\r\n+        assertEquals(\"DISCRIM\", disc.getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testSuperclassOverride() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"superCollection\");\r\n+        assertEquals(\"SUP_COLL\", fm.getTable().getName());\r\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n+        assertEquals(\"SUP_ELEM\", fm.getElementMapping().getColumns()[0].\r\n+            getName());\r\n+        assertNull(fm.getElementMapping().getValueIndex());\r\n+        assertNotNull(fm.getJoinIndex());\r\n+    }\r\n+\r\n+    public void testCustomField() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"custom\");\r\n+        assertTrue(fm.getHandler() instanceof PointHandler);\r\n+        assertEquals(2, fm.getColumns().length);\r\n+        assertEquals(\"X_COL\", fm.getColumns()[0].getName());\r\n+        assertEquals(\"Y_COL\", fm.getColumns()[1].getName());\r\n+        assertNotNull(fm.getValueIndex());\r\n+    }\r\n+\r\n+    public void testValueCollection() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"stringCollection\");\r\n+        assertEquals(\"STRINGS_COLL\", fm.getTable().getName());\r\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n+        assertEquals(\"STR_ELEM\", fm.getElementMapping().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(127, fm.getElementMapping().getColumns()[0].getSize());\r\n+        assertNotNull(fm.getElementMapping().getValueIndex());\r\n+        assertNull(fm.getJoinIndex());\r\n+    }\r\n+\r\n+    public void testJoinCollection() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"joinCollection\");\r\n+        assertEquals(\"JOIN_COLL\", fm.getTable().getName());\r\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n+        assertEquals(\"JOIN_ELEM\", fm.getElementMapping().getColumns()[0].\r\n+            getName());\r\n+        assertForeignKey(fm.getJoinForeignKey());\r\n+        assertForeignKey(fm.getElementMapping().getForeignKey());\r\n+    }\r\n+\r\n+    private void assertForeignKey(ForeignKey fk) {\r\n+        if (_dict.supportsForeignKeys)\r\n+            assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\r\n+    }\r\n+\r\n+    public void testValueMap() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"stringMap\");\r\n+        assertEquals(\"STRINGS_MAP\", fm.getTable().getName());\r\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(1, fm.getKeyMapping().getColumns().length);\r\n+        assertEquals(\"STR_KEY\", fm.getKeyMapping().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(127, fm.getKeyMapping().getColumns()[0].getSize());\r\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n+        assertEquals(\"STR_VAL\", fm.getElementMapping().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(127, fm.getElementMapping().getColumns()[0].getSize());\r\n+        assertNull(fm.getJoinIndex());\r\n+        assertNotNull(fm.getKeyMapping().getValueIndex());\r\n+        assertNotNull(fm.getElementMapping().getValueIndex());\r\n+    }\r\n+\r\n+    public void testJoinMap() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"joinMap\");\r\n+        assertEquals(\"JOIN_MAP\", fm.getTable().getName());\r\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(1, fm.getKeyMapping().getColumns().length);\r\n+        assertEquals(\"JOIN_KEY\", fm.getKeyMapping().getColumns()[0].\r\n+            getName());\r\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n+        assertEquals(\"JOIN_VAL\", fm.getElementMapping().getColumns()[0].\r\n+            getName());\r\n+        assertForeignKey(fm.getJoinForeignKey());\r\n+        assertForeignKey(fm.getKeyMapping().getForeignKey());\r\n+        assertForeignKey(fm.getElementMapping().getForeignKey());\r\n+    }\r\n+\r\n+    public void testEmbeddedOverride() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"embed\");\r\n+        assertTrue(fm.isEmbedded());\r\n+        assertEquals(1, fm.getColumns().length);\r\n+        assertTrue(\"UUID_HEX\".equalsIgnoreCase(fm.getColumns()[0].\r\n+            getName()));\r\n+\r\n+        ClassMapping embed = fm.getEmbeddedMapping();\r\n+        fm = embed.getFieldMapping(\"rel\");\r\n+        assertEquals(1, fm.getColumns().length);\r\n+        assertEquals(\"EM_REL_ID\", fm.getColumns()[0].getName());\r\n+        fm = embed.getFieldMapping(\"eager\");\r\n+        assertEquals(\"EM_EAGER\", fm.getTable().getName());\r\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n+        assertEquals(\"ELEM_EAGER_ID\", fm.getElementMapping().getColumns()[0].\r\n+            getName());\r\n+    }\r\n+\r\n+    public void testEmbeddedElementOverride() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"embedCollection\");\r\n+        assertTrue(fm.getElement().isEmbedded());\r\n+        assertEquals(\"EMBED_COLL\", fm.getTable().getName());\r\n+        assertEquals(0, fm.getElementMapping().getColumns().length);\r\n+\r\n+        ClassMapping embed = fm.getElementMapping().getEmbeddedMapping();\r\n+        fm = embed.getFieldMapping(\"basic\");\r\n+        assertEquals(1, fm.getColumns().length);\r\n+        assertEquals(\"EM_BASIC\", fm.getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testInsertAndRetrieve() {\r\n+        NonstandardMappingEntity pc = new NonstandardMappingEntity();\r\n+        pc.getSuperCollection().add(\"super\");\r\n+        pc.setCustom(new Point(1, 2));\r\n+        pc.getStringCollection().add(\"string\");\r\n+        NonstandardMappingEntity pc2 = new NonstandardMappingEntity();\r\n+        pc.getJoinCollection().add(pc2);\r\n+        pc.getStringMap().put(\"stringKey\", \"stringValue\");\r\n+        NonstandardMappingEntity pc3 = new NonstandardMappingEntity();\r\n+        pc.getJoinMap().put(pc2, pc3);\r\n+        ExtensionsEntity embed = new ExtensionsEntity();\r\n+        embed.setExternalValues('M');\r\n+        embed.setExternalizer(String.class);\r\n+        pc.setEmbed(embed);\r\n+        EmbedValue2 embed2 = new EmbedValue2();\r\n+        embed2.setBasic(\"basic\");\r\n+        pc.getEmbedCollection().add(embed2);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(new Object[]{ pc, pc2, pc3 });\r\n+        em.getTransaction().commit();\r\n+        Object pcId = em.getObjectId(pc);\r\n+        Object pc2Id = em.getObjectId(pc2);\r\n+        Object pc3Id = em.getObjectId(pc3);\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(NonstandardMappingEntity.class, pcId);\r\n+        assertEquals(1, pc.getSuperCollection().size());\r\n+        assertEquals(\"super\", pc.getSuperCollection().get(0));\r\n+        assertEquals(1, pc.getCustom().x);\r\n+        assertEquals(2, pc.getCustom().y);\r\n+        assertEquals(1, pc.getStringCollection().size());\r\n+        assertEquals(\"string\", pc.getStringCollection().get(0));\r\n+        assertEquals(1, pc.getJoinCollection().size());\r\n+        assertEquals(pc2Id, em.getObjectId(pc.getJoinCollection().get(0)));\r\n+        assertEquals(1, pc.getStringMap().size());\r\n+        assertEquals(\"stringValue\", pc.getStringMap().get(\"stringKey\"));\r\n+        assertEquals(1, pc.getJoinMap().size());\r\n+        Map.Entry entry = pc.getJoinMap().entrySet().iterator().next();\r\n+        assertEquals(pc2Id, em.getObjectId(entry.getKey()));\r\n+        assertEquals(pc3Id, em.getObjectId(entry.getValue()));\r\n+        assertEquals('M', pc.getEmbed().getExternalValues());\r\n+        assertEquals(String.class, pc.getEmbed().getExternalizer());\r\n+        assertEquals(1, pc.getEmbedCollection().size());\r\n+        assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInsertAndRetrieveEmbeddedCollection() {\r\n+        NonstandardMappingEntity pc = new NonstandardMappingEntity();\r\n+        EmbedValue2 embed2 = new EmbedValue2();\r\n+        embed2.setBasic(\"basic\");\r\n+        pc.getEmbedCollection().add(embed2);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        Object pcId = em.getObjectId(pc);\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(NonstandardMappingEntity.class, pcId);\r\n+        assertEquals(1, pc.getEmbedCollection().size());\r\n+        assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"de8bbe96ee85c9f26ef81f0c7f91e112eb5911a1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for 1-m\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestOneToMany\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testOneToMany() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        pc.getOneMany().add(new AnnoTest2(15, \"foo\"));\r\n+        pc.getOneMany().add(new AnnoTest2(20, \"foobar\"));\r\n+        em.persist(pc);\r\n+        em.persistAll(pc.getOneMany());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        Collection<AnnoTest2> many = pc.getOneMany();\r\n+        assertEquals(2, many.size());\r\n+        for (AnnoTest2 pc2 : many) {\r\n+            switch ((int) pc2.getPk1()) {\r\n+                case 15:\r\n+                    assertEquals(\"foo\", pc2.getPk2());\r\n+                    break;\r\n+                case 20:\r\n+                    assertEquals(\"foobar\", pc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"unknown element:\" + pc2.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInverseOwnerOneToMany() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.getInverseOwnerOneMany().add(pc2);\r\n+        pc2.setOneManyOwner(pc);\r\n+        pc2 = new AnnoTest2(20, \"foobar\");\r\n+        pc.getInverseOwnerOneMany().add(pc2);\r\n+        pc2.setOneManyOwner(pc);\r\n+        em.persist(pc);\r\n+        em.persistAll(pc.getInverseOwnerOneMany());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        Collection<AnnoTest2> many = pc.getInverseOwnerOneMany();\r\n+        assertEquals(2, many.size());\r\n+        for (AnnoTest2 pc3 : many) {\r\n+            assertEquals(pc, pc3.getOneManyOwner());\r\n+            switch ((int) pc3.getPk1()) {\r\n+                case 15:\r\n+                    assertEquals(\"foo\", pc3.getPk2());\r\n+                    break;\r\n+                case 20:\r\n+                    assertEquals(\"foobar\", pc3.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"unknown element:\" + pc3.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"efddefdc5fa1eadab18a0cd98fba9cce2ce2a021","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for 1-1\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestOneToOne\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.setOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSelfOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest1 pc2 = new AnnoTest1(15);\r\n+        pc.setSelfOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getSelfOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(new Long(15), pc2.getPk());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPKJoinSelfOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest1 pc2 = new AnnoTest1(15);\r\n+        pc.setSelfOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getSelfOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(new Long(15), pc2.getPk());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOtherTableOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.setOtherTableOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getOtherTableOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInverseOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc2.setInverseOneOne(pc);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getInverseOwnerOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        assertEquals(pc, pc2.getInverseOneOne());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"fe8a325814cdfe604a3f78a400a7a207fb851e0f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestPropertyAccess\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(PropertyAccess1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPropertyAccessBasicCreation() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n+        pa1_1.setName(\"foo\");\r\n+        em.persist(pa1_1);\r\n+        em.getTransaction().commit();\r\n+\r\n+        // getting a new EM should not be necessary once the extended PC stuff\r\n+        // is complete.\r\n+        em = emf.createEntityManager();\r\n+\r\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n+        assertNotSame(pa1_1, pa1_2);\r\n+        assertNotNull(pa1_2);\r\n+        assertEquals(10, pa1_2.getId());\r\n+        assertEquals(\"foo\", pa1_2.getName());\r\n+    }\r\n+\r\n+    public void testPropertyAccessBasicMutation() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n+        pa1_1.setName(\"foo\");\r\n+        em.persist(pa1_1);\r\n+        em.getTransaction().commit();\r\n+\r\n+        // getting a new EM should not be necessary once the extended PC stuff\r\n+        // is complete.\r\n+        em = emf.createEntityManager();\r\n+\r\n+        em.getTransaction().begin();\r\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n+        pa1_2.setName(pa1_2.getName() + \"bar\");\r\n+        em.getTransaction().commit();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        PropertyAccess1 pa1_3 = em.find(PropertyAccess1.class, 10);\r\n+        assertNotSame(pa1_2, pa1_3);\r\n+        assertEquals(\"foobar\", pa1_3.getName());\r\n+    }\r\n+\r\n+    public void testJPQL() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n+            \"o.name = 'foo'\").getResultList();\r\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n+            \"o.name asc\").getResultList();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testJPQLWithFieldNameMismatch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n+            \"o.intValue = 0\").getResultList();\r\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n+            \"o.intValue asc\").getResultList();\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"059ece1e608d9d5e9c19a58293e00b7d77e80f16","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,137 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.sql.Blob;\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+import java.util.Date;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for serialized, clob, and lob types.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestSerializedLobs extends SingleEMFTestCase {\r\n+\r\n+    private static final Date DATE = new Date();\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    // Serialized fields not being read properly\r\n+    public void testSerialized() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc1 = new AnnoTest1(1);\r\n+        AnnoTest1 pc2 = new AnnoTest1(2);\r\n+        pc1.setSerialized(\"ASDASD\");\r\n+        pc2.setSerialized(DATE);\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc1 = em.find(AnnoTest1.class, new Long(1));\r\n+        pc2 = em.find(AnnoTest1.class, new Long(2));\r\n+        assertEquals(\"ASDASD\", pc1.getSerialized());\r\n+        assertEquals(DATE, pc2.getSerialized());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testBlob()\r\n+        throws Exception {\r\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        pc.setBlob(\"Not Null\".getBytes());\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n+        Connection conn = (Connection) em.getConnection();\r\n+        Statement stmnt = conn.createStatement();\r\n+        ResultSet rs = stmnt.executeQuery(\"SELECT BLOBVAL FROM ANNOTEST1 \"\r\n+            + \"WHERE PK = 1\");\r\n+        assertTrue(rs.next());\r\n+\r\n+        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.useGetBytesForBlobs)\r\n+            rs.getBytes(1);\r\n+        else if (dict.useGetObjectForBlobs)\r\n+            rs.getObject(1);\r\n+        else {\r\n+            Blob blob = rs.getBlob(1);\r\n+            blob.getBytes(1L, (int) blob.length());\r\n+        }\r\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n+\r\n+        try {\r\n+            rs.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        try {\r\n+            stmnt.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        try {\r\n+            conn.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testClob()\r\n+        throws Exception {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 1000; i++)\r\n+            buf.append((char) ('a' + (i % 24)));\r\n+        pc.setClob(buf.toString());\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        String str = pc.getClob();\r\n+        assertEquals(1000, str.length());\r\n+        for (int i = 0; i < str.length(); i++)\r\n+            assertEquals('a' + (i % 24), str.charAt(i));\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"252524178555fd4799be60a15b84d304e0c4f71a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test that InheritanceType.TABLE_PER_CLASS JPA mapping is translated\r\n+ * correctly.  See the <code>kodo.jdbc.meta.tableperclass</code> test package\r\n+ * for more detailed tests of functionality.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestTablePerClassInheritance\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(TablePerClass1.class, TablePerClass2.class, EmbedOwner.class,\r\n+            EmbedValue.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(TablePerClass2.class,\r\n+            null, true);\r\n+        assertTrue(mapping.getStrategy() instanceof FullClassStrategy);\r\n+        assertTrue(mapping.getDiscriminator().getStrategy()\r\n+            instanceof NoneDiscriminatorStrategy);\r\n+        assertNull(mapping.getJoinForeignKey());\r\n+        assertNull(mapping.getJoinablePCSuperclassMapping());\r\n+        assertEquals(\"TPC_BASIC\", mapping.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        ClassMapping embed = mapping.getFieldMapping(\"embed\").\r\n+            getEmbeddedMapping();\r\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+\r\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\r\n+        assertEquals(TablePerClass1.class, sup.getDescribedType());\r\n+        assertTrue(sup.getStrategy() instanceof FullClassStrategy);\r\n+        assertTrue(sup.getDiscriminator().getStrategy()\r\n+            instanceof NoneDiscriminatorStrategy);\r\n+        assertEquals(\"TPC_BASIC\", sup.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        embed = sup.getFieldMapping(\"embed\").getEmbeddedMapping();\r\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testInsertAndRetrieve() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        TablePerClass1 tpc1 = new TablePerClass1();\r\n+        tpc1.setBasic(1);\r\n+        EmbedValue ev = new EmbedValue();\r\n+        ev.setBasic(\"11\");\r\n+        tpc1.setEmbed(ev);\r\n+        TablePerClass2 tpc2 = new TablePerClass2();\r\n+        tpc2.setBasic(2);\r\n+        tpc2.setBasic2(\"2\");\r\n+        ev = new EmbedValue();\r\n+        ev.setBasic(\"22\");\r\n+        tpc2.setEmbed(ev);\r\n+        em.persistAll(tpc1, tpc2);\r\n+        em.getTransaction().commit();\r\n+        int id1 = tpc1.getPk();\r\n+        int id2 = tpc2.getPk();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        tpc1 = em.find(TablePerClass1.class, id1);\r\n+        assertEquals(1, tpc1.getBasic());\r\n+        assertEquals(\"11\", tpc1.getEmbed().getBasic());\r\n+        tpc2 = (TablePerClass2) em.find(TablePerClass1.class, id2);\r\n+        assertEquals(2, tpc2.getBasic());\r\n+        assertEquals(\"2\", tpc2.getBasic2());\r\n+        assertEquals(\"22\", tpc2.getEmbed().getBasic());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"589ee3a196257964c1f48ea13fe9fe579261cc31","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,195 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for opt-lock\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestVersion extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\r\n+            EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 test1 = new AnnoTest1();\r\n+        test1.setPk(new Long(5));\r\n+        test1.setBasic(50);\r\n+        test1.setTransient(500);\r\n+        em.persist(test1);\r\n+\r\n+        AnnoTest2 test2 = new AnnoTest2();\r\n+        test2.setPk1(5);\r\n+        test2.setPk2(\"bar\");\r\n+        test2.setBasic(\"50\");\r\n+        em.persist(test2);\r\n+\r\n+        AnnoTest3 test3 = new AnnoTest3();\r\n+        test3.setPk(new Long(3));\r\n+        test3.setBasic2(50);\r\n+        em.persist(test3);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testVersionNumeric() {\r\n+        EntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc1 = em1.find(AnnoTest1.class, new Long(5));\r\n+        AnnoTest1 pc2 = em2.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(1, pc1.getVersion());\r\n+        assertEquals(1, pc2.getVersion());\r\n+        assertEquals(0, pc1.getTransient());\r\n+        pc1.setBasic(75);\r\n+        pc2.setBasic(75);\r\n+        em1.getTransaction().commit();\r\n+        em1.close();\r\n+\r\n+        em1 = emf.createEntityManager();\r\n+        pc1 = em1.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(2, pc1.getVersion());\r\n+        em1.close();\r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testVersionTimestamp() {\r\n+        // ensure that some time has passed\r\n+        // since the records were created\r\n+        try {\r\n+            Thread.sleep(50);\r\n+        }\r\n+        catch (InterruptedException e) {\r\n+            // do nothing\r\n+        }\r\n+        \r\n+        EntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+        AnnoTest2 pc1 = em1.find(AnnoTest2.class,\r\n+            new AnnoTest2.Oid(5, \"bar\"));\r\n+        AnnoTest2 pc2 = em2.find(AnnoTest2.class,\r\n+            new AnnoTest2.Oid(5, \"bar\"));\r\n+        assertNotNull(pc1.getVersion());\r\n+        assertEquals(pc1.getVersion(), pc2.getVersion());\r\n+        pc1.setBasic(\"75\");\r\n+        pc2.setBasic(\"75\");\r\n+        em1.getTransaction().commit();\r\n+        em1.close();\r\n+\r\n+        em1 = emf.createEntityManager();\r\n+        pc1 = em1.find(AnnoTest2.class,\r\n+            new AnnoTest2.Oid(5, \"bar\"));\r\n+        java.util.Date pc1Version = pc1.getVersion();\r\n+        java.util.Date pc2Version = pc2.getVersion();\r\n+        assertTrue(pc1Version.compareTo(pc2Version) > 0);\r\n+        em1.close();\r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testVersionSubclass() {\r\n+        EntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+        AnnoTest3 pc1 = em1.find(AnnoTest3.class, new Long(3));\r\n+        AnnoTest3 pc2 = em2.find(AnnoTest3.class, new Long(3));\r\n+        assertEquals(1, pc1.getVersion());\r\n+        assertEquals(1, pc2.getVersion());\r\n+        pc1.setBasic2(75);\r\n+        pc2.setBasic2(75);\r\n+        em1.getTransaction().commit();\r\n+        em1.close();\r\n+\r\n+        em1 = emf.createEntityManager();\r\n+        pc1 = em1.find(AnnoTest3.class, new Long(3));\r\n+        assertEquals(2, pc1.getVersion());\r\n+        em1.close();\r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testVersionNoChange() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc = em.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(1, pc.getVersion());\r\n+        assertEquals(0, pc.getTransient());\r\n+        pc.setTransient(750);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(1, pc.getVersion());\r\n+        assertEquals(0, pc.getTransient());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testNoDefaultVersionWithoutFieldOrColumn() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(EmbedOwner.class, \r\n+            null, true);\r\n+        assertEquals(NoneVersionStrategy.getInstance(),\r\n+            cls.getVersion().getStrategy());\r\n+        assertEquals(0, cls.getVersion().getColumns().length);\r\n+    }\r\n+\r\n+    public void testVersionWithField() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(AnnoTest1.class, \r\n+            null, true);\r\n+        assertTrue(NoneVersionStrategy.getInstance() !=\r\n+            cls.getVersion().getStrategy());\r\n+        assertEquals(1, cls.getVersion().getColumns().length);\r\n+    }\r\n+}\r"},{"sha":"14c34ef89d631cf17458280c5d9e0773fc624839","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+import javax.persistence.PrePersist;\r\n+\r\n+@Entity\r\n+public class UnenhancedInappropriateTransient {\r\n+\r\n+    @Id private int id;\r\n+\r\n+    @Transient @PrePersist public void prePersist() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"b1a9752abf62d36849068462fcfb1d7e66da3674","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+\r\n+@Entity\r\n+public class UnenhancedMixedAccess {\r\n+\r\n+    @Id private int id;\r\n+\r\n+    @Transient public String getStringField() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    public void setStringField(String str) {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+}\r"},{"sha":"166e0ac50de43b016c11ea3d5c025b07fa23c108","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+import java.io.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+@Entity\r\n+\r\n+\r\n+public class AttachA\r\n+    implements Serializable, PreDetachCallback,\r\n+    PostDetachCallback, PreAttachCallback, PostAttachCallback {\r\n+\r\n+    // transient method for testing callbacks\r\n+    public transient Object detachSource = null;\r\n+    public transient Object attachSource = null;\r\n+    public transient int preAttachCalls = 0;\r\n+    public transient int postAttachCalls = 0;\r\n+    public transient int preDetachCalls = 0;\r\n+    public transient int postDetachCalls = 0;\r\n+\r\n+    private String astr;\r\n+    private int aint;\r\n+    private double adbl;\r\n+    private String [] stringArray = new String [0];\r\n+    private AttachE [] attachEArray = new AttachE [0];\r\n+\r\n+    public void jdoPreDetach() {\r\n+        preDetachCalls++;\r\n+    }\r\n+\r\n+    public void jdoPostDetach(Object orig) {\r\n+        postDetachCalls++;\r\n+        detachSource = orig;\r\n+    }\r\n+\r\n+    public void jdoPreAttach() {\r\n+        preAttachCalls++;\r\n+    }\r\n+\r\n+    public void jdoPostAttach(Object orig) {\r\n+        postAttachCalls++;\r\n+        attachSource = orig;\r\n+    }\r\n+\r\n+    public void setAstr(String astr) {\r\n+        this.astr = astr;\r\n+    }\r\n+\r\n+    public String getAstr() {\r\n+        return this.astr;\r\n+    }\r\n+\r\n+    public void setAint(int aint) {\r\n+        this.aint = aint;\r\n+    }\r\n+\r\n+    public int getAint() {\r\n+        return this.aint;\r\n+    }\r\n+\r\n+    public void setAdbl(double adbl) {\r\n+        this.adbl = adbl;\r\n+    }\r\n+\r\n+    public double getAdbl() {\r\n+        return this.adbl;\r\n+    }\r\n+\r\n+    public void setStringArray(String [] stringArray) {\r\n+        this.stringArray = stringArray;\r\n+    }\r\n+\r\n+    public String [] getStringArray() {\r\n+        return this.stringArray;\r\n+    }\r\n+\r\n+    public void setAttachEArray(AttachE [] attachEArray) {\r\n+        this.attachEArray = attachEArray;\r\n+    }\r\n+\r\n+    public AttachE [] getAttachEArray() {\r\n+        return this.attachEArray;\r\n+    }\r\n+\r\n+    private void writeObject(ObjectOutputStream out)\r\n+        throws IOException {\r\n+        out.defaultWriteObject();\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws IOException, ClassNotFoundException {\r\n+        in.defaultReadObject();\r\n+    }\r\n+}\r"},{"sha":"c34d0a121c625b04e87db670e11e34a9135e4340","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+@Entity\r\n+public class AttachB\r\n+    extends AttachA {\r\n+\r\n+    private String bstr;\r\n+    private int bint;\r\n+    private double bdbl;\r\n+    private Set ds = new HashSet();\r\n+    private Map stringIntMap = new TreeMap();\r\n+\r\n+    public void setBstr(String bstr) {\r\n+        this.bstr = bstr;\r\n+    }\r\n+\r\n+    public String getBstr() {\r\n+        return this.bstr;\r\n+    }\r\n+\r\n+    public void setBint(int bint) {\r\n+        this.bint = bint;\r\n+    }\r\n+\r\n+    public int getBint() {\r\n+        return this.bint;\r\n+    }\r\n+\r\n+    public void setBdbl(double bdbl) {\r\n+        this.bdbl = bdbl;\r\n+    }\r\n+\r\n+    public double getBdbl() {\r\n+        return this.bdbl;\r\n+    }\r\n+\r\n+    public void setDs(Set ds) {\r\n+        this.ds = ds;\r\n+    }\r\n+\r\n+    public Set getDs() {\r\n+        return this.ds;\r\n+    }\r\n+\r\n+    public void setStringIntMap(Map stringIntMap) {\r\n+        this.stringIntMap = stringIntMap;\r\n+    }\r\n+\r\n+    public Map getStringIntMap() {\r\n+        return this.stringIntMap;\r\n+    }\r\n+}\r"},{"sha":"4b8775159bf8f504e879930a6528433bd4edb0da","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+import java.io.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+@Entity\r\n+public class AttachC\r\n+    extends AttachB {\r\n+\r\n+    private String cstr;\r\n+    private int cint;\r\n+    private double cdbl;\r\n+    private List es = new LinkedList(); // non-DFG\r\n+\r\n+    public void setCstr(String cstr) {\r\n+        this.cstr = cstr;\r\n+    }\r\n+\r\n+    public String getCstr() {\r\n+        return this.cstr;\r\n+    }\r\n+\r\n+    public void setCint(int cint) {\r\n+        this.cint = cint;\r\n+    }\r\n+\r\n+    public int getCint() {\r\n+        return this.cint;\r\n+    }\r\n+\r\n+    public void setCdbl(double cdbl) {\r\n+        this.cdbl = cdbl;\r\n+    }\r\n+\r\n+    public double getCdbl() {\r\n+        return this.cdbl;\r\n+    }\r\n+\r\n+    public void setEs(List es) {\r\n+        this.es = es;\r\n+    }\r\n+\r\n+    public List getEs() {\r\n+        return this.es;\r\n+    }\r\n+}\r"},{"sha":"728c63a3d471ec92643ab658a8d5bf44250b3455","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,122 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+import java.io.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+@Entity\r\n+public class AttachD\r\n+    implements Serializable {\r\n+\r\n+    private Object version;\r\n+\r\n+    private String dstr;\r\n+    private int dint;\r\n+    private double ddbl;\r\n+    private AttachA a;\r\n+    private Set bs = new HashSet(); // DFG\r\n+    private Map pcStringMap = new HashMap();\r\n+    private TreeMap bigIntegerPCMap = new TreeMap();\r\n+\r\n+    private AttachE embeddedE;\r\n+    private AttachA embeddedA;\r\n+\r\n+    public void setDstr(String dstr) {\r\n+        this.dstr = dstr;\r\n+    }\r\n+\r\n+    public String getDstr() {\r\n+        return this.dstr;\r\n+    }\r\n+\r\n+    public void setDint(int dint) {\r\n+        this.dint = dint;\r\n+    }\r\n+\r\n+    public int getDint() {\r\n+        return this.dint;\r\n+    }\r\n+\r\n+    public void setDdbl(double ddbl) {\r\n+        this.ddbl = ddbl;\r\n+    }\r\n+\r\n+    public double getDdbl() {\r\n+        return this.ddbl;\r\n+    }\r\n+\r\n+    public AttachA getA() {\r\n+        return a;\r\n+    }\r\n+\r\n+    public void setA(AttachA a) {\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    public void setBs(Set bs) {\r\n+        this.bs = bs;\r\n+    }\r\n+\r\n+    public Set getBs() {\r\n+        return this.bs;\r\n+    }\r\n+\r\n+    public void setPcStringMap(Map pcStringMap) {\r\n+        this.pcStringMap = pcStringMap;\r\n+    }\r\n+\r\n+    public Map getPcStringMap() {\r\n+        return this.pcStringMap;\r\n+    }\r\n+\r\n+    public void setBigIntegerPCMap(TreeMap bigIntegerPCMap) {\r\n+        this.bigIntegerPCMap = bigIntegerPCMap;\r\n+    }\r\n+\r\n+    public TreeMap getBigIntegerPCMap() {\r\n+        return this.bigIntegerPCMap;\r\n+    }\r\n+\r\n+    public void setEmbeddedE(AttachE embeddedE) {\r\n+        this.embeddedE = embeddedE;\r\n+    }\r\n+\r\n+    public AttachE getEmbeddedE() {\r\n+        return this.embeddedE;\r\n+    }\r\n+\r\n+    public void setEmbeddedA(AttachA embeddedA) {\r\n+        this.embeddedA = embeddedA;\r\n+    }\r\n+\r\n+    public AttachA getEmbeddedA() {\r\n+        return this.embeddedA;\r\n+    }\r\n+\r\n+    public Object getVersion() {\r\n+        return this.version;\r\n+    }\r\n+}\r"},{"sha":"e5215329c2a9bd4b2e2b258823bbd2a1d7d67a52","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+import java.io.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+@Entity\r\n+public class AttachE\r\n+    implements Serializable {\r\n+\r\n+    private Object version;\r\n+\r\n+    private String estr;\r\n+    private int eint;\r\n+    private double edbl;\r\n+    private AttachB b;\r\n+    private AttachF f;\r\n+    private Date date;\r\n+\r\n+    public void setEstr(String estr) {\r\n+        this.estr = estr;\r\n+    }\r\n+\r\n+    public String getEstr() {\r\n+        return this.estr;\r\n+    }\r\n+\r\n+    public void setEint(int eint) {\r\n+        this.eint = eint;\r\n+    }\r\n+\r\n+    public int getEint() {\r\n+        return this.eint;\r\n+    }\r\n+\r\n+    public void setEdbl(double edbl) {\r\n+        this.edbl = edbl;\r\n+    }\r\n+\r\n+    public double getEdbl() {\r\n+        return this.edbl;\r\n+    }\r\n+\r\n+    public void setB(AttachB b) {\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    public AttachB getB() {\r\n+        return this.b;\r\n+    }\r\n+\r\n+    public void setF(AttachF f) {\r\n+        this.f = f;\r\n+    }\r\n+\r\n+    public AttachF getF() {\r\n+        return this.f;\r\n+    }\r\n+\r\n+    public void setDate(Date date) {\r\n+        this.date = date;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return this.date;\r\n+    }\r\n+}\r"},{"sha":"bb02a7f75e85bd1bb0148df749a9627c506bbc17","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,139 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import java.util.*;\r\n+import java.io.*;\r\n+\r\n+\r\n+@Entity\r\n+public class AttachF\r\n+    implements Serializable {\r\n+\r\n+    private int id1;\r\n+    private String id2;\r\n+\r\n+    private String fstr;\r\n+    private int fint;\r\n+    private double fdbl;\r\n+    private AttachE e;\r\n+    private List strings = new ArrayList();\r\n+\r\n+    private AttachC embeddedC;\r\n+\r\n+    public void setFstr(String fstr) {\r\n+        this.fstr = fstr;\r\n+    }\r\n+\r\n+    public String getFstr() {\r\n+        return this.fstr;\r\n+    }\r\n+\r\n+    public void setFint(int fint) {\r\n+        this.fint = fint;\r\n+    }\r\n+\r\n+    public int getFint() {\r\n+        return this.fint;\r\n+    }\r\n+\r\n+    public void setFdbl(double fdbl) {\r\n+        this.fdbl = fdbl;\r\n+    }\r\n+\r\n+    public double getFdbl() {\r\n+        return this.fdbl;\r\n+    }\r\n+\r\n+    public void setE(AttachE e) {\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public AttachE getE() {\r\n+        return this.e;\r\n+    }\r\n+\r\n+    public void setStrings(List strings) {\r\n+        this.strings = strings;\r\n+    }\r\n+\r\n+    public List getStrings() {\r\n+        return this.strings;\r\n+    }\r\n+\r\n+    public static class ID {\r\n+\r\n+        public int id1;\r\n+        public String id2;\r\n+\r\n+        public ID() {\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n+            id1 = Integer.parseInt(tok.nextToken());\r\n+            id2 = tok.nextToken();\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return id1 + (id2 == null ? 0 : id2.hashCode());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return id1 + \":\" + id2;\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return other instanceof ID\r\n+                && ((ID) other).id1 == id1\r\n+                && (id2 == null ? ((ID) other).id2 == null\r\n+                : id2.equals(((ID) other).id2));\r\n+        }\r\n+    }\r\n+\r\n+    public void setId1(int id1) {\r\n+        this.id1 = id1;\r\n+    }\r\n+\r\n+    public int getId1() {\r\n+        return this.id1;\r\n+    }\r\n+\r\n+    public void setId2(String id2) {\r\n+        this.id2 = id2;\r\n+    }\r\n+\r\n+    public String getId2() {\r\n+        return this.id2;\r\n+    }\r\n+\r\n+    public void setEmbeddedC(AttachC embeddedC) {\r\n+        this.embeddedC = embeddedC;\r\n+    }\r\n+\r\n+    public AttachC getEmbeddedC() {\r\n+        return this.embeddedC;\r\n+    }\r\n+}\r"},{"sha":"277b022801f553fa25d8cb200983f3ddf4682d68","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+\r\n+@Entity\r\n+public class AutoIncrementOpOrderPC {\r\n+\r\n+\t@Id\r\n+    private long id;\r\n+    private AutoIncrementOpOrderPC rel;\r\n+    private AutoIncrementOpOrderPC owner;\r\n+    private String secondary;\r\n+    private List relList = new ArrayList();\r\n+    private List mappedRelList = new ArrayList();\r\n+    private List inverseKeyRelList = new ArrayList();\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public OpOrder getRel() {\r\n+        return (OpOrder) rel;\r\n+    }\r\n+\r\n+    public void setRel(AutoIncrementOpOrderPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public OpOrder getOwner() {\r\n+        return (OpOrder) owner;\r\n+    }\r\n+\r\n+    public void setOwner(AutoIncrementOpOrderPC owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public String getSecondary() {\r\n+        return secondary;\r\n+    }\r\n+\r\n+    public void setSecondary(String secondary) {\r\n+        this.secondary = secondary;\r\n+    }\r\n+\r\n+    public List getRelList() {\r\n+        return relList;\r\n+    }\r\n+\r\n+    public List getMappedRelList() {\r\n+        return mappedRelList;\r\n+    }\r\n+\r\n+    public List getInverseKeyRelList() {\r\n+        return inverseKeyRelList;\r\n+    }\r\n+}\r"},{"sha":"6e72588dcb46707186977f80cdc66a1848f9083f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+\r\n+@Entity\r\n+public class AutoIncrementOpOrderPCSub\r\n+    extends AutoIncrementOpOrderPC\r\n+    implements OpOrder {\r\n+\r\n+\t@Id\r\n+    private String sub;\r\n+\r\n+    public String getSub() {\r\n+        return sub;\r\n+    }\r\n+\r\n+    public void setSub(String sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+}\r"},{"sha":"0a0bde8132e95c730442bd53e5df11a66f60276f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@Table(name=\"autoincpc1\")\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class AutoIncrementPC1\r\n+{\r\n+\r\n+\tprivate Set \t\t\t\tsetField \t= new HashSet ();\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Column(name=\"strngfld\", length=50)\r\n+\tprivate String\t\t\t\tstringField\t= null;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate AutoIncrementPC1\toneOne\t\t= null;\r\n+\r\n+\tpublic AutoIncrementPC1()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic AutoIncrementPC1(int key)\r\n+\t{\r\n+\t\tthis.id = key;\r\n+\t}\r\n+\r\n+\tpublic Set getSetField ()\r\n+\t{\r\n+\t\treturn this.setField;\r\n+\t}\r\n+\r\n+\tpublic void setSetField (Set setField)\r\n+\t{\r\n+\t\tthis.setField = setField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic AutoIncrementPC1 getOneOne ()\r\n+\t{\r\n+\t\treturn this.oneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneOne (AutoIncrementPC1 oneOne)\r\n+\t{\r\n+\t\tthis.oneOne = oneOne;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"14691c3449c26be7974ea4686ddf54fb0b1ff1f2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@DiscriminatorValue(\"autoinc2\")\r\n+@Entity\r\n+public class AutoIncrementPC2 extends AutoIncrementPC1\r\n+{\r\n+\tprivate int intField = 0;\r\n+\r\n+\tpublic AutoIncrementPC2()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic AutoIncrementPC2(int id)\r\n+\t{\r\n+\t\tsuper(id);\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn this.intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int intField)\r\n+\t{\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+}\r"},{"sha":"628fd3fc5491e7c55a22b0776155c70e76862d00","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@IdClass(AutoIncrementPC3Id.class)\r\n+@Entity\r\n+@Table(name=\"autoincpc3\")\r\n+public class AutoIncrementPC3\r\n+{\r\n+\t@Id\r\n+\tprivate long\t\t\t\tid\t\t\t= 0;\r\n+\tprivate Set \t\t\t\tsetField \t= new HashSet ();\r\n+\r\n+\t@Column(name=\"strngfld\", length=50)\r\n+\tprivate String\t\t\t\tstringField\t= null;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate AutoIncrementPC3\toneOne\t\t= null;\r\n+\r\n+\tpublic AutoIncrementPC3()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic AutoIncrementPC3(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getId ()\r\n+\t{\r\n+\t\treturn this.id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setId (long id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getSetField ()\r\n+\t{\r\n+\t\treturn this.setField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setSetField (Set setField)\r\n+\t{\r\n+\t\tthis.setField = setField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic AutoIncrementPC3 getOneOne ()\r\n+\t{\r\n+\t\treturn this.oneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneOne (AutoIncrementPC3 oneOne)\r\n+\t{\r\n+\t\tthis.oneOne = oneOne;\r\n+\t}\r\n+}\r"},{"sha":"3a5d939460a5dd1d0ab293e82ea1a2f525cde8bc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,74 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.io.*;\r\n+\r\n+\r\n+/**\r\n+ * Auto-generated by:\r\n+ * kodo.enhance.ApplicationIdTool\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+public class AutoIncrementPC3Id\timplements Serializable\r\n+{\r\n+\tstatic\r\n+\t{\r\n+\t\t// register persistent class in JVM\r\n+\t\tClass c = AutoIncrementPC3.class;\r\n+\t}\r\n+\r\n+\tpublic long id;\r\n+\r\n+\r\n+\tpublic AutoIncrementPC3Id ()\r\n+\t{\r\n+\t}\r\n+\r\n+\r\n+\tpublic AutoIncrementPC3Id (String fromString)\r\n+\t{\r\n+\t\tid = Long.parseLong (fromString);\r\n+\t}\r\n+\r\n+\r\n+\tpublic String toString ()\r\n+\t{\r\n+\t\treturn String.valueOf (id);\r\n+\t}\r\n+\r\n+\r\n+\tpublic int hashCode ()\r\n+\t{\r\n+\t\treturn (int) (id % Integer.MAX_VALUE);\r\n+\t}\r\n+\r\n+\r\n+\tpublic boolean equals (Object obj)\r\n+\t{\r\n+\t\tif (this == obj)\r\n+\t\t\treturn true;\r\n+\t\tif (!(obj instanceof AutoIncrementPC3Id))\r\n+\t\t\treturn false;\r\n+\r\n+\t\tAutoIncrementPC3Id other = (AutoIncrementPC3Id) obj;\r\n+\t\treturn (id == other.id);\r\n+\t}\r\n+}\r"},{"sha":"fb38502c18c3ab45da7d9337fd4d52749b200aa8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Base\r\n+    implements Comparable {\r\n+\r\n+    private int baseField;\r\n+\r\n+    public int getBaseField() {\r\n+        return this.baseField;\r\n+    }\r\n+\r\n+    public void setBaseField(int baseField) {\r\n+        this.baseField = baseField;\r\n+    }\r\n+\r\n+    public int compareTo(Object other) {\r\n+        if (other == this)\r\n+            return 0;\r\n+        if (other == null)\r\n+            return 1;\r\n+        return baseField - ((Base) other).baseField;\r\n+    }\r\n+}\r"},{"sha":"82ba6281ef9de05ce88e154479de71fbb098da37","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class BaseSub1\r\n+    extends Base {\r\n+\r\n+    private int baseSub1Field;\r\n+\r\n+    public int getBaseSub1Field() {\r\n+        return this.baseSub1Field;\r\n+    }\r\n+\r\n+    public void setBaseSub1Field(int baseSub1Field) {\r\n+        this.baseSub1Field = baseSub1Field;\r\n+    }\r\n+}\r"},{"sha":"3145e6a2605ae62376696917b155d7674bbf2417","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class BaseSub1Sub1\r\n+    extends BaseSub1 {\r\n+\r\n+    private int baseSub1Sub1Field;\r\n+\r\n+    public int getBaseSub1Sub1Field() {\r\n+        return this.baseSub1Sub1Field;\r\n+    }\r\n+\r\n+    public void setBaseSub1Sub1Field(int baseSub1Sub1Field) {\r\n+        this.baseSub1Sub1Field = baseSub1Sub1Field;\r\n+    }\r\n+}\r"},{"sha":"fb9fe4de4e620dc7f6f1cb1eee1f6a0ccb24f0cd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class BaseSub1Sub2\r\n+    extends BaseSub1 {\r\n+\r\n+    private int baseSub1Sub2Field;\r\n+\r\n+    public int getBaseSub1Sub2Field() {\r\n+        return this.baseSub1Sub2Field;\r\n+    }\r\n+\r\n+    public void setBaseSub1Sub2Field(int baseSub1Sub2Field) {\r\n+        this.baseSub1Sub2Field = baseSub1Sub2Field;\r\n+    }\r\n+}\r"},{"sha":"ffb49a02b5ef00fe39b7ac3c0765e0b23770b84c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class BaseSub2\r\n+    extends Base {\r\n+\r\n+    private int baseSub2Field;\r\n+\r\n+    public int getBaseSub2Field() {\r\n+        return this.baseSub2Field;\r\n+    }\r\n+\r\n+    public void setBaseSub2Field(int baseSub2Field) {\r\n+        this.baseSub2Field = baseSub2Field;\r\n+    }\r\n+}\r"},{"sha":"0072397f2ffbf54d92a67eefc88da27522f52121","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing the mappingtool's buildSchema action.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class BuildSchemaPC {\r\n+\r\n+    private String stringField = null;\r\n+    private int intField = 0;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"b3d32c5945d92ba7b3e381ce7dad1be401f5178f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type using a byte[] for a primary key field.  Used in\r\n+ * {@link TestByteArrayAppId}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class ByteArrayPKPC {\r\n+\r\n+    private byte[] pk = null;\r\n+    private String stringField = null;\r\n+    private List rels = new ArrayList();\r\n+    private ByteArrayPKPC parent = null;\r\n+\r\n+    public ByteArrayPKPC() {\r\n+    }\r\n+\r\n+    public ByteArrayPKPC(byte[] pk, String stringField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public byte[] getPK() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPK(byte[] pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public ByteArrayPKPC getParent() {\r\n+        return parent;\r\n+    }\r\n+\r\n+    public void setParent(ByteArrayPKPC parent) {\r\n+        this.parent = parent;\r\n+    }\r\n+\r\n+    public List getRels() {\r\n+        return this.rels;\r\n+    }\r\n+\r\n+    public void setRels(List rels) {\r\n+        this.rels = rels;\r\n+    }\r\n+}\r"},{"sha":"7001ea2e7a195f24b39fbc4c1028866c94fab4d0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type using a byte[] for a primary key field.  Used in\r\n+ * {@link TestByteArrayAppId}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class ByteArrayPKPC2\r\n+    extends ByteArrayPKPC {\r\n+\r\n+    private String subfield = null;\r\n+\r\n+    public ByteArrayPKPC2() {\r\n+    }\r\n+\r\n+    public ByteArrayPKPC2(byte[] pk, String stringField) {\r\n+        super(pk, stringField);\r\n+    }\r\n+\r\n+    public String getSubfield() {\r\n+        return this.subfield;\r\n+    }\r\n+\r\n+    public void setSubfield(String subfield) {\r\n+        this.subfield = subfield;\r\n+    }\r\n+}\r"},{"sha":"b799b968f02c46e7b9a3dee4663a4cb74d13e9c5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,120 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+\r\n+/**\r\n+ * Auto-generated by:\r\n+ * org.apache.openjpa.enhance.ApplicationIdTool\r\n+ */\r\n+public class ByteArrayPKPCId implements Serializable {\r\n+\r\n+    private static final char[] HEX = new char[]{\r\n+        '0', '1', '2', '3', '4', '5', '6', '7',\r\n+        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\r\n+    };\r\n+\r\n+    static {\r\n+        // register persistent class in JVM\r\n+        Class c = ByteArrayPKPC.class;\r\n+    }\r\n+\r\n+    public byte[] pk;\r\n+\r\n+    public ByteArrayPKPCId() {\r\n+    }\r\n+\r\n+    public ByteArrayPKPCId(String fromString) {\r\n+        pk = toBytes(fromString);\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return toString(pk);\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+        return hashCode(pk);\r\n+    }\r\n+\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (!(obj instanceof ByteArrayPKPCId))\r\n+            return false;\r\n+\r\n+        ByteArrayPKPCId other = (ByteArrayPKPCId) obj;\r\n+        return (equals(pk, other.pk));\r\n+    }\r\n+\r\n+    private static byte[] toBytes(String s) {\r\n+        if (\"null\".equals(s))\r\n+            return null;\r\n+\r\n+        int len = s.length();\r\n+        byte[] r = new byte[len / 2];\r\n+        for (int i = 0; i < r.length; i++) {\r\n+            int digit1 = s.charAt(i * 2), digit2 = s.charAt(i * 2 + 1);\r\n+            if (digit1 >= '0' && digit1 <= '9')\r\n+                digit1 -= '0';\r\n+            else if (digit1 >= 'A' && digit1 <= 'F')\r\n+                digit1 -= 'A' - 10;\r\n+            if (digit2 >= '0' && digit2 <= '9')\r\n+                digit2 -= '0';\r\n+            else if (digit2 >= 'A' && digit2 <= 'F')\r\n+                digit2 -= 'A' - 10;\r\n+\r\n+            r[i] = (byte) ((digit1 << 4) + digit2);\r\n+        }\r\n+        return r;\r\n+    }\r\n+\r\n+    private static String toString(byte[] b) {\r\n+        if (b == null)\r\n+            return \"null\";\r\n+\r\n+        StringBuffer r = new StringBuffer(b.length * 2);\r\n+        for (int i = 0; i < b.length; i++)\r\n+            for (int j = 1; j >= 0; j--)\r\n+                r.append(HEX[(b[i] >> (j * 4)) & 0xF]);\r\n+        return r.toString();\r\n+    }\r\n+\r\n+    private static boolean equals(byte[] b1, byte[] b2) {\r\n+        if (b1 == null && b2 == null)\r\n+            return true;\r\n+        if (b1 == null || b2 == null)\r\n+            return false;\r\n+        if (b1.length != b2.length)\r\n+            return false;\r\n+        for (int i = 0; i < b1.length; i++)\r\n+            if (b1[i] != b2[i])\r\n+                return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    private static int hashCode(byte[] b) {\r\n+        if (b == null)\r\n+            return 0;\r\n+        int sum = 0;\r\n+        for (int i = 0; i < b.length; i++)\r\n+            sum += b[i];\r\n+        return sum;\r\n+    }\r\n+}\r"},{"sha":"58f9ef9de3387e3c23426a1db946c9c0c2091a59","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ */\r\n+\r\n+@Entity\r\n+public class CircularFKPC {\r\n+\t\r\n+    @Id\r\n+    private String stringField;\r\n+    private CircularFKPC2 fkField;\r\n+\r\n+\tpublic CircularFKPC() {\r\n+\r\n+\t}\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public CircularFKPC2 getFKField() {\r\n+        return this.fkField;\r\n+    }\r\n+\r\n+    public void setFKField(CircularFKPC2 fkField) {\r\n+        this.fkField = fkField;\r\n+    }\r\n+}\r"},{"sha":"654bb492d6e3649d0037324f302d3d1e31ac38fc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ */\r\n+\r\n+@Entity\r\n+public class CircularFKPC2 {\r\n+\r\n+\t@Id\r\n+    private String stringField;\r\n+    private CircularFKPC fkField;\r\n+\r\n+\tpublic CircularFKPC2() {\r\n+\r\n+\t}\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public CircularFKPC getFKField() {\r\n+        return this.fkField;\r\n+    }\r\n+\r\n+    public void setFKField(CircularFKPC fkField) {\r\n+        this.fkField = fkField;\r\n+    }\r\n+}\r"},{"sha":"66886e7bbcbe44aa8949fbed92460c937c5e5126","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Embedded type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class ComplexEmbeddedPC\r\n+    extends RecursivelyEmbeddedPC {\r\n+\t\r\n+\r\n+    private String stringField;\r\n+    private EmbeddedOwnerPC ownerField;\r\n+    private Set stringSet = new HashSet();\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public EmbeddedOwnerPC getOwnerField() {\r\n+        return this.ownerField;\r\n+    }\r\n+\r\n+    public void setOwnerField(EmbeddedOwnerPC ownerField) {\r\n+        this.ownerField = ownerField;\r\n+    }\r\n+\r\n+    public Set getStringSet() {\r\n+        return this.stringSet;\r\n+    }\r\n+\r\n+    public void setStringSet(Set stringSet) {\r\n+        this.stringSet = stringSet;\r\n+    }\r\n+}\r"},{"sha":"2f06e5e7a8470993df3589f12232bb34efbe5612","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ConstantJoinPC {\r\n+\r\n+    private int pk1;\r\n+    private int pk2;\r\n+    private NonPKJoinPC nonPK;\r\n+    private NonPKJoinPC nonPK2;\r\n+    private Collection nonPKs = new HashSet();\r\n+\r\n+    public int getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk1(int pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public NonPKJoinPC getNonPK() {\r\n+        return this.nonPK;\r\n+    }\r\n+\r\n+    public void setNonPK(NonPKJoinPC nonPK) {\r\n+        this.nonPK = nonPK;\r\n+    }\r\n+\r\n+    public NonPKJoinPC getNonPK2() {\r\n+        return this.nonPK2;\r\n+    }\r\n+\r\n+    public void setNonPK2(NonPKJoinPC nonPK2) {\r\n+        this.nonPK2 = nonPK2;\r\n+    }\r\n+\r\n+    public Collection getNonPKs() {\r\n+        return this.nonPKs;\r\n+    }\r\n+\r\n+    public void setNonPKs(Collection nonPKs) {\r\n+        this.nonPKs = nonPKs;\r\n+    }\r\n+}\r"},{"sha":"7c1b90e9494c5b1c48886610a943aff9128c6e41","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ConstantJoinPC2\r\n+    extends ConstantJoinPC {\r\n+\r\n+    private int pc2Field;\r\n+\r\n+    public int getPc2Field() {\r\n+        return this.pc2Field;\r\n+    }\r\n+\r\n+    public void setPc2Field(int pc2Field) {\r\n+        this.pc2Field = pc2Field;\r\n+    }\r\n+}\r"},{"sha":"2831e01acf9199018d51519dbaf8957aba078267","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ConstantJoinPC3\r\n+    extends ConstantJoinPC {\r\n+\r\n+    private int pc3Field;\r\n+\r\n+    public int getPc3Field() {\r\n+        return this.pc3Field;\r\n+    }\r\n+\r\n+    public void setPc3Field(int pc3Field) {\r\n+        this.pc3Field = pc3Field;\r\n+    }\r\n+}\r"},{"sha":"61b17827432babe446e70b75659e928e261efdb5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name=\"conjoinpc4\")\r\n+public class ConstantJoinPC4\r\n+{\r\n+\t@Column(length=50)\r\n+\tprivate String name;\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate ConstantJoinPC5 oneToOne1;\r\n+\t@ManyToMany\r\n+\tprivate Set manyToMany = new HashSet ();\r\n+\r\n+\tpublic ConstantJoinPC4()\r\n+\t{}\r\n+\r\n+\tpublic ConstantJoinPC4 (String name, int id)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getName ()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneToOne1 (ConstantJoinPC5 val)\r\n+\t{\r\n+\t\toneToOne1 = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic ConstantJoinPC5 getOneToOne1 ()\r\n+\t{\r\n+\t\treturn oneToOne1;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setManyToMany (Set val)\r\n+\t{\r\n+\t\tmanyToMany = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getManyToMany ()\r\n+\t{\r\n+\t\treturn manyToMany;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"664d3277c695c97d63d52f953a4a596b2c36596f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name=\"conjoinpc5\")\r\n+public class ConstantJoinPC5\r\n+{\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\tpublic ConstantJoinPC5()\r\n+\t{}\r\n+\r\n+\tpublic ConstantJoinPC5(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic ConstantJoinPC5 (String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getName ()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\n\\ No newline at end of file"},{"sha":"0f0a3928691f9bf95f74d50bda7b9ff7bc0861bf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+\r\n+@Entity\r\n+@Table(name=\"custmappc\")\r\n+public class CustomMappingPC\r\n+{\r\n+\r\n+\tprivate boolean female;\r\n+\t@Column(length=50)\r\n+\tprivate String \tname;\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\tpublic CustomMappingPC()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic CustomMappingPC(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic boolean isFemale ()\r\n+\t{\r\n+\t\treturn this.female;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setFemale (boolean female)\r\n+\t{\r\n+\t\tthis.female = female;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getName ()\r\n+\t{\r\n+\t\treturn this.name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setName (String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"7f8ccc05695a3f547fefee50c3c0e3650bf6fb8f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class DFGTest {\r\n+\r\n+    private int dfgField;\r\n+    private int nonDFGField;\r\n+\r\n+    public int getDFGField() {\r\n+        return this.dfgField;\r\n+    }\r\n+\r\n+    public void setDFGField(int dfgField) {\r\n+        this.dfgField = dfgField;\r\n+    }\r\n+\r\n+    public int getNonDFGField() {\r\n+        return this.nonDFGField;\r\n+    }\r\n+\r\n+    public void setNonDFGField(int nonDFGField) {\r\n+        this.nonDFGField = nonDFGField;\r\n+    }\r\n+}\r"},{"sha":"64072457ef1a70fb9d7962749c256822780c71a2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class DataStoreTripsPC {\r\n+\r\n+    private int intField;\r\n+    private String stringField;\r\n+\r\n+    public DataStoreTripsPC() {\r\n+    }\r\n+\r\n+    public DataStoreTripsPC(int i) {\r\n+        this.intField = i;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"8c430adf82aba78a625db79667fb3095886ff0ca","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Class that uses eager outer joins for its collection fields.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class EagerOuterJoinPC {\r\n+\r\n+    private String name = null;\r\n+    private Collection stringCollection = new HashSet();\r\n+    private List stringList = new ArrayList();\r\n+    private Collection oneManyCollection = new HashSet();\r\n+    private Collection manyManyCollection = new HashSet();\r\n+    private List manyManyList = new ArrayList();\r\n+    private HelperPC helper = null;\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return this.stringCollection;\r\n+    }\r\n+\r\n+    public void setStringCollection(Collection stringCollection) {\r\n+        this.stringCollection = stringCollection;\r\n+    }\r\n+\r\n+    public List getStringList() {\r\n+        return this.stringList;\r\n+    }\r\n+\r\n+    public void setStringList(List stringList) {\r\n+        this.stringList = stringList;\r\n+    }\r\n+\r\n+    public Collection getOneManyCollection() {\r\n+        return this.oneManyCollection;\r\n+    }\r\n+\r\n+    public void setOneManyCollection(Collection oneManyCollection) {\r\n+        this.oneManyCollection = oneManyCollection;\r\n+    }\r\n+\r\n+    public Collection getManyManyCollection() {\r\n+        return this.manyManyCollection;\r\n+    }\r\n+\r\n+    public void setManyManyCollection(Collection manyManyCollection) {\r\n+        this.manyManyCollection = manyManyCollection;\r\n+    }\r\n+\r\n+    public List getManyManyList() {\r\n+        return this.manyManyList;\r\n+    }\r\n+\r\n+    public void setManyManyList(List manyManyList) {\r\n+        this.manyManyList = manyManyList;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return getClass().getName() + \": \" + name;\r\n+    }\r\n+\r\n+    public HelperPC getHelper() {\r\n+        return this.helper;\r\n+    }\r\n+\r\n+    public void setHelper(HelperPC helper) {\r\n+        this.helper = helper;\r\n+    }\r\n+}\r"},{"sha":"f0a2ad696dae9158cb56c3457b8871771c251cd0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Helper class in eager to-many join testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class EagerOuterJoinPC2 {\r\n+\r\n+    private String name = null;\r\n+    private EagerOuterJoinPC ref = null;\r\n+    private HelperPC helper = null;\r\n+    private Collection stringCollection = new HashSet();\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public EagerOuterJoinPC getRef() {\r\n+        return this.ref;\r\n+    }\r\n+\r\n+    public void setRef(EagerOuterJoinPC ref) {\r\n+        this.ref = ref;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return getClass().getName() + \": \" + name;\r\n+    }\r\n+\r\n+    public HelperPC getHelper() {\r\n+        return this.helper;\r\n+    }\r\n+\r\n+    public void setHelper(HelperPC helper) {\r\n+        this.helper = helper;\r\n+    }\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return this.stringCollection;\r\n+    }\r\n+\r\n+    public void setStringCollection(Collection stringCollection) {\r\n+        this.stringCollection = stringCollection;\r\n+    }\r\n+}\r"},{"sha":"f4928da345ba50722439ed8874230232251ca9c6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,161 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+public class EagerPC\r\n+{\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Column(name=\"strngfld\", length=50)\r\n+\tprivate String\t\tstringField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate HelperPC \teager;\r\n+\t@Column(name=\"eagsub\")\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate HelperPC4\teagerSub;\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate HelperPC2\trecurse;\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate HelperPC \thelper;\r\n+\t@Transient private List\t\teagerCollection\t\t= new LinkedList ();\r\n+\t@Transient private List\t\trecurseCollection\t= new LinkedList ();\r\n+\t@Transient private List\t \thelperCollection\t= new LinkedList ();\r\n+\r\n+\tpublic EagerPC()\r\n+\t{}\r\n+\r\n+\tpublic EagerPC(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic HelperPC getEager ()\r\n+\t{\r\n+\t\treturn this.eager;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEager (HelperPC eager)\r\n+\t{\r\n+\t\tthis.eager = eager;\r\n+\t}\r\n+\r\n+\r\n+\tpublic HelperPC2 getRecurse ()\r\n+\t{\r\n+\t\treturn this.recurse;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setRecurse (HelperPC2 recurse)\r\n+\t{\r\n+\t\tthis.recurse = recurse;\r\n+\t}\r\n+\r\n+\r\n+\tpublic HelperPC getHelper ()\r\n+\t{\r\n+\t\treturn this.helper;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setHelper (HelperPC helper)\r\n+\t{\r\n+\t\tthis.helper = helper;\r\n+\t}\r\n+\r\n+\r\n+\tpublic List getEagerCollection ()\r\n+\t{\r\n+\t\treturn this.eagerCollection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEagerCollection (List eagerCollection)\r\n+\t{\r\n+\t\tthis.eagerCollection = eagerCollection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic List getRecurseCollection ()\r\n+\t{\r\n+\t\treturn this.recurseCollection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setRecurseCollection (List recurseCollection)\r\n+\t{\r\n+\t\tthis.recurseCollection = recurseCollection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic List getHelperCollection ()\r\n+\t{\r\n+\t\treturn this.helperCollection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setHelperCollection (List helperCollection)\r\n+\t{\r\n+\t\tthis.helperCollection = helperCollection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic HelperPC4 getEagerSub ()\r\n+\t{\r\n+\t\treturn this.eagerSub;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEagerSub (HelperPC4 eagerSub)\r\n+\t{\r\n+\t\tthis.eagerSub = eagerSub;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"c5853faa7caf7881ba4714c2e55b07c62ef76e45","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+public class EagerPCSub\textends EagerPC\r\n+{\r\n+\tprivate int \tintField;\r\n+\r\n+\t@Column(name=\"eagercoll2\")\r\n+\t@OneToMany\r\n+\t@Transient private List eagerCollection2 = new LinkedList ();\r\n+\r\n+\tpublic EagerPCSub()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic EagerPCSub(int id)\r\n+\t{\r\n+\t\tsuper(id);\r\n+\t}\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn this.intField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int intField)\r\n+\t{\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\tpublic List getEagerCollection2 ()\r\n+\t{\r\n+\t\treturn this.eagerCollection2;\r\n+\t}\r\n+\r\n+\tpublic void setEagerCollection2 (List eagerCollection2)\r\n+\t{\r\n+\t\tthis.eagerCollection2 = eagerCollection2;\r\n+\t}\r\n+}\r"},{"sha":"bf4283c250ab4e7131e72cc6e0810dcffecc8241","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing embedded instances.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class EmbeddedOwnerPC {\r\n+\r\n+    private int id1;\r\n+    private int id2;\r\n+    private String stringField;\r\n+    private EmbeddedPC embedded;\r\n+    private ComplexEmbeddedPC complexEmbedded;\r\n+\r\n+    protected EmbeddedOwnerPC() {\r\n+    }\r\n+\r\n+    public EmbeddedOwnerPC(int id1, int id2) {\r\n+        this.id1 = id1;\r\n+        this.id2 = id2;\r\n+    }\r\n+\r\n+    public int getId1() {\r\n+        return id1;\r\n+    }\r\n+\r\n+    public int getId2() {\r\n+        return id2;\r\n+    }\r\n+\r\n+    public EmbeddedPC getEmbedded() {\r\n+        return this.embedded;\r\n+    }\r\n+\r\n+    public void setEmbedded(EmbeddedPC embedded) {\r\n+        this.embedded = embedded;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public ComplexEmbeddedPC getComplexEmbedded() {\r\n+        return this.complexEmbedded;\r\n+    }\r\n+\r\n+    public void setComplexEmbedded(ComplexEmbeddedPC complexEmbedded) {\r\n+        this.complexEmbedded = complexEmbedded;\r\n+    }\r\n+}\r"},{"sha":"a8a87eab1cd340becc8b8125f2f098f3fac4abe1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Embedded type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class EmbeddedPC {\r\n+\r\n+    private int intField;\r\n+    private String stringField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"b96e6d5ebf7e000a7b94dd6d7c2a5df2e99d57e8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+@Entity\r\n+public class HelperPC implements Serializable\r\n+{\r\n+\t@Column(length=50, name=\"strngfld\")\r\n+\tprivate String \t\tstringField;\r\n+\r\n+\tprivate HelperPC \thelper;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate EagerPC\t\teager;\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\tpublic HelperPC()\r\n+\t{}\r\n+\r\n+\tpublic HelperPC(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\tpublic HelperPC getHelper ()\r\n+\t{\r\n+\t\treturn this.helper;\r\n+\t}\r\n+\r\n+\tpublic void setHelper (HelperPC helper)\r\n+\t{\r\n+\t\tthis.helper = helper;\r\n+\t}\r\n+\r\n+\tpublic EagerPC getEager ()\r\n+\t{\r\n+\t\treturn this.eager;\r\n+\t}\r\n+\r\n+\tpublic void setEager (EagerPC eager)\r\n+\t{\r\n+\t\tthis.eager = eager;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"ea36f4f13f0909b03cb09747442bee688122aea7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+public class HelperPC2\r\n+{\r\n+\t@Column(name=\"strngfld\", length=50)\r\n+\tprivate String \t\tstringField;\r\n+\r\n+\t@Id @GeneratedValue\r\n+\tprivate int id;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate HelperPC3 \thelper;\r\n+\t@Column(name=\"helpcoll\")\r\n+\tprivate List\t\thelperCollection = new LinkedList ();\r\n+\r\n+\tpublic HelperPC2()\r\n+\t{}\r\n+\r\n+\tpublic HelperPC2(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\tpublic HelperPC3 getHelper ()\r\n+\t{\r\n+\t\treturn this.helper;\r\n+\t}\r\n+\r\n+\tpublic void setHelper (HelperPC3 helper)\r\n+\t{\r\n+\t\tthis.helper = helper;\r\n+\t}\r\n+\r\n+\tpublic List getHelperCollection ()\r\n+\t{\r\n+\t\treturn this.helperCollection;\r\n+\t}\r\n+\r\n+\tpublic void setHelperCollection (List helperCollection)\r\n+\t{\r\n+\t\tthis.helperCollection = helperCollection;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"54173ac5dbfbcad7e118cb8c81bfa34f3c0189bd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class HelperPC3\r\n+{\r\n+\t@Column(name=\"strngfld\", length=50)\r\n+\tprivate String stringField;\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\tpublic HelperPC3()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic HelperPC3(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"8f1d15798f2ee764bc972f91dc7d927eefbe5db3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"helppc4\")\r\n+public class HelperPC4 extends HelperPC3\r\n+{\r\n+\tprivate int intField;\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn this.intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int intField)\r\n+\t{\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+}\r"},{"sha":"18add00af151f91228cf45db0082de08dd209198","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import java.io.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public abstract class HorizA\r\n+    implements Serializable {\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+    private Set relations = new HashSet();\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+\r\n+    public void setRelations(Set relations) {\r\n+        this.relations = relations;\r\n+    }\r\n+\r\n+    public Set getRelations() {\r\n+        return this.relations;\r\n+    }\r\n+}\r"},{"sha":"0cf50298e3bfdce54e7976770a38bb248c2f0d18","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+\r\n+import serp.util.*;\r\n+\r\n+public interface HorizAppA {\r\n+\r\n+    public void setPk1(String pk1);\r\n+\r\n+    public String getPk1();\r\n+\r\n+    public void setPk2(int pk2);\r\n+\r\n+    public int getPk2();\r\n+\r\n+    public void setStringA(String stringA);\r\n+\r\n+    public String getStringA();\r\n+\r\n+    public void setIntA(int intA);\r\n+\r\n+    public int getIntA();\r\n+}\r"},{"sha":"8523a16ba3a9294dda112605daff82204d68d4dd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+\r\n+import serp.util.*;\r\n+\r\n+public interface HorizAppB\r\n+    extends HorizAppA {\r\n+\r\n+    public void setStringB(String stringB);\r\n+\r\n+    public String getStringB();\r\n+\r\n+    public void setIntB(int intB);\r\n+\r\n+    public int getIntB();\r\n+}\r\n+\r"},{"sha":"1cc4eb356f1d7c60e0637fa031e86fb6cd944e1d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+\r\n+import serp.util.*;\r\n+\r\n+public interface HorizAppC\r\n+    extends HorizAppA {\r\n+\r\n+    public void setStringC(String stringC);\r\n+\r\n+    public String getStringC();\r\n+\r\n+    public void setIntC(int intC);\r\n+\r\n+    public int getIntC();\r\n+}\r\n+\r\n+\r"},{"sha":"33e101046396da7ef7bff6097a995b16e303852c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+\r\n+import serp.util.*;\r\n+\r\n+public interface HorizAppD\r\n+    extends HorizAppA {\r\n+\r\n+    public void setStringD(String stringD);\r\n+\r\n+    public String getStringD();\r\n+\r\n+    public void setIntD(int intD);\r\n+\r\n+    public int getIntD();\r\n+}\r\n+\r\n+\r\n+\r"},{"sha":"445f9c1d0c0f0de410fb423907160c1ec199a0f4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizAppInterVerticalA\r\n+    implements HorizInterA {\r\n+\r\n+    private int pk;\r\n+    private String stringA;\r\n+    private int intA;\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+\r\n+    public static class Id implements java.io.Serializable {\r\n+\r\n+        public int pk;\r\n+\r\n+        public Id() {\r\n+        }\r\n+\r\n+        public Id(String str) {\r\n+            pk = Integer.parseInt(str);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \"\";\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return pk;\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return other instanceof Id\r\n+                && ((Id) other).pk == pk;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"36c19c57ff9fd472af38eb7adb99336fdd2a5706","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizAppInterVerticalB\r\n+    extends HorizAppInterVerticalA\r\n+    implements HorizInterB {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+}\r\n+\r"},{"sha":"530fa6cbd7dfbdfb1b902c56e3bdb01a222a3911","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizAppInterVerticalC\r\n+    extends HorizAppInterVerticalB\r\n+    implements HorizInterC {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+}\r\n+\r"},{"sha":"b906cc3992989cee999603a2fa5621c4de859171","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizAppInterVerticalD\r\n+    extends HorizAppInterVerticalB\r\n+    implements HorizInterD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+}\r"},{"sha":"f1740432db5b07e8471528b1441f98cee3800321","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,122 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import serp.util.*;\r\n+\r\n+@Entity\r\n+public class HorizAppMultiA\r\n+    implements HorizAppA {\r\n+\r\n+    // initialize PK values to random values\r\n+\t//FIXME \r\n+\t/*\r\n+    private String pk1 = \"PK-\" + Strings.getClassName(getClass().getName());\r\n+    private int pk2 = com.solarmetric.test.AbstractTestCase.\r\n+        randomInt().intValue();\r\n+    */\r\n+\tprivate String pk1;\r\n+    private int pk2;\r\n+\t\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+    private List relations = new ArrayList();\r\n+\r\n+    public void setPk1(String pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public String getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+\r\n+    public static class ID\r\n+        implements Serializable {\r\n+\r\n+        public String pk1;\r\n+        public int pk2;\r\n+\r\n+        public ID() {\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n+            pk1 = tok.nextToken();\r\n+            pk2 = Integer.parseInt(tok.nextToken());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk1 + \":\" + pk2;\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (pk2 + (pk1 == null ? 0 : pk1.hashCode()))\r\n+                % Integer.MAX_VALUE;\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return other instanceof ID\r\n+                && ((ID) other).pk2 == pk2\r\n+                && (((ID) other).pk1 == null\r\n+                ? pk1 == null\r\n+                : ((ID) other).pk1.equals(pk1));\r\n+        }\r\n+    }\r\n+\r\n+    public void setRelations(List relations) {\r\n+        this.relations = relations;\r\n+    }\r\n+\r\n+    public List getRelations() {\r\n+        return this.relations;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r"},{"sha":"61066926ede3c655f7e06fa5d37364c3244f1414","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizAppMultiB\r\n+    extends HorizAppMultiA\r\n+    implements HorizAppB {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+\r\n+    public static class ID\r\n+        extends HorizAppMultiA.ID {\r\n+\r\n+        public ID() {\r\n+            super();\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            super(str);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"ad9d13f0bb8cccdcca50e90ea0feb5e634b0ed14","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizAppMultiC\r\n+    extends HorizAppMultiA\r\n+    implements HorizAppC {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+\r\n+    public static class ID\r\n+        extends HorizAppMultiA.ID {\r\n+\r\n+        public ID() {\r\n+            super();\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            super(str);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"0f5f4ce433945dacb3b4ea8d3528bd039a9bdfa3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizAppMultiD\r\n+    extends HorizAppMultiA\r\n+    implements HorizAppD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+\r\n+    public static class ID\r\n+        extends HorizAppMultiA.ID {\r\n+\r\n+        public ID() {\r\n+            super();\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            super(str);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"cd5b2986c0360f522e98f096a606ae60b4070c85","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import serp.util.*;\r\n+\r\n+@Entity\r\n+public class HorizAppSingleA\r\n+    implements HorizAppA {\r\n+\r\n+    // initialize PK values to random values\r\n+\t//FIXME \r\n+\t/*\r\n+    private String pk1 = \"PK-\" + Strings.getClassName(getClass().getName());\r\n+    private int pk2 = com.solarmetric.test.AbstractTestCase.\r\n+        randomInt().intValue();\r\n+\t*/\r\n+\tprivate String pk1;\r\n+    private int pk2;\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+    private List relations = new ArrayList();\r\n+\r\n+    public void setPk1(String pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public String getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+\r\n+    public static class ID\r\n+        implements Serializable {\r\n+\r\n+        public String pk1;\r\n+        public int pk2;\r\n+\r\n+        public ID() {\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n+            pk1 = tok.nextToken();\r\n+            pk2 = Integer.parseInt(tok.nextToken());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk1 + \":\" + pk2;\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (pk2 + (pk1 == null ? 0 : pk1.hashCode()))\r\n+                % Integer.MAX_VALUE;\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return other instanceof ID\r\n+                && ((ID) other).pk2 == pk2\r\n+                && (((ID) other).pk1 == null\r\n+                ? pk1 == null\r\n+                : ((ID) other).pk1.equals(pk1));\r\n+        }\r\n+    }\r\n+\r\n+    public void setRelations(List relations) {\r\n+        this.relations = relations;\r\n+    }\r\n+\r\n+    public List getRelations() {\r\n+        return this.relations;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r"},{"sha":"4f6a2b03015d81781a8e91386a7b2f35c01cdc4d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizAppSingleB\r\n+    extends HorizAppSingleA\r\n+    implements HorizAppB {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+}\r"},{"sha":"a276362c4f62680b9d28372293ef5250818603ba","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizAppSingleC\r\n+    extends HorizAppSingleA\r\n+    implements HorizAppC {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+}\r"},{"sha":"191bac0e059bbada15e6976bc02a741f6489ab62","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizAppSingleD\r\n+    extends HorizAppSingleA\r\n+    implements HorizAppD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+}\r"},{"sha":"b96fee3278a0e94d60e9dc5d9daf784fdb91c1c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizB\r\n+    extends HorizA {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+}\r\n+\r"},{"sha":"05ca34764756e9fabdfe87dccb6cb909574c66eb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public abstract class HorizC\r\n+    extends HorizA {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+}\r\n+\r"},{"sha":"125b62459021a0be770debd69ad51a131849f19e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizD\r\n+    extends HorizC {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+}\r\n+\r\n+\r"},{"sha":"0bef9f2620e32919f2fe5e90c7ae83fc5900cc9e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizE\r\n+    extends HorizC {\r\n+\r\n+    private String stringE;\r\n+    private int intE;\r\n+\r\n+    public void setStringE(String stringE) {\r\n+        this.stringE = stringE;\r\n+    }\r\n+\r\n+    public String getStringE() {\r\n+        return this.stringE;\r\n+    }\r\n+\r\n+    public void setIntE(int intE) {\r\n+        this.intE = intE;\r\n+    }\r\n+\r\n+    public int getIntE() {\r\n+        return this.intE;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r"},{"sha":"2f46d9af5590a11e5033483f66a8dd11cdb116ec","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizF\r\n+    extends HorizE {\r\n+\r\n+    private String stringF;\r\n+    private int intF;\r\n+\r\n+    public void setStringF(String stringF) {\r\n+        this.stringF = stringF;\r\n+    }\r\n+\r\n+    public String getStringF() {\r\n+        return this.stringF;\r\n+    }\r\n+\r\n+    public void setIntF(int intF) {\r\n+        this.intF = intF;\r\n+    }\r\n+\r\n+    public int getIntF() {\r\n+        return this.intF;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r"},{"sha":"098d09f6bc5fd441902f0cbd99583460a75829a7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizG\r\n+    extends HorizE {\r\n+\r\n+    private String stringG;\r\n+    private int intG;\r\n+\r\n+    public void setStringG(String stringG) {\r\n+        this.stringG = stringG;\r\n+    }\r\n+\r\n+    public String getStringG() {\r\n+        return this.stringG;\r\n+    }\r\n+\r\n+    public void setIntG(int intG) {\r\n+        this.intG = intG;\r\n+    }\r\n+\r\n+    public int getIntG() {\r\n+        return this.intG;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r"},{"sha":"a84b51df5a760fe0b316beabe51bd1590e820b76","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizH\r\n+    extends HorizG {\r\n+\r\n+    private String stringH;\r\n+    private int intH;\r\n+\r\n+    public void setStringH(String stringH) {\r\n+        this.stringH = stringH;\r\n+    }\r\n+\r\n+    public String getStringH() {\r\n+        return this.stringH;\r\n+    }\r\n+\r\n+    public void setIntH(int intH) {\r\n+        this.intH = intH;\r\n+    }\r\n+\r\n+    public int getIntH() {\r\n+        return this.intH;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r"},{"sha":"106a14e2ded7dcb95d6ae324fffa77bdc119c0d6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizI\r\n+    extends HorizG {\r\n+\r\n+    private String stringI;\r\n+    private int intI;\r\n+\r\n+    public void setStringI(String stringI) {\r\n+        this.stringI = stringI;\r\n+    }\r\n+\r\n+    public String getStringI() {\r\n+        return this.stringI;\r\n+    }\r\n+\r\n+    public void setIntI(int intI) {\r\n+        this.intI = intI;\r\n+    }\r\n+\r\n+    public int getIntI() {\r\n+        return this.intI;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r"},{"sha":"25636abca7452c07f725b3e14037079b90e7e87c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public interface HorizInterA {\r\n+\r\n+    public void setStringA(String stringA);\r\n+\r\n+    public String getStringA();\r\n+\r\n+    public void setIntA(int intA);\r\n+\r\n+    public int getIntA();\r\n+}\r"},{"sha":"729f0ee2bd528a75452a7065173a6298ca51b689","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public interface HorizInterB\r\n+    extends HorizInterA {\r\n+\r\n+    public void setStringB(String stringB);\r\n+\r\n+    public String getStringB();\r\n+\r\n+    public void setIntB(int intB);\r\n+\r\n+    public int getIntB();\r\n+}\r"},{"sha":"40dbeb4b5f395c26898c5b7c2034ba55119aa893","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public interface HorizInterC\r\n+    extends HorizInterB {\r\n+\r\n+    public void setStringC(String stringC);\r\n+\r\n+    public String getStringC();\r\n+\r\n+    public void setIntC(int intC);\r\n+\r\n+    public int getIntC();\r\n+}\r"},{"sha":"84bdc8e1220120e5266f5c04fa3de1616927cff7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public interface HorizInterD\r\n+    extends HorizInterB {\r\n+\r\n+    public void setStringD(String stringD);\r\n+\r\n+    public String getStringD();\r\n+\r\n+    public void setIntD(int intD);\r\n+\r\n+    public int getIntD();\r\n+}\r"},{"sha":"0dc40495c5178a9ba3732803034175b38dee3413","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterFlatA\r\n+    implements HorizInterA {\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+}\r"},{"sha":"f16ff92c797253ef0ac93132fe0b1a79adea862c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterFlatB\r\n+    extends HorizInterFlatA\r\n+    implements HorizInterB {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+}\r"},{"sha":"b57127754abcedaaca3013fe8970013a323aa712","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterFlatC\r\n+    extends HorizInterFlatB\r\n+    implements HorizInterC {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+}\r"},{"sha":"fa65f0add749836c7e2549cdcf28415094f3b289","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterFlatD\r\n+    extends HorizInterFlatB\r\n+    implements HorizInterD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+}\r"},{"sha":"a14ad396a4cab342a29edccf5f6e2e921ff4272d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterVerticalA\r\n+    implements HorizInterA {\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+}\r"},{"sha":"fc8d5a441f993a655e4b342c6acd73d1c65c09cf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterVerticalB\r\n+    extends HorizInterVerticalA\r\n+    implements HorizInterB {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+}\r\n+\r"},{"sha":"82db8c9ff224dcbd808c1ec62f45b3e5b2b5ce17","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterVerticalC\r\n+    extends HorizInterVerticalB\r\n+    implements HorizInterC {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+}\r\n+\r"},{"sha":"cf96d22aa406010003164dde02f065cb2df8ea5d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Interface for intermediate horizontal mappings with flat mappings.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizInterVerticalD\r\n+    extends HorizInterVerticalB\r\n+    implements HorizInterD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+}\r"},{"sha":"fc669302a3c9e2d3827afb3e6f3ef210cf3e607e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizJ\r\n+    extends HorizD {\r\n+\r\n+    private String stringJ;\r\n+    private int intJ;\r\n+\r\n+    public void setStringJ(String stringJ) {\r\n+        this.stringJ = stringJ;\r\n+    }\r\n+\r\n+    public String getStringJ() {\r\n+        return this.stringJ;\r\n+    }\r\n+\r\n+    public void setIntJ(int intJ) {\r\n+        this.intJ = intJ;\r\n+    }\r\n+\r\n+    public int getIntJ() {\r\n+        return this.intJ;\r\n+    }\r\n+}\r"},{"sha":"a12121c680aa0ef78028b13c657abe807c8cbf07","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizK\r\n+    extends HorizJ {\r\n+\r\n+    private String stringK;\r\n+    private int intK;\r\n+\r\n+    public void setStringK(String stringK) {\r\n+        this.stringK = stringK;\r\n+    }\r\n+\r\n+    public String getStringK() {\r\n+        return this.stringK;\r\n+    }\r\n+\r\n+    public void setIntK(int intK) {\r\n+        this.intK = intK;\r\n+    }\r\n+\r\n+    public int getIntK() {\r\n+        return this.intK;\r\n+    }\r\n+}\r\n+\r"},{"sha":"706641a717d37711118d6732ae14b356a420330c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizL\r\n+    extends HorizJ {\r\n+\r\n+    private String stringL;\r\n+    private int intL;\r\n+\r\n+    public void setStringL(String stringL) {\r\n+        this.stringL = stringL;\r\n+    }\r\n+\r\n+    public String getStringL() {\r\n+        return this.stringL;\r\n+    }\r\n+\r\n+    public void setIntL(int intL) {\r\n+        this.intL = intL;\r\n+    }\r\n+\r\n+    public int getIntL() {\r\n+        return this.intL;\r\n+    }\r\n+}\r\n+\r"},{"sha":"a4300cfb9ab004246d804ef58a60d08aa139e069","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizM\r\n+    extends HorizL {\r\n+\r\n+    private String stringM;\r\n+    private int intM;\r\n+\r\n+    public void setStringM(String stringM) {\r\n+        this.stringM = stringM;\r\n+    }\r\n+\r\n+    public String getStringM() {\r\n+        return this.stringM;\r\n+    }\r\n+\r\n+    public void setIntM(int intM) {\r\n+        this.intM = intM;\r\n+    }\r\n+\r\n+    public int getIntM() {\r\n+        return this.intM;\r\n+    }\r\n+}\r\n+\r"},{"sha":"2652d361c0d3fc8c3d2ba47d6e391d8e767dde99","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizN\r\n+    extends HorizM {\r\n+\r\n+    private String stringN;\r\n+    private int intN;\r\n+\r\n+    public void setStringN(String stringN) {\r\n+        this.stringN = stringN;\r\n+    }\r\n+\r\n+    public String getStringN() {\r\n+        return this.stringN;\r\n+    }\r\n+\r\n+    public void setIntN(int intN) {\r\n+        this.intN = intN;\r\n+    }\r\n+\r\n+    public int getIntN() {\r\n+        return this.intN;\r\n+    }\r\n+}\r\n+\r\n+\r"},{"sha":"722cc9774a95dc78a5334915dcbec2b183227685","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class HorizO\r\n+    extends HorizN {\r\n+\r\n+    private String stringO;\r\n+    private int intO;\r\n+\r\n+    public void setStringO(String stringO) {\r\n+        this.stringO = stringO;\r\n+    }\r\n+\r\n+    public String getStringO() {\r\n+        return this.stringO;\r\n+    }\r\n+\r\n+    public void setIntO(int intO) {\r\n+        this.intO = intO;\r\n+    }\r\n+\r\n+    public int getIntO() {\r\n+        return this.intO;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r"},{"sha":"056a90a840ca5da26768b97321b294480b8c6910","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","status":"added","additions":406,"deletions":0,"changes":406,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,406 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.commons.collections.*;\r\n+\r\n+/**\r\n+ * Normal class that has relations to and from various horizontal\r\n+ * relations.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+@Entity\r\n+public class HorizRelation\r\n+    implements Serializable {\r\n+    ///////////////////////\r\n+    // One to one mappings\r\n+    ///////////////////////\r\n+\r\n+    private HorizA obHorizA;\r\n+    private HorizB obHorizB;\r\n+    private HorizC obHorizC;\r\n+    private HorizD obHorizD;\r\n+    private HorizE obHorizE;\r\n+    private HorizF obHorizF;\r\n+    private HorizG obHorizG;\r\n+    private HorizH obHorizH;\r\n+    private HorizI obHorizI;\r\n+    private HorizJ obHorizJ;\r\n+    private HorizK obHorizK;\r\n+    private HorizL obHorizL;\r\n+    private HorizM obHorizM;\r\n+    private HorizN obHorizN;\r\n+    private HorizO obHorizO;\r\n+    private HorizAppSingleA obHorizAppSingleA;\r\n+    private HorizAppSingleB obHorizAppSingleB;\r\n+    private HorizAppSingleC obHorizAppSingleC;\r\n+    private HorizAppSingleD obHorizAppSingleD;\r\n+    private HorizAppMultiA obHorizAppMultiA;\r\n+    private HorizAppMultiB obHorizAppMultiB;\r\n+    private HorizAppMultiC obHorizAppMultiC;\r\n+    private HorizAppMultiD obHorizAppMultiD;\r\n+    private HorizInterFlatA obHorizInterFlatA;\r\n+    private HorizInterFlatB obHorizInterFlatB;\r\n+    private HorizInterFlatC obHorizInterFlatC;\r\n+    private HorizInterFlatD obHorizInterFlatD;\r\n+    private HorizInterVerticalA obHorizInterVerticalA;\r\n+    private HorizInterVerticalB obHorizInterVerticalB;\r\n+    private HorizInterVerticalC obHorizInterVerticalC;\r\n+    private HorizInterVerticalD obHorizInterVerticalD;\r\n+\r\n+    ////////////////////////\r\n+    // One to many mappings\r\n+    ////////////////////////\r\n+\r\n+    private HashSet cHorizA = new HashSet();\r\n+    private LinkedList cHorizB = new LinkedList();\r\n+    private ArrayList cHorizC = new ArrayList();\r\n+    private Vector cHorizD = new Vector();\r\n+    private HashSet cHorizE = new HashSet();\r\n+    private LinkedList cHorizF = new LinkedList();\r\n+    private ArrayList cHorizG = new ArrayList();\r\n+    private Vector cHorizH = new Vector();\r\n+    private HashSet cHorizI = new HashSet();\r\n+    private LinkedList cHorizJ = new LinkedList();\r\n+    private ArrayList cHorizK = new ArrayList();\r\n+    private Vector cHorizL = new Vector();\r\n+    private HashSet cHorizM = new HashSet();\r\n+    private LinkedList cHorizN = new LinkedList();\r\n+    private ArrayList cHorizO = new ArrayList();\r\n+    private Vector cHorizAppSingleA = new Vector();\r\n+    private HashSet cHorizAppSingleB = new HashSet();\r\n+    private LinkedList cHorizAppSingleC = new LinkedList();\r\n+    private ArrayList cHorizAppSingleD = new ArrayList();\r\n+    private Vector cHorizAppMultiA = new Vector();\r\n+    private HashSet cHorizAppMultiB = new HashSet();\r\n+    private LinkedList cHorizAppMultiC = new LinkedList();\r\n+    private ArrayList cHorizAppMultiD = new ArrayList();\r\n+    private Vector cHorizInterFlatA = new Vector();\r\n+    private HashSet cHorizInterFlatB = new HashSet();\r\n+    private LinkedList cHorizInterFlatC = new LinkedList();\r\n+    private ArrayList cHorizInterFlatD = new ArrayList();\r\n+    private Vector cHorizInterVerticalA = new Vector();\r\n+    private HashSet cHorizInterVerticalB = new HashSet();\r\n+    private LinkedList cHorizInterVerticalC = new LinkedList();\r\n+    private ArrayList cHorizInterVerticalD = new ArrayList();\r\n+\r\n+    public Map getCollections() {\r\n+        Map map = new SequencedHashMap();\r\n+        map.put(\"HorizA\", cHorizA);\r\n+        map.put(\"HorizB\", cHorizB);\r\n+        map.put(\"HorizC\", cHorizC);\r\n+        map.put(\"HorizD\", cHorizD);\r\n+        map.put(\"HorizE\", cHorizE);\r\n+        map.put(\"HorizF\", cHorizF);\r\n+        map.put(\"HorizG\", cHorizG);\r\n+        map.put(\"HorizH\", cHorizH);\r\n+        map.put(\"HorizI\", cHorizI);\r\n+        map.put(\"HorizJ\", cHorizJ);\r\n+        map.put(\"HorizK\", cHorizK);\r\n+        map.put(\"HorizL\", cHorizL);\r\n+        map.put(\"HorizM\", cHorizM);\r\n+        map.put(\"HorizN\", cHorizN);\r\n+        map.put(\"HorizO\", cHorizO);\r\n+        map.put(\"HorizAppSingleA\", cHorizAppSingleA);\r\n+        map.put(\"HorizAppSingleB\", cHorizAppSingleB);\r\n+        map.put(\"HorizAppSingleC\", cHorizAppSingleC);\r\n+        map.put(\"HorizAppSingleD\", cHorizAppSingleD);\r\n+        map.put(\"HorizAppMultiA\", cHorizAppMultiA);\r\n+        map.put(\"HorizAppMultiB\", cHorizAppMultiB);\r\n+        map.put(\"HorizAppMultiC\", cHorizAppMultiC);\r\n+        map.put(\"HorizAppMultiD\", cHorizAppMultiD);\r\n+        map.put(\"HorizInterFlatA\", cHorizInterFlatA);\r\n+        map.put(\"HorizInterFlatB\", cHorizInterFlatB);\r\n+        map.put(\"HorizInterFlatC\", cHorizInterFlatC);\r\n+        map.put(\"HorizInterFlatD\", cHorizInterFlatD);\r\n+        map.put(\"HorizInterVerticalA\", cHorizInterVerticalA);\r\n+        map.put(\"HorizInterVerticalB\", cHorizInterVerticalB);\r\n+        map.put(\"HorizInterVerticalC\", cHorizInterVerticalC);\r\n+        map.put(\"HorizInterVerticalD\", cHorizInterVerticalD);\r\n+\r\n+        return map;\r\n+    }\r\n+\r\n+    public void setObHorizA(HorizA obHorizA) {\r\n+        this.obHorizA = obHorizA;\r\n+    }\r\n+\r\n+    public HorizA getObHorizA() {\r\n+        return this.obHorizA;\r\n+    }\r\n+\r\n+    public void setObHorizB(HorizB obHorizB) {\r\n+        this.obHorizB = obHorizB;\r\n+    }\r\n+\r\n+    public HorizB getObHorizB() {\r\n+        return this.obHorizB;\r\n+    }\r\n+\r\n+    public void setObHorizC(HorizC obHorizC) {\r\n+        this.obHorizC = obHorizC;\r\n+    }\r\n+\r\n+    public HorizC getObHorizC() {\r\n+        return this.obHorizC;\r\n+    }\r\n+\r\n+    public void setObHorizD(HorizD obHorizD) {\r\n+        this.obHorizD = obHorizD;\r\n+    }\r\n+\r\n+    public HorizD getObHorizD() {\r\n+        return this.obHorizD;\r\n+    }\r\n+\r\n+    public void setObHorizE(HorizE obHorizE) {\r\n+        this.obHorizE = obHorizE;\r\n+    }\r\n+\r\n+    public HorizE getObHorizE() {\r\n+        return this.obHorizE;\r\n+    }\r\n+\r\n+    public void setObHorizF(HorizF obHorizF) {\r\n+        this.obHorizF = obHorizF;\r\n+    }\r\n+\r\n+    public HorizF getObHorizF() {\r\n+        return this.obHorizF;\r\n+    }\r\n+\r\n+    public void setObHorizG(HorizG obHorizG) {\r\n+        this.obHorizG = obHorizG;\r\n+    }\r\n+\r\n+    public HorizG getObHorizG() {\r\n+        return this.obHorizG;\r\n+    }\r\n+\r\n+    public void setObHorizH(HorizH obHorizH) {\r\n+        this.obHorizH = obHorizH;\r\n+    }\r\n+\r\n+    public HorizH getObHorizH() {\r\n+        return this.obHorizH;\r\n+    }\r\n+\r\n+    public void setObHorizI(HorizI obHorizI) {\r\n+        this.obHorizI = obHorizI;\r\n+    }\r\n+\r\n+    public HorizI getObHorizI() {\r\n+        return this.obHorizI;\r\n+    }\r\n+\r\n+    public void setObHorizJ(HorizJ obHorizJ) {\r\n+        this.obHorizJ = obHorizJ;\r\n+    }\r\n+\r\n+    public HorizJ getObHorizJ() {\r\n+        return this.obHorizJ;\r\n+    }\r\n+\r\n+    public void setObHorizK(HorizK obHorizK) {\r\n+        this.obHorizK = obHorizK;\r\n+    }\r\n+\r\n+    public HorizK getObHorizK() {\r\n+        return this.obHorizK;\r\n+    }\r\n+\r\n+    public void setObHorizL(HorizL obHorizL) {\r\n+        this.obHorizL = obHorizL;\r\n+    }\r\n+\r\n+    public HorizL getObHorizL() {\r\n+        return this.obHorizL;\r\n+    }\r\n+\r\n+    public void setObHorizM(HorizM obHorizM) {\r\n+        this.obHorizM = obHorizM;\r\n+    }\r\n+\r\n+    public HorizM getObHorizM() {\r\n+        return this.obHorizM;\r\n+    }\r\n+\r\n+    public void setObHorizN(HorizN obHorizN) {\r\n+        this.obHorizN = obHorizN;\r\n+    }\r\n+\r\n+    public HorizN getObHorizN() {\r\n+        return this.obHorizN;\r\n+    }\r\n+\r\n+    public void setObHorizO(HorizO obHorizO) {\r\n+        this.obHorizO = obHorizO;\r\n+    }\r\n+\r\n+    public HorizO getObHorizO() {\r\n+        return this.obHorizO;\r\n+    }\r\n+\r\n+    public void setObHorizAppSingleA(HorizAppSingleA obHorizAppSingleA) {\r\n+        this.obHorizAppSingleA = obHorizAppSingleA;\r\n+    }\r\n+\r\n+    public HorizAppSingleA getObHorizAppSingleA() {\r\n+        return this.obHorizAppSingleA;\r\n+    }\r\n+\r\n+    public void setObHorizAppSingleB(HorizAppSingleB obHorizAppSingleB) {\r\n+        this.obHorizAppSingleB = obHorizAppSingleB;\r\n+    }\r\n+\r\n+    public HorizAppSingleB getObHorizAppSingleB() {\r\n+        return this.obHorizAppSingleB;\r\n+    }\r\n+\r\n+    public void setObHorizAppSingleC(HorizAppSingleC obHorizAppSingleC) {\r\n+        this.obHorizAppSingleC = obHorizAppSingleC;\r\n+    }\r\n+\r\n+    public HorizAppSingleC getObHorizAppSingleC() {\r\n+        return this.obHorizAppSingleC;\r\n+    }\r\n+\r\n+    public void setObHorizAppSingleD(HorizAppSingleD obHorizAppSingleD) {\r\n+        this.obHorizAppSingleD = obHorizAppSingleD;\r\n+    }\r\n+\r\n+    public HorizAppSingleD getObHorizAppSingleD() {\r\n+        return this.obHorizAppSingleD;\r\n+    }\r\n+\r\n+    public void setObHorizAppMultiA(HorizAppMultiA obHorizAppMultiA) {\r\n+        this.obHorizAppMultiA = obHorizAppMultiA;\r\n+    }\r\n+\r\n+    public HorizAppMultiA getObHorizAppMultiA() {\r\n+        return this.obHorizAppMultiA;\r\n+    }\r\n+\r\n+    public void setObHorizAppMultiB(HorizAppMultiB obHorizAppMultiB) {\r\n+        this.obHorizAppMultiB = obHorizAppMultiB;\r\n+    }\r\n+\r\n+    public HorizAppMultiB getObHorizAppMultiB() {\r\n+        return this.obHorizAppMultiB;\r\n+    }\r\n+\r\n+    public void setObHorizAppMultiC(HorizAppMultiC obHorizAppMultiC) {\r\n+        this.obHorizAppMultiC = obHorizAppMultiC;\r\n+    }\r\n+\r\n+    public HorizAppMultiC getObHorizAppMultiC() {\r\n+        return this.obHorizAppMultiC;\r\n+    }\r\n+\r\n+    public void setObHorizAppMultiD(HorizAppMultiD obHorizAppMultiD) {\r\n+        this.obHorizAppMultiD = obHorizAppMultiD;\r\n+    }\r\n+\r\n+    public HorizAppMultiD getObHorizAppMultiD() {\r\n+        return this.obHorizAppMultiD;\r\n+    }\r\n+\r\n+    public void setObHorizInterFlatA(HorizInterFlatA obHorizInterFlatA) {\r\n+        this.obHorizInterFlatA = obHorizInterFlatA;\r\n+    }\r\n+\r\n+    public HorizInterFlatA getObHorizInterFlatA() {\r\n+        return this.obHorizInterFlatA;\r\n+    }\r\n+\r\n+    public void setObHorizInterFlatB(HorizInterFlatB obHorizInterFlatB) {\r\n+        this.obHorizInterFlatB = obHorizInterFlatB;\r\n+    }\r\n+\r\n+    public HorizInterFlatB getObHorizInterFlatB() {\r\n+        return this.obHorizInterFlatB;\r\n+    }\r\n+\r\n+    public void setObHorizInterFlatC(HorizInterFlatC obHorizInterFlatC) {\r\n+        this.obHorizInterFlatC = obHorizInterFlatC;\r\n+    }\r\n+\r\n+    public HorizInterFlatC getObHorizInterFlatC() {\r\n+        return this.obHorizInterFlatC;\r\n+    }\r\n+\r\n+    public void setObHorizInterFlatD(HorizInterFlatD obHorizInterFlatD) {\r\n+        this.obHorizInterFlatD = obHorizInterFlatD;\r\n+    }\r\n+\r\n+    public HorizInterFlatD getObHorizInterFlatD() {\r\n+        return this.obHorizInterFlatD;\r\n+    }\r\n+\r\n+    public void setObHorizInterVerticalA\r\n+        (HorizInterVerticalA obHorizInterVerticalA) {\r\n+        this.obHorizInterVerticalA = obHorizInterVerticalA;\r\n+    }\r\n+\r\n+    public HorizInterVerticalA getObHorizInterVerticalA() {\r\n+        return this.obHorizInterVerticalA;\r\n+    }\r\n+\r\n+    public void setObHorizInterVerticalB\r\n+        (HorizInterVerticalB obHorizInterVerticalB) {\r\n+        this.obHorizInterVerticalB = obHorizInterVerticalB;\r\n+    }\r\n+\r\n+    public HorizInterVerticalB getObHorizInterVerticalB() {\r\n+        return this.obHorizInterVerticalB;\r\n+    }\r\n+\r\n+    public void setObHorizInterVerticalC\r\n+        (HorizInterVerticalC obHorizInterVerticalC) {\r\n+        this.obHorizInterVerticalC = obHorizInterVerticalC;\r\n+    }\r\n+\r\n+    public HorizInterVerticalC getObHorizInterVerticalC() {\r\n+        return this.obHorizInterVerticalC;\r\n+    }\r\n+\r\n+    public void setObHorizInterVerticalD\r\n+        (HorizInterVerticalD obHorizInterVerticalD) {\r\n+        this.obHorizInterVerticalD = obHorizInterVerticalD;\r\n+    }\r\n+\r\n+    public HorizInterVerticalD getObHorizInterVerticalD() {\r\n+        return this.obHorizInterVerticalD;\r\n+    }\r\n+\r\n+    public HashSet getCHorizInterVerticalB() {\r\n+        return this.cHorizInterVerticalB;\r\n+    }\r\n+\r\n+    public void setCHorizInterVerticalB(HashSet cHorizInterVerticalB) {\r\n+        this.cHorizInterVerticalB = cHorizInterVerticalB;\r\n+    }\r\n+}\r\n+\r"},{"sha":"466bbf76003489951973df1f500e434a82b3517a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class InverseKeyMapPC\r\n+    implements MappedByMapPC {\r\n+\r\n+    private String name;\r\n+    private Map helpers = new HashMap();\r\n+\r\n+    public Map getHelpers() {\r\n+        return this.helpers;\r\n+    }\r\n+\r\n+    public void setHelpers(Map helpers) {\r\n+        this.helpers = helpers;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"fc5f0eedce259953c0afc1a81732eaeb20f53533","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ *\tUsed to test invert one-to-ones and stuff\r\n+ *\r\n+ *\t@author\t\tskim\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+@Entity\r\n+public class InvertA implements Serializable\r\n+{\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Column(length=35)\r\n+\tString test;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tInvertB\tinvertB;\r\n+\r\n+\tpublic InvertA()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic InvertA(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic InvertB getInvertB ()\r\n+\t{\r\n+\t\treturn invertB;\r\n+\t}\r\n+\r\n+\tpublic void setInvertB (InvertB b)\r\n+\t{\r\n+\t\tinvertB = b;\r\n+\t}\r\n+\r\n+\tpublic void setTest (String s)\r\n+\t{\r\n+\t\ttest = s;\r\n+\t}\r\n+\r\n+\tpublic String getTest ()\r\n+\t{\r\n+\t\treturn test;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"77bb629d806750e970bff27023f7ffae55dcc11f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\tUsed to test invert one to ones and stuff.\r\n+ *\r\n+ *\t@author\t\tskim\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+@Entity\r\n+public class InvertB implements Serializable\r\n+{\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tpublic InvertA invertA;\r\n+\r\n+\t@Column(length=35)\r\n+\tpublic String test;\r\n+\r\n+\tpublic InvertB()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic InvertB(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic InvertA getInvertA ()\r\n+\t{\r\n+\t\treturn invertA;\r\n+\t}\r\n+\r\n+\tpublic void setInvertA (InvertA a)\r\n+\t{\r\n+\t\tinvertA = a;\r\n+\t}\r\n+\r\n+\tpublic String getTest ()\r\n+\t{\r\n+\t\treturn test;\r\n+\t}\r\n+\r\n+\tpublic void setTest (String s)\r\n+\t{\r\n+\t\ttest = s;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"1eb40735ead18d84a8f820cd717b759d6b317533","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class JoinSubclassBase\r\n+    implements Comparable {\r\n+\r\n+    private int baseField;\r\n+\r\n+    public int getBaseField() {\r\n+        return this.baseField;\r\n+    }\r\n+\r\n+    public void setBaseField(int baseField) {\r\n+        this.baseField = baseField;\r\n+    }\r\n+\r\n+    public int compareTo(Object other) {\r\n+        if (other == this)\r\n+            return 0;\r\n+        if (other == null)\r\n+            return 1;\r\n+        return baseField - ((JoinSubclassBase) other).baseField;\r\n+    }\r\n+}\r"},{"sha":"d78aae2905c0bd175f3c5f5ca66a3ab6c54826e3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class JoinSubclassBaseSubFlat\r\n+    extends JoinSubclassBaseSubVert {\r\n+\r\n+    private int baseSubFlatField;\r\n+\r\n+    public int getBaseSubFlatField() {\r\n+        return this.baseSubFlatField;\r\n+    }\r\n+\r\n+    public void setBaseSubFlatField(int baseSubFlatField) {\r\n+        this.baseSubFlatField = baseSubFlatField;\r\n+    }\r\n+}\r"},{"sha":"618a864156f456ff4a1f57add54462d9571dafa0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class JoinSubclassBaseSubVert\r\n+    extends JoinSubclassBase {\r\n+\r\n+    private int baseSubVertField;\r\n+\r\n+    public int getBaseSubVertField() {\r\n+        return this.baseSubVertField;\r\n+    }\r\n+\r\n+    public void setBaseSubVertField(int baseSubVertField) {\r\n+        this.baseSubVertField = baseSubVertField;\r\n+    }\r\n+}\r"},{"sha":"53abbf3237227976e83f5e34017098671e481790","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class JoinTableMapPC\r\n+    implements MappedByMapPC {\r\n+\r\n+    private String name;\r\n+    private Map helpers = new HashMap();\r\n+\r\n+    public Map getHelpers() {\r\n+        return this.helpers;\r\n+    }\r\n+\r\n+    public void setHelpers(Map helpers) {\r\n+        this.helpers = helpers;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"2c6bf653d673fe18546f16b434b4796a320c4919","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type with a compound primary key and LRS fields.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class LRSCompoundPC\r\n+    implements LRSPCIntf {\r\n+\r\n+    private static int idGen = 0;\r\n+\r\n+    private int id1;\r\n+    private int id2;\r\n+\r\n+    private String stringField;\r\n+    private Set stringSet = new HashSet();\r\n+    private Set relSet = new HashSet();\r\n+    private Collection stringCollection = new ArrayList();\r\n+    private Collection relCollection = new ArrayList();\r\n+    private Map stringMap = new HashMap();\r\n+    private Map relMap = new HashMap();\r\n+\r\n+    private LRSCompoundPC() {\r\n+    }\r\n+\r\n+    public LRSCompoundPC(String str) {\r\n+        id1 = idGen++;\r\n+        id2 = idGen++;\r\n+        stringField = str;\r\n+    }\r\n+\r\n+    public LRSPCIntf newInstance(String stringField) {\r\n+        return new LRSCompoundPC(stringField);\r\n+    }\r\n+\r\n+    public Set getStringSet() {\r\n+        return this.stringSet;\r\n+    }\r\n+\r\n+    public void setStringSet(Set stringSet) {\r\n+        this.stringSet = stringSet;\r\n+    }\r\n+\r\n+    public Set getRelSet() {\r\n+        return this.relSet;\r\n+    }\r\n+\r\n+    public void setRelSet(Set relSet) {\r\n+        this.relSet = relSet;\r\n+    }\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return this.stringCollection;\r\n+    }\r\n+\r\n+    public void setStringCollection(Collection stringCollection) {\r\n+        this.stringCollection = stringCollection;\r\n+    }\r\n+\r\n+    public Collection getRelCollection() {\r\n+        return this.relCollection;\r\n+    }\r\n+\r\n+    public void setRelCollection(Collection relCollection) {\r\n+        this.relCollection = relCollection;\r\n+    }\r\n+\r\n+    public Map getStringMap() {\r\n+        return this.stringMap;\r\n+    }\r\n+\r\n+    public void setStringMap(Map stringMap) {\r\n+        this.stringMap = stringMap;\r\n+    }\r\n+\r\n+    public Map getRelMap() {\r\n+        return this.relMap;\r\n+    }\r\n+\r\n+    public void setRelMap(Map relMap) {\r\n+        this.relMap = relMap;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public int compareTo(Object other) {\r\n+        return stringField.compareTo(((LRSCompoundPC) other).stringField);\r\n+    }\r\n+}\r"},{"sha":"982cc2a9cc197059d05cee9e33e8f94e4845716b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type with LRS fields.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class LRSPC\r\n+    implements LRSPCIntf {\r\n+\r\n+    private String stringField;\r\n+    private Set stringSet = new HashSet();\r\n+    private Set relSet = new HashSet();\r\n+    private Collection stringCollection = new ArrayList();\r\n+    private Collection relCollection = new ArrayList();\r\n+    private Map stringMap = new HashMap();\r\n+    private Map relMap = new HashMap();\r\n+\r\n+    private LRSPC() {\r\n+    }\r\n+\r\n+    public LRSPC(String str) {\r\n+        stringField = str;\r\n+    }\r\n+\r\n+    public LRSPCIntf newInstance(String stringField) {\r\n+        return new LRSPC(stringField);\r\n+    }\r\n+\r\n+    public Set getStringSet() {\r\n+        return this.stringSet;\r\n+    }\r\n+\r\n+    public void setStringSet(Set stringSet) {\r\n+        this.stringSet = stringSet;\r\n+    }\r\n+\r\n+    public Set getRelSet() {\r\n+        return this.relSet;\r\n+    }\r\n+\r\n+    public void setRelSet(Set relSet) {\r\n+        this.relSet = relSet;\r\n+    }\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return this.stringCollection;\r\n+    }\r\n+\r\n+    public void setStringCollection(Collection stringCollection) {\r\n+        this.stringCollection = stringCollection;\r\n+    }\r\n+\r\n+    public Collection getRelCollection() {\r\n+        return this.relCollection;\r\n+    }\r\n+\r\n+    public void setRelCollection(Collection relCollection) {\r\n+        this.relCollection = relCollection;\r\n+    }\r\n+\r\n+    public Map getStringMap() {\r\n+        return this.stringMap;\r\n+    }\r\n+\r\n+    public void setStringMap(Map stringMap) {\r\n+        this.stringMap = stringMap;\r\n+    }\r\n+\r\n+    public Map getRelMap() {\r\n+        return this.relMap;\r\n+    }\r\n+\r\n+    public void setRelMap(Map relMap) {\r\n+        this.relMap = relMap;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public int compareTo(Object other) {\r\n+        return stringField.compareTo(((LRSPC) other).stringField);\r\n+    }\r\n+}\r"},{"sha":"a29bcbd422dfbfdb3ffd0d220a589e9f73347758","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * <p>Common interface for persistent types used in LRS testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface LRSPCIntf\r\n+    extends Comparable {\r\n+\r\n+    public Set getStringSet();\r\n+\r\n+    public void setStringSet(Set stringSet);\r\n+\r\n+    public Set getRelSet();\r\n+\r\n+    public void setRelSet(Set relSet);\r\n+\r\n+    public Collection getStringCollection();\r\n+\r\n+    public void setStringCollection(Collection stringCollection);\r\n+\r\n+    public Collection getRelCollection();\r\n+\r\n+    public void setRelCollection(Collection relCollection);\r\n+\r\n+    public Map getStringMap();\r\n+\r\n+    public void setStringMap(Map stringMap);\r\n+\r\n+    public Map getRelMap();\r\n+\r\n+    public void setRelMap(Map relMap);\r\n+\r\n+    public String getStringField();\r\n+\r\n+    public LRSPCIntf newInstance(String stringField);\r\n+}\r"},{"sha":"38b39994bae1b334008cd4e500506c2180019a0a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+public class LocatorTestObject {\r\n+\r\n+    private byte[] bytes;\r\n+    private String clobString;\r\n+\r\n+    public void setBytes(byte[] bytes) {\r\n+        this.bytes = bytes;\r\n+    }\r\n+\r\n+    public byte[] getBytes() {\r\n+        return bytes;\r\n+    }\r\n+\r\n+    public void setClobString(String val) {\r\n+        clobString = val;\r\n+    }\r\n+\r\n+    public String getClobString() {\r\n+        return clobString;\r\n+    }\r\n+}\r"},{"sha":"f9f59004d0d3f045855451e06d119ea6b9596ea1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class LockGroupSubclass\r\n+    extends HorizB {\r\n+\r\n+    private String nonDefaultLockGroupField;\r\n+    private String defaultLockGroupField;\r\n+\r\n+    public String getDefaultLockGroupField() {\r\n+        return defaultLockGroupField;\r\n+    }\r\n+\r\n+    public void setDefaultLockGroupField(String defaultLockGroupField) {\r\n+        this.defaultLockGroupField = defaultLockGroupField;\r\n+    }\r\n+\r\n+    public String getNonDefaultLockGroupField() {\r\n+        return nonDefaultLockGroupField;\r\n+    }\r\n+\r\n+    public void setNonDefaultLockGroupField(String nonDefaultLockGroupField) {\r\n+        this.nonDefaultLockGroupField = nonDefaultLockGroupField;\r\n+    }\r\n+}\r"},{"sha":"5236115c4cb22b67dcb1a7a9de41fa13d1caac1b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,29 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public interface MappedByMapPC {\r\n+\r\n+    /**\r\n+     * Map of string to {@link HelperPC}.\r\n+     */\r\n+    public Map getHelpers();\r\n+}\r"},{"sha":"08322bcec1210853448e9ca86f5a53d055e994bf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","status":"added","additions":254,"deletions":0,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,254 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used for testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+public class MappingTest1\r\n+{\r\n+\tprivate int\t\t\t\tvalue\t\t\t\t\t= 0;\r\n+\tprivate int\t\t\t\totherTableValue\t\t\t= 0;\r\n+\tprivate Object \t\t\tblob\t\t\t\t\t= null;\r\n+\tprivate MappingTest2 \toneOne\t\t\t\t\t= null;\r\n+\tprivate MappingTest1 \tselfOneOne\t\t\t\t= null;\r\n+\tprivate MappingTest2 \totherTableOneOne\t\t= null;\r\n+\tprivate MappingTest2\tinverseOwnerOneOne\t\t= null;\r\n+\tprivate MappingTest2\tinverseOneOne\t\t\t= null;\r\n+\tprivate Set\t\t\t\tcollection\t\t\t\t= new HashSet ();\r\n+\tprivate Set\t\t\t\tinverseOwnerOneMany\t\t= new HashSet ();\r\n+\tprivate Set\t\t\t\toneMany\t\t\t\t\t= new HashSet ();\r\n+\tprivate List\t\t\tmanyMany\t\t\t\t= new LinkedList ();\r\n+\tprivate Set\t\t\t\tinverseOwnerManyMany\t= new HashSet ();\r\n+\tprivate Map\t\t\t\tmap\t\t\t\t\t\t= new HashMap ();\r\n+\tprivate Map\t\t\t\tnManyMap\t\t\t\t= new HashMap ();\r\n+\tprivate Map\t\t\t\tmanyManyMap\t\t\t\t= new HashMap ();\r\n+\tprivate int\t\t\t\ttransactionalValue\t\t= 0;\r\n+\r\n+\r\n+\tpublic int getValue ()\r\n+\t{\r\n+\t\treturn this.value;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setValue (int value)\r\n+\t{\r\n+\t\tthis.value = value;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getOtherTableValue ()\r\n+\t{\r\n+\t\treturn this.otherTableValue;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOtherTableValue (int otherTableValue)\r\n+\t{\r\n+\t\tthis.otherTableValue = otherTableValue;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Object getBlob ()\r\n+\t{\r\n+\t\treturn this.blob;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setBlob (Object blob)\r\n+\t{\r\n+\t\tthis.blob = blob;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest2 getOneOne ()\r\n+\t{\r\n+\t\treturn this.oneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneOne (MappingTest2 oneOne)\r\n+\t{\r\n+\t\tthis.oneOne = oneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest1 getSelfOneOne ()\r\n+\t{\r\n+\t\treturn this.selfOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setSelfOneOne (MappingTest1 selfOneOne)\r\n+\t{\r\n+\t\tthis.selfOneOne = selfOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest2 getOtherTableOneOne ()\r\n+\t{\r\n+\t\treturn this.otherTableOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOtherTableOneOne (MappingTest2 otherTableOneOne)\r\n+\t{\r\n+\t\tthis.otherTableOneOne = otherTableOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest2 getInverseOwnerOneOne ()\r\n+\t{\r\n+\t\treturn this.inverseOwnerOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setInverseOwnerOneOne (MappingTest2 inverseOwnerOneOne)\r\n+\t{\r\n+\t\tthis.inverseOwnerOneOne = inverseOwnerOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest2 getInverseOneOne ()\r\n+\t{\r\n+\t\treturn this.inverseOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setInverseOneOne (MappingTest2 inverseOneOne)\r\n+\t{\r\n+\t\tthis.inverseOneOne = inverseOneOne;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getCollection ()\r\n+\t{\r\n+\t\treturn this.collection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setCollection (Set collection)\r\n+\t{\r\n+\t\tthis.collection = collection;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getInverseOwnerOneMany ()\r\n+\t{\r\n+\t\treturn this.inverseOwnerOneMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setInverseOwnerOneMany (Set inverseOwnerOneMany)\r\n+\t{\r\n+\t\tthis.inverseOwnerOneMany = inverseOwnerOneMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getOneMany ()\r\n+\t{\r\n+\t\treturn this.oneMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneMany (Set oneMany)\r\n+\t{\r\n+\t\tthis.oneMany = oneMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic List getManyMany ()\r\n+\t{\r\n+\t\treturn this.manyMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setManyMany (List manyMany)\r\n+\t{\r\n+\t\tthis.manyMany = manyMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getInverseOwnerManyMany ()\r\n+\t{\r\n+\t\treturn this.inverseOwnerManyMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setInverseOwnerManyMany (Set inverseOwnerManyMany)\r\n+\t{\r\n+\t\tthis.inverseOwnerManyMany = inverseOwnerManyMany;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Map getMap ()\r\n+\t{\r\n+\t\treturn this.map;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setMap (Map map)\r\n+\t{\r\n+\t\tthis.map = map;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Map getNManyMap ()\r\n+\t{\r\n+\t\treturn this.nManyMap;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setNManyMap (Map nManyMap)\r\n+\t{\r\n+\t\tthis.nManyMap = nManyMap;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Map getManyManyMap ()\r\n+\t{\r\n+\t\treturn this.manyManyMap;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setManyManyMap (Map manyManyMap)\r\n+\t{\r\n+\t\tthis.manyManyMap = manyManyMap;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getTransactionalValue ()\r\n+\t{\r\n+\t\treturn this.transactionalValue;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setTransactionalValue (int transactionalValue)\r\n+\t{\r\n+\t\tthis.transactionalValue = transactionalValue;\r\n+\t}\r\n+}\r"},{"sha":"30cd9e53233838e14f86c5dddfb2862b6f3e11a1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ *\t<p>Persistent class used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class MappingTest2\r\n+{\r\n+\tprivate int\t\t\t\tpk1\t\t\t\t= 0;\r\n+\tprivate int\t\t\t\tpk2\t\t\t\t= 0;\r\n+\tprivate MappingTest1\toneOneOwner\t\t= null;\r\n+\tprivate MappingTest1\toneManyOwner\t= null;\r\n+\tprivate Set\t\t\t\tmanyManyOwner\t= new HashSet ();\r\n+\r\n+\r\n+\tpublic int getPk1 ()\r\n+\t{\r\n+\t\treturn this.pk1;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setPk1 (int pk1)\r\n+\t{\r\n+\t\tthis.pk1 = pk1;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getPk2 ()\r\n+\t{\r\n+\t\treturn this.pk2;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setPk2 (int pk2)\r\n+\t{\r\n+\t\tthis.pk2 = pk2;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest1 getOneOneOwner ()\r\n+\t{\r\n+\t\treturn this.oneOneOwner;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneOneOwner (MappingTest1 oneOneOwner)\r\n+\t{\r\n+\t\tthis.oneOneOwner = oneOneOwner;\r\n+\t}\r\n+\r\n+\r\n+\tpublic MappingTest1 getOneManyOwner ()\r\n+\t{\r\n+\t\treturn this.oneManyOwner;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOneManyOwner (MappingTest1 oneManyOwner)\r\n+\t{\r\n+\t\tthis.oneManyOwner = oneManyOwner;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getManyManyOwner ()\r\n+\t{\r\n+\t\treturn this.manyManyOwner;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setManyManyOwner (Set manyManyOwner)\r\n+\t{\r\n+\t\tthis.manyManyOwner = manyManyOwner;\r\n+\t}\r\n+}\r"},{"sha":"18b1fd17075b30729c6fed88370f1c72d8296422","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import java.io.*;\r\n+import java.math.*;\r\n+import java.text.*;\r\n+import java.util.*;\r\n+\r\n+\r\n+/**\r\n+ *\tApplication object ID class for MappingTest2.\r\n+ *\tAuto-generated by kodo.enhance.ApplicationIdTool.\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+public class MappingTest2ID\timplements Serializable\r\n+{\r\n+\t// each pk field in MappingTest2\r\n+\t// must be listed as a public field here\r\n+\tpublic int         pk1;\r\n+\tpublic int         pk2;\r\n+\r\n+\r\n+\t/**\r\n+\t *\tDefault constructor.\r\n+\t */\r\n+\tpublic MappingTest2ID ()\r\n+\t{\r\n+\t}\r\n+\r\n+\r\n+\t/**\r\n+\t *\tString constructor.\r\n+\t */\r\n+\tpublic MappingTest2ID (String str)\r\n+\t{\r\n+\t\tStringTokenizer toke = new StringTokenizer (str, \"::\");\r\n+\r\n+\t\tstr = toke.nextToken ();\r\n+\t\tthis.pk1 = Integer.parseInt (str);\r\n+\t\tstr = toke.nextToken ();\r\n+\t\tthis.pk2 = Integer.parseInt (str);\r\n+\t}\r\n+\r\n+\r\n+\t/**\r\n+\t *\tImplementation of equals method.\r\n+\t */\r\n+\tpublic boolean equals (Object ob)\r\n+\t{\r\n+\t\tif (this == ob)\r\n+\t\t\treturn true;\r\n+\t\tif (!(ob instanceof MappingTest2ID))\r\n+\t\t\treturn false;\r\n+\r\n+\t\tMappingTest2ID other = (MappingTest2ID) ob;\r\n+\t\treturn (this.pk1 == other.pk1)\r\n+\t\t\t&& (this.pk2 == other.pk2);\r\n+\t}\r\n+\r\n+\r\n+\t/**\r\n+\t *\tImplementation of hashCode method that supports the\r\n+\t *\tequals-hashCode contract.\r\n+\t */\r\n+\tpublic int hashCode ()\r\n+\t{\r\n+\t\treturn (int) this.pk1\r\n+\t\t\t+ (int) this.pk2;\r\n+\t}\r\n+\r\n+\r\n+\t/**\r\n+\t *\tImplementation of toString that outputs this object id's\r\n+\t *\tprimary key values.\r\n+\t */\r\n+\tpublic String toString ()\r\n+\t{\r\n+\t\treturn String.valueOf (this.pk1)\r\n+\t\t\t+ \"::\" + String.valueOf (this.pk2);\r\n+\t}\r\n+}\r"},{"sha":"77d0ae43cee5f267254761007bc5e43ed1e61e61","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+public class MappingTest3\r\n+\textends MappingTest1\r\n+{\r\n+\tprivate int verticalValue = 0;\r\n+\r\n+\r\n+\tpublic int getVerticalValue ()\r\n+\t{\r\n+\t\treturn this.verticalValue;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setVerticalValue (int verticalValue)\r\n+\t{\r\n+\t\tthis.verticalValue = verticalValue;\r\n+\t}\r\n+}\r"},{"sha":"0724249c593e7196b26a2bf5b15a3942f5637d77","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+\r\n+public class MappingTest4\r\n+\textends MappingTest3\r\n+{\r\n+\tprivate int flatValue = 0;\r\n+\r\n+\r\n+\tpublic int getFlatValue ()\r\n+\t{\r\n+\t\treturn this.flatValue;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setFlatValue (int flatValue)\r\n+\t{\r\n+\t\tthis.flatValue = flatValue;\r\n+\t}\r\n+}\r"},{"sha":"2333fa5392a723f79f81055f17bc1383d98b8c67","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class MappingTest5\r\n+    extends MappingTest2 {\r\n+\r\n+    private int vertValue = 0;\r\n+    private MappingTest5 vertRel = null;\r\n+\r\n+    public int getVertValue() {\r\n+        return this.vertValue;\r\n+    }\r\n+\r\n+    public void setVertValue(int vertValue) {\r\n+        this.vertValue = vertValue;\r\n+    }\r\n+\r\n+    public MappingTest5 getVertRel() {\r\n+        return this.vertRel;\r\n+    }\r\n+\r\n+    public void setVertRel(MappingTest5 vertRel) {\r\n+        this.vertRel = vertRel;\r\n+    }\r\n+}\r"},{"sha":"288fada5facd590b959257742d300c1f8a82ffd5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class MultiA {\r\n+\r\n+    private String string0;\r\n+    private String string1;\r\n+\r\n+    private int aint0;\r\n+    private int aint1;\r\n+\r\n+    private Set multiCs = new HashSet();\r\n+\r\n+    public void setString0(String val) {\r\n+        string0 = val;\r\n+    }\r\n+\r\n+    public String getString0() {\r\n+        return string0;\r\n+    }\r\n+\r\n+    public void setInt0(int val) {\r\n+        aint0 = val;\r\n+    }\r\n+\r\n+    public void setString1(String val) {\r\n+        string1 = val;\r\n+    }\r\n+\r\n+    public String getString1() {\r\n+        return string1;\r\n+    }\r\n+\r\n+    public int getInt0() {\r\n+        return aint0;\r\n+    }\r\n+\r\n+    public void setInt1(int val) {\r\n+        aint1 = val;\r\n+    }\r\n+\r\n+    public int getInt1() {\r\n+        return aint1;\r\n+    }\r\n+\r\n+    public void setMultiCs(Set val) {\r\n+        multiCs = val;\r\n+    }\r\n+\r\n+    public Set getMultiCs() {\r\n+        return multiCs;\r\n+    }\r\n+}\r"},{"sha":"b5a2007dc4ee6c937dbe2ee27c07dc0e5f3c80a3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class MultiB\r\n+    extends MultiA {\r\n+\r\n+    private String bString;\r\n+    private int bInt;\r\n+\r\n+    public void setBString(String val) {\r\n+        bString = val;\r\n+    }\r\n+\r\n+    public String getBString() {\r\n+        return bString;\r\n+    }\r\n+}\r"},{"sha":"f79b98fe173ecbe2dbaaf6e36ca826f1a3b14774","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class MultiC\r\n+    extends MultiB {\r\n+\r\n+    private String cString0;\r\n+    private String cString1;\r\n+\r\n+    private int cInt;\r\n+\r\n+    private Set multiAs = new HashSet();\r\n+\r\n+    public void setCString0(String val) {\r\n+        cString0 = val;\r\n+    }\r\n+\r\n+    public String getCString0() {\r\n+        return cString0;\r\n+    }\r\n+\r\n+    public void setMultiAs(Set val) {\r\n+        multiAs = val;\r\n+    }\r\n+\r\n+    public Set getMultiAs() {\r\n+        return multiAs;\r\n+    }\r\n+}\r"},{"sha":"e95ffa18e277444e853fb7dcbe90d88a444a1b86","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class MultiD\r\n+    extends MultiB {\r\n+\r\n+    private String dString0;\r\n+    private String dString1;\r\n+\r\n+    private int dInt;\r\n+\r\n+    private MultiA a;\r\n+\r\n+    public void setDString0(String val) {\r\n+        dString0 = val;\r\n+    }\r\n+\r\n+    public String getDString0() {\r\n+        return dString0;\r\n+    }\r\n+\r\n+    public void setDString1(String val) {\r\n+        dString1 = val;\r\n+    }\r\n+\r\n+    public String getDString1() {\r\n+        return dString1;\r\n+    }\r\n+\r\n+    public void setA(MultiA val) {\r\n+        a = val;\r\n+    }\r\n+\r\n+    public MultiA getA() {\r\n+        return a;\r\n+    }\r\n+}\r"},{"sha":"6b748c78bc04e9c94ece593cd01c8dc392a7e294","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class MultiE {\r\n+\r\n+    private String string0;\r\n+\r\n+    public void setString0(String val) {\r\n+        string0 = val;\r\n+    }\r\n+\r\n+    public String getString0() {\r\n+        return string0;\r\n+    }\r\n+}\r"},{"sha":"17d6e670aa8dbafd075298c2b95886a090c8b498","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class MultiF\r\n+    extends MultiE {\r\n+\r\n+    private String string1;\r\n+\r\n+    public void setString1(String val) {\r\n+        string1 = val;\r\n+    }\r\n+\r\n+    public String getString1() {\r\n+        return string1;\r\n+    }\r\n+}\r"},{"sha":"c6273d7fd9eea83c4356a219fe1950e737ea3e2a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class NamedSQL {\r\n+\r\n+    private int num;\r\n+    private int num2;\r\n+\r\n+    public int getNum() {\r\n+        return num;\r\n+    }\r\n+\r\n+    public void setNum(int i) {\r\n+        num = i;\r\n+    }\r\n+\r\n+    public int getNum2() {\r\n+        return num2;\r\n+    }\r\n+\r\n+    public void setNum2(int i) {\r\n+        num2 = i;\r\n+    }\r\n+}\r"},{"sha":"fcd75f2069bbe452c3faee1a3f9ceb925e1c9dcf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class NoClassColumn {\r\n+\r\n+    private String test;\r\n+\r\n+    public String getTest() {\r\n+        return test;\r\n+    }\r\n+\r\n+    public void setTest(String val) {\r\n+        test = val;\r\n+    }\r\n+}\r"},{"sha":"a5955775243345e8a0ede7a08478afb969d95e4b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class NonPKJoinPC {\r\n+\r\n+    private int id1;\r\n+    private int id2;\r\n+    private PartialJoinPC partial;\r\n+    private Set partials = new HashSet();\r\n+    private ConstantJoinPC constant;\r\n+\r\n+    public PartialJoinPC getPartial() {\r\n+        return this.partial;\r\n+    }\r\n+\r\n+    public void setPartial(PartialJoinPC partial) {\r\n+        this.partial = partial;\r\n+    }\r\n+\r\n+    public int getId1() {\r\n+        return this.id1;\r\n+    }\r\n+\r\n+    public void setId1(int id1) {\r\n+        this.id1 = id1;\r\n+    }\r\n+\r\n+    public int getId2() {\r\n+        return this.id2;\r\n+    }\r\n+\r\n+    public void setId2(int id2) {\r\n+        this.id2 = id2;\r\n+    }\r\n+\r\n+    public Set getPartials() {\r\n+        return this.partials;\r\n+    }\r\n+\r\n+    public void setPartials(Set partials) {\r\n+        this.partials = partials;\r\n+    }\r\n+\r\n+    public ConstantJoinPC getConstant() {\r\n+        return this.constant;\r\n+    }\r\n+\r\n+    public void setConstant(ConstantJoinPC constant) {\r\n+        this.constant = constant;\r\n+    }\r\n+}\r"},{"sha":"4ddcd602946e1ae6ead6c15dd66f4b3cf0cc6f71","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class NonPKJoinPC2\r\n+    extends NonPKJoinPC {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"1baf1bc298ce3a3cd83af4f368fdfba881ed5969","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class NonPKJoinPC3\r\n+    extends NonPKJoinPC2 {\r\n+\r\n+    private PartialJoinPC3 partial3;\r\n+    private Set partial2s = new HashSet();\r\n+\r\n+    public PartialJoinPC3 getPartial3() {\r\n+        return this.partial3;\r\n+    }\r\n+\r\n+    public void setPartial3(PartialJoinPC3 partial3) {\r\n+        this.partial3 = partial3;\r\n+    }\r\n+\r\n+    public Set getPartial2s() {\r\n+        return this.partial2s;\r\n+    }\r\n+\r\n+    public void setPartial2s(Set partial2s) {\r\n+        this.partial2s = partial2s;\r\n+    }\r\n+}\r"},{"sha":"bfcd1601fb5161d3169afe10270aead3aee82d93","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+\r\n+\r\n+public interface OpOrder {\r\n+\r\n+\r\n+    public long getId();\r\n+\r\n+    public OpOrder getRel();\r\n+\r\n+    public OpOrder getOwner();\r\n+\r\n+    public String getSecondary();\r\n+\r\n+    public String getSub();\r\n+\r\n+    public List getRelList();\r\n+\r\n+    public List getMappedRelList();\r\n+\r\n+    public List getInverseKeyRelList();\r\n+}\r"},{"sha":"cb52e81fecd5c9a6f40c0bc8bf8efece24c1dec5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+\r\n+@Entity\r\n+public class OpOrderPC {\r\n+\r\n+\t@Id\r\n+    private long id;\r\n+    private OpOrderPC rel;\r\n+    private OpOrderPC owner;\r\n+    private String secondary;\r\n+    private List relList = new ArrayList();\r\n+    private List mappedRelList = new ArrayList();\r\n+    private List inverseKeyRelList = new ArrayList();\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public OpOrder getRel() {\r\n+        return (OpOrder) rel;\r\n+    }\r\n+\r\n+    public void setRel(OpOrderPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public OpOrder getOwner() {\r\n+        return (OpOrder) owner;\r\n+    }\r\n+\r\n+    public void setOwner(OpOrderPC owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public String getSecondary() {\r\n+        return secondary;\r\n+    }\r\n+\r\n+    public void setSecondary(String secondary) {\r\n+        this.secondary = secondary;\r\n+    }\r\n+\r\n+    public List getRelList() {\r\n+        return relList;\r\n+    }\r\n+\r\n+    public List getMappedRelList() {\r\n+        return mappedRelList;\r\n+    }\r\n+\r\n+    public List getInverseKeyRelList() {\r\n+        return inverseKeyRelList;\r\n+    }\r\n+}\r"},{"sha":"e883d0409e34dd46a5db3a4d07da67fe9a3ea2d3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+@Entity\r\n+public class OpOrderPCSub\r\n+    extends OpOrderPC\r\n+    implements OpOrder {\r\n+\r\n+\t@Id\r\n+    private String sub;\r\n+\r\n+    public String getSub() {\r\n+        return sub;\r\n+    }\r\n+\r\n+    public void setSub(String sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+}\r"},{"sha":"0d5820bbd2922ac92b0601a79d8a684fb21a29ed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\r\n+ *\r\n+\r\n+ */\r\n+@Entity\r\n+public class PagingAppIdPC {\r\n+\r\n+    private int intField;\r\n+    private long longField;\r\n+    private PagingHelperPC rel;\r\n+    private List rels = new ArrayList();\r\n+\r\n+\tpublic PagingAppIdPC() { }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getLongField() {\r\n+        return this.longField;\r\n+    }\r\n+\r\n+    public void setLongField(long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public PagingHelperPC getRel() {\r\n+        return this.rel;\r\n+    }\r\n+\r\n+    public void setRel(PagingHelperPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public List getRels() {\r\n+        return this.rels;\r\n+    }\r\n+\r\n+    public void setRels(List rels) {\r\n+        this.rels = rels;\r\n+    }\r\n+}\r"},{"sha":"d3f1e97f9bb64876832368d79d2081499375cfbd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\r\n+ *\r\n+\r\n+ */\r\n+@Entity\r\n+public class PagingHelperPC {\r\n+\t\r\n+\tpublic PagingHelperPC() {}\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"8da5a4c1fc5f8f6d77acb9d3f65607e2142cb205","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class PagingPC {\r\n+\t\r\n+    private int intField;\r\n+    private PagingHelperPC rel;\r\n+    private List rels = new ArrayList();\r\n+\r\n+\tpublic PagingPC() { }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public PagingHelperPC getRel() {\r\n+        return this.rel;\r\n+    }\r\n+\r\n+    public void setRel(PagingHelperPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public List getRels() {\r\n+        return this.rels;\r\n+    }\r\n+\r\n+    public void setRels(List rels) {\r\n+        this.rels = rels;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"PagingPC: \" + intField;\r\n+    }\r\n+}\r"},{"sha":"ca0e27e821b06867cb806a2b98a21137d4bfdfc9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class PartialJoinPC {\r\n+\r\n+    private int pk1;\r\n+    private int pk2;\r\n+    private NonPKJoinPC nonPK;\r\n+    private Set nonPKs = new HashSet();\r\n+\r\n+    public int getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk1(int pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public NonPKJoinPC getNonPK() {\r\n+        return this.nonPK;\r\n+    }\r\n+\r\n+    public void setNonPK(NonPKJoinPC nonPK) {\r\n+        this.nonPK = nonPK;\r\n+    }\r\n+\r\n+    public Set getNonPKs() {\r\n+        return this.nonPKs;\r\n+    }\r\n+\r\n+    public void setNonPKs(Set nonPKs) {\r\n+        this.nonPKs = nonPKs;\r\n+    }\r\n+}\r"},{"sha":"711563250f21b7644390a8f693c4f270622aa376","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PartialJoinPC2\r\n+    extends PartialJoinPC {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"d3a359007b37e93eba8d17e82c2742506bcfa3ee","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class PartialJoinPC3\r\n+    extends PartialJoinPC2 {\r\n+\r\n+    private NonPKJoinPC3 nonPK3;\r\n+    private Set nonPK2s = new HashSet();\r\n+\r\n+    public NonPKJoinPC3 getNonPK3() {\r\n+        return this.nonPK3;\r\n+    }\r\n+\r\n+    public void setNonPK3(NonPKJoinPC3 nonPK3) {\r\n+        this.nonPK3 = nonPK3;\r\n+    }\r\n+\r\n+    public Set getNonPK2s() {\r\n+        return this.nonPK2s;\r\n+    }\r\n+\r\n+    public void setNonPK2s(Set nonPK2s) {\r\n+        this.nonPK2s = nonPK2s;\r\n+    }\r\n+}\r"},{"sha":"aa825bbfbf21638f847320cd4fcb061f36cea297","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PerClassTestObject {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+}\r"},{"sha":"eabdb3e6cd1063251b93b1cdc321cc1ad4968151","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\t\r\n+\r\n+/**\r\n+ * <p>Application identity type with a custom sequence factory used in\r\n+ * testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class PerClassTestObject2 {\r\n+\r\n+    private String name;\r\n+    private String age;\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getAge() {\r\n+        return this.age;\r\n+    }\r\n+\r\n+    public void setAge(String age) {\r\n+        this.age = age;\r\n+    }\r\n+}\r"},{"sha":"7d3227b19f51c117c3143155ea35776f8130e1da","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Application identity type with a per-class sequence factory used in\r\n+ * testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class PerClassTestObject3 {\r\n+\r\n+    private long id;\r\n+    private int data;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public int getData() {\r\n+        return data;\r\n+    }\r\n+\r\n+    public void setData(int data) {\r\n+        this.data = data;\r\n+    }\r\n+}\r"},{"sha":"c675dde5307e4939993187d8bf3e680beded4b19","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PlaceholderTypesA {\r\n+\r\n+    private int intA;\r\n+\r\n+    public int getIntA() {\r\n+        return intA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+}\r"},{"sha":"0a30996ecb31c72a703509c205d7a81f3ebf31cf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PlaceholderTypesB\r\n+    extends PlaceholderTypesA {\r\n+\r\n+    private boolean booleanB;\r\n+    private byte byteB;\r\n+    private char charB;\r\n+    private float floatB;\r\n+    private int intB;\r\n+    private String stringB;\r\n+    private String clobB;\r\n+    private Object blobB;\r\n+\r\n+    public boolean getBooleanB() {\r\n+        return booleanB;\r\n+    }\r\n+\r\n+    public void setBooleanB(boolean booleanB) {\r\n+        this.booleanB = booleanB;\r\n+    }\r\n+\r\n+    public byte getByteB() {\r\n+        return byteB;\r\n+    }\r\n+\r\n+    public void setByteB(byte byteB) {\r\n+        this.byteB = byteB;\r\n+    }\r\n+\r\n+    public char getCharB() {\r\n+        return charB;\r\n+    }\r\n+\r\n+    public void setCharB(char charB) {\r\n+        this.charB = charB;\r\n+    }\r\n+\r\n+    public float getFloatB() {\r\n+        return floatB;\r\n+    }\r\n+\r\n+    public void setFloatB(float floatB) {\r\n+        this.floatB = floatB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return intB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return stringB;\r\n+    }\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getClobB() {\r\n+        return clobB;\r\n+    }\r\n+\r\n+    public void setClobB(String clobB) {\r\n+        this.clobB = clobB;\r\n+    }\r\n+\r\n+    public Object getBlobB() {\r\n+        return blobB;\r\n+    }\r\n+\r\n+    public void setBlobB(Object blobB) {\r\n+        this.blobB = blobB;\r\n+    }\r\n+}\r"},{"sha":"e17815e58ee42fae2978024b9af8f26ae012c376","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PostAttachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the managed persistent instance after it has\r\n+     * been the subject of an attach process.\r\n+     *\r\n+     * @param detached the detached instance that corresponds to\r\n+     * this managed instance\r\n+     */\r\n+    public void jdoPostAttach(Object detached);\r\n+}\r"},{"sha":"6423162175c6c9c87607e7aac923279445cfc3fa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PostDetachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the detached copy of the persistent instance\r\n+     * after it has been detached. This method will only be called once\r\n+     * the entire graph of objects for a single detach operation has\r\n+     * been completed.\r\n+     *\r\n+     * @param managed the managed instance that was the\r\n+     * source of the detached instance\r\n+     */\r\n+    public void jdoPostDetach(Object managed);\r\n+}\r"},{"sha":"034a595a7123b0f462acb05f80ecea8fb28a76e9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PreAttachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the detached instance immediately before it is\r\n+     * to be attached.\r\n+     */\r\n+    public void jdoPreAttach();\r\n+}\r"},{"sha":"6d3c52df1b3014d98e3d44bbe88fd69de4a7b4da","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PreDetachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the persistent instance before it is detached.\r\n+     */\r\n+    public void jdoPreDetach();\r\n+}\r"},{"sha":"407a8e12d4163f13ce70764f3ba014ca87022fc3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class QueryTest1 {\r\n+\r\n+    public static final long FIVE = 5L;\r\n+\r\n+    private long num = 0L;\r\n+    private String string = null;\r\n+    private String clobField = null;\r\n+    private boolean bool = false;\r\n+    private float decimal = 0F;\r\n+    private char character = ' ';\r\n+    private Date date = null;\r\n+    private Collection manyToMany = null;\r\n+\r\n+    public long getNum() {\r\n+        return num;\r\n+    }\r\n+\r\n+    public void setNum(long val) {\r\n+        num = val;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return string;\r\n+    }\r\n+\r\n+    public void setString(String val) {\r\n+        string = val;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clobField;\r\n+    }\r\n+\r\n+    public void setClob(String val) {\r\n+        clobField = val;\r\n+    }\r\n+\r\n+    public boolean getBool() {\r\n+        return bool;\r\n+    }\r\n+\r\n+    public void setBool(boolean val) {\r\n+        bool = val;\r\n+    }\r\n+\r\n+    public float getDecimal() {\r\n+        return decimal;\r\n+    }\r\n+\r\n+    public void setDecimal(float val) {\r\n+        decimal = val;\r\n+    }\r\n+\r\n+    public char getCharacter() {\r\n+        return character;\r\n+    }\r\n+\r\n+    public void setCharacter(char val) {\r\n+        character = val;\r\n+    }\r\n+\r\n+    public void setDate(Date val) {\r\n+        date = val;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return date;\r\n+    }\r\n+\r\n+    public Collection getManyToMany() {\r\n+        return manyToMany;\r\n+    }\r\n+\r\n+    public void setManyToMany(Collection val) {\r\n+        manyToMany = val;\r\n+    }\r\n+}\r"},{"sha":"c4dfa239233f81d7a6a9d09a53edc9dc5f33c0e0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+\r\n+public class RawField {\r\n+\r\n+    private String str;\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public static class RawMapping\r\n+        extends ImmutableValueHandler {\r\n+\r\n+        public Object toDataStoreValue(ValueMapping vm, Object val,\r\n+            JDBCStore store) {\r\n+            return new Raw(\"'\" + val + \"FOO'\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"9818bbc95460fcd975ac92ba2381f48e427d20c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+public class RawSQL {\r\n+    \r\n+    @Id\r\n+    private String stringField = null;\r\n+    private int intField = 0;\r\n+\r\n+    protected RawSQL() {\r\n+    }\r\n+\r\n+    public RawSQL(String s, int i) {\r\n+        stringField = s;\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"stringField: \" + stringField + \"; intField: \" + intField;\r\n+    }\r\n+}\r"},{"sha":"32e4037bb9d0d8fd97ed8ed4763cf8827c60e8da","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Embedded type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class RecursivelyEmbeddedPC {\r\n+\r\n+    private EmbeddedPC embedded;\r\n+\r\n+    public EmbeddedPC getEmbedded() {\r\n+        return this.embedded;\r\n+    }\r\n+\r\n+    public void setEmbedded(EmbeddedPC embedded) {\r\n+        this.embedded = embedded;\r\n+    }\r\n+}\r"},{"sha":"11b8d5b95bfaa6ec7f0f2a34c06fadfbc60fc2a2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class Relations {\r\n+\r\n+    private Base base;\r\n+    private Base nullBase;\r\n+    private BaseSub1 baseSub1;\r\n+    private BaseSub1Sub2 baseSub1Sub2;\r\n+    private List baseList = new ArrayList();\r\n+    private List emptyBaseList = new ArrayList();\r\n+    private List baseSub1List = new ArrayList();\r\n+    private List baseSub1Sub2List = new ArrayList();\r\n+\r\n+    public Base getBase() {\r\n+        return this.base;\r\n+    }\r\n+\r\n+    public void setBase(Base base) {\r\n+        this.base = base;\r\n+    }\r\n+\r\n+    public BaseSub1 getBaseSub1() {\r\n+        return this.baseSub1;\r\n+    }\r\n+\r\n+    public void setBaseSub1(BaseSub1 baseSub1) {\r\n+        this.baseSub1 = baseSub1;\r\n+    }\r\n+\r\n+    public BaseSub1Sub2 getBaseSub1Sub2() {\r\n+        return this.baseSub1Sub2;\r\n+    }\r\n+\r\n+    public void setBaseSub1Sub2(BaseSub1Sub2 baseSub1Sub2) {\r\n+        this.baseSub1Sub2 = baseSub1Sub2;\r\n+    }\r\n+\r\n+    public List getBaseList() {\r\n+        return this.baseList;\r\n+    }\r\n+\r\n+    public void setBaseList(List baseList) {\r\n+        this.baseList = baseList;\r\n+    }\r\n+\r\n+    public List getBaseSub1List() {\r\n+        return this.baseSub1List;\r\n+    }\r\n+\r\n+    public void setBaseSub1List(List baseSub1List) {\r\n+        this.baseSub1List = baseSub1List;\r\n+    }\r\n+\r\n+    public List getBaseSub1Sub2List() {\r\n+        return this.baseSub1Sub2List;\r\n+    }\r\n+\r\n+    public void setBaseSub1Sub2List(List baseSub1Sub2List) {\r\n+        this.baseSub1Sub2List = baseSub1Sub2List;\r\n+    }\r\n+\r\n+    public Base getNullBase() {\r\n+        return this.nullBase;\r\n+    }\r\n+\r\n+    public void setNullBase(Base nullBase) {\r\n+        this.nullBase = nullBase;\r\n+    }\r\n+\r\n+    public List getEmptyBaseList() {\r\n+        return this.emptyBaseList;\r\n+    }\r\n+\r\n+    public void setEmptyBaseList(List emptyBaseList) {\r\n+        this.emptyBaseList = emptyBaseList;\r\n+    }\r\n+}\r"},{"sha":"706f6276cdf1abbbdcf39811c5e10d9241eb3ce7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.math.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persitent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+        @Table(name=\"rtest1\")\r\n+        @Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+        public class RuntimeTest1 implements Serializable {\r\n+    \r\n+    private static final long serialVersionUID = 1L;\r\n+    \r\n+    @Transient\r\n+            public static final String someStaticField = \"someField\";\r\n+    \r\n+    private Locale\t\tlocaleField;\r\n+    \r\n+    @Id\r\n+            private int\t\t\tintField;\r\n+    \r\n+    @Column(length=35)\r\n+    private String\t\tstringField;\r\n+    \r\n+    // transactional only\r\n+    @Column(length=35)\r\n+    public String\t\ttransString;\r\n+    \r\n+    // relations\r\n+    //@Transient\r\n+    @OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+    private RuntimeTest1\tselfOneOne;\r\n+    \r\n+    @Transient\r\n+            private Set\t\tselfOneMany = new HashSet();\r\n+    \r\n+    \r\n+    public RuntimeTest1() {\r\n+    }\r\n+    \r\n+    public RuntimeTest1(int key) {\r\n+        this.intField = key;\r\n+    }\r\n+    \r\n+    public RuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+    }\r\n+    \r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+    \r\n+    \r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+    \r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+    \r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+    \r\n+    public RuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+    \r\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+    \r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+    \r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\r\n+    }\r\n+    \r\n+    public Locale getLocaleField() {\r\n+        return localeField;\r\n+    }\r\n+    \r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+}\r"},{"sha":"de47fac6a0e5aa32001f75bca6b63e4b10b45f55","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class RuntimeTest2\r\n+    extends RuntimeTest1 {\r\n+\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+}\r"},{"sha":"45cd0e136e81f697898db7df5a5d474bf80dbd7d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class RuntimeTest3\r\n+    extends RuntimeTest2 {\r\n+\r\n+    private int intField3;\r\n+\r\n+    public RuntimeTest3() {\r\n+    }\r\n+\r\n+    public RuntimeTest3(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField3() {\r\n+        return this.intField3;\r\n+    }\r\n+\r\n+    public void setIntField3(int intField3) {\r\n+        this.intField3 = intField3;\r\n+    }\r\n+}\r"},{"sha":"78d0a98539f51e1c64f980307e383e75411c8407","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqA {\r\n+\r\n+}\r"},{"sha":"66507ad4c398029dc58e6e683f4d315dbbc5efb1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqB extends SeqA {\r\n+\r\n+}\r"},{"sha":"aed3028b8c6be7e2ea273ee2c372937f11f73cf0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqC extends SeqA {\r\n+\r\n+}\r"},{"sha":"685736f0b3515bb1ab78dece84a3b59a8a097ba2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqD {\r\n+\r\n+}\r"},{"sha":"10b686e6361f0c11e4afae510119c3cdd7266067","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public abstract class SeqE {\r\n+\r\n+}\r"},{"sha":"302edb0ae9799a35dabf5fb769f7cb4965ef6410","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqF extends SeqE {\r\n+\r\n+}\r"},{"sha":"69b5625a27ece55368edacc9bffaf2ec5b617c35","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqG extends SeqE {\r\n+\r\n+}\r"},{"sha":"ebe7e4789a8e10cbd5e26f51262d41e7bd138347","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class StateImagePC {\r\n+\r\n+    private int intField;\r\n+    private StateImagePC stateImage;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public StateImagePC getStateImage() {\r\n+        return this.stateImage;\r\n+    }\r\n+\r\n+    public void setStateImage(StateImagePC stateImage) {\r\n+        this.stateImage = stateImage;\r\n+    }\r\n+}\r"},{"sha":"b008fe45fc7bc84d7db587bf715ece2ee617ed9a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class StateImagePC2\r\n+    extends StateImagePC {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"57fe2be8a8e5365afa62f82633860d2e7ed497c5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class StateImagePC3 {\r\n+\r\n+    private int lockField;\r\n+    private int nolockField;\r\n+\r\n+    public int getLockField() {\r\n+        return lockField;\r\n+    }\r\n+\r\n+    public void setLockField(int i) {\r\n+        lockField = i;\r\n+    }\r\n+\r\n+    public int getNoLockField() {\r\n+        return nolockField;\r\n+    }\r\n+\r\n+    public void setNoLockField(int i) {\r\n+        nolockField = i;\r\n+    }\r\n+}\r"},{"sha":"5cab5f588d6968076a656ec4440323e237c7227b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Transactional type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\t@Id\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"afd66df2ba2442d014827e5d31d987fce5566d85","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Entity which is traget of a unidirectional one-to-one relation.\r\n+ * \r\n+ * Used in\r\n+ * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class UnidirectionalOneToOneOwned {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String marker;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\tpublic String getMarker() {\r\n+\t\treturn marker;\r\n+\t}\r\n+\r\n+\tpublic void setMarker(String marker) {\r\n+\t\tthis.marker = marker;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"bb45cdab4034bf5cc2c0cba566ca6487d7e32fe7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,74 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Persistent entity with unidirectional one-to-one relation.\r\n+ * \r\n+ * Used in\r\n+ * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class UnidirectionalOneToOneOwner {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String marker;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\tprivate UnidirectionalOneToOneOwned owned;\r\n+\r\n+\tpublic String getMarker() {\r\n+\t\treturn marker;\r\n+\t}\r\n+\r\n+\tpublic void setMarker(String marker) {\r\n+\t\tthis.marker = marker;\r\n+\t}\r\n+\r\n+\tpublic UnidirectionalOneToOneOwned getOwned() {\r\n+\t\treturn owned;\r\n+\t}\r\n+\r\n+\tpublic void setOwned(UnidirectionalOneToOneOwned owned) {\r\n+\t\tthis.owned = owned;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"a1debdca7774ef12c2bcca89cc93e8b88ea7fac5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class UnknownSubclassParent {\r\n+\r\n+    private String parentString;\r\n+\r\n+    public void setParentString(String parentString) {\r\n+        this.parentString = parentString;\r\n+    }\r\n+\r\n+    public String getParentString() {\r\n+        return this.parentString;\r\n+    }\r\n+}\r\n+\r\n+\r"},{"sha":"1c1ad6575e9ca012017321700f032145ab5971e1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+/** Denotes a composite identity combining a String and Integer field.\r\n+ * \r\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n+ *\r\n+ */\r\n+public class CompositeId implements Serializable {\r\n+\tpublic Integer id;\r\n+\tpublic String  name;\r\n+\t\r\n+\tpublic CompositeId () \r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic CompositeId (String idString)\r\n+\t{\r\n+\t\tint index = idString.indexOf(':');\r\n+\t\tid = Integer.parseInt(idString.substring(0,index));\r\n+\t\tname = idString.substring(index+1);\r\n+\t}\r\n+\r\n+\tpublic CompositeId (Integer id, String name)\r\n+\t{\r\n+\t\tthis.id   = id;\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Integer getId()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(Integer id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() \r\n+\t{\r\n+\t\treturn id + \":\" + name;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic boolean equals (Object other)\r\n+\t{\r\n+\t\tif (other instanceof CompositeId==false)\r\n+\t\t\treturn false;\r\n+\t\t\r\n+\t\tCompositeId that = (CompositeId) other;\r\n+\t\treturn id.equals(that.id) && name.equals(that.name);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int hashCode () \r\n+\t{\r\n+\t\treturn id.hashCode()+name.hashCode();\r\n+\t}\r\n+}\r"},{"sha":"adc2b7a34a990918fb237150bdf2c50b22e5a786","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name=\"entity_1\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n+public class Entity1 implements Serializable\r\n+{\r\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n+\tprotected Entity2 entity2Field;\r\n+\r\n+\t@Version\r\n+\tprotected int versionField;\r\n+\r\n+\tpublic Entity1()\r\n+\t{}\r\n+\r\n+\tpublic Entity1 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEntity2Field (Entity2 val)\r\n+\t{\r\n+\t\tentity2Field = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Entity2 getEntity2Field ()\r\n+\t{\r\n+\t\treturn entity2Field;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"0adc7bcbc9139c96d344f51049dc40e0193c5f28","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+/**FIX-ME \r\n+ * \r\n+ * It should complain if i uncomment the above strategies...but it does\r\n+ */\r\n+@Entity\r\n+public class Entity2 implements Serializable\r\n+{\r\n+\t/**\r\n+\t *\r\n+\t */\r\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\tpublic Entity2()\r\n+\t{}\r\n+\r\n+\r\n+\tpublic Entity2 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"05ea6b07804cb58b4a285f352536485c878f8c80","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(CompositeId.class)\r\n+@Table(name=\"COMPOSITE_ID\")\r\n+public class EntityWithCompositeId {\r\n+\tprivate Integer id;   // this must match the field in CompositeId\r\n+\tprivate String  name; // this must match the field in CompositeId\r\n+\tprivate String  value;\r\n+\t\r\n+\tpublic EntityWithCompositeId() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId () \r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\t@Id\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName () {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@Column(name=\"VALUE\")\r\n+\tpublic String getValue () \r\n+\t{\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\tpublic void setId (Integer id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\t\r\n+\tpublic void setName (String name) \r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic void setValue (String value)\r\n+\t{\r\n+\t\tthis.value = value;\r\n+\t}\r\n+}\r"},{"sha":"9c778096d8f35c8df82641ce301a3fdca1b4f485","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@SqlResultSetMappings(value={\r\n+@SqlResultSetMapping(name=\"SQLSelectsBothEndOfTheRelation\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n+\t\t\t\t}\r\n+\t\t\t),\r\n+\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t\t@FieldResult(name=\"id\",  column=\"C_ID\"),\r\n+\t\t\t\t\t@FieldResult(name=\"name\", column=\"C_NAME\"),\r\n+\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+),\r\n+@SqlResultSetMapping(name=\"SQLSelectsOnlyOneEndOfTheRelation\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+),\r\n+@SqlResultSetMapping(name=\"SQLSelectsUnrelatedInstances\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n+\t\t\t\t}\r\n+\t\t\t),\r\n+\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t\t@FieldResult(name=\"id\",    column=\"C_ID\"),\r\n+\t\t\t\t\t@FieldResult(name=\"name\",  column=\"C_NAME\"),\r\n+\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+)\r\n+\r\n+})\r\n+\r\n+@Entity\r\n+@Table(name=\"OWNER_OF_COMPOSITE_ID\")\r\n+public class OwnerOfEntityWithCompositeId {\r\n+\t\r\n+\tprivate String                 name;\r\n+\tprivate EntityWithCompositeId  relation;\r\n+\t\r\n+\tpublic OwnerOfEntityWithCompositeId() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\tpublic OwnerOfEntityWithCompositeId (String name)\r\n+\t{\r\n+\t\tsetName (name);\r\n+\t}\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName () \r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\t@JoinColumns({\r\n+\t\t@JoinColumn(name=\"RELATION_ID\",referencedColumnName=\"ID\"),\r\n+\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\r\n+\t})\r\n+\t\r\n+\tpublic EntityWithCompositeId getRelation()\r\n+\t{\r\n+\t\treturn relation;\r\n+\t}\r\n+\t\r\n+\t\r\n+\tpublic void setName (String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic void setRelation (EntityWithCompositeId relation)\r\n+\t{\r\n+\t\tthis.relation = relation;\r\n+\t}\r\n+}\r"},{"sha":"1a5ef39514caecf21ea601b11196fc87da09c0f6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@SqlResultSetMappings(value={\r\n+\t@SqlResultSetMapping(name=\"SQLSelectsChainedRelation\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=RecursiveEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t\r\n+\t\t\t\t@FieldResult(name=\"id\",                   column=\"T0_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"name\",                 column=\"T0_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",          column=\"T0_REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\",        column=\"T0_REL_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.id\", column=\"T1_REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.name\", column=\"T1_REL_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.relation.id\", column=\"T2_REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.relation.name\", column=\"T2_REL_NAME\")\r\n+\t\t\t\t\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+\t)\r\n+  }\r\n+)\r\n+ \r\n+@Entity\r\n+@IdClass(CompositeId.class)\r\n+@Table(name=\"RECURSIVE_ENTITY\")\r\n+\r\n+public class RecursiveEntityWithCompositeId {\r\n+\tprivate Integer id;   // this must match the field in CompositeId\r\n+\tprivate String  name; // this must match the field in CompositeId\r\n+\tprivate int     value;// a non-primary key field \r\n+\tprivate RecursiveEntityWithCompositeId  relation; // self-related\r\n+\t\r\n+\tpublic RecursiveEntityWithCompositeId() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId () \r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\t@Id\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName () {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\t@Column(name=\"VALUE\")\r\n+\tpublic int getValue(){\r\n+\t   return value;\t\r\n+\t}\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\t@JoinColumns({\r\n+\t\t@JoinColumn(name=\"RELATION_ID\",   referencedColumnName=\"ID\"),\r\n+\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\r\n+\t})\r\n+\tpublic RecursiveEntityWithCompositeId getRelation() \r\n+\t{\r\n+\t\treturn relation;\r\n+\t}\r\n+\t\r\n+\tpublic void setId (Integer id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\t\r\n+\tpublic void setName (String name) \r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\tpublic void setValue (int value) \r\n+\t{\r\n+\t\tthis.value = value;\r\n+\t}\r\n+\t\r\n+\tpublic void setRelation (RecursiveEntityWithCompositeId relation)\r\n+\t{\r\n+\t\tthis.relation = relation;\r\n+\t}\r\n+}\r"},{"sha":"d8b08856a49e6da8490249d1be41c09848c9438f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,177 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/** This domain class uses a all possible nature of annotations. Nature of\r\n+ * annotation from the point of view of nature of result they produce are\r\n+ * the following\r\n+ * <pre>\r\n+ * #entity-result      #column-result       nature\r\n+ * 0                     1+                 SCALAR_ONLY\r\n+ * 1                     0                  SINGLE_CLASS\r\n+ * 1                     1+                 SINGLE_CLASS_AND_SCALAR\r\n+ * 1+                    0                  MULTI_CLASS\r\n+ * 1+                    1+                 MULTI_CLASS_AND_SCALAR\r\n+ * </pre> \r\n+ * \r\n+ */\r\n+@SqlResultSetMappings(value={\r\n+\t\t/** Specifies only scalars and no entity.\r\n+\t\t * \r\n+\t\t */\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"SCALAR_ONLY\",\r\n+\t\t\t\t    columns={\r\n+\t\t\t\t\t\t@ColumnResult(name=\"NAME\")\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t/** Specifies one entity and no scalar.\r\n+\t\t * \r\n+\t\t */\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t\t\t\r\n+\t\t\t\t/** Specifies one entity and one or more scalar.\r\n+\t\t\t\t * \r\n+\t\t\t\t */\t\t\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS_AND_SCALAR\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\r\n+\t\t\t\t\t},\r\n+\t\t\t\t\tcolumns={\r\n+\t\t\t\t\t\t@ColumnResult(name=\"name\")\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t\t\t\r\n+\t\t\t\t/** Specifies more than one entity and no scalar.\r\n+\t\t\t\t * \r\n+\t\t\t\t */\t\t\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t\t\t\r\n+\t\t\t\t/** Specifies more than one entity and one or more scalar.\r\n+\t\t\t\t * \r\n+\t\t\t\t */\t\t\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS_AND_SCALAR\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\r\n+\t\t\t\t\t},\r\n+\t\t\t\t\tcolumns={\r\n+\t\t\t\t\t\t@ColumnResult(name=\"name\"),\r\n+\t\t\t\t\t\t@ColumnResult(name=\"state\")\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\r\n+\t\t\t\t@SqlResultSetMapping(name=\"MappingWithTraversal\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class,\r\n+\t\t\t\t\t    fields={\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"id\",    column=\"ADDR_ID\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"street\",column=\"ADDR_STREET\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"state\", column=\"ADDR_STATE\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"zip\",   column=\"ADDR_ZIP\")\r\n+\t\t\t\t\t\t}),\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class,\r\n+\t\t\t\t\t\t fields={\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"name\",    column=\"MY_NAME\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"address\", column=\"MY_ADDRESS\")\r\n+\t\t\t\t\t\t }\r\n+\t\t\t\t\t\t)\r\n+\t\t\t\t\t}\r\n+\t\t\t\t)\r\n+\t\t\t\t\r\n+\t\t\t\t\r\n+\t\t\t}\r\n+\t\t) \r\n+\r\n+\r\n+@Entity\r\n+@Table(name = \"SQLMAP_ADDRESS\")\r\n+public class SQLMapAddress implements Serializable {\r\n+\tprivate int    id;\r\n+\tprivate String street;\r\n+\tprivate String state;\r\n+\tprivate int    zip;\r\n+\r\n+\tprotected SQLMapAddress() {\r\n+\r\n+\t}\r\n+\r\n+\tpublic SQLMapAddress(int id, String street, String state, int zip) {\r\n+\t\tthis.id = id;\r\n+\t\tsetStreet(street);\r\n+\t\tsetState(state);\r\n+\t\tsetZip(zip);\r\n+\t}\r\n+\r\n+\t@Id\r\n+\tpublic int getId ()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId (int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\t@Column(name=\"STATE\")\r\n+\tpublic String getState() {\r\n+\t\treturn state;\r\n+\t}\r\n+\r\n+\tpublic void setState(String state) {\r\n+\t\tthis.state = state;\r\n+\t}\r\n+\r\n+\t@Column(name=\"STREET\")\r\n+\tpublic String getStreet() {\r\n+\t\treturn street;\r\n+\t}\r\n+\r\n+\tpublic void setStreet(String street) {\r\n+\t\tthis.street = street;\r\n+\t}\r\n+\r\n+\tpublic int getZip() {\r\n+\t\treturn zip;\r\n+\t}\r\n+\r\n+\t@Column(name=\"ZIP\")\r\n+\tpublic void setZip(int zip) {\r\n+\t\tthis.zip = zip;\r\n+\t}\r\n+\t\r\n+\t@PostLoad\r\n+\tprotected void inform() {\r\n+\t\tSystem.out.println(\"Loaded\" + this);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"1b25a971b7f68362ac8a092fcab7a3ca05f25e05","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,157 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/** This simple domain class without any relationship is for testing basic \r\n+ * SQL Result Set mapping functionality.\r\n+ * This class uses Application Identity.\r\n+ * The annotation specified herein examplifies test cases of accessing\r\n+ * with or without identity fields, aliased column names etc. \r\n+ */ \r\n+@SqlResultSetMappings(value = {\r\n+\t/**\r\n+\t *  This mapping is the same as the native query that\r\n+\t *  takes a class argument.\r\n+\t *  <code>SELECT id,name,price FROM ITEM WHERE name='WINE'</code>\r\n+\t */ \t\t\r\n+\t@SqlResultSetMapping(name = \"MappingEquivalentToClassQuery\", \r\n+\t\tentities = { @EntityResult(entityClass = SQLMapItem.class) \r\n+\t}),\r\n+\r\n+\t/**\r\n+\t * This mapping is similar to the native query that takes a class argument\r\n+\t * but the query specifies aliases for the projection columns.\r\n+\t *  <code>SELECT id AS ITEM_ID,name AS ITEM_NAME FROM ITEM\r\n+\t *  WHERE NAME='WINE'</code>\r\n+\t */\t\t\t\t\r\n+\t@SqlResultSetMapping(name = \"MappingWithAliasedColumnName\", \r\n+\t\tentities = { @EntityResult(entityClass = SQLMapItem.class, \r\n+\t\t\tfields = {\r\n+\t\t\t\t@FieldResult(name = \"id\",   column = \"ITEM_ID\"),\r\n+\t\t\t\t@FieldResult(name = \"name\", column = \"ITEM_NAME\") }) \r\n+\t\t\t}),\r\n+\r\n+\t/**\r\n+\t * This mapping specifes only few fields of the application class.\r\n+\t * \r\n+\t */ \t\t\r\n+\t@SqlResultSetMapping(name=\"MappingWithPartialFields\",\r\n+\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\r\n+\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"id\", column=\"id\")\r\n+\t\t\t})\r\n+\t\t}),\r\n+\r\n+\t@SqlResultSetMapping(name=\"MappingWithPartialFieldsExcludingIdField\",\r\n+\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\r\n+\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\", column=\"name\")\r\n+\t\t\t\t})\r\n+\t\r\n+\t\t})\r\n+})\r\n+\r\n+@Entity\r\n+@Table(name = \"SQLMAP_ITEM\")\r\n+public class SQLMapItem\r\n+\timplements Serializable\r\n+{\r\n+\r\n+\tprivate int id;\r\n+\tprivate String name;\r\n+\tprivate float  price;\r\n+\r\n+\r\n+\tprotected SQLMapItem()\r\n+\t{\r\n+\t}\r\n+\r\n+\r\n+\tpublic SQLMapItem(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic SQLMapItem(int id, String name)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic SQLMapItem(int id, String name, int price)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t\tthis.name = name;\r\n+\t\tthis.price = price;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn getId() + \":\"+getName();\r\n+\t\t//System.identityHashCode(this) + \":[\" + id + \".\" + name + \"]\";\r\n+\t}\r\n+\r\n+\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic int getId()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id)\r\n+\t{\r\n+\t\tSystem.out.println(\"setId \" + id);\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tSystem.out.println(\"setName \" + name);\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\r\n+\t@Column(name=\"PRICE\")\r\n+\tpublic float getPrice()\r\n+\t{\r\n+\t\treturn price;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setPrice(float price)\r\n+\t{\r\n+\t\tthis.price = price;\r\n+\t}\r\n+}\r"},{"sha":"1b9da31fbf99f552d785132baf59da93ed1df185","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+/** Exemplifies a mapping that is overwritten in orm.xml file.\r\n+ * \r\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n+ *\r\n+ */\r\n+@SqlResultSetMapping(name=\"Overwritten by Descriptor\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=SQLMapOrder.class)\r\n+\t\t},\r\n+\t\tcolumns={\r\n+\t\t\t@ColumnResult(name=\"id\")\r\n+\t\t}\r\n+\t)\r\n+\r\n+@Entity\r\n+@Table(name = \"SQLMAP_ORDER\")\r\n+public class SQLMapOrder implements Serializable {\r\n+\t@Id\r\n+\tint id;\r\n+\r\n+\tint quantity;\r\n+\r\n+\t@OneToOne\r\n+\tSQLMapItem item;\r\n+\r\n+\tprotected SQLMapOrder() {\r\n+\t}\r\n+\r\n+\tpublic SQLMapOrder(int id) {\r\n+\t\tthis(id, 1);\r\n+\t}\r\n+\r\n+\tpublic SQLMapOrder(int id, int quantity) {\r\n+\t\tthis.id = id;\r\n+\t\tthis.quantity = 1;\r\n+\t\tthis.item = null;\r\n+\t}\r\n+\r\n+\tpublic SQLMapItem getItem() {\r\n+\t\treturn item;\r\n+\t}\r\n+\r\n+\tpublic void setItem(SQLMapItem item) {\r\n+\t\tthis.item = item;\r\n+\t}\r\n+\r\n+\tpublic int getQuantity() {\r\n+\t\treturn quantity;\r\n+\t}\r\n+\r\n+\tpublic void setQuantity(int quantity) {\r\n+\t\tthis.quantity = quantity;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t@PostLoad\r\n+\tprotected void inform() {\r\n+\t\tSystem.out.println(\"Loaded\" + this);\r\n+\t}\r\n+}\r"},{"sha":"cfe0bcedea2d54ed2e339cd63e49423bc766df3a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+/** \r\n+ * @author ppoddar\r\n+ *\r\n+ */\r\n+\r\n+@SqlResultSetMapping (name=\"MappingWithSelfJoin\",\r\n+\t\tcolumns={\r\n+\t\t\t@ColumnResult(name=\"MY_NAME\"),\r\n+\t\t\t@ColumnResult(name=\"PARTNER_NAME\")\r\n+\t\t}\r\n+)\r\n+@Entity\r\n+@Table(name = \"SQLMAP_PERSON\")\r\n+public class SQLMapPerson implements Serializable {\r\n+\tprivate String name;\r\n+\tprivate SQLMapAddress address;\r\n+\tprivate SQLMapPerson partner;\r\n+\r\n+\r\n+\tprotected SQLMapPerson() {\r\n+\t}\r\n+\r\n+\tpublic SQLMapPerson(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic SQLMapPerson(String name, SQLMapAddress address) {\r\n+\t\tthis.name = name;\r\n+\t\tsetAddress(address);\r\n+\t}\r\n+\r\n+\t@Id\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\t@JoinColumn(name=\"ADDRESS_ID\")\r\n+\tpublic SQLMapAddress getAddress() {\r\n+\t\treturn address;\r\n+\t}\r\n+\r\n+\tpublic void setAddress(SQLMapAddress address) {\r\n+\t\tthis.address = address;\r\n+\t}\r\n+\r\n+\r\n+\t@OneToOne\r\n+\tpublic SQLMapPerson getPartner() {\r\n+\t\treturn partner;\r\n+\t}\r\n+\r\n+\tpublic void setPartner(SQLMapPerson partner) {\r\n+\t\tthis.partner = partner;\r\n+\t}\r\n+//\t@PostLoad\r\n+//\tprotected void inform() {\r\n+//\t\tSystem.out.println(\"Loaded\" + this);\r\n+//\t}\r\n+}\r"},{"sha":"210e84606175e6d392bdf02c1fd3d494cb791f91","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"bdfd662b00d0b8673ec01c75fc393356c113c02b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"8338c354029638738a865c7c5f90ec1cdf930864","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","status":"added","additions":373,"deletions":0,"changes":373,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a3264be525641cab71f0f1027903fad5b33303b2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"240a1da6bfa924f803fcbbac3b59251b2a9e2c36","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"cc89f211baa74ff43f57830da76e23257d5752fe","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f871f9aa524cef13d28f1f712532fcc44934191a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"0688cd92c5b493f7c4787dd06ea93ea9c12be1fb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","status":"added","additions":285,"deletions":0,"changes":285,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"095be1caf82a41fd4384a535ee444801f9787c7d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"03cdf9a1303a481cfd87e73bcac63c971803b4ab","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"e6186ab400524230c8556c219ca9467b39192534","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","status":"added","additions":656,"deletions":0,"changes":656,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a92a4a6e1a227f5ac4c7de8f95c1d61a0785becf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a49f8064378e3a6211b98ce057936425fac2cdf3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"7ee7b49af5f0c96918ae2b25ca429b5d954279a2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"f263867248a4d503002cde214d8189147034d151","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","status":"added","additions":173,"deletions":0,"changes":173,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"a6abc3acba7bc3f9606d6adc3fe1159812112b49","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"809b8c7bffa96fa4d93530d94c627ae84ebee439","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"64a9a5776f0961a937709e0942406c6f7c94001a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"ffa9a1c70cbb8a9af06be1d8a42d768bac3d94f3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"67bb8e553a49e0ea97503218dd8949f49a763d66","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"3947e3ba8c2ca2945e3ea549e3525f4e2ca757aa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"899ba104ccff9ead4e459e1ff125b7b76ddbe360","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"},{"sha":"19562e691fe26a2332836360d48a3f6e0f4b3f58","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","raw_url":"https://github.com/apache/openjpa/raw/f290fad39391ba583289c4abfe52d3f81f95d18a/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java?ref=f290fad39391ba583289c4abfe52d3f81f95d18a"}]}

