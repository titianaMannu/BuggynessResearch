{"sha":"f38d30496b2d9c4c450b1afec218c508a8a91571","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzOGQzMDQ5NmIyZDljNGM0NTBiMWFmZWMyMThjNTA4YThhOTE1NzE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T00:09:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T00:09:28Z"},"message":"OPENJPA-506. svn merge -c 618821 ../../trunk. Oddly, the TCK was passing on this branch; maybe trunk and 1.0.x have different TCK versions?\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@618834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f595ae71cb57624824605e4c5b0427450a4d4736","url":"https://api.github.com/repos/apache/openjpa/git/trees/f595ae71cb57624824605e4c5b0427450a4d4736"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f38d30496b2d9c4c450b1afec218c508a8a91571","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f38d30496b2d9c4c450b1afec218c508a8a91571","html_url":"https://github.com/apache/openjpa/commit/f38d30496b2d9c4c450b1afec218c508a8a91571","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f38d30496b2d9c4c450b1afec218c508a8a91571/comments","author":null,"committer":null,"parents":[{"sha":"78e258706ddda8eee2bfb6b71b673e33aa29d59f","url":"https://api.github.com/repos/apache/openjpa/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f","html_url":"https://github.com/apache/openjpa/commit/78e258706ddda8eee2bfb6b71b673e33aa29d59f"}],"stats":{"total":529,"additions":524,"deletions":5},"files":[{"sha":"427bc598d6e9f88231e99cefa8a10c4ea3966e2a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -491,6 +491,42 @@ else if (listener instanceof ListenerAdapter) {\n                                 ((AttachListener) listener).afterAttach(ev);\n                         }\n                         break;\n+\n+                    case LifecycleEvent.AFTER_PERSIST_PERFORMED:\n+                        if (responds || listener instanceof PostPersistListener)\n+                        {\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            ((PostPersistListener) listener)\n+                                .afterPersistPerformed(ev);\n+                        }\n+                        break;\n+                    case LifecycleEvent.BEFORE_UPDATE:\n+                    case LifecycleEvent.AFTER_UPDATE_PERFORMED:\n+                        if (responds || listener instanceof UpdateListener) {\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            if (type == LifecycleEvent.BEFORE_UPDATE)\n+                                ((UpdateListener) listener).beforeUpdate(ev);\n+                            else\n+                                ((UpdateListener) listener)\n+                                    .afterUpdatePerformed(ev);\n+                        }\n+                        break;\n+                    case LifecycleEvent.AFTER_DELETE_PERFORMED:\n+                        if (responds || listener instanceof PostDeleteListener){\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            ((PostDeleteListener) listener)\n+                                .afterDeletePerformed(ev);\n+                        }\n+                        break;\n                     default:\n                         if (_log.isWarnEnabled())\n                             _log.warn(_loc.get(\"unknown-lifecycle-event\","},{"sha":"7273d0c0b51f5e3e31a480203c4e514db9d5cbd7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface PostDeleteListener {\r\n+    \r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link DeleteListener#afterDelete(LifecycleEvent)} in that the latter\r\n+     * is called after the delete operation, whereas this is called after the\r\n+     * delete statements have been sent to the data store.\r\n+     */\r\n+    public void afterDeletePerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"76a54c7317ec89626d1bad313dae009880771d55","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface PostPersistListener {\r\n+\r\n+    /**\r\n+     * Receives notifications after a persist operation has been written to the\r\n+     * data store. Differs from {@link PersistListener#afterPersist} in that\r\n+     * the latter is called at the end of the persist() operation itself, not\r\n+     * after the flush.\r\n+     */\r\n+    public void afterPersistPerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"b274521db182f31111753362c44adc133ad15974","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface UpdateListener {\r\n+\r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link StoreListener#beforeStore} in that the latter is called for\r\n+     * updated and new records, whereas this is only invoked for updated\r\n+     * records.\r\n+     */\r\n+    public void beforeUpdate(LifecycleEvent event);\r\n+\r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link StoreListener#afterStore} in that the latter is called for\r\n+     * updated and new records, whereas this is only invoked for updated\r\n+     * records, and that this is called after the record is actually flushed\r\n+     * to the store.\r\n+     */\r\n+    public void afterUpdatePerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"f5ffce8058e48d6bf369518e2b5db4ee126da8f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.EntityListeners;\r\n+\r\n+@Entity\r\n+@EntityListeners(value = ListenerImpl.class)\r\n+public class EntityListenerEntity implements ListenerTestEntity {\r\n+    @Id @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private int value;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(int value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"317f85a4136b2f9d72db5fa3d5cda386a5342ad9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.EntityListeners;\r\n+\r\n+import org.apache.openjpa.persistence.callbacks.ListenerImpl;\r\n+\r\n+@Entity\r\n+public class GlobalListenerEntity implements ListenerTestEntity {\r\n+    @Id @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private int value;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(int value) {\r\n+        this.value = value;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"72746723f7e7fae8acdeebfd9ebb27f41cef0d05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.PrePersist;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PostLoad;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreRemove;\r\n+import javax.persistence.PostRemove;\r\n+\r\n+public class ListenerImpl {\r\n+\r\n+    static int prePersistCount;\r\n+    static int postPersistCount;\r\n+    static int preUpdateCount;\r\n+    static int postUpdateCount;\r\n+    static int preRemoveCount;\r\n+    static int postRemoveCount;\r\n+    static int postLoadCount;\r\n+\r\n+    @PrePersist\r\n+    public void prePersist(Object o) {\r\n+        prePersistCount++;\r\n+    }\r\n+\r\n+    @PostPersist\r\n+    public void postPersist(Object o) {\r\n+        postPersistCount++;\r\n+    }\r\n+\r\n+    @PostLoad\r\n+    public void postLoad(Object o) {\r\n+        postLoadCount++;\r\n+    }\r\n+\r\n+    @PreUpdate\r\n+    public void preUpdate(Object o) {\r\n+        preUpdateCount++;\r\n+    }\r\n+\r\n+    @PostUpdate\r\n+    public void postUpdate(Object o) {\r\n+        postUpdateCount++;\r\n+    }\r\n+\r\n+    @PreRemove\r\n+    public void preRemove(Object o) {\r\n+        preRemoveCount++;\r\n+    }\r\n+\r\n+    @PostRemove\r\n+    public void postRemove(Object o) {\r\n+        postRemoveCount++;\r\n+    }\r\n+}\r"},{"sha":"f8ad91e826afe28ad4a5aead4a6028f657f064c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+public interface ListenerTestEntity {\r\n+\r\n+    public long getId();\r\n+\r\n+    public int getValue();\r\n+\r\n+    public void setValue(int val);\r\n+}\r"},{"sha":"d8684f39906e03cd775b1b2cc925f1eaf3a11a6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestEntityListeners extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES);\r\n+        ListenerImpl.prePersistCount = 0;\r\n+        ListenerImpl.postPersistCount = 0;\r\n+        ListenerImpl.preUpdateCount = 0;\r\n+        ListenerImpl.postUpdateCount = 0;\r\n+        ListenerImpl.preRemoveCount = 0;\r\n+        ListenerImpl.postRemoveCount = 0;\r\n+        ListenerImpl.postLoadCount = 0;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"listener-pu\";\r\n+    }\r\n+\r\n+    public void testEntityListeners() {\r\n+        helper(true);\r\n+    }\r\n+\r\n+    public void testGlobalListeners() {\r\n+        helper(false);\r\n+    }\r\n+\r\n+    public void helper(boolean entityListeners) {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            ListenerTestEntity o;\r\n+            if (entityListeners)\r\n+                o = new EntityListenerEntity();\r\n+            else\r\n+                o = new GlobalListenerEntity();\r\n+            em.persist(o);\r\n+\r\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n+\r\n+            em.getTransaction().commit();\r\n+            long id = o.getId();\r\n+            em.close();\r\n+\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n+\r\n+            em = emf.createEntityManager();\r\n+            em.getTransaction().begin();\r\n+            if (entityListeners)\r\n+                o = em.find(EntityListenerEntity.class, id);\r\n+            else\r\n+                o = em.find(GlobalListenerEntity.class, id);\r\n+\r\n+            assertNotNull(o);\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n+\r\n+            o.setValue(o.getValue() + 1);\r\n+\r\n+            em.flush();\r\n+            assertStatus(1, 1, 1, 1, 0, 0, 1);\r\n+\r\n+            em.remove(o);\r\n+            assertStatus(1, 1, 1, 1, 1, 0, 1);\r\n+\r\n+            em.getTransaction().commit();\r\n+\r\n+            assertStatus(1, 1, 1, 1, 1, 1, 1);\r\n+\r\n+            em.close();\r\n+        } finally {\r\n+            if (em != null && em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            if (em != null && em.isOpen())\r\n+                em.close();\r\n+        }\r\n+    }\r\n+\r\n+    private void assertStatus(\r\n+        int prePersist, int postPersist,\r\n+        int preUpdate, int postUpdate,\r\n+        int preRemove, int postRemove,\r\n+        int postLoad) {\r\n+        assertEquals(prePersist, ListenerImpl.prePersistCount);\r\n+        assertEquals(postPersist, ListenerImpl.postPersistCount);\r\n+        assertEquals(preUpdate, ListenerImpl.preUpdateCount);\r\n+        assertEquals(postUpdate, ListenerImpl.postUpdateCount);\r\n+        assertEquals(preRemove, ListenerImpl.preRemoveCount);\r\n+        assertEquals(postRemove, ListenerImpl.postRemoveCount);\r\n+        assertEquals(postLoad, ListenerImpl.postLoadCount);\r\n+    }\r\n+\r\n+}\r"},{"sha":"9b1cff7e4b4fa8d44108135d19b3934aef3a3dc4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -91,7 +91,11 @@ protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\n         }\n \n         return (OpenJPAEntityManagerFactorySPI) Persistence.\n-            createEntityManagerFactory(\"test\", map);\n+            createEntityManagerFactory(getPersistenceUnitName(), map);\n+    }\n+\n+    protected String getPersistenceUnitName() {\n+        return \"test\";\n     }\n \n     @Override"},{"sha":"475736ebba149edbc8cc8a9176ca86e41f79e112","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+\r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.\r\n+-->\r\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n+    version=\"1.0\">\r\n+    <package>org.apache.openjpa.persistence.callbacks</package>\r\n+    <entity class=\"EntityListenerEntity\">\r\n+        <exclude-default-listeners>true</exclude-default-listeners>\r\n+    </entity>\r\n+    <persistence-unit-metadata>\r\n+        <persistence-unit-defaults>\r\n+            <entity-listeners>\r\n+                <entity-listener class=\"ListenerImpl\">\r\n+                </entity-listener>\r\n+            </entity-listeners>\r\n+        </persistence-unit-defaults>\r\n+    </persistence-unit-metadata>\r\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"795d6ef960471a6d33bc58d5882320030c710cc5","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -63,4 +63,14 @@\n                 value=\"DriverClassName=not.a.real.Driver,Url=jdbc:notreal://\"/>\n         </properties>\n     </persistence-unit>\n+\n+    <persistence-unit name=\"listener-pu\">\n+        <mapping-file>META-INF/listener-orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                  value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n </persistence>"},{"sha":"ffeeb93c27ebfe8dcc540ae012b9aacb65d4688b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","raw_url":"https://github.com/apache/openjpa/raw/f38d30496b2d9c4c450b1afec218c508a8a91571/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java?ref=f38d30496b2d9c4c450b1afec218c508a8a91571","patch":"@@ -27,13 +27,16 @@\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.event.LoadListener;\n import org.apache.openjpa.event.PersistListener;\n-import org.apache.openjpa.event.StoreListener;\n+import org.apache.openjpa.event.PostPersistListener;\n+import org.apache.openjpa.event.UpdateListener;\n+import org.apache.openjpa.event.PostDeleteListener;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.CallbackException;\n \n class PersistenceListenerAdapter\n     implements LifecycleEventManager.ListenerAdapter, PersistListener,\n-    LoadListener, StoreListener, DeleteListener {\n+    PostPersistListener, LoadListener, UpdateListener, DeleteListener,\n+    PostDeleteListener {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (PersistenceListenerAdapter.class);\n@@ -83,6 +86,10 @@ public void beforePersist(LifecycleEvent event) {\n     }\n \n     public void afterPersist(LifecycleEvent event) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void afterPersistPerformed(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n@@ -94,11 +101,11 @@ public void afterRefresh(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n-    public void beforeStore(LifecycleEvent event) {\n+    public void beforeUpdate(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n-    public void afterStore(LifecycleEvent event) {\n+    public void afterUpdatePerformed(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n@@ -107,6 +114,10 @@ public void beforeDelete(LifecycleEvent event) {\n     }\n \n     public void afterDelete(LifecycleEvent event) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void afterDeletePerformed(LifecycleEvent event) {\n         makeCallback(event);\n     }\n }"}]}

