{"sha":"f3dd4c039797ee3498d5bffeac16415474680216","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzZGQ0YzAzOTc5N2VlMzQ5OGQ1YmZmZWFjMTY0MTU0NzQ2ODAyMTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T01:12:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T01:12:19Z"},"message":"OPENJPA-521. Committing on behalf of Qin Feng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633738 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0745a9c6faa76d211e65e7be5930c688752cf4a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0745a9c6faa76d211e65e7be5930c688752cf4a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f3dd4c039797ee3498d5bffeac16415474680216","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f3dd4c039797ee3498d5bffeac16415474680216","html_url":"https://github.com/apache/openjpa/commit/f3dd4c039797ee3498d5bffeac16415474680216","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f3dd4c039797ee3498d5bffeac16415474680216/comments","author":null,"committer":null,"parents":[{"sha":"777818d28332d67a9716d91b1dc8ec900d986b2d","url":"https://api.github.com/repos/apache/openjpa/commits/777818d28332d67a9716d91b1dc8ec900d986b2d","html_url":"https://github.com/apache/openjpa/commit/777818d28332d67a9716d91b1dc8ec900d986b2d"}],"stats":{"total":207,"additions":206,"deletions":1},"files":[{"sha":"0b6c11096a33c61926df1b918bebcee6ce21e09a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=f3dd4c039797ee3498d5bffeac16415474680216","patch":"@@ -145,7 +145,7 @@ protected void storeField(OpenJPAStateManager sm, FieldMetaData fmd) {\n \n         // If this field is used in \"order by\", we need to invalidate cache\n         // for the collection that refer to this field.\n-        if (sm.getPCState() == PCState.PDIRTY) {\n+        if ((sm.getPCState() == PCState.PDIRTY) && fmd.isUsedInOrderBy()) {\n             clearInverseRelationCache(sm, fmd);\n         }\n     }"},{"sha":"5bf7969bc4c1d3786b1569519a8ae8ea625ac300","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=f3dd4c039797ee3498d5bffeac16415474680216","patch":"@@ -207,6 +207,8 @@\n     // ordering on load\n     private Order[] _orders = null;\n     private String _orderDec = null;\n+    // indicate if this field is used by other field as \"order by\" value \n+    private boolean _usedInOrderBy = false;\n \n     /**\n      * Constructor.\n@@ -1119,6 +1121,12 @@ public void setUsesImplData(Boolean implData) {\n                         decs[i] = decs[i].substring(0, spc);\n                     }\n                     orders[i] = getRepository().newOrder(this, decs[i], asc);\n+                    //set \"isUsedInOrderBy\" to the field\n+                    ClassMetaData elemCls = getElement()\n+                        .getDeclaredTypeMetaData();\n+                    FieldMetaData fmd = elemCls.getDeclaredField(decs[i]);\n+                    if (fmd != null)\n+                    \tfmd.setUsedInOrderBy(true);                    \n                 }\n                 _orders = orders;\n             }\n@@ -2020,6 +2028,24 @@ public void copy (ValueMetaData vmd)\n \t\t_val.copy (vmd);\n \t}\n \n+    /**\n+     * Check if this field is used by other field as \"order by\" value.\n+     *\n+     * @since 1.1.0\n+     */\n+    public boolean isUsedInOrderBy() {\n+    \treturn _usedInOrderBy;\n+    }\n+    \n+    /**\n+     * Whether this field is used by other field as \"order by\" value .\n+     *\n+     * @since 1.1.0\n+     */\n+    public void setUsedInOrderBy(boolean isUsed) {\n+    \t_usedInOrderBy = isUsed;\n+    }\n+    \n     /**\n      * Serializable wrapper around a {@link Method} or {@link Field}. For \n      * space considerations, this does not support {@link Constructor}s."},{"sha":"479fda387513b55c6e22df332130828a28a37599","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java?ref=f3dd4c039797ee3498d5bffeac16415474680216","patch":"@@ -0,0 +1,41 @@\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class OrderedOneManyChild {\r\n+    @Id\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private OrderedOneManyParent parent;\r\n+    \r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public void setId(long id) { \r\n+        this.id = id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public OrderedOneManyParent getParent() { \r\n+        return parent; \r\n+    }\r\n+\r\n+    public void setParent(OrderedOneManyParent parent) { \r\n+        this.parent = parent; \r\n+    }\r\n+    \r\n+}\r"},{"sha":"a4e0b9b28344d49c24661a87894acbb979eb67b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java?ref=f3dd4c039797ee3498d5bffeac16415474680216","patch":"@@ -0,0 +1,41 @@\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OrderBy;\r\n+\r\n+@Entity\r\n+public class OrderedOneManyParent {\r\n+\t@Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToMany(mappedBy=\"parent\")\r\n+    @OrderBy(\"name ASC\")\r\n+    private List<OrderedOneManyChild> children = \r\n+        new ArrayList<OrderedOneManyChild>();\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public List<OrderedOneManyChild> getChildren() { \r\n+        return children; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r\n+\r"},{"sha":"9c4dae375b344d8411268f7d79725af1f4634ac7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/f3dd4c039797ee3498d5bffeac16415474680216/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java?ref=f3dd4c039797ee3498d5bffeac16415474680216","patch":"@@ -0,0 +1,97 @@\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Defined ordering is only applied when the collection is loaded from the datastore.\r\n+ * It is not maintained by Openjpa as you modify the collection in memory. \r\n+ * Openjpa invalid data cache in case the persistence operation may result cache in wrong order.\r\n+ * This test suite tests various cases for the above problem.\r\n+ */\r\n+public class TestOrderbyInDataCache extends SingleEMFTestCase {\r\n+\tprivate long pid;\r\n+    public void setUp() {\r\n+        setUp(\"openjpa.DataCache\", \"true\", \r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", \r\n+            OrderedOneManyParent.class,\r\n+            OrderedOneManyChild.class, CLEAR_TABLES);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        OrderedOneManyParent prt = new OrderedOneManyParent();\r\n+        prt.setName(\"Maria\");\r\n+        em.persist(prt);\r\n+        //insert child in reverse order\r\n+        for (int i = 4; i > 1; i--) {\r\n+        \tOrderedOneManyChild child = new OrderedOneManyChild();\r\n+            child.setId(i);\r\n+            child.setName(\"child\" + i);\r\n+            child.setParent(prt);\r\n+            prt.getChildren().add(child);\r\n+            em.persist(child);\r\n+        }        \r\n+        em.getTransaction().commit();\r\n+        pid = prt.getId();\r\n+        em.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Test if child list is in order after new child list is added in setup().\r\n+     *\r\n+     */\r\n+    public void testGetChildList(){\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \tOrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n+        assertEquals(3, prt.getChildren().size());\r\n+        //the order should be \"child2\", \"child3\", \"child4\"\r\n+        for (int i = 1; i < 4; i++) {\r\n+            assertEquals(\"child\" + (i + 1), prt.getChildren().\r\n+                get(i-1).getName());\r\n+        }   \r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void testInsertChild() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n+        OrderedOneManyChild child = new OrderedOneManyChild();\r\n+        child.setId(1);\r\n+        child.setName(\"child1\");\r\n+        child.setParent(prt);\r\n+        prt.getChildren().add(child);\r\n+        em.persist(child);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        \r\n+        //obtain object in new persistence context\r\n+        em = emf.createEntityManager();\r\n+        prt = em.find(OrderedOneManyParent.class, pid);\r\n+        assertEquals(4, prt.getChildren().size());\r\n+        //the order should be \"child1\", \"child2\", \"child3\", \"child4\"\r\n+        for (int i = 1; i < 5; i++) {\r\n+            assertEquals(\"child\" + i, prt.getChildren().\r\n+                get(i-1).getName());\r\n+        }          \r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void testUpdateChildName() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        OrderedOneManyChild child = em.find(OrderedOneManyChild.class, 4);\r\n+        child.setName(\"child1\");\r\n+        em.persist(child);\r\n+        em.getTransaction().commit();\r\n+        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n+        assertEquals(3, prt.getChildren().size());\r\n+        //the order should be \"child1\", \"child2\", \"child3\"\r\n+        for (int i = 1; i < 4; i++) {\r\n+            assertEquals(\"child\" + i, prt.getChildren().\r\n+                get(i-1).getName());\r\n+        }          \r\n+        em.close();    \t\r\n+    }\r\n+}\r"}]}

