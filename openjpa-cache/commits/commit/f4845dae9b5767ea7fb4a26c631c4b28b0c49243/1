{"sha":"f4845dae9b5767ea7fb4a26c631c4b28b0c49243","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0ODQ1ZGFlOWI1NzY3ZWE3ZmI0YTI2YzYzMWM0YjI4YjBjNDkyNDM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-12T05:10:54Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-12T05:10:54Z"},"message":"OPENJPA-679 java.lang.ArrayIndexOutOfBoundsException may occur when a relation field is annotated as a primary key and a foreign key\nCommit patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@685042 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7745f951964e555ff025ad083a295dffba8bb4d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/7745f951964e555ff025ad083a295dffba8bb4d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f4845dae9b5767ea7fb4a26c631c4b28b0c49243","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f4845dae9b5767ea7fb4a26c631c4b28b0c49243","html_url":"https://github.com/apache/openjpa/commit/f4845dae9b5767ea7fb4a26c631c4b28b0c49243","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/comments","author":null,"committer":null,"parents":[{"sha":"ffb59c35fcd7b8d6adf658bc794bcaff465ced32","url":"https://api.github.com/repos/apache/openjpa/commits/ffb59c35fcd7b8d6adf658bc794bcaff465ced32","html_url":"https://github.com/apache/openjpa/commit/ffb59c35fcd7b8d6adf658bc794bcaff465ced32"}],"stats":{"total":970,"additions":955,"deletions":15},"files":[{"sha":"d8a03355e40c1bcc4aef107ee544fb880a01ef7a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":40,"deletions":15,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -32,12 +30,12 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -91,6 +89,7 @@\n \n     // maps columns to joinables\n     private final Map _joinables = Collections.synchronizedMap(new HashMap());\n+    private boolean redoPrimaryKeyColumns = false;\n \n     /**\n      * Constructor. Supply described type and owning repository.\n@@ -418,17 +417,25 @@ public void setTable(Table table) {\n      * class uses to link to its superclass table.\n      */\n     public Column[] getPrimaryKeyColumns() {\n-        if (_cols.length == 0 && getIdentityType() == ID_APPLICATION\n-            && isMapped()) {\n-            FieldMapping[] pks = getPrimaryKeyFieldMappings();\n-            Collection cols = new ArrayList(pks.length);\n-            Column[] fieldCols;\n-            for (int i = 0; i < pks.length; i++) {\n-                fieldCols = pks[i].getColumns();\n-                for (int j = 0; j < fieldCols.length; j++)\n-                    cols.add(fieldCols[j]);\n+        if (getIdentityType() == ID_APPLICATION && isMapped()) {\n+            if (_cols.length == 0 || redoPrimaryKeyColumns) {            \n+                FieldMapping[] pks = getPrimaryKeyFieldMappings();\n+                Collection cols = new ArrayList(pks.length);\n+                Column[] fieldCols;\n+                for (int i = 0; i < pks.length; i++) {\n+                    fieldCols = pks[i].getColumns();\n+                    if (fieldCols.length == 0) {\n+                        // some pk columns depends on fk. At this moment, \n+                        // the fk may not contain complete information.\n+                        // need to redo the primary key again later on\n+                        redoPrimaryKeyColumns = true;\n+                        continue;\n+                    }\n+                    for (int j = 0; j < fieldCols.length; j++)\n+                        cols.add(fieldCols[j]);\n+                }\n+                _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n             }\n-            _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n         }\n         return _cols;\n     }\n@@ -826,9 +833,27 @@ protected void resolveMapping(boolean runtime) {\n         // recursion, then resolve all fields\n         resolveNonRelationMappings();\n         FieldMapping[] fms = getFieldMappings();\n-        for (int i = 0; i < fms.length; i++)\n-            if (fms[i].getDefiningMetaData() == this)\n+        for (int i = 0; i < fms.length; i++) {\n+            if (fms[i].getDefiningMetaData() == this) {\n+                if (fms[i].getForeignKey() != null &&\n+                    fms[i].getStrategy() instanceof RelationFieldStrategy) {\n+                    // set resolve mode to force this field mapping to be \n+                    // resolved again. The need to resolve again occurs when \n+                    // a primary key is a relation field with the foreign key\n+                    // annotation. In this situation, this primary key field\n+                    // mapping is resolved during the call to \n+                    // resolveNonRelationMapping. Since it is a relation\n+                    // field, the foreign key will be constructed. However, \n+                    // the primary key of the parent entity may not have been \n+                    // resolved yet, resulting in missing informaiton in the fk\n+                    fms[i].setResolve(MODE_META); \n+\n+                    // set strategy to null to force fk to be re-constructed\n+                    fms[i].setStrategy(null, false); \n+                }                \n                 fms[i].resolve(MODE_MAPPING);\n+            }\n+        }\n         fms = getDeclaredUnmanagedFieldMappings();\n         for (int i = 0; i < fms.length; i++)\n             fms[i].resolve(MODE_MAPPING);"},{"sha":"6f785cd647c178698b94acde6a172b39b222d248","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@IdClass(C.CId.class)\n+@Table(name=\"C4\")\n+public class C {\n+\t\n+\t@Id\n+\tprivate String cId;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+    private CM cm;\n+\n+\t@OneToMany(mappedBy=\"c\")\n+\tprivate Set<D> ds = new HashSet<D>();\n+\n+    public C() {\n+    }\n+    \n+    public String getCId() {\n+        return cId;\n+    }\n+\n+    public void setCId(String cId) {\n+        this.cId = cId;\n+    }\n+\n+    public CM getCm() {\n+\t\treturn cm;\n+\t}\n+\n+\tpublic void setCm(CM cm) {\n+\t\tthis.cm = cm;\n+\t}\n+\n+\tpublic Set<D> getDs() {\n+\t\treturn ds;\n+\t}\n+\n+\tpublic void setDs(Set<D> ds) {\n+\t\tthis.ds = ds;\n+\t}\n+    \n+    public static class CId{\n+    \tString cId;\n+    \tCM.CMId  cm;\n+    \t\n+\t\tpublic String getCId() {\n+\t\t\treturn cId;\n+\t\t}\n+\t\tpublic void setCId(String id) {\n+\t\t\tcId = id;\n+\t\t}\n+    \t\n+\t\t\n+\t\tpublic CM.CMId getCm() {\n+\t\t\treturn cm;\n+\t\t}\n+\t\tpublic void setCm(CM.CMId cm) {\n+\t\t\tthis.cm = cm;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj) return true;\n+\t\t\tif (obj == null || !(obj instanceof CId))\n+\t\t\t\treturn false;\n+\t\t\t\n+\t\t\tCId id = (CId) obj;\n+\t\t\t\n+\t\t\treturn (this.getCId() == id.getCId() || (this.getCId() != null &&\n+                this.getCId().equals(id.getCId())))\n+\t\t\t\t&& (this.getCm() == id.getCm() || (this.getCm() != null &&\n+                this.getCm().equals(id.getCm())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn ((this.getCId() != null) ? this.getCId().hashCode():0)\n+\t\t\t\t ^ ((this.getCm() != null)? this.getCm().hashCode():0);\n+\t\t}\n+    }\n+}"},{"sha":"7af46e7c0c0ac6ef8e3d6842817f4cab13a60802","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@IdClass(CM.CMId.class)\n+@Table(name=\"CM4\")\n+public class CM {\n+\t\n+\t@Id\n+    private String cmId;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"cm\")\n+    private Set<C> cs = new HashSet<C>();\n+\n+    @ManyToOne\n+    @ForeignKey\n+    @Id\n+    private E e;\n+    \n+    public CM() {\n+    }\n+\n+    public String getCmId() {\n+        return cmId;\n+    }\n+\n+    public void setCmId(String cmId) {\n+        this.cmId = cmId;\n+    }\n+\n+\tpublic Set<C> getCs() {\n+\t\treturn cs;\n+\t}\n+\n+\tpublic void setCs(Set<C> cs) {\n+\t\tthis.cs = cs;\n+\t}\n+\t\n+\tpublic void addC(C c){\n+\t\tcs.add(c);\n+\t\tc.setCm(this);\n+\t}\n+\n+\tpublic E getE() {\n+\t\treturn e;\n+\t}\n+\n+\tpublic void setE(E e) {\n+\t\tthis.e = e;\n+\t}\n+\n+\tpublic static class CMId{\n+\t\tprivate String cmId;\n+\t\tprivate String e;\n+\t\t\n+\t\tpublic String getCmId() {\n+\t\t\treturn cmId;\n+\t\t}\n+\t\tpublic void setCmId(String id) {\n+\t\t\tcmId = id;\n+\t\t}\n+\t\t\n+\t\tpublic String getE() {\n+\t\t\treturn e;\n+\t\t}\n+\t\tpublic void setE(String e) {\n+\t\t\tthis.e = e;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\t\t\t\n+\t\t\tif (obj == null && ! (obj instanceof CMId))\n+\t\t\t\treturn false;\n+\t\t\tCMId id = (CMId) obj;\n+\t\t\treturn ( this.getCmId() == id.getCmId() ||\n+                (this.getCmId() != null && this.getCmId().equals(id.getCmId())))\n+\t\t\t\t&& ( this.getE() == id.getE() || (this.getE() != null &&\n+                this.getE().equals(id.getE())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getCmId() != null? this.getCmId().hashCode():0) \n+\t\t\t\t ^ (this.getE()!= null ? this.getE().hashCode():0);\n+\t\t}\n+\t}\n+\n+}"},{"sha":"6c6129b6a2d434c12e6607d8dd546eb2b0fa985f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+\n+@Entity\n+@Table(name=\"D4\")\n+@IdClass(D.CId.class)\n+public class D {\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\tprivate C c;\n+\n+\t@Id\n+\tprivate String id;\n+\t\n+\tprivate String a;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate VC vc;\n+\n+\tpublic D() {\n+\t}\n+\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n+\tpublic String getA() {\n+\t\treturn a;\n+\t}\n+\n+\tpublic void setA(String a) {\n+\t\tthis.a = a;\n+\t}\n+\n+\tpublic C getC() {\n+\t\treturn c;\n+\t}\n+\n+\tpublic void setC(C c) {\n+\t\tthis.c = c;\n+\t}\n+\n+\tpublic VC getVc() {\n+\t\treturn vc;\n+\t}\n+\n+\tpublic void setVc(VC vc) {\n+\t\tthis.vc = vc;\n+\t}\n+\t\n+\t\n+\tpublic static class CId{\n+\t\tprivate String id;\n+\t\t\n+\t\tprivate VC.VCId vc;\n+\t\t\n+\t\tpublic VC.VCId getVc() {\n+\t\t\treturn vc;\n+\t\t}\n+\t\tpublic void setVc(VC.VCId vc) {\n+\t\t\tthis.vc = vc;\n+\t\t}\n+\t\t\n+\t\tpublic String getId() {\n+\t\t\treturn id;\n+\t\t}\n+\t\tpublic void setId(String id) {\n+\t\t\tthis.id = id;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null ||  ! (obj instanceof CId))\n+\t\t\t\treturn false;\n+\t\t\tCId id = (CId) obj;\n+\t\t\treturn (this.getId() == id.getId() || (this.getId() != null &&\n+                this.getId().equals(id.getId())))\n+\t\t\t\t&& (this.getVc() == id.getVc() || (this.getVc() != null &&\n+                this.getVc().equals(id.getVc())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getId() != null ? this.getId().hashCode():0)\n+\t\t\t     ^ (this.getVc() != null ? this.getVc().hashCode():0);\n+\t\t}\n+\t\t\t\t\n+\t}\n+\n+}"},{"sha":"2e0bb1fd2194b602d829b11e1810e24c31f92f9e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"E4\")\n+public class E {\n+\n+\t@Id\n+\tprivate String eId;\n+\n+\tprivate String name;\n+\n+\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"e\")\n+\tprivate Set<VCS> vcss = new HashSet<VCS>();\n+\n+\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"e\")\n+\tprivate Set<CM> cms = new HashSet<CM>();\n+\n+\tpublic E() {\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Set<CM> getCms() {\n+\t\treturn cms;\n+\t}\n+\n+\tpublic void setCms(Set<CM> cms) {\n+\t\tthis.cms = cms;\n+\t}\n+\n+\tpublic String getEId() {\n+\t\treturn eId;\n+\t}\n+\n+\tpublic void setEId(String id) {\n+\t\teId = id;\n+\t}\n+\n+\tpublic Set<VCS> getVcss() {\n+\t\treturn vcss;\n+\t}\n+\n+\tpublic void setVcss(Set<VCS> vcss) {\n+\t\tthis.vcss = vcss;\n+\t}\n+}"},{"sha":"7d9babe02dad45027c411dbfa729e70deddde082","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+public class TestRelationFieldAsPrimaryKeyAndForeignKey \n+    extends SingleEMFTestCase {\n+\n+\tpublic void setUp() {\n+\t    setUp(C.class, CM.class, D.class, E.class, VC.class, VCS.class);\n+\t    \n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            List<E> es = (List<E>) em.createQuery(\n+            \"Select e from E e\").getResultList();\n+            for (E e : es) \n+                em.remove(e);\n+\n+            em.getTransaction().commit();\n+            em.close();\n+        } catch (Exception e) {\n+            \n+        }\n+\t    \n+\t    em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\n+\t    E e = new E();\n+\t    e.setEId(\"E1\");\n+\t    e.setName(\"E1\");\n+\n+\t    VC vc = new VC();\n+\t    vc.setVcId(\"VC1\");\n+\n+\t    VCS vcset = new VCS();\n+\t    vcset.setVcsId(\"VCS1\");\n+\t    vcset.setName(\"VCSET1\");\n+\t    vcset.addVC(vc);\n+\t    vcset.setE(e);\n+\n+\t    C c = new C();\n+\t    c.setCId(\"C1\");\n+\n+\t    CM cm = new CM();\n+\t    cm.setCmId(\"CM1\");\n+\t    cm.setE(e);\n+\t    cm.addC(c);\n+\n+\t    D d = new D();\n+\t    d.setA(\"addr\");\n+\t    d.setVc(vc);\n+\t    d.setId(\"IM1\");\n+\n+\t    em.persist(e);\n+\t    em.persist(vc);\n+\t    em.persist(vcset);\n+\t    em.persist(c);\n+\t    em.persist(cm);\n+\t    em.persist(d);\n+\n+\t    em.getTransaction().commit();\n+\t    em.close();\n+\t}\n+\n+\tpublic void testUnboundEntities() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    VCS vcSet = new VCS();\n+\t    vcSet.setVcsId(\"VCSET2\");\n+\t    vcSet.setName(\"VCSET2\");\n+\t    try {\n+\t        em.persist(vcSet);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    VC vc = new VC();\n+\t    vc.setVcId(\"VC2\");\n+\t    try {\n+\t        em.persist(vc);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    CM cm = new CM();\n+\t    cm.setCmId(\"CMID2\");\n+\t    try {\n+\t        em.persist(cm);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    C c = new C();\n+\t    c.setCId(\"CID2\");\n+\t    try {\n+\t        em.persist(c);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.close();\n+\t}\n+\n+\tpublic void testQuery() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e where e.name='E1'\").getResultList();\n+\t    Assert.assertEquals(1, es.size());\n+\t    E e = (E) es.get(0);\n+\t    Assert.assertEquals(\"E1\", e.getName());\n+\t    Assert.assertEquals(1, e.getVcss().size());\n+\t    Assert.assertEquals(1, e.getCms().size());\n+\t    Assert.assertEquals(1, e.getVcss().size());\n+\n+\t    // Get virtual container set and check that it has a reference to the\n+\t    // ensemble\n+\t    List<VCS> vcss = (List<VCS>) em.createQuery(\n+\t        \"Select vcset from VCS vcset where vcset.vcsId='VCS1'\")\n+\t        .getResultList();\n+\t    Assert.assertEquals(1, vcss.size());\n+\t    Assert.assertEquals(e, ((VCS) vcss.get(0)).getE());\n+\t    em.close();\n+\t}\n+\n+\tpublic void testDeletes() {\n+\t    // Remove VC set and check that all VCs belonging to that set are\n+\t    // deleted but not the ensemble itself\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    VCS vcset = (VCS) em.createQuery(\n+\t        \"Select vcset from VCS vcset where vcset.vcsId='VCS1'\")\n+\t        .getSingleResult();\n+\t    em.remove(vcset);\n+\t    em.getTransaction().commit();\n+\n+\t    // Get virtualContainer\n+\t    List<VC> vcs = (List<VC>) em.createQuery(\n+\t        \"Select vc from VC vc where vc.vcId='VC1'\")\n+\t        .getResultList();\n+\t    Assert.assertEquals(0, vcs.size());\n+\n+\t    // Make sure E and I are still there\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e\").getResultList();\n+\t    Assert.assertEquals(1, es.size());\n+\t}\n+\n+\tpublic void tearDown() throws Exception {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e\").getResultList();\n+\t    for (E e : es) {\n+\t        em.remove(e);\n+\t    }\n+\n+\t    em.getTransaction().commit();\n+\t    em.close();\n+\t}\n+}"},{"sha":"178314050e033e08280e7c0a82a79db9be9b6509","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.relations.VCS.VCSId;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name=\"VC4\")\n+@IdClass(VC.VCId.class)\n+\n+public class VC {\n+\n+\t@Id\n+\tprivate String vcId;\n+\n+\t// @ManyToOne\n+\t// @ForeignKey\n+\t// private I i;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate VCS vcs;\n+\n+\t@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"vc\")\n+\tprivate Set<D> ds = new HashSet<D>();\n+\n+\tpublic VC() {\n+\t}\n+\n+\tpublic String getVcId() {\n+\t\treturn vcId;\n+\t}\n+\n+\tpublic void setVcId(String vcId) {\n+\t\tthis.vcId = vcId;\n+\t}\n+\n+\tpublic Set<D> getDs() {\n+\t\treturn ds;\n+\t}\n+\n+\tpublic void setDs(Set<D> ds) {\n+\t\tthis.ds = ds;\n+\t}\n+\n+\tpublic VCS getVcs() {\n+\t\treturn vcs;\n+\t}\n+\n+\tpublic void setVcs(VCS vcs) {\n+\t\tthis.vcs = vcs;\n+\t}\n+\n+\tpublic static class VCId {\n+\t\tprivate String vcId;\n+\n+\t\tprivate VCSId vcs;\n+\n+\t\tpublic String getVcId() {\n+\t\t\treturn vcId;\n+\t\t}\n+\n+\t\tpublic void setVcId(String vcId) {\n+\t\t\tthis.vcId = vcId;\n+\t\t}\n+\n+\t\tpublic VCSId getVcs() {\n+\t\t\treturn vcs;\n+\t\t}\n+\n+\t\tpublic void setVcs(VCSId vcs) {\n+\t\t\tthis.vcs = vcs;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null || !(obj instanceof VCId))\n+\t\t\t\treturn false;\n+\t\t\tVCId id = (VCId) obj;\n+\t\t\treturn (this.getVcId() == id.getVcId() ||\n+                (this.getVcId() == null &&\n+                this.getVcId().equals(id.getVcId()))) && \n+\t\t\t    (this.getVcs() == id.getVcs() ||\n+                (this.getVcs() == null && this\n+\t\t\t\t.getVcs().equals(id.getVcs())));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getVcId() != null ? this.getVcId().hashCode() : 0)\n+\t\t\t\t\t^ (this.getVcs() != null ? this.getVcs().hashCode() : 0);\n+\t\t}\n+\t}\n+}"},{"sha":"443ebc48ecc6ffb777ad02c899a100c9ef77da34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/apache/openjpa/blob/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","raw_url":"https://github.com/apache/openjpa/raw/f4845dae9b5767ea7fb4a26c631c4b28b0c49243/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java?ref=f4845dae9b5767ea7fb4a26c631c4b28b0c49243","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name=\"VCS4\")\n+@IdClass(VCS.VCSId.class)\n+public class VCS {\n+\n+\t@Id\n+\tprivate String vcsId;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate E e;\n+\t\n+\t@Basic\n+\tprivate String name;\n+\n+\t@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy = \"vcs\")\n+\tprivate Set<VC> vcs = new HashSet<VC>();\n+\n+\tpublic VCS() {\n+\t}\n+\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\n+\tpublic String getVcsId() {\n+\t\treturn vcsId;\n+\t}\n+\n+\n+\tpublic void setVcsId(String vcsId) {\n+\t\tthis.vcsId = vcsId;\n+\t}\n+\n+\n+\tpublic E getE() {\n+\t\treturn e;\n+\t}\n+\n+\n+\tpublic void setE(E e) {\n+\t\tthis.e = e;\n+\t}\n+\n+\n+\tpublic Set<VC> getVcs() {\n+\t\treturn vcs;\n+\t}\n+\n+\n+\tpublic void setVcs(Set<VC> vcs) {\n+\t\tthis.vcs = vcs;\n+\t}\n+\t\n+\tpublic void addVC(VC vc){\n+\t\tvcs.add(vc);\n+\t\tvc.setVcs(this);\n+\t}\n+\tpublic static class VCSId{\n+\t\tprivate String vcsId;\n+\t\tprivate String e;\n+\t\n+\t\t\n+\t\tpublic String getE() {\n+\t\t\treturn e;\n+\t\t}\n+\n+\t\tpublic void setE(String e) {\n+\t\t\tthis.e = e;\n+\t\t}\n+\n+\t\tpublic String getVcsId() {\n+\t\t\treturn vcsId;\n+\t\t}\n+\n+\t\tpublic void setVcsId(String vcsId) {\n+\t\t\tthis.vcsId = vcsId;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null ||  ! (obj instanceof VCSId))\n+\t\t\t\treturn false;\n+\t\t\tVCSId id = (VCSId) obj;\n+\t\t\treturn (this.getVcsId() == id.getVcsId() || \n+                (this.getVcsId() != null && \n+                this.getVcsId().equals(id.getVcsId())))\n+\t\t\t\t&& (this.getE() == id.getE() || (this.getE() != null\n+                && this.getE().equals(id.getE())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getVcsId() != null ?this.getVcsId().hashCode():0)\n+\t\t\t\t^ (this.getE() != null ? this.getE().hashCode():0);\n+\t\t}\n+\t}\n+\n+}"}]}

