{"sha":"f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0ZDA5NjZkZTVjZWI4ZTJiNDcwYzk3ZGM0NDcwNjZkYzBlYTVkZTI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-20T20:14:19Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-01-20T20:14:19Z"},"message":"OPENJPA-1115 Enabled delimited id test on MySQL and fix identifier conversion related bugs. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901362 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cee2bcdb78b92d92d900ddc7a90cb018d480b2f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/cee2bcdb78b92d92d900ddc7a90cb018d480b2f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","html_url":"https://github.com/apache/openjpa/commit/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/comments","author":null,"committer":null,"parents":[{"sha":"4adf1c68a79be63b68975a9b737688653cc059dd","url":"https://api.github.com/repos/apache/openjpa/commits/4adf1c68a79be63b68975a9b737688653cc059dd","html_url":"https://github.com/apache/openjpa/commit/4adf1c68a79be63b68975a9b737688653cc059dd"}],"stats":{"total":158,"additions":105,"deletions":53},"files":[{"sha":"ba292dca488bddd414e5b5b24e54688e252044b6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifierUtilImpl.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -440,7 +440,9 @@ private DBIdentifier makeName(String rule, DBIdentifier name, Table tbl, String\n         String tableName = tbl.getIdentifier().getName();\n         int len = Math.min(tableName.length(), 7);\n         \n-        String str = combineNames(rule, new String[] { prefix == null ? \"\" : prefix, \n+        // Combine the names using the normalized configuration.  \n+        String str = combineNames(Normalizer.getNamingConfiguration(), rule, \n+            new String[] { prefix == null ? \"\" : prefix, \n             shorten(tableName, len), sName.getName() });\n         sName.setName(str);\n         return sName;"},{"sha":"d1422671cb60866edfc40806ba4ec85b7e205aac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -5227,7 +5227,9 @@ public boolean getSupportsDelimitedIdentifiers() {\n     public void setSupportsDelimitedIdentifiers(DatabaseMetaData metaData) {\n         try {\n             supportsDelimitedIdentifiers = \n-                metaData.supportsMixedCaseQuotedIdentifiers();\n+                metaData.supportsMixedCaseQuotedIdentifiers() ||\n+                metaData.storesLowerCaseQuotedIdentifiers() ||\n+                metaData.storesUpperCaseQuotedIdentifiers();\n         } catch (SQLException e) {\n             supportsDelimitedIdentifiers = false;\n             getLog().warn(_loc.get(\"unknown-delim-support\", e));"},{"sha":"eded0d1dc0ea0da8eb0f33719b2a7a4c7449204f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -94,6 +94,13 @@\n      */\n     public String removeDelimiters(String rule, String name);\n \n+    /**\n+     * Remove delimiters from a delimited name \n+     * @param the rule to use for removing delimiters\n+     * @param name the name from which to remove delimiters\n+     */\n+    public String removeDelimiters(IdentifierConfiguration config, String rule, String name);\n+\n     /**\n      * Remove delimiters from a delimited name \n      * @param the rule to use for removing delimiters"},{"sha":"f2b4764c96ed94a93ba2d77a64d277a2b6f06c82","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtilImpl.java","status":"modified","additions":80,"deletions":35,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtilImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtilImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtilImpl.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -52,62 +52,80 @@ public IdentifierConfiguration getIdentifierConfiguration() {\n         return _config;\n     }    \n \n-    public String combineNames(IdentifierRule rule, IdentifierRule[] rules, String[] names) {\n+    public String combineNames(String rule, String name1, String name2) {\n+        return combineNames(getNamingRule(rule), name1, name2);\n+    }\n+\n+    public String combineNames(String rule, String[] names) {\n+        return combineNames(getNamingRule(rule), names);\n+    }\n+\n+    public String combineNames(IdentifierConfiguration config, String rule, String[] names) {\n+        return combineNames(config, getNamingRule(rule), names);\n+    }\n+\n+    public String combineNames(IdentifierRule rule, \n+        IdentifierRule[] rules, String[] names) {\n+        return combineNames(_config, rule, rules, names);\n+    }\n+\n+    public String combineNames(IdentifierConfiguration config, IdentifierRule rule, \n+        IdentifierRule[] rules, String[] names) {\n         boolean delimited = false;\n         String combined = null;\n         for (int i = 0; i < names.length; i++) {\n             String name = names[i];\n             if (isDelimited(rules[i], name)) {\n                 delimited = true;\n-                name = removeDelimiters(rules[i], name);\n+                name = removeDelimiters(config, rules[i], name);\n             }\n             if (i == 0) {\n                 combined = name;\n             }\n             else {\n-                combined = combined + _config.getIdentifierConcatenator() + name;\n+                combined = combined + config.getIdentifierConcatenator() + name;\n             }\n         }\n         \n         if (delimited) {\n-            combined = delimit(rule, combined.toString()).toString();\n+            combined = delimit(config, rule, combined.toString()).toString();\n         }\n         \n         return combined;\n     }\n     \n-    public String combineNames(IdentifierRule rule, String name1, String name2) {\n+    public String combineNames(IdentifierConfiguration config, IdentifierRule rule, String name1, String name2) {\n         boolean delimit = false;\n         if (isDelimited(rule, name1)) {\n-            name1 = removeDelimiters(rule, name1);\n+            name1 = removeDelimiters(config, rule, name1);\n             delimit = true;\n         }\n         if (isDelimited(rule, name2)) {\n-            name2 = removeDelimiters(rule, name2);\n+            name2 = removeDelimiters(config, rule, name2);\n             delimit = true;\n         }\n-        String name = name1 + _config.getIdentifierConcatenator() + name2;\n-        return delimit(rule, name, delimit).toString();\n+        String name = name1 + config.getIdentifierConcatenator() + name2;\n+        return delimit(config, rule, name, delimit).toString();\n     }\n \n-    public String combineNames(IdentifierRule namingRule, String[] names) {\n+    public String combineNames(IdentifierConfiguration config, IdentifierRule namingRule, String[] names) {\n         boolean delimited = false;\n         String combined = null;\n         for (int i = 0; i < names.length; i++) {\n             String name = names[i];\n-            if (isDelimited(namingRule, name)) {\n+            if (isDelimited(config, namingRule, name)) {\n                 delimited = true;\n-                name = removeDelimiters(namingRule, name);\n+                name = removeDelimiters(config, namingRule, name);\n             }\n             if (i == 0) {\n                 combined = name;\n             }\n             else {\n-                combined = combined + _config.getIdentifierConcatenator() + name;\n+                combined = combined + config.getIdentifierConcatenator() + name;\n             }\n         }\n         if (delimited) {\n-            combined = delimit(namingRule, combined.toString()).toString();\n+            combined = delimit(config, namingRule, combined.toString()).toString();\n         }\n         \n         return combined;\n@@ -188,10 +206,14 @@ public String joinNames(IdentifierConfiguration config, IdentifierRule rule, Str\n         return combinedName.toString();\n     }\n \n+    public String[] splitName(IdentifierConfiguration config, IdentifierRule nrule, String name) {\n+        return splitName(nrule, name, config.getIdentifierDelimiter());\n+    }\n+\n     public String[] splitName(IdentifierRule nrule, String name) {\n         return splitName(nrule, name, _config.getIdentifierDelimiter());\n     }\n-    \n+\n     \n     /**\n      * Splits names using single naming rule and appropriate separators\n@@ -272,6 +294,10 @@ public static boolean isDoubleQuoted(String name) {\n                name.endsWith(DOUBLE_QUOTE);\n     }\n \n+    public String delimit(IdentifierConfiguration config, IdentifierRule rule, String name) {\n+        return delimit(config, rule, name, false);\n+    }\n+\n     \n     public String delimit(IdentifierRule rule, String name) {\n         return delimit(_config, rule, name, false);\n@@ -304,8 +330,19 @@ public boolean isDelimited(IdentifierConfiguration config, IdentifierRule rule,\n             name.endsWith(config.getTrailingDelimiter());\n     }\n \n+    public String removeDelimiters(IdentifierConfiguration config, String rule,\n+        String name) {\n+        return removeDelimiters(_config, getNamingRule(rule), name, _config.getLeadingDelimiter(),\n+            _config.getTrailingDelimiter());\n+    }\n+\n     public String removeDelimiters(IdentifierRule rule, String name) {\n-        return removeDelimiters(rule, name, _config.getLeadingDelimiter(),\n+        return removeDelimiters(_config, rule, name, _config.getLeadingDelimiter(),\n+            _config.getTrailingDelimiter());\n+    }\n+\n+    public String removeDelimiters(IdentifierConfiguration config, IdentifierRule rule, String name) {\n+        return removeDelimiters(config, rule, name, _config.getLeadingDelimiter(),\n             _config.getTrailingDelimiter());\n     }\n \n@@ -345,12 +382,12 @@ public boolean isReservedWord(String rule, String name) {\n     }\n     \n \n-    protected String removeDelimiters(IdentifierRule rule, String name, String leading,\n+    protected String removeDelimiters(IdentifierConfiguration config, IdentifierRule rule, String name, String leading,\n         String trailing) {\n         if (name == null) {\n             return null;\n         }\n-        if (isDelimited(rule, name)) {\n+        if (isDelimited(config, rule, name)) {\n             String id = name.substring(leading.length(),\n                 (name.length() - trailing.length()));\n             return id;\n@@ -402,8 +439,12 @@ public boolean requiresDelimiters(String rule, String name) {\n         return requiresDelimiters(getNamingRule(rule), name);\n     }\n \n+    public String[] splitName(IdentifierConfiguration config, String rule, String name) {\n+        return splitName(config, getNamingRule(rule), name);\n+    }\n+\n     public String[] splitName(String rule, String name) {\n-        return splitName(getNamingRule(rule), name);\n+        return splitName(_config, getNamingRule(rule), name);\n     }\n \n     public String joinNames(String[] rules, String[] names) {\n@@ -414,14 +455,6 @@ private IdentifierRule getNamingRule(String rule) {\n         return _config.getIdentifierRule(rule);\n     }\n     \n-    public String combineNames(String rule, String name1, String name2) {\n-        return combineNames(getNamingRule(rule), name1, name2);\n-    }\n-\n-    public String combineNames(String rule, String[] names) {\n-        return combineNames(getNamingRule(rule), names);\n-    }\n-    \n     public String appendNames(String rule, String name1, String name2) {\n         return appendNames(getNamingRule(rule), name1, name2);\n     }\n@@ -456,7 +489,7 @@ public String removeHungarianNotation(String rule, String name) {\n     public String[] splitName(String nrule, String name, String nameDelim) {\n         return splitName(getNamingRule(nrule), name, nameDelim);\n     }\n-        \n+\n     public String convert(IdentifierConfiguration config, String rule, String name) {\n         // Already using same delimiter, no need to convert\n         if (!needsConversion(config)) {\n@@ -465,11 +498,11 @@ public String convert(IdentifierConfiguration config, String rule, String name)\n         // Otherwise, remove delimiters and add appropriate delimiters\n         IdentifierRule orule = getIdentifierConfiguration().getIdentifierRule(rule);\n         IdentifierRule nrule = config.getIdentifierRule(rule);\n-        boolean delimit = isDelimited(orule, name);\n+        boolean delimit = isDelimited(config, orule, name);\n         if (delimit) {\n-            name = removeDelimiters(orule, name, config.getLeadingDelimiter(), \n+            name = removeDelimiters(config, orule, name, config.getLeadingDelimiter(), \n                 config.getTrailingDelimiter());\n-            return delimit(config, nrule, name, delimit).toString();\n+            return delimit(getIdentifierConfiguration(), nrule, name, delimit).toString();\n         }\n         return name;\n     }\n@@ -479,21 +512,26 @@ public String convertFull(IdentifierConfiguration config, String rule, String fu\n             return fullName;\n         }\n         // Split\n-        String[] names = splitName(rule, fullName);\n+        String[] names = splitName(config, rule, fullName);\n         // Convert\n         for (int i = 0; i < names.length; i++) {\n             names[i] = convert(config, rule, names[i]);\n         }\n-        // Join\n-        return joinNames(config, config.getIdentifierRule(rule), names, config.getIdentifierDelimiter());\n+        // If a single part name, return it.\n+        if (names.length == 1) {\n+            return names[0];\n+        }\n+        // Join if multiple names\n+        return joinNames(getIdentifierConfiguration(), config.getIdentifierRule(rule), names, \n+            getIdentifierConfiguration().getIdentifierDelimiter());\n     }    \n \n     public String combineFull(IdentifierConfiguration config, String rule, String fullName) {\n         if (!needsConversion(config)) {\n             return fullName;\n         }\n         // Split\n-        String[] names = splitName(rule, fullName);\n+        String[] names = splitName(config, rule, fullName);\n         // Convert\n         for (int i = 0; i < names.length; i++) {\n             names[i] = convert(config, rule, names[i]);\n@@ -543,4 +581,11 @@ public boolean canSplit(IdentifierRule rule, String name, String delim) {\n         return name.contains(delim);\n     }\n \n+    public String combineNames(IdentifierRule rule, String[] names) {\n+        return combineNames(_config, rule, names);\n+    }\n+\n+    public String combineNames(IdentifierRule rule, String name1, String name2) {\n+        return combineNames(_config, rule, name1, name2);\n+    }\n }"},{"sha":"9684e4d17c5ed393ad1bfca171372b34ea14d349","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/identifier/TestIdentifiers.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-lib/src/test/java/org/apache/openjpa/lib/identifier/TestIdentifiers.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-lib/src/test/java/org/apache/openjpa/lib/identifier/TestIdentifiers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/identifier/TestIdentifiers.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -34,9 +34,9 @@ public void testIdentifierConversion() {\n         IdentifierUtil nu = new IdentifierUtilImpl(defConfig);\n         \n         // Test basic name conversion with single name converter\n-        String n0 = \"`TABLE`\";\n+        String n0 = \"\\\"TABLE\\\"\";\n         String cn0 = nu.convert(newConfig, \"DEFAULT\", n0);\n-        assertEquals(\"\\\"TABLE\\\"\", cn0);\n+        assertEquals(\"`TABLE`\", cn0);\n         \n         // Test basic name conversion with single name converter - no \n         // conversion\n@@ -45,13 +45,13 @@ public void testIdentifierConversion() {\n         assertEquals(\"TABLE\", cn1);\n \n         // Test basic name separator conversion with compound name converter\n-        String n2 = \"TABLE:SCHEMA\";\n+        String n2 = \"TABLE.SCHEMA\";\n         String cn2 = nu.convertFull(newConfig, \"DEFAULT\", n2);\n-        assertEquals(\"TABLE.SCHEMA\", cn2);\n+        assertEquals(\"TABLE:SCHEMA\", cn2);\n \n-        String n3 = \"`TABLE`:`SCHEMA`\";\n+        String n3 = \"\\\"TABLE\\\".\\\"SCHEMA\\\"\";\n         String cn3 = nu.convertFull(newConfig, \"DEFAULT\", n3);\n-        assertEquals(\"\\\"TABLE\\\".\\\"SCHEMA\\\"\", cn3);\n+        assertEquals(\"`TABLE`:`SCHEMA`\", cn3);\n     }\n     \n     "},{"sha":"310868f9b0c5f974399554a3aba76af824f51681","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -31,11 +31,11 @@\n public class EntityE {\n     @Id\n     @SequenceGenerator(name=\"entityE_seq_gen_name\", \n-        sequenceName=\"\\\"entityE_seq_gen\\\"\")\n+        sequenceName=\"\\\"entityE seq gen\\\"\")\n     @GeneratedValue(strategy=GenerationType.SEQUENCE, \n         generator=\"entityE_seq_gen_name\")\n     private int id;\n-    @Column(name=\"nse_name\")\n+    @Column(name=\"nse name\")\n     private String name;\n     \n     public EntityE(String name) {"},{"sha":"129df36b9f1d96ca053e847d13bafcb3af9f345f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -42,11 +42,11 @@\n         @UniqueConstraint(columnNames={\"\\\"nsf name\\\"\", \"nsf_nonDelimName\"}))\n @SecondaryTable(name=\"\\\"nssecondary entityF\\\"\",\n     uniqueConstraints=\n-        @UniqueConstraint(name=\"\\\"nssec_unq\\\"\", \n+        @UniqueConstraint(name=\"\\\"nssec unq\\\"\", \n             columnNames={\"\\\"nssecondary name\\\"\"}))         \n public class EntityF {\n-    @TableGenerator(name = \"f_id_gen\", table = \"\\\"nsf_id_gen\\\"\", \n-        pkColumnName = \"\\\"nsgen_pk\\\"\", valueColumnName = \"\\\"nsgen_value\\\"\")\n+    @TableGenerator(name = \"f_id_gen\", table = \"\\\"nsf id gen\\\"\", \n+        pkColumnName = \"\\\"nsgen pk\\\"\", valueColumnName = \"\\\"nsgen value\\\"\")\n     @GeneratedValue(strategy = GenerationType.TABLE, generator = \"f_id_gen\")\n     @Id\n     private int id;\n@@ -65,7 +65,7 @@\n     private Set<String> nscs = new HashSet<String>();\n     \n     @ElementCollection\n-    @CollectionTable(name=\"\\\"nscDelSet\\\"\")\n+    @CollectionTable(name=\"\\\"nsc DelSet\\\"\")\n     private Set<String> nscds = new HashSet<String>();\n     \n     @ElementCollection"},{"sha":"9d6987f61f1b9022f6dc8834a1b465999d21d237","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","raw_url":"https://github.com/apache/openjpa/raw/f4d0966de5ceb8e2b470c97dc447066dc0ea5de2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java?ref=f4d0966de5ceb8e2b470c97dc447066dc0ea5de2","patch":"@@ -39,10 +39,6 @@\n     @Override\n     public void setUp() throws Exception {\n \n-        setUnsupportedDatabases(MySQLDictionary.class);\n-        if (isTestsDisabled())\n-            return;\n-\n         super.setUp(\n             org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityF.class,\n             DROP_TABLES);"}]}

