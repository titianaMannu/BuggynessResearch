{"sha":"f506835fa810c177c8c93a7d0ef24d05570b21fe","node_id":"MDY6Q29tbWl0MjA2MzY0OmY1MDY4MzVmYTgxMGMxNzdjOGM5M2E3ZDBlZjI0ZDA1NTcwYjIxZmU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-03-28T20:52:08Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-03-28T20:52:08Z"},"message":"OPENJPA-2163 Change LifecycleEventManager PluginValue's singleton default value from true to false. Add SingletonLifecycleEventManager property allow previous property to switch singleton value back to true. Since LifecycleEventManager is a internal property for BeanValidation support, the SingletonLifecycleEventManager property will be kept as internal property as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1306592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4689ad8df3038ed0d9bea5d604f94335eb69a60c","url":"https://api.github.com/repos/apache/openjpa/git/trees/4689ad8df3038ed0d9bea5d604f94335eb69a60c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f506835fa810c177c8c93a7d0ef24d05570b21fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f506835fa810c177c8c93a7d0ef24d05570b21fe","html_url":"https://github.com/apache/openjpa/commit/f506835fa810c177c8c93a7d0ef24d05570b21fe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f506835fa810c177c8c93a7d0ef24d05570b21fe/comments","author":null,"committer":null,"parents":[{"sha":"b2cc17c13581839173dae4986ba1005bedf6f454","url":"https://api.github.com/repos/apache/openjpa/commits/b2cc17c13581839173dae4986ba1005bedf6f454","html_url":"https://github.com/apache/openjpa/commit/b2cc17c13581839173dae4986ba1005bedf6f454"}],"stats":{"total":638,"additions":633,"deletions":5},"files":[{"sha":"19b01028176fa64f50efd602467793c16220aae9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":44,"deletions":4,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=f506835fa810c177c8c93a7d0ef24d05570b21fe","patch":"@@ -68,7 +68,6 @@\n import org.apache.openjpa.lib.instrumentation.InstrumentationLevel;\n import org.apache.openjpa.lib.instrumentation.InstrumentationProvider;\n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.ClassResolver;\n@@ -88,7 +87,7 @@\n     extends ConfigurationImpl\n     implements OpenJPAConfiguration {\n \n-    private static final Localizer _loc = Localizer.forPackage(OpenJPAConfigurationImpl.class);\n+    // private static final Localizer _loc = Localizer.forPackage(OpenJPAConfigurationImpl.class);\n \n     // cached state; some of this is created in getter methods, so make\n     // protected in case subclasses want to access without creating\n@@ -168,7 +167,8 @@\n     public StringValue validationMode;\n     public ObjectValue validationFactory;\n     public ObjectValue validator;\n-    public ObjectValue lifecycleEventManager;\n+    public LEMValue lifecycleEventManager;\n+    public SingletonLEMValue singletonLifecycleEventManager;\n     public StringValue validationGroupPrePersist;\n     public StringValue validationGroupPreUpdate;\n     public StringValue validationGroupPreRemove;\n@@ -574,7 +574,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         queryTimeout.setDefault(\"-1\");\n         queryTimeout.setDynamic(true);\n       \n-        lifecycleEventManager = addPlugin(\"LifecycleEventManager\", true);\n+        lifecycleEventManager = addValue(new LEMValue(\"LifecycleEventManager\", false));\n         aliases = new String[] {\n             \"default\", LifecycleEventManager.class.getName(),\n             \"validating\", ValidatingLifecycleEventManager.class.getName(),\n@@ -584,6 +584,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         lifecycleEventManager.setString(aliases[0]);\n         lifecycleEventManager.setInstantiatingGetter(\"getLifecycleEventManagerInstance\");\n \n+        singletonLifecycleEventManager = (SingletonLEMValue) addValue(new SingletonLEMValue(\n+                \"SingletonLifecycleEventManager\"));\n+        singletonLifecycleEventManager.setDefault(\"false\");\n+        singletonLifecycleEventManager.set(false);\n+\n         dynamicEnhancementAgent  = addBoolean(\"DynamicEnhancementAgent\");\n         dynamicEnhancementAgent.setDefault(\"true\");\n         dynamicEnhancementAgent.set(true);\n@@ -1772,6 +1777,41 @@ public void setLifecycleEventManager(String lem) {\n         }\n     }\n \n+    class LEMValue extends PluginValue {\n+        boolean singleton;\n+\n+        public LEMValue(String prop, boolean singleton) {\n+            super(prop, true);\n+            this.singleton = singleton;\n+        }\n+\n+        public Object get() {\n+            return this.singleton ? super.get() : null;\n+        }\n+    }\n+\n+    public boolean isSingletonLifecycleEventManager() {\n+        return singletonLifecycleEventManager.get();\n+    }\n+\n+    public void setSingletonLifecycleEventManager(boolean singleton) {\n+        singletonLifecycleEventManager.set(singleton);\n+    }\n+\n+    class SingletonLEMValue extends BooleanValue {\n+\n+        public SingletonLEMValue(String prop) {\n+            super(prop);\n+        }\n+\n+        public void set(boolean value) {\n+            super.set(value);\n+            if (value && !lifecycleEventManager.singleton) {\n+                lifecycleEventManager.singleton = true;\n+            }\n+        }\n+    }\n+\n     public boolean getDynamicEnhancementAgent() {\n         return dynamicEnhancementAgent.get();\n     }"},{"sha":"27074868bb8bf4833e67c6569d3a968f8a48edf5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/AddListenerEntity.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/AddListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/AddListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/AddListenerEntity.java?ref=f506835fa810c177c8c93a7d0ef24d05570b21fe","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+\n+@Entity\n+public class AddListenerEntity {\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private int value;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"be6ba1c8845683371037e170f466ca7aed2ad188","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerInEntity.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerInEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerInEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerInEntity.java?ref=f506835fa810c177c8c93a7d0ef24d05570b21fe","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostRemove;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreRemove;\n+import javax.persistence.PreUpdate;\n+\n+@Entity\n+public class ListenerInEntity {\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private int value;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+\n+    transient int prePersistCount;\n+    transient int postPersistCount;\n+    transient int preUpdateCount;\n+    transient int postUpdateCount;\n+    transient int preRemoveCount;\n+    transient int postRemoveCount;\n+    transient int postLoadCount;\n+\n+    @PrePersist\n+    public void prePersist() {\n+        prePersistCount++;\n+    }\n+\n+    @PostPersist\n+    public void postPersist() {\n+        postPersistCount++;\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        postLoadCount++;\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate() {\n+        preUpdateCount++;\n+    }\n+\n+    @PostUpdate\n+    public void postUpdate() {\n+        postUpdateCount++;\n+    }\n+\n+    @PreRemove\n+    public void preRemove() {\n+        preRemoveCount++;\n+    }\n+\n+    @PostRemove\n+    public void postRemove() {\n+        postRemoveCount++;\n+    }\n+}"},{"sha":"e0ee33e1be18bb457b0f596ff8ef7c650e50b29c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PerInstanceListener.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PerInstanceListener.java","raw_url":"https://github.com/apache/openjpa/raw/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PerInstanceListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PerInstanceListener.java?ref=f506835fa810c177c8c93a7d0ef24d05570b21fe","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import org.apache.openjpa.event.DeleteListener;\n+import org.apache.openjpa.event.DirtyListener;\n+import org.apache.openjpa.event.LifecycleEvent;\n+import org.apache.openjpa.event.LoadListener;\n+import org.apache.openjpa.event.PersistListener;\n+import org.apache.openjpa.event.PostDeleteListener;\n+import org.apache.openjpa.event.PostPersistListener;\n+import org.apache.openjpa.event.StoreListener;\n+\n+public class PerInstanceListener implements PersistListener, DeleteListener, DirtyListener,\n+        LoadListener, StoreListener, PostPersistListener, PostDeleteListener {\n+\n+    int beforeStore;\n+    int afterStore;\n+    int afterLoad;\n+    int afterRefresh;\n+    int beforeDirty;\n+    int afterDirty;\n+    int beforeDirtyFlushed;\n+    int afterDirtyFlushed;\n+    int beforeDelete;\n+    int afterDelete;\n+    int beforePersist;\n+    int afterPersist;\n+\n+    @Override\n+    public void afterDeletePerformed(LifecycleEvent event) {\n+        afterDelete++;\n+    }\n+\n+    @Override\n+    public void afterPersistPerformed(LifecycleEvent event) {\n+        afterPersist++;\n+    }\n+\n+    @Override\n+    public void beforeStore(LifecycleEvent event) {\n+        beforeStore++;\n+    }\n+\n+    @Override\n+    public void afterStore(LifecycleEvent event) {\n+        afterStore++;\n+    }\n+\n+    @Override\n+    public void afterLoad(LifecycleEvent event) {\n+        afterLoad++;\n+    }\n+\n+    @Override\n+    public void afterRefresh(LifecycleEvent event) {\n+        afterRefresh++;\n+    }\n+\n+    @Override\n+    public void beforeDirty(LifecycleEvent event) {\n+        beforeDirty++;\n+    }\n+\n+    @Override\n+    public void afterDirty(LifecycleEvent event) {\n+        afterDirty++;\n+    }\n+\n+    @Override\n+    public void beforeDirtyFlushed(LifecycleEvent event) {\n+        beforeDirtyFlushed++;\n+    }\n+\n+    @Override\n+    public void afterDirtyFlushed(LifecycleEvent event) {\n+        afterDirtyFlushed++;\n+    }\n+\n+    @Override\n+    public void beforeDelete(LifecycleEvent event) {\n+        beforeDelete++;\n+    }\n+\n+    @Override\n+    public void afterDelete(LifecycleEvent event) {\n+        afterDelete++;\n+    }\n+\n+    @Override\n+    public void beforePersist(LifecycleEvent event) {\n+        beforePersist++;\n+    }\n+\n+    @Override\n+    public void afterPersist(LifecycleEvent event) {\n+        afterPersist++;\n+    }\n+}"},{"sha":"ee59209b831b5303248c935dd031e3a6ce8edf4f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMultiEmEntityListeners.java","status":"added","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/apache/openjpa/blob/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMultiEmEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMultiEmEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMultiEmEntityListeners.java?ref=f506835fa810c177c8c93a7d0ef24d05570b21fe","patch":"@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMultiEmEntityListeners extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, ListenerInEntity.class, AddListenerEntity.class\n+//                , \"openjpa.SingletonLifecycleEventManager\", \"true\"\n+            );\n+    }\n+\n+    public void testListenerInEntity1() {\n+        OpenJPAEntityManager em1 = null;\n+        OpenJPAEntityManager em2 = null;\n+        try {\n+            em1 = emf.createEntityManager();\n+            em2 = emf.createEntityManager();\n+\n+            ListenerInEntity o1 = new ListenerInEntity();\n+            ListenerInEntity o2 = new ListenerInEntity();\n+\n+            em1.getTransaction().begin();\n+            em1.persist(o1);\n+            assertListenerInEntityStatus(o1, 1, 0, 0, 0, 0, 0, 0);\n+            assertListenerInEntityStatus(o2, 0, 0, 0, 0, 0, 0, 0);\n+\n+            em2.getTransaction().begin();\n+            em2.persist(o2);\n+            assertListenerInEntityStatus(o1, 1, 0, 0, 0, 0, 0, 0);\n+            assertListenerInEntityStatus(o2, 1, 0, 0, 0, 0, 0, 0);\n+\n+            em2.getTransaction().commit();\n+            long id2 = o2.getId();\n+            assertListenerInEntityStatus(o1, 1, 0, 0, 0, 0, 0, 0);\n+            assertListenerInEntityStatus(o2, 1, 1, 0, 0, 0, 0, 0);\n+\n+            em1.getTransaction().commit();\n+            long id1 = o1.getId();\n+            assertListenerInEntityStatus(o1, 1, 1, 0, 0, 0, 0, 0);\n+            assertListenerInEntityStatus(o2, 1, 1, 0, 0, 0, 0, 0);\n+\n+            em1.clear();\n+            ListenerInEntity fo1 = em1.find(ListenerInEntity.class, id1);\n+            assertNotNull(fo1);\n+            assertListenerInEntityStatus(fo1, 0, 0, 0, 0, 0, 0, 1);\n+\n+            em2.clear();\n+            ListenerInEntity fo2 = em2.find(ListenerInEntity.class, id2);\n+            assertNotNull(fo2);\n+            assertListenerInEntityStatus(fo1, 0, 0, 0, 0, 0, 0, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 0, 0, 0, 0, 1);\n+\n+            em1.getTransaction().begin();\n+            fo1.setValue(fo1.getValue() + 1);\n+\n+            em1.flush();\n+            assertListenerInEntityStatus(fo1, 0, 0, 1, 1, 0, 0, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 0, 0, 0, 0, 1);\n+\n+            em2.getTransaction().begin();\n+            fo2.setValue(fo2.getValue() + 1);\n+\n+            em2.flush();\n+            assertListenerInEntityStatus(fo1, 0, 0, 1, 1, 0, 0, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 1, 1, 0, 0, 1);\n+\n+            em1.remove(fo1);\n+            assertListenerInEntityStatus(fo1, 0, 0, 1, 1, 1, 0, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 1, 1, 0, 0, 1);\n+\n+            em2.remove(fo2);\n+            assertListenerInEntityStatus(fo1, 0, 0, 1, 1, 1, 0, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 1, 1, 1, 0, 1);\n+\n+            em1.getTransaction().commit();\n+\n+            assertListenerInEntityStatus(fo1, 0, 0, 1, 1, 1, 1, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 1, 1, 1, 0, 1);\n+\n+            em2.getTransaction().commit();\n+\n+            assertListenerInEntityStatus(fo1, 0, 0, 1, 1, 1, 1, 1);\n+            assertListenerInEntityStatus(fo2, 0, 0, 1, 1, 1, 1, 1);\n+\n+            em1.close();\n+            em2.close();\n+        } finally {\n+            if (em1 != null && em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if (em1 != null && em1.isOpen())\n+                em1.close();\n+            if (em2 != null && em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+            if (em2 != null && em2.isOpen())\n+                em2.close();\n+        }\n+    }\n+\n+    private void assertListenerInEntityStatus(ListenerInEntity l,\n+        int prePersist, int postPersist,\n+        int preUpdate, int postUpdate,\n+        int preRemove, int postRemove,\n+        int postLoad) {\n+        assertEquals(prePersist, l.prePersistCount);\n+        assertEquals(postPersist, l.postPersistCount);\n+        assertEquals(preUpdate, l.preUpdateCount);\n+        assertEquals(postUpdate, l.postUpdateCount);\n+        assertEquals(preRemove, l.preRemoveCount);\n+        assertEquals(postRemove, l.postRemoveCount);\n+        assertEquals(postLoad, l.postLoadCount);\n+    }\n+\n+    public void testAddListenerEntity1() {\n+        OpenJPAEntityManager em1 = null;\n+        OpenJPAEntityManager em2 = null;\n+        try {\n+            em1 = emf.createEntityManager();\n+            PerInstanceListener l1 = new PerInstanceListener();\n+            ((OpenJPAEntityManagerSPI) em1).addLifecycleListener(l1, (Class<?>[])null);\n+\n+            em2 = emf.createEntityManager();\n+            PerInstanceListener l2 = new PerInstanceListener();\n+            ((OpenJPAEntityManagerSPI) em2).addLifecycleListener(l2, (Class<?>[])null);\n+\n+            AddListenerEntity o1 = new AddListenerEntity();\n+            AddListenerEntity o2 = new AddListenerEntity();\n+\n+            em1.getTransaction().begin();\n+            em1.persist(o1);\n+            assertAddListenerEntityStatus(l1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);\n+            assertAddListenerEntityStatus(l2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+            em2.getTransaction().begin();\n+            em2.persist(o2);\n+            assertAddListenerEntityStatus(l1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+            em2.getTransaction().commit();\n+            assertAddListenerEntityStatus(l1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0);\n+            long id2 = o2.getId();\n+\n+            em1.getTransaction().commit();\n+            assertAddListenerEntityStatus(l1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0);\n+            long id1 = o1.getId();\n+\n+            em1.clear();\n+            AddListenerEntity fo1 = em1.find(AddListenerEntity.class, id1);\n+            assertAddListenerEntityStatus(l1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(fo1);\n+\n+            em2.clear();\n+            AddListenerEntity fo2 = em2.find(AddListenerEntity.class, id2);\n+            assertAddListenerEntityStatus(l1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0);\n+            assertNotNull(fo2);\n+\n+            em1.getTransaction().begin();\n+            fo1.setValue(fo1.getValue() + 1);\n+            assertAddListenerEntityStatus(l1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0);\n+\n+            em1.flush();\n+            assertAddListenerEntityStatus(l1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0);\n+\n+            em2.getTransaction().begin();\n+            fo2.setValue(fo2.getValue() + 1);\n+            assertAddListenerEntityStatus(l1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0);\n+\n+            em2.flush();\n+            assertAddListenerEntityStatus(l1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0);\n+\n+            em2.remove(fo2);\n+            assertAddListenerEntityStatus(l1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0);\n+            assertAddListenerEntityStatus(l2, 1, 1, 2, 2, 1, 0, 1, 1, 1, 1);\n+\n+            em1.remove(fo1);\n+            assertAddListenerEntityStatus(l1, 1, 1, 2, 2, 1, 0, 1, 1, 1, 1);\n+            assertAddListenerEntityStatus(l2, 1, 1, 2, 2, 1, 0, 1, 1, 1, 1);\n+\n+            em1.getTransaction().commit();\n+            em2.getTransaction().commit();\n+\n+            em1.close();\n+            em2.close();\n+        } finally {\n+            if (em1 != null && em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if (em1 != null && em1.isOpen())\n+                em1.close();\n+            if (em2 != null && em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+            if (em2 != null && em2.isOpen())\n+                em2.close();\n+        }\n+    }\n+\n+    private void assertAddListenerEntityStatus(PerInstanceListener l\n+            , int beforePersist, int afterPersist\n+            , int beforeStore, int afterStore\n+            , int afterLoad, int afterRefresh\n+            , int beforeDirty, int afterDirty\n+            , int beforeDelete, int afterDelete) {\n+        assertEquals(beforePersist, l.beforePersist);\n+        assertEquals(afterPersist, l.afterPersist);\n+        assertEquals(beforeStore, l.beforeStore);\n+        assertEquals(afterStore, l.afterStore);\n+        assertEquals(afterLoad, l.afterLoad);\n+        assertEquals(afterRefresh, l.afterRefresh);\n+        assertEquals(beforeDirty, l.beforeDirty);\n+        assertEquals(afterDirty, l.afterDirty);\n+        assertEquals(beforeDelete, l.beforeDelete);\n+        assertEquals(afterDelete, l.afterDelete);\n+    }\n+}"},{"sha":"b17e0e04c18b5af1f829a1c01ca44eb5955f173a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java","status":"modified","additions":89,"deletions":1,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java","raw_url":"https://github.com/apache/openjpa/raw/f506835fa810c177c8c93a7d0ef24d05570b21fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java?ref=f506835fa810c177c8c93a7d0ef24d05570b21fe","patch":"@@ -19,8 +19,11 @@\n import javax.persistence.ValidationMode;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.event.LifecycleEvent;\n+import org.apache.openjpa.event.PersistListener;\n+import org.apache.openjpa.event.StoreListener;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.PersistenceException;\n import org.apache.openjpa.persistence.query.SimpleEntity;\n@@ -246,6 +249,91 @@ public void testValidationMode7() {\n         }\n     }\n \n+    /**\n+     * Scenario being tested:\n+     *   8) Life cycle event should be entity manager (Broker) specific.\n+     */\n+    public void testUniqueLifecycleManager() {\n+        getLog().trace(\"testUniqueLifecycleManager() - Life cycle event tests\");\n+        // create our EMF\n+        Map<String,String> prop = new HashMap<String,String>();\n+        prop.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true)\");\n+//        prop.put(\"openjpa.SingletonLifecycleEventManager\", \"true\");\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.createEntityManagerFactory(\n+                \"simple\",\n+                \"org/apache/openjpa/persistence/validation/persistence.xml\",\n+                prop);\n+        assertNotNull(emf);\n+        try {\n+            final OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+            final OpenJPAEntityManagerSPI em2 = emf.createEntityManager();\n+            UniqueLifecycleListener l1 = new UniqueLifecycleListener();\n+            UniqueLifecycleListener l2 = new UniqueLifecycleListener();\n+            em.addLifecycleListener(l1, (Class<?>[])null);\n+            em2.addLifecycleListener(l2, (Class<?>[])null);\n+\n+            l1.assertCounts(0, 0, 0, 0);\n+            l2.assertCounts(0, 0, 0, 0);\n+\n+            em.getTransaction().begin();\n+            SimpleEntity e1 = new SimpleEntity();\n+            em.persist(e1);\n+            l1.assertCounts(1, 1, 0, 0);\n+            l2.assertCounts(0, 0, 0, 0);\n+\n+            em2.getTransaction().begin();\n+            SimpleEntity e2 = new SimpleEntity();\n+            em2.persist(e2);\n+            l1.assertCounts(1, 1, 0, 0);\n+            l2.assertCounts(1, 1, 0, 0);\n+\n+            em2.getTransaction().commit();\n+            l1.assertCounts(1, 1, 0, 0);\n+            l2.assertCounts(1, 1, 1, 1);\n+\n+            em.getTransaction().commit();\n+            l1.assertCounts(1, 1, 1, 1);\n+            l2.assertCounts(1, 1, 1, 1);\n+        } finally {\n+            cleanup(emf);\n+        }\n+    }\n+\n+    class UniqueLifecycleListener implements PersistListener, StoreListener {\n+\n+        public int beforePersistCount;\n+        public int afterPersistCount;\n+        public int beforeStoreCount;\n+        public int afterStoreCount;\n+\n+        @Override\n+        public void beforePersist(LifecycleEvent event) {\n+            beforePersistCount++;\n+        }\n+\n+        @Override\n+        public void afterPersist(LifecycleEvent event) {\n+            afterPersistCount++;\n+        }\n+\n+        @Override\n+        public void beforeStore(LifecycleEvent event) {\n+            beforeStoreCount++;\n+        }\n+\n+        @Override\n+        public void afterStore(LifecycleEvent event) {\n+            afterStoreCount++; \n+        }\n+\n+        public void assertCounts(int beforePersist, int afterPersist, int beforeStore, int afterStore) {\n+            assertEquals(beforePersist, beforePersistCount);\n+            assertEquals(afterPersist, afterPersistCount);\n+            assertEquals(beforeStore, beforeStoreCount);\n+            assertEquals(afterStore, afterStoreCount);\n+        }\n+    }\n     \n     /**\n      * Helper method to remove entities and close the emf an any open em's."}]}

