{"sha":"f61968f30255063c02971f041a0111e5dcf84220","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2MTk2OGYzMDI1NTA2M2MwMjk3MWYwNDFhMDExMWU1ZGNmODQyMjA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-01T21:55:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-01T21:55:44Z"},"message":"OPENJPA-285.  I am going ahead with the integration of Kevan's patches for the two memory leaks found in OpenJPA while testing Geronimo.  I will post more details in the Issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2333d04a3c4aeb81d057e994190a5558b8ab78e3","url":"https://api.github.com/repos/apache/openjpa/git/trees/2333d04a3c4aeb81d057e994190a5558b8ab78e3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f61968f30255063c02971f041a0111e5dcf84220","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f61968f30255063c02971f041a0111e5dcf84220","html_url":"https://github.com/apache/openjpa/commit/f61968f30255063c02971f041a0111e5dcf84220","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f61968f30255063c02971f041a0111e5dcf84220/comments","author":null,"committer":null,"parents":[{"sha":"6128ddbc2d8477628e08c53363657f71b6fcca1a","url":"https://api.github.com/repos/apache/openjpa/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a","html_url":"https://github.com/apache/openjpa/commit/6128ddbc2d8477628e08c53363657f71b6fcca1a"}],"stats":{"total":21,"additions":19,"deletions":2},"files":[{"sha":"308669890dc4158a46495c3152720ed4a0bf9ab1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/f61968f30255063c02971f041a0111e5dcf84220/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/f61968f30255063c02971f041a0111e5dcf84220/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=f61968f30255063c02971f041a0111e5dcf84220","patch":"@@ -202,6 +202,23 @@ public static void register(Class pcClass, String[] fieldNames,\n         }\n     }\n \n+    /**\n+     * De-Register all metadata associated with the given ClassLoader. \n+     * Allows ClassLoaders to be garbage collected.\n+     *\n+     * @param cl the ClassLoader\n+     */\n+    public static void deRegister(ClassLoader cl) {\n+        synchronized (_metas) {\n+            for (Iterator i = _metas.keySet().iterator(); i.hasNext();) {\n+                Class pcClass = (Class) i.next();\n+                if (pcClass.getClassLoader() == cl) {\n+                    _metas.remove(pcClass);\n+                }\n+            }\n+        }\n+    }\n+    \n     /**\n      * Returns a collection of class objects of the registered\n      * persistence-capable classes."},{"sha":"067ed5c3022f5999faa6cca0e49a39a9f584ac99","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f61968f30255063c02971f041a0111e5dcf84220/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/f61968f30255063c02971f041a0111e5dcf84220/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=f61968f30255063c02971f041a0111e5dcf84220","patch":"@@ -39,7 +39,6 @@\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.UUIDGenerator;\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -244,7 +243,8 @@ public static boolean isAssignable(Class from, Class to) {\n         Boolean isAssignable = null;\n         Map assignableTo = (Map) _assignableTypes.get(from);\n         if (assignableTo == null) { // \"to\" cache doesn't exist, so create it...\n-            assignableTo = new ConcurrentHashMap();\n+            assignableTo = new ConcurrentReferenceHashMap(ReferenceMap.WEAK,\n+                    ReferenceMap.HARD);\n             _assignableTypes.put(from, assignableTo);\n         } else { // \"to\" cache exists...\n             isAssignable = (Boolean) assignableTo.get(to);"}]}

