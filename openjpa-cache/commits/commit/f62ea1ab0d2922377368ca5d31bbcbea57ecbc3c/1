{"sha":"f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2MmVhMWFiMGQyOTIyMzc3MzY4Y2E1ZDMxYmJjYmVhNTdlY2JjM2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-18T23:25:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-18T23:25:59Z"},"message":"OPENJPA-533: Update query can set single-valued association to NULL or non-NULL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@669332 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7e6ee11401fa61e5a223472e7cd2c58b2a2a7c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7e6ee11401fa61e5a223472e7cd2c58b2a2a7c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","html_url":"https://github.com/apache/openjpa/commit/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/comments","author":null,"committer":null,"parents":[{"sha":"689d1c5385c326b9ca71ee428e75957ff719dbcf","url":"https://api.github.com/repos/apache/openjpa/commits/689d1c5385c326b9ca71ee428e75957ff719dbcf","html_url":"https://github.com/apache/openjpa/commit/689d1c5385c326b9ca71ee428e75957ff719dbcf"}],"stats":{"total":252,"additions":249,"deletions":3},"files":[{"sha":"2fd52fd5bd273a2238060fbf317ff1c81f12ee0d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","raw_url":"https://github.com/apache/openjpa/raw/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java?ref=f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","patch":"@@ -26,7 +26,7 @@\n  *\n  * @author Abe White\n  */\n-class Null\n+public class Null\n     extends Const {\n \n     public Class getType() {"},{"sha":"f52c71166ab7d9aa9e01c09129e9c49954207789","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","patch":"@@ -71,6 +71,7 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.kernel.exps.Null;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -2047,7 +2048,8 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n                 augmentUpdates = false;\n \n             Val val = (Val) next.getValue();\n-\n+            if (val == null)\n+            \tval = new Null();\n             Column col = fmd.getColumns()[0];\n             if (allowAlias) {\n               sql.append(sel.getColumnAlias(col));"},{"sha":"2f4534d2403a7298e53216f8dccfef7f7cb2acb4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","patch":"@@ -483,7 +483,9 @@ protected void evalSetClause(QueryExpressions exps) {\n         JPQLNode[] nodes = root().findChildrenByID(JJTUPDATEITEM);\n         for (int i = 0; nodes != null && i < nodes.length; i++) {\n             Path path = getPath(firstChild(nodes[i]));\n-            Value val = getValue(onlyChild(lastChild(nodes[i])));\n+            JPQLNode lastChild = lastChild(nodes[i]);\n+            Value val = (lastChild.children == null) \n+                      ? null : getValue(onlyChild(lastChild));\n             exps.putUpdate(path, val);\n         }\n     }"},{"sha":"2b7053ad46a3ab0cf7217d251dacdae7f84f26c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","raw_url":"https://github.com/apache/openjpa/raw/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java?ref=f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","patch":"@@ -0,0 +1,137 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Application;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests that update query can set single-valued association field to non-null\r\n+ * or null values.\r\n+ * \r\n+ * Originally reported in \r\n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-533>OPENJPA-533</A>\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestUpdateSingleValuedAssociation extends SingleEMFTestCase {\r\n+\tprivate static boolean MUST_BE_NULL = true;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Application.class, Applicant.class);\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdateSingleValuedAssociationToNullViaParameter() {\r\n+\t\tcreateApplicationWithNonNullApplicant();\r\n+\t\tassertUserNullity(!MUST_BE_NULL);\r\n+\t\t\r\n+\t\tString jpql = \"UPDATE Application a SET a.user = :user\";\r\n+\t\tupdateByQuery(jpql, \"user\", null);\r\n+\t\t\r\n+\t\tassertUserNullity(MUST_BE_NULL);\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdateSingleValuedAssociationToNullViaLiteral() {\r\n+\t\tcreateApplicationWithNonNullApplicant();\r\n+\t\tassertUserNullity(!MUST_BE_NULL);\r\n+\t\t\r\n+\t\tString jpql = \"UPDATE Application a SET a.user = NULL\";\r\n+\t\tupdateByQuery(jpql);\r\n+\t\t\r\n+\t\tassertUserNullity(MUST_BE_NULL);\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdateSingleValuedAssociationToNonNullViaParameter() {\r\n+\t\tApplication pc = createApplicationWithNullApplicant();\r\n+\t\tassertNull(pc.getUser());\r\n+\t\t\r\n+\t\tString jpql = \"UPDATE Application a SET a.user = :user\";\r\n+\t\tApplicant newUser = createApplicant();\r\n+\t\tupdateByQuery(jpql, \"user\", newUser);\r\n+\t\t\r\n+\t\tassertUserNullity(!MUST_BE_NULL);\r\n+\t}\r\n+\t\r\n+\tvoid assertUserNullity(boolean shouldBeNull) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Application> result = \r\n+\t\t\tem.createQuery(\"SELECT a FROM Application a\").getResultList();\r\n+\t\tassertFalse(result.isEmpty());\r\n+\t\tfor (Application pc : result) {\r\n+\t\t\tApplicant user = pc.getUser();\r\n+\t\t\tif (shouldBeNull)\r\n+\t\t\t\tassertNull(user);\r\n+\t\t\telse\r\n+\t\t\t\tassertNotNull(user);\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\tApplication createApplicationWithNonNullApplicant() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tApplication app = new Application();\r\n+\t\tApplicant user = new Applicant();\r\n+\t\tuser.setName(\"Non-Null User\");\r\n+\t\tapp.setUser(user);\r\n+\t\tem.persist(app);\r\n+\t\tem.persist(user);\r\n+\t\tem.getTransaction().commit();\r\n+\t\treturn app;\r\n+\t}\r\n+\t\r\n+\tApplication createApplicationWithNullApplicant() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tApplication app = new Application();\r\n+\t\tem.persist(app);\r\n+\t\tem.getTransaction().commit();\r\n+\t\treturn app;\r\n+\t}\r\n+\t\r\n+\tApplicant createApplicant() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tApplicant user = new Applicant();\r\n+\t\tuser.setName(\"Non-Null User\");\r\n+\t\tem.persist(user);\r\n+\t\tem.getTransaction().commit();\r\n+\t\treturn user;\r\n+\t}\r\n+\t\r\n+\tpublic void updateByQuery(String jpql, Object...params) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tQuery query = em.createQuery(jpql);\r\n+\t\tfor (int i=0; params != null && i<params.length; i=+2) {\r\n+\t\t\tquery.setParameter(params[i].toString(), params[i+1]);\r\n+\t\t}\r\n+\t\tquery.executeUpdate();\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+}\r"},{"sha":"24d379a069a1a8be1f48397b51908e9e01ba3ec1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","raw_url":"https://github.com/apache/openjpa/raw/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java?ref=f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Simple persistent entity as a target of uni-directional one-to-one \r\n+ * association.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class Applicant {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\r\n+\tprivate String name;\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"cc0a103960eae07773a62378d55b7d9df58fc6b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","raw_url":"https://github.com/apache/openjpa/raw/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java?ref=f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKeyAction;\r\n+\r\n+/**\r\n+ * Simple persistent entity as a source of uni-directional one-to-one \r\n+ * association.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class Application {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\r\n+\t@ManyToOne\r\n+\t@JoinColumn(nullable = true)\r\n+\t@ForeignKey(deleteAction = ForeignKeyAction.NULL)\r\n+\tprivate Applicant user;\r\n+\r\n+\tpublic Applicant getUser() {\r\n+\t\treturn user;\r\n+\t}\r\n+\r\n+\tpublic void setUser(Applicant user) {\r\n+\t\tthis.user = user;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+}\r"}]}

