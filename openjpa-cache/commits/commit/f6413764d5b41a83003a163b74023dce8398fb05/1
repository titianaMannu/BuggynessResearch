{"sha":"f6413764d5b41a83003a163b74023dce8398fb05","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2NDEzNzY0ZDViNDFhODMwMDNhMTYzYjc0MDIzZGNlODM5OGZiMDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-09T16:01:48Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-09T16:01:48Z"},"message":"OPENJPA-1168:\nImproved checking for type1 UUID generator is initialized. Reducing\ntiming window which could result in a NPE.\nSubmitted by: Rick Curtis\n\tmodified:   openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java\n\tmodified:   openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@792592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d3adb6779f00de1c3fe2d259dedebab593fd8cf9","url":"https://api.github.com/repos/apache/openjpa/git/trees/d3adb6779f00de1c3fe2d259dedebab593fd8cf9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f6413764d5b41a83003a163b74023dce8398fb05","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f6413764d5b41a83003a163b74023dce8398fb05","html_url":"https://github.com/apache/openjpa/commit/f6413764d5b41a83003a163b74023dce8398fb05","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f6413764d5b41a83003a163b74023dce8398fb05/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"07a98e871b2676bc3c868e4ca0e652a6af9027f2","url":"https://api.github.com/repos/apache/openjpa/commits/07a98e871b2676bc3c868e4ca0e652a6af9027f2","html_url":"https://github.com/apache/openjpa/commit/07a98e871b2676bc3c868e4ca0e652a6af9027f2"}],"stats":{"total":48,"additions":43,"deletions":5},"files":[{"sha":"a9028a6383827b4079169907a550f7ac10ac19d1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05","patch":"@@ -94,15 +94,16 @@\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n     private static short _seq = 0;\n-        \n+\n+    private static boolean type1Initialized = false;\n     /*\n      * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n      * the node portion of the UUID using the IP address.\n      */\n-    private static synchronized void initializeForType1()\n-    {\n-        if (RANDOM != null)\n+    private static synchronized void initializeForType1() {\n+        if (type1Initialized == true) {\n             return;\n+        }\n         // note that secure random is very slow the first time\n         // it is used; consider switching to a standard random\n         RANDOM = new SecureRandom();\n@@ -118,6 +119,7 @@ private static synchronized void initializeForType1()\n         IP = new byte[6];\n         RANDOM.nextBytes(IP);\n         System.arraycopy(ip, 0, IP, 2, ip.length);        \n+        type1Initialized = true;\n     }\n \n     /**\n@@ -134,8 +136,9 @@ private static synchronized void initializeForType1()\n      * Creates a type 1 UUID \n      */\n     public static byte[] createType1() {\n-        if (RANDOM == null)\n+        if (type1Initialized == false) {\n             initializeForType1();\n+        }\n         // set ip addr\n         byte[] uuid = new byte[16];\n         System.arraycopy(IP, 0, uuid, 10, IP.length);"},{"sha":"8b86fe23429fdbedbd7f0c81789edb39c47916c7","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.openjpa.lib.util;\n \n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -76,4 +80,35 @@ public void testGetTime() {\n             time = newTime;\n         }\n     }\n+    \n+    public void testInitType1MultiThreaded() throws Exception {\n+        // This test method depends IP and RANDOM in UUIDGenerator to be null\n+        // and type1Initialized to be false. Using reflection to ensure that\n+        // those fields are null. Wrap this  method in doPrivledgedAction so it\n+        // doesn't fail when running with security.\n+        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n+            public Object run() throws Exception {\n+                Class uuid = UUIDGenerator.class;\n+                Field[] fields = uuid.getDeclaredFields();\n+                for (Field f : fields) {\n+                    if (f.getName().equals(\"type1Initialized\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, false);\n+                    } else if (f.getName().equals(\"IP\") || f.getName().equals(\"RANDOM\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, null);\n+                    }\n+                }\n+                Thread t = new Thread() {\n+                    public void run() {\n+                        UUIDGenerator.createType1();\n+                    }\n+                };\n+\n+                t.start();\n+                UUIDGenerator.createType1();\n+                return null;\n+            }\n+        });\n+    }// end testInitType1MultiThreaded\n }"}]}

