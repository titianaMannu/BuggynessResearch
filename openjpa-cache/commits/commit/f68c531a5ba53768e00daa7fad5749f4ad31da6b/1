{"sha":"f68c531a5ba53768e00daa7fad5749f4ad31da6b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2OGM1MzFhNWJhNTM3NjhlMDBkYWE3ZmFkNTc0OWY0YWQzMWRhNmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-26T18:54:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-26T18:54:30Z"},"message":"OPENJPA-1265: Support edit of Criteria Query.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@808158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"760b1e91cdf6e84f91bef13b735255007b77f9b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/760b1e91cdf6e84f91bef13b735255007b77f9b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b","html_url":"https://github.com/apache/openjpa/commit/f68c531a5ba53768e00daa7fad5749f4ad31da6b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f68c531a5ba53768e00daa7fad5749f4ad31da6b/comments","author":null,"committer":null,"parents":[{"sha":"aedc261abc6fddb00f815e5c68906ef7b2e255fc","url":"https://api.github.com/repos/apache/openjpa/commits/aedc261abc6fddb00f815e5c68906ef7b2e255fc","html_url":"https://github.com/apache/openjpa/commit/aedc261abc6fddb00f815e5c68906ef7b2e255fc"}],"stats":{"total":414,"additions":336,"deletions":78},"files":[{"sha":"8688d6fa571fd146ae1d71ebd4cafb9da9a44bec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -3138,7 +3138,7 @@ void provideField(PersistenceCapable pc, FieldManager store, int field) {\n         _fm = store;\n         pc.pcProvideField(field);\n         // Retaining original FM because of the possibility of reentrant calls\n-        _fm = beforeFM;\n+        if (beforeFM != null) _fm = beforeFM;\n     }\n \n     /**\n@@ -3150,7 +3150,7 @@ void replaceField(PersistenceCapable pc, FieldManager load, int field) {\n         _fm = load;\n         pc.pcReplaceField(field);\n         // Retaining original FM because of the possibility of reentrant calls\n-        _fm = beforeFM;\n+        if (beforeFM != null) _fm = beforeFM;\n     }\n \n     /**"},{"sha":"f138e3d4395cb98624162b96f8719f1b9fb2f374","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.persistence.Tuple;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.Order;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.criteria.Selection;\n+\n+/**\n+ * Test editing of Criteria Query.\n+ * \n+ * The tests construct a CriteriaQuery and takes a pair of JPQL String.\n+ * The Criteria Query is executed and its target SQL is compared with that of the first of the JPQL String pair.\n+ * Then the same Criteria Query is edited and the target SQL of the edited version is compared with that of the second \n+ * of the JPQL String pair.\n+ * \n+ * Also test boundary cases where nothing is selected etc.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestEdit extends CriteriaTest {\n+    \n+    public void testWhereConditionEditedToAddOr() {\n+        String jpql = \"select p from Person p where p.name='XYZ'\";\n+        String editedjpql = \"select p from Person p where p.name='XYZ' or p.name='ABC'\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.where(cb.equal(p.get(Person_.name), \"XYZ\"));\n+        \n+        assertEquivalence(c, jpql);\n+        \n+        Predicate where = c.getRestriction();\n+        c.where(cb.or(where, cb.equal(p.get(Person_.name), \"ABC\")));\n+        \n+        assertEquivalence(c, editedjpql);\n+    }\n+    \n+    public void testWhereConditionEditedToAddAnd() {\n+        String jpql = \"select p from Person p where p.name='XYZ'\";\n+        String editedjpql = \"select p from Person p where p.name='XYZ' and p.name='ABC'\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.where(cb.equal(p.get(Person_.name), \"XYZ\"));\n+        \n+        assertEquivalence(c, jpql);\n+        \n+        Predicate where = c.getRestriction();\n+        c.where(cb.and(where, cb.equal(p.get(Person_.name), \"ABC\")));\n+        \n+        assertEquivalence(c, editedjpql);\n+    }\n+    \n+    public void testWhereConditionEditedToRemoveAnd() {\n+        String jpql = \"select p from Person p where p.name='XYZ' and p.name='ABC'\";\n+        String editedjpql = \"select p from Person p where p.name='XYZ'\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        Predicate p1 = cb.equal(p.get(Person_.name), \"XYZ\");\n+        Predicate p2 = cb.equal(p.get(Person_.name), \"ABC\");\n+        c.where(p1,p2);\n+        \n+        assertEquivalence(c, jpql);\n+        \n+        Predicate where = c.getRestriction();\n+        List<Expression<Boolean>> exprs = where.getExpressions();\n+        assertEquals(2, exprs.size());\n+        assertTrue(exprs.contains(p1));\n+        assertTrue(exprs.contains(p2));\n+        exprs.remove(p1);\n+        // editing from the list does not impact the query \n+        assertEquivalence(c, jpql);\n+        \n+        c.where(p1);\n+        assertEquivalence(c, editedjpql);\n+    }\n+\n+    public void testEditOrderBy() {\n+        String jpql = \"select p from Person p ORDER BY p.name\";\n+        String editedjpql = \"select p from Person p ORDER BY p.name, p.id DESC\";\n+        \n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.orderBy(cb.asc(p.get(Person_.name)));\n+        \n+        assertEquivalence(c, jpql);\n+        \n+        List<Order> orders = c.getOrderList();\n+        assertEquals(1, orders.size());\n+        orders.add(cb.desc(p.get(Person_.id)));\n+        // editing the list does not impact query\n+        assertEquivalence(c, jpql);\n+        \n+        // adding the modified list back does \n+        c.orderBy(orders.toArray(new Order[orders.size()]));\n+        \n+        assertEquivalence(c, editedjpql);\n+    }\n+    \n+    public void testEditedToAddMultiselectionTerm() {\n+        String jpql = \"select p from Person p\";\n+        String editedjpql = \"select p,p.name from Person p\";\n+        \n+        CriteriaQuery<Tuple> c = cb.createTupleQuery();\n+        Root<Person> p = c.from(Person.class);\n+        c.multiselect(p);\n+        \n+        assertEquivalence(c, jpql);\n+        \n+        List<Selection<?>> terms = c.getSelection().getCompoundSelectionItems();\n+        terms.add(p.get(Person_.name));\n+        // editing the list does not impact query\n+        assertEquivalence(c, jpql);\n+        \n+        c.multiselect(p, p.get(Person_.name));\n+        assertEquivalence(c, editedjpql);\n+    }\n+    \n+    public void testSingleSelectionHasNoCompoundItems() {\n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        c.select(p);\n+        try {\n+            Selection<Person> term = c.getSelection();\n+            term.getCompoundSelectionItems();\n+            fail(\"Expected to fail because primary selection has no compound terms\");\n+        } catch (IllegalStateException e) {\n+            // good\n+        }\n+    }\n+    \n+    /**\n+     * Candidate class is implicitly selected but a null is returned by getSelection()\n+     */\n+    public void testCandidateClassIsImplicitlySelectedForEntityQuery() {\n+        String jpql = \"select p from Person p\";\n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Root<Person> p = c.from(Person.class);\n+        Selection<Person> term = c.getSelection();\n+        assertNull(term);\n+        \n+        assertEquivalence(c, jpql);\n+    }\n+    \n+    public void testCandidateClassIsNotImplicitlySelectedForNonEntityQuery() {\n+        String jpql = \"select p from Person p\";\n+        CriteriaQuery<Tuple> c = cb.createTupleQuery();\n+        Root<Person> p = c.from(Person.class);\n+        Selection<Tuple> term = c.getSelection();\n+        assertNull(term);\n+        \n+        assertFails(\"Expected to fail without a projection term\", c);\n+    }\n+    \n+    public void testRootIsNotImplicitlyDefined() {\n+        CriteriaQuery<Person> c = cb.createQuery(Person.class);\n+        Selection<Person> term = c.getSelection();\n+        assertNull(term);\n+        \n+        assertFails(\"Expected to fail without a defined root\", c);\n+    }\n+    \n+//    public void testDateString() {\n+//        String jpql = \"select d from Dependent d where d.endDate >= {d '2009-08-25'}\";\n+//        CriteriaQuery<Dependent> c = cb.createQuery(Dependent.class);\n+//        Root<Dependent> d = c.from(Dependent.class);\n+//        \n+//        c.where(cb.greaterThanOrEqualTo(d.get(Dependent_.endDate), cb.literal(\"{d '2009-08-25'}\").as(Date.class)));\n+//        \n+//        assertEquivalence(c, jpql);\n+//    }\n+\n+    \n+    void assertFails(String message, CriteriaQuery<?> c) {\n+        try {\n+            em.createQuery(c);\n+            fail(message); \n+        } catch (IllegalStateException e) {\n+            // good\n+        }\n+    }\n+\n+}"},{"sha":"0370c093b4ab9ad8c260ca54d6162e0fb023de36","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJoinCondition.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJoinCondition.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJoinCondition.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJoinCondition.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -66,18 +66,18 @@ public void testListJoinModel() {\n     \n     public void testInnerJoinSingleAttributeWithoutCondition() {\n         String jpql = \"select a from A a INNER JOIN a.b b\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<A> c = cb.createQuery(A.class);\n         c.from(A.class).join(A_.b, JoinType.INNER);\n         \n         assertEquivalence(c, jpql);\n     }  \n     \n     public void testCrossJoinWithoutCondition() {\n         String jpql = \"select a from A a, C c\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         Root<C> c = cq.from(C.class);\n-        \n+        cq.select(a);\n         assertEquivalence(cq, jpql);\n     }\n     \n@@ -93,17 +93,17 @@ public void testCrossJoinWithoutCondition1() {\n \n     public void testCrossJoin() {\n         String jpql = \"select a from A a, C c where a.name=c.name\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         Root<C> c = cq.from(C.class);\n         cq.where(cb.equal(a.get(A_.name), c.get(C_.name)));\n-        \n+        cq.select(a);\n         assertEquivalence(cq, jpql);\n     }\n \n     public void testInnerJoinSingleAttribute() {\n         String jpql = \"select a from A a INNER JOIN a.b b WHERE a.id=b.age\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         Join<A,B> b = a.join(A_.b);\n         cq.where(cb.equal(a.get(A_.id), b.get(B_.age)));\n@@ -113,7 +113,7 @@ public void testInnerJoinSingleAttribute() {\n     \n     public void testOuterJoinSingleAttributeWithoutCondition() {\n         String jpql = \"select a from A a LEFT JOIN a.b b\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         Join<A,B> b = a.join(A_.b, JoinType.LEFT);\n         \n@@ -122,7 +122,7 @@ public void testOuterJoinSingleAttributeWithoutCondition() {\n     \n     public void testOuterJoinSingleAttribute() {\n         String jpql = \"select a from A a LEFT JOIN a.b b where a.id=b.age\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         Join<A,B> b = a.join(A_.b, JoinType.LEFT);\n         cq.where(cb.equal(a.get(A_.id), b.get(B_.age)));\n@@ -132,39 +132,39 @@ public void testOuterJoinSingleAttribute() {\n \n     public void testSetJoinWithoutCondition() {\n         String jpql = \"select c from C c JOIN c.set d\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<C> c = cb.createQuery(C.class);\n         c.from(C.class).join(C_.set);\n         \n         assertEquivalence(c, jpql);\n     }\n     \n     public void testListJoinWithoutCondition() {\n         String jpql = \"select c from C c JOIN c.list d\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<C> c = cb.createQuery(C.class);\n         c.from(C.class).join(C_.list);\n         \n         assertEquivalence(c, jpql);\n     }\n     \n     public void testCollectionJoinWithoutCondition() {\n         String jpql = \"select c from C c JOIN c.coll d\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<C> c = cb.createQuery(C.class);\n         c.from(C.class).join(C_.coll);\n         \n         assertEquivalence(c, jpql);\n     }\n     \n     public void testMapJoinWithoutCondition() {\n         String jpql = \"select c from C c JOIN c.map d\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<C> c = cb.createQuery(C.class);\n         c.from(C.class).join(C_.map);\n         \n         assertEquivalence(c, jpql);\n     }\n  \n     public void testKeyExpression() {\n         String jpql = \"select c from C c JOIN c.map d where KEY(d)=33\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<C> cq = cb.createQuery(C.class);\n         Root<C> c = cq.from(C.class);\n         MapJoin<C,Integer,D> d = c.join(C_.map);\n         cq.where(cb.equal(d.key(),33));\n@@ -174,7 +174,7 @@ public void testKeyExpression() {\n     \n     public void testValueExpression() {\n         String jpql = \"select c from C c JOIN c.map d where VALUE(d).name='xy'\";\n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<C> cq = cb.createQuery(C.class);\n         Root<C> c = cq.from(C.class);\n         MapJoin<C,Integer,D> d = c.join(C_.map);\n         cq.where(cb.equal(d.value().get(D_.name),\"xy\"));\n@@ -185,7 +185,7 @@ public void testValueExpression() {\n     public void testFetchJoin() {\n         String jpql = \"select a from A a JOIN FETCH a.b\";\n         \n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         a.fetch(A_.b);\n         \n@@ -195,7 +195,7 @@ public void testFetchJoin() {\n     public void testOuterFetchJoin() {\n         String jpql = \"select a from A a LEFT JOIN FETCH a.b\";\n         \n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         a.fetch(A_.b, JoinType.LEFT);\n         "},{"sha":"e60f9171e4f70c14b0feb20347089e44cc298ade","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -131,7 +131,7 @@ public void testLeftSetJoin() {\n                     + \"LEFT JOIN c.orders o \"\n                     + \"WHERE c.status = 1\";\n         \n-        CriteriaQuery q = cb.createQuery();\n+        CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Customer> c = q.from(Customer.class);\n         SetJoin<Customer, Order> o = c.join(customer_.getSet(\"orders\",\n                 Order.class), JoinType.LEFT);\n@@ -394,13 +394,12 @@ public void testSubqueryWithExistsClause() {\n         String jpql = \"SELECT DISTINCT emp FROM Employee emp WHERE EXISTS (\"\n                 + \"SELECT spouseEmp FROM Employee spouseEmp WHERE spouseEmp = \"\n                 + \"emp.spouse)\";\n-        CriteriaQuery<?> q = cb.createQuery();\n+        CriteriaQuery<Employee> q = cb.createQuery(Employee.class);\n         Root<Employee> emp = q.from(Employee.class);\n         Subquery<Employee> sq = q.subquery(Employee.class);\n         Root<Employee> spouseEmp = sq.from(Employee.class);\n         sq.select(spouseEmp);\n-        sq.where(cb.equal(spouseEmp, emp.get(employee_.getSingularAttribute(\"spouse\",\n-                Employee.class))));\n+        sq.where(cb.equal(spouseEmp, emp.get(employee_.getSingularAttribute(\"spouse\", Employee.class))));\n         q.where(cb.exists(sq));\n         q.distinct(true);\n \n@@ -412,7 +411,7 @@ public void testSubqueryWithAllClause() {\n                 + \"SELECT m.salary FROM Manager m WHERE m.department =\"\n                 + \" emp.department)\";\n         \n-        CriteriaQuery<?> q = cb.createQuery();\n+        CriteriaQuery<Employee> q = cb.createQuery(Employee.class);\n         Root<Employee> emp = q.from(Employee.class);\n         \n         Subquery<BigDecimal> sq = q.subquery(BigDecimal.class);\n@@ -430,7 +429,7 @@ public void testSubqueryWithAllClause() {\n     public void testCorrelatedSubqueryWithCount() {\n         String jpql = \"SELECT c FROM Customer c WHERE \"\n                 + \"(SELECT COUNT(o) FROM c.orders o) > 10\";\n-        CriteriaQuery<?> q = cb.createQuery();\n+        CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Customer> c1 = q.from(Customer.class);\n         Subquery<Long> sq3 = q.subquery(Long.class);\n         Root<Customer> c2 = sq3.correlate(c1);\n@@ -445,7 +444,7 @@ public void testCorrelatedSubqueryWithJoin() {\n         String jpql = \"SELECT o FROM Order o WHERE 10000 < ALL (\"\n                 + \"SELECT a.balance FROM o.customer c JOIN c.accounts a)\";\n         \n-        CriteriaQuery<?> q = cb.createQuery();\n+        CriteriaQuery<Order> q = cb.createQuery(Order.class);\n         Root<Order> o = q.from(Order.class);\n         \n         Subquery<Integer> sq = q.subquery(Integer.class);\n@@ -464,7 +463,7 @@ public void testCorrelatedSubqueryWithAllClause() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c \"\n                     + \"WHERE 10000 < ALL (SELECT a.balance FROM c.accounts a)\";\n         \n-        CriteriaQuery<?> q = cb.createQuery();\n+        CriteriaQuery<Order> q = cb.createQuery(Order.class);\n         Root<Order> o = q.from(Order.class);\n         \n         Join<Order, Customer> c = o.join(Order_.customer);"},{"sha":"338a2fd398bea202291fa637df66500ddfb68402","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -57,8 +57,8 @@\n     public void testNothingUsingCriteria() {\n         String query = \"SELECT o FROM CompUser o\";\n         \n-        CriteriaQuery<?> cq = cb.createQuery();\n-        cq.from(CompUser.class);\n+        CriteriaQuery<CompUser> cq = cb.createQuery(CompUser.class);\n+        cq.select(cq.from(CompUser.class));\n         assertEquivalence(cq, query);\n     }\n \n@@ -543,7 +543,7 @@ public void testTypeExpression4() {\n     public void testTypeExpression5() {\n         String query = \"SELECT e FROM CompUser e where TYPE(e) in (MaleUser)\";\n         \n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<CompUser> cq = cb.createQuery(CompUser.class);\n         Root<CompUser> e = cq.from(CompUser.class);\n         cq.where(cb.in(e.type()).value(MaleUser.class));\n         \n@@ -554,7 +554,7 @@ public void testTypeExpression6() {\n         String query = \"SELECT e FROM CompUser e where TYPE(e) not in \" +\n             \"(MaleUser, FemaleUser)\";\n         \n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<CompUser> cq = cb.createQuery(CompUser.class);\n         Root<CompUser> e = cq.from(CompUser.class);\n         cq.where(cb.in(e.type()).value(MaleUser.class).value(FemaleUser.class)\n                 .negate());"},{"sha":"b4a5913ccb0c91514ba7d3b0276fcc8deca3ac91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -175,17 +175,15 @@ public void testAvgExpression() {\n \n     public void testInPredicate() {\n         String jpql = \"select a from Account a where a.name in ('X','Y','Z')\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<Account> c = cb.createQuery(Account.class);\n         Root<Account> account = c.from(Account.class);\n-        c.where(cb.in(account.get(Account_.name)).value(\"X\").value(\"Y\").value(\n-        \"Z\"));\n+        c.where(cb.in(account.get(Account_.name)).value(\"X\").value(\"Y\").value(\"Z\"));\n         assertEquivalence(c, jpql);\n     }\n \n     public void testInPredicateWithPath() {\n-        String jpql =\n-            \"select a from Account a where a.owner.name in ('X','Y','Z')\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        String jpql = \"select a from Account a where a.owner.name in ('X','Y','Z')\";\n+        CriteriaQuery<Account> c = cb.createQuery(Account.class);\n         Root<Account> account = c.from(Account.class);\n         c.where(cb.in(account.get(Account_.owner).get(Person_.name)).value(\"X\")\n                 .value(\"Y\").value(\"Z\"));\n@@ -230,7 +228,7 @@ public void testBetweenExpression() {\n \n     public void testSimplePath() {\n         String jpql = \"select a from Account a where a.owner.name='Pinaki'\";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<Account> c = cb.createQuery(Account.class);\n         Root<Account> a = c.from(Account.class);\n         c.where(cb.equal(a.get(Account_.owner).get(Person_.name), \"Pinaki\"));\n \n@@ -239,15 +237,15 @@ public void testSimplePath() {\n \n     public void testSimpleLeftJoin() {\n         String jpql = \"SELECT c FROM Customer c LEFT JOIN c.orders o \";\n-        CriteriaQuery<?> c = cb.createQuery();\n+        CriteriaQuery<Customer> c = cb.createQuery(Customer.class);\n         c.from(Customer.class).join(Customer_.orders, JoinType.LEFT);\n         assertEquivalence(c, jpql);\n     }\n \n     public void testMultipartNavigation() {\n         String jpql = \"select a from A a where a.b.age=22\";\n         \n-        CriteriaQuery<?> cq = cb.createQuery();\n+        CriteriaQuery<A> cq = cb.createQuery(A.class);\n         Root<A> a = cq.from(A.class);\n         cq.where(cb.equal(a.get(A_.b).get(B_.age), 22));\n         "},{"sha":"a68ac2ea06f4208f6835dfdd8662a3c1b2c785fe","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -1531,14 +1531,17 @@ public void detach(Object entity) {\n     }\n \n     /**\n-     * Crete a query from the given CritriaQuery.\n+     * Create a query from the given CritriaQuery.\n      * Compile to register the parameters in this query.\n      */\n     public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {\n+        CriteriaQueryImpl<T> impl = (CriteriaQueryImpl<T>)criteriaQuery;\n+        impl.assertRoot();\n+        impl.assertSelection();\n         org.apache.openjpa.kernel.Query kernelQuery =_broker.newQuery(CriteriaBuilder.LANG_CRITERIA, criteriaQuery);\n         kernelQuery.compile();\n         QueryImpl<T> facadeQuery = new QueryImpl<T>(this, _ret, kernelQuery);\n-        Set<ParameterExpression<?>> params = ((CriteriaQueryImpl<T>)criteriaQuery).getParameters();\n+        Set<ParameterExpression<?>> params = impl.getParameters();\n         \n         for (ParameterExpression<?> param : params) {\n             facadeQuery.declareParameter(param, param);"},{"sha":"04d810e3b61567adeea75c99d6a74efe234a155a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -21,6 +21,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n import javax.persistence.Tuple;\n import javax.persistence.TupleElement;\n@@ -77,7 +78,7 @@ public final boolean isCompoundSelection() {\n          *           selection\n          */\n         public final List<Selection<?>> getCompoundSelectionItems() {\n-            return Collections.unmodifiableList(_args);\n+            return _args == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Selection<?>>(_args);\n         }\n         \n         void assertNoCompoundSelection(Selection<?>...args) {"},{"sha":"c344039d1943b26fd31636d5cd90d58b2a2e36a2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -244,7 +244,7 @@ protected void evalProjections(QueryExpressions exps, ExpressionFactory factory,\n         Map<ExpressionImpl<?>, Value> exp2Vals) {\n         List<Selection<?>> selections = q.getSelectionList();\n         MetamodelImpl featureSelection = q.getMetamodel();\n-        if (isDefaultProjection(selections, q)) {\n+        if (q.isDefaultProjection()) {\n             exps.projections = new Value[0];\n             return ;\n         }\n@@ -300,18 +300,18 @@ private void getProjections(QueryExpressions exps, List<Selection<?>> selections\n     }\n     \n \n-    protected boolean isDefaultProjection(List<Selection<?>> selections, CriteriaQueryImpl<?> q) {\n-        if (selections == null)\n-            return true;\n-        if (selections.size() != 1)\n-            return false;\n-        Selection<?> sel = selections.get(0);\n-        if (q.getRoots() != null && sel == q.getRoot())\n-            return true;\n-        if ((sel instanceof PathImpl<?,?>) && ((PathImpl<?,?>)sel)._correlatedPath != null)\n-            return true;\n-        return false;\n-    }\n+//    protected boolean isDefaultProjection(List<Selection<?>> selections, CriteriaQueryImpl<?> q) {\n+//        if (selections == null)\n+//            return true;\n+//        if (selections.size() != 1)\n+//            return false;\n+//        Selection<?> sel = selections.get(0);\n+//        if (q.getRoots() != null && sel == q.getRoot())\n+//            return true;\n+//        if ((sel instanceof PathImpl<?,?>) && ((PathImpl<?,?>)sel)._correlatedPath != null)\n+//            return true;\n+//        return false;\n+//    }\n \n     protected void evalFetchJoin(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         List<String> iPaths = new ArrayList<String>();"},{"sha":"5fa4891dc0e8c5fcc6e14c9b6739560bbb2ea79c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":42,"deletions":14,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -27,6 +27,8 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.Stack;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n \n import javax.persistence.criteria.AbstractQuery;\n import javax.persistence.criteria.CriteriaQuery;\n@@ -45,6 +47,7 @@\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.meta.Types;\n \n@@ -62,6 +65,8 @@\n  * @since 2.0.0\n  */\n public class CriteriaQueryImpl<T> implements CriteriaQuery<T>, AliasContext {\n+    private static final Localizer _loc = Localizer.forPackage(CriteriaQueryImpl.class);\n+    \n     private final MetamodelImpl  _model;\n     private Set<Root<?>>        _roots;\n     private PredicateImpl       _where;\n@@ -124,7 +129,7 @@ public MetamodelImpl getMetamodel() {\n     }\n \n     public List<Order> getOrderList() {\n-        return _orders;\n+        return _orders == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Order>(_orders);\n     }\n     \n     /**\n@@ -273,24 +278,21 @@ private void registerParameterInternal(ParameterExpressionImpl<?> p) {\n     }\n \n     public <X> Root<X> from(EntityType<X> entity) {\n-        Root<X> root = new RootImpl<X>((Types.Entity<X>)entity);\n-        if (_roots == null) {\n-            _roots = new LinkedHashSet<Root<?>>();\n-        }\n-        _roots.add(root);\n+        RootImpl<X> root = new RootImpl<X>((Types.Entity<X>)entity);\n+        addRoot(root);\n         return root;\n     }\n \n     \n     public <X> Root<X> from(Class<X> cls) {\n         EntityType<X> entity = _model.entity(cls);\n         if (entity == null)\n-            throw new IllegalArgumentException(cls + \" is not an entity\");\n+            throw new IllegalArgumentException(_loc.get(\"root-non-entity\", cls).getMessage());\n         return from(entity);\n     }\n \n     public List<Expression<?>> getGroupList() {\n-        return _groups;\n+        return _groups == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Expression<?>>(_groups);\n     }\n \n     public PredicateImpl getGroupRestriction() {\n@@ -304,16 +306,19 @@ public PredicateImpl getRestriction() {\n     public Set<Root<?>> getRoots() {\n         return _roots;\n     }\n-    \n-    public void setRoots (Set<Root<?>> roots) {\n-        this._roots = roots;\n-    }\n \n     public Root<?> getRoot() {\n         assertRoot();\n         return _roots.iterator().next();\n     }\n-\n+    \n+    void addRoot(RootImpl<?> root) {\n+        if (_roots == null) {\n+            _roots = new LinkedHashSet<Root<?>>();\n+        }\n+        _roots.add(root);\n+    }\n+    \n     public boolean isDistinct() {\n         return _distinct;\n     }\n@@ -352,7 +357,12 @@ QueryExpressions getQueryExpressions(ExpressionFactory factory) {\n     \n     public void assertRoot() {\n         if (_roots == null || _roots.isEmpty())\n-            throw new IllegalStateException(\"no root is set\");\n+            throw new IllegalStateException(_loc.get(\"root-undefined\").getMessage());\n+    }\n+    \n+    public void assertSelection() {\n+        if (_selection == null && !isDefaultProjection())\n+            throw new IllegalStateException(_loc.get(\"select-undefined\").getMessage());\n     }\n     \n     //\n@@ -535,4 +545,22 @@ Value getRegisteredRootVariable(Root<?> root) {\n     boolean isMultiselect() {\n         return _selection instanceof CompoundSelections.MultiSelection;\n     }\n+    \n+    protected boolean isDefaultProjection() {\n+        if (_selections == null) {\n+            return _roots != null && _roots.size() == 1 && getRoot().getModel().getJavaType() == _resultClass;\n+        } \n+        if (_selections.size() != 1) {\n+            return false;\n+        }\n+        Selection<?> sel = _selections.get(0);\n+        if (getRoots() != null && sel == getRoot()) {\n+            return true;\n+        }\n+        if ((sel instanceof PathImpl<?,?>) && ((PathImpl<?,?>)sel)._correlatedPath != null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n }"},{"sha":"f53e062c069b1ccc1a71b52445835c6ecbf6add4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -19,7 +19,9 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Predicate;\n@@ -61,7 +63,7 @@ public PredicateImpl add(Expression<Boolean> s) {\n     }\n \n     public List<Expression<Boolean>> getExpressions() {\n-        return _exps;\n+        return _exps == null ? Collections.EMPTY_LIST : new CopyOnWriteArrayList<Expression<Boolean>>(_exps);\n     }\n \n     public BooleanOperator getOperator() {"},{"sha":"99d4d08011f5181557319d5503169ec77e752ee9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -181,12 +181,7 @@ public boolean isDistinct() {\n         Types.Entity<Y> entity = (Types.Entity<Y>)root.getModel();\n         RootImpl<Y> corrRoot = new RootImpl<Y>(entity);\n         corrRoot.setCorrelatedPath((RootImpl<Y>)root);\n-        Set<Root<?>> roots = getRoots();\n-        if (roots == null) {\n-            roots = new LinkedHashSet<Root<?>>();\n-            _delegate.setRoots(roots);\n-        }\n-        roots.add(corrRoot);\n+        _delegate.addRoot(corrRoot);\n         return corrRoot;\n     }\n     \n@@ -271,8 +266,7 @@ public boolean isDistinct() {\n      * Convert this path to a kernel path value.\n      */\n     @Override\n-    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n-        CriteriaQueryImpl<?> q) {\n+    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n         final boolean subclasses = true;\n         CriteriaExpressionBuilder exprBuilder = new CriteriaExpressionBuilder();\n         String alias = q.getAlias(this);"},{"sha":"bcdea649aad695f345a97200a9e2516f8c1a4d0e","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/criteria/localizer.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/criteria/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/f68c531a5ba53768e00daa7fad5749f4ad31da6b/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/criteria/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/criteria/localizer.properties?ref=f68c531a5ba53768e00daa7fad5749f4ad31da6b","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+root-non-entity: {0} can not be selected as the root of \\\n+\tcriteria query because it is not an entity.\n+root-undefined: No root is defined for criteria query. \\\n+\tUse CriteriaQuery.from(Class) to define a root.\n+select-undefined: No terms is selected for criteria query. \\\n+\tUse\tCriteriaQuery.select() or multiselect() to select \\\n+\tprojection terms for the query.\n\\ No newline at end of file"}]}

