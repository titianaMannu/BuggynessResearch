{"sha":"f69da242687ffaeec7840c587f6f658e2f3cb283","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2OWRhMjQyNjg3ZmZhZWVjNzg0MGM1ODdmNmY2NThlMmYzY2IyODM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T20:05:09Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T20:05:09Z"},"message":"OPENJPA-1505: allow duplicate entity listeners to be configurable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921538 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41593fb9e3aedc975eaeb24ca57de2667668556d","url":"https://api.github.com/repos/apache/openjpa/git/trees/41593fb9e3aedc975eaeb24ca57de2667668556d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f69da242687ffaeec7840c587f6f658e2f3cb283","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f69da242687ffaeec7840c587f6f658e2f3cb283","html_url":"https://github.com/apache/openjpa/commit/f69da242687ffaeec7840c587f6f658e2f3cb283","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f69da242687ffaeec7840c587f6f658e2f3cb283/comments","author":null,"committer":null,"parents":[{"sha":"2798b0dd7304466fea04bff576188ea23ef7e05b","url":"https://api.github.com/repos/apache/openjpa/commits/2798b0dd7304466fea04bff576188ea23ef7e05b","html_url":"https://github.com/apache/openjpa/commit/2798b0dd7304466fea04bff576188ea23ef7e05b"}],"stats":{"total":138,"additions":128,"deletions":10},"files":[{"sha":"8f6f196309b07edecd9dda3755bbd4c99c94d267","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CallbackOptions.java?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -28,6 +28,7 @@\n public class CallbackOptions implements Serializable {\n     private boolean _isPostPersistCallbackImmediate = false;\n     private boolean _allowsMultipleMethodsForSameCallback = false;\n+    private boolean _allowsDuplicateListener = true;\n     \n     /**\n      * Affirms if the post-persist callback is invoked as soon as a new instance\n@@ -64,4 +65,22 @@ public boolean getAllowsMultipleMethodsForSameCallback() {\n     public void setAllowsMultipleMethodsForSameCallback(boolean flag) {\n         _allowsMultipleMethodsForSameCallback = flag;\n     }\n+\n+    /** \n+     * Flags if duplicate listeners are allowed to handle the same \n+     * callback event.\n+     * Defaults to true.\n+     */\n+    public boolean getAllowsDuplicateListener() {\n+        return _allowsDuplicateListener;\n+    }\n+    \n+    /** \n+     * Flags if duplicate listeners are allowed to handle the same \n+     * callback event.\n+     */\n+    public void setAllowsDuplicateListener(boolean flag) {\n+        _allowsDuplicateListener = flag;\n+    }\n+\n }"},{"sha":"c4db8f726e9183d158d1bccf3e485a2a3b12b064","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/DuplicateListenerEntity.java?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.EntityListeners;\n+\n+@Entity\n+@EntityListeners(value = {ListenerImpl.class, ListenerImpl.class})\n+public class DuplicateListenerEntity implements ListenerTestEntity {\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private int value;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"45e42cf2a754bd8db8d04e84c769cdcf875731ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","status":"modified","additions":36,"deletions":9,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -23,6 +23,10 @@\n \n public class TestEntityListeners extends SingleEMFTestCase {\n \n+    private static final int ENTITY_LISTENER_ENTITY = 1;\n+    private static final int GLOBAL_LISTENER_ENTITY = 2;\n+    private static final int DUPLICATE_LISTENER_ENTITY = 3;\n+    \n     public void setUp() {\n         setUp(CLEAR_TABLES);\n         ListenerImpl.prePersistCount = 0;\n@@ -40,22 +44,38 @@ protected String getPersistenceUnitName() {\n     }\n \n     public void testEntityListeners() {\n-        helper(true);\n+        helper(ENTITY_LISTENER_ENTITY);\n     }\n \n     public void testGlobalListeners() {\n-        helper(false);\n+        helper(GLOBAL_LISTENER_ENTITY);\n+    }\n+    \n+    public void testDuplicateListeners() {\n+        super.setUp(CLEAR_TABLES, DuplicateListenerEntity.class, \n+            \"openjpa.Callbacks\", \"AllowsDuplicateListener=false\");\n+        assertFalse(emf.getConfiguration().getCallbackOptionsInstance()\n+            .getAllowsDuplicateListener());\n+        helper(DUPLICATE_LISTENER_ENTITY);\n     }\n \n-    public void helper(boolean entityListeners) {\n+    public void helper(int entityListeners) {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         try {\n             em.getTransaction().begin();\n-            ListenerTestEntity o;\n-            if (entityListeners)\n+            ListenerTestEntity o = null;\n+            switch (entityListeners) {\n+            case ENTITY_LISTENER_ENTITY:\n                 o = new EntityListenerEntity();\n-            else\n+                break;\n+            case GLOBAL_LISTENER_ENTITY:\n                 o = new GlobalListenerEntity();\n+                break;\n+            case DUPLICATE_LISTENER_ENTITY:\n+                o = new DuplicateListenerEntity();\n+                break;\n+                \n+            }\n             em.persist(o);\n \n             assertStatus(1, 0, 0, 0, 0, 0, 0);\n@@ -68,11 +88,18 @@ public void helper(boolean entityListeners) {\n \n             em = emf.createEntityManager();\n             em.getTransaction().begin();\n-            if (entityListeners)\n+            switch (entityListeners) {\n+            case ENTITY_LISTENER_ENTITY:\n                 o = em.find(EntityListenerEntity.class, id);\n-            else\n+                break;\n+            case GLOBAL_LISTENER_ENTITY:\n                 o = em.find(GlobalListenerEntity.class, id);\n-\n+                break;\n+            case DUPLICATE_LISTENER_ENTITY:\n+                o = em.find(DuplicateListenerEntity.class, id);\n+                break;\n+                \n+            }\n             assertNotNull(o);\n             assertStatus(1, 1, 0, 0, 0, 0, 1);\n "},{"sha":"87dcb4f3cc66d32a282346060fa475adda12fd12","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -34,6 +34,9 @@\n     <entity class=\"EntityListenerEntity\">\n         <exclude-default-listeners/>\n     </entity>\n+    <entity class=\"DuplicateListenerEntity\">\n+        <exclude-default-listeners/>\n+    </entity>\n     <entity class=\"Message\">\n         <exclude-default-listeners/>\n     </entity>"},{"sha":"d5c76d4e9aa9896df726be3b32866ced89ac8022","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -100,6 +100,7 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.DuplicateListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\""},{"sha":"ab776e4e40fbdbeb8ca07db6ca09f62af60f92cf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -855,10 +855,20 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n     private Collection<LifecycleCallbacks>[] parseEntityListeners\n         (ClassMetaData meta, EntityListeners listeners) {\n         Class<?>[] classes = listeners.value();\n+        Collection<Class<?>> listenerColl = null;\n         Collection<LifecycleCallbacks>[] parsed = null;\n-        for (Class<?> cls : classes)\n+        for (Class<?> cls : classes) {\n+            if (!_conf.getCallbackOptionsInstance().getAllowsDuplicateListener()) {\n+                if (listenerColl == null)\n+                    listenerColl = new ArrayList<Class<?>>();\n+                if (listenerColl.contains(cls)) \n+                    continue;\n+                listenerColl.add(cls);\n+            }\n+            \n             parsed = parseCallbackMethods(cls, parsed, true, true,\n                 getRepository());\n+        }\n         return parsed;\n     }\n "},{"sha":"10ac2b31783102419cc42bddf079124a1433f76b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f69da242687ffaeec7840c587f6f658e2f3cb283/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=f69da242687ffaeec7840c587f6f658e2f3cb283","patch":"@@ -208,6 +208,7 @@\n \n     private Class<?> _listener = null;\n     private Collection<LifecycleCallbacks>[] _callbacks = null;\n+    private Collection<Class<?>> _listeners = null;\n     private int[] _highs = null;\n     private boolean _isXMLMappingMetaDataComplete = false;\n \n@@ -1831,6 +1832,14 @@ private boolean startExcludeSuperclassListeners(Attributes attrs)\n     private boolean startEntityListener(Attributes attrs)\n         throws SAXException {\n         _listener = classForName(attrs.getValue(\"class\"));\n+        if (!_conf.getCallbackOptionsInstance().getAllowsDuplicateListener()) {\n+            if (_listeners == null)\n+                _listeners = new ArrayList<Class<?>>();\n+            if (_listeners.contains(_listener)) \n+                return true;\n+            _listeners.add(_listener);    \n+        }\n+            \n         boolean system = currentElement() == null;\n         Collection<LifecycleCallbacks>[] parsed =\n             AnnotationPersistenceMetaDataParser.parseCallbackMethods(_listener,"}]}

