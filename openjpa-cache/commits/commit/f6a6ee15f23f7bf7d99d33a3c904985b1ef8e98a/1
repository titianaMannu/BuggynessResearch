{"sha":"f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2YTZlZTE1ZjIzZjdiZjdkOTlkMzNhM2M5MDQ5ODViMWVmOGU5OGE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-19T23:28:45Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-19T23:28:45Z"},"message":"OPENJPA-1394 - DB2 supports Order By clause with recording locking using \"WITH R*\" construct. By enabling this feature in the DB2 dictionary, row locking can be perform with the fetch and eliminate the time window other thread snike in to fetch the same row.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@882358 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6bfce7bc317011c8cddeade7a85eee4052eb421e","url":"https://api.github.com/repos/apache/openjpa/git/trees/6bfce7bc317011c8cddeade7a85eee4052eb421e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","html_url":"https://github.com/apache/openjpa/commit/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/comments","author":null,"committer":null,"parents":[{"sha":"0291158f589290114dc031614f9595e81bc30b10","url":"https://api.github.com/repos/apache/openjpa/commits/0291158f589290114dc031614f9595e81bc30b10","html_url":"https://github.com/apache/openjpa/commit/0291158f589290114dc031614f9595e81bc30b10"}],"stats":{"total":416,"additions":416,"deletions":0},"files":[{"sha":"10c43b961e474403aadd88ec13dd08b2f1b90819","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","patch":"@@ -122,6 +122,7 @@ public DB2Dictionary() {\n         supportsDeferredConstraints = false;\n         supportsDefaultDeleteAction = false;\n         supportsAlterTableWithDropColumn = false;\n+        supportsLockingWithOrderClause = true;\n \n         supportsNullTableForGetColumns = false;\n         requiresCastForMathFunctions = true;"},{"sha":"a1fab2d2f48769911f839be046d71e438e25f009","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Department.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Department.java","raw_url":"https://github.com/apache/openjpa/raw/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Department.java?ref=f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import java.io.Externalizable;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+public class Department implements Externalizable {\n+\n+    private int id;\n+\n+    private String name;\n+\n+    private Collection<Employee> employees;\n+\n+    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"department\")\n+    public Collection<Employee> getEmployees() {\n+        return employees;\n+    }\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return this.getClass().getName() + '@'\n+            + Integer.toHexString(System.identityHashCode(this)) + \"[id=\"\n+            + getId() + \"] first=\" + getName();\n+    }\n+\n+    public void readExternal(ObjectInput in) throws IOException,\n+        ClassNotFoundException {\n+        id = in.readInt();\n+        name = (String) in.readObject();\n+    }\n+\n+    public void writeExternal(ObjectOutput out) throws IOException {\n+        out.writeInt(id);\n+        out.writeObject(name);\n+    }\n+}"},{"sha":"e3b10f51470b78e617dfb1c43994b38f56cae622","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Employee.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Employee.java?ref=f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import java.io.Externalizable;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class Employee implements Externalizable {\n+\n+    private int id;\n+\n+    private String firstName;\n+    private String lastName;\n+    private Department department;\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"FK_DEPT\")\n+    public Department getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(Department department) {\n+        this.department = department;\n+    }\n+\n+    public String toString() {\n+        return this.getClass().getName() + '@'\n+            + Integer.toHexString(System.identityHashCode(this)) + \"[id=\"\n+            + getId() + \"] first=\" + getFirstName()\n+            + \", last=\" + getLastName();\n+    }\n+\n+    public void readExternal(ObjectInput in) throws IOException,\n+        ClassNotFoundException {\n+        id = in.readInt();\n+        firstName = (String) in.readObject();\n+        lastName = (String) in.readObject();\n+    }\n+\n+    public void writeExternal(ObjectOutput out) throws IOException {\n+        out.writeInt(id);\n+        out.writeObject(firstName);\n+        out.writeObject(lastName);\n+    }\n+}"},{"sha":"cacfd05b0da87623122149d3032be7d15b90d3ca","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","patch":"@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.PessimisticLockException;\n+import javax.persistence.Query;\n+import javax.persistence.QueryTimeoutException;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test Pessimistic Lock and exception behavior against EntityManager and Query interface methods.\n+ */\n+public class TestPessimisticLocks extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setSupportedDatabases(\n+//                org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n+//                org.apache.openjpa.jdbc.sql.OracleDictionary.class,\n+                org.apache.openjpa.jdbc.sql.DB2Dictionary.class);\n+        if (isTestsDisabled()) {\n+            return;\n+        }\n+\n+        setUp(Employee.class, Department.class, \"openjpa.LockManager\", \"mixed\");\n+        String empTable = getMapping(Employee.class).getTable().getFullName();\n+        String deptTable = getMapping(Department.class).getTable().getFullName();\n+\n+        EntityManager em = null;\n+        try {\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+\n+            em.createQuery(\"delete from \" + empTable).executeUpdate();\n+            em.createQuery(\"delete from \" + deptTable).executeUpdate();\n+\n+            em.getTransaction().commit();\n+\n+            Employee e1, e2;\n+            Department d1, d2;\n+            d1 = new Department();\n+            d1.setId(10);\n+            d1.setName(\"D10\");\n+\n+            e1 = new Employee();\n+            e1.setId(1);\n+            e1.setDepartment(d1);\n+            e1.setFirstName(\"first.1\");\n+            e1.setLastName(\"last.1\");\n+\n+            d2 = new Department();\n+            d2.setId(20);\n+            d2.setName(\"D20\");\n+\n+            e2 = new Employee();\n+            e2.setId(2);\n+            e2.setDepartment(d2);\n+            e2.setFirstName(\"first.2\");\n+            e2.setLastName(\"last.2\");\n+\n+            em.getTransaction().begin();\n+            em.persist(d1);\n+            em.persist(d2);\n+            em.persist(e1);\n+            em.persist(e2);\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (em != null && em.isOpen()) {\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Test a find with pessimistic lock after a query with pessimistic lock and expect PessimisticLockException.\n+     */\n+    public void testFindWithLockTimeoutAfterQueryWithPessimisticLocks() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        try {\n+            em1.getTransaction().begin();\n+\n+            Query query = em1.createQuery(\n+                    \"select e from Employee e where e.id < 10 order by e.id\").setFirstResult(1);\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            List<Employee> q = query.getResultList();\n+            assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n+            assertEquals(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName(), \"first.2\");\n+\n+            em2.getTransaction().begin();\n+\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (QueryTimeoutException e) {            \n+            // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n+            // Remove this when the problem is fixed\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if( em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+\n+        try {\n+            em1.getTransaction().begin();\n+\n+            Query query = em1.createQuery(\n+                    \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            List<Department> q = query.getResultList();\n+            assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n+            assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n+\n+            em2.getTransaction().begin();\n+\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            Employee emp = em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n+            assertNotNull(\"Query locks department but find locks Employee.\", emp);\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (QueryTimeoutException e) {            \n+            // TODO: This is the current unexpected exception due to OPENJPA-991. Remove this when the problem is fixed \n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (PessimisticLockException e) {\n+            // TODO: This is the expected exception but will be fixed under OPENJPA-991\n+//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if( em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+        em1.close();\n+        em2.close();\n+    }\n+\n+    /*\n+     * Test a query with pessimistic lock after a find with pessimistic lock and expect PessimisticLockException.\n+     */\n+    public void testQueryAfterFindWithPessimisticLocks() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        try {\n+            em2.getTransaction().begin();\n+\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n+\n+            em1.getTransaction().begin();\n+\n+            Query query = em1.createQuery(\n+                    \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            List<Department> q = query.getResultList();\n+\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (PessimisticLockException e) {\n+            // This is the expected exception.\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if (em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+        em1.close();\n+        em2.close();\n+    }\n+\n+    /*\n+     * Test a query with pessimistic lock with query timeout set after a find\n+     * with pessimistic lock and expect QueryTimeoutException.\n+     */\n+    public void testQueryWithQueryTimeoutAfterFindWithPessimisticLocks() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        try {\n+            em2.getTransaction().begin();\n+\n+            Map<String,Object> map = new HashMap<String,Object>();\n+            map.put(\"javax.persistence.lock.timeout\", 2000);\n+            em2.find(Employee.class, 1, LockModeType.PESSIMISTIC_READ, map);\n+\n+            em1.getTransaction().begin();\n+\n+            Query query = em1.createQuery(\n+                    \"select e.department from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n+            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+            query.setHint(\"javax.persistence.query.timeout\", 2000);\n+            List<Department> q = query.getResultList();\n+\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n+        } catch (QueryTimeoutException e) {            \n+            // This is the expected exception.\n+        } catch (Exception ex) {\n+            fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n+        } finally {\n+            if( em1.getTransaction().isActive())\n+                em1.getTransaction().rollback();\n+            if( em2.getTransaction().isActive())\n+                em2.getTransaction().rollback();\n+        }\n+        em1.close();\n+        em2.close();\n+    }\n+}"}]}

