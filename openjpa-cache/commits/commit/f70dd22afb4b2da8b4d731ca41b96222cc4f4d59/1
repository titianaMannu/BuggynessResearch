{"sha":"f70dd22afb4b2da8b4d731ca41b96222cc4f4d59","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3MGRkMjJhZmI0YjJkYThiNGQ3MzFjYTQxYjk2MjIyY2M0ZjRkNTk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-11-11T15:33:58Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-11-11T15:33:58Z"},"message":"OPENJPA-2073 Tolerate conf exception for no data source configuration so that live db2 connection is not required for MappingTool invocation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1200919 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1d8e0d93cece2518499c1081c4c47ce1fdcaeff","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1d8e0d93cece2518499c1081c4c47ce1fdcaeff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f70dd22afb4b2da8b4d731ca41b96222cc4f4d59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f70dd22afb4b2da8b4d731ca41b96222cc4f4d59","html_url":"https://github.com/apache/openjpa/commit/f70dd22afb4b2da8b4d731ca41b96222cc4f4d59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f70dd22afb4b2da8b4d731ca41b96222cc4f4d59/comments","author":null,"committer":null,"parents":[{"sha":"db9849db29a9f79d97884a2d6fae2dd0f9f23db1","url":"https://api.github.com/repos/apache/openjpa/commits/db9849db29a9f79d97884a2d6fae2dd0f9f23db1","html_url":"https://github.com/apache/openjpa/commit/db9849db29a9f79d97884a2d6fae2dd0f9f23db1"}],"stats":{"total":45,"additions":27,"deletions":18},"files":[{"sha":"919d3c03775ed9c0fea496a9149c368f249698d6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":27,"deletions":18,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f70dd22afb4b2da8b4d731ca41b96222cc4f4d59/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f70dd22afb4b2da8b4d731ca41b96222cc4f4d59/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=f70dd22afb4b2da8b4d731ca41b96222cc4f4d59","patch":"@@ -55,6 +55,7 @@\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.UserException;\n \n import serp.util.Strings;\n \n@@ -1107,12 +1108,18 @@ public String getDefaultSchemaName()  {\n             try {\n                 String str = \"SELECT CURRENT SCHEMA FROM \" + SYSDUMMY;\n                 conn = getConnection(); \n-                stmnt = conn.createStatement();\n-                rs = stmnt.executeQuery(str);\n-                if (rs.next()) {\n-                    String currSchema = rs.getString(1);\n-                    if (currSchema != null) {\n-                        setDefaultSchemaName(currSchema.trim());\n+                if (conn != null) {\n+                    stmnt = conn.createStatement();\n+                    rs = stmnt.executeQuery(str);\n+                    if (rs.next()) {\n+                        String currSchema = rs.getString(1);\n+                        if (currSchema != null) {\n+                            setDefaultSchemaName(currSchema.trim());\n+                        }\n+                    }\n+                } else {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"can_not_get_current_schema\", \"Unable to obtain a datasource\"));\n                     }\n                 }\n             } catch (SQLException e) {\n@@ -1127,7 +1134,6 @@ public String getDefaultSchemaName()  {\n                         // ignore\n                     }\n                 }\n-\n                 if (stmnt != null) {\n                     try {\n                         stmnt.close();\n@@ -1155,22 +1161,25 @@ public String getDefaultSchemaName()  {\n      * In practice this method is only called by getDefaultSchemaName which in turn is only used by the schema tool.\n      * \n      * @throws SQLException If neither datasource is available.\n-     * @return A connection which may be used to obtain the default schema name. Callers do not need to check for null. \n+     * @return A connection which may be used to obtain the default schema name. \n      */\n     private Connection getConnection() throws SQLException {\n-        // try to obtain a connection from the primary datasource \n-        DataSource ds = conf.getDataSource(null);\n-        \n-        if(ds == null) {\n-            // use datasource 2 if available\n-            ds = conf.getDataSource2(null);\n+    \tDataSource  ds = null;\n+    \ttry {\n+            // try to obtain a connection from the primary datasource \n+            ds = conf.getDataSource(null);\n+    \t} catch (UserException uex) {\n+    \t}\n+    \tif (ds==null) {\n+        \ttry {\n+                // use datasource 2 if available\n+                ds = conf.getDataSource2(null);\n+        \t} catch (UserException uex2) {\n+        \t}\n         }\n-        \n         if (ds != null) {\n             return ds.getConnection();\n         }\n-        \n-        // throw\n-        throw new SQLException(\"Unable to obtain a datasource\");\n+        return null;\n     }\n }"}]}

