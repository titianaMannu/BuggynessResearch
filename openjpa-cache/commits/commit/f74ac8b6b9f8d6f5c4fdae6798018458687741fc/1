{"sha":"f74ac8b6b9f8d6f5c4fdae6798018458687741fc","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3NGFjOGI2YjlmOGQ2ZjVjNGZkYWU2Nzk4MDE4NDU4Njg3NzQxZmM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-30T02:00:40Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-30T02:00:40Z"},"message":"Prevent reentrant calls to transform() in order to prevent attempts to enhance OpenJPA libraries (for cases where OpenJPA falls under the control of the enhancing class loader).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@451517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b34564021ecd7089774f8bb7c2d2f5196808be20","url":"https://api.github.com/repos/apache/openjpa/git/trees/b34564021ecd7089774f8bb7c2d2f5196808be20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f74ac8b6b9f8d6f5c4fdae6798018458687741fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f74ac8b6b9f8d6f5c4fdae6798018458687741fc","html_url":"https://github.com/apache/openjpa/commit/f74ac8b6b9f8d6f5c4fdae6798018458687741fc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f74ac8b6b9f8d6f5c4fdae6798018458687741fc/comments","author":null,"committer":null,"parents":[{"sha":"cc25d2a53624e545694a63467de78969bafffa01","url":"https://api.github.com/repos/apache/openjpa/commits/cc25d2a53624e545694a63467de78969bafffa01","html_url":"https://github.com/apache/openjpa/commit/cc25d2a53624e545694a63467de78969bafffa01"}],"stats":{"total":41,"additions":32,"deletions":9},"files":[{"sha":"642a4920e3917dd28f45c6b2b7166ac8276e2f6f","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":32,"deletions":9,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/f74ac8b6b9f8d6f5c4fdae6798018458687741fc/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/f74ac8b6b9f8d6f5c4fdae6798018458687741fc/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=f74ac8b6b9f8d6f5c4fdae6798018458687741fc","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.util.ClassResolver;\n import org.apache.openjpa.util.GeneralException;\n import serp.bytecode.Project;\n import serp.bytecode.lowlevel.ConstantPoolTable;\n@@ -43,9 +44,10 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (PCClassFileTransformer.class);\n \n+    private boolean _transforming = false;\n     private final MetaDataRepository _repos;\n     private final PCEnhancer.Flags _flags;\n-    private final ClassLoader _loader;\n+    private final ClassLoader _tmpLoader;\n     private final Log _log;\n     private final Set _names;\n \n@@ -86,24 +88,42 @@ public PCClassFileTransformer(MetaDataRepository repos, Options opts,\n      * if none are configured\n      */\n     public PCClassFileTransformer(MetaDataRepository repos,\n-        PCEnhancer.Flags flags, ClassLoader loader, boolean devscan) {\n+        PCEnhancer.Flags flags, ClassLoader tmpLoader, boolean devscan) {\n         _repos = repos;\n-        _log =\n-            repos.getConfiguration().getLog(OpenJPAConfiguration.LOG_ENHANCE);\n+        _tmpLoader = tmpLoader;\n+\n+        // ensure that we are using the temporary class loader for\n+        // all class resolution\n+        repos.getConfiguration().setClassResolver(new ClassResolver() {\n+            public ClassLoader getClassLoader(Class context, ClassLoader env) {\n+                return _tmpLoader;\n+            }\n+        });\n+\n+        _log = repos.getConfiguration().\n+            getLog(OpenJPAConfiguration.LOG_ENHANCE);\n         _flags = flags;\n-        _loader = loader;\n \n-        _names = repos.getPersistentTypeNames(devscan, loader);\n+        _names = repos.getPersistentTypeNames(devscan, tmpLoader);\n         if (_names == null && _log.isInfoEnabled())\n             _log.info(_loc.get(\"runtime-enhance-pcclasses\"));\n     }\n \n     public byte[] transform(ClassLoader loader, String className,\n         Class redef, ProtectionDomain domain, byte[] bytes)\n         throws IllegalClassFormatException {\n-        if (loader == _loader)\n+\n+        if (loader == _tmpLoader)\n+            return null;\n+\n+        // prevent re-entrant calls, which can occur if the enhanceing\n+        // loader is used to also load OpenJPA libraries; this is to prevent \n+        // recursive enhancement attempts for internal openjpa libraries\n+        if (_transforming)\n             return null;\n \n+        _transforming = true;\n+\n         try {\n             Boolean enhance = needsEnhance(className, redef, bytes);\n             if (enhance != null && _log.isTraceEnabled())\n@@ -114,7 +134,7 @@ public PCClassFileTransformer(MetaDataRepository repos,\n \n             PCEnhancer enhancer = new PCEnhancer(_repos.getConfiguration(),\n                 new Project().loadClass(new ByteArrayInputStream(bytes),\n-                    _loader), _repos);\n+                    _tmpLoader), _repos);\n             enhancer.setAddDefaultConstructor(_flags.addDefaultConstructor);\n             enhancer.setEnforcePropertyRestrictions\n                 (_flags.enforcePropertyRestrictions);\n@@ -129,6 +149,8 @@ public PCClassFileTransformer(MetaDataRepository repos,\n             if (t instanceof IllegalClassFormatException)\n                 throw (IllegalClassFormatException) t;\n             throw new GeneralException(t);\n+        } finally {\n+            _transforming = false;\n         }\n     }\n \n@@ -157,7 +179,8 @@ private Boolean needsEnhance(String clsName, Class redef, byte[] bytes) {\n             return Boolean.FALSE;\n \n         try {\n-            Class c = Class.forName(clsName.replace('/', '.'), false, _loader);\n+            Class c = Class.forName(clsName.replace('/', '.'), false,\n+                _tmpLoader);\n             if (_repos.getMetaData(c, null, false) != null)\n                 return Boolean.TRUE;\n             return null;"}]}

