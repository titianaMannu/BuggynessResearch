{"sha":"f74e98808838fd02f31b1fb4856821920b1df536","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3NGU5ODgwODgzOGZkMDJmMzFiMWZiNDg1NjgyMTkyMGIxZGY1MzY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-12T18:48:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-12T18:48:10Z"},"message":"OPENJPA-1341: PostRemove callback trigger points\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@824454 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"765ace43769e74ab63a0772530044791eeb62656","url":"https://api.github.com/repos/apache/openjpa/git/trees/765ace43769e74ab63a0772530044791eeb62656"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f74e98808838fd02f31b1fb4856821920b1df536","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f74e98808838fd02f31b1fb4856821920b1df536","html_url":"https://github.com/apache/openjpa/commit/f74e98808838fd02f31b1fb4856821920b1df536","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f74e98808838fd02f31b1fb4856821920b1df536/comments","author":null,"committer":null,"parents":[{"sha":"87e07a9d47a05cb6ee72c80d932a20023a296a15","url":"https://api.github.com/repos/apache/openjpa/commits/87e07a9d47a05cb6ee72c80d932a20023a296a15","html_url":"https://github.com/apache/openjpa/commit/87e07a9d47a05cb6ee72c80d932a20023a296a15"}],"stats":{"total":230,"additions":225,"deletions":5},"files":[{"sha":"86d42b8368abbb0f881c8965085bad4173bdf6b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=f74e98808838fd02f31b1fb4856821920b1df536","patch":"@@ -1935,7 +1935,7 @@ public void afterCompletion(int status) {\n \n             if ((_autoDetach & DETACH_COMMIT) != 0)\n                 detachAllInternal(null);\n-            else if (status == Status.STATUS_ROLLEDBACK \n+            else if (status == Status.STATUS_ROLLEDBACK\n                 && (_autoDetach & DETACH_ROLLBACK) != 0) {\n                 detachAllInternal(null);\n             }\n@@ -2313,7 +2313,7 @@ protected void endTransaction(int status) {\n             _derefCache = null;\n         }\n \n-        // peform commit or rollback state transitions on each instance\n+        // perform commit or rollback state transitions on each instance\n         StateManagerImpl sm;\n         for (Iterator itr = transStates.iterator(); itr.hasNext();) {\n             sm = (StateManagerImpl) itr.next();\n@@ -2323,8 +2323,13 @@ protected void endTransaction(int status) {\n                     // (and therefore deleted) to un-deref\n                     sm.setDereferencedDependent(false, false);\n                     sm.rollback();\n-                } else\n+                } else {\n+                    if (sm.getPCState() == PCState.PNEWDELETED || sm.getPCState() == PCState.PDELETED) {\n+                        fireLifecycleEvent(sm.getPersistenceCapable(), null, sm.getMetaData(), \n+                            LifecycleEvent.AFTER_DELETE_PERFORMED);\n+                    }\n                     sm.commit();\n+                }\n             } catch (RuntimeException re) {\n                 exceps = add(exceps, re);\n             }\n@@ -3907,7 +3912,7 @@ protected Collection getManagedStates() {\n     /**\n      * Return a copy of all transactional state managers.\n      */\n-    protected Collection getTransactionalStates() {\n+    protected Collection<StateManagerImpl> getTransactionalStates() {\n         if (!hasTransactionalObjects())\n             return Collections.EMPTY_SET;\n         return _transCache.copy();"},{"sha":"d0ba55a1fededc855e8e8db475c95c7188b3af9f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jta/ContainerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jta/ContainerTest.java","raw_url":"https://github.com/apache/openjpa/raw/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jta/ContainerTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jta/ContainerTest.java?ref=f74e98808838fd02f31b1fb4856821920b1df536","patch":"@@ -25,7 +25,7 @@\n \n /**\n  * Simulates a container transaction around a test method. \n- * \n+ * <br>\n  * The concrete tests derived from this class must adhere to the following guidelines:\n  * <LI>They must configure openjpa.ManagedRuntime in setUp() properties as\n  * to <code>org.apache.openjpa.jta.JTAManagedRuntime</code> "},{"sha":"e9b5ea99197b13a6b5fb3bb33be33caa63f5ed56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/PostRemoveCallbackEntity.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/PostRemoveCallbackEntity.java","raw_url":"https://github.com/apache/openjpa/raw/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/PostRemoveCallbackEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/PostRemoveCallbackEntity.java?ref=f74e98808838fd02f31b1fb4856821920b1df536","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.event;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.PostRemove;\n+\n+/**\n+ * An entity for testing PostRemove callback.\n+ * \n+ * @see TestPostRemove\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class PostRemoveCallbackEntity {\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+    \n+    private String name;\n+    \n+    transient long postRemoveTime;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+    \n+    @PostRemove\n+    public void postRemove() {\n+        if (postRemoveTime != 0) {\n+            throw new RuntimeException(\".postRemove has been called more than once\");\n+        }\n+//        if (id == 0) {\n+//            throw new RuntimeException(\" must have an identity value assigned on PostRemove callback\");\n+//        }\n+        postRemoveTime = System.nanoTime();\n+    }\n+    \n+    public long getPostRemoveTime() {\n+        return postRemoveTime;\n+    }\n+}"},{"sha":"30a04e486bdf642d89efab2bf88e03782ec2b5f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestPostRemove.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestPostRemove.java","raw_url":"https://github.com/apache/openjpa/raw/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestPostRemove.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestPostRemove.java?ref=f74e98808838fd02f31b1fb4856821920b1df536","patch":"@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.event;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jta.ContainerTest;\n+\n+/**\n+ * Tests PostRemove callback within a pseudo-container environment.\n+ * \n+ * According to JPA 2.0 Specification Section 3.5.2 (edited for PostRemove only and readability) \n+ * \n+ * \"a) The PostRemove callback method is invoked for an entity after the entity has been removed. \n+ * \n+ *  b) This callback will also be invoked on all entities to which these operations are cascaded. \n+ *  \n+ *  c) The PostRemove method will be invoked after the database delete operation. The database operation \n+ *     may occur directly after the remove operation have been invoked or they may occur directly after \n+ *     a flush operation has occurred (which may be at the end of the transaction).\" \n+ *  <br>\n+ *  The test runs within a test harness that emulates application managed transaction semantics\n+ *  of a container. \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestPostRemove extends ContainerTest {\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(PostRemoveCallbackEntity.class);\n+    }\n+    \n+    @Override\n+    public String getPersistenceUnitName() {\n+        return \"post-remove\";\n+    }\n+    \n+    public void testPostRemoveInvokedOnlyAfterDatabaseDeleteWithLogicalFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.joinTransaction();\n+        PostRemoveCallbackEntity pc = new PostRemoveCallbackEntity();\n+        em.persist(pc);\n+        em.flush();\n+        em.remove(pc);\n+        commit();\n+        assertTrue(\"PostRemove not called after commit\", isPostRemovedInvoked(pc) \n+                && pc.getPostRemoveTime() <= System.nanoTime());\n+    }\n+    \n+    public void testPostRemoveInvokedAfterDatabaseDeleteWithoutFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.joinTransaction();\n+        PostRemoveCallbackEntity pc = new PostRemoveCallbackEntity();\n+        em.persist(pc);\n+        em.remove(pc);\n+        assertFalse(\"PostRemove called before commit\", isPostRemovedInvoked(pc));\n+        commit();\n+        assertTrue(\"PostRemove not called after commit\", pc.getPostRemoveTime() <= System.nanoTime());\n+    }\n+    \n+    public void testPostRemoveNotInvokedAfterRollback() {\n+        EntityManager em = emf.createEntityManager();\n+        em.joinTransaction();\n+        PostRemoveCallbackEntity pc = new PostRemoveCallbackEntity();\n+        em.persist(pc);\n+        em.remove(pc);\n+        assertFalse(\"PostRemove called before rollback\", isPostRemovedInvoked(pc));\n+        rollback();\n+        assertTrue(\"PostRemove called after rollback\", pc.getPostRemoveTime() <= System.nanoTime());\n+    }\n+    \n+    public void testPostRemoveNotInvokedAfterRollbackWithIntermediateFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.joinTransaction();\n+        PostRemoveCallbackEntity pc = new PostRemoveCallbackEntity();\n+        em.persist(pc);\n+        em.flush();\n+        assertFalse(\"PostRemove called after flush\", isPostRemovedInvoked(pc));\n+        em.remove(pc);\n+        assertFalse(\"PostRemove called before rollback\", isPostRemovedInvoked(pc));\n+        rollback();\n+        assertTrue(\"PostRemove called after rollback\", pc.getPostRemoveTime() <= System.nanoTime());\n+    }\n+    \n+    public void testPostRemoveInvokedOnFlushThatIssuesDatabaseDelete() {\n+        EntityManager em = emf.createEntityManager();\n+        em.joinTransaction();\n+        PostRemoveCallbackEntity pc = new PostRemoveCallbackEntity();\n+        em.persist(pc);\n+        commit();\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        em.joinTransaction();\n+        pc = em.find(PostRemoveCallbackEntity.class, pc.getId());\n+        assertNotNull(pc);\n+        em.remove(pc);\n+        assertFalse(\"PostRemove called after logical remove\", isPostRemovedInvoked(pc));\n+        em.flush();\n+        assertTrue(\"PostRemove not called after delete flush\", isPostRemovedInvoked(pc));\n+        commit();\n+        assertTrue(\"PostRemove not called after commit\", pc.getPostRemoveTime() <= System.nanoTime());\n+    }\n+\n+\n+    public void testPostRemoveNotInvokedAfterDatabaseInsert() {\n+        EntityManager em = emf.createEntityManager();\n+        em.joinTransaction();\n+        PostRemoveCallbackEntity pc = new PostRemoveCallbackEntity();\n+        em.persist(pc);\n+        assertFalse(\"PostRemove called before commit\", isPostRemovedInvoked(pc));\n+        commit();\n+        assertFalse(\"PostRemove called after commit\", isPostRemovedInvoked(pc));\n+    }\n+    \n+    boolean isPostRemovedInvoked(PostRemoveCallbackEntity pc) {\n+        return pc.getPostRemoveTime() != 0;\n+    }\n+}"},{"sha":"4adc5cbc2b6f80f95f5ffe6fafbb0fe272e795c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=f74e98808838fd02f31b1fb4856821920b1df536","patch":"@@ -51,6 +51,7 @@\n      * subclass.\n      */\n     public void setUp() throws Exception {\n+        super.setUp();\n         setUp(new Object[0]);\n     }\n "},{"sha":"b3e6872282be80fd0e3fbb4c69b1af8c294d0165","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/f74e98808838fd02f31b1fb4856821920b1df536/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=f74e98808838fd02f31b1fb4856821920b1df536","patch":"@@ -242,6 +242,14 @@\n                 value=\"buildSchema(SchemaAction='drop,add')\"/>\n         </properties>\n     </persistence-unit>\n+    \n+    <persistence-unit name=\"post-remove\" transaction-type=\"JTA\">\n+        <class>org.apache.openjpa.persistence.event.PostRemoveCallbackEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(SchemaAction='drop,add')\"/>\n+            <property name=\"openjpa.ManagedRuntime\" value=\"org.apache.openjpa.jta.JTAManagedRuntime\"/>\n+        </properties>\n+    </persistence-unit>\n \n </persistence>\n "}]}

