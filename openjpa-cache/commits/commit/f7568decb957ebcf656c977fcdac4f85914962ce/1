{"sha":"f7568decb957ebcf656c977fcdac4f85914962ce","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3NTY4ZGVjYjk1N2ViY2Y2NTZjOTc3ZmNkYWM0Zjg1OTE0OTYyY2U=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-21T15:57:00Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-21T15:57:00Z"},"message":"OPENJPA-859: Recommitting 818928. Added new test scenario for partial xml defined embeddable that implements Serializable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828072 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2955ec395dea23f18d277147c04e0904c7fa16bc","url":"https://api.github.com/repos/apache/openjpa/git/trees/2955ec395dea23f18d277147c04e0904c7fa16bc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f7568decb957ebcf656c977fcdac4f85914962ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f7568decb957ebcf656c977fcdac4f85914962ce","html_url":"https://github.com/apache/openjpa/commit/f7568decb957ebcf656c977fcdac4f85914962ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f7568decb957ebcf656c977fcdac4f85914962ce/comments","author":null,"committer":null,"parents":[{"sha":"c753ce22784c82999290c7819276060f0dc789fe","url":"https://api.github.com/repos/apache/openjpa/commits/c753ce22784c82999290c7819276060f0dc789fe","html_url":"https://github.com/apache/openjpa/commit/c753ce22784c82999290c7819276060f0dc789fe"}],"stats":{"total":202,"additions":188,"deletions":14},"files":[{"sha":"2af56454fa7e9b1cffb62232b01a49f430d0dce5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.entity.MixedMappingLocation;\n+import org.apache.openjpa.persistence.entity.MixedMappingLocationEmbeddedId;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+// org.apache.openjpa.persistence.TestMixedMappingLocation\n+@Entity\n+public class TestMixedMappingLocation extends SingleEMFTestCase {\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"test_parsing\";\n+    }\n+    public void setUp() {\n+        setUp(DROP_TABLES,MixedMappingLocationEmbeddedId.class, MixedMappingLocation.class);\n+    }\n+    /**\n+     * Testcase for added OPENJPA859.\n+     * \n+     * This scenario is testing whether the default annotations are being generated for a class that\n+     * isn't annotated with a persistence class type (ie: @Entity, @MappedSuperclass, @Embeddable),\n+     * but it is in a mapping file.\n+     * \n+     * @throws Exception\n+     */\n+    public void testMixedOrmAnno() throws Exception {\n+        OpenJPAEntityManagerSPI  em = emf.createEntityManager();\n+    }\n+}"},{"sha":"a50af06768cad856857ef19eadccb360065bfc7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocation.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocation.java","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocation.java?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.entity;\n+\n+import javax.persistence.Basic;\n+\n+/**\n+ * This class doesn't have an @Entity and @Basic on purpose.\n+ */\n+public class MixedMappingLocation {\n+    MixedMappingLocationEmbeddedId id;\n+\n+    String basic1;\n+\n+    @Basic\n+    String basic2;\n+}"},{"sha":"47bea3d11a3b38927078f887f2848c231134a14a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.entity;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Transient;\n+\n+public class MixedMappingLocationEmbeddedId implements Serializable {\n+    @Transient\n+    private static final long serialVersionUID = 1L;\n+    @Basic\n+    private int id;\n+    @Basic\n+    private String country;\n+\n+    public MixedMappingLocationEmbeddedId() {\n+        // TODO Auto-generated constructor stub\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        // TODO Auto-generated method stub\n+        return super.equals(obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        // TODO Auto-generated method stub\n+        return super.hashCode();\n+    }\n+}"},{"sha":"ead3a400ab1fe5bd3828fb45a211ec2fe58259d7","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/orm.xml","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/resources/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/resources/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/orm.xml?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n+    <entity class=\"org.apache.openjpa.persistence.entity.MixedMappingLocation\">\n+\t\t<attributes>\n+\t\t\t<embedded-id name=\"id\"></embedded-id>\n+\t\t\t<basic name=\"basic1\">\n+\t\t\t\t<column name=\"basic1_override\" length=\"100\"/>\n+\t\t\t</basic>         \n+\t\t</attributes>\n+    </entity>\n+    <embeddable class=\"org.apache.openjpa.persistence.entity.MixedMappingLocationEmbeddedId\"></embeddable>\n+</entity-mappings>"},{"sha":"9ec4908a0d1173040c5ace279208c402725cc024","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -254,7 +254,13 @@\n     \n     <persistence-unit name=\"mdr-pu\">\n         <class>org.apache.openjpa.persistence.meta.MdrTestEntity</class>\n-    </persistence-unit>      \n+    </persistence-unit>    \n+    \n+    <persistence-unit name=\"test_parsing\">\n+\t\t<mapping-file>org/apache/openjpa/persistence/entity/orm.xml</mapping-file>\n+\t\t<class>org.apache.openjpa.persistence.entity.MixedMappingLocation</class>\n+\t\t<class>org.apache.openjpa.persistence.entity.MixedMappingLocationEmbeddedId</class>\t\t\t\n+\t</persistence-unit>  \n \n     <persistence-unit name=\"mapsId-pu\">\n         <mapping-file>org/apache/openjpa/persistence/enhance/identity/mapsId-orm.xml</mapping-file>"},{"sha":"06db4ab93d7b7bf7b6de84448fed5b831ddf1fee","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -491,21 +491,22 @@ private void addSourceMode(Package pkg, int mode) {\n      * Read annotations for the current type.\n      */\n     private ClassMetaData parseClassAnnotations() {\n-        // check immediately whether the user is using any annotations,\n-        // regardless of mode.  this prevents adding non-entity classes to\n-        // repository if we're ignoring these annotations in mapping mode\n-        if (!(AccessController.doPrivileged(J2DoPrivHelper\n-            .isAnnotationPresentAction(_cls, Entity.class))).booleanValue()\n-            && !(AccessController.doPrivileged(J2DoPrivHelper\n-                .isAnnotationPresentAction(_cls, Embeddable.class)))\n+        // Check to see if there is cached metadata for the class that we are currently parsing. It\n+        // is possible that one of the annotations (Entity, Embeddable, MappedSuperclass) is in the\n+        // orm.xml. We still need to look at these files for other annotations and more importantly\n+        // setup defaults (ie: Basic fields).\n+        ClassMetaData m = getRepository().getCachedMetaData(_cls);\n+        if (m == null) {\n+        if (!(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls, Entity.class)))\n                 .booleanValue()\n-            && !(AccessController.doPrivileged(J2DoPrivHelper\n-                .isAnnotationPresentAction(_cls, MappedSuperclass.class)))\n-                .booleanValue())\n-            return null;\n-\n+                && !(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls, Embeddable.class)))\n+                    .booleanValue()\n+                && !(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                    MappedSuperclass.class))).booleanValue())\n+                return null;\n+        }\n         // find / create metadata\n-        ClassMetaData meta = getMetaData();\n+        ClassMetaData meta = (m == null) ? getMetaData() : m;\n         if (meta == null)\n             return null;\n "},{"sha":"d44531564155af47ca77040e63c5355469084695","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f7568decb957ebcf656c977fcdac4f85914962ce/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=f7568decb957ebcf656c977fcdac4f85914962ce","patch":"@@ -1063,6 +1063,7 @@ protected boolean startEmbeddedId(Attributes attrs)\n         fmd.setExplicit(true);\n         fmd.setPrimaryKey(true);\n         fmd.setEmbedded(true);\n+        fmd.setSerialized(false);\n         if (fmd.getEmbeddedMetaData() == null)\n //            fmd.addEmbeddedMetaData();\n             deferEmbeddable(fmd.getDeclaredType(), fmd);"}]}

