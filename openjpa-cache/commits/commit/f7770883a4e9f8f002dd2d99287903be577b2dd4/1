{"sha":"f7770883a4e9f8f002dd2d99287903be577b2dd4","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3NzcwODgzYTRlOWY4ZjAwMmRkMmQ5OTI4NzkwM2JlNTc3YjJkZDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-25T09:19:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-25T09:19:51Z"},"message":"Usability improvements discovered while working on OPENJPA-228. When loading enumerated types in the enhancer, pass them to serp as strings rather than as classes. This permits the use case where a subclass and superclass are both compiled and enhanced, and then the superclass is recompiled, and the subclass and superclass are both listed in persistence.xml, and the enhancer is then invoked.\n\nSimilarly, treat NoSuchMethodErrors that contain the string '.pc' as warnings rather than errors in MetaDataRepository.classForName().\n\nFinally, changed MetaDataRepository errors to stringify internal data sets eagerly, to avoid leaking incorrect information into error messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532273 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67e211dfb11a720eb0d1d36c2d0e77b9930568dc","url":"https://api.github.com/repos/apache/openjpa/git/trees/67e211dfb11a720eb0d1d36c2d0e77b9930568dc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4","html_url":"https://github.com/apache/openjpa/commit/f7770883a4e9f8f002dd2d99287903be577b2dd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4/comments","author":null,"committer":null,"parents":[{"sha":"14ba7eed94c2a637b5619838d95d04d0c32ed517","url":"https://api.github.com/repos/apache/openjpa/commits/14ba7eed94c2a637b5619838d95d04d0c32ed517","html_url":"https://github.com/apache/openjpa/commit/14ba7eed94c2a637b5619838d95d04d0c32ed517"}],"stats":{"total":36,"additions":27,"deletions":9},"files":[{"sha":"e29b96e54f38781a93eb35a6c7c0ff6e55998ad4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/f7770883a4e9f8f002dd2d99287903be577b2dd4/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/f7770883a4e9f8f002dd2d99287903be577b2dd4/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=f7770883a4e9f8f002dd2d99287903be577b2dd4","patch":"@@ -3612,7 +3612,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Collection classes;\n         if (args.length == 0) {\n             log.info(_loc.get(\"running-all-classes\"));\n-            classes = repos.loadPersistentTypes(true, loader);\n+            classes = repos.getPersistentTypeNames(true, loader);\n         } else {\n             ClassArgParser cap = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n@@ -3628,11 +3628,14 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         int status;\n         Class cls;\n         for (Iterator itr = classes.iterator(); itr.hasNext();) {\n-            cls = (Class) itr.next();\n+            Object o = itr.next();\n             if (log.isTraceEnabled())\n-                log.trace(_loc.get(\"enhance-running\", cls));\n+                log.trace(_loc.get(\"enhance-running\", o));\n \n-            bc = project.loadClass(cls);\n+            if (o instanceof String)\n+                bc = project.loadClass((String) o);\n+            else\n+                bc = project.loadClass((Class) o);\n             enhancer = new PCEnhancer(conf, bc, repos);\n             if (writer != null)\n                 enhancer.setBytecodeWriter(writer);"},{"sha":"11a92593c34fe6e351de28cab050d467df2b5d3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/f7770883a4e9f8f002dd2d99287903be577b2dd4/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/f7770883a4e9f8f002dd2d99287903be577b2dd4/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=f7770883a4e9f8f002dd2d99287903be577b2dd4","patch":"@@ -312,7 +312,7 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n \n         // multiple classes may have been defined with the same alias: we\n         // will filter by checking against the current list of the\n-        // persistent types and filted based on which classes are loadable\n+        // persistent types and filter based on which classes are loadable\n         // via the current environment's ClassLoader\n         Set pcNames = getPersistentTypeNames(false, envLoader);\n         Class cls = null;\n@@ -346,7 +346,7 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n         if (_aliases.containsKey(alias)) {\n             if (mustExist)\n                 throw new MetaDataException(_loc.get(\"no-alias-meta\", alias,\n-                    _aliases));\n+                    _aliases.toString()));\n             return null;\n         }\n \n@@ -923,7 +923,7 @@ public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\n         boolean mustExist) {\n         if (oid == null && mustExist)\n             throw new MetaDataException(_loc.get(\"no-oid-meta\", oid, \"?\",\n-                _oids));\n+                _oids.toString()));\n         if (oid == null)\n             return null;\n \n@@ -1235,6 +1235,20 @@ private Class classForName(String name, ClassLoader loader) {\n                 _log.info(_loc.get(\"bad-discover-class\", name));\n             if (_log.isTraceEnabled())\n                 _log.trace(e);\n+        } catch (NoSuchMethodError nsme) {\n+            if (nsme.getMessage().indexOf(\".pc\") == -1)\n+                throw nsme;\n+\n+            // if the error is about a method that uses the PersistenceCapable\n+            // 'pc' method prefix, perform some logging and continue. This\n+            // probably just means that the class is not yet enhanced.\n+            if ((_validate & VALIDATE_RUNTIME) != 0) {\n+                if (_log.isWarnEnabled())\n+                    _log.warn(_loc.get(\"bad-discover-class\", name));\n+            } else if (_log.isInfoEnabled())\n+                _log.info(_loc.get(\"bad-discover-class\", name));\n+            if (_log.isTraceEnabled())\n+                _log.trace(nsme);\n         }\n         return null;\n     }"},{"sha":"ef6aa0a37b35e25caeb8aa2aebdbc65cadb74ae5","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f7770883a4e9f8f002dd2d99287903be577b2dd4/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/f7770883a4e9f8f002dd2d99287903be577b2dd4/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=f7770883a4e9f8f002dd2d99287903be577b2dd4","patch":"@@ -142,8 +142,9 @@ no-meta: No metadata was found for type \"{0}\".  Ensure that the class is \\\n \tif you list your persistent classes, the class is included in your list.\n no-oid-meta: Could not locate metadata for the class using oid \"{0}\" of \\\n \ttype \"{1}\".  Registered oid type mappings: \"{2}\"\n-no-alias-meta: Could not locate metadata for the class using alias \"{0}\". \\\n-\tRegistered alias mappings: \"{1}\"\n+no-alias-meta: Could not locate metadata for the class using alias \"{0}\". This \\\n+\tcould mean that the OpenJPA enhancer or load-time weaver was not run on \\\n+    the type whose alias is \"{0}\". Registered alias mappings: \"{1}\"\n error-registered: An error occurred while processing registered class \"{0}\".\n failed-registered: A potentially serious error occurred while processing \\\n \tregistered class \"{0}\".  Deferring processing of this class until next \\"}]}

