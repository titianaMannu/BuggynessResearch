{"sha":"f7aef4581483be989ba84eed1ea71ce0f043c17c","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3YWVmNDU4MTQ4M2JlOTg5YmE4NGVlZDFlYTcxY2UwZjA0M2MxN2M=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-27T19:24:54Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-27T19:24:54Z"},"message":"OPENJPA-181 : Fix class cast exception by passing along the StoreQuery context\nwhenever we pass around an Executor, so that the StoreQuery and Executor are\nalways matched.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@523046 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ec518fd7d8b0c49afc8fd20780a5125ee2698c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/8ec518fd7d8b0c49afc8fd20780a5125ee2698c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f7aef4581483be989ba84eed1ea71ce0f043c17c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f7aef4581483be989ba84eed1ea71ce0f043c17c","html_url":"https://github.com/apache/openjpa/commit/f7aef4581483be989ba84eed1ea71ce0f043c17c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f7aef4581483be989ba84eed1ea71ce0f043c17c/comments","author":null,"committer":null,"parents":[{"sha":"df02d831e2dce80e0d00ec0febf0c708f02bacb3","url":"https://api.github.com/repos/apache/openjpa/commits/df02d831e2dce80e0d00ec0febf0c708f02bacb3","html_url":"https://github.com/apache/openjpa/commit/df02d831e2dce80e0d00ec0febf0c708f02bacb3"}],"stats":{"total":266,"additions":211,"deletions":55},"files":[{"sha":"81af0567533913f824d8038c3768730eb6e7313b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -108,11 +108,11 @@ public boolean supportsParameterDeclarations() {\n         implements Executor {\n \n         public Number executeDelete(StoreQuery q, Object[] params) {\n-            return q.getContext().deleteInMemory(this, params);\n+            return q.getContext().deleteInMemory(q, this, params);\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n-            return q.getContext().updateInMemory(this, params);\n+            return q.getContext().updateInMemory(q, this, params);\n         }\n \n         public String[] getDataStoreActions(StoreQuery q, Object[] params,"},{"sha":"f025578f9ba7d7cfbf6a81610b65a89442ad8401","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -403,17 +403,19 @@ public void declareParameters(String params) {\n         }\n     }\n \n-    public Number deleteInMemory(StoreQuery.Executor ex, Object[] params) {\n+    public Number deleteInMemory(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params) {\n         try {\n-            return _query.deleteInMemory(ex, params);\n+            return _query.deleteInMemory(q, ex, params);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public Number updateInMemory(StoreQuery.Executor ex, Object[] params) {\n+    public Number updateInMemory(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params) {\n         try {\n-            return _query.updateInMemory(ex, params);\n+            return _query.updateInMemory(q, ex, params);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }"},{"sha":"4340f4ff93a8cc42fd1a45f6f1b43c172fb2bdbc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -679,15 +679,15 @@ public Number executeDelete(StoreQuery q, Object[] params) {\n             Number num = ((ExpressionStoreQuery) q).executeDelete(this, _meta,\n                 _metas, _subs, _facts, _exps, params);\n             if (num == null)\n-                return q.getContext().deleteInMemory(this, params);\n+                return q.getContext().deleteInMemory(q, this, params);\n             return num;\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n             Number num = ((ExpressionStoreQuery) q).executeUpdate(this, _meta,\n                 _metas, _subs, _facts, _exps, params);\n             if (num == null)\n-                return q.getContext().updateInMemory(this, params);\n+                return q.getContext().updateInMemory(q, this, params);\n             return num;\n         }\n "},{"sha":"725359dc3d28de8e415e51fda2a9cf6421f1c8b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -252,13 +252,15 @@\n      * Helper method to delete the objects found by executing a query on\n      * the given executor.\n      */\n-    public Number deleteInMemory(StoreQuery.Executor ex, Object[] params);\n+    public Number deleteInMemory(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params);\n \n     /**\n      * Helper method to update the objects found by executing a query on\n      * the given executor.\n      */\n-    public Number updateInMemory(StoreQuery.Executor ex, Object[] params);\n+    public Number updateInMemory(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params);\n \n     /**\n      * Helper method to instantiate the class with the given name, taking"},{"sha":"aabb34b9b8caace9b7ae49c833a026a0f170104b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":46,"deletions":44,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -558,7 +558,7 @@ public void compile() {\n         try {\n             assertOpen();\n             StoreQuery.Executor ex = compileForExecutor();\n-            getResultPacker(ex);\n+            getResultPacker(_storeQuery, ex);\n             ex.validate(_storeQuery);\n         } finally {\n             unlock();\n@@ -782,17 +782,17 @@ private Object execute(int operation, Object[] params) {\n                 StoreQuery.Executor ex = (isInMemory(operation))\n                     ? compileForInMemory(comp) : compileForDataStore(comp);\n \n-                assertParameters(ex, params);\n+                assertParameters(_storeQuery, ex, params);\n                 if (_log.isTraceEnabled())\n                     logExecution(operation, ex.getParameterTypes(_storeQuery),\n                         params);\n \n                 if (operation == OP_SELECT)\n-                    return execute(ex, params);\n+                    return execute(_storeQuery, ex, params);\n                 if (operation == OP_DELETE)\n-                    return delete(ex, params);\n+                    return delete(_storeQuery, ex, params);\n                 if (operation == OP_UPDATE)\n-                    return update(ex, params);\n+                    return update(_storeQuery, ex, params);\n                 throw new UnsupportedException();\n             } catch (OpenJPAException ke) {\n                 throw ke;\n@@ -826,16 +826,16 @@ private Object execute(int operation, Map params) {\n \n                 Object[] arr = (params.isEmpty()) ? StoreQuery.EMPTY_OBJECTS :\n                     toParameterArray(ex.getParameterTypes(_storeQuery), params);\n-                assertParameters(ex, arr);\n+                assertParameters(_storeQuery, ex, arr);\n                 if (_log.isTraceEnabled())\n                     logExecution(operation, params);\n \n                 if (operation == OP_SELECT)\n-                    return execute(ex, arr);\n+                    return execute(_storeQuery, ex, arr);\n                 if (operation == OP_DELETE)\n-                    return delete(ex, arr);\n+                    return delete(_storeQuery, ex, arr);\n                 if (operation == OP_UPDATE)\n-                    return update(ex, arr);\n+                    return update(_storeQuery, ex, arr);\n                 throw new UnsupportedException();\n             } catch (OpenJPAException ke) {\n                 throw ke;\n@@ -964,21 +964,22 @@ private boolean isInMemory(int operation) {\n      * values. All other execute methods delegate to this one or to\n      * {@link #execute(StoreQuery.Executor,Map)} after validation and locking.\n      */\n-    private Object execute(StoreQuery.Executor ex, Object[] params)\n+    private Object execute(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params)\n         throws Exception {\n         // if this is an impossible result range, return null / empty list\n         StoreQuery.Range range = new StoreQuery.Range(_startIdx, _endIdx);\n         if (!_rangeSet)\n-            ex.getRange(_storeQuery, params, range);\n+            ex.getRange(q, params, range);\n         if (range.start >= range.end)\n-            return emptyResult(ex);\n+            return emptyResult(q, ex);\n \n         // execute; if we have a result class or we have only one result\n         // and so need to remove it from its array, wrap in a packing rop\n         range.lrs = isLRS(range.start, range.end);\n-        ResultObjectProvider rop = ex.executeQuery(_storeQuery, params, range);\n+        ResultObjectProvider rop = ex.executeQuery(q, params, range);\n         try {\n-            return toResult(ex, rop, range);\n+            return toResult(q, ex, rop, range);\n         } catch (Exception e) {\n             if (rop != null)\n                 try { rop.close(); } catch (Exception e2) {}\n@@ -993,16 +994,16 @@ private Object execute(StoreQuery.Executor ex, Object[] params)\n      * The return value will be a Number indicating the number of\n      * instances deleted.\n      */\n-    private Number delete(StoreQuery.Executor ex, Object[] params)\n+    private Number delete(StoreQuery q, StoreQuery.Executor ex, Object[] params)\n         throws Exception {\n-        assertBulkModify(ex, params);\n-        return ex.executeDelete(_storeQuery, params);\n+        assertBulkModify(q, ex, params);\n+        return ex.executeDelete(q, params);\n     }\n \n-    public Number deleteInMemory(StoreQuery.Executor executor,\n+    public Number deleteInMemory(StoreQuery q, StoreQuery.Executor executor,\n         Object[] params) {\n         try {\n-            Object o = execute(executor, params);\n+            Object o = execute(q, executor, params);\n             if (!(o instanceof Collection))\n                 o = Collections.singleton(o);\n \n@@ -1024,16 +1025,16 @@ public Number deleteInMemory(StoreQuery.Executor executor,\n      * The return value will be a Number indicating the number of\n      * instances updated.\n      */\n-    private Number update(StoreQuery.Executor ex, Object[] params)\n+    private Number update(StoreQuery q, StoreQuery.Executor ex, Object[] params)\n         throws Exception {\n-        assertBulkModify(ex, params);\n-        return ex.executeUpdate(_storeQuery, params);\n+        assertBulkModify(q, ex, params);\n+        return ex.executeUpdate(q, params);\n     }\n \n-    public Number updateInMemory(StoreQuery.Executor executor,\n+    public Number updateInMemory(StoreQuery q, StoreQuery.Executor executor,\n         Object[] params) {\n         try {\n-            Object o = execute(executor, params);\n+            Object o = execute(q, executor, params);\n             if (!(o instanceof Collection))\n                 o = Collections.singleton(o);\n \n@@ -1188,29 +1189,28 @@ private boolean isLRS(long start, long end) {\n     /**\n      * Return the query result for the given result object provider.\n      */\n-    protected Object toResult(StoreQuery.Executor ex, ResultObjectProvider rop,\n-        StoreQuery.Range range)\n+    protected Object toResult(StoreQuery q, StoreQuery.Executor ex, \n+        ResultObjectProvider rop, StoreQuery.Range range)\n         throws Exception {\n         // pack projections if necessary\n-        String[] aliases = ex.getProjectionAliases(_storeQuery);\n-        if (!ex.isPacking(_storeQuery)) {\n-            ResultPacker packer = getResultPacker(ex);\n+        String[] aliases = ex.getProjectionAliases(q);\n+        if (!ex.isPacking(q)) {\n+            ResultPacker packer = getResultPacker(q, ex);\n             if (packer != null || aliases.length == 1)\n                 rop = new PackingResultObjectProvider(rop, packer,\n                     aliases.length);\n         }\n \n         // if single result, extract it\n         if (_unique == Boolean.TRUE || (aliases.length > 0\n-            && !ex.hasGrouping(_storeQuery) && ex.isAggregate(_storeQuery)))\n+            && !ex.hasGrouping(q) && ex.isAggregate(q)))\n             return singleResult(rop, range);\n \n         // now that we've executed the query, we can call isAggregate and\n         // hasGrouping efficiently\n         boolean detach = (_broker.getAutoDetach() &\n             AutoDetach.DETACH_NONTXREAD) > 0 && !_broker.isActive();\n-        boolean lrs = range.lrs && !ex.isAggregate(_storeQuery)\n-            && !ex.hasGrouping(_storeQuery);\n+        boolean lrs = range.lrs && !ex.isAggregate(q) && !ex.hasGrouping(q);\n         ResultList res = (!detach && lrs) ? _fc.newResultList(rop)\n             : new EagerResultList(rop);\n \n@@ -1228,23 +1228,23 @@ protected ResultList decorateResultList(ResultList res) {\n     /**\n      * Return a result packer for this projection, or null.\n      */\n-    private ResultPacker getResultPacker(StoreQuery.Executor ex) {\n+    private ResultPacker getResultPacker(StoreQuery q, StoreQuery.Executor ex) {\n         if (_packer != null)\n             return _packer;\n \n         Class resultClass = (_resultClass != null) ? _resultClass\n-            : ex.getResultClass(_storeQuery);\n+            : ex.getResultClass(q);\n         if (resultClass == null)\n             return null;\n \n-        String[] aliases = ex.getProjectionAliases(_storeQuery);\n+        String[] aliases = ex.getProjectionAliases(q);\n         if (aliases.length == 0) {\n             // result class but no result; means candidate is being set\n             // into some result class\n             _packer = new ResultPacker(_class, getAlias(), resultClass);\n         } else if (resultClass != null) {\n             // projection\n-            Class[] types = ex.getProjectionTypes(_storeQuery);\n+            Class[] types = ex.getProjectionTypes(q);\n             _packer = new ResultPacker(types, aliases, resultClass);\n         }\n         return _packer;\n@@ -1253,9 +1253,9 @@ private ResultPacker getResultPacker(StoreQuery.Executor ex) {\n     /**\n      * Create an empty result for this query.\n      */\n-    private Object emptyResult(StoreQuery.Executor ex) {\n+    private Object emptyResult(StoreQuery q, StoreQuery.Executor ex) {\n         if (_unique == Boolean.TRUE || (_unique == null\n-            && !ex.hasGrouping(_storeQuery) && ex.isAggregate(_storeQuery)))\n+            && !ex.hasGrouping(q) && ex.isAggregate(q)))\n             return null;\n         return Collections.EMPTY_LIST;\n     }\n@@ -1387,7 +1387,7 @@ private void closeResults(boolean force) {\n             StoreQuery.Executor ex = compileForExecutor();\n             Object[] arr = toParameterArray(ex.getParameterTypes(_storeQuery),\n                 params);\n-            assertParameters(ex, arr);\n+            assertParameters(_storeQuery, ex, arr);\n             StoreQuery.Range range = new StoreQuery.Range(_startIdx, _endIdx);\n             if (!_rangeSet)\n                 ex.getRange(_storeQuery, arr, range);\n@@ -1636,26 +1636,28 @@ private void assertCandidateType() {\n      * Check that we are in a state to be able to perform a bulk operation;\n      * also flush the current modfications if any elements are currently dirty.\n      */\n-    private void assertBulkModify(StoreQuery.Executor ex, Object[] params) {\n+    private void assertBulkModify(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params) {\n         _broker.assertActiveTransaction();\n         if (_startIdx != 0 || _endIdx != Long.MAX_VALUE)\n             throw new UserException(_loc.get(\"no-modify-range\"));\n         if (_resultClass != null)\n             throw new UserException(_loc.get(\"no-modify-resultclass\"));\n         StoreQuery.Range range = new StoreQuery.Range();\n-        ex.getRange(_storeQuery, params, range);\n+        ex.getRange(q, params, range);\n         if (range.start != 0 || range.end != Long.MAX_VALUE)\n             throw new UserException(_loc.get(\"no-modify-range\"));\n     }\n \n     /**\n      * Checks that the passed parameters match the declarations.\n      */\n-    protected void assertParameters(StoreQuery.Executor ex, Object[] params) {\n-        if (!_storeQuery.requiresParameterDeclarations())\n+    protected void assertParameters(StoreQuery q, StoreQuery.Executor ex, \n+        Object[] params) {\n+        if (!q.requiresParameterDeclarations())\n             return;\n \n-        LinkedMap paramTypes = ex.getParameterTypes(_storeQuery);\n+        LinkedMap paramTypes = ex.getParameterTypes(q);\n         int typeCount = paramTypes.size();\n         if (typeCount > params.length)\n             throw new UserException(_loc.get(\"unbound-params\","},{"sha":"5f0b569f25d1719a24259a9477632e555321f0e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeChild.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeChild.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeChild.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class CascadeChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"83fb1f7640738f304c88f367b9d664bd4c3e42ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeParent.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeParent.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CascadeParent.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class CascadeParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne(cascade=CascadeType.ALL)\n+    private CascadeChild child;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public CascadeChild getChild() {\n+        return child;\n+    }\n+\n+    public void setChild(CascadeChild child) {\n+        this.child = child;\n+    }\n+}"},{"sha":"c52d54c99346e39997269d4e25558042d2a2fb93","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","status":"modified","additions":54,"deletions":1,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/f7aef4581483be989ba84eed1ea71ce0f043c17c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java?ref=f7aef4581483be989ba84eed1ea71ce0f043c17c","patch":"@@ -2,6 +2,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import javax.persistence.EntityManager;\n \n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n@@ -14,7 +15,7 @@\n     private Object oid;\n \n     public TestBulkJPQLAndDataCache() {\n-        super(AllFieldTypes.class);\n+        super(AllFieldTypes.class, CascadeParent.class, CascadeChild.class);\n     }\n \n     @Override\n@@ -43,6 +44,24 @@ public void setUp() throws Exception {\n         em.close();\n     }\n \n+    public void tearDown() \n+        throws Exception {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"DELETE FROM AllFieldTypes\").executeUpdate();\n+            em.createQuery(\"DELETE FROM CascadeParent\").executeUpdate();\n+            em.createQuery(\"DELETE FROM CascadeChild\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+        } catch (Exception e) {\n+        }\n+\n+        super.tearDown();\n+    }\n+\n     public void testBulkDelete() {\n         OpenJPAEntityManager em =\n             OpenJPAPersistence.cast(emf.createEntityManager());\n@@ -88,4 +107,38 @@ public void testBulkUpdate() {\n \n         em.close();\n     }\n+\n+    public void testBulkDeleteOfCascadingEntity() {\n+        CascadeParent parent = new CascadeParent();\n+        parent.setName(\"parent\");\n+        CascadeChild child = new CascadeChild();\n+        child.setName(\"child\");\n+        parent.setChild(child);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        assertEquals(1, em.createQuery(\"SELECT o FROM CascadeParent o\").\n+            getResultList().size());\n+        assertEquals(1, em.createQuery(\"SELECT o FROM CascadeChild o\").\n+            getResultList().size());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"DELETE FROM CascadeParent o\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        assertEquals(0, em.createQuery(\"SELECT o FROM CascadeParent o\").\n+            getResultList().size());\n+        assertEquals(0, em.createQuery(\"SELECT o FROM CascadeChild o\").\n+            getResultList().size());\n+        em.close();\n+    }\n }"}]}

