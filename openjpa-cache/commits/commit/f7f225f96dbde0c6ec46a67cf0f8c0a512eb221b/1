{"sha":"f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3ZjIyNWY5NmRiZGUwYzZlYzQ2YTY3Y2YwZjhjMGE1MTJlYjIyMWI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-04T23:12:30Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-04T23:12:30Z"},"message":"Change names of query languages to have \"openjpa\" prefix rather than \n\"org.apache.openjpa\" to match configuration properties.  Some minor code \nformatting fixes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@428918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3dd5ae2f6e2724b57eeb52a0d93b05ae84ae4e11","url":"https://api.github.com/repos/apache/openjpa/git/trees/3dd5ae2f6e2724b57eeb52a0d93b05ae84ae4e11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","html_url":"https://github.com/apache/openjpa/commit/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/comments","author":null,"committer":null,"parents":[{"sha":"8e668339157786e48087de6f33432b8337d86716","url":"https://api.github.com/repos/apache/openjpa/commits/8e668339157786e48087de6f33432b8337d86716","html_url":"https://github.com/apache/openjpa/commit/8e668339157786e48087de6f33432b8337d86716"}],"stats":{"total":51,"additions":24,"deletions":27},"files":[{"sha":"3012264422beee3417f11fe610c213f60e1e85aa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -104,7 +104,7 @@\n  * execute a query against an extent or a class, OpenJPA will\n  * automatically load the full extent of objects into memory and\n  * execute the query in memory.</li>\n- * <li><em>org.apache.openjpa.MethodQL</em>: MethodQL allows\n+ * <li><em>openjpa.MethodQL</em>: MethodQL allows\n  * you to use the query APIs to execute a method that finds\n  * data in your back-end and returns that data as a\n  * {@link org.apache.openjpa.lib.rop.ResultList}. For more details on"},{"sha":"d7523c6e28c87faa658ea29df704ceba9d370e64","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -2641,14 +2641,13 @@ private void runAuxiliaryEnhancers() {\n      * Affirms if the given method be skipped.\n      * \n      * @param method method to be skipped or not\n-     * @return true if any of the auxiliary enhancers skips the given method.\n+     * @return true if any of the auxiliary enhancers skips the given method\n      */\n     private boolean skipEnhance(BCMethod method) {\n     \tAuxiliaryEnhancer[] auxEnhancers = getAuxiliaryEnhancers();\n-    \tfor (int i = 0; i < auxEnhancers.length; i++) {\n+    \tfor (int i = 0; i < auxEnhancers.length; i++)\n     \t\tif (auxEnhancers[i].skipEnhance(method))\n     \t\t\treturn true;\n-     \t}\n     \treturn false;\n     }\n "},{"sha":"12235ac4155e1cfea02616d6c39f4af24b51190b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -3301,31 +3301,31 @@ public Iterator extentIterator(Class type, boolean subclasses,\n         return extent.iterator();\n     }\n \n-    public Query newQuery(String language, Class cls, Object query) {\n-        Query q = newQuery(language, query);\n+    public Query newQuery(String lang, Class cls, Object query) {\n+        Query q = newQuery(lang, query);\n         q.setCandidateType(cls, true);\n         return q;\n     }\n \n-    public Query newQuery(String language, Object query) {\n+    public Query newQuery(String lang, Object query) {\n         // common mistakes\n         if (query instanceof Extent || query instanceof Class)\n             throw new UserException(_loc.get(\"bad-new-query\"));\n \n         beginOperation(false);\n         try {\n-            StoreQuery sq = _store.newQuery(language);\n+            StoreQuery sq = _store.newQuery(lang);\n             if (sq == null) {\n-                ExpressionParser ep = QueryLanguages.parserForLanguage(language);\n+                ExpressionParser ep = QueryLanguages.parserForLanguage(lang);\n                 if (ep != null)\n                     sq = new ExpressionStoreQuery(ep);\n-                else if (QueryLanguages.LANG_METHODQL.equals(language))\n+                else if (QueryLanguages.LANG_METHODQL.equals(lang))\n                     sq = new MethodStoreQuery();\n                 else\n-                    throw new UnsupportedException(language);\n+                    throw new UnsupportedException(lang);\n             }\n \n-            Query q = newQueryImpl(language, sq);\n+            Query q = newQueryImpl(lang, sq);\n             q.setIgnoreChanges(_ignoreChanges);\n             if (query != null)\n                 q.setQuery(query);\n@@ -3347,8 +3347,8 @@ else if (QueryLanguages.LANG_METHODQL.equals(language))\n     /**\n      * Create a new query.\n      */\n-    protected QueryImpl newQueryImpl(String language, StoreQuery sq) {\n-        return new QueryImpl(this, language, sq);\n+    protected QueryImpl newQueryImpl(String lang, StoreQuery sq) {\n+        return new QueryImpl(this, lang, sq);\n     }\n \n     public Seq getIdentitySequence(ClassMetaData meta) {"},{"sha":"9764c17390079dd76ba61cffe9d4745c332dadbe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -24,14 +24,11 @@\n \n /**\n  * Constants and utilities for query languages.\n- *\n- * @author Abe White\n- * @since 4.0\n  */\n public class QueryLanguages {\n \n-    public static final String LANG_SQL = \"org.apache.openjpa.SQL\";\n-    public static final String LANG_METHODQL = \"org.apache.openjpa.MethodQL\";\n+    public static final String LANG_SQL = \"openjpa.SQL\";\n+    public static final String LANG_METHODQL = \"openjpa.MethodQL\";\n \n     private static Map _expressionParsers = new HashMap();\n     static {"},{"sha":"5a726aa68c40dcda8743a616474d264693f8aff3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -587,6 +587,8 @@ public String getLoadFetchGroup () {\n      * null if none set.\n      */\n     public void setLoadFetchGroup (String lfg) {\n+        if (\"\".equals(lfg))\n+            lfg = null;\n     \t_lfg = lfg;\n     }\n "},{"sha":"950b8884a2265f53a9367c8966c8db5d6e17429d","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -261,7 +261,7 @@ mod-bigdecimal: You cannot use the modulo operator (%) on numbers of type \\\n \tBigDecimal.\n cant-convert: Cannot convert object \"{0}\" of type \"{1}\" into an instance of \\\n \t\"{2}\".\n-bad-method-class: You set the method name of this org.apache.openjpa.MethodQL query to \\\n+bad-method-class: You set the method name of this openjpa.MethodQL query to \\\n \t\"{1}\", but class \"{0}\" is not a valid class name.  Make sure to fully \\\n \tqualify the class name or to import its package into this query if the \\\n \tclass is not in the query candidate class'' package. "},{"sha":"0a0257d6adde62a98b177d701551bc27b489951d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -160,10 +160,10 @@\n         _tags.put(Factory.class, FACTORY);\n         _tags.put(FetchGroup.class, FETCH_GROUP);\n         _tags.put(FetchGroups.class, FETCH_GROUPS);\n-        _tags.put(LoadFetchGroup.class, LOAD_FETCH_GROUP);\n         _tags.put(InverseLogical.class, INVERSE_LOGICAL);\n         _tags.put(KeyDependent.class, KEY_DEPENDENT);\n         _tags.put(KeyType.class, KEY_TYPE);\n+        _tags.put(LoadFetchGroup.class, LOAD_FETCH_GROUP);\n         _tags.put(LRS.class, LRS);\n         _tags.put(ReadOnly.class, READ_ONLY);\n         _tags.put(Type.class, TYPE);\n@@ -1030,6 +1030,10 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n                         fmd.getKey().setTypeOverride(toOverrideType(((KeyType)\n                             anno).value()));\n                     break;\n+                case LOAD_FETCH_GROUP:\n+                \tif (isMetaDataMode())\n+                \t\tfmd.setLoadFetchGroup(((LoadFetchGroup)anno).value());\n+                \tbreak;\n                 case LRS:\n                     if (isMetaDataMode())\n                         fmd.setLRS(((LRS) anno).value());\n@@ -1043,10 +1047,6 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n                         fmd.setTypeOverride(toOverrideType(((Type) anno).\n                             value()));\n                     break;\n-                case LOAD_FETCH_GROUP:\n-                \tif (isMetaDataMode())\n-                \t\tfmd.setLoadFetchGroup(((LoadFetchGroup)anno).value());\n-                \tbreak;\n                 default:\n                     throw new UnsupportedException(_loc.get(\"unsupported\", fmd,\n                         anno.toString()));"},{"sha":"f4dcfe1bc9bb861b386826b9a470711a2c37a25f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -25,7 +25,6 @@\n  * Fetch group loaded when the annotated field/property is loaded. \n  *\n  * @author Pinaki Poddar\n- * @since 4.0\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"47d35a04743242ff66fd06e940300e941d5f9762","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=f7f225f96dbde0c6ec46a67cf0f8c0a512eb221b","patch":"@@ -67,10 +67,10 @@\n     FACTORY,\n     FETCH_GROUP,\n     FETCH_GROUPS,\n-    LOAD_FETCH_GROUP,\n     INVERSE_LOGICAL,\n     KEY_DEPENDENT,\n     KEY_TYPE,\n+    LOAD_FETCH_GROUP,\n     LRS,\n     READ_ONLY,\n     TYPE,"}]}

