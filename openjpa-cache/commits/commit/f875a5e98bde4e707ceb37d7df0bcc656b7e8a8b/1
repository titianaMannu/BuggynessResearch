{"sha":"f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY4NzVhNWU5OGJkZTRlNzA3Y2ViMzdkN2RmMGJjYzY1NmI3ZThhOGI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-17T06:38:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-17T06:38:33Z"},"message":"OPENJPA-200\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@595912 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b615e90df837b205783d0e120e6d2682f39ae62","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b615e90df837b205783d0e120e6d2682f39ae62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","html_url":"https://github.com/apache/openjpa/commit/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/comments","author":null,"committer":null,"parents":[{"sha":"74683912e3c0de85f4c003e132af6a50a42511ba","url":"https://api.github.com/repos/apache/openjpa/commits/74683912e3c0de85f4c003e132af6a50a42511ba","html_url":"https://github.com/apache/openjpa/commit/74683912e3c0de85f4c003e132af6a50a42511ba"}],"stats":{"total":76,"additions":53,"deletions":23},"files":[{"sha":"0e203b7af1318eea353660b82e27abc7286f6618","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","patch":"@@ -85,6 +85,7 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n@@ -95,13 +96,13 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.Serialization;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n-import org.apache.openjpa.util.InvalidStateException;\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -1897,7 +1898,8 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n \n         for (Iterator i = updateParams.entrySet().iterator(); i.hasNext();) {\n             Map.Entry next = (Map.Entry) i.next();\n-            FieldMapping fmd = (FieldMapping) next.getKey();\n+            Path path = (Path) next.getKey();\n+            FieldMapping fmd = (FieldMapping) path.last();\n \n             if (fmd.isVersion())\n                 augmentUpdates = false;\n@@ -1909,7 +1911,9 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             sql.append(\" = \");\n \n             ExpState state = val.initialize(sel, ctx, 0);\n-            val.calculateValue(sel, ctx, state, null, null);\n+            // JDBC Paths are always PCPaths; PCPath implements Val\n+            ExpState pathState = ((Val) path).initialize(sel, ctx, 0);\n+            val.calculateValue(sel, ctx, state, (Val) path, pathState);\n \n             // append the value with a null for the Select; i\n             // indicates that the\n@@ -1922,9 +1926,9 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         }\n \n         if (augmentUpdates) {\n-            ClassMapping meta =\n-                ((FieldMapping) updateParams.keySet().iterator().next())\n-                    .getDeclaringMapping();\n+            Path path = (Path) updateParams.keySet().iterator().next();\n+            FieldMapping fm = (FieldMapping) path.last();\n+            ClassMapping meta = fm.getDeclaringMapping();\n             Map updates = meta.getVersion().getBulkUpdateValues();\n             for (Iterator iter = updates.entrySet().iterator();\n                 iter.hasNext(); ) {"},{"sha":"5345a1a7d5ea42ac07f795e11a28ee898f6b44ab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","patch":"@@ -83,10 +83,10 @@ public boolean isAggregate() {\n     /**\n      * Add an update.\n      */\n-    public void putUpdate(FieldMetaData fmd, Value val) {\n+    public void putUpdate(Path path, Value val) {\n         if (updates == Collections.EMPTY_MAP)\n             updates = new HashMap();\n-        updates.put(fmd, val);\n+        updates.put(path, val);\n     }\n \n     /**"},{"sha":"e900ce29fd6cdea37dca59fe165563c864594b86","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","patch":"@@ -467,9 +467,9 @@ protected void evalSetClause(QueryExpressions exps) {\n         // handle SET field = value\n         JPQLNode[] nodes = root().findChildrenByID(JJTUPDATEITEM);\n         for (int i = 0; nodes != null && i < nodes.length; i++) {\n-            FieldMetaData field = getPath(firstChild(nodes[i])).last();\n+            Path path = getPath(firstChild(nodes[i]));\n             Value val = getValue(onlyChild(lastChild(nodes[i])));\n-            exps.putUpdate(field, val);\n+            exps.putUpdate(path, val);\n         }\n     }\n "},{"sha":"056164f0c34dd755c58ff03875d8534960da95d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","status":"modified","additions":39,"deletions":13,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java?ref=f875a5e98bde4e707ceb37d7df0bcc656b7e8a8b","patch":"@@ -39,29 +39,45 @@ public void setUp() {\n \r\n     public void testEnumLiteralInSelect() {\r\n         Query q = em.createQuery(\"select count(o) from EnumFieldType o where \" +\r\n-            \"o.enumField = org.apache.openjpa.persistence.fields.SampleEnum.BAR\");\r\n+            \"o.enumField = \" +\r\n+            \"org.apache.openjpa.persistence.fields.SampleEnum.BAR\");\r\n         assertEquals(1, ((Number) q.getSingleResult()).intValue());\r\n     }\r\n \r\n-    // fails currently\r\n-    public void xtestEnumLiteralInUpdate() {\r\n+    public void testEnumLiteralInSetInUpdate() {\r\n         testEnumLiteralInSelect();\r\n         em.getTransaction().begin();\r\n         Query q = em.createQuery(\"update EnumFieldType o set \" +\r\n-            \"o.enumField = org.apache.openjpa.persistence.fields.SampleEnum.BAZ\");\r\n+            \"o.enumField = \" +\r\n+            \"org.apache.openjpa.persistence.fields.SampleEnum.BAZ\");\r\n         assertEquals(1, ((Number) q.executeUpdate()).intValue());\r\n         em.getTransaction().commit();\r\n-        postUpdateCheck();\r\n+        postUpdateCheck(true);\r\n     }\r\n \r\n-    private void postUpdateCheck() {\r\n+    public void testEnumLiteralInWhereInUpdate() {\r\n+        testEnumLiteralInSelect();\r\n+        em.getTransaction().begin();\r\n+        Query q = em.createQuery(\"update EnumFieldType o set o.intField = 3 \" +\r\n+            \"where o.enumField = \" +\r\n+            \"org.apache.openjpa.persistence.fields.SampleEnum.BAR\");\r\n+        assertEquals(1, ((Number) q.executeUpdate()).intValue());\r\n+        em.getTransaction().commit();\r\n+        postUpdateCheck(false);\r\n+    }\r\n+\r\n+    private void postUpdateCheck(boolean wasEnumModified) {\r\n         Query q = em.createQuery(\"select count(o) from EnumFieldType o where \" +\r\n-            \"o.enumField = org.apache.openjpa.persistence.fields.SampleEnum.BAR\");\r\n-        assertEquals(0, ((Number) q.getSingleResult()).intValue());\r\n+            \"o.enumField = \" +\r\n+            \"org.apache.openjpa.persistence.fields.SampleEnum.BAR\");\r\n+        assertEquals(wasEnumModified ? 0 : 1,\r\n+            ((Number) q.getSingleResult()).intValue());\r\n \r\n         q = em.createQuery(\"select count(o) from EnumFieldType o where \" +\r\n-            \"o.enumField = org.apache.openjpa.persistence.fields.SampleEnum.BAZ\");\r\n-        assertEquals(1, ((Number) q.getSingleResult()).intValue());\r\n+            \"o.enumField = \" +\r\n+            \"org.apache.openjpa.persistence.fields.SampleEnum.BAZ\");\r\n+        assertEquals(wasEnumModified ? 1 : 0,\r\n+            ((Number) q.getSingleResult()).intValue());\r\n     }\r\n \r\n     public void testEnumPositionalParamInSelect() {\r\n@@ -78,15 +94,25 @@ public void testEnumNamedParamInSelect() {\n         assertEquals(1, ((Number) q.getSingleResult()).intValue());\r\n     }\r\n \r\n-    // fails currently\r\n-    public void xtestEnumParamInUpdate() {\r\n+    public void testEnumParamInSetInUpdate() {\r\n         testEnumLiteralInSelect();\r\n         em.getTransaction().begin();\r\n         Query q = em.createQuery(\"update EnumFieldType o set o.enumField = :e\");\r\n         q.setParameter(\"e\", SampleEnum.BAZ);\r\n         assertEquals(1, ((Number) q.executeUpdate()).intValue());\r\n         em.getTransaction().commit();\r\n-        postUpdateCheck();\r\n+        postUpdateCheck(true);\r\n+    }\r\n+\r\n+    public void testEnumParamInWhereInUpdate() {\r\n+        testEnumLiteralInSelect();\r\n+        em.getTransaction().begin();\r\n+        Query q = em.createQuery(\"update EnumFieldType o set o.intField = 3 \" +\r\n+            \"where o.enumField = :e\");\r\n+        q.setParameter(\"e\", SampleEnum.BAR);\r\n+        assertEquals(1, ((Number) q.executeUpdate()).intValue());\r\n+        em.getTransaction().commit();\r\n+        postUpdateCheck(false);\r\n     }\r\n \r\n     public void xtestInMemory() {\r"}]}

