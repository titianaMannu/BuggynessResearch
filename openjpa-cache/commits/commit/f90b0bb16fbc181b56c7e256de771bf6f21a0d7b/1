{"sha":"f90b0bb16fbc181b56c7e256de771bf6f21a0d7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5MGIwYmIxNmZiYzE4MWI1NmM3ZTI1NmRlNzcxYmY2ZjIxYTBkN2I=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-14T18:37:14Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-14T18:37:14Z"},"message":"OPENJPA-1631: Add synchronization to AnnotationPersistenceXMLMetaDataParser.parse() method to make it thread safe. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@934100 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2337f934f545bb16083ef8522a4002d45d3d810","url":"https://api.github.com/repos/apache/openjpa/git/trees/f2337f934f545bb16083ef8522a4002d45d3d810"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f90b0bb16fbc181b56c7e256de771bf6f21a0d7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f90b0bb16fbc181b56c7e256de771bf6f21a0d7b","html_url":"https://github.com/apache/openjpa/commit/f90b0bb16fbc181b56c7e256de771bf6f21a0d7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f90b0bb16fbc181b56c7e256de771bf6f21a0d7b/comments","author":null,"committer":null,"parents":[{"sha":"6eb56facc2479ea03586f25df48e7cd9d56ecc1f","url":"https://api.github.com/repos/apache/openjpa/commits/6eb56facc2479ea03586f25df48e7cd9d56ecc1f","html_url":"https://github.com/apache/openjpa/commit/6eb56facc2479ea03586f25df48e7cd9d56ecc1f"}],"stats":{"total":44,"additions":16,"deletions":28},"files":[{"sha":"02bad512f754754448c639575481f97c10589895","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":16,"deletions":28,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/f90b0bb16fbc181b56c7e256de771bf6f21a0d7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/f90b0bb16fbc181b56c7e256de771bf6f21a0d7b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=f90b0bb16fbc181b56c7e256de771bf6f21a0d7b","patch":"@@ -51,10 +51,6 @@\n     private final OpenJPAConfiguration _conf;\n     private final Log _log;\n     private MetaDataRepository _repos = null;\n-\n-    // the class we were invoked to parse\n-    private Class _cls = null;\n-    private FieldMetaData _fmd = null;\n     \n     // cache the JAXB Xml... classes if they are present so we do not\n     // have a hard-wired dependency on JAXB here\n@@ -146,56 +142,48 @@ public void setRepository(MetaDataRepository repos) {\n      * Clear caches.\n      */\n     public void clear() {\n-        _cls = null;\n-        _fmd = null;\n     }\n \n     /**\n-     * Parse persistence metadata for the given field metadata.\n+     * Parse persistence metadata for the given field metadata. If the MetaData(/Mapping)Repository\n+     * is using locking, that lock MUST be held prior to calling this method.\n      */\n-    public void parse(FieldMetaData fmd) {\n-        _fmd = fmd;\n-        _cls = fmd.getDeclaredType();\n+    public synchronized void parse(FieldMetaData fmd) {\n+        Class<?> cls = fmd.getDeclaredType();\n         if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"parse-class\", _cls.getName()));\n-\n-        try {\n-            parseXMLClassAnnotations();\n-        } finally {\n-            _cls = null;\n-            _fmd = null;\n-        }\n+            _log.trace(_loc.get(\"parse-class\", cls.getName()));\n+        parseXMLClassAnnotations(cls, fmd);\n     }\n \n     /**\n      * Read annotations for the current type.\n      */\n-    private XMLMetaData parseXMLClassAnnotations() {\n+    private XMLMetaData parseXMLClassAnnotations(Class<?> cls, FieldMetaData fmd) {\n         // check immediately whether the class has JAXB XML annotations\n-        if (_cls == null || xmlTypeClass == null\n+        if (cls == null || xmlTypeClass == null\n             || !((AccessController.doPrivileged(J2DoPrivHelper\n-                .isAnnotationPresentAction(_cls, xmlTypeClass))).booleanValue()\n+                .isAnnotationPresentAction(cls, xmlTypeClass))).booleanValue()\n                 && (AccessController\n-                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(cls,\n                     xmlRootElementClass))).booleanValue()))\n             return null;\n \n         // find / create metadata\n-        XMLMetaData meta = getXMLMetaData();\n+        XMLMetaData meta = getXMLMetaData(cls, fmd);\n         \n         return meta;\n     }\n \n     /**\n      * Find or create xml metadata for the current type. \n      */\n-    private synchronized XMLMetaData getXMLMetaData() {\n-        XMLMetaData meta = getRepository().getCachedXMLMetaData(_cls);\n+    private XMLMetaData getXMLMetaData(Class<?> cls, FieldMetaData fmd) {\n+        XMLMetaData meta = getRepository().getCachedXMLMetaData(cls);\n         if (meta == null) {\n             // if not in cache, create metadata\n-            meta = getRepository().addXMLMetaData(_cls, _fmd.getName());\n-            parseXmlRootElement(_cls, meta);\n-            populateFromReflection(_cls, meta);\n+            meta = getRepository().addXMLMetaData(cls, fmd.getName());\n+            parseXmlRootElement(cls, meta);\n+            populateFromReflection(cls, meta);\n         }\n         return meta;\n     }"}]}

