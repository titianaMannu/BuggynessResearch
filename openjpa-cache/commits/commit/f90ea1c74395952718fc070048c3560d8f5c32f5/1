{"sha":"f90ea1c74395952718fc070048c3560d8f5c32f5","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5MGVhMWM3NDM5NTk1MjcxOGZjMDcwMDQ4YzM1NjBkOGY1YzMyZjU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-05-12T20:03:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-05-12T20:03:34Z"},"message":"OPENJPA-708: \nSub-sub-query generates SQL with syntax error.\nSubmitted By: Heath Thomann, based on Catalina's changes for trunk. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@943663 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb3535fe31d1ade5971a0d0bb9597f63c746ab69","url":"https://api.github.com/repos/apache/openjpa/git/trees/cb3535fe31d1ade5971a0d0bb9597f63c746ab69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f90ea1c74395952718fc070048c3560d8f5c32f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f90ea1c74395952718fc070048c3560d8f5c32f5","html_url":"https://github.com/apache/openjpa/commit/f90ea1c74395952718fc070048c3560d8f5c32f5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f90ea1c74395952718fc070048c3560d8f5c32f5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"11082c29d7a2e112e584be02b6e8560fa4a15a7c","url":"https://api.github.com/repos/apache/openjpa/commits/11082c29d7a2e112e584be02b6e8560fa4a15a7c","html_url":"https://github.com/apache/openjpa/commit/11082c29d7a2e112e584be02b6e8560fa4a15a7c"}],"stats":{"total":183,"additions":181,"deletions":2},"files":[{"sha":"e745c4b8c3e8c5412f91486af4f59a0c158cc456","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=f90ea1c74395952718fc070048c3560d8f5c32f5","patch":"@@ -487,8 +487,13 @@ public void setParent(Select parent, String path) {\n                 _joinSyntax = _parent._joinSyntax;\n         }\n         \n-        if (_parent.getAliases() == null || _subPath == null)\n+        if (_parent.getAliases() == null || _subPath == null) {\n             return;\n+        }\n+        \n+        if (_parent._aliases.size() <= 1) {\n+            return;\n+        }\n \n         // Do not remove aliases for databases that use SYNTAX_DATABASE (oracle)\n         if(_parent._joinSyntax != JoinSyntaxes.SYNTAX_DATABASE) {"},{"sha":"664bae729d13c43f77c8dac2200d878b8fa31a44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","raw_url":"https://github.com/apache/openjpa/raw/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java?ref=f90ea1c74395952718fc070048c3560d8f5c32f5","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.FetchType;\n+import java.sql.Date;\n+\n+@Entity\n+public class Magazine implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+    \n+    @Column(name=\"date_published\")\n+    private Date datePublished;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"id_publisher\")\n+    private Publisher idPublisher;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Publisher getIdPublisher() {\n+        return this.idPublisher;\n+    }\n+\n+    public void setIdPublisher(Publisher idPublisher) {\n+        this.idPublisher = idPublisher;\n+    }\n+    \n+    public Date getDatePublished() {\n+        return datePublished;\n+    }\n+\n+    public void setDatePublished(Date datePublished) {\n+        this.datePublished = datePublished;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"5700ba5babdeb40b8fdba4886a8223f83008aeff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java?ref=f90ea1c74395952718fc070048c3560d8f5c32f5","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.OneToMany;\n+import java.util.Set;\n+\n+@Entity\n+public class Publisher implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"idPublisher\")\n+    private Set<Magazine> magazineCollection;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<Magazine> getMagazineCollection() {\n+        return this.magazineCollection;\n+    }\n+\n+    public void setMagazineCollection(Set<Magazine> magazineCollection) {\n+        this.magazineCollection = magazineCollection;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"ef49ea4939749c75d1003f1875f55c00fb9ec7c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/f90ea1c74395952718fc070048c3560d8f5c32f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=f90ea1c74395952718fc070048c3560d8f5c32f5","patch":"@@ -35,7 +35,7 @@\n     public void setUp() {\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n             OrderItem.class, Employee.class, Dependent.class,\n-            DependentId.class, CLEAR_TABLES);\n+            DependentId.class, Magazine.class, Publisher.class, CLEAR_TABLES);\n     }\n \n     static String[]  querys = new String[] {\n@@ -71,6 +71,16 @@ public void setUp() {\n             \" (select sum(o2.amount) from c.orders o2)\",\n         \"select o1.oid, c.name from Order o1, Customer c where o1.amount = \" +\n             \" any(select o2.amount from in(c.orders) o2)\",\n+        \"SELECT p, m \"+\n+            \"FROM Publisher p \"+\n+            \"LEFT OUTER JOIN p.magazineCollection m \"+\n+            \"WHERE m.id = (SELECT MAX(m2.id) \"+\n+            \"FROM Magazine m2 \"+\n+            \"WHERE m2.idPublisher.id = p.id \"+\n+            \"AND m2.datePublished = \"+\n+            \"(SELECT MAX(m3.datePublished) \"+\n+            \"FROM Magazine m3 \"+\n+            \"WHERE m3.idPublisher.id = p.id)) \", \n     // outstanding problem subqueries:\n     //\"select o from Order o where o.amount > (select count(o) from Order o)\",\n     //\"select o from Order o where o.amount > (select count(o2) from Order o2)\","}]}

