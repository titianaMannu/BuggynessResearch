{"sha":"f93ea15745531838caf87022424604044302e95b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5M2VhMTU3NDU1MzE4MzhjYWY4NzAyMjQyNDYwNDA0NDMwMmU5NWI=","commit":{"author":{"name":"Simone","email":"39402200+simesi@users.noreply.github.com","date":"2020-09-22T13:11:24Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-09-22T13:11:24Z"},"message":"[OPENJPA-2828] Fix method equals() (#72)","tree":{"sha":"71e7616e02c0c500995d7071d6a0a861ca49809a","url":"https://api.github.com/repos/apache/openjpa/git/trees/71e7616e02c0c500995d7071d6a0a861ca49809a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f93ea15745531838caf87022424604044302e95b","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaff8CRBK7hj4Ov3rIwAAdHIIAKCAboMdnjm65JnYJAGLnhoH\nq1AGEMNCkOHa0AkskVXU3I+jxIYt4Jr0+B6aFbQFoB+B5+7sbHSDEZXaHpA5wzra\nyGwNeSIK+yJ8+OOYrDaMYEENOfCb39n7lqltlvmZLgags+hBiy3td5IghokBXl01\njkkW+IDl0jAlfo+gKzhCUsyksp7R7JbfIp7DHbP+LbRmzVYev2eA90OogEjk/thw\ne/C7Cf1P8BlFo0ZNHkQeQCjTY0CUAa6NWaOgh1vZwQiRpbZgjXmjmxb3oTcxXr+n\nWuF3Ys3lMUsbfave3VaImzrD/ZvsZK/wXj83Lhf6UH/EZScK8U4UmCM1XDqu+uc=\n=6B49\n-----END PGP SIGNATURE-----\n","payload":"tree 71e7616e02c0c500995d7071d6a0a861ca49809a\nparent 33fc72ac857dff85f9ff1ef3173638ca504a5d22\nauthor Simone <39402200+simesi@users.noreply.github.com> 1600780284 +0200\ncommitter GitHub <noreply@github.com> 1600780284 +0200\n\n[OPENJPA-2828] Fix method equals() (#72)\n\n"}},"url":"https://api.github.com/repos/apache/openjpa/commits/f93ea15745531838caf87022424604044302e95b","html_url":"https://github.com/apache/openjpa/commit/f93ea15745531838caf87022424604044302e95b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f93ea15745531838caf87022424604044302e95b/comments","author":{"login":"simesi","id":39402200,"node_id":"MDQ6VXNlcjM5NDAyMjAw","avatar_url":"https://avatars.githubusercontent.com/u/39402200?v=4","gravatar_id":"","url":"https://api.github.com/users/simesi","html_url":"https://github.com/simesi","followers_url":"https://api.github.com/users/simesi/followers","following_url":"https://api.github.com/users/simesi/following{/other_user}","gists_url":"https://api.github.com/users/simesi/gists{/gist_id}","starred_url":"https://api.github.com/users/simesi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simesi/subscriptions","organizations_url":"https://api.github.com/users/simesi/orgs","repos_url":"https://api.github.com/users/simesi/repos","events_url":"https://api.github.com/users/simesi/events{/privacy}","received_events_url":"https://api.github.com/users/simesi/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"33fc72ac857dff85f9ff1ef3173638ca504a5d22","url":"https://api.github.com/repos/apache/openjpa/commits/33fc72ac857dff85f9ff1ef3173638ca504a5d22","html_url":"https://github.com/apache/openjpa/commit/33fc72ac857dff85f9ff1ef3173638ca504a5d22"}],"stats":{"total":85,"additions":83,"deletions":2},"files":[{"sha":"c73a9bba688228612f266f13fd5d258992ec65f3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f93ea15745531838caf87022424604044302e95b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","raw_url":"https://github.com/apache/openjpa/raw/f93ea15745531838caf87022424604044302e95b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java?ref=f93ea15745531838caf87022424604044302e95b","patch":"@@ -94,8 +94,8 @@ public boolean equals(Object other) {\n         if (other == null || !this.getClass().isInstance(other))\n             return false;\n         Specification that = (Specification)other;\n-        return Objects.equals(_name, this._name) && _major == that._major\n-            && Objects.equals(_minor, this._minor);\n+        return Objects.equals(_name, that._name) && _major == that._major\n+            && Objects.equals(_minor, that._minor);\n     }\n \n     /**"},{"sha":"e908fbf172d1236ba7b90db7857723fde8729a22","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/conf/SpecificationAdditionalTests.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/f93ea15745531838caf87022424604044302e95b/openjpa-kernel/src/test/java/org/apache/openjpa/conf/SpecificationAdditionalTests.java","raw_url":"https://github.com/apache/openjpa/raw/f93ea15745531838caf87022424604044302e95b/openjpa-kernel/src/test/java/org/apache/openjpa/conf/SpecificationAdditionalTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/conf/SpecificationAdditionalTests.java?ref=f93ea15745531838caf87022424604044302e95b","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import static org.junit.Assert.*;\r\n+import org.apache.openjpa.lib.meta.ClassMetaDataIterator;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.junit.Assert;\r\n+import org.apache.openjpa.conf.*;\r\n+\r\n+public class SpecificationAdditionalTests {\r\n+\r\n+\tString myString = \"JPA\";\r\n+\tString myCompleteString = \"JPA 2.0-draft\";\r\n+\tString myCompleteString2 = \"JPA 2.1-draft\";\r\n+\tString myHalfCompleteString = \"JPA 2\";\r\n+\tString myHalfCompleteString2 = \"JPQ 2\";\r\n+\tString myNullString = null;\r\n+\r\n+\t\r\n+\t@Test\r\n+\tpublic void EqualsTest() { \r\n+\t\tSpecification spec = new Specification(myString);\r\n+\t\tAssert.assertTrue(spec.equals(spec)); // parse() is overidded in Specification\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void EqualsTest2() {\r\n+\t\tSpecification spec = new Specification(myString);\r\n+\t\tAssert.assertFalse(spec.equals(myNullString)); // parse() is overidded in Specification\r\n+\t}\r\n+\t\t\r\n+\t\r\n+\t@Test \r\n+\tpublic void EqualsTest3() { \r\n+\t\tSpecification spec = new Specification(myString);\r\n+\t\tSpecification spec2 = new Specification(myHalfCompleteString);\r\n+\t\tAssert.assertFalse(spec.equals(spec2)); // parse() is overidded in Specification\r\n+\t}\r\n+\r\n+        @Test      \r\n+\tpublic void EqualsTest4() { \r\n+\t\tSpecification spec = new Specification(myString);\r\n+\t\tAssert.assertFalse(spec.equals(1)); // parse() is overidded in Specification\r\n+\t}\r\n+\t\r\n+\t@Test \r\n+\tpublic void EqualsTest5() {  \r\n+\t\tSpecification spec = new Specification(myHalfCompleteString);\r\n+\t\tSpecification spec2 = new Specification(myHalfCompleteString2);\r\n+\t\tAssert.assertFalse(spec.equals(spec2)); \r\n+\t}\r\n+\t\r\n+\t@Test \r\n+\tpublic void EqualsTest6() { \r\n+\t\tSpecification spec = new Specification(myCompleteString);\r\n+\t\tSpecification spec2 = new Specification(myHalfCompleteString2);\r\n+\t\tAssert.assertFalse(spec.equals(spec2)); \r\n+\t}\r\n+\t\r\n+\t\r\n+}\r"}]}

