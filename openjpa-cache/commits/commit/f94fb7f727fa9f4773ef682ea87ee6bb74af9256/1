{"sha":"f94fb7f727fa9f4773ef682ea87ee6bb74af9256","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5NGZiN2Y3MjdmYTlmNDc3M2VmNjgyZWE4N2VlNmJiNzRhZjkyNTY=","commit":{"author":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2012-03-09T14:46:44Z"},"committer":{"name":"Dianne E. Richards","email":"dianner@apache.org","date":"2012-03-09T14:46:44Z"},"message":"OPENJPA-2132 Fix empty List for OneToMany with InheritanceType.JOINED or SINGLE_TABLE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1298856 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f4b36205d91cf1d20f2a563377c5204e2a5c49b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f4b36205d91cf1d20f2a563377c5204e2a5c49b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f94fb7f727fa9f4773ef682ea87ee6bb74af9256","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f94fb7f727fa9f4773ef682ea87ee6bb74af9256","html_url":"https://github.com/apache/openjpa/commit/f94fb7f727fa9f4773ef682ea87ee6bb74af9256","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/comments","author":null,"committer":null,"parents":[{"sha":"e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","url":"https://api.github.com/repos/apache/openjpa/commits/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70","html_url":"https://github.com/apache/openjpa/commit/e1c4c92888ce7e8559a1e1ea74ec7513226b7e70"}],"stats":{"total":369,"additions":368,"deletions":1},"files":[{"sha":"e51121e54744deaa469f1f2c032aead5a09b5646","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -1157,7 +1157,11 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n     private boolean getJoinedSupers(Select sel, ClassMapping mapping, int subs, boolean outer) {\n         loadSubclasses(mapping); \n         Joins joins = (outer) ? sel.newOuterJoins() : null;\n-        return mapping.getDiscriminator().addClassConditions(sel, subs == Select.SUBS_JOINABLE, joins);\n+        boolean includeSubs = false;\n+        if (subs == Select.SUBS_JOINABLE || subs == Select.SUBS_ANY_JOINABLE) {\n+            includeSubs = true;\n+        }\n+        return mapping.getDiscriminator().addClassConditions(sel, includeSubs, joins);\n     }\n     \n     private boolean needClassCondition(ClassMapping mapping, int subs,"},{"sha":"495cbab87897b2901bfe48c36a8d33556f636e46","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/TestJointableOneToMany.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/TestJointableOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/TestJointableOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/TestJointableOneToMany.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable.onetomany;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test an inheritance type of 'joinable' where a OneToMany relationship is used\n+ * to get a parent class.\n+ */\n+public class TestJointableOneToMany extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(UMLType.class, UMLPrimitiveType.class, UMLClass.class,\n+            UMLPackage.class, UMLNamed.class, CLEAR_TABLES);\n+        initialize();\n+    }\n+\n+    public void initialize() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            UMLPackage aPackage =\n+                em.find(UMLPackage.class, \"org.apache.openjpa\");\n+            if (null == aPackage) {\n+                EntityTransaction tx = em.getTransaction();\n+                tx.begin();\n+\n+                // Create a UMLPackage\n+                aPackage = new UMLPackage();\n+                aPackage.setId(\"org.apache.openjpa\");\n+                aPackage.setName(\"org.apache.openjpa\");\n+                aPackage.setOwnedType(new ArrayList<UMLType>());\n+                em.persist(aPackage);\n+\n+                // Create a UMLClass and add the UMLPackage to it.\n+                UMLClass aClass = new UMLClass();\n+                aClass.setId(\"org.apache.openjpa.ATestClass\");\n+                aClass.setName(\"TesClass\");\n+                aClass.setOwnerPackage(aPackage);\n+                em.persist(aClass);\n+\n+                // Add UMLClass to UMLPackage\n+                aPackage.getOwnedType().add(aClass);\n+                em.merge(aPackage);\n+                // TODO: temp\n+                // em.persist(aPackage);\n+\n+                // Create a UMLPrimativeType and add UMLPackage to it.\n+                UMLPrimitiveType primitiveType = new UMLPrimitiveType();\n+                primitiveType.setId(\"String\");\n+                primitiveType.setName(\"String\");\n+                primitiveType.setOwnerPackage(aPackage);\n+                em.persist(primitiveType);\n+\n+                // Add UMLPrimativeType to UMLPackage\n+                aPackage.getOwnedType().add(primitiveType);\n+                em.merge(aPackage);\n+                // TODO: temp\n+                // em.persist(aPackage);\n+\n+                tx.commit();\n+            }\n+        } finally {\n+            em.close();\n+        }\n+    }\n+\n+    public void test() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            // Verify the Class exists, and that from it we can get the Package.\n+            UMLClass aClass =\n+                em.find(UMLClass.class, \"org.apache.openjpa.ATestClass\");\n+            assertNotNull(aClass);\n+            assertEquals(\"org.apache.openjpa\", aClass.getOwnerPackage()\n+                .getName());\n+\n+            // Verify the PrimitiveType exists, and that from it we can get the\n+            // Package.\n+            UMLPrimitiveType aPrimitiveType =\n+                em.find(UMLPrimitiveType.class, \"String\");\n+            assertNotNull(aPrimitiveType);\n+            assertEquals(\"org.apache.openjpa\", aPrimitiveType.getOwnerPackage()\n+                .getName());\n+\n+            // Verify the Package exists.\n+            UMLPackage aPackage =\n+                em.find(UMLPackage.class, \"org.apache.openjpa\");\n+            assertNotNull(aPackage);\n+\n+            // From the Package, lets get the Type.....there should be two\n+            // Types (i.e. a UMLClass and UMLPrimativeTYpe), but 0 is returned!\n+            List<UMLType> ownedType = aPackage.getOwnedType();\n+            assertNotNull(ownedType);\n+            assertEquals(2, ownedType.size());\n+\n+        } finally {\n+            em.close();\n+\n+        }\n+    }\n+}"},{"sha":"63e941e525e7d48ed7b84a4c82aad4bb3355f20f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLClass.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLClass.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLClass.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable.onetomany;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class UMLClass extends UMLType implements Serializable {\n+\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tpublic UMLClass() {\n+\t\tsuper();\n+\t}\n+}"},{"sha":"40d572924d9f5329298f2af6a7870d9b5bf24f72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLNamed.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLNamed.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLNamed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLNamed.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable.onetomany;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class UMLNamed implements Serializable {\n+\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@Id\n+\tprivate String id;\n+\t\n+\tprivate String name;\n+\n+\tpublic UMLNamed() {\n+\t\tsuper();\n+\t}\n+\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"5d6e6555ad968cba9f731fba468e5c022003147d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPackage.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPackage.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPackage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPackage.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable.onetomany;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+//@Inheritance(strategy = InheritanceType.JOINED)\n+public class UMLPackage implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Id\n+\tprivate String id;\n+\n+\tprivate String name;\n+\n+\t@OneToMany(mappedBy = \"ownerPackage\")\n+\tprivate List<UMLType> ownedType;\n+\n+\tpublic UMLPackage() {\n+\t\tsuper();\n+\t}\n+\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic List<UMLType> getOwnedType() {\n+\t\treturn ownedType;\n+\t}\n+\n+\tpublic void setOwnedType(List<UMLType> ownedType) {\n+\t\tthis.ownedType = ownedType;\n+\t}\n+}"},{"sha":"a1232b51335d377e68bdfd759b9c2d812d5366c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPrimitiveType.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPrimitiveType.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPrimitiveType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLPrimitiveType.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable.onetomany;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class UMLPrimitiveType extends UMLType implements Serializable {\n+\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tpublic UMLPrimitiveType() {\n+\t\tsuper();\n+\t}\n+}"},{"sha":"5d50efff8aa9e954ce3bd40bcd23eb77a470d45f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLType.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLType.java","raw_url":"https://github.com/apache/openjpa/raw/f94fb7f727fa9f4773ef682ea87ee6bb74af9256/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/UMLType.java?ref=f94fb7f727fa9f4773ef682ea87ee6bb74af9256","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable.onetomany;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class UMLType extends UMLNamed implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @ManyToOne\n+    private UMLPackage ownerPackage;\n+\n+    public UMLType() {\n+        super();\n+    }\n+\n+    public UMLPackage getOwnerPackage() {\n+        return ownerPackage;\n+    }\n+\n+    public void setOwnerPackage(UMLPackage ownerPackage) {\n+        this.ownerPackage = ownerPackage;\n+    }\n+}"}]}

