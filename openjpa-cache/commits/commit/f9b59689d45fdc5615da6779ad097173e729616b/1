{"sha":"f9b59689d45fdc5615da6779ad097173e729616b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5YjU5Njg5ZDQ1ZmRjNTYxNWRhNjc3OWFkMDk3MTczZTcyOTYxNmI=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-04-10T14:05:21Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-04-10T14:05:21Z"},"message":"OPENJPA-2733 OPENJPA-2785 fix broken spring data usage.\n\nspring-data potentially does something unspecified.\nThis hack now prevents duplicate ParameterExpressions with the same name\nwhile not having to implement equals + hashCode for it - which makes Spring happy.","tree":{"sha":"254dbac0e788f9e741a8d68eeb06a707c7cdae5d","url":"https://api.github.com/repos/apache/openjpa/git/trees/254dbac0e788f9e741a8d68eeb06a707c7cdae5d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f9b59689d45fdc5615da6779ad097173e729616b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f9b59689d45fdc5615da6779ad097173e729616b","html_url":"https://github.com/apache/openjpa/commit/f9b59689d45fdc5615da6779ad097173e729616b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f9b59689d45fdc5615da6779ad097173e729616b/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"d8ddf87a4752921f75e759f735282a70143dd139","url":"https://api.github.com/repos/apache/openjpa/commits/d8ddf87a4752921f75e759f735282a70143dd139","html_url":"https://github.com/apache/openjpa/commit/d8ddf87a4752921f75e759f735282a70143dd139"}],"stats":{"total":53,"additions":39,"deletions":14},"files":[{"sha":"2dce0cf80df03cd9d8644f1b7d466b457d466861","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/f9b59689d45fdc5615da6779ad097173e729616b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/f9b59689d45fdc5615da6779ad097173e729616b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java?ref=f9b59689d45fdc5615da6779ad097173e729616b","patch":"@@ -618,6 +618,10 @@ public void testSubquery24() {\n         cleanCustomerAndOrder();\n     }\n \n+    /**\n+     * Test 2 different ParameterExpression instances which both have the same name.\n+     * They should\n+     */\n     public void testSubquery25() {\n         em.getTransaction().begin();\n "},{"sha":"7ece18978171f8cce92a54d7ab5325cc96c59407","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/f9b59689d45fdc5615da6779ad097173e729616b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f9b59689d45fdc5615da6779ad097173e729616b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=f9b59689d45fdc5615da6779ad097173e729616b","patch":"@@ -224,10 +224,18 @@ public MetamodelImpl getMetamodel() {\n      * Registers the given parameter.\n      */\n     void registerParameter(ParameterExpressionImpl<?> p) {\n-        if (!_params.containsKey(p)) {\n-            p.setIndex(_params.size());\n-            _params.put(p, p.getJavaType());\n+        for (Object k : _params.keySet()) {\n+            if (p.paramEquals(k)) {\n+                // If a named ParameterExpressin did already get registered\n+                // with that exact name, then we do ignore it.\n+                // If we do a query.setParameter(\"someParamName\", Bla)\n+                // then it must uniquely identify a Parameter.\n+                return;\n+            }\n         }\n+\n+        p.setIndex(_params.size());\n+        _params.put(p, p.getJavaType());\n     }\n \n     @Override"},{"sha":"77b57d12028c4a7338de1a62738c396142da68b5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/f9b59689d45fdc5615da6779ad097173e729616b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/f9b59689d45fdc5615da6779ad097173e729616b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=f9b59689d45fdc5615da6779ad097173e729616b","patch":"@@ -24,6 +24,7 @@\n \n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.util.InternalException;\n \n /**\n@@ -109,13 +110,25 @@ public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             : factory.newParameter(paramKey, clzz);\n \n         int index = _name != null\n-            ? q.getParameterTypes().indexOf(this)\n+            ? findIndexWithSameName(q)\n             : _index;\n         param.setIndex(index);\n \n         return param;\n     }\n \n+    private int findIndexWithSameName(CriteriaQueryImpl<?> q) {\n+        OrderedMap<Object, Class<?>> parameterTypes = q.getParameterTypes();\n+        int i = 0;\n+        for (Object k : parameterTypes.keySet()) {\n+            if (paramEquals(k)) {\n+                return i;\n+            }\n+            i++;\n+        }\n+        return -1;\n+    }\n+\n     @Override\n     public StringBuilder asValue(AliasContext q) {\n         return Expressions.asValue(q, \":\", _name == null ? \"param\" : _name);\n@@ -126,8 +139,7 @@ public StringBuilder asValue(AliasContext q) {\n         return getJavaType();\n     }\n \n-    @Override\n-    public boolean equals(Object o) {\n+    public boolean paramEquals(Object o) {\n         if (this == o)\n             return true;\n \n@@ -150,14 +162,15 @@ public boolean equals(Object o) {\n     }\n \n     @Override\n-    public int hashCode() {\n-        int result = _name != null ? _name.hashCode() : 0;\n-        if (_name == null) {\n-            // if name is given, then we ignore the index\n-            result = 31 * result + _index;\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n         }\n-        result = 31 * result + (getParameterType() != null ? getParameterType().hashCode() : 0);\n-        result = 31 * result + (value != null ? value.hashCode() : 0);\n-        return result;\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return super.hashCode();\n     }\n }"}]}

