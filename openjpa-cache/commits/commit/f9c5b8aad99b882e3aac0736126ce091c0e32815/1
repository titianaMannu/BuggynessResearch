{"sha":"f9c5b8aad99b882e3aac0736126ce091c0e32815","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5YzViOGFhZDk5Yjg4MmUzYWFjMDczNjEyNmNlMDkxYzBlMzI4MTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T19:19:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T19:19:01Z"},"message":"OPENJPA-485: Merging from trunk: ORDER BY clause in JPQL generates syntactically wrong SQL for TABLE_PER_CLASS inheritance hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"881abd8bdaa533434b25ed72cfb719dfdcb2edd1","url":"https://api.github.com/repos/apache/openjpa/git/trees/881abd8bdaa533434b25ed72cfb719dfdcb2edd1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815","html_url":"https://github.com/apache/openjpa/commit/f9c5b8aad99b882e3aac0736126ce091c0e32815","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815/comments","author":null,"committer":null,"parents":[{"sha":"1697f1439ead778b4b27a8140a54bbd22ca15a8b","url":"https://api.github.com/repos/apache/openjpa/commits/1697f1439ead778b4b27a8140a54bbd22ca15a8b","html_url":"https://github.com/apache/openjpa/commit/1697f1439ead778b4b27a8140a54bbd22ca15a8b"}],"stats":{"total":56,"additions":26,"deletions":30},"files":[{"sha":"c8e8f7ee2182892128afffba69f263aac62ae036","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/f9c5b8aad99b882e3aac0736126ce091c0e32815/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/f9c5b8aad99b882e3aac0736126ce091c0e32815/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=f9c5b8aad99b882e3aac0736126ce091c0e32815","patch":"@@ -488,8 +488,11 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     }\n \n                     for (; from != null && from != to;\n-                        from = from.getJoinablePCSuperclassMapping())\n+                        from = from.getJoinablePCSuperclassMapping()) {\n+                    \tpstate.field = from.getFieldMapping(pstate.field\n+                    \t    .getName());\n                         pstate.joins = from.joinSuperclass(pstate.joins, false);\n+                    }\n                 }\n                 // nothing more to do from here on as we encountered an xpath action\n                 if (action.op == Action.GET_XPATH)"},{"sha":"72685e2f878293e767ee9388603a16dc502b7083","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/f9c5b8aad99b882e3aac0736126ce091c0e32815/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/f9c5b8aad99b882e3aac0736126ce091c0e32815/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=f9c5b8aad99b882e3aac0736126ce091c0e32815","patch":"@@ -165,16 +165,13 @@ public void testClausePathExpr() {\n         String failure = \"SELECT DISTINCT s \" +\r\n             \"FROM Student s WHERE\" +\r\n             \" s.department.name = 'CompSci1'\";\r\n-\r\n-        try {\r\n-            List ls = em.createQuery(failure).getResultList();\r\n-            fail(\r\n-                \"cannot compose path expressions from a path expression that evaluates to a collection.\");\r\n-        }\r\n-        catch (Exception e) {\r\n-            //\r\n-        }\r\n-\r\n+        // Changes related to OPENJPA-485 allows this query to pass.\r\n+        // The query is not kosher as it does navigate through a \r\n+        // collection-valued-path-expression (s.department.name) where\r\n+        // department is a Collection. \r\n+        // But we allow this because of the convenience of the query expression \r\n+        List ls = em.createQuery(failure).getResultList();\r\n+        assertFalse(ls.isEmpty());\r\n         endEm(em);\r\n     }\r\n \r"},{"sha":"5c0db50c9f1f861a5df12e18528c8bcdad7a02d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/f9c5b8aad99b882e3aac0736126ce091c0e32815/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/f9c5b8aad99b882e3aac0736126ce091c0e32815/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=f9c5b8aad99b882e3aac0736126ce091c0e32815","patch":"@@ -330,26 +330,22 @@ public void testMixedQuery() {\n         createMixed();\r\n \r\n         OpenJPAEntityManager em = emf.createEntityManager();\r\n-        try {\r\n-            Query q = em.createQuery(\"select o from MixedInterface o \" +\r\n-                \"where o.intField = 4\");\r\n-            Collection c = q.getResultList();\r\n-            Set seen = new HashSet();\r\n-            assertEquals(2, c.size());\r\n-            MixedInterface pc;\r\n-            for (Iterator it = c.iterator(); it.hasNext();) {\r\n-                pc = (MixedInterface) it.next();\r\n-                assertEquals(4, pc.getIntField());\r\n-                seen.add(pc.getClass());\r\n-            }\r\n-            assertEquals(2, seen.size());\r\n-\r\n-            fail(\"OPENJPA-481\");\r\n-        } catch (PersistenceException e) {\r\n-            // expected\r\n-        } finally {\r\n-            em.close();\r\n+        Query q = em.createQuery(\"select o from MixedInterface o \" +\r\n+            \"where o.intField = 4\");\r\n+        Collection c = q.getResultList();\r\n+        Set seen = new HashSet();\r\n+        assertEquals(2, c.size());\r\n+        MixedInterface pc;\r\n+        for (Iterator it = c.iterator(); it.hasNext();) {\r\n+            pc = (MixedInterface) it.next();\r\n+            assertEquals(4, pc.getIntField());\r\n+            seen.add(pc.getClass());\r\n         }\r\n+        assertEquals(2, seen.size());\r\n+        \r\n+        // Changes of OPENJPA-485 had the positive (but unintended) consequence\r\n+        // of making this case pass, which was failing before as reported in\r\n+        // OPENJPA-481\r\n     }\r\n \r\n     public void testQueryForMixedInterfaceImpls() {\r"}]}

