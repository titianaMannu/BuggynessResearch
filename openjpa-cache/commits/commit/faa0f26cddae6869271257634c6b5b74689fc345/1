{"sha":"faa0f26cddae6869271257634c6b5b74689fc345","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhYTBmMjZjZGRhZTY4NjkyNzEyNTc2MzRjNmI1Yjc0Njg5ZmMzNDU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T22:19:31Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T22:19:31Z"},"message":"OPENJPA-612 Add support for calculating update value in QueryImpl.updateInMemory\nHelp comitting patch provided by Fay Wang\nAdd support for in-memory string function evulation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ac744a1ea0802d7120c3726ffacbeaae88b644e","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ac744a1ea0802d7120c3726ffacbeaae88b644e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/faa0f26cddae6869271257634c6b5b74689fc345","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/faa0f26cddae6869271257634c6b5b74689fc345","html_url":"https://github.com/apache/openjpa/commit/faa0f26cddae6869271257634c6b5b74689fc345","comments_url":"https://api.github.com/repos/apache/openjpa/commits/faa0f26cddae6869271257634c6b5b74689fc345/comments","author":null,"committer":null,"parents":[{"sha":"dbbd1236f235a86f672b3f21bedaf2ee5672b34c","url":"https://api.github.com/repos/apache/openjpa/commits/dbbd1236f235a86f672b3f21bedaf2ee5672b34c","html_url":"https://github.com/apache/openjpa/commit/dbbd1236f235a86f672b3f21bedaf2ee5672b34c"}],"stats":{"total":399,"additions":309,"deletions":90},"files":[{"sha":"4f1aaefae70bad38d300dee934b38ec46eb85889","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":217,"deletions":83,"changes":300,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -680,104 +680,238 @@ protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n         return sql.prepareStatement(conn);\n     }    \n \n-    public Object evaluate(Object value, Object ob, Object[] params,\n+    public Object evaluate(Object value, Object ob, Object[] params, \n         OpenJPAStateManager sm) {\n-        if (value instanceof org.apache.openjpa.jdbc.kernel.exps.Math) {\n-            org.apache.openjpa.jdbc.kernel.exps.Math mathVal =\n-                (org.apache.openjpa.jdbc.kernel.exps.Math) value;\n-\n-            Val value1 = mathVal.getVal1();\n-            Object val1 = getValue(value1, ob, params, sm);\n-            Class c1 = value1.getType();\n-\n-            Val value2 = mathVal.getVal2();\n-            Object val2 = getValue(value2, ob, params, sm);\n-            Class c2 = value2.getType();\n-\n-            String op = mathVal.getOperation();\n-\n-            if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.ADD))\n-                return Filters.add(val1, c1, val2, c2);\n-            else if (op.equals(\n-                    org.apache.openjpa.jdbc.kernel.exps.Math.SUBTRACT))\n-                return Filters.subtract(val1, c1, val2, c2);\n-            else if (op.equals(\n-                    org.apache.openjpa.jdbc.kernel.exps.Math.MULTIPLY))\n-                return Filters.multiply(val1, c1, val2, c2);\n-            else if (op.equals(\n-                    org.apache.openjpa.jdbc.kernel.exps.Math.DIVIDE))\n-                return Filters.divide(val1, c1, val2, c2);\n-            else if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.MOD))\n-                return Filters.mod(val1, c1, val2, c2);\n+        int id = 0;\n+        if (value instanceof org.apache.openjpa.jdbc.kernel.exps.Val)\n+            id = ((org.apache.openjpa.jdbc.kernel.exps.Val)value).getId();\n+        else\n+            throw new UnsupportedException(); \n+\n+        switch(id) {\n+        case Val.MATH_VAL:\n+            return handleMathVal(value, ob, params, sm);\n+        case Val.CONCAT_VAL:\n+            return handleConcatVal(value, ob, params, sm);\n+        case Val.SUBSTRING_VAL:\n+            return handleSubstringVal(value, ob, params, sm);\n+        case Val.ARGS_VAL:\n+            return handleArgsVal(value, ob, params, sm);\n+        case Val.LOWER_VAL:\n+            return handleLowerVal(value, ob, params, sm);\n+        case Val.UPPER_VAL:\n+            return handleUpperVal(value, ob, params, sm);\n+        case Val.LENGTH_VAL:\n+            return handleLengthVal(value, ob, params, sm);\n+        case Val.TRIM_VAL:\n+            return handleTrimVal(value, ob, params, sm);\n+        case Val.INDEXOF_VAL:\n+            return handleIndexOfVal(value, ob, params, sm);\n+        default:    \n             throw new UnsupportedException();\n         }\n+    }\n+\n+    private Object handleMathVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Math mathVal =\n+            (org.apache.openjpa.jdbc.kernel.exps.Math) value;\n+        Val value1 = mathVal.getVal1();\n+        Object val1 = getValue(value1, ob, params, sm);\n+        Class c1 = value1.getType();\n+\n+        Val value2 = mathVal.getVal2();\n+        Object val2 = getValue(value2, ob, params, sm);\n+        Class c2 = value2.getType();\n+\n+        String op = mathVal.getOperation();\n+        if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.ADD)) \n+            return Filters.add(val1, c1, val2, c2);\n+        else if (op.equals(\n+                org.apache.openjpa.jdbc.kernel.exps.Math.SUBTRACT))\n+            return Filters.subtract(val1, c1, val2, c2);\n+        else if (op.equals(\n+                org.apache.openjpa.jdbc.kernel.exps.Math.MULTIPLY)) \n+            return Filters.multiply(val1, c1, val2, c2);\n+        else if (op.equals(\n+                org.apache.openjpa.jdbc.kernel.exps.Math.DIVIDE)) \n+            return Filters.divide(val1, c1, val2, c2);\n+        else if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.MOD)) \n+            return Filters.mod(val1, c1, val2, c2);\n         throw new UnsupportedException();\n     }\n \n-    private Object getValue(Object ob, FieldMapping fmd,\n+    private Object handleConcatVal(Object value, Object ob, Object[] params,\n         OpenJPAStateManager sm) {\n-        int i = fmd.getIndex();\n-        switch (fmd.getDeclaredTypeCode()) {\n-            case JavaTypes.BOOLEAN:\n-                return sm.fetchBooleanField(i);\n-            case JavaTypes.BYTE:\n-                return sm.fetchByteField(i);\n-            case JavaTypes.CHAR:\n-                return sm.fetchCharField(i);\n-            case JavaTypes.DOUBLE:\n-                return sm.fetchDoubleField(i);\n-            case JavaTypes.FLOAT:\n-                return sm.fetchFloatField(i);\n-            case JavaTypes.INT:\n-                return sm.fetchIntField(i);\n-            case JavaTypes.LONG:\n-                return sm.fetchLongField(i);\n-            case JavaTypes.SHORT:\n-                return sm.fetchShortField(i);\n-            case JavaTypes.STRING:\n-                return sm.fetchStringField(i);\n-            case JavaTypes.DATE:\n-            case JavaTypes.NUMBER:\n-            case JavaTypes.BOOLEAN_OBJ:\n-            case JavaTypes.BYTE_OBJ:\n-            case JavaTypes.CHAR_OBJ:\n-            case JavaTypes.DOUBLE_OBJ:\n-            case JavaTypes.FLOAT_OBJ:\n-            case JavaTypes.INT_OBJ:\n-            case JavaTypes.LONG_OBJ:\n-            case JavaTypes.SHORT_OBJ:\n-            case JavaTypes.BIGDECIMAL:\n-            case JavaTypes.BIGINTEGER:\n-            case JavaTypes.LOCALE:\n-            case JavaTypes.OBJECT:\n-            case JavaTypes.OID:\n-                return sm.fetchObjectField(i);\n-            default:\n-                throw new UnsupportedException();\n-        }\n+        org.apache.openjpa.jdbc.kernel.exps.Concat concatVal =\n+            (org.apache.openjpa.jdbc.kernel.exps.Concat)value;\n+        Val value1 = concatVal.getVal1();\n+        Object val1 = getValue(value1, ob, params, sm);\n+\n+        Val value2 = concatVal.getVal2();\n+        Object val2 = getValue(value2, ob, params, sm);\n+        return new StringBuffer(100).append(val1).append(val2).toString();\n     }\n \n-    private Object eval(Object ob, Object value, Object[] params,\n+    private Object handleSubstringVal(Object value, Object ob, Object[] params,\n         OpenJPAStateManager sm) {\n-        Object val = null;\n-        if (value instanceof Literal)\n-            val = ((Literal) value).getValue();\n-        else if (value instanceof Constant)\n-            val = ((Constant) value).getValue(params);\n-        else\n-            val = evaluate(value, ob, params, sm);\n+        org.apache.openjpa.jdbc.kernel.exps.Substring substrVal =\n+            (org.apache.openjpa.jdbc.kernel.exps.Substring) value;\n+        Val value1 = substrVal.getVal1();\n+        String val1 = (String) getValue(value1, ob, params, sm);\n+\n+        Val value2 = substrVal.getVal2();\n+        Object val2 = getValue(value2, ob, params, sm);\n+\n+        org.apache.openjpa.kernel.exps.Value[] valAry2 = \n+            (org.apache.openjpa.kernel.exps.Value[]) val2;\n+        Object arg1 = getValue(valAry2[0], ob, params, sm); //starting pos\n+        Object arg2 = getValue(valAry2[1], ob, params, sm); // length\n+        int startIdx = ((Long) arg1).intValue();\n+        int length = ((Long) arg2).intValue();\n+        int endIdx = startIdx + length;\n+        return val1.substring(startIdx, endIdx);\n+    }\n+\n+    private Object handleArgsVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Args argsVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Args) value;\n+        return argsVal.getValues();\n+    }\n+\n+    private Object handleLowerVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.ToLowerCase lowerVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.ToLowerCase) value;\n+        Val val = lowerVal.getValue();\n+        return ((String) getValue(val, ob, params, sm)).toLowerCase();\n+    }\n+\n+    private Object handleUpperVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm){\n+        org.apache.openjpa.jdbc.kernel.exps.ToUpperCase upperVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.ToUpperCase) value;\n+        Val val = upperVal.getValue();\n+        return ((String) getValue(val, ob, params, sm)).toUpperCase();\n+    }\n \n-        return val;\n+    private Object handleLengthVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm){\n+        org.apache.openjpa.jdbc.kernel.exps.StringLength strLenVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.StringLength) value;\n+        Val val = strLenVal.getValue();\n+        return ((String) getValue(val, ob, params, sm)).length();\n+    }\n+\n+    private Object handleTrimVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Trim trimVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Trim) value;\n+        Val val = trimVal.getVal();\n+        String valStr = (String) getValue(val, ob, params, sm);\n+        Val trimChar = trimVal.getTrimChar();\n+        char trimCharObj = ((String) getValue(trimChar, ob, params, sm)).\n+            charAt(0);\n+        Boolean where = trimVal.getWhere();\n+        if (where == null) { //trim both\n+            return trimLeading(trimTrailing(valStr, trimCharObj), trimCharObj);\n+        } else if (where.booleanValue()) { // trim leading\n+            return trimLeading(valStr, trimCharObj);\n+        } else { // trim trailing\n+            return trimTrailing(valStr, trimCharObj);\n+        }\n+    }\n+\n+    private String trimLeading(String value, char trimChar) {\n+        int startIdx = 0;\n+        int len = value.length();\n+        for (int i = 0; i < len; i++) {\n+            if (value.charAt(i) != trimChar) {\n+                startIdx = i;\n+                break;\n+            }\n+        }\n+        return value.substring(startIdx);\n+    }\n+\n+    private String trimTrailing(String value, char trimChar) {\n+        int endIdx = 0;\n+        int len = value.length();\n+        for (int i = len-1; i >= 0; i--) {\n+            if (value.charAt(i) != trimChar) {\n+                endIdx = i;\n+                break;\n+            }\n+        }\n+        return value.substring(0, endIdx+1);\n+    }\n+\n+    private Object handleIndexOfVal(Object value, Object ob, Object[] params,\n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.IndexOf locateVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.IndexOf) value;\n+        String val1 = (String) getValue(locateVal.getVal1(), ob, params, sm);\n+        Val[] val2 = (Val[]) getValue(locateVal.getVal2(), ob, params, sm);\n+        String strVal = (String)getValue(val2[0], ob, params, sm);\n+        int idx = ((Long) getValue(val2[1], ob, params, sm)).intValue();\n+        return strVal.indexOf(val1, idx);\n     }\n \n     private Object getValue(Object value, Object ob, Object[] params,\n         OpenJPAStateManager sm) {\n-        if (value instanceof org.apache.openjpa.jdbc.kernel.exps.Math)\n-            return evaluate(value, ob, params, sm);\n-        else if (value instanceof PCPath) {\n-            FieldMapping fm = (FieldMapping)((PCPath)value).last();\n+        if (value instanceof PCPath) {\n+            FieldMapping fm = (FieldMapping)((PCPath) value).last();\n             return getValue(ob, fm, sm);\n-        } else\n-            return eval(ob, value, params, sm);\n+        } else if (value instanceof Literal) {\n+            return ((Literal) value).getValue();\n+        } else if (value instanceof Constant) {\n+            return ((Constant) value).getValue(params);\n+        } else {\n+            return evaluate(value, ob, params, sm);\n+        }\n+    }\n+\n+    private Object getValue(Object ob, FieldMapping fmd,\n+        OpenJPAStateManager sm) {\n+        int i = fmd.getIndex();\n+        switch (fmd.getDeclaredTypeCode()) {\n+        case JavaTypes.BOOLEAN:\n+            return sm.fetchBooleanField(i);\n+        case JavaTypes.BYTE:\n+            return sm.fetchByteField(i);\n+        case JavaTypes.CHAR:\n+            return sm.fetchCharField(i);\n+        case JavaTypes.DOUBLE:\n+            return sm.fetchDoubleField(i);\n+        case JavaTypes.FLOAT:\n+            return sm.fetchFloatField(i);\n+        case JavaTypes.INT:\n+            return sm.fetchIntField(i);\n+        case JavaTypes.LONG:\n+            return sm.fetchLongField(i);\n+        case JavaTypes.SHORT:\n+            return sm.fetchShortField(i);\n+        case JavaTypes.STRING:\n+            return sm.fetchStringField(i);\n+        case JavaTypes.DATE:\n+        case JavaTypes.NUMBER:\n+        case JavaTypes.BOOLEAN_OBJ:\n+        case JavaTypes.BYTE_OBJ:\n+        case JavaTypes.CHAR_OBJ:\n+        case JavaTypes.DOUBLE_OBJ:\n+        case JavaTypes.FLOAT_OBJ:\n+        case JavaTypes.INT_OBJ:\n+        case JavaTypes.LONG_OBJ:\n+        case JavaTypes.SHORT_OBJ:\n+        case JavaTypes.BIGDECIMAL:\n+        case JavaTypes.BIGINTEGER:\n+        case JavaTypes.LOCALE:\n+        case JavaTypes.OBJECT:\n+        case JavaTypes.OID:\n+            return sm.fetchObjectField(i);\n+        default:\n+            throw new UnsupportedException();\n+        }\n     }\n }"},{"sha":"8185b98b94633358b13429608e46a11054697518","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -81,5 +81,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         visitor.enter(this);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.VAL;\n+    }\n }\n "},{"sha":"d6379b90837dd4278d8d58ac1661f6b9ad8d0586","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -194,4 +194,8 @@ public void acceptVisit(ExpressionVisitor visitor) {\n             _args[i].acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.ARGS_VAL;\n+    }\n }"},{"sha":"03897fa0cf1ac4801aaffb3b3feb0114bb2ac6b4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -35,7 +35,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class Concat\n+public class Concat\n     extends AbstractVal {\n \n     private final Val _val1;\n@@ -50,6 +50,14 @@ public Concat(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -145,5 +153,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.CONCAT_VAL;\n+    }\n }\n "},{"sha":"ec0f36aabb65fd80a21a40903390deaa2b0d970d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -33,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class IndexOf\n+public class IndexOf\n     extends AbstractVal {\n \n     private final Val _val1;\n@@ -49,6 +49,13 @@ public IndexOf(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -141,5 +148,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.INDEXOF_VAL;\n+    }\n }\n "},{"sha":"02535edfec268c9bcff629b098f828ef2cbd27cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -27,7 +27,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class StringLength\n+public class StringLength\n     extends StringFunction {\n \n     private Class _cast = null;\n@@ -61,5 +61,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         getValue().appendTo(sel, ctx, state, buf, index);\n         buf.append(func.substring(idx + 3));\n     }\n+\n+    public int getId() {\n+        return Val.LENGTH_VAL;\n+    }\n }\n "},{"sha":"a7d01bde7d6ce5d4382ae93de97166e470e00973","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -33,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class Substring\n+public class Substring\n     extends AbstractVal {\n \n     private final Val _val1;\n@@ -48,6 +48,14 @@ public Substring(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -137,5 +145,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.SUBSTRING_VAL;\n+    }\n }\n "},{"sha":"6c1dbfcf6a0d14da95d12bd0d78b6d257cda69db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -27,7 +27,7 @@\n  *\n  * @author Abe White\n  */\n-class ToLowerCase\n+public class ToLowerCase\n     extends StringFunction {\n \n     /**\n@@ -50,4 +50,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         getValue().appendTo(sel, ctx, state, buf, index);\n         buf.append(func.substring(idx + 3));\n     }\n+\n+    public int getId() {\n+        return Val.LOWER_VAL;\n+    }\n }"},{"sha":"8c176c7d4058254115a604dc1255f92639950452","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -27,7 +27,7 @@\n  *\n  * @author Abe White\n  */\n-class ToUpperCase\n+public class ToUpperCase\n     extends StringFunction {\n \n     /**\n@@ -50,5 +50,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         getValue().appendTo(sel, ctx, state, buf, index);\n         buf.append(func.substring(idx + 3));\n     }\n+\n+    public int getId() {\n+        return Val.UPPER_VAL;\n+    }\n }\n "},{"sha":"183ada1d22777cc7fd0f33ae60c98699567fa890","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -36,7 +36,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class Trim\n+public class Trim\n     extends AbstractVal {\n \n     private final Val _val;\n@@ -53,6 +53,18 @@ public Trim(Val val, Val trimChar, Boolean where) {\n         _where = where;\n     }\n \n+    public Val getVal() {\n+        return _val;\n+    }\n+\n+    public Val getTrimChar() {\n+        return _trimChar;\n+    }\n+\n+    public Boolean getWhere(){\n+        return _where;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -195,5 +207,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _trimChar.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.TRIM_VAL;\n+    }\n }\n "},{"sha":"8bcabf3777aa31b786916a9538311d72d919025f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/faa0f26cddae6869271257634c6b5b74689fc345/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=faa0f26cddae6869271257634c6b5b74689fc345","patch":"@@ -51,6 +51,18 @@\n      */\n     public final int FORCE_OUTER = 2 << 2; \n \n+    public final int VAL = 0;\n+    public final int MATH_VAL = 1;\n+    public final int CONCAT_VAL = 2;\n+    public final int SUBSTRING_VAL = 3;\n+    public final int UPPER_VAL = 4;\n+    public final int LOWER_VAL = 5;\n+    public final int TRIM_VAL = 6;\n+    public final int LENGTH_VAL = 7;\n+    public final int LOCATE_VAL = 8;\n+    public final int ARGS_VAL = 9;\n+    public final int INDEXOF_VAL = 10;\n+\n     /**\n      * Initialize the value. This method should recursively initialize any\n      * sub-values. \n@@ -144,4 +156,6 @@ public void appendIsNull(Select sel, ExpContext ctx, ExpState state,\n      */\n     public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql);\n+\n+    public int getId();\n }"}]}

