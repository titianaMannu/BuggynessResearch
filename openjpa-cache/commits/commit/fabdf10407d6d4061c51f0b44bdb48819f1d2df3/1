{"sha":"fabdf10407d6d4061c51f0b44bdb48819f1d2df3","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhYmRmMTA0MDdkNmQ0MDYxYzUxZjBiNDRiZGI0ODgxOWYxZDJkZjM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-14T15:44:55Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-14T15:44:55Z"},"message":"Fix recently-introduced bug in handling of arrays in data cache.  Add test for\na shared id value among sibling classes deriving from the same mapped \nsuperclass.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@518190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"27d2b7ae6edc7030221d261f3ecad9c5106dd75f","url":"https://api.github.com/repos/apache/openjpa/git/trees/27d2b7ae6edc7030221d261f3ecad9c5106dd75f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fabdf10407d6d4061c51f0b44bdb48819f1d2df3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fabdf10407d6d4061c51f0b44bdb48819f1d2df3","html_url":"https://github.com/apache/openjpa/commit/fabdf10407d6d4061c51f0b44bdb48819f1d2df3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/comments","author":null,"committer":null,"parents":[{"sha":"1da2bd72406d807b3b9c069b4006ee60627552cb","url":"https://api.github.com/repos/apache/openjpa/commits/1da2bd72406d807b3b9c069b4006ee60627552cb","html_url":"https://github.com/apache/openjpa/commit/1da2bd72406d807b3b9c069b4006ee60627552cb"}],"stats":{"total":179,"additions":170,"deletions":9},"files":[{"sha":"d9dd0d9f445c4335cedcc423f6abab70e20b9c1a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=fabdf10407d6d4061c51f0b44bdb48819f1d2df3","patch":"@@ -100,6 +100,9 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                 int length = Array.getLength(data);\n                 Object a = Array.newInstance(fmd.getElement().getDeclaredType(),\n                     length);\n+                if (length == 0)\n+                    return a;\n+\n                 if (isImmutableType(fmd.getElement())) {\n                     System.arraycopy(data, 0, a, 0, length);\n                 } else {\n@@ -221,28 +224,32 @@ protected Object toData(FieldMetaData fmd, Object val, StoreContext ctx) {\n                 }\n                 return m2;\n             case JavaTypes.ARRAY:\n-                Object a = val;\n-                int length = Array.getLength(a);\n+                int length = Array.getLength(val);\n                 if (length == 0)\n                     return EMPTY_ARRAY;\n \n-                Object dataArray = Array.newInstance(\n-                    fmd.getElement().getDeclaredType(), length);\n+                Object a;\n                 if (isImmutableType(fmd.getElement())) {\n-                    System.arraycopy(a, 0, dataArray, 0, length);\n+                    a = Array.newInstance(fmd.getElement().getDeclaredType(), \n+                        length);\n+                    System.arraycopy(val, 0, a, 0, length);\n                 } else {\n+                    Object[] data = new Object[length];\n                     for (int i = 0; i < length; i++) {\n-                        val = toNestedData(fmd.getElement(), Array.get(a, i),\n-                            ctx);\n-                        Array.set(dataArray, i, val);\n+                        data[i] = toNestedData(fmd.getElement(), \n+                            Array.get(val, i), ctx);\n                     }\n+                    a = data;\n                 }\n-                return dataArray;\n+                return a;\n             default:\n                 return toNestedData(fmd, val, ctx);\n         }\n     }\n \n+    /**\n+     * Return whether the declared type of the given value is immutable.\n+     */\n     private boolean isImmutableType(ValueMetaData element) {\n         switch (element.getDeclaredTypeCode()) {\n             case JavaTypes.BOOLEAN:"},{"sha":"67502686ec357fb6f28401fc3bcec1f81e1d629e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java","raw_url":"https://github.com/apache/openjpa/raw/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/EntityL3Sibling.java?ref=fabdf10407d6d4061c51f0b44bdb48819f1d2df3","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class EntityL3Sibling \n+    extends MappedSuperclassL2 {\n+\n+    private int siblingl3data;\n+\n+    public int getSiblingL3Data() {\n+        return siblingl3data;\n+    }\n+\n+    public void setSiblingL3Data(int data) {\n+        siblingl3data = data;\n+    }\n+}\n+"},{"sha":"bb5e68f7449c48e897b157d9dd184c4e1ad8329e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/MappedSuperclassBase.java?ref=fabdf10407d6d4061c51f0b44bdb48819f1d2df3","patch":"@@ -30,5 +30,9 @@\n     public long getId() {\n         return id;\n     }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n }\n "},{"sha":"954e21aedb469d0d95147d4dd0f3e1222a5e0e5b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/fabdf10407d6d4061c51f0b44bdb48819f1d2df3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java?ref=fabdf10407d6d4061c51f0b44bdb48819f1d2df3","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test that sibling classes with a shared id value declared in their \n+ * mapped superclass are distinguished correctly.\n+ *\n+ * @author Abe White\n+ */\n+public class TestSharedMappedSuperclassIdValue\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        String types = MappedSuperclassBase.class.getName() + \";\"\n+            + MappedSuperclassL2.class.getName() + \";\"\n+            + EntityL3.class.getName() + \";\"\n+            + EntityL3Sibling.class.getName();\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        EntityL3 ent = new EntityL3();\n+        ent.setId(1);\n+        ent.setL2Data(99); \n+        ent.setL3Data(100);\n+        EntityL3Sibling sib = new EntityL3Sibling();\n+        sib.setId(1);\n+        sib.setL2Data(100); \n+        sib.setSiblingL3Data(101);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(ent);\n+        em.persist(sib);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from EntityL3\").executeUpdate();\n+            em.createQuery(\"delete from EntityL3Sibling\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testFind() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityL3 ent = em.find(EntityL3.class, 1L);\n+        assertNotNull(ent);\n+        assertEquals(99, ent.getL2Data());\n+        assertEquals(100, ent.getL3Data());\n+\n+        EntityL3Sibling sib = em.find(EntityL3Sibling.class, 1L);\n+        assertNotNull(sib);\n+        assertEquals(100, sib.getL2Data());\n+        assertEquals(101, sib.getSiblingL3Data());\n+\n+        em.close();\n+    }\n+\n+    public void testGetReference() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityL3 ent = em.getReference(EntityL3.class, 1L);\n+        assertNotNull(ent);\n+\n+        EntityL3Sibling sib = em.getReference(EntityL3Sibling.class, 1L);\n+        assertNotNull(sib);\n+\n+        assertEquals(99, ent.getL2Data());\n+        assertEquals(100, ent.getL3Data());\n+        assertEquals(100, sib.getL2Data());\n+        assertEquals(101, sib.getSiblingL3Data());\n+\n+        em.close();\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestSharedMappedSuperclassIdValue.class);\n+    }\n+}\n+"}]}

