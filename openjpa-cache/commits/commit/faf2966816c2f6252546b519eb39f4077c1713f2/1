{"sha":"faf2966816c2f6252546b519eb39f4077c1713f2","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhZjI5NjY4MTZjMmY2MjUyNTQ2YjUxOWViMzlmNDA3N2MxNzEzZjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-04T21:18:38Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-04T21:18:38Z"},"message":"OPENJPA-1334: Refresh should ignore cache.retrieve.mode settings. Assorted changes in property processing for usability \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdd7e17936811ba3eb69da5b4dbc163904d1fbc1","url":"https://api.github.com/repos/apache/openjpa/git/trees/bdd7e17936811ba3eb69da5b4dbc163904d1fbc1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/faf2966816c2f6252546b519eb39f4077c1713f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/faf2966816c2f6252546b519eb39f4077c1713f2","html_url":"https://github.com/apache/openjpa/commit/faf2966816c2f6252546b519eb39f4077c1713f2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/faf2966816c2f6252546b519eb39f4077c1713f2/comments","author":null,"committer":null,"parents":[{"sha":"f0ad193611fdc1e401c897388ddcd9c14ca26227","url":"https://api.github.com/repos/apache/openjpa/commits/f0ad193611fdc1e401c897388ddcd9c14ca26227","html_url":"https://github.com/apache/openjpa/commit/f0ad193611fdc1e401c897388ddcd9c14ca26227"}],"stats":{"total":436,"additions":304,"deletions":132},"files":[{"sha":"5ed836baf9e7053ad5883ecd766a86661550609f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -374,6 +374,8 @@\n      * The entities are never refreshed from DataCache if lock is being applied \n      * (e.g. in a pessimistic transaction) and hence this setting only refers \n      * to behavior when not locking.\n+     * This flag can be used to overwrite RetrieveMode.BYPASS.\n+     * By default, however, this falg is false. \n      * \n      * @since 1.2.0\n      */"},{"sha":"afcb31e2f80e62f834d1145d8f56f15b8aba98eb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -387,8 +387,7 @@ private void cacheStateManager(DataCache cache, OpenJPAStateManager sm, DataCach\n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n         FetchConfiguration fetch, int lockLevel, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n-        if (cache == null || sm.isEmbedded() \n-            || _ctx.getFetchConfiguration().getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS)\n+        if (cache == null || sm.isEmbedded() || bypass(_ctx.getFetchConfiguration(), StoreManager.FORCE_LOAD_NONE))\n             return super.load(sm, fields, fetch, lockLevel, edata);\n \n         DataCachePCData data = cache.get(sm.getObjectId());\n@@ -410,11 +409,8 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n \n     public Collection<Object> loadAll(Collection<OpenJPAStateManager> sms, PCState state, int load,\n     \t\tFetchConfiguration fetch, Object edata) {\n-    \tif (isLocking(fetch) || \n-    \t   (!isLocking(fetch) &&\n-    \t\t(load == StoreManager.FORCE_LOAD_REFRESH)\n-    \t\t&& !_ctx.getConfiguration().getRefreshFromDataCache())) {\n-    \t       return super.loadAll(sms, state, load, fetch, edata);\n+    \tif (bypass(fetch, load)) {\n+    \t    return super.loadAll(sms, state, load, fetch, edata);\n     \t}\n \n         Map<OpenJPAStateManager, BitSet> unloaded = null;\n@@ -528,7 +524,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n         }\n         return failed;\n     }\n-\n+    \n     /**\n      * Helper method to add an unloaded instance to the given map.\n      */\n@@ -690,6 +686,24 @@ private DataCachePCData newPCData(OpenJPAStateManager sm) {\n         return new DataCachePCDataImpl(sm.fetchObjectId(), meta, _mgr.selectCache(sm).getName());\n     }\n \n+    /**\n+     * Affirms if a load operation must bypass the L2 cache.\n+     * If lock is active, always bypass.\n+     * \n+     */\n+    boolean bypass(FetchConfiguration fetch, int load) {\n+        // Order of checks are important\n+        if (isLocking(fetch))\n+            return true;\n+        if (_ctx.getConfiguration().getRefreshFromDataCache()) \n+            return false;\n+        if (fetch.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS)\n+            return true;\n+        if (load == StoreManager.FORCE_LOAD_REFRESH)\n+            return true;\n+        return false;\n+    }\n+\n     /**\n      * Return whether the context is locking loaded data.\n      */"},{"sha":"86630a690f056ee98dd4c311e47788d4b82c519c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":31,"deletions":27,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.Reflectable;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.UserException;\n@@ -282,7 +283,7 @@ public static Object get(Object target, Field field) {\n         try {\n             return field.get(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n     \n@@ -327,9 +328,10 @@ private static void makeAccessible(AccessibleObject ao, int mods) {\n     /**\n      * Wrap the given reflection exception as a runtime exception.\n      */\n-    private static RuntimeException wrapReflectionException(Throwable t) {\n+    private static RuntimeException wrapReflectionException(Throwable t, Message message) {\n         if (t instanceof InvocationTargetException)\n-            t = ((InvocationTargetException) t).getTargetException();    \n+            t = ((InvocationTargetException) t).getTargetException();  \n+        t.initCause(new IllegalArgumentException(message.getMessage()));\n         if (t instanceof RuntimeException)\n             return (RuntimeException) t;\n         return new GeneralException(t);\n@@ -345,7 +347,7 @@ public static boolean getBoolean(Object target, Field field) {\n         try {\n             return field.getBoolean(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -359,7 +361,7 @@ public static byte getByte(Object target, Field field) {\n         try {\n             return field.getByte(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -373,7 +375,7 @@ public static char getChar(Object target, Field field) {\n         try {\n             return field.getChar(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -387,7 +389,7 @@ public static double getDouble(Object target, Field field) {\n         try {\n             return field.getDouble(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -401,7 +403,7 @@ public static float getFloat(Object target, Field field) {\n         try {\n             return field.getFloat(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -415,7 +417,7 @@ public static int getInt(Object target, Field field) {\n         try {\n             return field.getInt(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -429,7 +431,7 @@ public static long getLong(Object target, Field field) {\n         try {\n             return field.getLong(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -443,7 +445,7 @@ public static short getShort(Object target, Field field) {\n         try {\n             return field.getShort(target);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-field\", target, field));\n         }\n     }\n \n@@ -457,7 +459,7 @@ public static Object get(Object target, Method getter) {\n         try {\n             return getter.invoke(target, (Object[]) null);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"get-method\", target, getter));\n         }\n     }\n \n@@ -535,7 +537,8 @@ public static void set(Object target, Field field, Object value) {\n         try {\n             field.set(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \n+                    value == null ? \"\" : value.getClass()}));\n         }\n     }\n \n@@ -549,7 +552,7 @@ public static void set(Object target, Field field, boolean value) {\n         try {\n             field.setBoolean(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"boolean\"}));\n         }\n     }\n \n@@ -563,7 +566,7 @@ public static void set(Object target, Field field, byte value) {\n         try {\n             field.setByte(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"byte\"}));\n         }\n     }\n \n@@ -577,7 +580,7 @@ public static void set(Object target, Field field, char value) {\n         try {\n             field.setChar(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"char\"}));\n         }\n     }\n \n@@ -591,7 +594,7 @@ public static void set(Object target, Field field, double value) {\n         try {\n             field.setDouble(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"double\"}));\n         }\n     }\n \n@@ -605,7 +608,7 @@ public static void set(Object target, Field field, float value) {\n         try {\n             field.setFloat(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"float\"}));\n         }\n     }\n \n@@ -619,7 +622,7 @@ public static void set(Object target, Field field, int value) {\n         try {\n             field.setInt(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"int\"}));\n         }\n     }\n \n@@ -633,7 +636,7 @@ public static void set(Object target, Field field, long value) {\n         try {\n             field.setLong(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"long\"}));\n         }\n     }\n \n@@ -647,7 +650,7 @@ public static void set(Object target, Field field, short value) {\n         try {\n             field.setShort(target, value);\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-field\", new Object[]{target, field, value, \"short\"}));\n         }\n     }\n \n@@ -760,7 +763,8 @@ public static void set(Object target, Method setter, Object value) {\n         try {\n             setter.invoke(target, new Object[] { value });\n         } catch (Throwable t) {\n-            throw wrapReflectionException(t);\n+            throw wrapReflectionException(t, _loc.get(\"set-method\", new Object[]{target, setter, value, \n+                    value == null ? \"\" : value.getClass()}));\n         }\n     }\n \n@@ -831,26 +835,26 @@ public static void set(Object target, Method setter, short value) {\n      * it is ignored.\n      *   \n      */\n-    public static Set<String> getBeanStylePropertyNames(Class c) {\n+    public static Set<String> getBeanStylePropertyNames(Class<?> c) {\n         if (c == null)\n-            return Collections.EMPTY_SET;\n+            return Collections.emptySet();\n         Set<String> result = beanPropertiesNameCache.get(c);\n         if (result != null) {\n             return result;\n         }\n         Method[] methods = c.getMethods();\n         if (methods == null || methods.length < 2)\n-            return Collections.EMPTY_SET;\n+            return Collections.emptySet();\n         result = new TreeSet<String>();\n         for (Method m : methods) {\n             if (m.getName().startsWith(\"get\")) {\n                 if (!canReflect(m))\n                     continue;\n                 String prop = StringUtils.capitalize(m.getName()\n                     .substring(\"get\".length()));\n-                Class rtype = m.getReturnType();\n+                Class<?> rtype = m.getReturnType();\n                 try {\n-                  Method setter = c.getMethod(\"set\"+prop, new Class[]{rtype});\n+                  Method setter = c.getMethod(\"set\"+prop, new Class<?>[]{rtype});\n                   if (setter.getReturnType() == void.class || \n                       setter.getReturnType().isAssignableFrom(c))\n                   result.add(prop);"},{"sha":"6b72c1599cb48c21bf74b493837ddb513f868cfc","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -211,4 +211,7 @@ entities-loaded-before-em: Unenhanced classes were detected even though the \\\n     to creating any Entities.    \n temp-file-creation: The temporary file \"{0}\" was created and it may not get \\\n     cleaned up properly.\n-    \n+get-field: Error while getting value of field {1} from instance {0} by reflection.    \n+get-method: Error while getting value by getter method {1} on instance {0} by reflection.    \n+set-field: Error while setting value {2} of {3} on field {1} of instance {0} by reflection.    \n+set-method: Error while setting value {2} of {3} by setter method {1} of instance {0} by reflection.    "},{"sha":"2e99af11d8f11e0ccca3a644c7a195fff039e558","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":18,"deletions":32,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -56,9 +56,8 @@\n     private static final boolean DIRTY = true;\n     private static final boolean REFRESH_FROM_DATACACHE = true;\n     private static final LockModeType NOLOCK = null;\n-    private static final Class ENTITY_NOT_FOUND_ERROR =\n-        EntityNotFoundException.class;\n-    private static final Class NO_ERROR = null;\n+    private static final Class<?> ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\n+    private static final Class<?> NO_ERROR = null;\n \n     private static final String MARKER_DATACACHE = \"in DataCache\";\n     private static final String MARKER_DATABASE  = \"in Database\";\n@@ -376,7 +375,7 @@ String getExpectedMarker(boolean useDataCache, LockModeType lock,\n     \n     public void testDirtyRefreshWithNoLockHitsDatabase() {\n         verifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE,\n-                MARKER_DATACACHE);\n+                MARKER_DATABASE);\n     }\n     \n     public void testDirtyRefreshWithNoLockHitsDataCache() {\n@@ -464,7 +463,7 @@ public void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\n      * @param lock\n      */\n     public void verifyDeleteDetectionOnRefresh(boolean useDataCache, \n-            boolean dirty, LockModeType lock, Class expectedExceptionType) {\n+            boolean dirty, LockModeType lock, Class<?> expectedExceptionType) {\n         OpenJPAEntityManagerFactorySPI emf = (useDataCache)\n             ? emfWithDataCache : emfWithoutDataCache;\n             \n@@ -522,49 +521,36 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache,\n         }\n     }\n \n-    public void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache()\n-    {\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK,\n-                NO_ERROR);\n+    public void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\n     }\n     \n     public void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY,\n-                LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY,\n-                LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ,  ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n     }\n \n-    public void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache()\n-    {\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\n+    public void testDeleteIsDetectedOnDirtyRefreshWithoutLockWithDataCache() {\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\n     }\n     \n     public void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ,\n-                ENTITY_NOT_FOUND_ERROR);\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY,\n-                LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ,  ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n     }\n     \n     public void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ,\n-                ENTITY_NOT_FOUND_ERROR);\n-        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY,\n-                LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ,  ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n     }\n     \n-    public void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache()\n-    {\n-        verifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK,\n-                ENTITY_NOT_FOUND_ERROR);\n+    public void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\n+        verifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\n     }\n     \n     public void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\n-        verifyDeleteDetectionOnRefresh(!WITH_DATACACHE,\n-                !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n-        verifyDeleteDetectionOnRefresh(!WITH_DATACACHE,\n-                !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ,  ENTITY_NOT_FOUND_ERROR);\n+        verifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n     }\n \n }"},{"sha":"53d6c68795436d58dd4d851df3e2ba5cf7cc2bed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","status":"modified","additions":90,"deletions":1,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -18,12 +18,26 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import javax.persistence.CacheRetrieveMode;\n+import javax.persistence.CacheStoreMode;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.persistence.JPAProperties;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n public class TestRefresh extends SingleEMTestCase {\n \n     public void setUp() {\n-        super.setUp(CLEAR_TABLES, Item.class, \"openjpa.AutoDetach\", \"commit\");\n+        super.setUp(CLEAR_TABLES, Item.class, \n+             \"openjpa.AutoDetach\", \"commit\",\n+             \"openjpa.DataCache\", \"true\",\n+             \"openjpa.RemoteCommitProvider\", \"sjvm\");\n     }\n \n     public void testFlushRefreshNewInstance() {\n@@ -36,4 +50,79 @@ public void testFlushRefreshNewInstance() {\n         em.getTransaction().commit();\n         assertEquals(\"Test Data\", item.getItemData());\n     }\n+    \n+    /**\n+     * Refresh always bypass L2 cache.\n+     * According to JPA 2.0 Spec Section 3.7.2:\n+     * \"The retrieveMode property is ignored for the refresh method,\n+     *  which always causes data to be retrieved from the database, not the cache.\"\n+     */\n+    public void testRefreshBypassL2Cache() {\n+        String original = \"Original L2 Cached Data\";\n+        String sneakUpdate = \"Sneak Update\";\n+        em.getTransaction().begin();\n+        Item item = new Item();\n+        item.setItemData(original);\n+        em.persist(item);\n+        em.getTransaction().commit();\n+        assertCached(Item.class, item.getItemId());\n+        \n+        // Sneakily update with SQL\n+        String sql = \"UPDATE I_ITEM SET I_DATA=?1 WHERE I_ID=?2\";\n+        em.getTransaction().begin();\n+        int updateCount = em.createNativeQuery(sql)\n+            .setParameter(1, sneakUpdate)\n+            .setParameter(2, item.getItemId())\n+            .executeUpdate();\n+        assertEquals(1, updateCount);\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        // Find will find the L2 cached data\n+        item = em.find(Item.class, item.getItemId());\n+        assertEquals(original, item.getItemData());\n+        // But refresh will get the actual database record\n+        em.refresh(item);\n+        assertEquals(sneakUpdate, item.getItemData());\n+\n+        // Even if cache retrieve mode is set to USE\n+        em.setProperty(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.USE);\n+        em.refresh(item);\n+        assertEquals(sneakUpdate, item.getItemData());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testCacheRetrieveModeSetting() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.setProperty(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.USE);\n+        Map<String, Object> properties = em.getProperties();\n+        if (!properties.containsKey(JPAProperties.CACHE_RETRIEVE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_RETRIEVE_MODE + \" properties be returned\");\n+        }\n+        Object mode = properties.get(JPAProperties.CACHE_RETRIEVE_MODE);\n+        assertEquals(mode, CacheRetrieveMode.USE);\n+    }\n+    \n+    public void testCacheStoreModeSetting() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.setProperty(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.USE);\n+        Map<String, Object> properties = em.getProperties();\n+        if (!properties.containsKey(JPAProperties.CACHE_STORE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_STORE_MODE + \" properties be returned\");\n+        }\n+        Object mode = properties.get(JPAProperties.CACHE_STORE_MODE);\n+        assertEquals(mode, CacheStoreMode.USE);\n+    }\n+    \n+    \n+    void assertCached(Class<?> cls, Object oid) {\n+        assertTrue(cls + \":\" + oid + \" should be in L2 cache, but not\", emf.getCache().contains(cls, oid));\n+    }\n+    \n+    void assertNotCached(Class<?> cls, Object oid) {\n+        assertTrue(cls + \":\" + oid + \" should not be in L2 cache, but is\", !emf.getCache().contains(cls, oid));\n+    }\n+    \n }"},{"sha":"9e83e4c1f144c93a7df0f5be7ab50bfcf9759e67","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":66,"deletions":33,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -33,6 +33,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.EnumSet;\n+import java.util.HashMap;\n import java.util.IdentityHashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -49,6 +50,7 @@\n import javax.persistence.metamodel.Metamodel;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.ee.ManagedRuntime;\n@@ -105,11 +107,7 @@\n     private DelegatingBroker _broker;\n     private EntityManagerFactoryImpl _emf;\n     private Map<FetchConfiguration,FetchPlan> _plans = new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\n-\n     private RuntimeExceptionTranslator _ret = PersistenceExceptions.getRollbackTranslator(this);\n-    \n-    protected final String RETRIEVE_MODE_PROP = \"javax.persistence.cache.retrieveMode\";\n-    protected final String STORE_MODE_PROP = \"javax.persistence.cache.storeMode\";\n \n     public EntityManagerImpl() {\n         // for Externalizable\n@@ -732,10 +730,7 @@ public void releaseAll(Object... entities) {\n     }\n \n     public void refresh(Object entity) {\n-        assertNotCloseInvoked();\n-        assertValidAttchedEntity(entity);\n-        _broker.assertWriteOperation();\n-        _broker.refresh(entity, this);\n+        refresh(entity, null, null);\n     }\n \n     public void refresh(Object entity, LockModeType mode) {\n@@ -748,11 +743,19 @@ public void refresh(Object entity, Map<String, Object> properties) {\n \n     public void refresh(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(entity);\n+        assertValidAttchedEntity(\"refresh\", entity);\n \n         _broker.assertWriteOperation();\n-\n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n+        DataCacheRetrieveMode rmode = getFetchPlan().getCacheRetrieveMode();\n+        if (DataCacheRetrieveMode.USE.equals(rmode) || rmode == null) {\n+            getFetchPlan().setCacheRetrieveMode(DataCacheRetrieveMode.BYPASS);\n+            if (rmode != null) {\n+                Log log = _broker.getConfiguration().getConfigurationLog();\n+                log.warn(_loc.get(\"cache-retrieve-override\", Exceptions.toString(entity)));\n+            }\n+                \n+        }\n         try {\n             _broker.refresh(entity, this);\n         } finally {\n@@ -1121,7 +1124,7 @@ public Object getDelegate() {\n     public LockModeType getLockMode(Object entity) {\n         assertNotCloseInvoked();\n         _broker.assertActiveTransaction();\n-        assertValidAttchedEntity(entity);\n+        assertValidAttchedEntity(\"getLockMode\", entity);\n         return MixedLockLevelsHelper.fromLockLevel(\n             _broker.getLockLevel(entity));\n     }\n@@ -1132,13 +1135,13 @@ public void lock(Object entity, LockModeType mode) {\n \n     public void lock(Object entity) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(entity);\n+        assertValidAttchedEntity(\"lock\", entity);\n         _broker.lock(entity, this);\n     }\n \n     public void lock(Object entity, LockModeType mode, int timeout) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(entity);\n+        assertValidAttchedEntity(\"lock\", entity);\n \n         configureCurrentFetchPlan(pushFetchPlan(), null, mode, false);\n         try {\n@@ -1150,7 +1153,7 @@ public void lock(Object entity, LockModeType mode, int timeout) {\n \n     public void lock(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(entity);\n+        assertValidAttchedEntity(\"lock\", entity);\n         _broker.assertActiveTransaction();\n \n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, false);\n@@ -1315,11 +1318,11 @@ void assertNotCloseInvoked() {\n      * Throw IllegalArgumentExceptionif if entity is not a valid entity or\n      * if it is detached.\n      */\n-    void assertValidAttchedEntity(Object entity) {\n+    void assertValidAttchedEntity(String call, Object entity) {\n         OpenJPAStateManager sm = _broker.getStateManager(entity);\n         if (sm == null || !sm.isPersistent() || sm.isDetached()) {\n-            throw new IllegalArgumentException(_loc.get(\n-                \"invalid_entity_argument\").getMessage());\n+            throw new IllegalArgumentException(_loc.get(\"invalid_entity_argument\", \n+                call, entity == null ? \"null\" : Exceptions.toString(entity)).getMessage());\n         }\n     }\n \n@@ -1556,12 +1559,36 @@ public OpenJPAQuery createDynamicQuery(\n         return createQuery(jpql);\n     }\n \n+    /**\n+     * Get the properties used currently by this entity manager.\n+     * The property keys and their values are harvested from kernel artifacts namely\n+     * the Broker and FetchPlan by reflection.\n+     * These property keys and values that denote the bean properties/values of the kernel artifacts\n+     * are converted to the original keys/values that user used to set the properties.\n+     *    \n+     */\n     public Map<String, Object> getProperties() {\n-        Map props = _broker.getProperties();\n+        Map<String,Object> props = _broker.getProperties();\n         for (String s : _broker.getSupportedProperties()) {\n-            Method getter = Reflection.findGetter(this.getClass(), getBeanPropertyName(s), false);\n-            if (getter != null)\n-                props.put(s, Reflection.get(this, getter));\n+            String kernelKey = getBeanPropertyName(s);\n+            Method getter = Reflection.findGetter(this.getClass(), kernelKey, false);\n+            if (getter != null) {\n+                String userKey = JPAProperties.getUserName(kernelKey);\n+                Object kvalue  = Reflection.get(this, getter);\n+                props.put(userKey.equals(kernelKey) ? s : userKey, JPAProperties.convertToUserValue(userKey, kvalue));\n+            }\n+        }\n+        FetchPlan fetch = getFetchPlan();\n+        Class<?> fetchType = fetch.getClass();\n+        Set<String> fProperties = Reflection.getBeanStylePropertyNames(fetchType);\n+        for (String s : fProperties) {\n+            String kernelKey = getBeanPropertyName(s);\n+            Method getter = Reflection.findGetter(fetchType, kernelKey, false);\n+            if (getter != null) {\n+                String userKey = JPAProperties.getUserName(kernelKey);\n+                Object kvalue  = Reflection.get(fetch, getter);\n+                props.put(userKey.equals(kernelKey) ? s : userKey, JPAProperties.convertToUserValue(userKey, kvalue));\n+            }\n         }\n         return props;\n     }\n@@ -1621,17 +1648,17 @@ private void configureCurrentFetchPlan(FetchPlan fetch, Map<String, Object> prop\n     private void configureCurrentCacheModes(FetchPlan fetch, Map<String, Object> properties) {\n         if (properties == null)\n             return;\n-        CacheRetrieveMode rMode = JPAProperties.get(CacheRetrieveMode.class, JPAProperties.CACHE_RETRIEVE_MODE, \n-                properties);\n+        CacheRetrieveMode rMode = JPAProperties.getEnumValue(CacheRetrieveMode.class, \n+                JPAProperties.CACHE_RETRIEVE_MODE, properties);\n         if (rMode != null) {\n-            fetch.setCacheRetrieveMode(JPAProperties.convertValue(DataCacheRetrieveMode.class, \n+            fetch.setCacheRetrieveMode(JPAProperties.convertToKenelValue(DataCacheRetrieveMode.class, \n                     JPAProperties.CACHE_RETRIEVE_MODE, rMode));\n             properties.remove(JPAProperties.CACHE_RETRIEVE_MODE);\n         }\n-        CacheStoreMode sMode = JPAProperties.get(CacheStoreMode.class, JPAProperties.CACHE_STORE_MODE, \n-                properties);\n+        CacheStoreMode sMode = JPAProperties.getEnumValue(CacheStoreMode.class, \n+                JPAProperties.CACHE_STORE_MODE, properties);\n         if (sMode != null) {\n-            fetch.setCacheStoreMode(JPAProperties.convertValue(DataCacheStoreMode.class, \n+            fetch.setCacheStoreMode(JPAProperties.convertToKenelValue(DataCacheStoreMode.class, \n                     JPAProperties.CACHE_STORE_MODE, sMode));\n             properties.remove(JPAProperties.CACHE_STORE_MODE);\n         }\n@@ -1670,6 +1697,7 @@ public void setProperty(String prop, Object value) {\n      */\n     private boolean setKernelProperty(Object target, String original, Object value) {\n         String beanProp = getBeanPropertyName(original);\n+        JPAProperties.record(beanProp, original);\n         Class<?> kType  = null;\n         Object   kValue = null;\n         Method setter = Reflection.findSetter(target.getClass(), beanProp, false);\n@@ -1694,20 +1722,25 @@ private boolean setKernelProperty(Object target, String original, Object value)\n      * Extract a bean-style property name from the given string.\n      * If the given string is <code>\"a.b.xyz\"</code> then returns <code>\"xyz\"</code> \n      */\n-    String getBeanPropertyName(String s) {\n-        if (JPAProperties.isValidKey(s)) {\n-            return JPAProperties.getBeanProperty(s);\n+    String getBeanPropertyName(String user) {\n+        String result = user;\n+        if (JPAProperties.isValidKey(user)) {\n+            result = JPAProperties.getBeanProperty(user);\n+        } else {\n+            int dot = user.lastIndexOf('.');\n+            if (dot != -1)\n+                result = user.substring(dot+1);\n         }\n-        int dot = s.lastIndexOf('.');\n-        return dot == -1 ? s : s.substring(dot+1);\n+        return result; \n     }\n     \n+    \n     /**\n      * Convert the given value to a value consumable by OpenJPA kernel constructs.\n      */\n     Object convertUserValue(String key, Object value, Class<?> targetType) {\n         if (JPAProperties.isValidKey(key)) \n-            return JPAProperties.convertValue(targetType, key, value);\n+            return JPAProperties.convertToKenelValue(targetType, key, value);\n         if (value instanceof String) {\n             if (\"null\".equals(value)) {\n                 return null;"},{"sha":"a72650e020e70fd39425dfb1869659d4eb2b42a3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":60,"deletions":11,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n import javax.persistence.CacheRetrieveMode;\n@@ -68,13 +69,29 @@\n     public static final String VALIDATE_PRE_PERSIST = PREFIX + \"validation.group.pre-persist\";\n     public static final String VALIDATE_PRE_REMOVE  = PREFIX + \"validation.group.pre-remove\";\n     public static final String VALIDATE_PRE_UPDATE  = PREFIX + \"validation.group.pre-update\";\n-    \n     public static final String VALIDATE_GROUP_DEFAULT = \"javax.validation.groups.Default\";\n     \n+    private static Map<String,String> _names = new HashMap<String, String>();\n+    \n+    /**\n+     * Record the given kernel property key (which is a bean property name without any suffix)\n+     * corresponding to the given original JPA/OpenJPA property used by the user to set the values.\n+     */\n+    static void record(String kernel, String user) {\n+        _names.put(kernel, user);\n+    }\n+    \n+    /**\n+     * Gets the original JPA Property name corresponding to the kernel property key \n+     * (which is a bean property name without any suffix).\n+     */\n+    static String getUserName(String beanProperty) {\n+        return _names.containsKey(beanProperty) ? _names.get(beanProperty) : beanProperty;\n+    }\n+    \n     /**\n      * Is the given key appears to be a valid JPA specification defined key?\n      * \n-     * @param key\n      * @return true if the given string merely prefixed with <code>javax.persistence.</code>.\n      * Does not really check all the keys defined in the specification.\n      */\n@@ -101,16 +118,12 @@ public static String getBeanProperty(String key) {\n         return buf.toString();\n     }\n     \n-    static <E extends Enum<E>> E get(Class<E> type, String key, Map<String,Object> prop) {\n-        return getEnumValue(type, null, key, prop);\n-    }\n-    \n     /**\n      * Convert the given user value to a value consumable by OpenJPA kernel constructs.\n      * \n      * @return the same value if the given key is not a valid JPA property key or the value is null.\n      */\n-    public static <T> T  convertValue(Class<T> resultType, String key, Object value) {\n+    public static <T> T  convertToKenelValue(Class<T> resultType, String key, Object value) {\n         if (value == null)\n             return null;\n         if (JPAProperties.isValidKey(key)) {\n@@ -124,7 +137,29 @@ public static String getBeanProperty(String key) {\n         return (T)value;\n     }\n     \n+    /**\n+     * Convert the given kernel value to a value visible to the user.\n+     * \n+     * @return the same value if the given key is not a valid JPA property key or the value is null.\n+     */\n+    public static Object convertToUserValue(String key, Object value) {\n+        if (value == null)\n+            return null;\n+        if (JPAProperties.isValidKey(key)) {\n+            // works because enum values are identical String\n+            if (value instanceof DataCacheRetrieveMode) {\n+                return CacheRetrieveMode.valueOf(value.toString());\n+            } else if (value instanceof DataCacheStoreMode) {\n+                return CacheStoreMode.valueOf(value.toString());\n+            }\n+        }\n+        return value;\n+    }\n     \n+    /**\n+     * Get the value of the given key from the given properties after converting it to the given\n+     * enumerated value.\n+     */\n     public static <E extends Enum<E>> E getEnumValue(Class<E> type, String key, Map<String,Object> prop) {\n         return getEnumValue(type, null, key, prop);\n     }\n@@ -140,14 +175,28 @@ public static String getBeanProperty(String key) {\n     public static <E extends Enum<E>> E getEnumValue(Class<E> type, E[] values, String key, Map<String,Object> prop) {\n         if (prop == null)\n             return null;\n-        return getEnumValue(type, values, key, prop.get(key));\n+        return getEnumValue(type, values, prop.get(key));\n     }\n     \n-    public static <E extends Enum<E>> E  getEnumValue(Class<E> type, String key, Object val) {\n-        return getEnumValue(type, null, key, val);\n+    /**\n+     * Gets a enum value of the given type from the given value.\n+     * Converts the original value from a String, if necessary.\n+     * \n+     * @return null if the key does not exist in the given properties.\n+     */\n+    public static <E extends Enum<E>> E  getEnumValue(Class<E> type, Object val) {\n+        return getEnumValue(type, null, val);\n     }\n     \n-    public static <E extends Enum<E>> E  getEnumValue(Class<E> type, E[] values, String key, Object val) {\n+    /**\n+     * Gets a enum value of the given type from the given value.\n+     * Converts the original value from a String or ordinal number, if necessary.\n+     * Conversion from an integral number to enum value is only attempted if the allowed enum values\n+     * are provided as non-null, non-empty array. \n+     * \n+     * @return null if the key does not exist in the given properties.\n+     */\n+    public static <E extends Enum<E>> E  getEnumValue(Class<E> type, E[] values, Object val) {\n         if (val == null)\n             return null;\n         if (type.isInstance(val))"},{"sha":"a99f4bd3d3a834f2a0b89529eed3dd40fba59ce2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -525,8 +525,7 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n     /**\n      * Return whether the given persistence unit uses an OpenJPA provider.\n      */\n-    private static boolean isOpenJPAPersistenceProvider\n-        (PersistenceUnitInfo pinfo, ClassLoader loader) {\n+    private static boolean isOpenJPAPersistenceProvider(PersistenceUnitInfo pinfo, ClassLoader loader) {\n         String provider = pinfo.getPersistenceProviderClassName();\n         if (StringUtils.isEmpty(provider) || PersistenceProviderImpl.class.getName().equals(provider))\n             return true;\n@@ -742,20 +741,15 @@ protected void endElement(String name)\n                 //      startPersistenceUnit()\n                 // case 'property' for 'properties' is handled in startElement()\n                 case 'c': // class\n-                    if (\"class\".equals(name))\n-                        _info.addManagedClassName(currentText());\n-                    else // FIXME - caching\n-                        throw new javax.persistence.PersistenceException(\n-                            \"Not implemented yet\");\n+                    _info.addManagedClassName(currentText());\n                     break;\n                 case 'e': // exclude-unlisted-classes\n                     setExcludeUnlistedClasses(currentText());\n                     break;\n                 case 'j':\n                     if (\"jta-data-source\".equals(name))\n                         _info.setJtaDataSourceName(currentText());\n-                    else // jar-file\n-                    {\n+                    else { // jar-file \n                         try {\n                             _info.addJarFileName(currentText());\n                         } catch (IllegalArgumentException iae) {\n@@ -774,12 +768,10 @@ protected void endElement(String name)\n                         _info.setPersistenceProviderClassName(currentText());\n                     break;\n                 case 's' : // shared-cache-mode\n-                    _info.setSharedCacheMode(JPAProperties.getEnumValue(SharedCacheMode.class, \n-                            JPAProperties.CACHE_MODE, currentText()));\n+                    _info.setSharedCacheMode(JPAProperties.getEnumValue(SharedCacheMode.class, currentText()));\n                     break;\n                 case 'v': // validation-mode\n-                    _info.setValidationMode(JPAProperties.getEnumValue(ValidationMode.class,\n-                        JPAProperties.VALIDATE_MODE, currentText()));\n+                    _info.setValidationMode(JPAProperties.getEnumValue(ValidationMode.class, currentText()));\n                     break;\n             }\n         }"},{"sha":"0995e7780c39153be549720334b1703bc18e86ca","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -307,8 +307,7 @@ public void fromUserProperties(Map map) {\n             if (JPAProperties.PROVIDER.equals(key))\n                 setPersistenceProviderClassName((String) val);\n             else if (JPAProperties.TRANSACTION_TYPE.equals(key)) {\n-                setTransactionType(JPAProperties.getEnumValue(PersistenceUnitTransactionType.class, \n-                        JPAProperties.TRANSACTION_TYPE, key));\n+                setTransactionType(JPAProperties.getEnumValue(PersistenceUnitTransactionType.class, key));\n             } else if (JPAProperties.DATASOURCE_JTA.equals(key)) {\n                 if (val instanceof String) {\n                     setJtaDataSourceName((String) val);\n@@ -322,9 +321,9 @@ else if (JPAProperties.TRANSACTION_TYPE.equals(key)) {\n                     setNonJtaDataSource((DataSource) val);\n                 }\n             } else if (JPAProperties.VALIDATE_MODE.equals(key)) {\n-                setValidationMode(JPAProperties.getEnumValue(ValidationMode.class, JPAProperties.VALIDATE_MODE, val));\n+                setValidationMode(JPAProperties.getEnumValue(ValidationMode.class, val));\n             } else if (JPAProperties.CACHE_MODE.equals(key)) { \n-                setSharedCacheMode(JPAProperties.getEnumValue(SharedCacheMode.class, JPAProperties.CACHE_MODE, val));\n+                setSharedCacheMode(JPAProperties.getEnumValue(SharedCacheMode.class, val));\n             } else {\n                 _props.put(key, val);\n             }"},{"sha":"2aac1b0602b516216972cf070a99b369ce442fa8","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/faf2966816c2f6252546b519eb39f4077c1713f2/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=faf2966816c2f6252546b519eb39f4077c1713f2","patch":"@@ -173,8 +173,8 @@ no-result: Query \"{0}\" selected no result, but expected unique result.\n non-unique-result: Query \"{0}\" selected {1} results, but expected unique result.\n unwrap-em-invalid: EntityManager can not be unwrapped to an instance of \"{0}\".\n unwrap-query-invalid: Query can not be unwrapped to an instance of \"{0}\".\n-invalid_entity_argument: Object being locked must be an valid and not detached \\\n-    entity.\n+invalid_entity_argument: {0} can not be invoked on \"{1}\". This entity is either \\\n+\tdetached or not persistent or null.\n dup-pu: The persistence unit \"{0}\" was found multiple times in the following \\\n     resources \"{1}\", but persistence unit names should be unique. The first \\\n     persistence unit matching the provided name in \"{2}\" is being used.\n@@ -223,3 +223,4 @@ tuple-exceeded-size : Attempt to access TupleElement at illegal index {0}. There\n create-emf-error: Failed to create a provider for \"{0}\".\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query.\n+cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  \n\\ No newline at end of file"}]}

