{"sha":"fafc33b3cd1cdd5a2060990c30e5f9b26435368f","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhZmMzM2IzY2QxY2RkNWEyMDYwOTkwYzMwZTVmOWIyNjQzNTM2OGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-06-07T19:08:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-06-07T19:08:49Z"},"message":"OPENJPA-1682: Unique constraint to a column will imply the column to be non-nullable per database basis. The commit  adds a new model in\ninternal schema design by making Column-Constraint relation bi-directional.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@952371 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b02976d35c4c78e02e8099093503e2266d95136","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b02976d35c4c78e02e8099093503e2266d95136"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fafc33b3cd1cdd5a2060990c30e5f9b26435368f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fafc33b3cd1cdd5a2060990c30e5f9b26435368f","html_url":"https://github.com/apache/openjpa/commit/fafc33b3cd1cdd5a2060990c30e5f9b26435368f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/comments","author":null,"committer":null,"parents":[{"sha":"97232e67b45a9f8b7b6d48792d255ea0596495ad","url":"https://api.github.com/repos/apache/openjpa/commits/97232e67b45a9f8b7b6d48792d255ea0596495ad","html_url":"https://github.com/apache/openjpa/commit/97232e67b45a9f8b7b6d48792d255ea0596495ad"}],"stats":{"total":131,"additions":115,"deletions":16},"files":[{"sha":"59a3be6ac806b340803df5676e8075e48f4ec558","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -25,6 +25,8 @@\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.sql.Types;\n+import java.util.HashSet;\n+import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n@@ -78,6 +80,7 @@\n     private String _comment = null;\n     private boolean _XML = false;\n     private boolean _isUni1MFK = false;\n+    private Set<Constraint> _constraints = new HashSet<Constraint>();\n     \n     /**\n      * Default constructor.\n@@ -802,6 +805,9 @@ public void copy(Column from) {\n             setXML(from.isXML());\n         if (!isUni1MFK())\n             setUni1MFK(from.isUni1MFK());\n+        for (Constraint c : _constraints) {\n+            addConstraint(c);\n+        }\n     }\n     \n     /**\n@@ -883,4 +889,66 @@ public boolean isUni1MFK() {\n     public void setUni1MFK(boolean isUni1MFK) {\n         _isUni1MFK = isUni1MFK;\n     }\n+    \n+    /**\n+     * Adds the given constraint to this column.\n+     */\n+    public void addConstraint(Constraint c) {\n+        _constraints.add(c);\n+    }\n+    \n+    /**\n+     * Removes the given constraint from this column.\n+     */\n+    public void removeConstraint(Constraint c) {\n+        _constraints.remove(c);\n+    }\n+    \n+    /**\n+     * Affirms if this column has any constraint of given type.\n+     */\n+    public boolean hasConstraint(Class<? extends Constraint> type) {\n+        return !getConstraints(type).isEmpty();\n+    }\n+    \n+    /**\n+     * Gets all constrains attached this column.\n+     */\n+    public Set<Constraint> getConstraints() {\n+        return _constraints;\n+    }\n+    \n+    /**\n+     * Gets all constrains of the given type attached to this column.\n+     */\n+    public <T extends Constraint> Set<T> getConstraints(Class<T> type) {\n+        Set<T> result = new HashSet<T>();\n+        for (Constraint c : _constraints) {\n+            if (c.getClass() == type) {\n+                result.add((T)c);\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Affirms if any unique constraint is attached to this column.\n+     */\n+    public boolean isUniqueConstraint() {\n+        return hasConstraint(Unique.class);\n+    }\n+    \n+    /**\n+     * Affirms if any index constraint is attached to this column.\n+     */\n+    public boolean isIndex() {\n+        return hasConstraint(Index.class);\n+    }\n+    \n+    /**\n+     * Affirms if any foreign key constraint is attached to this column.\n+     */\n+    public boolean isForeignKey() {\n+        return hasConstraint(ForeignKey.class);\n+    }  \n }"},{"sha":"def923e0c4b85c4ffcf4d9408be0c82e4120536d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -573,6 +573,7 @@ public void join(Column local, Column toPK) {\n         if (_joins == null)\n             _joins = new LinkedHashMap();\n         _joins.put(local, toPK);\n+        local.addConstraint(this);\n         if (_joinsPK == null)\n             _joinsPK = new LinkedHashMap();\n         _joinsPK.put(toPK, local);\n@@ -629,6 +630,7 @@ public boolean removeJoin(Column col) {\n \n         if (_joins != null) {\n             rem = _joins.remove(col);\n+            col.removeConstraint(this);\n             if (rem != null) {\n                 _locals = null;\n                 _pks = null;"},{"sha":"c751555767c74d044c42c62d574b97bd6fdddbb5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -67,6 +67,9 @@ public LocalConstraint(DBIdentifier name, Table table) {\n      */\n     void remove() {\n         // remove all columns\n+        for (Column c : _cols) {\n+            c.removeConstraint(this);\n+        }\n         setColumns(null);\n         super.remove();\n     }\n@@ -110,6 +113,7 @@ else if (_colList.contains(col))\n \n         _colList.add(col);\n         _cols = null;\n+        col.addConstraint(this);\n     }\n \n     /**\n@@ -123,6 +127,7 @@ public boolean removeColumn(Column col) {\n             return false;\n         if (_colList.remove(col)) {\n             _cols = null;\n+            col.removeConstraint(this);\n             return true;\n         }\n         return false;"},{"sha":"f1c8a233979de5dee12567e5200e44ba0b72f3d1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -52,6 +52,17 @@ public Unique(DBIdentifier name, Table table) {\n     public boolean isLogical() {\n         return false;\n     }\n+    \n+    /**\n+     * Adds the given column. \n+     * The added column is set to non-nullable because a unique constraint\n+     * on the database requires that its constituent columns are NOT NULL. \n+     * @see Column#setNotNull(boolean)\n+     */\n+    public void addColumn(Column col) {\n+        super.addColumn(col);\n+        col.setNotNull(true);\n+    }\n         \n     /**\n      * Set the name of the constraint. This method cannot be called if the"},{"sha":"fe5b010c33faa9dbeb6c7089cbd0420cadc79d0a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -77,12 +77,9 @@\n     protected static final String withCSClause = \"WITH CS\";\n     protected static final String withRSClause = \"WITH RS\";\n     protected static final String withRRClause = \"WITH RR\";\n-    protected static final String useKeepShareLockClause\n-        = \"USE AND KEEP SHARE LOCKS\";\n-    protected static final String useKeepUpdateLockClause\n-        = \"USE AND KEEP UPDATE LOCKS\";\n-    protected static final String useKeepExclusiveLockClause\n-        = \"USE AND KEEP EXCLUSIVE LOCKS\";\n+    protected static final String useKeepShareLockClause     = \"USE AND KEEP SHARE LOCKS\";\n+    protected static final String useKeepUpdateLockClause    = \"USE AND KEEP UPDATE LOCKS\";\n+    protected static final String useKeepExclusiveLockClause = \"USE AND KEEP EXCLUSIVE LOCKS\";\n     protected static final String forReadOnlyClause = \"FOR READ ONLY\";\n     protected String databaseProductName = \"\";\n     protected String databaseProductVersion = \"\";\n@@ -93,14 +90,12 @@\n     \n     public DB2Dictionary() {\n         platform = \"DB2\";\n-        validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\n-            + \"SYSIBM.SYSTABLES\";\n+        validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM SYSIBM.SYSTABLES\";\n         supportsSelectEndIndex = true;\n \n         nextSequenceQuery = \"VALUES NEXTVAL FOR {0}\";\n \n-        sequenceSQL = \"SELECT SEQSCHEMA AS SEQUENCE_SCHEMA, \"\n-            + \"SEQNAME AS SEQUENCE_NAME FROM SYSCAT.SEQUENCES\";\n+        sequenceSQL = \"SELECT SEQSCHEMA AS SEQUENCE_SCHEMA, SEQNAME AS SEQUENCE_NAME FROM SYSCAT.SEQUENCES\";\n         sequenceSchemaSQL = \"SEQSCHEMA = ?\";\n         sequenceNameSQL = \"SEQNAME = ?\";\n         characterColumnSize = 254;\n@@ -125,6 +120,7 @@ public DB2Dictionary() {\n         supportsDefaultDeleteAction = false;\n         supportsAlterTableWithDropColumn = false;\n         supportsLockingWithOrderClause = true;\n+        supportsNullUniqueColumn = false;\n \n         supportsNullTableForGetColumns = false;\n         requiresCastForMathFunctions = true;"},{"sha":"de3c6edb7f751a4d058d09a0355407311cbff935","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -196,6 +196,7 @@\n     public boolean supportsRestrictDeleteAction = true;\n     public boolean supportsCascadeDeleteAction = true;\n     public boolean supportsNullDeleteAction = true;\n+    public boolean supportsNullUniqueColumn = true;\n     public boolean supportsDefaultDeleteAction = true;\n     public boolean supportsRestrictUpdateAction = true;\n     public boolean supportsCascadeUpdateAction = true;\n@@ -1262,8 +1263,12 @@ public void setTyped(PreparedStatement stmnt, int idx, Object val,\n                 if (col != null && (col.getType() == Types.CLOB\n                     || col.getType() == Types.LONGVARCHAR))\n                     setClobString(stmnt, idx, (String) val, col);\n-                else\n-                    setString(stmnt, idx, (String) val, col);\n+                else {\n+                    if (val instanceof String)\n+                        setString(stmnt, idx, (String) val, col);\n+                    else\n+                        setString(stmnt, idx, val.toString(), col);\n+                }\n                 break;\n             case JavaTypes.OBJECT:\n                 setBlobObject(stmnt, idx, val, col, store);\n@@ -3542,7 +3547,7 @@ protected String getDeclareColumnSQL(Column col, boolean alter) {\n         if (!alter) {\n             if (col.getDefaultString() != null && !col.isAutoAssigned())\n                 buf.append(\" DEFAULT \").append(col.getDefaultString());\n-            if (col.isNotNull())\n+            if (col.isNotNull() || (!supportsNullUniqueColumn && col.hasConstraint(Unique.class)))\n                 buf.append(\" NOT NULL\");\n         }\n         if (col.isAutoAssigned()) {"},{"sha":"01bbc0c65e46d2f468b25933625bc511ed7a4ff5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -66,7 +66,8 @@ public DerbyDictionary() {\n         requiresCastForMathFunctions = true;\n         requiresCastForComparisons = true;\n         supportsSimpleCaseExpression = false;\n-\n+        supportsNullUniqueColumn = false;\n+        \n         supportsComments = true;\n \n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{"},{"sha":"d712a203f7f0b581d6394d6346ea0dfd00561079","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -690,8 +690,6 @@ protected void setObject(Column col, Object val, int metaType,\n                 && col.getDefaultString() != null)\n                 return;\n         }\n-        if (val == null && col.isNotNull())\n-            val = JavaSQLTypes.getEmptyValue(col.getJavaType());\n         flush(col, val, metaType, true);\n     }\n "},{"sha":"400664c13d6c34c7eb378b739721f784f387f72c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -84,6 +84,7 @@ public NullValues() {\n \t\tsetNotNullableBlob(new BlobValue());\n \t\tsetOptionalBlob(new BlobValue());\n \t\tsetNotOptionalBlob(new BlobValue());\n+\t\tsetUniqueNullable(\"\");\n \t}\n \t\n \tpublic long getId() {"},{"sha":"edc6bcb5f5bc491b772acc3a4cf0eca6cbecc6f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/fafc33b3cd1cdd5a2060990c30e5f9b26435368f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=fafc33b3cd1cdd5a2060990c30e5f9b26435368f","patch":"@@ -21,8 +21,10 @@\n import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceException;\n import javax.persistence.RollbackException;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.persistence.InvalidStateException;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n@@ -119,12 +121,18 @@ public void testX() {\n     \n     \n     public void testUniqueStringColumnCanBeNull() {\n+        if (!isUniqueColumnNullable()) {\n+            return;\n+        }\n         NullValues pc = new NullValues();\n         pc.setUniqueNullable(null);\n         assertCommitSucceeds(pc, NEW);\n     }\n     \n     public void testUniqueStringColumnAsNull() {\n+        if (!isUniqueColumnNullable()) {\n+            return;\n+        }\n         NullValues pc = new NullValues();\n         pc.setUniqueNullable(null);\n         assertCommitSucceeds(pc, NEW);\n@@ -155,5 +163,9 @@ public void testUniqueStringColumnAsEmpty() {\n             assertEquals(EMPTY_STRING, n.getUniqueNullable());\n         \n     }\n+    \n+    boolean isUniqueColumnNullable() {\n+        return ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance().supportsNullUniqueColumn;\n+    }\n }\n "}]}

