{"sha":"fb004027ad861c1c0b00c0470bf3248d16f54c15","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiMDA0MDI3YWQ4NjFjMWMwYjAwYzA0NzBiZjMyNDhkMTZmNTRjMTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T16:18:46Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T16:18:46Z"},"message":"OPENJPA-1334: Emulate 1.2 versions IncludedTypes/ExcludedTypes functionality via new distribution policy mechanics\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909054 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2088ad09a0e42fea9e8e51570b379f3726cbe887","url":"https://api.github.com/repos/apache/openjpa/git/trees/2088ad09a0e42fea9e8e51570b379f3726cbe887"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15","html_url":"https://github.com/apache/openjpa/commit/fb004027ad861c1c0b00c0470bf3248d16f54c15","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb004027ad861c1c0b00c0470bf3248d16f54c15/comments","author":null,"committer":null,"parents":[{"sha":"f028f744c2a24fcc93fd13aa07e255655ea552a0","url":"https://api.github.com/repos/apache/openjpa/commits/f028f744c2a24fcc93fd13aa07e255655ea552a0","html_url":"https://github.com/apache/openjpa/commit/f028f744c2a24fcc93fd13aa07e255655ea552a0"}],"stats":{"total":42,"additions":13,"deletions":29},"files":[{"sha":"e797a815339ee09a0071ea26db92823694fb86dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","status":"modified","additions":13,"deletions":29,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/fb004027ad861c1c0b00c0470bf3248d16f54c15/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/fb004027ad861c1c0b00c0470bf3248d16f54c15/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java?ref=fb004027ad861c1c0b00c0470bf3248d16f54c15","patch":"@@ -35,8 +35,8 @@\n  * <br>\n  * The policy checks for the given instance by its type whether the class name appears in\n  * exclusion or inclusion lists. If the class name appears in exclusion list then the\n- * instance is not cached. Otherwise If the class name appears in inclusion list but not in\n- * exclusion list, then the instance is cached.\n+ * instance is not cached. Otherwise, if an inclusion list exists and the class name appears in inclusion list \n+ * or @DataCache annotation is specified on the class meta data, then the instance is cached.\n  *  \n  * @author Pinaki Poddar\n  *\n@@ -85,36 +85,20 @@ public void setIncludedTypes(String types) {\n         return  Collections.unmodifiableSet(set);\n     }\n \n-    /**\n-     * Is the given type cacheable by excludeTypes/includeTypes plug-in properties.\n-     *  \n-     * @param meta the given type\n-     * @return TRUE or FALSE if the type has appeared in the plug-in property.\n-     * null otherwise.\n-     */\n-    private Boolean isCacheableByPlugin(ClassMetaData meta) {\n-        String className = meta.getDescribedType().getName();\n-        if (_excludedTypes != null && _excludedTypes.contains(className)) {  \n-            return Boolean.FALSE;\n-        } \n-        if (_includedTypes != null && _includedTypes.contains(className)) {\n-            return Boolean.TRUE;\n-        }\n-        return null;\n-    }\n-    \n-\n-    \n-    \n     @Override\n     public String selectCache(OpenJPAStateManager sm, Object context) {\n-        Boolean result = isCacheableByPlugin(sm.getMetaData());\n-        if (result == null) { // this policy does not know, ask the super class\n-            return super.selectCache(sm, context);\n-        } else if (Boolean.FALSE.equals(result)) { // must be excluded\n+        ClassMetaData meta = sm.getMetaData();\n+        String className = meta.getDescribedType().getName();\n+        if (_excludedTypes != null && _excludedTypes.contains(className)) {  \n             return null;\n         } \n-        String name = sm.getMetaData().getDataCacheName();\n-        return name == null ? DataCache.NAME_DEFAULT : name;\n+        if (_includedTypes != null && !_includedTypes.isEmpty()) {\n+            if (_includedTypes.contains(className))\n+                return meta.getDataCacheName();\n+            return (meta.getDataCacheEnabled()) ? meta.getDataCacheName() : null;\n+                \n+        } else {\n+            return super.selectCache(sm, context);\n+        }\n     }\n }"}]}

