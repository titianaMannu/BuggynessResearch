{"sha":"fb60f8136f5427e47cc449bf21a9b860c3e11db9","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiNjBmODEzNmY1NDI3ZTQ3Y2M0NDliZjIxYTliODYwYzNlMTFkYjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-25T14:58:56Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-25T14:58:56Z"},"message":"OPENJPA-1597 New tests to verify expected behavior for proposed Compatibility fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927434 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3066b53f9525de6b1febb1abb1499b47295bbd69","url":"https://api.github.com/repos/apache/openjpa/git/trees/3066b53f9525de6b1febb1abb1499b47295bbd69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9","html_url":"https://github.com/apache/openjpa/commit/fb60f8136f5427e47cc449bf21a9b860c3e11db9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9/comments","author":null,"committer":null,"parents":[{"sha":"8987041469573f6fe9ae4a3e760081c6ec80b712","url":"https://api.github.com/repos/apache/openjpa/commits/8987041469573f6fe9ae4a3e760081c6ec80b712","html_url":"https://github.com/apache/openjpa/commit/8987041469573f6fe9ae4a3e760081c6ec80b712"}],"stats":{"total":2450,"additions":2450,"deletions":0},"files":[{"sha":"8956e8b8d36cd5ef867f75dfcc8a40cd5cf56690","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","status":"added","additions":780,"deletions":0,"changes":780,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,780 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy;\n+\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import javax.persistence.EntityManager;\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+import org.apache.openjpa.persistence.proxy.entities.Address;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityHolderCategory;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject;\n+import org.apache.openjpa.persistence.proxy.entities.ContactType;\n+import org.apache.openjpa.persistence.proxy.entities.IAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.IAnnuityHolder;\n+import org.apache.openjpa.persistence.proxy.entities.IContact;\n+import org.apache.openjpa.persistence.proxy.entities.IEquityAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.IFixedAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.IPayor;\n+import org.apache.openjpa.persistence.proxy.entities.IPayout;\n+import org.apache.openjpa.persistence.proxy.entities.IRider;\n+import org.apache.openjpa.persistence.proxy.entities.Person;\n+import org.apache.openjpa.persistence.proxy.entities.RiderType;\n+import org.apache.openjpa.persistence.proxy.entities.Annuity;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityHolder;\n+import org.apache.openjpa.persistence.proxy.entities.Contact;\n+import org.apache.openjpa.persistence.proxy.entities.EquityAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.FixedAnnuity;\n+import org.apache.openjpa.persistence.proxy.entities.Payor;\n+import org.apache.openjpa.persistence.proxy.entities.Payout;\n+import org.apache.openjpa.persistence.proxy.entities.Rider;\n+import org.apache.openjpa.persistence.proxy.entities.AnnuityType;\n+\n+\n+/*\n+ * Test the complicated interaction between Detached entities, Proxy classes\n+ * and Merging changes made in ProxyCollections back into entities.\n+ * \n+ * This code is based on AcmeTest2, which was originally written by\n+ * Mohammad at IBM and contributed under ASL 2.0.\n+ */\n+public class TestDetachMerge extends SingleEMFTestCase {\n+            \n+    public void setUp() {\n+        setUp(DROP_TABLES, Address.class, Annuity.class, AnnuityHolder.class, AnnuityPersistebleObject.class,\n+            Contact.class, EquityAnnuity.class, FixedAnnuity.class, Payor.class, Payout.class,\n+            Person.class, Rider.class);\n+    }\n+    \n+    /* \n+     * Test default 1.0 compatibility behavior, which should pass AS-IS\n+     */\n+    @AllowFailure(message=\"Will fail until OPENJPA-1597 is fixed\")\n+    public void testAnnuity1Compat() throws Exception {\n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"Annuity1Compat\", \"org/apache/openjpa/persistence/proxy/persistence1.xml\");\n+        assertNotNull(emf1);\n+\n+        Log log = emf1.getConfiguration().getLog(\"test\");\n+\n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"started testAnnuity1Compat()\");\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+\n+        try {\n+            execute(emf1);\n+        } catch (RuntimeException e) {\n+            fail(\"testAnuity1Compat() should not have caused an execption!\" + e);\n+        } finally {\n+            emf1.close();\n+        }\n+    }\n+    \n+    /* \n+     * Test 2.0 behavior with Compatibility flag and DetachedStateField=true, which should PASS\n+     */\n+    @AllowFailure(message=\"Will fail until OPENJPA-1597 is fixed\")\n+    public void testAnnuity2Compat() throws Exception {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"Annuity2Compat\", \"org/apache/openjpa/persistence/proxy/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+\n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"started testAnnuity2Compat()\");\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+\n+        try {\n+            execute(emf2);\n+        } catch (RuntimeException e) {\n+            fail(\"testAnuity2Compat() should not have caused an execption!\" + e);\n+        } finally {\n+            emf2.close();\n+        }\n+    }\n+    \n+    /* \n+     * Test 2.0 behavior with DetachedStateField=true, which should FAIL\n+     */\n+    public void testAnnuity2Fail() throws Exception {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"Annuity2Fail\", \"org/apache/openjpa/persistence/proxy/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+\n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"started testAnnuity2Fail()\");\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+\n+        try {\n+            execute(emf2);\n+            fail(\"testAnuity2Fail() should have caused an execption!\");\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().startsWith(\"Annuity:\")) {\n+                // no-op caught our expected exception\n+            } else {\n+                fail(\"testAnuity2Fail() caught an unexpected execption!\" + e);\n+            }\n+        } finally {\n+            emf2.close();\n+        }\n+    }\n+    \n+    /* \n+     * Test default 2.0 behavior with DetachedStateField=transient, which should PASS\n+     */\n+    public void testAnnuity2New() throws Exception {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"Annuity2New\", \"org/apache/openjpa/persistence/proxy/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+\n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"started testAnnuity2New()\");\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+        }\n+\n+        try {\n+            execute(emf2);\n+        } catch (RuntimeException e) {\n+            fail(\"testAnuity2New() should not have caused an execption!\" + e);\n+        } finally {\n+            emf2.close();\n+        }\n+    }\n+    \n+    private void execute(OpenJPAEntityManagerFactorySPI myEMF) throws Exception {\n+        Log log = myEMF.getConfiguration().getLog(\"test\");\n+        //EntityManager em = myEMF.createEntityManager();\n+        IContact contact = null;\n+        \n+        try {\n+            if (log.isTraceEnabled())\n+                log.trace(\"creating contact\");\n+            try {       \n+                contact = createContact(myEMF);      \n+            } catch (Exception e) {\n+                log.error(\"Create Contact failed.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyContactValues(myEMF, contact);\n+            } catch (Exception e) {\n+                log.error(\"Create Contact verification failed.\", e);\n+                throw e;\n+                // do not return, as this might be a small bug that we can bypass\n+            }\n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"creating annuity holder\");\n+            IAnnuityHolder annuityHolder = null;\n+            try {\n+                annuityHolder = createAnnuityHolder(myEMF, contact);           \n+            } catch (Exception e) {\n+                log.error(\"failed to create Annuity Holder Successfully.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyAnnuityHolderValues(myEMF, annuityHolder);\n+            } catch (Exception e) {\n+                log.info(\"failed to verify create annuity holder successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"creating payor\");\n+            IPayor payor = null;\n+            try {\n+                payor = createPayor(myEMF);\n+            } catch(Exception e) {\n+                log.error(\"failed to create payor successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyPayorValues(myEMF, payor);\n+            } catch (Exception e) {\n+                log.error(\"failed to verify create payor successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"creating annuity\");\n+            IAnnuity annuity =null;     \n+            AnnuityType annuityType = AnnuityType.FIXED;\n+            try {           \n+                annuity = createAnnuityWithRider(myEMF, annuityType);\n+            } catch (Exception e) {\n+                log.error(\"failed to create annuity successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                log.trace(\"verify annuity with rider\");\n+                verifyAnnuityValues(myEMF, annuity, annuityType);\n+            } catch (Exception e) {\n+                log.error(\"failed to verify create annuity successfuly.\", e);\n+                throw e;\n+            }       \n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"upating annuity\");\n+            try {\n+                log.trace(\"create annuity with payout\");\n+                annuity = createAnnuityPayout(myEMF, annuity);\n+            } catch (Exception e) {\n+                log.error(\"failed to create annuity successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyAnnuityValues(myEMF, annuity, annuityType);\n+            } catch (Exception e) {\n+                log.error(\"failed to verify create annuity successfuly.\", e);\n+                throw e;\n+            }       \n+            \n+            if (log.isTraceEnabled())\n+                log.trace(\"upating annuity\");\n+            try {\n+                EntityManager em = createEM(myEMF);\n+                em.getTransaction().begin();\n+                    annuity.getPayors().add(payor);\n+                    annuity.setAnnuityHolderId(annuityHolder.getId());\n+                    annuity = em.merge(annuity);\n+                em.getTransaction().commit();\n+                closeEM(em);\n+            } catch (Exception e) {\n+                log.error(\"failed to update annuity successfuly.\", e);\n+                throw e;\n+            }\n+            \n+            try {\n+                verifyAnnuityValues(myEMF, annuity, annuityType); \n+            } catch (Exception e) {\n+                log.error(\"failed to verify annuity update successfuly.\", e);\n+                throw e;\n+            }\n+        } finally {\n+            log.error(\"scenario: failed.\");\n+        }\n+        \n+        if (log.isTraceEnabled())\n+            log.trace(\"scenario: completed.\");\n+    }\n+\n+    private IAnnuity createAnnuityPayout(OpenJPAEntityManagerFactorySPI myEMF, IAnnuity annuity) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IPayout payout = new Payout();\n+        payout.setAnnuity(annuity);\n+        payout.setTaxableAmount(new BigDecimal(100.00));\n+        payout.setStartDate(Calendar.getInstance());\n+        payout.setEndDate(Calendar.getInstance());\n+        payout.setId(getId());\n+        em.persist(payout);\n+        em.getTransaction().commit();\n+        em.getTransaction().begin();\n+        annuity.getPayouts().add(payout);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return annuity;\n+    }\n+\n+    private IAnnuity createAnnuityWithRider(OpenJPAEntityManagerFactorySPI myEMF, AnnuityType annuityType) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IAnnuity annuity = createAnnuity(annuityType);\n+        IRider rider1 = getRider();\n+        IRider rider2 = getRider();\n+        IRider rider3 = getRider();\n+        annuity.getRiders().add(rider1);\n+        annuity.getRiders().add(rider2);    \n+        annuity.getRiders().add(rider3);\n+        em.persist(annuity);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return annuity;\n+    }\n+\n+    private IAnnuity createAnnuity(AnnuityType annuityType) {\n+        if (AnnuityType.BASIC.equals(annuityType)) {\n+            Annuity annuity = new Annuity();\n+            annuity.setId(getId());\n+            annuity.setAmount(500.00);\n+            annuity.setAccountNumber(\"123456\");\n+            return annuity;\n+        }\n+        if (AnnuityType.EQUITY.equals(annuityType)) {\n+            EquityAnnuity annuity = new EquityAnnuity();\n+            annuity.setId(getId());\n+            annuity.setAmount(500.00);\n+            annuity.setAccountNumber(\"123456\");\n+            annuity.setFundNames(\"Something nothing wrong\");\n+            annuity.setIndexRate(10.99);\n+            annuity.setLastPaidAmt(100.00);\n+            return annuity;\n+        }\n+        if (AnnuityType.FIXED.equals(annuityType)) {\n+            FixedAnnuity annuity = new FixedAnnuity();\n+            ((FixedAnnuity)annuity).setRate(10.0);        \n+            annuity.setId(getId());\n+            annuity.setAmount(500.00);\n+            annuity.setAccountNumber(\"123456\");\n+            return annuity;\n+        }\n+        return null;\n+    }\n+\n+    private IRider getRider() {\n+        IRider rider = new Rider();\n+        rider.setId(getId());\n+        rider.setRule(\"Pay\");\n+        rider.setType(RiderType.REPLACE);\n+        rider.setEffectiveDate(new Date());\n+        return rider;\n+    }\n+\n+    private void verifyAnnuityValues(OpenJPAEntityManagerFactorySPI myEMF, IAnnuity annuity, AnnuityType annuityType)\n+    throws Exception {\n+        IAnnuity results = findAnnuityById(myEMF, Annuity.class, annuity.getId());\n+        if (annuity instanceof IFixedAnnuity) {\n+            assertEqual((IFixedAnnuity)annuity, (IFixedAnnuity)results,\n+                \"Fixed Annuity from Client is not equal to DB value\", \"Mismacth was found.\");\n+        } else if (annuity instanceof IEquityAnnuity) {\n+            assertEqual((IEquityAnnuity)annuity, (IEquityAnnuity)results,\n+                    \"Equity Annuity from Client is not equal to DB value\", \"Mismacth was found.\");          \n+        } else {\n+            assertEqual(annuity, results,\n+                    \"Basic Annuity from Client is not equal to DB value\", \"Mismacth was found.\");           \n+        }\n+    \n+        assertEqual(annuity.getPayouts(), results.getPayouts(), \n+                \"Annuity payouts from Client is not equal to DB value\", \"Mismacth was found in number of payouts\");     \n+        boolean found = false;\n+        if (annuity.getPayouts() != null) {\n+            IPayout clientPayout = null;\n+            for (int i=0; i<annuity.getPayouts().size(); i++) {     \n+                found = false;  // reset\n+                clientPayout = annuity.getPayouts().get(i);\n+                for (IPayout resultPayout: results.getPayouts()) {\n+                    if (clientPayout.getId().equals(resultPayout.getId())){\n+                        found = true;\n+                        assertEqual(clientPayout, resultPayout, \n+                        \"Annuity Payout from Client is not equal to DB value at location: \" +i , \"Mismacth was found\");\n+                    }else{\n+                        continue;\n+                    }\n+                }\n+                if (!(found) && clientPayout != null) {\n+                    throw new RuntimeException(\"Annuity: Payout from client is not equal to DB.  \" +\n+                            \"Found Payout with id: \" + clientPayout.getId() + \n+                            \" on the client side, but not in the database for annuity id:\" + annuity.getId());\n+                    \n+                }\n+            }\n+        }\n+        \n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), \n+                \"Annuity rider from Client is not equal to DB value\", \"Mismacth was found in number of rider\");     \n+        if (annuity.getRiders() != null) {\n+            IRider clientRider = null;\n+            for (int i=0; i<annuity.getRiders().size(); i++) {      \n+                found = false;  // reset\n+                clientRider = annuity.getRiders().get(i);\n+                for (IRider resultRider : results.getRiders()) {\n+                    if (clientRider.getId().equals(resultRider.getId())){\n+                        found = true;\n+                        assertEqual(clientRider, resultRider, \n+                        \"Annuity rider from Client is not equal to DB value at location: \" +i , \"Mismacth was found\");\n+                    }else{\n+                        continue;\n+                    }\n+                }\n+                if (!(found) && clientRider != null) {\n+                    throw new RuntimeException(\"Annuity: Rider from client is not equal to DB.  \" +\n+                            \"Found rider with id: \" + clientRider.getId() + \n+                            \" on the client side, but not in the database for annuity id:\" + annuity.getId());\n+                    \n+                }\n+            }\n+        }\n+        \n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), \n+                \"Annuity Payor from Client is not equal to DB value\", \"Mismacth was found.\");\n+        if (annuity.getPayors() != null) {\n+            IPayor clientPayor = null;\n+            for (int i=0; i<annuity.getPayors().size(); i++) {      \n+                found = false;  // reset\n+                clientPayor = annuity.getPayors().get(i);\n+                for (IPayor resultPayor : results.getPayors()) {\n+                    if (clientPayor.getId().equals(resultPayor.getId())){\n+                        found = true;\n+                        assertEqual(annuity.getPayors().get(i), resultPayor, \n+                        \"Annuity payor from Client is not equal to DB value at location: \" +i , \"Mismacth was found\");\n+                    }else{\n+                        continue;\n+                    }\n+                }\n+                if (!(found) && clientPayor != null) {\n+                    throw new RuntimeException(\"Annuity: Payor from client is not equal to DB.  \" +\n+                            \"Found payor with id: \" + clientPayor.getId() + \n+                            \" on the client side, but not in the database for annuity id:\" + annuity.getId());\n+                    \n+                }\n+            }\n+        }\n+    }\n+    \n+    private void assertEqual(IAnnuity annuity, IAnnuity results, String string, String string2) throws Exception {\n+        if(annuity == null && results == null)\n+            return;\n+        if (annuity == null)\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (Annuity was null).\");\n+        if (!annuity.getId().equals(results.getId())) {\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (Annuity ids not the same).\");\n+        }\n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), string, string2);\n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), string, string2);\n+        assertEqual(annuity.getPayouts(),results.getPayouts(), string, string2);\n+    }\n+\n+    private void assertEqual(IEquityAnnuity annuity, IEquityAnnuity results, String string, String string2)\n+    throws Exception {\n+        if(annuity == null && results == null)\n+            return;\n+        if (annuity == null)\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (EquityAnnuity was null).\");\n+        if (!annuity.getId().equals(results.getId())) {\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (EquityAnnuity ids not the same).\");\n+        }\n+        \n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), string, string2);\n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), string, string2);\n+        assertEqual(annuity.getPayouts(),results.getPayouts(), string, string2);\n+    }\n+\n+    private void assertEqual(IFixedAnnuity annuity, IFixedAnnuity results, String string, String string2)\n+    throws Exception {\n+        if(annuity == null && results == null)\n+            return;\n+        if (annuity == null)\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (FixedAnnuity was null).\");\n+        if (!annuity.getId().equals(results.getId())) {\n+            throw new RuntimeException(\"Annuity: Annuities ! equal (FixedAnnuity ids not the same).\");\n+        }\n+        assertPayorsEqual(annuity.getPayors(), results.getPayors(), string, string2);\n+        assertRidersEqual(annuity.getRiders(), results.getRiders(), string, string2);\n+        assertEqual(annuity.getPayouts(),results.getPayouts(), string, string2);\n+    }\n+\n+    private IAnnuity findAnnuityById(OpenJPAEntityManagerFactorySPI myEMF, Class<Annuity> class1, String id) {\n+        EntityManager em = createEM(myEMF);\n+        IAnnuity ann = em.find(class1, id);\n+        closeEM(em);\n+        return ann;\n+    }\n+\n+    private void assertEqual(List<IPayout> payouts, List<IPayout> payouts2, String string, String string2)\n+    throws Exception {\n+        if (payouts == null && payouts2 == null) \n+            return;\n+        if (payouts == null)\n+            throw new RuntimeException(\"Annuity: IPayout list not the same (payouts was null)!\");\n+        if (payouts.size() != payouts2.size())\n+            throw new RuntimeException(\"Annuity: IPayout list not the same (payouts size not the same)!\");\n+        for (int i = 0; i < payouts.size(); i++) {\n+            IPayout payout = payouts.get(i);\n+            boolean found = false;\n+            for (int j = 0; i < payouts2.size(); j++) {\n+                try {\n+                    assertEqual(payout, payouts2.get(j), string, string2);\n+                    found = true;\n+                    break;\n+                } catch (Exception e) {\n+                    continue;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Annuity: IPayout list not the same (no match found)!\");\n+            }\n+        }\n+    }\n+\n+    private void assertEqual(IPayout clientPayout, IPayout resultPayout, String string, String string2)\n+    throws Exception {\n+        if (clientPayout == null && resultPayout == null) \n+            return;\n+        if (clientPayout == null)\n+            throw new RuntimeException(\"Annuity: IPayout not the same (clientPayout was null)! \" +\n+                string + \" \" + string2);\n+        if (clientPayout.getId().equals(resultPayout.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: IPayout not the same (clientPayout ids not the same)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private void assertRidersEqual(List<IRider> riders, List<IRider> riders2, String string, String string2)\n+    throws Exception {\n+        if (riders == null && riders2 == null) \n+            return;\n+        if (riders == null)\n+            throw new RuntimeException(\"Annuity: IRider list not the same (riders was null)!\");\n+        if (riders.size() != riders2.size())\n+            throw new RuntimeException(\"Annuity: IRider list not the same (riders size not the same)!\");\n+        for (int i = 0; i < riders.size(); i++) {\n+            IRider rider = riders.get(i);\n+            boolean found = false;\n+            for (int j = 0; i < riders2.size(); j++) {\n+                try {\n+                    assertEqual(rider, riders2.get(j), string, string2);\n+                    found = true;\n+                    break;\n+                } catch (Exception e) {\n+                    continue;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Annuity: IRider list not the same (match not found)!\");\n+            }\n+        }\n+    }\n+\n+    private void assertEqual(IRider clientRider, IRider resultRider, String string, String string2) throws Exception {\n+        if (clientRider == null && resultRider == null) \n+            return;\n+        if (clientRider == null)\n+            throw new RuntimeException(\"Annuity: IRider not the same (clientRider was null)! \" +\n+                string + \" \" + string2);\n+        if (clientRider.getId().equals(resultRider.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: IRider not the same (no match found)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private void assertPayorsEqual(List<IPayor> payors, List<IPayor> payors2, String string, String string2)\n+    throws Exception {\n+        if (payors == null && payors2 == null) \n+            return;\n+        if (payors == null)\n+            throw new RuntimeException(\"Annuity: IPayor list not the same (payors was null)!\");\n+        if (payors.size() != payors2.size())\n+            throw new RuntimeException(\"Annuity: IPayor list not the same (payors size not the same)!\");\n+        for (int i = 0; i < payors.size(); i++) {\n+            IPayor payor = payors.get(i);\n+            boolean found = false;\n+            for (int j = 0; i < payors2.size(); j++) {\n+                try {\n+                    assertEqual(payor, payors2.get(j), string, string2);\n+                    found = true;\n+                    break;\n+                } catch (Exception e) {\n+                    continue;\n+                }\n+            }\n+            if (!found) {\n+                throw new RuntimeException(\"Annuity: IPayor list not the same (no match found)!\");\n+            }\n+        }\n+    }\n+\n+    private void verifyPayorValues(OpenJPAEntityManagerFactorySPI myEMF, IPayor payor) throws Exception {\n+        IPayor results = null; \n+        results = findPayorById(myEMF, Payor.class, payor.getId());\n+        assertEqual(payor, results,\n+                \"Payor from Client is not equal to DB value.\", \"Mismacth was found.\");\n+    }\n+\n+    private IPayor findPayorById(OpenJPAEntityManagerFactorySPI myEMF, Class<Payor> class1, String id) {\n+        EntityManager em = createEM(myEMF);\n+        IPayor ip = em.find(class1, id);\n+        closeEM(em);\n+        return ip;\n+    }\n+\n+    private void assertEqual(IPayor payor, IPayor results, String string, String string2) throws Exception {\n+        if (payor == null && results == null) \n+            return;\n+        if (payor == null)\n+            throw new RuntimeException(\"Annuity: IPayor not the same (payor was null)! \" +\n+                string + \" \" + string2);\n+        if (payor.getId().equals(results.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: IPayor not the same (no match found)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private IPayor createPayor(OpenJPAEntityManagerFactorySPI myEMF) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IPayor payor = new Payor();\n+        payor.setId(getId());\n+        payor.setName(\"Payor\");\n+        em.persist(payor);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return payor;\n+    }\n+\n+    private void verifyAnnuityHolderValues(OpenJPAEntityManagerFactorySPI myEMF, IAnnuityHolder annuityHolder)\n+    throws Exception {\n+        IAnnuityHolder result = null;\n+        result = findHolderById(myEMF, AnnuityHolder.class, annuityHolder.getId());\n+        assertEqual(annuityHolder, result, \n+            \"Annuity Holder from Client is not equal to DB value.\", \"Mismacth was found.\");\n+        assertEqual(annuityHolder.getContact(), result.getContact(), \n+                \"Annuity Holder Contact from Client is not equal to DB value.\", \"Mismacth was found.\");\n+    }\n+    \n+    private IAnnuityHolder findHolderById(OpenJPAEntityManagerFactorySPI myEMF, Class<AnnuityHolder> class1, String id)\n+    {\n+        EntityManager em = createEM(myEMF);\n+        IAnnuityHolder result = em.find(class1, id);\n+        closeEM(em);\n+        return result;\n+    }\n+\n+    private EntityManager createEM(OpenJPAEntityManagerFactorySPI myEMF) {\n+        return myEMF.createEntityManager();\n+    }\n+\n+    private void closeEM(EntityManager em) {\n+        if (em != null) {\n+            em.close();\n+            em = null;\n+        }\n+    }\n+\n+    private void assertEqual(IAnnuityHolder annuityHolder, IAnnuityHolder results, String string, String string2)\n+    throws Exception {\n+            if (annuityHolder == null && results == null) \n+                return;\n+            if (annuityHolder == null)\n+                throw new RuntimeException(\"Annuity: IAnnuityHolder not the same (annuityHolder was null)! \" +\n+                    string + \" \" + string2);\n+            if (annuityHolder.getId().equals(results.getId()))\n+                return;\n+            throw new RuntimeException(\"Annuity: IAnnuityHolder not the same (no match found)! \" +\n+                string + \" \" + string2);\n+    }\n+\n+    private void assertEqual(IContact contact, IContact contact2, String string, String string2) throws Exception {\n+        if (contact == null && contact2 == null) \n+            return;\n+        if (contact == null)\n+            throw new RuntimeException(\"Annuity: Contacts not the same (contact was null)! \" +\n+                string + \" \" + string2);\n+        if (contact.getId().equals(contact2.getId()))\n+            return;\n+        throw new RuntimeException(\"Annuity: Contacts not the same (no match found)! \" +\n+            string + \" \" + string2);\n+    }\n+\n+    private IAnnuityHolder createAnnuityHolder(OpenJPAEntityManagerFactorySPI myEMF, IContact contact) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IAnnuityHolder annuityHolder = new AnnuityHolder();\n+        annuityHolder.setCategory(AnnuityHolderCategory.METAL);\n+        annuityHolder.setContact(contact);\n+        annuityHolder.setId(getId());\n+        annuityHolder.setFirstName(\"bob\");\n+        annuityHolder.setDateOfBirth(new Date());\n+        annuityHolder.setGovernmentId(\"US\");\n+        annuityHolder.setLastName(\"dog\");\n+        annuityHolder.setTimeOfBirth(new Date());\n+        em.persist(annuityHolder);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return annuityHolder;\n+    }\n+\n+    private void verifyContactValues(OpenJPAEntityManagerFactorySPI myEMF, IContact contact) throws Exception {\n+        // read the contact with id.\n+        IContact results = null;\n+        results = findContactById(myEMF, Contact.class, contact.getId());\n+        assertEqual(contact, results, \n+            \"Contact from Client is not equal to DB value.\", \"Mismacth was found.\");     \n+    }\n+\n+    private IContact findContactById(OpenJPAEntityManagerFactorySPI myEMF, Class<Contact> class1, String id) {\n+        EntityManager em = createEM(myEMF);\n+        IContact ic = em.find(class1, id);\n+        closeEM(em);\n+        return ic;\n+    }\n+\n+    private IContact createContact(OpenJPAEntityManagerFactorySPI myEMF) {\n+        EntityManager em = createEM(myEMF);\n+        em.getTransaction().begin();\n+        IContact contact = null;\n+        contact = new Contact();\n+        contact.setContactType(ContactType.BUSINESS);\n+        contact.setId(getId());\n+        contact.setEmail(\"here@there\");\n+        contact.setPhone(\"555-5555\");\n+        em.persist(contact);\n+        em.getTransaction().commit();\n+        closeEM(em);\n+        return contact;\n+    }\n+\n+    private String getId() {\n+        UUID uid = UUID.randomUUID();\n+        return uid.toString();\n+    }\n+\n+}"},{"sha":"adc486f8f7fb5129cef13e0d93c3c2e95ac925b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Address.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@Embeddable\n+public class Address implements IAddress {\t\n+\tprivate static final long serialVersionUID = -2017682230659955349L;\n+\tprivate String line1;\n+\tprivate String line2;\n+\tprivate String city;\n+\tprivate String state;\n+\tprivate String zipCode;\n+\tprivate String country;\n+\t\n+\t@Column(name=\"CITY\")\n+\tpublic String getCity() {\n+\t\treturn city;\n+\t}\n+\tpublic void setCity(String city) {\n+\t\tthis.city = city;\n+\t}\n+\t@Column(name=\"COUNTRY\")\n+\tpublic String getCountry() {\n+\t\treturn country;\n+\t}\n+\tpublic void setCountry(String country) {\n+\t\tthis.country = country;\n+\t}\n+\t@Column(name=\"LINE1\")\n+\tpublic String getLine1() {\n+\t\treturn line1;\n+\t}\t\n+\tpublic void setLine1(String line1) {\n+\t\tthis.line1 = line1;\n+\t}\n+\t@Column(name=\"LINE2\")\n+\tpublic String getLine2() {\n+\t\treturn line2;\n+\t}\n+\tpublic void setLine2(String line2) {\n+\t\tthis.line2 = line2;\n+\t}\n+\t@Column(name=\"STATE\")\n+\tpublic String getState() {\n+\t\treturn state;\n+\t}\n+\tpublic void setState(String state) {\n+\t\tthis.state = state;\n+\t}\n+\t@Column(name=\"ZIP_CODE\")\n+\tpublic String getZipCode() {\n+\t\treturn zipCode;\n+\t}\n+\tpublic void setZipCode(String zipCode) {\n+\t\tthis.zipCode = zipCode;\n+\t}\n+}"},{"sha":"96816fdbcc816fba1486946fca6f1f685ccc32d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Annuity.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToMany;\n+\n+\n+@SuppressWarnings(\"serial\")\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name=\"DTYPE\", discriminatorType=DiscriminatorType.STRING)\n+@DiscriminatorValue(value=\"ANNUITY\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Annuity extends AnnuityPersistebleObject implements IAnnuity {\n+    \n+    private Double lastPaidAmt; \n+    private String AccountNumber;       \n+    private Double amount;\n+    private String annuityHolderId;\n+    private List<IPayout> payouts = new ArrayList<IPayout>();\n+    private List<IRider> riders = new ArrayList<IRider>();\n+    private List<IPayor> payors = new ArrayList<IPayor>();\n+    \n+    public Annuity(){\n+    }\n+\n+    @Column(name=\"LAST_PAID_AMT\")\n+    public Double getLastPaidAmt() {\n+        return lastPaidAmt;\n+    }\n+    public void setLastPaidAmt(Double lastPaidAmt) {\n+        this.lastPaidAmt = lastPaidAmt;\n+        if (this.lastPaidAmt != null) {\n+            DecimalFormat df = new DecimalFormat(\"#.##\");\n+            this.lastPaidAmt= new Double(df.format(lastPaidAmt));\n+        }\n+    }\n+    \n+    @Column(name=\"ACCOUNT_NUMBER\")\n+    public String getAccountNumber() {\n+        return AccountNumber;\n+    }\n+    public void setAccountNumber(String accountNumber) {\n+        AccountNumber = accountNumber;\n+    }\n+    \n+    @Column(name=\"AMOUNT\")\n+    public Double getAmount() {\n+        return amount;\n+    }\n+    public void setAmount(Double amount) {\n+        this.amount = amount;\n+        if (this.amount != null) {\n+            DecimalFormat df = new DecimalFormat(\"#.##\");\n+            this.amount = new Double(df.format(amount));\n+        }\n+    }\n+\n+    @Column(name=\"FK_ANNUITY_HOLDER_ID\")\n+    public String getAnnuityHolderId() {\n+        return this.annuityHolderId;\n+    }\n+    public void setAnnuityHolderId(String annuityHolderId) {\n+        this.annuityHolderId = annuityHolderId;\n+        \n+    }\n+    \n+    @ManyToMany(targetEntity=Payor.class, \n+            fetch=FetchType.EAGER)          \n+    @JoinTable(name=\"ANNUITY_PAYOR\", \n+            joinColumns={@JoinColumn(name=\"FK_ANNUITY_ID\")}, \n+            inverseJoinColumns={@JoinColumn(name=\"FK_PAYOR_ID\")})\n+    public List<IPayor> getPayors() {\n+        return this.payors;\n+    }\n+    public void setPayors(List<IPayor> payors) {\n+        this.payors = payors;\n+        \n+    }\n+    \n+    @OneToMany(targetEntity=Payout.class,       \n+            mappedBy=\"annuity\", \n+            fetch=FetchType.EAGER)  \n+    public List<IPayout> getPayouts() {\n+        return this.payouts;\n+    }\n+    public void setPayouts(List<IPayout> payouts) {\n+        this.payouts = payouts;     \n+    }\n+\n+    @OneToMany(cascade={CascadeType.ALL}, \n+            targetEntity=Rider.class, \n+            fetch=FetchType.EAGER)\n+    @JoinTable(name=\"ANNUITY_RIDER\", \n+            joinColumns={@JoinColumn(name=\"FK_ANNUITY_ID\")}, \n+            inverseJoinColumns={@JoinColumn(name=\"FK_RIDER_ID\")})   \n+    public List<IRider> getRiders() {\n+        return this.riders;\n+    }\n+    public void setRiders(List<IRider> riders) {\n+        this.riders = riders;\n+    }\n+\n+    \n+    \n+    \n+}"},{"sha":"80e5e8b1f927fb119420216c86117c5b4c0b15f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolder.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.Table;\n+\n+@Entity\n+@PrimaryKeyJoinColumn(name=\"ID\")\n+@Table(name=\"ANNUITY_HOLDER\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class AnnuityHolder extends Person implements IAnnuityHolder{\n+\tprivate static final long serialVersionUID = 3307367871936336517L;\t\n+\tprivate AnnuityHolderCategory category;\n+\t\n+\t@Column(name=\"CATEGORY\")\n+\t@Enumerated(EnumType.ORDINAL)\t\n+\tpublic AnnuityHolderCategory getCategory() {\n+\t\treturn this.category;\n+\t}\n+\t\n+\tpublic void setCategory(AnnuityHolderCategory category) {\n+\t\tthis.category = category;\n+\t}\n+\n+\n+}"},{"sha":"d2e4d2d0ab4cf1f5400077f6b4384372dd2faa08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityHolderCategory.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum AnnuityHolderCategory {\n+\tMETAL, BRONZE, SILVER, GOLD; \n+}"},{"sha":"26793640cd13e2d6920ca6e774719fca00e5949f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityPersistebleObject.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+import javax.persistence.Version;\n+\n+@MappedSuperclass\n+public class AnnuityPersistebleObject implements JPAPersisteble {\n+\tprivate static final long serialVersionUID = -1752164352355128830L;\n+\tprivate String id;\n+\tprivate Date lastUpdateDate;\n+\tprivate Parameterizable<String, String> config = new StringParameterizable();\n+\tprivate int version;\n+\t\n+\t@Version\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tpublic void setVersion(int version) {\n+\t\tthis.version = version;\n+\t}\n+\n+\t@javax.persistence.Id\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\t\t\n+\tpublic Date getLastUpdateDate() {\n+\t\treturn lastUpdateDate;\n+\t}\n+\n+\tpublic void setLastUpdateDate(Date lastUpdateDate) {\n+\t\tthis.lastUpdateDate = lastUpdateDate;\n+\t}\n+\n+\t@Transient\n+\tpublic Parameterizable<String, String> getConfiguration() {\n+\t\treturn this.config;\n+\t}\n+\t@Transient\n+\tpublic void setConfiguration(Parameterizable<String, String> config) {\n+\t\tthis.config = config;\n+\t}\n+\t\n+\t@SuppressWarnings(\"unused\")\n+\t@PrePersist\n+\t@PreUpdate\n+\tprivate void fixLastUpdateDate(){\n+\t\tsetLastUpdateDate(new Date());\n+\t}\n+}"},{"sha":"a86719cfaaab2fc01fadb890d4842bf2dc53d169","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/AnnuityType.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum AnnuityType {\n+    BASIC, EQUITY, FIXED;\n+}"},{"sha":"044351fcc47d7d834c78a53fa90ff5af2dc2bad5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Configrable.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+\n+public interface Configrable<K, V> extends Serializable{\n+\tpublic Parameterizable<K, V> getConfiguration();\n+\tpublic void setConfiguration(Parameterizable<K, V> config);\n+}"},{"sha":"7a0517fe85258571a943d6df94555085675ef080","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Contact.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+@Entity\n+@Table(name=\"CONTACT\")\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Contact extends AnnuityPersistebleObject implements IContact {\n+\tprivate static final long serialVersionUID = 4015672780551057807L;\n+\tprivate Address theAddress;\n+\tprivate String email;\n+\tprivate String phone;\n+\tprivate ContactType contactType;\n+\t\n+\t@Transient\n+\tpublic IAddress getAddress() {\n+\t\treturn (IAddress) this.getTheAddress();\n+\t}\n+\tpublic void setAddress(IAddress address) {\n+\t\tif (address instanceof Address){\n+\t\t\tthis.setTheAddress((Address)address);\n+\t\t}else if(address == null) {\n+\t\t\tthis.setTheAddress(null);\n+\t\t}\n+\t\telse{\n+\t\t\tthrow new ClassCastException(\"Invalid Implementaion of IAddress.  \" +\n+\t\t\t\t\t\"Class must be instance of com.ibm.wssvt.acme.annuity.common.bean.jpa.Address\");\n+\t\t}\n+\t}\n+\n+\t@Embedded\n+\tprivate  Address getTheAddress() {\n+\t\treturn theAddress;\n+\t}\n+\tprivate  void setTheAddress(Address address) {\n+\t\tthis.theAddress = address;\n+\t}\n+\t\n+\t@Column(name=\"EMAIL\")\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\t@Column(name=\"PHONE\")\n+\tpublic String getPhone() {\n+\t\treturn phone;\n+\t}\n+\tpublic void setPhone(String phone) {\n+\t\tthis.phone = phone;\n+\t}\n+\t@Column(name=\"TYPE\")\n+\t@Enumerated(EnumType.STRING)\n+\tpublic ContactType getContactType() {\n+\t\treturn contactType;\n+\t}\n+\tpublic void setContactType(ContactType contactType) {\n+\t\tthis.contactType = contactType;\n+\t}\n+\t\n+}"},{"sha":"4735749dff747a05b92a2230d646b6dc78246815","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/ContactType.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum ContactType {\n+\tHOME, BUSINESS, OTHER;\n+}"},{"sha":"453100aa2f39e7f69b403c6fab6f5ac976840b2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/EquityAnnuity.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.text.DecimalFormat;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(value = \"EQUITY\")\n+public class EquityAnnuity extends Annuity implements IEquityAnnuity {\n+\n+\tprivate static final long serialVersionUID = -7227462924769151013L;\n+\n+\tprivate String fundNames;\n+\n+\tprivate Double indexRate;\n+\n+\t@Column(name=\"FUND_NAMES\")\n+\tpublic String getFundNames() {\n+\t\treturn fundNames;\n+\t}\n+\n+\tpublic void setFundNames(String fundNames) {\n+\t\tthis.fundNames = fundNames;\n+\t}\n+\n+\t@Column(name=\"INDEX_RATE\")\n+\tpublic Double getIndexRate() {\n+\t\treturn indexRate;\n+\t}\n+\n+\tpublic void setIndexRate(Double indexRate) {\n+\t\tthis.indexRate = indexRate;\n+\t\tif (this.indexRate != null) {\n+\t\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n+\t\t\tthis.indexRate= new Double(df.format(indexRate));\n+\t\t}\n+\t}\n+\n+}"},{"sha":"4ba982e75e3c6cb06d3e4a8caa238ef62ad27dc5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/FixedAnnuity.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.text.DecimalFormat;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(value = \"FIXED\")\n+public class FixedAnnuity extends Annuity implements IFixedAnnuity {\n+\n+\tprivate static final long serialVersionUID = 1527245835840605452L;\n+\n+\tprivate Double rate;\n+\n+\t@Column(name=\"FIXED_RATE\")\n+\tpublic Double getRate() {\n+\t\treturn rate;\n+\t}\n+\n+\tpublic void setRate(Double rate) {\n+\t\tthis.rate = rate;\n+\t\tif (this.rate != null) {\n+\t\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n+\t\t\tthis.rate= new Double(df.format(rate));\n+\t\t}\n+\t}\n+}"},{"sha":"49517c1a7a275556befef6538a9498eb36ec6275","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAddress.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+\n+public interface IAddress extends Serializable {\n+\n+\tpublic String getCity();\n+\n+\tpublic void setCity(String city);\n+\n+\tpublic String getCountry();\n+\n+\tpublic void setCountry(String country);\n+\n+\tpublic String getLine1();\n+\n+\tpublic void setLine1(String line1);\n+\n+\tpublic String getLine2();\n+\n+\tpublic void setLine2(String line2);\n+\n+\tpublic String getState();\n+\n+\tpublic void setState(String state);\n+\n+\tpublic String getZipCode();\n+\n+\tpublic void setZipCode(String zipCode);\n+\n+}"},{"sha":"36d7d935ed09831c93d9c384081f4d1d104c3f62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuity.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.List;\n+\n+public interface IAnnuity extends IAnnuityObject {\n+\t\n+\tpublic abstract Double getLastPaidAmt();\n+\n+\tpublic abstract void setLastPaidAmt(Double lastPaidAmt);\n+\t\n+\tpublic abstract String getAccountNumber();\n+\n+\tpublic abstract void setAccountNumber(String accountNumber);\n+\n+\tpublic abstract Double getAmount();\n+\n+\tpublic abstract void setAmount(Double amount);\n+\t\n+\tpublic abstract List<IPayout> getPayouts();\n+\tpublic abstract void setPayouts(List<IPayout> payout);\n+\t\n+\tpublic abstract List<IRider> getRiders();\n+\tpublic abstract void setRiders(List<IRider> riders);\n+\t\n+\tpublic abstract String getAnnuityHolderId();\n+\tpublic abstract void setAnnuityHolderId(String annuityHolderId);\n+\t\n+\tpublic abstract List<IPayor> getPayors();\n+\tpublic abstract void setPayors(List<IPayor> payors);\n+\t\n+}"},{"sha":"66bc21c5b32556375e663a6fd77e7eaa104c17b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityHolder.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IAnnuityHolder extends IPerson {\n+\n+\tpublic AnnuityHolderCategory getCategory();\n+\tpublic void setCategory(AnnuityHolderCategory category);\n+\t\n+\t\n+}"},{"sha":"21f4b0ff56b5f1a6de7c2ad73f149301e69e8070","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IAnnuityObject.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+public interface IAnnuityObject extends Identifiable {\t\n+\tpublic void setLastUpdateDate(Date date);\n+\tpublic Date getLastUpdateDate();\n+}"},{"sha":"c4a30475b034d3d0145871b09cdfdd4033408741","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IContact.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IContact extends IAnnuityObject {\n+\n+\tpublic IAddress getAddress();\n+\n+\tpublic void setAddress(IAddress address);\n+\n+\tpublic String getEmail();\n+\n+\tpublic void setEmail(String email);\n+\n+\tpublic String getPhone();\n+\n+\tpublic void setPhone(String phone);\n+\t\n+\tpublic ContactType getContactType();\n+\t\n+\tpublic void setContactType(ContactType type);\n+\n+}"},{"sha":"35962ec05a5dbe0c26fa958b58c7c1d4275832df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IEquityAnnuity.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IEquityAnnuity extends IAnnuity{\n+\n+\tpublic String getFundNames();\n+\n+\tpublic void setFundNames(String fundNames);\n+\n+\tpublic Double getIndexRate();\n+\n+\tpublic void setIndexRate(Double indexRate);\n+\n+}"},{"sha":"29e4f01a113be52ac9307ac99191869d1998acd7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IFixedAnnuity.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IFixedAnnuity extends IAnnuity {\n+\n+\tpublic Double getRate();\n+\n+\tpublic void setRate(Double rate);\n+\n+}"},{"sha":"3d68075e6b8996961fd3fef46f91597cdfba0a8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayor.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IPayor extends IAnnuityObject{\n+\tpublic String getName();\n+\tpublic void setName(String name);\n+\n+}"},{"sha":"4eeb90cc86a478a2ab8c14f0d53d89648ae8a67a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPayout.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+\n+public interface IPayout extends IAnnuityObject{\n+\n+\tpublic void setTaxableAmount(BigDecimal taxableAmount);\n+\tpublic BigDecimal getTaxableAmount();\n+\tpublic void setStartDate(Calendar startDate);\n+\tpublic Calendar getStartDate();\n+\tpublic void setEndDate(Calendar payoutEndDate);\n+\tpublic Calendar getEndDate();\n+\tpublic IAnnuity getAnnuity();\n+\tpublic void setAnnuity(IAnnuity annuity);\n+\n+}"},{"sha":"6006ee90989baef9906e7fc634be1f78cc0d4736","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPersisteble.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface IPersisteble extends Identifiable {\n+\n+}"},{"sha":"7c07fd63d03545bd8bea7746d9f9493a316806d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IPerson.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+public interface IPerson extends IAnnuityObject {\n+\n+\tpublic Date getDateOfBirth();\n+\n+\tpublic void setDateOfBirth(Date dateOfBirth);\n+\n+\tpublic String getFirstName();\n+\n+\tpublic void setFirstName(String firstName);\n+\n+\tpublic String getGovernmentId();\n+\n+\tpublic void setGovernmentId(String governmentId);\n+\n+\tpublic String getLastName();\n+\n+\tpublic void setLastName(String lastName);\n+\n+\tpublic Byte[] getPicture();\n+\n+\tpublic void setPicture(Byte[] picture);\n+\n+\tpublic Date getTimeOfBirth();\n+\n+\tpublic void setTimeOfBirth(Date timeOfBirth);\t\n+\t\n+\tpublic IContact getContact();\n+\t\n+\tpublic void setContact(IContact contact);\n+\t\n+}"},{"sha":"4342afb47a19ec43ffa2703e2f29efc475eb2e90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/IRider.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+public interface IRider extends IAnnuityObject {\n+    \n+\tpublic Date getEffectiveDate();\n+\t\n+\tpublic void setEffectiveDate(Date date);\n+\t\n+\tpublic String getRule();\n+\n+\tpublic void setRule(String rule);\n+\n+\tpublic RiderType getType();\n+\n+\tpublic void setType(RiderType type);\n+\t\n+}"},{"sha":"54742671fada1377fbc6e96bf7a26f16bf426518","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Identifiable.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+\n+public interface Identifiable extends Configrable<String, String>, Serializable{\n+\tpublic String getId();\n+\tpublic void setId(String id);\t\n+}"},{"sha":"4e9ad3009f4e1aeba75fd1a10a4cab90f629719c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/JPAPersisteble.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public interface JPAPersisteble extends IPersisteble, Identifiable, Configrable<String, String>{\n+\n+}"},{"sha":"e2ddee602d274a7f2dde121fe220db3edbcadae2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Parameterizable.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+public interface Parameterizable <K,V> extends Serializable{\n+\tpublic void addParameter(K key, V value);\n+\tpublic void removeParameter(K key);\n+\tpublic void clearAllParameters();\n+\tpublic Map<K, V> getParameters();\n+\tpublic V getParameterValue(K key);\n+\tpublic void addAllParams(Map<K,V> newParams);\n+}"},{"sha":"7cebeee903279bf4be94fe5e55ce321a2e285876","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payor.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Payor extends AnnuityPersistebleObject implements IPayor {\t\n+\tprivate static final long serialVersionUID = 3462390122289537362L;\n+\tprivate String name;\t\n+\t\n+\t@Column(name=\"NAME\")\n+\tpublic String getName() {\n+\t\treturn this.name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+}"},{"sha":"29ac27a13016543c527233faf7d67e7db8331474","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Payout.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.math.BigDecimal;\n+import java.text.DecimalFormat;\n+import java.util.Calendar;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Payout extends AnnuityPersistebleObject implements IPayout {\t\n+\tprivate static final long serialVersionUID = 2837981324963617180L;\n+\tprivate BigDecimal taxableAmount;\n+\tprivate Calendar startDate;\n+\tprivate Calendar endDate;\n+\tprivate IAnnuity annuity;\n+\t\t\n+\t@Column(name=\"TAXABLE_AMOUNT\")\n+\tpublic BigDecimal getTaxableAmount() {\t\t\n+\t\treturn this.taxableAmount;\n+\t}\n+\tpublic void setTaxableAmount(BigDecimal payoutTaxableAmt) {\t\t\n+\t\tthis.taxableAmount = payoutTaxableAmt;\n+\t\tif (payoutTaxableAmt != null) {\n+\t\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n+\t\t\tthis.taxableAmount = new BigDecimal(df.format(payoutTaxableAmt)); \t\t\t\t\n+\t\t}\n+\t\t\n+\t}\n+\t@Column(name=\"START_DATE\")\n+\tpublic Calendar getStartDate() {\n+\t\treturn startDate;\n+\t}\n+\tpublic void setStartDate(Calendar startDate) {\n+\t\tthis.startDate = startDate;\n+\t}\n+\t\n+\t@Column(name=\"END_DATE\")\n+\tpublic Calendar getEndDate() {\n+\t\treturn endDate;\n+\t}\n+\t\n+\tpublic void setEndDate(Calendar payoutEndDate) {\n+\t\tthis.endDate = payoutEndDate;\n+\t}\n+\t\t\t\n+\t@ManyToOne(targetEntity=Annuity.class,\n+\t\t\tfetch=FetchType.EAGER)\n+\t@JoinColumn(name=\"FK_ANNUITY_ID\")\t\n+\tpublic IAnnuity getAnnuity() {\n+\t\treturn this.annuity;\n+\t}\n+\tpublic void setAnnuity(IAnnuity annuity) {\n+\t\tthis.annuity = annuity;\n+\t\t\n+\t}\n+\n+}"},{"sha":"b1e8740723696add0ad262dc749ac5f4301375ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Person.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Person extends AnnuityPersistebleObject implements IPerson {\n+\n+\tprivate static final long serialVersionUID = 6583119146735692154L;\n+\tprivate String firstName;\n+\tprivate String lastName;\n+\tprivate String governmentId;\n+\tprivate Date dateOfBirth;\n+\tprivate Date timeOfBirth;\n+\tprivate Byte[] picture;\n+\tprivate IContact contact;\n+\t\n+\t\n+\t@Column(name=\"DATE_OF_BIRTH\")\n+\t@Temporal(TemporalType.DATE)\n+\tpublic Date getDateOfBirth() {\n+\t\treturn dateOfBirth;\n+\t}\n+\tpublic void setDateOfBirth(Date dateOfBirth) {\n+\t\tthis.dateOfBirth = dateOfBirth;\n+\t}\n+\t@Column(name=\"FIRST_NAME\")\n+\tpublic String getFirstName() {\n+\t\treturn firstName;\n+\t}\n+\tpublic void setFirstName(String firstName) {\n+\t\tthis.firstName = firstName;\n+\t}\n+\t@Column(name=\"GOVERNMENT_ID\")\n+\tpublic String getGovernmentId() {\n+\t\treturn governmentId;\n+\t}\n+\tpublic void setGovernmentId(String governmentId) {\n+\t\tthis.governmentId = governmentId;\n+\t}\n+\t@Column(name=\"LAST_NAME\")\n+\tpublic String getLastName() {\n+\t\treturn lastName;\n+\t}\n+\tpublic void setLastName(String lastName) {\n+\t\tthis.lastName = lastName;\n+\t}\n+\t@Column(name=\"PICTURE\")\n+\t@Lob\t\n+\tpublic Byte[] getPicture() {\n+\t\treturn picture;\n+\t}\n+\tpublic void setPicture(Byte[] picture) {\n+\t\tthis.picture = picture;\n+\t}\n+\t@Column(name=\"TIME_OF_BIRTH\")\n+\t@Temporal(TemporalType.TIME)\n+\tpublic Date getTimeOfBirth() {\n+\t\treturn timeOfBirth;\n+\t}\n+\tpublic void setTimeOfBirth(Date timeOfBirth) {\n+\t\tthis.timeOfBirth = timeOfBirth;\n+\t}\n+\t\n+\t@OneToOne(\n+\t\t\tcascade={CascadeType.REFRESH, CascadeType.MERGE}, \n+\t\t\ttargetEntity=Contact.class)\n+\t@JoinColumn(name=\"FK_CONTACT_ID\")\t\n+\tpublic IContact getContact() {\n+\t\treturn this.contact;\n+\t}\n+\tpublic void setContact(IContact contact) {\n+\t\tthis.contact = contact;\n+\t}\n+\t\n+}"},{"sha":"e97b8c6b441cdd7cfe84ffd465a06f13aeff5a3d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/Rider.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.Date;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+\n+@Entity\n+@AttributeOverride(name=\"lastUpdateDate\", column=@Column(name=\"LAST_UPDATE_TS\"))\n+public class Rider extends AnnuityPersistebleObject implements IRider {\n+\tprivate static final long serialVersionUID = 2088116709551706187L;\n+\n+\tprivate String rule;\n+\tprivate Date effectiveDate;\n+\tprivate RiderType type;\n+\t\n+\t@Column(name=\"EFFECTIVE_DATE\")\n+\tpublic Date getEffectiveDate() {\n+\t\treturn effectiveDate;\n+\t}\n+\tpublic void setEffectiveDate(Date effectiveDate) {\n+\t\tthis.effectiveDate = effectiveDate;\n+\t}\n+\tpublic String getRule() {\n+\t\treturn rule;\n+\t}\n+\tpublic void setRule(String rule) {\n+\t\tthis.rule = rule;\n+\t}\n+\t\n+\t@Enumerated(EnumType.STRING)\t\n+\tpublic RiderType getType() {\n+\t\treturn type;\n+\t}\n+\tpublic void setType(RiderType type) {\n+\t\tthis.type = type;\n+\t}\n+\t\n+\n+}"},{"sha":"7ed149648541673b39231ae45f43fa834d305615","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/RiderType.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+public enum RiderType {\n+\tREPLACE, OVERRIDE;\n+}"},{"sha":"e890a6b6d83c4e420f2e5deb349f80099562f81b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/entities/StringParameterizable.java?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy.entities;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringParameterizable implements Parameterizable<String, String> {\n+\tprivate static final long serialVersionUID = -4289064323865338447L;\n+\tprivate Map<String, String> params = new HashMap<String, String>();\n+\t\n+\tpublic void addParameter(String key, String value) {\n+\t\tthis.params.put(key, value);\n+\t}\n+\n+\tpublic Map<String, String> getParameters() {\n+\t\treturn this.params;\n+\t}\n+\n+\tpublic void removeParameter(String key) {\n+\t\tthis.params.remove(key);\n+\t}\n+\n+\tpublic void clearAllParameters() {\n+\t\tthis.params.clear();\n+\t}\n+\n+\tpublic String getParameterValue(String key) {\n+\t\treturn this.params.get(key);\n+\t}\n+\t\n+\tpublic void addAllParams(Map<String, String> newParams) {\n+\t\tif (newParams != null) {\n+\t\t\tparams.putAll(newParams);\n+\t\t}\n+\t}\n+}"},{"sha":"7087c58f3c9f862215e43592b865e16fe64a6ad7","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -341,4 +341,28 @@\n         </properties>\n     </persistence-unit>\n \n+    <persistence-unit name=\"TestDetachMerge\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+            <!--\n+            <property name=\"openjpa.DetachState\"\n+                value=\"fgs(DetachedStateField=true)\" />\n+            <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\" />\n+            -->\n+        </properties>\n+    </persistence-unit>\n+\n </persistence>"},{"sha":"b84c71627566a8e4bfd6756a0a08bc02aa989873","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence1.xml?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n+\n+    <persistence-unit name=\"Annuity1Compat\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" />\n+            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"f564e6d66bb7081efef299e58e85aef4538630ae","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","raw_url":"https://github.com/apache/openjpa/raw/fb60f8136f5427e47cc449bf21a9b860c3e11db9/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml?ref=fb60f8136f5427e47cc449bf21a9b860c3e11db9","patch":"@@ -0,0 +1,102 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n+\n+    <!-- \n+         This is the original PU from 1.0, but running as a 2.0 app\n+    -->\n+    <persistence-unit name=\"Annuity2Fail\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" />\n+            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+\n+    <!--\n+         This is the original PU from 1.0, but with the DetachedStateField\n+         override removed, which will cause a transient one to be used\n+         and the tests will pass.\n+    -->\n+    <persistence-unit name=\"Annuity2New\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <!-- <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" /> -->\n+            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+\n+    <!-- \n+         This is the original PU from 1.0, but running as a 2.0 app\n+         with the new Compatibility flag set to use the old 1.0 behavior,\n+         so the tests will pass.\n+    -->\n+    <persistence-unit name=\"Annuity2Compat\">\n+        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n+        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <!-- <property name=\"openjpa.Compatibility.xxxxx\" value=\"true)\" /> -->\n+            <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" />\n+            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+</persistence>"}]}

