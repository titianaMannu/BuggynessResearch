{"sha":"fb78813259657a71df227168478c9c0b9e5488ae","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiNzg4MTMyNTk2NTdhNzFkZjIyNzE2ODQ3OGM5YzBiOWU1NDg4YWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-24T19:48:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-24T19:48:23Z"},"message":"OPENJPA-545 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@671319 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d18425429ddb1795586af088ff760f670864115","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d18425429ddb1795586af088ff760f670864115"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb78813259657a71df227168478c9c0b9e5488ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb78813259657a71df227168478c9c0b9e5488ae","html_url":"https://github.com/apache/openjpa/commit/fb78813259657a71df227168478c9c0b9e5488ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb78813259657a71df227168478c9c0b9e5488ae/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","url":"https://api.github.com/repos/apache/openjpa/commits/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","html_url":"https://github.com/apache/openjpa/commit/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f"}],"stats":{"total":487,"additions":455,"deletions":32},"files":[{"sha":"8526cac122772e30279c9710f6d24d0537d81ec0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -3545,6 +3545,10 @@ private Seq getSequence(ClassMetaData meta, FieldMetaData fmd) {\n                 return UUIDHexSeq.getInstance();\r\n             case ValueStrategies.UUID_STRING:\r\n                 return UUIDStringSeq.getInstance();\r\n+            case ValueStrategies.UUID_TYPE4_HEX:\r\n+                return UUIDType4HexSeq.getInstance();\r\n+            case ValueStrategies.UUID_TYPE4_STRING:\r\n+                return UUIDType4StringSeq.getInstance();\r\n             case ValueStrategies.SEQUENCE:\r\n                 SequenceMetaData smd = (fmd == null)\r\n                     ? meta.getIdentitySequenceMetaData()\r"},{"sha":"3051e4b20a48a3b9f28b7d088a6db87541200027","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -50,7 +50,7 @@ public void setType(int type) {\n     }\n \n     public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n-        _last = UUIDGenerator.nextHex();\n+        _last = UUIDGenerator.nextHex(UUIDGenerator.TYPE1);\n         return _last;\n     }\n "},{"sha":"69dcbaf7f33987db0830d55d1636a2cbe002e0f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -50,7 +50,7 @@ public void setType(int type) {\n     }\n \n     public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n-        _last = UUIDGenerator.nextString();\n+        _last = UUIDGenerator.nextString(UUIDGenerator.TYPE1);\n         return _last;\n     }\n "},{"sha":"60b68a6d93fdd2a3abfb6ed6953cf36128c2fbbb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import org.apache.openjpa.lib.util.UUIDGenerator;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Sequence for generating 32-character hex Type 4 UUID strings.\n+ *\n+ * @author Jeremy Bauer\n+ */\n+public class UUIDType4HexSeq\n+    implements Seq {\n+\n+    private static final UUIDType4HexSeq _instance = new UUIDType4HexSeq();\n+\n+    private String _last = null;\n+\n+    /**\n+     * Return the singleton instance.\n+     */\n+    public static UUIDType4HexSeq getInstance() {\n+        return _instance;\n+    }\n+\n+    /**\n+     * Hide constructor.\n+     */\n+    private UUIDType4HexSeq() {\n+    }\n+\n+    public void setType(int type) {\n+    }\n+\n+    public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n+        _last = UUIDGenerator.nextHex(UUIDGenerator.TYPE4);\n+        return _last;\n+    }\n+\n+    public synchronized Object current(StoreContext ctx, ClassMetaData meta) {\n+        return _last;\n+    }\n+\n+    public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {\n+    }\n+\n+    public void close() {\n+\t}\n+}\n\\ No newline at end of file"},{"sha":"c03d0ea1d25701eed57610778e8c3763c2e7a09a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import org.apache.openjpa.lib.util.UUIDGenerator;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Sequence for generating 16-character UUID strings.\n+ *\n+ * @author Jeremy Bauer\n+ */\n+public class UUIDType4StringSeq\n+    implements Seq {\n+\n+    private static final UUIDType4StringSeq _instance = new UUIDType4StringSeq();\n+\n+    private String _last = null;\n+\n+    /**\n+     * Return the singleton instance.\n+     */\n+    public static UUIDType4StringSeq getInstance() {\n+        return _instance;\n+    }\n+\n+    /**\n+     * Hide constructor.\n+     */\n+    private UUIDType4StringSeq() {\n+    }\n+\n+    public void setType(int type) {\n+    }\n+\n+    public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n+        _last = UUIDGenerator.nextString(UUIDGenerator.TYPE4);\n+        return _last;\n+    }\n+\n+    public synchronized Object current(StoreContext ctx, ClassMetaData meta) {\n+        return _last;\n+    }\n+\n+    public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {\n+    }\n+\n+    public void close() {\n+\t}\n+}\n\\ No newline at end of file"},{"sha":"8704a443acdeb3af91d2b0393fa188d4642bc293","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -68,6 +68,16 @@\n      */\n     public static final int UUID_HEX = 6;\n \n+    /**\n+     * \"uuid-type4-string\" value strategy.\n+     */\n+    public static final int UUID_TYPE4_STRING = 7;\n+\n+    /**\n+     * \"uuid-type4-hex\" value strategy.\n+     */\n+    public static final int UUID_TYPE4_HEX = 8;\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (ValueStrategies.class);\n \n@@ -82,6 +92,8 @@\n         _map.put(\"increment\", Numbers.valueOf(INCREMENT));\n         _map.put(\"uuid-string\", Numbers.valueOf(UUID_STRING));\n         _map.put(\"uuid-hex\", Numbers.valueOf(UUID_HEX));\n+        _map.put(\"uuid-type4-string\", Numbers.valueOf(UUID_TYPE4_STRING));\n+        _map.put(\"uuid-type4-hex\", Numbers.valueOf(UUID_TYPE4_HEX));\n     }\n \n     /**"},{"sha":"7f6b2f25d3e3b800dc958c345c19797ccc032339","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -160,9 +160,13 @@ private static Object generateValue(StoreContext ctx,\n                 return JavaTypes.convert(smd.getInstance(ctx.getClassLoader()).\r\n                     next(ctx, meta), typeCode);\r\n             case ValueStrategies.UUID_STRING:\r\n-                return UUIDGenerator.nextString();\r\n+                return UUIDGenerator.nextString(UUIDGenerator.TYPE1);\r\n             case ValueStrategies.UUID_HEX:\r\n-                return UUIDGenerator.nextHex();\r\n+                return UUIDGenerator.nextHex(UUIDGenerator.TYPE1);\r\n+            case ValueStrategies.UUID_TYPE4_STRING:\r\n+                return UUIDGenerator.nextString(UUIDGenerator.TYPE4);\r\n+            case ValueStrategies.UUID_TYPE4_HEX:\r\n+                return UUIDGenerator.nextHex(UUIDGenerator.TYPE4);\r\n             default:\r\n                 return null;\r\n         }\r"},{"sha":"b34191b5e0db4b4d62d754fa85049fce2e6754ff","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":68,"deletions":19,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -22,16 +22,18 @@\n import java.net.InetAddress;\n import java.security.SecureRandom;\n import java.util.Random;\n+import java.util.UUID;\n \n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n- * UUID value generator.  Based on the time-based generator in the Apache\n- * Commons Id project:  http://jakarta.apache.org/commons/sandbox/id/uuid.html\n+ * UUID value generator.  Type 1 generator is based on the time-based generator  \n+ * in the Apache Commons Id project:  http://jakarta.apache.org/commons/sandbox\n+ * /id/uuid.html  The type 4 generator uses the standard Java UUID generator.\n  *\n- * The code has been vastly simplified and modified to replace the ethernet\n- * address of the host machine with the IP, since we do not want to require\n- * native libs and Java cannot access the MAC address directly.\n+ * The type 1 code has been vastly simplified and modified to replace the \n+ * ethernet address of the host machine with the IP, since we do not want to \n+ * require native libs and Java cannot access the MAC address directly.\n  *\n  * In spirit, implements the IETF UUID draft specification, found here:<br />\n  * http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01\n@@ -43,6 +45,10 @@\n  */\n public class UUIDGenerator {\n \n+    // supported UUID types\n+    public static final int TYPE1 = 1;\n+    public static final int TYPE4 = 4;\n+\n     // indexes within the uuid array for certain boundaries\n     private static final byte IDX_TIME_HI = 6;\n     private static final byte IDX_TYPE = 6; // multiplexed\n@@ -68,13 +74,12 @@\n     private final static byte TYPE_TIME_BASED = 0x10;\n \n     // random number generator used to reduce conflicts with other JVMs, and\n-    // hasher for strings.  note that secure random is very slow the first time\n-    // it is used; consider switching to a standard random\n-    private static final Random RANDOM = new SecureRandom();\n+    // hasher for strings.  \n+    private static Random RANDOM;\n \n     // 4-byte IP address + 2 random bytes to compensate for the fact that\n     // the MAC address is usually 6 bytes\n-    private static final byte[] IP;\n+    private static byte[] IP;\n \n     // counter is initialized to 0 and is incremented for each uuid request\n     // within the same timestamp window.\n@@ -88,12 +93,21 @@\n     // when it overflows\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n-    private static short _seq = (short) RANDOM.nextInt(MAX_14BIT);\n-\n+    private static short _seq = 0;\n+        \n     /*\n-     * Static initializer to get the IP address of the host machine.\n+     * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n+     * the node portion of the UUID using the IP address.\n      */\n-    static {\n+    private static synchronized void initializeForType1()\n+    {\n+        if (RANDOM != null)\n+            return;\n+        // note that secure random is very slow the first time\n+        // it is used; consider switching to a standard random\n+        RANDOM = new SecureRandom();\n+        _seq = (short) RANDOM.nextInt(MAX_14BIT);\n+        \n         byte[] ip = null;\n         try {\n             ip = InetAddress.getLocalHost().getAddress();\n@@ -103,13 +117,25 @@\n \n         IP = new byte[6];\n         RANDOM.nextBytes(IP);\n-        System.arraycopy(ip, 0, IP, 2, ip.length);\n+        System.arraycopy(ip, 0, IP, 2, ip.length);        \n     }\n \n     /**\n      * Return a unique UUID value.\n      */\n-    public static byte[] next() {\n+    public static byte[] next(int type) {\n+        if (type == TYPE4) {\n+            return createType4();\n+        }\n+        return createType1();\n+    }\n+      \n+    /*\n+     * Creates a type 1 UUID \n+     */\n+    public static byte[] createType1() {\n+        if (RANDOM == null)\n+            initializeForType1();\n         // set ip addr\n         byte[] uuid = new byte[16];\n         System.arraycopy(IP, 0, uuid, 10, IP.length);\n@@ -147,11 +173,32 @@\n         return uuid;\n     }\n \n+    /*\n+     * Creates a type 4 UUID\n+     */\n+    private static byte[] createType4() {\n+        UUID type4 = UUID.randomUUID();\n+        byte[] uuid = new byte[16];\n+        longToBytes(type4.getMostSignificantBits(), uuid, 0);\n+        longToBytes(type4.getLeastSignificantBits(), uuid, 8);\n+        return uuid;\n+    }\n+    \n+    /*\n+     * Converts a long to byte values, setting them in a byte array\n+     * at a given starting position.\n+     */\n+    private static void longToBytes(long longVal, byte[] buf, int sPos) {\n+        sPos += 7;\n+        for(int i = 0; i < 8; i++)         \n+            buf[sPos-i] = (byte)(longVal >>> (i * 8));\n+    }\n+\n     /**\n      * Return the next unique uuid value as a 16-character string.\n      */\n-    public static String nextString() {\n-        byte[] bytes = next();\n+    public static String nextString(int type) {\n+        byte[] bytes = next(type);\n         try {\n             return new String(bytes, \"ISO-8859-1\");\n         } catch (Exception e) {\n@@ -162,8 +209,8 @@ public static String nextString() {\n     /**\n      * Return the next unique uuid value as a 32-character hex string.\n      */\n-    public static String nextHex() {\n-        return Base16Encoder.encode(next());\n+    public static String nextHex(int type) {\n+        return Base16Encoder.encode(next(type));\n     }\n \n     /**\n@@ -174,6 +221,8 @@ public static String nextHex() {\n      */\n     // package-visibility for testing\n     static long getTime() {\n+        if (RANDOM == null)\n+            initializeForType1();\n         long newTime = getUUIDTime();\n         if (newTime <= _lastMillis) {\n             incrementSequence();"},{"sha":"8e8777b5908eabdd8b8462961299bf9b2d83e1cb","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -33,13 +33,39 @@\n     public void testUniqueString() {\n         Set seen = new HashSet();\n         for (int i = 0; i < 10000; i++)\n-            assertTrue(seen.add(UUIDGenerator.nextString()));\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextString(UUIDGenerator.TYPE1)));\n     }\n \n     public void testUniqueHex() {\n         Set seen = new HashSet();\n         for (int i = 0; i < 10000; i++)\n-            assertTrue(seen.add(UUIDGenerator.nextHex()));\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextHex(UUIDGenerator.TYPE1)));\n+    }\n+\n+    public void testUniqueType4String() {\n+        Set seen = new HashSet();\n+        for (int i = 0; i < 10000; i++)\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextString(UUIDGenerator.TYPE4)));\n+    }\n+\n+    public void testUniqueType4Hex() {\n+        Set seen = new HashSet();\n+        for (int i = 0; i < 10000; i++)\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextHex(UUIDGenerator.TYPE4)));\n+    }\n+\n+    public void testUniqueMixedTypesHex() {\n+        Set seen = new HashSet();\n+        for (int i = 0; i < 10000; i++) {\n+            int type = (i % 2 == 0) ? \n+                UUIDGenerator.TYPE4 : UUIDGenerator.TYPE1;\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextHex(type)));\n+        }\n     }\n \n     public void testGetTime() {"},{"sha":"27cf5554fc4a932a405371d737d54aa4a0627c34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","status":"modified","additions":50,"deletions":1,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -43,14 +43,31 @@\n         sequenceName=\"org.apache.openjpa.persistence.generationtype.CustomSeq()\")\r\n     private int customSeqWithIndirectionField;\r\n \r\n+    @GeneratedValue(generator=\"uuid-hex\")\r\n+    private String uuidhex;\r\n+\r\n+    @GeneratedValue(generator=\"uuid-string\")\r\n+    private String uuidstring;\r\n+\r\n+    @GeneratedValue(generator=\"uuid-type4-hex\")\r\n+    private String uuidT4hex;\r\n+\r\n+    @GeneratedValue(generator=\"uuid-type4-string\")\r\n+    private String uuidT4string;\r\n+    \r\n     public GeneratedValues() {\r\n         super();\r\n     }\r\n     \r\n-    public GeneratedValues(int id, long field) {\r\n+    public GeneratedValues(int id, long field, String uh, String us,\r\n+        String ut4h, String ut4s) {\r\n         super();\r\n         this.id = id;\r\n         this.field = field;\r\n+        this.uuidhex = uh;\r\n+        this.uuidstring = us;\r\n+        this.uuidT4hex = ut4h;\r\n+        this.uuidT4string = ut4s;\r\n     }\r\n \r\n     public int getId() {\r\n@@ -76,4 +93,36 @@ public void setField(long field) {\n     public int getCustomSeqWithIndirectionField() {\r\n         return customSeqWithIndirectionField;\r\n     }\r\n+    \r\n+    public void setUuidhex(String uuidhex) {\r\n+        this.uuidhex = uuidhex;\r\n+    }\r\n+\r\n+    public String getUuidhex() {\r\n+        return uuidhex;\r\n+    }\r\n+\r\n+    public void setUuidstring(String uuidstring) {\r\n+        this.uuidstring = uuidstring;\r\n+    }\r\n+\r\n+    public String getUuidstring() {\r\n+        return uuidstring;\r\n+    }\r\n+\r\n+    public void setUuidT4hex(String uuidT4hex) {\r\n+        this.uuidT4hex = uuidT4hex;\r\n+    }\r\n+\r\n+    public String getUuidT4hex() {\r\n+        return uuidT4hex;\r\n+    }\r\n+\r\n+    public void setUuidT4string(String uuidT4string) {\r\n+        this.uuidT4string = uuidT4string;\r\n+    }\r\n+\r\n+    public String getUuidT4string() {\r\n+        return uuidT4string;\r\n+    }\r\n }\r"},{"sha":"7e90cb0e0d0a3b7705d45103c7e0aa67e1214449","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":83,"deletions":1,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -46,12 +46,16 @@ public void testDefaultValues() {\n \r\n         assertFalse(gv.getId() == gv2.getId());\r\n         assertFalse(gv.getField() == gv2.getField());\r\n+        assertFalse(gv.getUuidstring().equals(gv2.getUuidstring()));\r\n+        assertFalse(gv.getUuidhex().equals(gv2.getUuidhex()));\r\n+        assertFalse(gv.getUuidT4hex().equals(gv2.getUuidT4hex()));\r\n+        assertFalse(gv.getUuidT4string().equals(gv2.getUuidT4string()));\r\n     }\r\n     \r\n     public void testInitialValues() { \r\n         EntityManager em = emf.createEntityManager();\r\n \r\n-        GeneratedValues gv = new GeneratedValues(7, 9);\r\n+        GeneratedValues gv = new GeneratedValues(7, 9, \"a\", \"b\", \"c\", \"d\");\r\n \r\n         try {\r\n             em.getTransaction().begin();\r\n@@ -133,4 +137,82 @@ public void testCustomSequenceGeneratorWithIndirection() {\n \r\n         assertNotEquals(0, gv.getCustomSeqWithIndirectionField());\r\n     }\r\n+    \r\n+    public void testUUIDGenerators() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        GeneratedValues gv = new GeneratedValues();\r\n+        em.getTransaction().begin();\r\n+        em.persist(gv);\r\n+        em.getTransaction().commit();\r\n+        \r\n+        int id = gv.getId();\r\n+\r\n+        assertTrue(isStringUUID(gv.getUuidT4string(), 4));\r\n+        assertTrue(isStringUUID(gv.getUuidstring(), 1));\r\n+        assertTrue(isHexUUID(gv.getUuidhex(), 1));\r\n+        assertTrue(isHexUUID(gv.getUuidT4hex(), 4));     \r\n+        \r\n+        em.clear();\r\n+        \r\n+        GeneratedValues gv2 = em.find(GeneratedValues.class, id);  \r\n+        assertNotNull(gv2);\r\n+        // The string value could contain null values and such so length\r\n+        // calculations may be non-deterministic.  For string generators, \r\n+        // simply ensure the fields are populated (not null). \r\n+        assertNotNull(gv2.getUuidstring());\r\n+        assertTrue(isHexUUID(gv2.getUuidhex(), 1));\r\n+        assertNotNull(gv2.getUuidT4string());\r\n+        assertTrue(isHexUUID(gv2.getUuidT4hex(), 4));     \r\n+        \r\n+        // Compare original hex values with new values.  They should be equal.\r\n+        // Note: UUID 'string' values are not compared.  In most cases they will\r\n+        // be the same, but in an environment where data is converted to\r\n+        // a considerably different character encoding of the database (ex.\r\n+        // Unicode -> EBCDIC) upon persistence, the uuid string returned by the \r\n+        // database may not be equal to the original value.  This is a common \r\n+        // issue with string data, but even more likely for a uuids given that \r\n+        // uuid strings are produced from pseudo-random byte arrays, which yield \r\n+        // all sorts of variant characters.\r\n+        assertTrue(gv.getId() == gv2.getId());\r\n+        assertTrue(gv.getField() == gv2.getField());\r\n+        assertTrue(gv.getUuidhex().equals(gv2.getUuidhex()));\r\n+        assertTrue(gv.getUuidT4hex().equals(gv2.getUuidT4hex()));\r\n+    }\r\n+                \r\n+    /*\r\n+     * Verify a uuid string is 16 characters long and is the expected type.\r\n+     */\r\n+    private boolean isStringUUID(String value, int type) {\r\n+        if (value.length() != 16)\r\n+            return false;\r\n+        byte version = (byte)(value.charAt(6) >>> 4);\r\n+        if (type != version) return false;\r\n+        return true;\r\n+    }\r\n+    \r\n+    /*\r\n+     * Verify a uuid hex string value is 32 characters long, consists entirely\r\n+     * of hex digits and is the correct version.\r\n+     */\r\n+    private boolean isHexUUID(String value, int type) {\r\n+        if (value.length() != 32) \r\n+            return false;\r\n+        char[] chArr = value.toCharArray();\r\n+        for (int i = 0; i < 32; i++)\r\n+        {                \r\n+            char ch = chArr[i];\r\n+            if (!(Character.isDigit(ch) ||\r\n+                (ch >= 'a' && ch <= 'f') ||\r\n+                (ch >= 'A' && ch <= 'F')))\r\n+                return false;\r\n+            if (i == 12) {\r\n+                if (type == 1 && ch != '1')\r\n+                    return false;\r\n+                if (type == 4 && ch != '4')\r\n+                    return false;\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n }\r"},{"sha":"d640e15c1f8b6153aac7e129d10041f4a3e7fdd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -41,6 +41,18 @@\n     @GeneratedValue(generator = \"uuid-hex\")\r\n     @Column(name = \"UUID_HEX\")\r\n     private String uuid;\r\n+    \r\n+    @GeneratedValue(generator = \"uuid-string\")\r\n+    @Column(name = \"UUID_STRING\")\r\n+    private String uuidString;\r\n+\r\n+    @GeneratedValue(generator = \"uuid-type4-hex\")\r\n+    @Column(name = \"UUIDT4_HEX\")\r\n+    private String uuidT4Hex;\r\n+\r\n+    @GeneratedValue(generator = \"uuid-type4-string\")\r\n+    @Column(name = \"UUIDT4_STRING\")\r\n+    private String uuidT4String;\r\n \r\n     @Basic(fetch = FetchType.LAZY)\r\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"system\")\r"},{"sha":"e65be4faa136276fec74a2eab65dcf4faa057788","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -72,6 +72,12 @@ public void testFetchGroups() {\n     public void testValueStrategy() {\r\n         assertEquals(ValueStrategies.UUID_HEX,\r\n             _mapping.getField(\"uuid\").getValueStrategy());\r\n+        assertEquals(ValueStrategies.UUID_STRING,\r\n+            _mapping.getField(\"uuidString\").getValueStrategy());\r\n+        assertEquals(ValueStrategies.UUID_TYPE4_HEX,\r\n+            _mapping.getField(\"uuidT4Hex\").getValueStrategy());\r\n+        assertEquals(ValueStrategies.UUID_TYPE4_STRING,\r\n+            _mapping.getField(\"uuidT4String\").getValueStrategy());\r\n         FieldMapping seq = _mapping.getFieldMapping(\"seq\");\r\n         assertEquals(ValueStrategies.SEQUENCE, seq.getValueStrategy());\r\n         assertEquals(\"system\", seq.getValueSequenceName());\r"},{"sha":"b310a3c740bc7a20c04914f3fa07af381b59b9fe","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -1220,6 +1220,10 @@ private static int getGeneratedValueStrategy(Object context,\n             return ValueStrategies.UUID_HEX;\n         if (Generator.UUID_STRING.equals(generator))\n             return ValueStrategies.UUID_STRING;\n+        if (Generator.UUID_TYPE4_HEX.equals(generator))\n+            return ValueStrategies.UUID_TYPE4_HEX;\n+        if (Generator.UUID_TYPE4_STRING.equals(generator))\n+            return ValueStrategies.UUID_TYPE4_STRING;\n         throw new MetaDataException(_loc.get(\"generator-bad-strategy\",\n             context, generator));\n     }"},{"sha":"7c073b57dbacd2e81dc104de446e7a338e0d5d8d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -29,6 +29,8 @@\n \n     public static final String UUID_HEX = \"uuid-hex\";\n     public static final String UUID_STRING = \"uuid-string\";\n+    public static final String UUID_TYPE4_STRING = \"uuid-type4-string\";\n+    public static final String UUID_TYPE4_HEX = \"uuid-type4-hex\";\n \n     /**\n      * The sequence name."},{"sha":"6f365021defdfede3ad13cabd61aec3cd916c655","filename":"openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"modified","additions":46,"deletions":5,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/fb78813259657a71df227168478c9c0b9e5488ae/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=fb78813259657a71df227168478c9c0b9e5488ae","patch":"@@ -830,7 +830,7 @@ on any field, not just identity fields. Before using the <literal>IDENTITY\n <xref linkend=\"ref_guide_pc_oid_pkgen_autoinc\"/> in the Reference Guide.\n                 </para>\n                 <para>\n-OpenJPA also offers two additional generator strategies for non-numeric fields,\n+OpenJPA also offers additional generator strategies for non-numeric fields,\n which you can access by setting <literal>strategy</literal> to <literal>AUTO\n </literal> (the default), and setting the <literal>generator</literal> string\n to:\n@@ -851,9 +851,9 @@ to:\n                                 uuid-string\n                             </primary>\n                         </indexterm>\n-<literal>uuid-string</literal>: OpenJPA will generate a 128-bit UUID unique\n-within the network, represented as a 16-character string. For more information\n-on UUIDs, see the IETF UUID draft specification at:\n+<literal>uuid-string</literal>: OpenJPA will generate a 128-bit type 1 UUID\n+unique within the network, represented as a 16-character string. For more\n+information on UUIDs, see the IETF UUID draft specification at:\n <ulink url=\"http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/\">\n http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n                         </para>\n@@ -874,7 +874,48 @@ http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n                             </primary>\n                         </indexterm>\n <literal>uuid-hex</literal>: Same as <literal> uuid-string</literal>, but\n-represents the UUID as a 32-character hexadecimal string.\n+represents the type 1 UUID as a 32-character hexadecimal string.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+                        <indexterm>\n+                            <primary>\n+                                mapping metadata\n+                            </primary>\n+                            <secondary>\n+                                uuid-type4-string\n+                            </secondary>\n+                        </indexterm>\n+                        <indexterm>\n+                            <primary>\n+                                uuid-type4-string\n+                            </primary>\n+                        </indexterm>\n+<literal>uuid-type4-string</literal>: OpenJPA will generate a 128-bit type 4\n+pseudo-random UUID, represented as a 16-character string. For more\n+information on UUIDs, see the IETF UUID draft specification at:\n+<ulink url=\"http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/\">\n+http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/</ulink>\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+                        <indexterm>\n+                            <primary>\n+                                mapping metadata\n+                            </primary>\n+                            <secondary>\n+                                uuid-type4-hex\n+                            </secondary>\n+                        </indexterm>\n+                        <indexterm>\n+                            <primary>\n+                                uuid-type4-hex\n+                            </primary>\n+                        </indexterm>\n+<literal>uuid-type4-hex</literal>: Same as <literal> uuid-type4-string</literal>\n+, but represents the type 4 UUID as a 32-character hexadecimal string.\n                         </para>\n                     </listitem>\n                 </itemizedlist>"}]}

