{"sha":"fb7ab1908bfb6afe560f094ab70b9de860280ed0","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiN2FiMTkwOGJmYjZhZmU1NjBmMDk0YWI3MGI5ZGU4NjAyODBlZDA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-12-24T00:18:32Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-12-24T00:18:32Z"},"message":"OPENJPA-557 Primary key sequences broken with postgres schemas\nCommit patch provided by Milosz Tylenda\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@729180 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4a160747a11850b48d4948b8d89d9a8a2f04625","url":"https://api.github.com/repos/apache/openjpa/git/trees/b4a160747a11850b48d4948b8d89d9a8a2f04625"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb7ab1908bfb6afe560f094ab70b9de860280ed0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb7ab1908bfb6afe560f094ab70b9de860280ed0","html_url":"https://github.com/apache/openjpa/commit/fb7ab1908bfb6afe560f094ab70b9de860280ed0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb7ab1908bfb6afe560f094ab70b9de860280ed0/comments","author":null,"committer":null,"parents":[{"sha":"1437517d8cd232d348d3e0b198a3ebae7931114d","url":"https://api.github.com/repos/apache/openjpa/commits/1437517d8cd232d348d3e0b198a3ebae7931114d","html_url":"https://github.com/apache/openjpa/commit/1437517d8cd232d348d3e0b198a3ebae7931114d"}],"stats":{"total":240,"additions":217,"deletions":23},"files":[{"sha":"eb161cafb189aecbd6de27d0b805861c7be3eefc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -113,9 +113,8 @@ public PostgresDictionary() {\n         requiresAliasForSubselect = true;\n         allowsAliasInBulkClause = false;\n \n-        // {2} is the result of getGeneratedKeySequenceName; the\n         // single-quote escape will result in SELECT CURVAL('mysequence')\n-        lastGeneratedKeyQuery = \"SELECT CURRVAL(''{2}'')\";\n+        lastGeneratedKeyQuery = \"SELECT CURRVAL(''{1}_{0}_seq'')\";\n         supportsAutoAssign = true;\n         autoAssignTypeName = \"BIGSERIAL\";\n         nextSequenceQuery = \"SELECT NEXTVAL(''{0}'')\";"},{"sha":"6bf3a734cf425bca2bb57ab44a5380ee298c2618","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -21,9 +21,6 @@\n import javax.persistence.*;\n import java.io.*;\n \n-/**\n- * Extension of Animal class illustrating inheritance.\n- */\n @Entity(name = \"Dog1\")\n @Table(name = \"DOGAUTO\", schema = \"SCHEMA1\")\n public class Dog1 implements Serializable"},{"sha":"2fd255507af0072cffbbdbb5b945880da089201e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -21,9 +21,6 @@\n import javax.persistence.*;\n import java.io.*;\n \n-/**\n- * Extension of Animal class illustrating inheritance.\n- */\n @Entity(name = \"Dog2\")\n @Table(name = \"DOGAUTO\", schema = \"SCHEMA2\")\n public class Dog2 implements Serializable"},{"sha":"9ff1dfcb2e2c929223b71c2a51f18c5fa8a13cc6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog3.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog3.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog3.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity(name = \"Dog3\")\n+@Table(name = \"DOGIDENT\", schema = \"SCHEMA1\")\n+public class Dog3 {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String name;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"7919be60bdc6fe6f7dfba56d47d7651e0a77ec73","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog4.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog4.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog4.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity(name = \"Dog4\")\n+@Table(name = \"DOGIDENT4\")\n+public class Dog4 {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String name;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"32a5f739fef664334d9834ebf343f60163036c87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -22,9 +22,6 @@\n import javax.persistence.*;\n import java.io.*;\n \n-/**\n- * Extension of Animal class illustrating inheritance.\n- */\n @Entity(name = \"DogTable\")\n @Table(name = \"DOGTABLES\", schema = \"SCHEMA1\")\n public class DogTable implements Serializable"},{"sha":"772dd8333da444f134680eb9d146b0dc4ade2d5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -21,9 +21,6 @@\n import java.io.*;\n import javax.persistence.*;\n \n-/**\n- * Extension of Animal class illustrating inheritance.\n- */\n @Entity(name = \"DogTable2\")\n @Table(name = \"DOGTABLES\", schema = \"SCHEMA2\")\n public class DogTable2 implements Serializable"},{"sha":"80ac5eb346de1bce9bfea8d5d46419bf5af7ac32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -21,9 +21,6 @@\n import java.io.*;\r\n import javax.persistence.*;\r\n \r\n-/**\r\n- * Extension of Animal class illustrating inheritance.\r\n- */\r\n @Entity(name = \"DogTable3\")\r\n @Table(name = \"DOGTABLES\", schema = \"SCHEMA3\")\r\n public class DogTable3 implements Serializable\r"},{"sha":"c37d29f231f68b61d1e985aac891a3df8dcf2a69","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -21,9 +21,6 @@\n import java.io.*;\r\n import javax.persistence.*;\r\n \r\n-/**\r\n- * Extension of Animal class illustrating inheritance.\r\n- */\r\n @Entity(name = \"DogTable4\")\r\n @Table(name = \"DOGTABLES4\")\r\n public class DogTable4 implements Serializable\r"},{"sha":"b617cb3eea30a81c6bda0b2f00fd7f164d3b5c22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":114,"deletions":3,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/fb7ab1908bfb6afe560f094ab70b9de860280ed0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=fb7ab1908bfb6afe560f094ab70b9de860280ed0","patch":"@@ -19,15 +19,31 @@\n package org.apache.openjpa.persistence.generationtype;\n \n import java.util.List;\n+\n import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n-import org.apache.openjpa.persistence.*;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestMultipleSchemaNames extends SingleEMFTestCase {\n+\n     public void setUp() {\n-        setUp(Dog1.class, Dog2.class, DogTable.class, DogTable2.class,\n-                DogTable3.class, DogTable4.class);\n+        // Create schemas when database requires this and we are about\n+        // to execute the first test.\n+        if (\"testGeneratedAUTO\".equals(getName())) {\n+            createSchemas();\n+        }\n+\n+        setUp(Dog1.class, Dog2.class, Dog3.class, Dog4.class,\n+            DogTable.class, DogTable2.class, DogTable3.class, DogTable4.class);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -77,6 +93,22 @@ public void setUp() {\n             em.remove(Obj);\n         }\n \n+        Query qry7 = em.createQuery(\"select d from Dog3 d\");\n+        List result7 = qry7.getResultList();\n+\n+        for (int index = 0; index < result7.size(); index++) {\n+            Dog3 Obj = (Dog3) result7.get(index);\n+            em.remove(Obj);\n+        }\n+\n+        Query qry8 = em.createQuery(\"select d from Dog4 d\");\n+        List result8 = qry8.getResultList();\n+\n+        for (int index = 0; index < result8.size(); index++) {\n+            Dog4 Obj = (Dog4) result8.get(index);\n+            em.remove(Obj);\n+        }\n+\n         Query delschema1 = em\n                 .createNativeQuery(\"delete from schema1.openjpa_sequence_table\");\n         delschema1.executeUpdate();\n@@ -321,4 +353,83 @@ public void testGeneratedTABLE() {\n         em.getTransaction().commit();\n         em.close();\n     }\n+    \n+    public void testGeneratedIDENTITY() {\n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+        // Dog3 is a schema dog.\n+        em.getTransaction().begin();\n+        Dog3 dog30 = new Dog3();\n+        dog30.setName(\"Dog30\");\n+        em.persist(dog30);\n+        \n+        Dog3 dog31 = new Dog3();\n+        dog31.setName(\"Dog31\");\n+        em.persist(dog31);\n+        em.getTransaction().commit();\n+\n+        // We can't assume generated values start with 1 as\n+        // the table might have already existed and had some rows.\n+        Dog3 dog30x = em.find(Dog3.class, kem.getObjectId(dog30));\n+        Dog3 dog31x = em.find(Dog3.class, kem.getObjectId(dog31));\n+        assertTrue((dog30x.getId() + 1 == dog31x.getId()) ||\n+            (dog30x.getId() == dog31x.getId() + 1));\n+        assertEquals(dog30x.getName(), \"Dog30\");\n+\n+        // Dog4 is a non-schema dog.\n+        em.getTransaction().begin();\n+        Dog4 dog40 = new Dog4();\n+        dog40.setName(\"Dog40\");\n+        em.persist(dog40);\n+        \n+        Dog4 dog41 = new Dog4();\n+        dog41.setName(\"Dog41\");\n+        em.persist(dog41);\n+        em.getTransaction().commit();\n+\n+        Dog4 dog40x = em.find(Dog4.class, kem.getObjectId(dog40));\n+        Dog4 dog41x = em.find(Dog4.class, kem.getObjectId(dog41));\n+        assertTrue((dog40x.getId() + 1 == dog41x.getId()) ||\n+            (dog40x.getId() == dog41x.getId() + 1));\n+        assertEquals(dog40x.getName(), \"Dog40\");\n+\n+        em.close();\n+    }\n+    \n+    /**\n+     * Create necessary schemas if running on PostgreSQL as it does\n+     * not create them automatically.\n+     * Oracle and MySQL also don't create schemas automatically but\n+     * we give up as they treat schemas in special ways.\n+     */\n+    private void createSchemas() {\n+        OpenJPAEntityManagerFactorySPI emf = createEMF();\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+\n+        if (!(dict instanceof PostgresDictionary)) {\n+            closeEMF(emf);\n+            return;\n+        }\n+        \n+        String[] schemas =\n+            { \"SCHEMA1\", \"SCHEMA2\", \"SCHEMA3\", \"SCHEMA3G\", \"SCHEMA4G\" };\n+        for (String schema : schemas) {\n+            try {\n+                em.getTransaction().begin();\n+                Query q = em.createNativeQuery(\"create schema \" + schema);\n+                q.executeUpdate();\n+                em.getTransaction().commit();\n+            } catch (PersistenceException e) {\n+                System.err.println(\"Exception caught while creating schema \"\n+                    + schema + \". Schema already exists? Message: \"\n+                    + e.getMessage());\n+                em.getTransaction().rollback();\n+            }\n+        }\n+        closeEMF(emf);\n+    }\n+\n } // end of TestMultipleSchemaNames"}]}

