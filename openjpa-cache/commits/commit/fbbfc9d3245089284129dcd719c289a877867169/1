{"sha":"fbbfc9d3245089284129dcd719c289a877867169","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiYmZjOWQzMjQ1MDg5Mjg0MTI5ZGNkNzE5YzI4OWE4Nzc4NjcxNjk=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-04-16T21:24:19Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-04-16T21:24:19Z"},"message":"OPENJPA-2576 fix broken JavaDocs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1674154 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"754c4657326b2991f056b3bca6c7557a609047ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/754c4657326b2991f056b3bca6c7557a609047ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fbbfc9d3245089284129dcd719c289a877867169","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fbbfc9d3245089284129dcd719c289a877867169","html_url":"https://github.com/apache/openjpa/commit/fbbfc9d3245089284129dcd719c289a877867169","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fbbfc9d3245089284129dcd719c289a877867169/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"950ae7ab766ab8121fd808374929c43a107bd30d","url":"https://api.github.com/repos/apache/openjpa/commits/950ae7ab766ab8121fd808374929c43a107bd30d","html_url":"https://github.com/apache/openjpa/commit/950ae7ab766ab8121fd808374929c43a107bd30d"}],"stats":{"total":94,"additions":23,"deletions":71},"files":[{"sha":"84c204e88230b7559406d776694dae1a5da26688","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -619,11 +619,11 @@ public void setParseAnnotationsForQueryMode(boolean parseAnnotationsForQueryMode\n \n     /**\n      * This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the\n-     * \n-     * @PersistentCollection annotation. If the canonical metamodel classes were generated in an early version of\n-     *                       OpenJPA (e.g. 2.0.0, 2.0.1, or 2.1.0) it is recommended to set this property to true. If\n-     *                       you have generated your metamodel classes on later versions of OpenJPA (e.g. 2.2.0) you may\n-     *                       want to have this set to false.\n+     * &#064; PersistentCollection annotation. If the canonical metamodel classes were generated in an early version of\n+     * OpenJPA (e.g. 2.0.0, 2.0.1, or 2.1.0) it is recommended to set this property to true. If\n+     * you have generated your metamodel classes on later versions of OpenJPA (e.g. 2.2.0) you may\n+     * want to have this set to false.\n+     *\n      * @since 2.2.0\n      * @return true if OpenJPA will use ListAttributes for <b>all</b> arrays, false if OpenJPA will use ListAttributes\n      *         for <b>only</b> arrays which use the @PersistentCollection annotation.\n@@ -634,11 +634,10 @@ public boolean getUseListAttributeForArrays() {\n \n     /**\n      * This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the\n-     * \n-     * @PersistentCollection annotation. If the canonical metamodel classes were generated in an early version of\n-     *                       OpenJPA (e.g. 2.0.0, 2.0.1, or 2.1.0) it is recommended to set this property to true. If\n-     *                       you have generated your metamodel classes on later versions of OpenJPA (e.g. 2.2.0) you may\n-     *                       want to have this set to false.\n+     * &#064;PersistentCollection annotation. If the canonical metamodel classes were generated in an early version of\n+     * OpenJPA (e.g. 2.0.0, 2.0.1, or 2.1.0) it is recommended to set this property to true. If\n+     * you have generated your metamodel classes on later versions of OpenJPA (e.g. 2.2.0) you may\n+     * want to have this set to false.\n      * @since 2.2.0\n      * @param useListAttribute\n      *            whether OpenJPA will use ListAttributes for all arrays."},{"sha":"998bd0aca7ead9738e416c262d0ef78b8df284ae","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -1740,49 +1740,48 @@\n     /**\n      * Gets the validation groups for pre-persist\n      * \n-     * @Since 2.0.0\n+     * @since 2.0.0\n      */\n     public String getValidationGroupPrePersist();\n \n     /**\n      * Sets the validation groups for pre-persist\n      * \n-     * @Since 2.0.0\n+     * @since 2.0.0\n      */\n     public void setValidationGroupPrePersist(String vgPrePersist);\n \n     /**\n      * Gets the validation groups for pre-update\n      * \n-     * @Since 2.0.0\n+     * @since 2.0.0\n      */\n     public String getValidationGroupPreUpdate();\n \n     /**\n      * Sets the validation groups for pre-update\n      * \n-     * @Since 2.0.0\n+     * @since 2.0.0\n      */\n     public void setValidationGroupPreUpdate(String vgPreUpdate);\n \n     /**\n      * Gets the validation groups for pre-remove\n      * \n-     * @Since 2.0.0\n+     * @since 2.0.0\n      */\n     public String getValidationGroupPreRemove();\n \n     /**\n      * Sets the validation groups for pre-remove\n      * \n-     * @Since 2.0.0\n+     * @since 2.0.0\n      */\n     public void setValidationGroupPreRemove(String vgPreRemove);\n     \n     /**\n      * Sets the {@link EncryptionProvider}.\n      * \n-     * @param className\n      */\n     public void setEncryptionProvider(String className);\n     "},{"sha":"9e908c38f3b9829f17eb5c5590549ef80e348baa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -476,7 +476,6 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n      * @param found whether the entity was found by the store manager\n      * @param sm the state manager\n      * @param fetch fetch configuration\n-     * @param loadedFieldsChanged\n      */\n     private void updateDataCache(boolean found, OpenJPAStateManager sm, FetchConfiguration fetch,\n         boolean loadedFieldsChanged) {"},{"sha":"23a027cab663eaf5e7f371b68fbb14c8d766ceeb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -1070,7 +1070,6 @@ private void addNotifyAccess(Code code, FieldMetaData fmd) {\n     /**\n      * This must be called after setting the value in the object.\n      * \n-     * @param code\n      * @param val the position in the local variable table where the\n      * old value is stored\n      * @param param the parameter position containing the new value, or"},{"sha":"11cf7a5fd720b386930493d5834cd5245dd144b8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -79,15 +79,12 @@\n     public static synchronized boolean getLoadSuccessful() {\n         return loadSuccessful;\n     }\n-    /**\n-     * @return True if the dynamic agent was disabled via configuration. \n-     */\n+\n     public static void disableDynamicAgent(){\n         disableDynamicAgent=true;\n     }\n     \n     /**\n-     * @param log\n      * @return True if the agent is loaded successfully\n      */\n     public static synchronized boolean loadDynamicAgent(Log log) {"},{"sha":"52cd0fddb29bfb0d3b2f042bedbaa3d41d166ff6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -45,7 +45,7 @@\n     /**\n      * Constructor. Make the callback on an instance of the given type.\n      *\n-     * @arg whether another argument is expected such as AfterDetach\n+     * @param arg whether another argument is expected such as AfterDetach\n      */\n     public BeanLifecycleCallbacks(Class<?> cls, String method, boolean arg,\n         Class<?> type) {"},{"sha":"bce15fa58823331db1b360f4a75330d6f21cce87","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -47,7 +47,7 @@\n     /**\n      * Constructor. Supply callback class and its callback method name.\n      *\n-     * @arg Whether we expect a further argument such as in AfterDetach\n+     * @param arg Whether we expect a further argument such as in AfterDetach\n      */\n     public MethodLifecycleCallbacks(Class cls, String method, boolean arg) {\n         Class[] args = arg ? new Class[]{ Object.class } : null;"},{"sha":"037b32c56c82c894abf9aaf7240939936591f14f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/InstrumentationManagerImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/InstrumentationManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/InstrumentationManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/InstrumentationManagerImpl.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -40,8 +40,6 @@\n     \n     /**\n      * Initializes all providers defined for the specified configuration.\n-     * @param conf\n-     * @param providers\n      */\n     public void initialize(OpenJPAConfiguration conf, PluginListValue pluginVal) {\n         InstrumentationProvider[] providers = \n@@ -52,8 +50,6 @@ public void initialize(OpenJPAConfiguration conf, PluginListValue pluginVal) {\n     /**\n      * Make a provider managed.  This will bind its instrumentation to \n      * InstrumentationLevel type events (factory create/close, broker create/close).\n-     * @param provider\n-     * @param config\n      */\n     public void manageProvider(InstrumentationProvider provider) {\n         _providers.add(provider);"},{"sha":"103f10e30889c1af4a8a9c0385e4048178ee5f17","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/jmx/JMXProvider.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/jmx/JMXProvider.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/jmx/JMXProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/instrumentation/jmx/JMXProvider.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -54,7 +54,6 @@\n \n     /**\n      * Register an MBean with the mbean server.\n-     * @param mBean\n      */\n     protected void registerMBean(JMXInstrument mBean) {\n         Set<MBeanServer> mbs = getMBeanServer(); "},{"sha":"b382b697d244321b2a0888a753bd193e3f3813f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -210,8 +210,6 @@ protected Broker getBroker(PersistenceCapable pc) {\n \t\n \t/**\n \t * Gets an implementation.\n-\t * @param instance\n-\t * @return\n \t */\n \tprivate StateManagerImpl getImpl(Object instance) {\n \t\tif (instance instanceof PersistenceCapable) {\n@@ -229,8 +227,6 @@ private StateManagerImpl getImpl(Object instance) {\n \t/**\n \t * Affirms if the given state manager is auditable for the given operation.\n \t * @param op an auditable operation\n-\t * @param sm\n-\t * @return\n \t */\n \tprotected boolean isAuditable(AuditableOperation op, StateManagerImpl sm) {\n \t\tif (sm == null)"},{"sha":"f8093e001c7a4435c7c5a1f32a5bea756ecf8a07","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -900,8 +900,6 @@ private void fireTransactionEvent(TransactionEvent trans) {\n     /**\n      * Set whether this Broker will generate verbose optimistic lock exceptions when batching\n      * operations. Defaults to true.\n-     * \n-     * @param b\n      */\n     public void setSuppressBatchOLELogging(boolean b) {\n         _suppressBatchOLELogging = b;\n@@ -4602,7 +4600,6 @@ public boolean isDetached(Object obj) {\n     /**\n      * This method makes a best effort to determine if the provided object is detached.\n      * \n-     * @param obj\n      * @param find\n      *            - If true, as a last resort this method will check whether or not the provided object exists in the\n      *            DB. If it is in the DB, the provided object is detached."},{"sha":"f21bf715720d646fa690871dca712a5d7128fcdd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -503,7 +503,6 @@\n      * is a step beyond lazy loading.  Delayed load allows an instance of a field to be \n      * returned without actually loading it.\n      * \n-     * @param field\n      * @return true if the field is setup for delayed access\n      */\n     public boolean isDelayed(int field);\n@@ -513,20 +512,17 @@\n      * is a step beyond lazy loading.  Delayed load allows an instance of a field to be \n      * returned without actually loading it.\n      * \n-     * @param field\n      */\n     public void setDelayed(int field, boolean delay);\n     \n     /**\n      * If a field was marked delayed in a previous load operation this method can be\n      * used to load the field.\n-     * @param field\n      */\n     public void loadDelayedField(int field);\n     \n     /**\n      * Fetch an object field by index.\n-     * @param field\n      */\n     public Object fetchObjectField(int field);\n }"},{"sha":"3511e604c86cc85920efc6e3f9c4ee96032a3949","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -24,7 +24,7 @@\n  * current\ttransaction.\n  *\n  * @author Steve Kim\n- * @author: Abe White\n+ * @author Abe White\n  */\n @SuppressWarnings(\"serial\")\n class PNewProvisionalState"},{"sha":"7304db1db9631313e11b8500aaeb37a5bbfaaf30","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -1647,7 +1647,6 @@ public void setDelayed(int field, boolean delay) {\n \n     /**\n      * Loads a delayed access field.\n-     * @param field\n      */\n     public void loadDelayedField(int field) {\n         if (!isDelayed(field)) {"},{"sha":"4236c92f23ede0b7958440f2f5b68a687d126fa4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -592,23 +592,18 @@ protected static void setImplicitType(Value val, Class<?> expected) {\n \n     /**\n      * Register the schema alias to the current JPQL query context.\n-     * @param alias\n-     * @param meta\n      */\n     protected abstract void addSchemaToContext(String alias,\n         ClassMetaData meta);\n \n     /**\n      * Register the variable associated with the schema alias (id) to\n      * the current JPQL query context.\n-     * @param id\n-     * @param var\n      */\n     protected abstract void addVariableToContext(String id, Value var);\n \n     /**\n      * Returns the variable associated with the schema alias (id).\n-     * @param id\n      */\n     protected abstract Value getVariable(String id);\n }"},{"sha":"40d879df8adbac9db21679272dd4aa8a93932bcf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -102,7 +102,6 @@ public void resetAliasCount() {\n \n     /**\n      * Register the select for this context.\n-     * @param select\n      */\n     public void setSelect(Object select) {\n         this.select = select;\n@@ -117,7 +116,6 @@ public Object getSelect() {\n \n     /**\n      * Register the subquery context in this context.\n-     * @param sub\n      */\n     public void addSubselContext(Context sub) {\n         if (sub == null)\n@@ -177,7 +175,6 @@ public void setSchemas(Map<String,ClassMetaData> schemas) {\n \n     /**\n      * Given an alias and return its associated variable.\n-     * @param alias\n      */\n     public Value getVariable(String alias) {\n         Value variable = alias == null ? null \n@@ -188,7 +185,6 @@ public Value getVariable(String alias) {\n     /**\n      * Given an alias find the context of its associated\n      * variable where it is defined.\n-     * @param alias\n      */\n     public Context findContext(String alias) {\n         Value var = getVariable(alias);\n@@ -214,7 +210,6 @@ public Context findContext(String alias) {\n \n     /**\n      * Given an alias find the variable in JPQL contexts.\n-     * @param alias\n      */\n     public Value findVariable(String alias) {\n         Value var = getVariable(alias);"},{"sha":"f8351dc6b4e6339813d35afe8047b905c8491862","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -57,8 +57,6 @@\n      * Traverse into the gevin xpath name of the current object, and update\n      * the current object to that xpath field.\n      * \n-     * @param meta\n-     * @param name\n      */\n     public void get(XMLMetaData meta, String name);\n     \n@@ -71,7 +69,6 @@\n     /**\n      * Set the schema alias (the identification variable)\n      * this path is begin with.\n-     * @param schemaAlias\n      */\n     public void setSchemaAlias(String schemaAlias);\n         "},{"sha":"32987f0c7a09905c18609dcb5108265a1749f4d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -81,7 +81,6 @@\n     \n     /**\n      * Set reference to the JPQL query contexts.\n-     * @param contexts\n      */\n     public void setContexts(Stack<Context> contexts) {\n         _contexts = contexts;"},{"sha":"30ce7f5bae6e7a158a29571256965afef84a0c72","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AccessCode.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AccessCode.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AccessCode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AccessCode.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -189,7 +189,7 @@ public static int mergeFieldCode(ClassMetaData meta, FieldMetaData fmd,\n      * merge is valid.\n      * \n      * @return the modified class access code.\n-     * @exception if the given codes are not compatible\n+     * @exception IllegalStateException if the given codes are not compatible\n \t */\n \tpublic static int mergeFieldCode(int cCode, int fCode) {\n \t\tif (isValidClassCode(cCode) && isValidFieldCode(fCode)) {"},{"sha":"86b3f47169651d6be25dfbb5e22aaa8a304523f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -1750,7 +1750,7 @@ private boolean isConvertibleToByMethodInvocationConversion(Class<?> sourceType,\n \t}\n \t\n \t/**\n-\t * @return true iff {@sourceType} can be converted by a widening primitive conversion\n+\t * @return true if {@code sourceType} can be converted by a widening primitive conversion\n \t *  following Java Language Specification, 3rd Ed, s5.1.2 \n \t */\n \tprivate boolean isConvertibleToByWideningPrimitive(Class<?> sourceType, Class<?> destType) {"},{"sha":"ca68c3f5cef36a29a30797f89bf8f79e1a7279c4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -221,8 +221,7 @@ public static int getTypeCode(Class<?> type) {\n      * configuration's ClassResolver if the supplied loader cannot find the class.\n      *\n      * @param name Name of the class to load. \n-     * @param context \n-     * @param loader ClassLoader to use. If null, the configuration's ClassResolver will be used. \n+     * @param loader ClassLoader to use. If null, the configuration's ClassResolver will be used.\n      * @param mustExist Whether the supplied loader <b>must</b> be able to load the class. If true no attempt to use a \n      *        different classloader will be made. If false the ClassResolver from the configuration will be used. \n      */"},{"sha":"b6b90cfb97eccebd8140269bfcb42b5abc6ce194","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -2404,7 +2404,6 @@ public boolean equals(Object obj) {\n     /**\n      * Return XML metadata for a given field metadata\n      * \n-     * @param fmd\n      * @return XML metadata\n      */\n     public XMLMetaData getXMLMetaData(Class<?> cls) {\n@@ -2463,8 +2462,6 @@ public XMLMetaData getCachedXMLMetaData(Class<?> cls) {\n     /**\n      * Create a new xml class metadata\n      * \n-     * @param type\n-     * @param name\n      * @return a XMLClassMetaData\n      */\n     protected XMLClassMetaData newXMLClassMetaData(Class<?> type) {\n@@ -2474,9 +2471,6 @@ protected XMLClassMetaData newXMLClassMetaData(Class<?> type) {\n     /**\n      * Create a new xml field meta, add it to the fieldMap in the given xml class metadata\n      * \n-     * @param type\n-     * @param name\n-     * @param meta\n      * @return a XMLFieldMetaData\n      */\n     public XMLFieldMetaData newXMLFieldMetaData(Class<?> type, String name) {"},{"sha":"aafa203cf9688f2c8b20cddc63a9fd4ca88af22d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -37,7 +37,7 @@\n      * Constructor.\n      * \n      * @param type the class that contains XmlType annotation.\n-     * @name  the persistent field name that maps to xml column\n+     * @param name  the persistent field name that maps to xml column\n      */\n     public XMLClassMetaData(Class type, String name) {\n         _type = type;"},{"sha":"abba53f50c7c55f19b56610f44c5efd47a9a75f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -101,7 +101,6 @@\n \n     /**\n      * Set namespace.\n-     * @param namespace\n      */\n     public void setXmlnamespace(String namespace);\n "},{"sha":"edee3633d5309312ec4af58f88a7a6148c04d446","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -144,7 +144,6 @@ public void setAssertAllowedType(boolean assertType) {\n      * is performed that requires them to be loaded.  This property only\n      * applies to proxies that implement java.util.Collection (ie. not arrays\n      * or maps).  Defaults to false.\n-     * @return \n      */\n     public boolean getDelayCollectionLoading() {\n         return _delayedCollectionLoading;"},{"sha":"6295449f195d96137963a9865e8f9c49189cde82","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/fbbfc9d3245089284129dcd719c289a877867169/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java?ref=fbbfc9d3245089284129dcd719c289a877867169","patch":"@@ -42,7 +42,6 @@\n     /**\n      * Constructor which accepts a reference to the validator to use.  If null,\n      * no validation will occur.\n-     * @param validator\n      */\n     public ValidatingLifecycleEventManager() {\n         super();"}]}

