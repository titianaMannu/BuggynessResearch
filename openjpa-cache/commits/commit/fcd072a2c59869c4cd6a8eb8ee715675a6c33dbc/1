{"sha":"fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","node_id":"MDY6Q29tbWl0MjA2MzY0OmZjZDA3MmEyYzU5ODY5YzRjZDZhOGViOGVlNzE1Njc1YTZjMzNkYmM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-14T18:21:19Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-14T18:21:19Z"},"message":"Fixed bug where NamedNativeQuery/NamedNativeQueries was not being examined when looking up named queries, which could result in them not being found if the metadata has not yet been parsed completely\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443432 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b61585bb3900c6c3c24d61a5e942146df23923e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b61585bb3900c6c3c24d61a5e942146df23923e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","html_url":"https://github.com/apache/openjpa/commit/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc/comments","author":null,"committer":null,"parents":[{"sha":"72f7b6b963a533542eeaddaac629481db62ca277","url":"https://api.github.com/repos/apache/openjpa/commits/72f7b6b963a533542eeaddaac629481db62ca277","html_url":"https://github.com/apache/openjpa/commit/72f7b6b963a533542eeaddaac629481db62ca277"}],"stats":{"total":18,"additions":18,"deletions":0},"files":[{"sha":"39e686dbff07407a5b856403eb7dc85453831cdc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=fcd072a2c59869c4cd6a8eb8ee715675a6c33dbc","patch":"@@ -30,6 +30,8 @@\n import javax.persistence.MappedSuperclass;\n import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n \n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -277,6 +279,13 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n                 hasNamedQuery(queryName, ((NamedQueries) cls.getAnnotation\n                     (NamedQueries.class)).value()))\n                 return cls;\n+            if (cls.isAnnotationPresent(NamedNativeQuery.class) && hasNamedNativeQuery\n+                (queryName, (NamedNativeQuery) cls.getAnnotation(NamedNativeQuery.class)))\n+                return cls;\n+            if (cls.isAnnotationPresent(NamedNativeQueries.class) &&\n+                hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.getAnnotation\n+                    (NamedNativeQueries.class)).value()))\n+                return cls;\n         }\n         return null;\n     }\n@@ -289,6 +298,15 @@ private boolean hasNamedQuery(String query, NamedQuery... queries) {\n         return false;\n     }\n \n+    private boolean hasNamedNativeQuery(String query,\n+        NamedNativeQuery... queries) {\n+        for (NamedNativeQuery q : queries) {\n+            if (query.equals(q.name()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     protected MetaDataFilter newMetaDataFilter() {\n         return new ClassAnnotationMetaDataFilter(new Class[]{"}]}

