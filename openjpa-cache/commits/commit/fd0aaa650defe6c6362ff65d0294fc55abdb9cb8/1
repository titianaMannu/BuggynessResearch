{"sha":"fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkMGFhYTY1MGRlZmU2YzYzNjJmZjY1ZDAyOTRmYzU1YWJkYjljYjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-04-20T14:34:48Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-04-20T14:34:48Z"},"message":"OpenJPA-222 and copyright fixes for RC2.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/branches/0.9.7-incubating-RC2@530827 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fef499267d7401cc7d22c853b7ec0badc44a4c79","url":"https://api.github.com/repos/apache/openjpa/git/trees/fef499267d7401cc7d22c853b7ec0badc44a4c79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","html_url":"https://github.com/apache/openjpa/commit/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb71f19c56e2c905cc6dff1c6babc8f8668cc5bd","url":"https://api.github.com/repos/apache/openjpa/commits/fb71f19c56e2c905cc6dff1c6babc8f8668cc5bd","html_url":"https://github.com/apache/openjpa/commit/fb71f19c56e2c905cc6dff1c6babc8f8668cc5bd"}],"stats":{"total":227,"additions":188,"deletions":39},"files":[{"sha":"1fad66c2b831f23a11958b7066a759cdf3acdd79","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":27,"deletions":30,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","patch":"@@ -39,7 +39,7 @@\n     private int db2ServerType = 0;\r\n     private static final int db2ISeriesV5R3AndEarlier = 1;\r\n     private static final int db2UDBV81OrEarlier = 2;\r\n-    private static final int db2ZOSV8x = 3;\r\n+    private static final int db2ZOSV8xOrLater = 3;\r\n     private static final int db2UDBV82AndLater = 4;\r\n     private static final int db2ISeriesV5R4AndLater = 5;\r\n \tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n@@ -195,8 +195,8 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n \t    \t    db2ServerType = db2ISeriesV5R3AndEarlier;\r\n \t    \telse if (isDB2UDBV81OrEarlier(metaData,maj,min))\r\n \t    \t    db2ServerType = db2UDBV81OrEarlier;\r\n-\t    \telse if (isDB2ZOSV8x(metaData,maj))\r\n-\t    \t    db2ServerType = db2ZOSV8x;\r\n+\t    \telse if (isDB2ZOSV8xOrLater(metaData,maj))\r\n+\t    \t    db2ServerType = db2ZOSV8xOrLater;\r\n \t    \telse if (isDB2UDBV82AndLater(metaData,maj,min))\r\n \t    \t    db2ServerType = db2UDBV82AndLater;\r\n \t    \telse if (isDB2ISeriesV5R4AndLater(metaData))\r\n@@ -245,45 +245,38 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n             else\r\n                 isolationLevel = conf.getTransactionIsolationConstant();\r\n \r\n-            if (!forUpdate) {\r\n-                // This sql is not for update so add FOR Read Only clause\r\n-                forUpdateString.append(\" \").append(forReadOnlyClause)\r\n-                    .append(\" \");\r\n-            } else {\r\n-\r\n+            if (forUpdate) {\r\n                 switch(db2ServerType) {\r\n                 case db2ISeriesV5R3AndEarlier:\r\n                 case db2UDBV81OrEarlier:\r\n                     if (isolationLevel ==\r\n                         Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n                         forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(forUpdateOfClause).append(\" \");\r\n-                    } else {\r\n-                        forUpdateString.append(\" \").append(forUpdateOfClause)\r\n-                           .append(\" \");\r\n-                    }\r\n+                            .append(\" \").append(forUpdateOfClause);\r\n+                    } else\r\n+                        forUpdateString.append(\" \").append(forUpdateOfClause);\r\n                     break;\r\n-                case db2ZOSV8x:\r\n+                case db2ZOSV8xOrLater:\r\n                 case db2UDBV82AndLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n-                        forUpdateString.append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRRClause)\r\n+                            .append(\" \").append(useKeepUpdateLockClause);   \r\n                     } else {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRSClause)\r\n+                            .append(\" \").append(useKeepUpdateLockClause);                            \r\n                     }\r\n                     break;\r\n                 case db2ISeriesV5R4AndLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n-                        forUpdateString.append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRRClause)\r\n+                            .append(\" \").append(useKeepExclusiveLockClause);       \r\n                     } else {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRSClause)\r\n+                            .append(\" \").append(useKeepExclusiveLockClause);\r\n                     }\r\n                     break;\r\n                 }\r\n@@ -305,11 +298,11 @@ public boolean isDB2UDBV82AndLater(DatabaseMetaData metadata, int maj,\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8x(DatabaseMetaData metadata, int maj)\r\n+    public boolean isDB2ZOSV8xOrLater(DatabaseMetaData metadata, int maj)\r\n        throws SQLException {\r\n        boolean match = false;\r\n        if (metadata.getDatabaseProductVersion().indexOf(\"DSN\") != -1\r\n-           && maj == 8)\r\n+           && maj >= 8)\r\n            match = true;\r\n         return match;\r\n     }\r\n@@ -414,4 +407,8 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             return sqle.getMessage();\r\n         }\r\n     }\r\n-   }\r\n+\r\n+    public int getDb2ServerType() {\r\n+        return db2ServerType;\r\n+    }\r\n+}\r"},{"sha":"359f88985578f627b0948dc5dc0f4d4ec2aeacef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":79,"deletions":8,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","patch":"@@ -82,18 +82,89 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n                         .getIsolation());\n \n                 q.getResultList();\n+                if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n+                    getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType()== 2)) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField, \"\n+                        + \"t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                        + \" FOR UPDATE OF\");\n+                }\n+\n+                // it is DB2 v82 or later\n+                else if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n+                    getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType() == 4)) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField, \"\n+                        + \"t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\");\n+                }\n+\n+                else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n+                    getDb2ServerType() == 5){\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField, \"\n+                        + \"t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE \" \n+                        + \"LOCKS\");\n+                }    \n+                else if (dict instanceof DB2Dictionary) {\n+                    fail(\"OpenJPA currently only supports per-query isolation \" \n+                    + \"level configuration on the following databases: DB2\");\n+                }\n             } else {\n                 ((JDBCFetchPlan) em.getFetchPlan())\n                     .setIsolation(IsolationLevel.SERIALIZABLE);\n                 em.find(AllFieldTypes.class, 0);\n-            }\n-\n-            if (dict instanceof DB2Dictionary) {\n-                assertEquals(1, sql.size());\n-                assertSQL(\".*DB2-specific SQL to test for goes here.*\");\n-            } else {\n-                fail(\"OpenJPA currently only supports per-query isolation \" +\n-                    \"level configuration on the following databases: DB2\");\n+                if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n+                    getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType()== 2)) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR UPDATE OF optimize for 1 row\");\n+                }\n+                // it is DB2 v82 or later\n+                else if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n+                    getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType() == 4)) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n+                        + \" optimize for 1 row\");\n+                }\n+                else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n+                    getDb2ServerType() == 5) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE LOCKS\"\n+                        + \" optimize for 1 row\");\n+                }    \n+                else if (dict instanceof DB2Dictionary) {\n+                    fail(\"OpenJPA currently only supports per-query isolation \" \n+                    + \"level configuration on the following databases: DB2\");\n+                }\n             }\n         } catch (InvalidStateException pe) {\n             // if we're not using DB2, we expect an InvalidStateException."},{"sha":"b73c61dd2057647caed4aceb27304f9ef7bdb83d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":40,"deletions":1,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -58,7 +59,45 @@ public void testSelectForUpdateOverride() {\n             em.find(AllFieldTypes.class, 0);\n \n             assertEquals(1, sql.size());\n-            assertSQL(\".*FOR UPDATE.*\");\n+            if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n+                getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n+                    .getDb2ServerType()== 2)) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                    + \" t0.floatField, t0.intField, t0.longField,\"\n+                    + \" t0.shortField, t0.stringField FROM \"\n+                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    + \" FOR UPDATE OF optimize for 1 row\");\n+            }\n+            // it is DB2 v82 or later\n+            else if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n+                getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n+                    .getDb2ServerType() == 4)) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                    + \" t0.floatField, t0.intField, t0.longField,\"\n+                    + \" t0.shortField, t0.stringField FROM \"\n+                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n+                    + \" optimize for 1 row\");\n+            }\n+            else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n+                getDb2ServerType() == 5) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                    + \" t0.floatField, t0.intField, t0.longField,\"\n+                    + \" t0.shortField, t0.stringField FROM \"\n+                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n+                    + \" optimize for 1 row\");\n+            }    \n+            else if (dict instanceof DB2Dictionary) {\n+                fail(\"OpenJPA currently only supports per-query isolation \" +\n+                \"level configuration on the following databases: DB2\");\n+            }\n         } finally {\n             em.getTransaction().rollback();\n             em.close();"},{"sha":"5b430ef9cfb24f1305bce0c72d84691bd6196669","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml?ref=fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","patch":"@@ -1,5 +1,22 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n <entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\""},{"sha":"200c3a5ce485150217fa2d57b3f3814739066f27","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","patch":"@@ -60,6 +60,7 @@ project's issue tracker at http://issues.apache.org/jira/browse/OPENJPA\n     * [OPENJPA-202] - after invoking LRS processing in a client by calling an @LRS annotated relationship, the next em.clear()/em.close() gets org.apache.openjpa.persistence.InvalidStateException: You cannot transfer large result set fields from one object or field to another\n     * [OPENJPA-208] - NoResultException and NonUniqueResultException are not thrown when expected\n     * [OPENJPA-214] - Need to support floating point primary keys\n+    * [OPENJPA-222] - FOR READ ONLY clause getting generated for subselects\n \n ** Improvements\n     * [OPENJPA-10] - persistence unit name should be default diagnostic context for standard OpenJPA log impl"},{"sha":"20f2a4135e0353901672022eb65b0cb91057e3cd","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/fd0aaa650defe6c6362ff65d0294fc55abdb9cb8/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=fd0aaa650defe6c6362ff65d0294fc55abdb9cb8","patch":"@@ -5,6 +5,7 @@ <h1>Release Notes for OpenJPA - 0.9.7</h1>\n \n <ul>\n <li><a href=\"#Overview\">Overview</a></li>\n+<li><a href=\"#License\">License</a></li>\n <li><a href=\"#Prerequisites\">Prerequisites</a></li>\n <li><a href=\"#Documentation\">Documentation</a></li>\n <li><a href=\"#GetInvolved\">Getting Involved</a></li>\n@@ -33,6 +34,28 @@ <h2><a name=\"Overview\"></a>Overview</h2>\n site: <a href=\"http://incubator.apache.org/openjpa/\">\n http://incubator.apache.org/openjpa/</a>\n \n+<h2><a name=\"License\"></a>License</h2>\n+<P>Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+<BR><P><a href=\"http://www.apache.org/licenses/LICENSE-2.0\">\n+http://www.apache.org/licenses/LICENSE-2.0</a>\n+\n+<BR><P>Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+<BR><P>The license may also be found in LICENSE.txt which is included \n+in each release of OpenJPA. \n+\n <h2><a name=\"Prerequisites\"></a>Prerequisites</h2>\n <P>\n OpenJPA requires Java 1.5 but will not compile with Java 6. For more\n@@ -135,6 +158,7 @@ <h2><a name=\"Bugs\"</a>Bugs</h2>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-202'>OPENJPA-202</a>] - after invoking LRS processing in a client by calling an @LRS annotated relationship, the next em.clear()/em.close() gets org.apache.openjpa.persistence.InvalidStateException: You cannot transfer large result set fields from one object or field to another</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-208'>OPENJPA-208</a>] - NoResultException and NonUniqueResultException are not thrown when expected</li>\n <li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-214'>OPENJPA-214</a>] - Need to support floating point primary keys</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-214'>OPENJPA-222</a>] - FOR READ ONLY clause getting generated for subselects</li>\n </ul>\n     \n <h2><a name=\"Improvements\"</a>Improvements</h2>"}]}

