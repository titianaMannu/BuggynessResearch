{"sha":"fd0e25dae6c3e61c043b6063e8bd617a93387946","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkMGUyNWRhZTZjM2U2MWMwNDNiNjA2M2U4YmQ2MTdhOTMzODc5NDY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-19T16:33:08Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-19T16:33:08Z"},"message":"Expand Column.isCompatible method parameters to also take type name and \ndecimal digits so that DynamicSchemaFactory can set this information when\nbuilding up its internal schema representation.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@497866 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ce935aa75d74268ab4bf8a54b1135d7d360fded","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ce935aa75d74268ab4bf8a54b1135d7d360fded"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd0e25dae6c3e61c043b6063e8bd617a93387946","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd0e25dae6c3e61c043b6063e8bd617a93387946","html_url":"https://github.com/apache/openjpa/commit/fd0e25dae6c3e61c043b6063e8bd617a93387946","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd0e25dae6c3e61c043b6063e8bd617a93387946/comments","author":null,"committer":null,"parents":[{"sha":"6b78680b274b6c1109d269f9472f8659d6e65f84","url":"https://api.github.com/repos/apache/openjpa/commits/6b78680b274b6c1109d269f9472f8659d6e65f84","html_url":"https://github.com/apache/openjpa/commit/6b78680b274b6c1109d269f9472f8659d6e65f84"}],"stats":{"total":29,"additions":19,"deletions":10},"files":[{"sha":"f48e88cd523cc277bb93634416c848dbffcb3c2d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=fd0e25dae6c3e61c043b6063e8bd617a93387946","patch":"@@ -608,7 +608,8 @@ else if (dotIdx != -1) {\n             // the expected column type\n             if (given.getType() != Types.OTHER) {\n                 ttype = false;\n-                if (compat && !given.isCompatible(type, size)) {\n+                if (compat && !given.isCompatible(type, typeName, size, \n+                    decimals)) {\n                     Log log = repos.getLog();\n                     if (log.isWarnEnabled())\n                         log.warn(_loc.get(prefix + \"-incompat-col\",\n@@ -643,7 +644,8 @@ else if (dotIdx != -1) {\n         if (col == null) {\n             col = table.addColumn(colName);\n             col.setType(type);\n-        } else if ((compat || !ttype) && !col.isCompatible(type, size)) {\n+        } else if ((compat || !ttype) && !col.isCompatible(type, typeName, \n+            size, decimals)) {\n             // if existing column isn't compatible with desired type, die if\n             // can't adapt, else warn and change the existing column type\n             Message msg = _loc.get(prefix + \"-bad-col\", context,"},{"sha":"537a046ab407dbe6ee4954a98787b51e3e416830","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=fd0e25dae6c3e61c043b6063e8bd617a93387946","patch":"@@ -1085,7 +1085,7 @@ private void mapBaseClass(Table table) {\n         Column[] pks = table.getPrimaryKey().getColumns();\n         cls.setPrimaryKeyColumns(pks);\n         if (pks.length == 1 && _datastore\n-            && pks[0].isCompatible(Types.BIGINT, 0)) {\n+            && pks[0].isCompatible(Types.BIGINT, null, 0, 0)) {\n             cls.setObjectIdType(null, false);\n             cls.setIdentityType(ClassMapping.ID_DATASTORE);\n         } else if (pks.length == 1 && _builtin)"},{"sha":"dd887d6aefba04663b81cc81feda23daed72b092","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=fd0e25dae6c3e61c043b6063e8bd617a93387946","patch":"@@ -548,7 +548,8 @@ public boolean isLob() {\n      * Return true if this column is compatible with the given JDBC type\n      * from {@link Types} and size.\n      */\n-    public boolean isCompatible(int type, int size) {\n+    public boolean isCompatible(int type, String typeName, int size, \n+        int decimals) {\n         if (type == Types.OTHER || getType() == Types.OTHER)\n             return true;\n \n@@ -662,7 +663,8 @@ public boolean equalsColumn(Column col) {\n \n         if (!getFullName().equalsIgnoreCase(col.getFullName()))\n             return false;\n-        if (!isCompatible(col.getType(), col.getSize()))\n+        if (!isCompatible(col.getType(), col.getTypeName(), col.getSize(),\n+            col.getDecimalDigits()))\n             return false;\n         if (getType() == Types.VARCHAR && getSize() > 0 && col.getSize() > 0\n             && getSize() != col.getSize())"},{"sha":"c7fff697d0e5245c8a330691b54304b9f0d1f65b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=fd0e25dae6c3e61c043b6063e8bd617a93387946","patch":"@@ -129,14 +129,19 @@ public DynamicColumn(String name, Table table) {\n             super(name, table);\n         }\n \n-        public boolean isCompatible(int type, int size) {\n+        public boolean isCompatible(int type, String typeName, int size,\n+            int decimals) {\n             if (getType() != Types.OTHER)\n-                return super.isCompatible(type, size);\n+                return super.isCompatible(type, typeName, size, decimals);\n \n             if (type == Types.VARCHAR && size <= 0)\n                 size = _dict.characterColumnSize;\n             setType(type);\n             setSize(size);\n+            if (typeName != null)\n+                setTypeName(typeName);\n+            if (decimals >= 0)\n+                setDecimalDigits(decimals);\n             return true;\n         }\n     }"},{"sha":"b5e9782f4da86ec8cc9fc9ec46de742a81eb4696","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fd0e25dae6c3e61c043b6063e8bd617a93387946/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=fd0e25dae6c3e61c043b6063e8bd617a93387946","patch":"@@ -751,7 +751,7 @@ public void setAsciiStream(PreparedStatement stmnt, int idx,\n     public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n         Column col)\n         throws SQLException {\n-        if ((col != null && col.isCompatible(Types.VARCHAR, 0))\n+        if ((col != null && col.isCompatible(Types.VARCHAR, null, 0, 0))\n             || (col == null && storeLargeNumbersAsStrings))\n             setString(stmnt, idx, val.toString(), col);\n         else\n@@ -764,7 +764,7 @@ public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n     public void setBigInteger(PreparedStatement stmnt, int idx, BigInteger val,\n         Column col)\n         throws SQLException {\n-        if ((col != null && col.isCompatible(Types.VARCHAR, 0))\n+        if ((col != null && col.isCompatible(Types.VARCHAR, null, 0, 0))\n             || (col == null && storeLargeNumbersAsStrings))\n             setString(stmnt, idx, val.toString(), col);\n         else\n@@ -833,7 +833,7 @@ public void setBytes(PreparedStatement stmnt, int idx, byte[] val,\n      */\n     public void setChar(PreparedStatement stmnt, int idx, char val, Column col)\n         throws SQLException {\n-        if ((col != null && col.isCompatible(Types.INTEGER, 0))\n+        if ((col != null && col.isCompatible(Types.INTEGER, null, 0, 0))\n             || (col == null && storeCharsAsNumbers))\n             setInt(stmnt, idx, (int) val, col);\n         else"}]}

