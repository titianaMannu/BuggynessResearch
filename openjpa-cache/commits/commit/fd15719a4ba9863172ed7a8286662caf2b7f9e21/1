{"sha":"fd15719a4ba9863172ed7a8286662caf2b7f9e21","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkMTU3MTlhNGJhOTg2MzE3MmVkN2E4Mjg2NjYyY2FmMmI3ZjllMjE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-08-15T19:04:25Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-08-15T19:04:25Z"},"message":"Eagerly compile JPQL queries to catch JPQL errors and throw proper exception as\nrequired by spec.  OPENJPA-678\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@686325 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f098f88824d2b3346db5ea2aa059b12c9fe5477b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f098f88824d2b3346db5ea2aa059b12c9fe5477b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd15719a4ba9863172ed7a8286662caf2b7f9e21","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd15719a4ba9863172ed7a8286662caf2b7f9e21","html_url":"https://github.com/apache/openjpa/commit/fd15719a4ba9863172ed7a8286662caf2b7f9e21","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd15719a4ba9863172ed7a8286662caf2b7f9e21/comments","author":null,"committer":null,"parents":[{"sha":"d5820cb4c62dd7ca76d962a145b850b995e23662","url":"https://api.github.com/repos/apache/openjpa/commits/d5820cb4c62dd7ca76d962a145b850b995e23662","html_url":"https://github.com/apache/openjpa/commit/d5820cb4c62dd7ca76d962a145b850b995e23662"}],"stats":{"total":73,"additions":45,"deletions":28},"files":[{"sha":"e0b0910dcf90c1a37814050774ef57baac08eec6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=fd15719a4ba9863172ed7a8286662caf2b7f9e21","patch":"@@ -160,22 +160,14 @@ public void testErrorCodeConfigurationHasAllKnownDictionaries() {\n \t}\r\n \t\r\n \t/**\r\n-\t * Invalid query does not throw IllegalArgumentException on construction \r\n-\t * as per JPA spec. The exception is thrown during execution.\r\n-\t * \r\n-\t * A patch\r\n-\t * <A HREF=\"http://issues.apache.org/jira/browse/OPENJPA-678\">OPENJPA-678</A>\r\n-\t * by Xiaoqin Feng has proposed eager compilation of the query to raise the\r\n-\t * error before execution and as per JPA spec. \r\n-\t * However, this patch has not yet been applied as eagerly compiling query\r\n-\t * has other side-effects. \r\n-\t * \r\n+\t * Invalid query throws IllegalArgumentException on construction \r\n+\t * as per JPA spec.\r\n \t */\r\n \tpublic void testIllegalArgumennExceptionOnInvalidQuery() {\r\n \t    EntityManager em = emf.createEntityManager();\r\n-\t    Query query = em.createQuery(\"This is not a valid JPQL query\");\r\n \t    try {\r\n-\t\t   query.getResultList();\r\n+\t      em.createQuery(\"This is not a valid JPQL query\");\r\n+        fail(\"Did not throw IllegalArgumentException for invalid query.\");\r\n \t    } catch (Throwable t) {\r\n \t\t   assertException(t, IllegalArgumentException.class);\r\n \t    }\r"},{"sha":"c6332fca3380e12df6be681081c14b77fb2ab662","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=fd15719a4ba9863172ed7a8286662caf2b7f9e21","patch":"@@ -18,6 +18,11 @@\n  */\n package org.apache.openjpa.persistence.test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.lang.reflect.Modifier;\n import java.sql.SQLException;\n import java.util.ArrayList;\n@@ -302,6 +307,20 @@ else if (o1 == null || o2 == null)\n         else if (o1.equals(o2))\n             fail(\"expected args to be different; compared equal.\");\n     }\n+\n+    /**\n+     * Round-trip a serializable object to bytes.\n+     */\n+    public static Object roundtrip(Object o) \n+        throws ClassNotFoundException, IOException {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bytes);\n+        out.writeObject(o);\n+        out.flush();\n+        ObjectInputStream in = new ObjectInputStream(\n+            new ByteArrayInputStream(bytes.toByteArray()));\n+        return in.readObject();\n+    }\n     \n     // ================================================ \n     // Utility methods for exception handling"},{"sha":"3e87c6e16dd38ce0433855db72f90f4b060fbcb3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=fd15719a4ba9863172ed7a8286662caf2b7f9e21","patch":"@@ -87,7 +87,7 @@\n     private Map<FetchConfiguration,FetchPlan> _plans =\r\n         new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\r\n \r\n-    private RuntimeExceptionTranslator ret =\r\n+    private RuntimeExceptionTranslator _ret =\r\n         PersistenceExceptions.getRollbackTranslator(this);\r\n \r\n     public EntityManagerImpl() {\r\n@@ -104,8 +104,8 @@ public EntityManagerImpl(EntityManagerFactoryImpl factory,\n \r\n     private void initialize(EntityManagerFactoryImpl factory, Broker broker) {\r\n         _emf = factory;\r\n-        _broker = new DelegatingBroker(broker, ret);\r\n-        _broker.setImplicitBehavior(this, ret);\r\n+        _broker = new DelegatingBroker(broker, _ret);\r\n+        _broker.setImplicitBehavior(this, _ret);\r\n     }\r\n \r\n     /**\r\n@@ -867,15 +867,24 @@ public OpenJPAQuery createQuery(String query) {\n \r\n     public OpenJPAQuery createQuery(String language, String query) {\r\n         assertNotCloseInvoked();\r\n-        return new QueryImpl(this, ret, _broker.newQuery(language, query));\r\n+        try {\r\n+            org.apache.openjpa.kernel.Query q = _broker.newQuery(language, \r\n+                query);\r\n+            // have to validate JPQL according to spec\r\n+            if (JPQLParser.LANG_JPQL.equals(language))\r\n+                q.compile(); \r\n+            return new QueryImpl(this, _ret, q);\r\n+        } catch (RuntimeException re) {\r\n+            throw PersistenceExceptions.toPersistenceException(re);\r\n+        }\r\n     }\r\n \r\n     public OpenJPAQuery createQuery(Query query) {\r\n         if (query == null)\r\n             return createQuery((String) null);\r\n         assertNotCloseInvoked();\r\n         org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\r\n-        return new QueryImpl(this, ret, _broker.newQuery(q.getLanguage(),\r\n+        return new QueryImpl(this, _ret, _broker.newQuery(q.getLanguage(),\r\n             q));\r\n     }\r\n \r\n@@ -891,7 +900,7 @@ public OpenJPAQuery createNamedQuery(String name) {\n             meta.setInto(del);\r\n             del.compile();\r\n \r\n-            OpenJPAQuery q = new QueryImpl(this, ret, del);\r\n+            OpenJPAQuery q = new QueryImpl(this, _ret, del);\r\n             String[] hints = meta.getHintKeys();\r\n             Object[] values = meta.getHintValues();\r\n             for (int i = 0; i < hints.length; i++)\r\n@@ -917,7 +926,7 @@ public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n         org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\r\n             QueryLanguages.LANG_SQL, query);\r\n         kernelQuery.setResultMapping(null, mappingName);\r\n-        return new QueryImpl(this, ret, kernelQuery);\r\n+        return new QueryImpl(this, _ret, kernelQuery);\r\n     }\r\n \r\n     /**\r\n@@ -1235,7 +1244,7 @@ public boolean equals(Object other) {\n     public void readExternal(ObjectInput in)\r\n         throws IOException, ClassNotFoundException {\r\n         try {\r\n-            ret = PersistenceExceptions.getRollbackTranslator(this);\r\n+            _ret = PersistenceExceptions.getRollbackTranslator(this);\r\n \r\n             // this assumes that serialized Brokers are from something\r\n             // that extends AbstractBrokerFactory.\r\n@@ -1254,7 +1263,7 @@ public void readExternal(ObjectInput in)\n             initialize(emf, broker);\r\n         } catch (RuntimeException re) {\r\n             try {\r\n-                re = ret.translate(re);\r\n+                re = _ret.translate(re);\r\n             } catch (Exception e) {\r\n                 // ignore\r\n             }\r\n@@ -1276,7 +1285,7 @@ public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeObject(baos.toByteArray());\r\n         } catch (RuntimeException re) {\r\n             try {\r\n-                re = ret.translate(re);\r\n+                re = _ret.translate(re);\r\n             } catch (Exception e) {\r\n                 // ignore\r\n             }\r"},{"sha":"d49c1d6561d8be4d1267adf96523158357c08f83","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fd15719a4ba9863172ed7a8286662caf2b7f9e21/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=fd15719a4ba9863172ed7a8286662caf2b7f9e21","patch":"@@ -79,12 +79,9 @@\n \t/**\n \t * Constructor; supply factory exception translator and delegate.\n \t * \n-\t * @param em\n-\t *            The EntityManager which created this query\n-\t * @param ret\n-\t *            Exception translater for this query\n-\t * @param query\n-\t *            The underlying \"kernel\" query.\n+\t * @param em  The EntityManager which created this query\n+\t * @param ret Exception translater for this query\n+\t * @param query The underlying \"kernel\" query.\n \t */\n \tpublic QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n \t\t\torg.apache.openjpa.kernel.Query query) {"}]}

