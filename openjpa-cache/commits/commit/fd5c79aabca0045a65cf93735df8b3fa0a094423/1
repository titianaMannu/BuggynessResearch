{"sha":"fd5c79aabca0045a65cf93735df8b3fa0a094423","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkNWM3OWFhYmNhMDA0NWE2NWNmOTM3MzVkZjhiM2ZhMGEwOTQ0MjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-15T16:15:21Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-15T16:15:21Z"},"message":"OPENJPA-1050: Restore existing method signature but deprecate them.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@890857 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e3ed273eef1e278dfceccc15ce8ce511e718eb03","url":"https://api.github.com/repos/apache/openjpa/git/trees/e3ed273eef1e278dfceccc15ce8ce511e718eb03"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423","html_url":"https://github.com/apache/openjpa/commit/fd5c79aabca0045a65cf93735df8b3fa0a094423","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd5c79aabca0045a65cf93735df8b3fa0a094423/comments","author":null,"committer":null,"parents":[{"sha":"de8d125575ea342d71e11671701e7e25d7353353","url":"https://api.github.com/repos/apache/openjpa/commits/de8d125575ea342d71e11671701e7e25d7353353","html_url":"https://github.com/apache/openjpa/commit/de8d125575ea342d71e11671701e7e25d7353353"}],"stats":{"total":67,"additions":49,"deletions":18},"files":[{"sha":"119d0731f7c80844bd04482b8179b84b9267ea18","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -468,7 +468,11 @@ public boolean hasGrouping(StoreQuery q) {\n             return _ex.hasGrouping(unwrap(q));\n         }\n \n-        public OrderedMap<Object, Class<?>> getParameterTypes(StoreQuery q) {\n+        public OrderedMap<Object, Class<?>> getOrderedParameterTypes(StoreQuery q) {\n+            return _ex.getOrderedParameterTypes(unwrap(q));\n+        }\n+        \n+        public LinkedMap getParameterTypes(StoreQuery q) {\n             return _ex.getParameterTypes(unwrap(q));\n         }\n         "},{"sha":"efbe9cffbc80c20bd6e60a387f9b5e35e6b256b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -266,7 +266,7 @@ private static boolean setParams(QueryKey key, QueryContext q,\n         // Create a map for the given parameters, and convert the\n         // parameter list into a map, using the query's parameter\n         // declaration to determine ordering etc.\n-        Map types = q.getParameterTypes();\n+        Map types = q.getOrderedParameterTypes();\n         Map map = new HashMap((int) (types.size() * 1.33 + 1));\n         int idx = 0;\n         for (Iterator iter = types.keySet().iterator(); iter.hasNext(); idx++)"},{"sha":"ecf5199c20a078e6574fcd13e517b9c274045e51","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -24,8 +24,10 @@\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UnsupportedException;\n \n@@ -35,6 +37,7 @@\n  * @author Abe White\n  * @since 0.4.0\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class AbstractStoreQuery\n     implements StoreQuery {\n \n@@ -166,7 +169,7 @@ public String getAlias(StoreQuery q) {\n             return EMPTY_STRINGS;\n         }\n \n-        public Class[] getProjectionTypes(StoreQuery q) {\n+        public Class<?>[] getProjectionTypes(StoreQuery q) {\n             return EMPTY_CLASSES;\n         }\n \n@@ -186,15 +189,21 @@ public boolean hasGrouping(StoreQuery q) {\n             return false;\n         }\n \n-        public OrderedMap<Object,Class<?>> getParameterTypes(StoreQuery q) {\n-            return EMPTY_PARAMS;\n+        public OrderedMap<Object,Class<?>> getOrderedParameterTypes(StoreQuery q) {\n+            return EMPTY_ORDERED_PARAMS;\n+        }\n+        \n+        public LinkedMap getParameterTypes(StoreQuery q) {\n+            LinkedMap result = new LinkedMap();\n+            result.putAll(getOrderedParameterTypes(q));\n+            return result;\n         }\n \n-        public Class getResultClass(StoreQuery q) {\n+        public Class<?> getResultClass(StoreQuery q) {\n             return null;\n         }\n \n-        public Map getUpdates(StoreQuery q) {\n+        public Map<FieldMetaData,Value> getUpdates(StoreQuery q) {\n             return null;\n         }\n     }"},{"sha":"2ac2d6673ec39b14271413cdc9031a750f98fca5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Map;\n \n+import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.util.OrderedMap;\n@@ -382,7 +383,15 @@ public String getParameterDeclaration() {\n         }\n     }\n \n-    public OrderedMap<Object,Class<?>> getParameterTypes() {\n+    public OrderedMap<Object,Class<?>> getOrderedParameterTypes() {\n+        try {\n+            return _query.getOrderedParameterTypes();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public LinkedMap getParameterTypes() {\n         try {\n             return _query.getParameterTypes();\n         } catch (RuntimeException re) {"},{"sha":"09d6b4419fcb7ad8288ea420f35be2cd70273df1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -387,7 +387,7 @@ public final boolean hasGrouping(StoreQuery q) {\n             return assertQueryExpression().grouping.length > 0;\n         }\n \n-        public final OrderedMap<Object,Class<?>> getParameterTypes(StoreQuery q) {\n+        public final OrderedMap<Object,Class<?>> getOrderedParameterTypes(StoreQuery q) {\n             return assertQueryExpression().parameterTypes;\n         }\n \n@@ -398,7 +398,7 @@ public final boolean hasGrouping(StoreQuery q) {\n             if (userParams == null || userParams.isEmpty())\n                 return StoreQuery.EMPTY_OBJECTS;\n \n-            OrderedMap<?,Class<?>> paramTypes = getParameterTypes(q);\n+            OrderedMap<?,Class<?>> paramTypes = getOrderedParameterTypes(q);\n             Object[] arr = new Object[userParams.size()];\n             int base = positionalParameterBase(userParams.keySet());\n             for (Object key : paramTypes.keySet()) {"},{"sha":"710cca2525fbc718686c36449d9e467c6fb30e60","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -103,7 +103,7 @@ public boolean requiresCandidateType() {\n                 return _params;\n             String params = ctx.getParameterDeclaration();\n             if (params == null)\n-                return EMPTY_PARAMS;\n+                return EMPTY_ORDERED_PARAMS;\n \n             List decs = Filters.parseDeclaration(params, ',', \"parameters\");\n             if (_params == null)\n@@ -150,7 +150,7 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n             if (params.length == 0)\n                 paramMap = Collections.EMPTY_MAP;\n             else {\n-                Map paramTypes = q.getContext().getParameterTypes();\n+                Map paramTypes = q.getContext().getOrderedParameterTypes();\n                 paramMap = new HashMap((int) (params.length * 1.33 + 1));\n                 int idx = 0;\n                 for (Iterator itr = paramTypes.keySet().iterator();\n@@ -260,15 +260,15 @@ public void validate(StoreQuery q) {\n             _meth = meth;\n         }\n \n-        public OrderedMap<Object, Class<?>> getParameterTypes(StoreQuery q) {\n+        public OrderedMap<Object, Class<?>> getOrderedParameterTypes(StoreQuery q) {\n             return ((MethodStoreQuery) q).bindParameterTypes();\n \t\t}\n         \n         public Object[] toParameterArray(StoreQuery q, Map userParams) {\n             if (userParams == null || userParams.isEmpty())\n                 return StoreQuery.EMPTY_OBJECTS;\n \n-            OrderedMap<Object, Class<?>> paramTypes = getParameterTypes(q);\n+            OrderedMap<Object, Class<?>> paramTypes = getOrderedParameterTypes(q);\n             Object[] arr = new Object[userParams.size()];\n             int base = positionalParameterBase(userParams.keySet());\n             for (Object key : paramTypes.keySet()) {"},{"sha":"985547e2c6ecae90b8316be4c5852e3fc6833cff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Map;\n \n+import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.FilterListener;\n@@ -183,7 +184,15 @@\n      * map will iterate in the order that the parameters were declared or,\n      * if they're implicit, used.\n      */\n-    public OrderedMap<Object,Class<?>> getParameterTypes();\n+    public OrderedMap<Object,Class<?>> getOrderedParameterTypes();\n+    \n+    /**\n+     * Return a map of parameter name to type for this query. The returned\n+     * map will iterate in the order that the parameters were declared or,\n+     * if they're implicit, used.\n+     */\n+    @Deprecated\n+    public LinkedMap getParameterTypes();\n \n     /**\n      * If this query is a bulk update, return a map of the"},{"sha":"79c9ae00f15d2d5d18b2339a3d59842db5581454","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -67,7 +67,7 @@\n     public boolean[] ascending = StoreQuery.EMPTY_BOOLEANS;\n     public String[] orderingClauses = StoreQuery.EMPTY_STRINGS;\n     public String[] orderingAliases = StoreQuery.EMPTY_STRINGS;\n-    public OrderedMap<Object,Class<?>> parameterTypes = StoreQuery.EMPTY_PARAMS;\n+    public OrderedMap<Object,Class<?>> parameterTypes = StoreQuery.EMPTY_ORDERED_PARAMS;\n     public int operation = QueryOperations.OP_SELECT;\n     public ClassMetaData[] accessPath = StoreQuery.EMPTY_METAS;\n     public String[] fetchPaths = StoreQuery.EMPTY_STRINGS;"},{"sha":"5361b77dd3df20f0e82647ff56558532f27507f8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -969,7 +969,7 @@ public Object getParameterValue(int pos) {\n     public Map<Object, Parameter<?>> getDeclaredParameters() {\n         if (_declaredParams == null) {\n             _declaredParams = new HashMap<Object, Parameter<?>>();\n-            OrderedMap<Object,Class<?>> paramTypes = _query.getParameterTypes();\n+            OrderedMap<Object,Class<?>> paramTypes = _query.getOrderedParameterTypes();\n             for (Object key : paramTypes.keySet()) {\n                 Parameter<?> param = null;\n                 Class<?> expectedValueType = paramTypes.get(key);"},{"sha":"83bba3033818f4fc4ecf0bd95e2cb7e1a67e1bb4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fd5c79aabca0045a65cf93735df8b3fa0a094423/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=fd5c79aabca0045a65cf93735df8b3fa0a094423","patch":"@@ -404,7 +404,7 @@ public boolean isDistinct() {\n      */\n     public OrderedMap<Object, Class<?>> getParameterTypes() {\n         collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n-        return _params == null ? StoreQuery.EMPTY_PARAMS : _params;\n+        return _params == null ? StoreQuery.EMPTY_ORDERED_PARAMS : _params;\n     }\n     \n     /**"}]}

