{"sha":"fd74642a178aa6fbbece1db6ea89aa161eba78d5","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkNzQ2NDJhMTc4YWE2ZmJiZWNlMWRiNmVhODlhYTE2MWViYTc4ZDU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-09T22:39:24Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-09T22:39:24Z"},"message":"Give better error when run on bad .class file.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@430171 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ad4c475c731d2fad867cb5b71f149562f4b673cd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ad4c475c731d2fad867cb5b71f149562f4b673cd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd74642a178aa6fbbece1db6ea89aa161eba78d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd74642a178aa6fbbece1db6ea89aa161eba78d5","html_url":"https://github.com/apache/openjpa/commit/fd74642a178aa6fbbece1db6ea89aa161eba78d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd74642a178aa6fbbece1db6ea89aa161eba78d5/comments","author":null,"committer":null,"parents":[{"sha":"5bef32e5164bca30a252b9863e6fcc8f4051b00a","url":"https://api.github.com/repos/apache/openjpa/commits/5bef32e5164bca30a252b9863e6fcc8f4051b00a","html_url":"https://github.com/apache/openjpa/commit/5bef32e5164bca30a252b9863e6fcc8f4051b00a"}],"stats":{"total":54,"additions":29,"deletions":25},"files":[{"sha":"ba40d47f79e8e1e304ccf54b819e662ae0866500","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","status":"modified","additions":29,"deletions":25,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/fd74642a178aa6fbbece1db6ea89aa161eba78d5/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/fd74642a178aa6fbbece1db6ea89aa161eba78d5/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java?ref=fd74642a178aa6fbbece1db6ea89aa161eba78d5","patch":"@@ -51,35 +51,39 @@ public boolean matches(Resource rsrc) throws IOException {\n         if (_annos.length == 0 || !rsrc.getName().endsWith(\".class\"))\n             return false;\n \n-        ConstantPoolTable table = new ConstantPoolTable(rsrc.getContent());\n-        int idx = table.getEndIndex();\n-        idx += 6; // skip access, cls, super\n+        try {\n+            ConstantPoolTable table = new ConstantPoolTable(rsrc.getContent());\n+            int idx = table.getEndIndex();\n+            idx += 6; // skip access, cls, super\n \n-        // skip interfaces\n-        int interfaces = table.readUnsignedShort(idx);\n-        idx += 2 + interfaces * 2;\n+            // skip interfaces\n+            int interfaces = table.readUnsignedShort(idx);\n+            idx += 2 + interfaces * 2;\n \n-        // skip fields and methods\n-        int fields = table.readUnsignedShort(idx);\n-        idx += 2;\n-        for (int i = 0; i < fields; i++)\n-            idx += skipFieldOrMethod(table, idx);\n-        int methods = table.readUnsignedShort(idx);\n-        idx += 2;\n-        for (int i = 0; i < methods; i++)\n-            idx += skipFieldOrMethod(table, idx);\n+            // skip fields and methods\n+            int fields = table.readUnsignedShort(idx);\n+            idx += 2;\n+            for (int i = 0; i < fields; i++)\n+                idx += skipFieldOrMethod(table, idx);\n+            int methods = table.readUnsignedShort(idx);\n+            idx += 2;\n+            for (int i = 0; i < methods; i++)\n+                idx += skipFieldOrMethod(table, idx);\n \n-        // look for annotation attrs\n-        int attrs = table.readUnsignedShort(idx);\n-        idx += 2;\n-        int name;\n-        for (int i = 0; i < attrs; i++) {\n-            name = table.readUnsignedShort(idx);\n+            // look for annotation attrs\n+            int attrs = table.readUnsignedShort(idx);\n             idx += 2;\n-            if (\"RuntimeVisibleAnnotations\".equals(table.readString\n-                (table.get(name))))\n-                return matchAnnotations(table, idx + 4);\n-            idx += 4 + table.readInt(idx);\n+            int name;\n+            for (int i = 0; i < attrs; i++) {\n+                name = table.readUnsignedShort(idx);\n+                idx += 2;\n+                if (\"RuntimeVisibleAnnotations\".equals(table.readString\n+                    (table.get(name))))\n+                    return matchAnnotations(table, idx + 4);\n+                idx += 4 + table.readInt(idx);\n+            }\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ClassFormatError(rsrc.getName());\n         }\n         return false;\n     }"}]}

