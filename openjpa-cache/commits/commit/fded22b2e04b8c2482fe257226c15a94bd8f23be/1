{"sha":"fded22b2e04b8c2482fe257226c15a94bd8f23be","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkZWQyMmIyZTA0YjhjMjQ4MmZlMjU3MjI2YzE1YTk0YmQ4ZjIzYmU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T13:06:03Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T13:06:03Z"},"message":"OPENJPA-1445: Support enums as External values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b75c246aa705fc1c2d1ec06c9cc3737bd5c14516","url":"https://api.github.com/repos/apache/openjpa/git/trees/b75c246aa705fc1c2d1ec06c9cc3737bd5c14516"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be","html_url":"https://github.com/apache/openjpa/commit/fded22b2e04b8c2482fe257226c15a94bd8f23be","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fded22b2e04b8c2482fe257226c15a94bd8f23be/comments","author":null,"committer":null,"parents":[{"sha":"df5a403700ac8f070408bf86fdebeedbf209fea8","url":"https://api.github.com/repos/apache/openjpa/commits/df5a403700ac8f070408bf86fdebeedbf209fea8","html_url":"https://github.com/apache/openjpa/commit/df5a403700ac8f070408bf86fdebeedbf209fea8"}],"stats":{"total":45,"additions":25,"deletions":20},"files":[{"sha":"1b1190b3dcada19a6ac380dcb3c9bef66bc4f9a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=fded22b2e04b8c2482fe257226c15a94bd8f23be","patch":"@@ -173,6 +173,7 @@ protected boolean attachField(AttachManager manager, Object toAttach,\n             case JavaTypes.LOCALE:\n             case JavaTypes.OBJECT:\n             case JavaTypes.OID:\n+            case JavaTypes.ENUM:\n                 val = fetchObjectField(i);\n                 if (val == null && !nullLoaded)\n                     return false;"},{"sha":"8607c7de4c84b41ef715240b30a1e5074c3fc17e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=fded22b2e04b8c2482fe257226c15a94bd8f23be","patch":"@@ -1532,6 +1532,8 @@ private Object transform(String val, int typeCode) {\n                 return new Character(val.charAt(0));\n             case JavaTypes.STRING:\n                 return val;\n+            case JavaTypes.ENUM:\n+                return Enum.valueOf((Class<? extends Enum>)getDeclaredType(), val);\n         }\n         throw new MetaDataException(_loc.get(\"bad-external-type\", this));\n     }"},{"sha":"e1d4fcb312cfb32e05e0c0094fde038a72af4660","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=fded22b2e04b8c2482fe257226c15a94bd8f23be","patch":"@@ -83,10 +83,11 @@\n     public static final int OID = 29;\n     public static final int INPUT_STREAM = 30;\n     public static final int INPUT_READER = 31;\n+    public static final int ENUM = 32;\n \n     private static final Localizer _loc = Localizer.forPackage(JavaTypes.class);\n \n-    private static final Map _typeCodes = new HashMap();\n+    private static final Map<Class<?>, Integer> _typeCodes = new HashMap<Class<?>, Integer>();\n \n     static {\n         _typeCodes.put(String.class, Numbers.valueOf(STRING));\n@@ -116,7 +117,7 @@\n      * Return the field metadata type code for the given class. First class\n      * objects are not recognized in this method.\n      */\n-    public static int getTypeCode(Class type) {\n+    public static int getTypeCode(Class<?> type) {\n         if (type == null)\n             return OBJECT;\n \n@@ -164,6 +165,8 @@ public static int getTypeCode(Class type) {\n             return INPUT_READER;\n         if (type.isAssignableFrom (InputStream.class))\n             return INPUT_STREAM;\n+        if (Enum.class.isAssignableFrom(type))\n+            return ENUM;\n             \n         return OBJECT;\n     }\n@@ -172,16 +175,15 @@ public static int getTypeCode(Class type) {\n      * Check the given name against the same set of standard packages used\n      * when parsing metadata.\n      */\n-    public static Class classForName(String name, ClassMetaData context) {\n+    public static Class<?> classForName(String name, ClassMetaData context) {\n         return classForName(name, context, null);\n     }\n \n     /**\n      * Check the given name against the same set of standard packages used\n      * when parsing metadata.\n      */\n-    public static Class classForName(String name, ClassMetaData context,\n-        ClassLoader loader) {\n+    public static Class<?> classForName(String name, ClassMetaData context, ClassLoader loader) {\n         return classForName(name, context, context.getDescribedType(), null,\n             loader);\n     }\n@@ -190,16 +192,15 @@ public static Class classForName(String name, ClassMetaData context,\n      * Check the given name against the same set of standard packages used\n      * when parsing metadata.\n      */\n-    public static Class classForName(String name, ValueMetaData context) {\n+    public static Class<?> classForName(String name, ValueMetaData context) {\n         return classForName(name, context, null);\n     }\n \n     /**\n      * Check the given name against the same set of standard packages used\n      * when parsing metadata.\n      */\n-    public static Class classForName(String name, ValueMetaData context,\n-        ClassLoader loader) {\n+    public static Class<?> classForName(String name, ValueMetaData context, ClassLoader loader) {\n         return classForName(name,\n             context.getFieldMetaData().getDefiningMetaData(),\n             context.getFieldMetaData().getDeclaringType(), context, loader);\n@@ -209,24 +210,24 @@ public static Class classForName(String name, ValueMetaData context,\n      * Check the given name against the same set of standard packages used\n      * when parsing metadata.\n      */\n-    private static Class classForName(String name, ClassMetaData meta,\n-        Class dec, ValueMetaData vmd, ClassLoader loader) {\n+    private static Class<?> classForName(String name, ClassMetaData meta, Class<?> dec, ValueMetaData vmd, \n+        ClassLoader loader) {\n         // special case for PersistenceCapable and Object\n         if (\"PersistenceCapable\".equals(name)\n-            || \"javax.jdo.PersistenceCapable\".equals(name)) // backwards compat\n+            || \"javax.jdo.PersistenceCapable\".equals(name)) // backwards compatibility\n             return PersistenceCapable.class;\n         if (\"Object\".equals(name))\n             return Object.class;\n \n         MetaDataRepository rep = meta.getRepository();\n-        boolean runtime = (rep.getValidate() & rep.VALIDATE_RUNTIME) != 0;\n+        boolean runtime = (rep.getValidate() & MetaDataRepository.VALIDATE_RUNTIME) != 0;\n         if (loader == null)\n             loader = rep.getConfiguration().getClassResolverInstance().\n                 getClassLoader(dec, meta.getEnvClassLoader());\n \n         // try the owner's package\n         String pkg = Strings.getPackageName(dec);\n-        Class cls = CFMetaDataParser.classForName(name, pkg, runtime, loader);\n+        Class<?> cls = CFMetaDataParser.classForName(name, pkg, runtime, loader);\n         if (cls == null && vmd != null) {\n             // try against this value type's package too\n             pkg = Strings.getPackageName(vmd.getDeclaredType());\n@@ -382,7 +383,7 @@ public static boolean maybePC(ValueMetaData val) {\n      * Return true if the given unresolved typecode/type pair may represent a\n      * persistent object.\n      */\n-    static boolean maybePC(int typeCode, Class type) {\n+    static boolean maybePC(int typeCode, Class<?> type) {\n         if (type == null)\n             return false;\n         switch (typeCode) {\n@@ -401,7 +402,8 @@ static boolean maybePC(int typeCode, Class type) {\n     /**\n      * Helper method to return the given array value as a collection.\n      */\n-    public static List toList(Object val, Class elem, boolean mutable) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static List toList(Object val, Class<?> elem, boolean mutable) {\n         if (val == null)\n             return null;\n \n@@ -424,13 +426,13 @@ public static List toList(Object val, Class elem, boolean mutable) {\n     /**\n      * Helper method to return the given collection as an array.\n      */\n-    public static Object toArray(Collection coll, Class elem) {\n+    public static Object toArray(Collection<?> coll, Class<?> elem) {\n         if (coll == null)\n             return null;\n \n         Object array = Array.newInstance(elem, coll.size());\n         int idx = 0;\n-        for (Iterator itr = coll.iterator(); itr.hasNext(); idx++)\n+        for (Iterator<?> itr = coll.iterator(); itr.hasNext(); idx++)\n             Array.set(array, idx, itr.next ());\n \t\treturn array;\n \t}"},{"sha":"98bbba5bdc5ab9d5213e5381364c7b206243bfa1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","raw_url":"https://github.com/apache/openjpa/raw/fded22b2e04b8c2482fe257226c15a94bd8f23be/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java?ref=fded22b2e04b8c2482fe257226c15a94bd8f23be","patch":"@@ -45,19 +45,19 @@ public void testMapping() {\n         FieldMapping fm = cls.getDeclaredFieldMapping(\"enumeration\");\n         assertNotNull(fm);\n         assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\n-        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\n+        assertEquals(JavaTypes.ENUM, fm.getTypeCode());\n         assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\n \n         fm = cls.getDeclaredFieldMapping(\"ordinalEnumeration\");\n         assertNotNull(fm);\n         assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\n-        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\n+        assertEquals(JavaTypes.ENUM, fm.getTypeCode());\n         assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\n \n         fm = cls.getDeclaredFieldMapping(\"stringEnumeration\");\n         assertNotNull(fm);\n         assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\n-        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\n+        assertEquals(JavaTypes.ENUM, fm.getTypeCode());\n         assertEquals(JavaTypes.STRING, fm.getColumns()[0].getJavaType());\n     }\n "}]}

