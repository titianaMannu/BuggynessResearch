{"sha":"fe6352fca14a1f26a6e24642d858fd1d5b08664c","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlNjM1MmZjYTE0YTFmMjZhNmUyNDY0MmQ4NThmZDFkNWIwODY2NGM=","commit":{"author":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-01T18:18:03Z"},"committer":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-01T18:18:03Z"},"message":"whoops.  forgot interface impl generator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@439412 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e3949c3bd53086f62ba15d9c7fd276c0c56b680","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e3949c3bd53086f62ba15d9c7fd276c0c56b680"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe6352fca14a1f26a6e24642d858fd1d5b08664c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe6352fca14a1f26a6e24642d858fd1d5b08664c","html_url":"https://github.com/apache/openjpa/commit/fe6352fca14a1f26a6e24642d858fd1d5b08664c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe6352fca14a1f26a6e24642d858fd1d5b08664c/comments","author":null,"committer":null,"parents":[{"sha":"423b0a418af03102a95b1c7472665d5cd7c57b11","url":"https://api.github.com/repos/apache/openjpa/commits/423b0a418af03102a95b1c7472665d5cd7c57b11","html_url":"https://github.com/apache/openjpa/commit/423b0a418af03102a95b1c7472665d5cd7c57b11"}],"stats":{"total":213,"additions":213,"deletions":0},"files":[{"sha":"c39df669e2779c87d2ce8d1bc1ba84b8f9fccda2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/fe6352fca14a1f26a6e24642d858fd1d5b08664c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/fe6352fca14a1f26a6e24642d858fd1d5b08664c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=fe6352fca14a1f26a6e24642d858fd1d5b08664c","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.lang.reflect.Method;\n+import java.io.ByteArrayInputStream;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.enhance.PCEnhancer;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.lib.util.Localizer;\n+import serp.bytecode.BCClass;\n+import serp.bytecode.BCClassLoader;\n+import serp.bytecode.BCField;\n+import serp.bytecode.BCMethod;\n+import serp.bytecode.Code;\n+import serp.bytecode.Constants;\n+import serp.bytecode.Project;\n+\n+\n+/**\n+ * Creates implementations of managed interfaces.  Will throw exceptions\n+ * on unknown properties.\n+ *\n+ * @author Steve Kim\n+ */\n+class InterfaceImplGenerator {\n+    private static final Localizer _loc = Localizer.forPackage\n+        (InterfaceImplGenerator.class);\n+    private static final String POSTFIX = \"openjpaimpl\";\n+\n+    private final MetaDataRepository _repos;\n+    private final Map _impls = new WeakHashMap();\n+    private final Project _project = new Project();\n+    private final BCClassLoader _loader = new BCClassLoader(_project);\n+\n+    // distinct project / loader for enhanced version of class\n+    private final Project _enhProject = new Project();\n+    private final BCClassLoader _enhLoader = new BCClassLoader(_enhProject);\n+\n+    /**\n+     * Constructor.  Supply repository.\n+     */\n+    public InterfaceImplGenerator(MetaDataRepository repos) {\n+        _repos = repos;\n+    }\n+\n+    /**\n+     * Create a concrete implementation of the given type, possibly\n+     * returning a cached version of the class.\n+     */\n+    public synchronized Class createImpl(ClassMetaData meta) {\n+        Class iface = meta.getDescribedType();\n+\n+        // check cache.\n+        Class impl = (Class) _impls.get(iface);\n+        if (impl != null)\n+            return impl;\n+\n+        BCClass bc = _project.loadClass(getClassName(meta));\n+        bc.declareInterface(iface);\n+        ClassMetaData sup = meta.getPCSuperclassMetaData();\n+        if (sup != null)\n+            bc.setSuperclass(sup.getInterfaceImpl());\n+\n+        FieldMetaData[] fields = meta.getDeclaredFields();\n+        Set methods = new HashSet();\n+        for (int i = 0; i < fields.length; i++) \n+            addField(bc, iface, fields[i], methods);\n+        invalidateNonBeanMethods(bc, iface, methods);\n+\n+        // first load the base class as the enhancer requires the class\n+        // to be available\n+        try {\n+            meta.setInterfaceImpl(Class.forName(bc.getName(), true, _loader));\n+        } catch (Throwable t) {\n+            throw new InternalException(_loc.get(\"interface-load\"), t).\n+                setFatal(true);\n+        }\n+        // copy the BCClass into the enhancer project.\n+        bc = _enhProject.loadClass(new ByteArrayInputStream(bc.toByteArray()), \n+            _loader);\n+        PCEnhancer enhancer = new PCEnhancer(_repos.getConfiguration(), bc, \n+            meta);\n+\n+        int result = enhancer.run();\n+        if (result != PCEnhancer.ENHANCE_PC)\n+            throw new InternalException(_loc.get(\"interface-badenhance\", \n+                iface)).setFatal(true);\n+        try{\n+            // load the class for real.\n+            impl = Class.forName(bc.getName(), true, _enhLoader);\n+        } catch (Throwable t) {\n+            throw new InternalException(_loc.get(\"interface-load2\"), t).\n+                setFatal(true);\n+        }\n+        // cache the generated impl.\n+        _impls.put(iface, impl);\n+        return impl;\n+    }\n+\n+    /**\n+     * Add bean getters and setters, also recording seen methods\n+     * into the given set.\n+     */\n+    private void addField (BCClass bc, Class iface, FieldMetaData fmd, \n+        Set methods) {\n+        String name = fmd.getName();\n+        Class type = fmd.getDeclaredType();\n+        BCField field = bc.declareField(name, type);\n+        field.setAccessFlags(Constants.ACCESS_PRIVATE);\n+\n+        // getter\n+        name = StringUtils.capitalize(name);\n+        String prefix = isGetter(iface, fmd) ? \"get\" : \"is\";\n+        BCMethod meth = bc.declareMethod(prefix + name, type, null);\n+        meth.makePublic();\n+        Code code = meth.getCode(true);\n+        code.aload().setThis();\n+        code.getfield().setField(field);\n+        code.xreturn().setType(type);\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        methods.add(getMethodSafe(iface, meth.getName(), null));\n+\n+        // setter\n+        meth = bc.declareMethod(\"set\" + name, void.class, new Class[]{type});\n+        meth.makePublic();\n+        code = meth.getCode(true);\n+        code.aload().setThis();\n+        code.xload().setParam(0).setType(type);\n+        code.putfield().setField(field);\n+        code.vreturn();\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        methods.add(getMethodSafe(iface, meth.getName(), type));\n+    }\n+\n+    /**\n+     * Invalidate methods on the interface which are not managed.\n+     */\n+    private void invalidateNonBeanMethods(BCClass bc, Class iface, \n+        Set methods) {\n+        Method[] meths = iface.getDeclaredMethods();\n+        BCMethod meth;\n+        Code code;\n+        Class type = _repos.getMetaDataFactory().getDefaults().\n+            getUnimplementedExceptionType();\n+        for (int i = 0; i < meths.length; i++) {\n+            if (methods.contains(meths[i]))\n+                continue;\n+            meth = bc.declareMethod(meths[i].getName(), \n+                meths[i].getReturnType(), meths[i].getParameterTypes());\n+            meth.makePublic();\n+            code = meth.getCode(true);\n+            code.anew().setType(type);\n+            code.dup();\n+            code.invokespecial().setMethod(type, \"<init>\", void.class, null);\n+            code.athrow();\n+            code.calculateMaxLocals();\n+            code.calculateMaxStack();\n+        }\n+    }\n+\n+    /**\n+     * Return a unique class name.\n+     */\n+    protected final String getClassName(ClassMetaData meta) {\n+        Class iface = meta.getDescribedType();\n+        return iface.getName() + \"$\" + System.identityHashCode(iface) + POSTFIX;\n+    }\n+\n+    /**\n+     * Convenience method to return the given method / arg.\n+     */\n+    private static Method getMethodSafe(Class iface, String name, Class arg) {\n+        try {\n+            return iface.getDeclaredMethod(name, arg == null ? null :\n+                new Class[]{arg});\n+        } catch (NoSuchMethodException e) {\n+            throw new InternalException (_loc.get (\"interface-mismatch\", name));\n+        }\n+    }\n+\n+    private static boolean isGetter(Class iface, FieldMetaData fmd) {\n+        if (fmd.getType() != boolean.class && fmd.getType() != Boolean.class)\n+            return true;\n+        try {\n+            Method meth = iface.getDeclaredMethod(\"is\" + StringUtils.capitalize\n+                (fmd.getName()), null);\n+            return meth == null;\n+        } catch (NoSuchMethodException e) {}\n+        return true;\n+    }\n+}"}]}

