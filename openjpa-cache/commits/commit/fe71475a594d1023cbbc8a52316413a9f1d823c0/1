{"sha":"fe71475a594d1023cbbc8a52316413a9f1d823c0","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlNzE0NzVhNTk0ZDEwMjNjYmJjOGE1MjMxNjQxM2E5ZjFkODIzYzA=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-24T20:41:12Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-24T20:41:12Z"},"message":"Formatted our documentation XML files.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@434517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a40a5dbc9a54ff41c256e2217c123208ee229cd","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a40a5dbc9a54ff41c256e2217c123208ee229cd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe71475a594d1023cbbc8a52316413a9f1d823c0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe71475a594d1023cbbc8a52316413a9f1d823c0","html_url":"https://github.com/apache/openjpa/commit/fe71475a594d1023cbbc8a52316413a9f1d823c0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe71475a594d1023cbbc8a52316413a9f1d823c0/comments","author":null,"committer":null,"parents":[{"sha":"746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","url":"https://api.github.com/repos/apache/openjpa/commits/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","html_url":"https://github.com/apache/openjpa/commit/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd"}],"stats":{"total":57754,"additions":32337,"deletions":25417},"files":[{"sha":"68ba1d0c048679113f180d85fc7e78237a23c62c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":56,"deletions":71,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -83,11 +83,11 @@\n     public static final int VALIDATE_RUNTIME = 8;\n \n     protected static final Class[] EMPTY_CLASSES = new Class[0];\n+    protected static final PersistenceAwareClass[] EMPTY_PAWARE_CLASSES = \n+    \tnew PersistenceAwareClass[0];\n     protected final ClassMetaData[] EMPTY_METAS;\n     protected final FieldMetaData[] EMPTY_FIELDS;\n     protected final Order[] EMPTY_ORDERS;\n-    protected static final PersistenceAwareClass[] EMPTY_PAWARE_CLASSES = \n-    \tnew PersistenceAwareClass[0];\n \n     private static final Localizer _loc = Localizer.forPackage\n         (MetaDataRepository.class);\n@@ -699,19 +699,6 @@ private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n     public ClassMetaData getCachedMetaData(Class cls) {\n         return (ClassMetaData) _metas.get(cls);\n     }\n-\n-    /**\n-     * Gets all the registered persistence-aware classes.\n-     * \n-     * @return empty array if no class has been registered.\n-     * \n-     */\n-    public PersistenceAwareClass[] getPersistenceAwareClasses() {\n-    \tif (_pawares.isEmpty())\n-    \t\treturn EMPTY_PAWARE_CLASSES;\n-    \treturn (PersistenceAwareClass[])_pawares.values().toArray\n-    \t\t(new PersistenceAwareClass[_pawares.size()]);\n-    }\n     \n     /**\n      * Create a new metadata, populate it with default information, add it to\n@@ -737,43 +724,20 @@ public ClassMetaData addMetaData(Class cls, int access) {\n         // synchronize on this rather than the map, because all other methods\n         // that access _metas are synchronized on this\n         synchronized (this) {\n+            if (_pawares.containsKey(cls))\n+                throw new MetaDataException(_loc.get(\"pc-and-aware\", cls));\n             _metas.put(cls, meta);\n             _count++;\n         }\n         return meta;\n     }\n-\n-    /**\n-     * Add the given class as persitence-aware.\n-     * \n-     * @param cls non-null and must not alreaddy be added as persitence-capable.\n-     */\n-    public PersistenceAwareClass addPersistenceAware(Class cls) {\n-    \tif (cls == null)\n-    \t\treturn null;\n-    \tif (_pawares.containsKey(cls))\n-    \t\treturn (PersistenceAwareClass)_pawares.get(cls);\n-    \tif (getCachedMetaData(cls) == null) {\n-    \t\tsynchronized(this) {\n-\t    \t\tPersistenceAwareClass result = newPersistenceAwareClass(cls); \n-\t    \t\t_pawares.put(cls,result);\n-\t    \t\treturn result;\n-    \t\t}\n-    \t}\n-    \telse\n-    \t\tthrow new MetaDataException(_loc.get(\"pc-and-aware\", cls));\n-    }\n     \n     /**\n      * Create a new class metadata instance.\n      */\n     protected ClassMetaData newClassMetaData(Class type) {\n         return new ClassMetaData(type, this);\n     }\n-    \n-    protected PersistenceAwareClass newPersistenceAwareClass(Class type) {\n-    \treturn new PersistenceAwareClass(type, this);\n-    }\n \n     /**\n      * Create a new array of the proper class metadata subclass.\n@@ -887,25 +851,6 @@ public synchronized boolean removeMetaData(Class cls) {\n         return false;\n     }\n     \n-    /**\n-     * Remove a persitence-aware class from this receiver.\n-     * \n-     * @param cls a class possibly added earlier as persitence-aware.\n-     * \n-     * @return true if removed, false if not contained in this receiver\n-     */\n-    public synchronized boolean removePersistenceAware(Class cls) {\n-    \treturn _pawares.remove(cls) != null;\n-    }\n-\n-    /**\n-     * Removes all persitence-aware classes from this receiver.\n-     *\n-     */\n-    public synchronized void removeAllPersistenceAware() {\n-    \t_pawares.clear();\n-    }\n-    \n     /**\n      * Return the least-derived class metadata for the given application\n      * identity object.\n@@ -1044,6 +989,57 @@ private void resolveIdentityClass(Object oid) {\n         return (ClassMetaData[]) mapped.toArray(newClassMetaDataArray\n             (mapped.size()));\n     }\n+     \n+    /**\n+     * Gets the persistence-aware class corresponding to the given class. Can\n+     * be null, if the given class is not registered as persistence-aware with\n+     * this receiver.\n+     */\n+    public PersistenceAwareClass getPersistenceAware(Class cls) {\n+    \treturn (PersistenceAwareClass)_pawares.get(cls);\n+    }\n+    \n+    /**\n+     * Gets all the registered persistence-aware classes.\n+     * \n+     * @return empty array if no class has been registered\n+     */\n+    public PersistenceAwareClass[] getPersistenceAwares() {\n+        synchronized (_pawares) {\n+            if (_pawares.isEmpty())\n+                return EMPTY_PAWARE_CLASSES;\n+            return (PersistenceAwareClass[])_pawares.values().toArray\n+                (new PersistenceAwareClass[_pawares.size()]);\n+        }\n+    }\n+\n+    /**\n+     * Add the given class as persitence-aware.\n+     * \n+     * @param cls non-null and must not alreaddy be added as persitence-capable\n+     */\n+    public PersistenceAwareClass addPersistenceAware(Class cls) {\n+    \tif (cls == null)\n+    \t\treturn null;\n+        synchronized(this) {\n+            if (_pawares.containsKey(cls))\n+                return (PersistenceAwareClass)_pawares.get(cls);\n+            if (getCachedMetaData(cls) != null)\n+                throw new MetaDataException(_loc.get(\"pc-and-aware\", cls));\n+            PersistenceAwareClass result = new PersistenceAwareClass(cls, this);\n+            _pawares.put(cls, result);\n+            return result;\n+    \t}\n+    }\n+\n+    /**\n+     * Remove a persitence-aware class from this receiver.\n+     * \n+     * @return true if removed, false if not contained in this receiver\n+     */\n+    public boolean removePersistenceAware(Class cls) {\n+    \treturn _pawares.remove(cls) != null;\n+    }\n \n     /**\n      * Clear the cache of parsed metadata. This method also clears the\n@@ -1062,6 +1058,7 @@ public synchronized void clear() {\n         _registered.clear();\n         _factory.clear();\n         _aliases.clear();\n+        _pawares.clear();\n     }\n \n     /**\n@@ -1560,18 +1557,6 @@ private SequenceMetaData getSequenceMetaDataInternal(String name,\n             (new SequenceMetaData[_seqs.size()]);\n     }\n \n-    /**\n-     * Gets the persistence-aware class corresponding to the given class. Can\n-     * be null, if the given class is not registered as persistence-aware with\n-     * this receiver.\n-     * \n-     * @param cls a Java class possibly registered as persistence-aware earlier\n-     * with this receiver.\n-     */\n-    public synchronized PersistenceAwareClass getPersistenceAware(Class cls) {\n-    \treturn (PersistenceAwareClass)_pawares.get(cls);\n-    }\n-    \n     /**\n      * Return the cached a sequence metadata for the given name.\n      */"},{"sha":"977b625a95f38fdd1caa2387c639eec5b0541192","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java","status":"modified","additions":31,"deletions":56,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -5,9 +5,13 @@\n import org.apache.openjpa.lib.meta.SourceTracker;\r\n import org.apache.openjpa.lib.xml.Commentable;\r\n \r\n+/**\r\n+ * Metadata about a persistence-aware type.\r\n+ *\r\n+ * @author Pinaki Poddar\r\n+ */\r\n public class PersistenceAwareClass \r\n-\timplements Comparable, SourceTracker,Commentable,MetaDataContext,\r\n-\tMetaDataModes {\r\n+\timplements Comparable, SourceTracker, Commentable, MetaDataContext {\r\n \r\n     private final MetaDataRepository _repos;\r\n \tprivate final Class _class;\r\n@@ -16,25 +20,42 @@\n     private int _srcType = SRC_OTHER;\r\n     private String[] _comments = null;\r\n     private int _listIndex = -1;\r\n-    private int _srcMode = MODE_META | MODE_MAPPING;\r\n \t\r\n-\tpublic PersistenceAwareClass(Class cls, MetaDataRepository repos) {\r\n+\tprotected PersistenceAwareClass(Class cls, MetaDataRepository repos) {\r\n \t\t_repos = repos;\r\n \t\t_class = cls;\r\n \t}\r\n \t\r\n-\tpublic String getName() {\r\n-\t\treturn _class.getName();\r\n-\t}\r\n-\t\r\n+    /**\r\n+     * Owning repository.\r\n+     */\r\n \tpublic MetaDataRepository getRepository() {\r\n \t\treturn _repos;\r\n \t}\r\n \t\r\n+    /**\r\n+     * Persistence-aware type.\r\n+     */\r\n \tpublic Class getDescribedType() {\r\n \t\treturn _class;\r\n \t}\r\n \t\r\n+    /**\r\n+     * The index in which this class was listed in the metadata. Defaults to\r\n+     * <code>-1</code> if this class was not listed in the metadata.\r\n+     */\r\n+    public int getListingIndex() {\r\n+        return _listIndex;\r\n+    }\r\n+\r\n+    /**\r\n+     * The index in which this field was listed in the metadata. Defaults to\r\n+     * <code>-1</code> if this class was not listed in the metadata.\r\n+     */\r\n+    public void setListingIndex(int index) {\r\n+        _listIndex = index;\r\n+    }\r\n+\r\n     public File getSourceFile() {\r\n         return _srcFile;\r\n     }\r\n@@ -56,52 +77,6 @@ public String getResourceName() {\n         return _class.getName();\r\n     }\r\n \r\n-    /**\r\n-     * The source mode this metadata has been loaded under.\r\n-     */\r\n-    public int getSourceMode() {\r\n-        return _srcMode;\r\n-    }\r\n-\r\n-    /**\r\n-     * The source mode this metadata has been loaded under.\r\n-     */\r\n-    public void setSourceMode(int mode) {\r\n-        _srcMode = mode;\r\n-    }\r\n-\r\n-    /**\r\n-     * The source mode this metadata has been loaded under.\r\n-     */\r\n-    public void setSourceMode(int mode, boolean on) {\r\n-        if (mode == MODE_NONE)\r\n-            _srcMode = mode;\r\n-        else if (on)\r\n-            _srcMode |= mode;\r\n-        else\r\n-            _srcMode &= ~mode;\r\n-    }\r\n-\r\n-    /**\r\n-     * The index in which this class was listed in the metadata. Defaults to\r\n-     * <code>-1</code> if this class was not listed in the metadata.\r\n-     */\r\n-    public int getListingIndex() {\r\n-        return _listIndex;\r\n-    }\r\n-\r\n-    /**\r\n-     * The index in which this field was listed in the metadata. Defaults to\r\n-     * <code>-1</code> if this class was not listed in the metadata.\r\n-     */\r\n-    public void setListingIndex(int index) {\r\n-        _listIndex = index;\r\n-    }\r\n-\r\n-    ///////////////\r\n-    // Commentable\r\n-    ///////////////\r\n-\r\n     public String[] getComments() {\r\n         return (_comments == null) ? ClassMetaData.EMPTY_COMMENTS : _comments;\r\n     }\r\n@@ -113,9 +88,9 @@ public void setComments(String[] comments) {\n     public int compareTo(Object other) {\r\n         if (other == this)\r\n             return 0;\r\n-        if (other instanceof PersistenceAwareClass)\r\n+        if (!(other instanceof PersistenceAwareClass))\r\n         \treturn 1;\r\n-        return _class.getName().compareTo(((ClassMetaData) other).\r\n+        return _class.getName().compareTo(((PersistenceAwareClass) other).\r\n             getDescribedType().getName());\r\n     }\r\n \r"},{"sha":"146147a428286fd7fe6b644e6dc464ad6243db16","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -338,9 +338,8 @@ protected void parseNewResource(Reader xml, String sourceName)\n                 _log.info(_loc.get(\"parser-schema-bug\"));\n             schemaSource = null;\n         }\n-\n-        boolean validating = _validating &&\n-            (getDocType() != null || schemaSource != null);\n+        boolean validating = _validating && (getDocType() != null \n+            || schemaSource != null);\n \n         // parse the metadata with a SAX parser\n         try {"},{"sha":"c9e73fad056e5124d3a15d4de0591767608c415b","filename":"openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"modified","additions":224,"deletions":127,"changes":351,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,100 +1,181 @@\n-\n-    <chapter id=\"jpa_overview_arch\">\n-      <title>EJB Persistence Architecture</title>\n-      <indexterm zone=\"jpa_overview_arch\">\n-        <primary>EJB</primary>\n-        <secondary>architecture</secondary>\n-      </indexterm>\n-      <para>\n-  The diagram below illustrates the relationships between the primary\n-  components of the EJB architecture.\n-  </para>\n-      <mediaobject>\n+<chapter id=\"jpa_overview_arch\">\n+    <title>\n+        Java Persistence API Architecture\n+    </title>\n+    <indexterm zone=\"jpa_overview_arch\">\n+        <primary>\n+            JPA\n+        </primary>\n+        <secondary>\n+            architecture\n+        </secondary>\n+    </indexterm>\n+    <para>\n+The diagram below illustrates the relationships between the primary components\n+of the JPA architecture.\n+    </para>\n+    <mediaobject>\n         <imageobject>\n-<!-- PNG image data 400 x 256 (see README) -->\n-          <imagedata fileref=\"img/jpa-arch.png\" width=\"267px\"/>\n+            <!-- PNG image data 400 x 256 (see README) -->\n+            <imagedata fileref=\"img/jpa-arch.png\" width=\"267px\">\n+            </imagedata>\n         </imageobject>\n         <textobject>\n-          <phrase>EJB architecture</phrase>\n+            <phrase>\n+                JPA architecture\n+            </phrase>\n         </textobject>\n-      </mediaobject>\n-      <note>\n+    </mediaobject>\n+    <note>\n         <para>\n-    A number of the depicted interfaces are only required outside of\n-    an EJB3-compliant application server.  In an application server,\n-    <classname>EntityManager</classname> instances are typically injected, \n-    rendering the <classname>EntityManagerFactory</classname> unnecessary.\n-    Also, transactions within an application server\n-    are handled using standard application server transaction controls.\n-    Thus, the <classname>EntityTransaction</classname> also goes unused.\n-    </para>\n-      </note>\n-      <itemizedlist>\n+A number of the depicted interfaces are only required outside of an\n+EJB3-compliant application server. In an application server, <classname>\n+EntityManager</classname> instances are typically injected, rendering the\n+<classname>EntityManagerFactory</classname> unnecessary. Also, transactions\n+within an application server are handled using standard application server\n+transaction controls. Thus, the <classname>EntityTransaction</classname> also\n+goes unused.\n+        </para>\n+    </note>\n+    <itemizedlist>\n         <listitem>\n-          <para><indexterm><primary>Persistence</primary></indexterm><emphasis role=\"bold\"><link linkend=\"jpa_overview_persistence\"><classname>Persistence</classname></link></emphasis>:\n-      The <classname>javax.persistence.Persistence</classname> class\n-      contains static helper methods to obtain \n-      <classname>EntityManagerFactory</classname> instances in a \n-      vendor-neutral fashion.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    Persistence\n+                </primary>\n+            </indexterm>\n+<emphasis role=\"bold\"><link linkend=\"jpa_overview_persistence\"><classname>\n+Persistence</classname></link></emphasis>: The <classname>\n+javax.persistence.Persistence</classname> class contains static helper methods\n+to obtain <classname>EntityManagerFactory</classname> instances in a\n+vendor-neutral fashion.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>EntityManagerFactory</primary></indexterm><emphasis role=\"bold\"><link linkend=\"jpa_overview_emfactory\"><classname>EntityManagerFactory</classname></link></emphasis>:  The <classname>javax.persistence.EntityManagerFactory\n-      </classname> class is a factory for <classname>\n-      EntityManager</classname>s.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    EntityManagerFactory\n+                </primary>\n+            </indexterm>\n+<emphasis role=\"bold\"><link linkend=\"jpa_overview_emfactory\"><classname>\n+EntityManagerFactory</classname></link></emphasis>: The <classname>\n+javax.persistence.EntityManagerFactory</classname> class is a factory for\n+<classname> EntityManager</classname> s.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>EntityManager</primary></indexterm><emphasis role=\"bold\"><link linkend=\"jpa_overview_em\"><classname>EntityManager</classname></link></emphasis>:\n-      The <classname>javax.persistence.EntityManager</classname> is the\n-      primary EJB persistence interface used by applications.\n-      Each <classname>EntityManager</classname> manages a set of \n-      persistent objects, and has APIs to insert new objects and delete\n-      existing ones.  When used outside the container, there is a \n-      one-to-one relationship between an \n-      <classname>EntityManager</classname> and an <classname>\n-      EntityTransaction</classname>.  <classname>\n-      EntityManager</classname>s also act as factories for\n-      <classname>Query</classname> instances.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    EntityManager\n+                </primary>\n+            </indexterm>\n+<emphasis role=\"bold\"><link linkend=\"jpa_overview_em\"><classname>EntityManager\n+</classname></link></emphasis>: The <classname>javax.persistence.EntityManager\n+</classname> is the primary JPA interface used by applications. Each\n+<classname>EntityManager</classname> manages a set of persistent objects, and\n+has APIs to insert new objects and delete existing ones. When used outside the\n+container, there is a one-to-one relationship between an <classname>\n+EntityManager</classname> and an <classname> EntityTransaction</classname>.\n+<classname> EntityManager</classname>s also act as factories for <classname>\n+Query</classname> instances.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>entity</primary></indexterm><emphasis role=\"bold\"><link linkend=\"jpa_overview_pc\"><classname>Entity</classname></link></emphasis>:\n-      Entites are persistent objects that represent datastore records.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    entity\n+                </primary>\n+            </indexterm>\n+<emphasis role=\"bold\"><link linkend=\"jpa_overview_pc\"><classname>Entity\n+</classname></link></emphasis>: Entites are persistent objects that represent\n+datastore records.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>EntityTransaction</primary></indexterm><emphasis role=\"bold\"><link linkend=\"jpa_overview_trans\"><classname>EntityTransaction</classname></link></emphasis>:  \n-      Each <classname>EntityManager</classname> has a one-to-one\n-      relation with a single \n-      <classname>javax.persistence.EntityTransaction</classname>.  \n-      <classname>EntityTransaction</classname>s allow operations on \n-      persistent data to be grouped into units of work that either \n-      completely succeed or completely fail, leaving the datastore\n-      in its original state.  These all-or-nothing operations are\n-      important for maintaining data integrity.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    EntityTransaction\n+                </primary>\n+            </indexterm>\n+<emphasis role=\"bold\"><link linkend=\"jpa_overview_trans\"><classname>\n+EntityTransaction</classname></link></emphasis>: Each <classname>EntityManager\n+</classname> has a one-to-one relation with a single <classname>\n+javax.persistence.EntityTransaction</classname>. <classname>EntityTransaction\n+</classname>s allow operations on persistent data to be grouped into units of\n+work that either completely succeed or completely fail, leaving the datastore in\n+its original state. These all-or-nothing operations are important for\n+maintaining data integrity.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>Query</primary></indexterm><indexterm><primary>EJB3 Persistence Query Language</primary><see>JPQL</see></indexterm><indexterm><primary>JPQL</primary></indexterm><indexterm><primary>EJB</primary><secondary>query language</secondary><see>JPQL</see></indexterm><indexterm><primary>Structured Query Language</primary><see>SQL</see></indexterm><indexterm><primary>SQL</primary></indexterm><emphasis role=\"bold\"><link linkend=\"jpa_overview_query\"><classname>Query</classname></link></emphasis>:  The\n-      <classname>javax.persistence.Query</classname> interface is\n-      implemented by each EJB vendor to find persistent objects\n-      that meet certain criteria.  EJB standardizes support\n-      for queries using both the EJB Query Language (JPQL) and\n-      the Structured Query Language (SQL).  You obtain \n-      <classname>Query</classname> instances from an\n-      <classname>EntityManager</classname>.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    Query\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    Java Persistence Query Language\n+                </primary>\n+                <see>\n+                    JPQL\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPQL\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    query language\n+                </secondary>\n+                <see>\n+                    JPQL\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    Structured Query Language\n+                </primary>\n+                <see>\n+                    SQL\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    SQL\n+                </primary>\n+            </indexterm>\n+<emphasis role=\"bold\"><link linkend=\"jpa_overview_query\"><classname>Query\n+</classname></link></emphasis>: The <classname>javax.persistence.Query\n+</classname> interface is implemented by each JPA vendor to find persistent\n+objects that meet certain criteria. JPA standardizes support for queries using\n+both the Java Persistence Query Language (JPQL) and the Structured Query \n+Language (SQL). You obtain <classname>Query</classname> instances from an \n+<classname>EntityManager</classname>.\n+            </para>\n         </listitem>\n-      </itemizedlist>\n-      <para>\n-  The example below illustrates how the EJB interfaces interact to\n-  execute an JPQL query and update persistent objects.  The example\n-  assumes execution outside a container.\n-  </para>\n-      <example id=\"jpa_overview_arch_interact_outside\">\n-        <title>Interaction of Interfaces Outside Container</title>\n-        <programlisting format=\"linespecific\">\n+    </itemizedlist>\n+    <para>\n+The example below illustrates how the JPA interfaces interact to execute a JPQL\n+query and update persistent objects. The example assumes execution outside a\n+container.\n+    </para>\n+    <example id=\"jpa_overview_arch_interact_outside\">\n+        <title>\n+            Interaction of Interfaces Outside Container\n+        </title>\n+<programlisting>\n // get an EntityManagerFactory using the Persistence class; typically \n // the factory is cached for easy repeated use\n EntityManagerFactory factory = Persistence.createEntityManagerFactory (null);\n@@ -124,15 +205,17 @@ tx.commit ();\n em.close ();\n factory.close ();\n </programlisting>\n-      </example>\n-      <para>\n-  Within a container, the <classname>EntityManager</classname> will be \n-  injected and transactional handled declaratively.  Thus, the in-container\n-  version of the example consists entirely of business logic:\n-  </para>\n-      <example id=\"jpa_overview_arch_interact_inside\">\n-        <title>Interaction of Interfaces Inside Container</title>\n-        <programlisting format=\"linespecific\">\n+    </example>\n+    <para>\n+Within a container, the <classname>EntityManager</classname> will be injected\n+and transactional handled declaratively. Thus, the in-container version of the\n+example consists entirely of business logic:\n+    </para>\n+    <example id=\"jpa_overview_arch_interact_inside\">\n+        <title>\n+            Interaction of Interfaces Inside Container\n+        </title>\n+<programlisting>\n // query for all employees who work in our research division\n // and put in over 40 hours a week average - note that the EntityManager em\n // is injected using a @Resource annotation\n@@ -147,50 +230,64 @@ for (Object res : results)\n     emp.setSalary (emp.getSalary () * 1.1);\n } \n </programlisting>\n-      </example>\n-      <para>\n-  The remainder of this document explores the EJB interfaces in\n-  detail.  We present them in roughly the order that you will use them as you \n-  develop your application.\n-  </para>\n-      <section id=\"jpa_overview_arch_exceptions\">\n-        <title>EJB Exceptions</title>\n+    </example>\n+    <para>\n+The remainder of this document explores the JPA interfaces in detail. We present\n+them in roughly the order that you will use them as you develop your\n+application.\n+    </para>\n+    <section id=\"jpa_overview_arch_exceptions\">\n+        <title>\n+            JPA Exceptions\n+        </title>\n         <indexterm zone=\"jpa_overview_arch_exceptions\">\n-          <primary>EJB</primary>\n-          <secondary>exceptions</secondary>\n-          <seealso>exceptions</seealso>\n+            <primary>\n+                JPA\n+            </primary>\n+            <secondary>\n+                exceptions\n+            </secondary>\n+            <seealso>\n+                exceptions\n+            </seealso>\n         </indexterm>\n         <indexterm>\n-          <primary>exceptions</primary>\n-          <secondary>EJB</secondary>\n+            <primary>\n+                exceptions\n+            </primary>\n+            <secondary>\n+                JPA\n+            </secondary>\n         </indexterm>\n         <mediaobject>\n-          <imageobject>\n-<!-- PNG image data, 427 x 355 (see README) -->\n-            <imagedata fileref=\"img/jpa-exceptions.png\" width=\"285px\"/>\n-          </imageobject>\n-          <textobject>\n-            <phrase>EJB persistence exception architecture</phrase>\n-          </textobject>\n+            <imageobject>\n+                <!-- PNG image data, 427 x 355 (see README) -->\n+                <imagedata fileref=\"img/jpa-exceptions.png\" width=\"285px\">\n+                </imagedata>\n+            </imageobject>\n+            <textobject>\n+                <phrase>\n+                    JPA exception architecture\n+                </phrase>\n+            </textobject>\n         </mediaobject>\n         <para>\n-    The diagram above depicts the EJB persistence exception architecture.  \n-    All exceptions are unchecked.  EJB persistence uses\n-    standard exceptions where appropriate, most notably <classname>\n-    IllegalArgumentException</classname>s and <classname>\n-    IllegalStateException</classname>s.  The specification also provides\n-    a few EJB-specific exceptions in the <literal>javax.persistence\n-    </literal> package.  These exceptions should be self-explanatory.  See \n-    the <ulink url=\"http://java.sun.com/javaee/5/docs/api\">Javadoc</ulink> for \n-    additional details on EJB exceptions.\n-    </para>\n+The diagram above depicts the JPA exception architecture. All\n+exceptions are unchecked. JPA uses standard exceptions where\n+appropriate, most notably <classname> IllegalArgumentException</classname>s and\n+<classname> IllegalStateException</classname> s. The specification also provides\n+a few JPA-specific exceptions in the <literal>javax.persistence</literal>\n+package. These exceptions should be self-explanatory. See the\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api\">Javadoc</ulink> for\n+additional details on JPA exceptions.\n+        </para>\n         <note>\n-          <para>\n-      All exceptions thrown by OpenJPA implement \n-      <ulink url=\"../apidocs/org/apache/openjpa/util/ExceptionInfo.html\"><classname>\n-      org.apache.openjpa.util.ExceptionInfo</classname></ulink> to provide you with\n-      additional error information.\n-      </para>\n+            <para>\n+All exceptions thrown by OpenJPA implement\n+<ulink url=\"../apidocs/org/apache/openjpa/util/ExceptionInfo.html\"><classname>\n+org.apache.openjpa.util.ExceptionInfo</classname></ulink> to provide you with\n+additional error information.\n+            </para>\n         </note>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"37e0945c1c8dce7e6c4b4cdbc58bc4a1d8f47e2c","filename":"openjpa-project/src/doc/manual/jpa_overview_conclusion.xml","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,18 +1,13 @@\n-\n-    <chapter id=\"jpa_overview_conclusion\">\n-      <title>Conclusion</title>\n-      <para>\n-  This concludes our overview of the EJB persistence specification.  The\n-  <link linkend=\"jpa_tutorials_intro\">OpenJPA EJB Tutorials</link>\n-  continue your EJB education with step-by-step instructions for \n-  building simple EJB persistence applications.  The \n-  <link linkend=\"ref_guide_intro\">OpenJPA Reference Guide</link> contains \n-  detailed documentation on all aspects of the OpenJPA EJB persistence\n-  implementation and core development tools.  \n-<!-- ### JDO2MIG\n-  Finally,\n-  the <link linkend=\"gui_intro\">Workbench Guide</link> teaches you how to\n-  use the OpenJPA Development Workbench for GUI-driven development.\n--->\n-  </para>\n-    </chapter>\n+<chapter id=\"jpa_overview_conclusion\">\n+    <title>\n+        Conclusion\n+    </title>\n+    <para>\n+This concludes our overview of the JPA specification. The\n+<link linkend=\"jpa_tutorials_intro\">OpenJPA Tutorials</link> continue your\n+JPA education with step-by-step instructions for building simple JPA\n+applications. The <link linkend=\"ref_guide_intro\">OpenJPA Reference Guide</link>\n+contains detailed documentation on all aspects of the OpenJPA implementation \n+and core development tools.\n+    </para>\n+</chapter>"},{"sha":"d93df767aee42066999c37b66483892fe5c29710","filename":"openjpa-project/src/doc/manual/jpa_overview_em.xml","status":"modified","additions":838,"deletions":511,"changes":1349,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_em.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_em.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_em.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,406 +1,566 @@\n-\n-    <chapter id=\"jpa_overview_em\">\n-      <title>EntityManager</title>\n-      <indexterm zone=\"jpa_overview_em\">\n-        <primary>EntityManager</primary>\n-      </indexterm>\n-      <mediaobject>\n+<chapter id=\"jpa_overview_em\">\n+    <title>\n+        EntityManager\n+    </title>\n+    <indexterm zone=\"jpa_overview_em\">\n+        <primary>\n+            EntityManager\n+        </primary>\n+    </indexterm>\n+    <mediaobject>\n         <imageobject>\n-<!-- PNG image data, 283 x 391 (see README) -->\n-          <imagedata fileref=\"img/entitymanager.png\" width=\"189px\"/>\n+            <!-- PNG image data, 283 x 391 (see README) -->\n+            <imagedata fileref=\"img/entitymanager.png\" width=\"189px\">\n+            </imagedata>\n         </imageobject>\n-      </mediaobject>\n-      <para>\n-  The diagram above presents an overview of the \n-  <classname>EntityManager</classname> interface.  For a complete \n-  treatment of the <classname>EntityManager</classname> API, see the \n-  <ulink url=\"jdo-javadoc/javax/jdo/EntityManager.html\">\n-  Javadoc</ulink> documentation.  Methods whose parameter signatures consist \n-  of an ellipsis (...) are overloaded to take multiple parameter types.\n-  </para>\n-      <note>\n-        <para>\n-    OpenJPA extends the standard <classname>EntityManager</classname> \n-    interface with the \n-    <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\"><classname>org.apache.openjpa.persistence.OpenJPAEntityManager</classname></ulink> \n-    interface to provide additional functionality.\n+    </mediaobject>\n+    <para>\n+The diagram above presents an overview of the <classname>EntityManager\n+</classname> interface. For a complete treatment of the <classname>\n+EntityManager</classname> API, see the\n+<ulink url=\"jdo-javadoc/javax/jdo/EntityManager.html\"> Javadoc</ulink>\n+documentation. Methods whose parameter signatures consist of an ellipsis (...)\n+are overloaded to take multiple parameter types.\n+    </para>\n+    <note>\n+        <para>\n+OpenJPA extends the standard <classname>EntityManager</classname> interface with\n+the <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\">\n+<classname>org.apache.openjpa.persistence.OpenJPAEntityManager</classname>\n+</ulink> interface to provide additional functionality.\n+        </para>\n+    </note>\n+    <para>\n+The <classname>EntityManager</classname> is the primary interface used by\n+application developers to interact with the JPA runtime. The methods\n+of the <classname>EntityManager</classname> can be divided into the following\n+functional categories:\n     </para>\n-      </note>\n-      <para>\n-  The <classname>EntityManager</classname> is the primary interface\n-  used by application developers to interact with the EJB persistence runtime.\n-  The methods of the <classname>EntityManager</classname> can be\n-  divided into the following functional categories:\n-  </para>\n-      <itemizedlist>\n+    <itemizedlist>\n         <listitem>\n-          <para><classname>Transaction</classname> association.</para>\n+            <para>\n+<classname>Transaction</classname> association.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para>Entity lifecycle management.</para>\n+            <para>\n+Entity lifecycle management.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para>Entity identity management.</para>\n+            <para>\n+Entity identity management.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para>Cache management.</para>\n+            <para>\n+Cache management.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><classname>Query</classname> factory.</para>\n+            <para>\n+<classname>Query</classname> factory.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para>Closing.</para>\n+            <para>\n+Closing.\n+            </para>\n         </listitem>\n-      </itemizedlist>\n-      <section id=\"jpa_overview_em_trans\">\n-        <title>Transaction Association</title>\n+    </itemizedlist>\n+    <section id=\"jpa_overview_em_trans\">\n+        <title>\n+            Transaction Association\n+        </title>\n         <indexterm zone=\"jpa_overview_em_trans\">\n-          <primary>EntityManager</primary>\n-          <secondary>obtaining the Transaction</secondary>\n-          <seealso>transactions</seealso>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                obtaining the Transaction\n+            </secondary>\n+            <seealso>\n+                transactions\n+            </seealso>\n         </indexterm>\n         <indexterm zone=\"jpa_overview_em_trans\">\n-          <primary>Transaction</primary>\n-          <secondary>obtaining from EntityManager</secondary>\n+            <primary>\n+                Transaction\n+            </primary>\n+            <secondary>\n+                obtaining from EntityManager\n+            </secondary>\n         </indexterm>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public EntityTransaction getTransaction ();\n </programlisting>\n         <para>\n-    Every <classname>EntityManager</classname> has a one-to-one\n-    relation with an <link linkend=\"jpa_overview_trans\"><classname>EntityTransaction</classname></link> instance. In\n-    fact, many vendors use a single class to implement both\n-    the <classname>EntityManager</classname> and \n-    <classname>EntityTransaction</classname> interfaces.  If your\n-    application requires multiple concurrent transactions, you will\n-    use multiple <classname>EntityManager</classname>s.\n-    </para>\n+Every <classname>EntityManager</classname> has a one-to-one relation with an\n+<link linkend=\"jpa_overview_trans\"><classname>EntityTransaction</classname>\n+</link> instance. In fact, many vendors use a single class to implement both the\n+<classname>EntityManager</classname> and <classname>EntityTransaction\n+</classname> interfaces. If your application requires multiple concurrent\n+transactions, you will use multiple <classname>EntityManager</classname> s.\n+        </para>\n         <para>\n-    You can retrieve the <classname>EntityTransaction</classname> \n-    associated with an <classname>EntityManager</classname> through the\n-    <methodname>getTransaction</methodname> method.   Note that most \n-    most EJB persistence implementations can integrate with an application\n-    server's managed transactions.  If you take advantage of this feature, \n-    you will control transactions by declarative demarcation or through\n-    the Java Transaction API (JTA) rather than through the\n-    <classname>EntityTransaction</classname>.\n-    </para>\n-      </section>\n-      <section id=\"jpa_overview_em_lifecycle\">\n-        <title>Entity Lifecycle Management</title>\n+You can retrieve the <classname>EntityTransaction</classname> associated with an\n+<classname>EntityManager</classname> through the <methodname>getTransaction\n+</methodname> method. Note that most most JPA implementations can\n+integrate with an application server's managed transactions. If you take\n+advantage of this feature, you will control transactions by declarative\n+demarcation or through the Java Transaction API (JTA) rather than through the\n+<classname>EntityTransaction</classname>.\n+        </para>\n+    </section>\n+    <section id=\"jpa_overview_em_lifecycle\">\n+        <title>\n+            Entity Lifecycle Management\n+        </title>\n         <indexterm zone=\"jpa_overview_em_lifecycle\">\n-          <primary>EntityManager</primary>\n-          <secondary>lifecycle operations</secondary>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                lifecycle operations\n+            </secondary>\n         </indexterm>\n-        <para><classname>EntityManager</classname>s perform several actions\n-    that affect the lifecycle state of entity instances.  \n-    </para>\n-        <programlisting format=\"linespecific\">\n+        <para>\n+<classname>EntityManager</classname>s perform several actions that affect the\n+lifecycle state of entity instances.\n+        </para>\n+<programlisting>\n public void persist (Object entity);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>persist</secondary></indexterm><indexterm><primary>persist</primary><seealso>EntityManager</seealso></indexterm><indexterm><primary>persistent objects</primary><secondary>persisting</secondary></indexterm>\n-    Transitions new instances to managed.  On the next flush or commit, \n-    the newly persisted instances will be inserted into the datastore.\n-    </para>\n         <para>\n-    For a given entity <literal>A</literal>, the <methodname>persist\n-    </methodname> method behaves as follows:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a new entity, it becomes managed.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is an existing managed entity, it is\n-        ignored.  However, the persist operation cascades as \n-        defined below.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a removed entity, it becomes managed.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a detached entity, an\n-        <classname>IllegalArgumentException</classname> is thrown.\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                persist\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                persist\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                persistent objects\n+            </primary>\n+            <secondary>\n+                persisting\n+            </secondary>\n+        </indexterm>\n+Transitions new instances to managed. On the next flush or commit, the newly\n+persisted instances will be inserted into the datastore.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        The persist operation recurses on all relation fields of \n-        <literal>A</literal> whose \n-        <link linkend=\"jpa_overview_meta_cascade\">cascades</link> \n-        include <literal>CascadeType.PERSIST</literal>.\n+        <para>\n+For a given entity <literal>A</literal>, the <methodname>persist</methodname>\n+method behaves as follows:\n         </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a new entity, it becomes managed.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is an existing managed entity, it is ignored. However,\n+the persist operation cascades as defined below.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a removed entity, it becomes managed.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a detached entity, an <classname>\n+IllegalArgumentException</classname> is thrown.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+The persist operation recurses on all relation fields of <literal>A</literal>\n+whose <link linkend=\"jpa_overview_meta_cascade\">cascades</link> include\n+<literal>CascadeType.PERSIST</literal>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <para>\n-    This action can only be used in the context of an active transaction. \n-    </para>\n-        <programlisting format=\"linespecific\">\n+This action can only be used in the context of an active transaction.\n+        </para>\n+<programlisting>\n public void remove (Object entity);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>remove</secondary></indexterm><indexterm><primary>remove</primary><seealso>EntityManager</seealso></indexterm><indexterm><primary>persistent objects</primary><secondary>deleting</secondary></indexterm>\n-    Transitions managed instances to removed.  The instances will be \n-    deleted from the datastore on the next flush or commit.  Accessing\n-    a removed entity has undefined results.\n-    </para>\n         <para>\n-    For a given entity <literal>A</literal>, the <methodname>remove\n-    </methodname> method behaves as follows:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a new entity, it is ignored.  \n-        However, the remove operation cascades as defined below.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is an existing managed entity, it \n-        becomes removed.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a removed entity, it is ignored.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a detached entity, an\n-        <classname>IllegalArgumentException</classname> is thrown.\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                remove\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                remove\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                persistent objects\n+            </primary>\n+            <secondary>\n+                deleting\n+            </secondary>\n+        </indexterm>\n+Transitions managed instances to removed. The instances will be deleted from the\n+datastore on the next flush or commit. Accessing a removed entity has undefined\n+results.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        The remove operation recurses on all relation fields of \n-        <literal>A</literal> whose \n-        <link linkend=\"jpa_overview_meta_cascade\">cascades</link> \n-        include <literal>CascadeType.REMOVE</literal>.\n+        <para>\n+For a given entity <literal>A</literal>, the <methodname>remove</methodname>\n+method behaves as follows:\n         </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a new entity, it is ignored. However, the remove\n+operation cascades as defined below.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is an existing managed entity, it becomes removed.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a removed entity, it is ignored.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a detached entity, an <classname>\n+IllegalArgumentException</classname> is thrown.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+The remove operation recurses on all relation fields of <literal>A</literal>\n+whose <link linkend=\"jpa_overview_meta_cascade\">cascades</link> include\n+<literal>CascadeType.REMOVE</literal>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <para>\n-    This action can only be used in the context of an active transaction. \n-    </para>\n-        <programlisting format=\"linespecific\">\n+This action can only be used in the context of an active transaction.\n+        </para>\n+<programlisting>\n public void refresh (Object entity);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>refresh</secondary></indexterm><indexterm><primary>refresh</primary><seealso>EntityManager</seealso></indexterm><indexterm><primary>persistent objects</primary><secondary>refreshing state</secondary></indexterm><indexterm><primary>transactions</primary><secondary>optimistic</secondary></indexterm>\n-    Use the <methodname>refresh</methodname> action to make sure\n-    the persistent state of an instance is synchronized with the\n-    values in the datastore.  <methodname>refresh</methodname>\n-    is intended for long-running optimistic transactions in\n-    which there is a danger of seeing stale data.\n-    </para>\n         <para>\n-    For a given entity <literal>A</literal>, the <methodname>refresh\n-    </methodname> method behaves as follows:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a new entity, it is ignored.  \n-        However, the remove operation cascades as defined below.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is an existing managed entity, its \n-        state is refreshed from the datastore.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a removed entity, it is ignored.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a detached entity, an\n-        <classname>IllegalArgumentException</classname> is thrown.\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                refresh\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                refresh\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                persistent objects\n+            </primary>\n+            <secondary>\n+                refreshing state\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                optimistic\n+            </secondary>\n+        </indexterm>\n+Use the <methodname>refresh</methodname> action to make sure the persistent\n+state of an instance is synchronized with the values in the datastore.\n+<methodname>refresh</methodname> is intended for long-running optimistic\n+transactions in which there is a danger of seeing stale data.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        The refresh operation recurses on all relation fields of \n-        <literal>A</literal> whose \n-        <link linkend=\"jpa_overview_meta_cascade\">cascades</link> \n-        include <literal>CascadeType.REFRESH</literal>.\n+        <para>\n+For a given entity <literal>A</literal>, the <methodname>refresh</methodname>\n+method behaves as follows:\n         </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a new entity, it is ignored. However, the remove\n+operation cascades as defined below.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is an existing managed entity, its state is refreshed\n+from the datastore.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a removed entity, it is ignored.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a detached entity, an <classname>\n+IllegalArgumentException</classname> is thrown.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+The refresh operation recurses on all relation fields of <literal>A</literal>\n+whose <link linkend=\"jpa_overview_meta_cascade\">cascades</link> include\n+<literal>CascadeType.REFRESH</literal>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public Object merge (Object entity);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>merge</secondary><seealso>detachment</seealso></indexterm><indexterm><primary>detachment</primary><secondary>EJB</secondary></indexterm><indexterm><primary>merge</primary><seealso>detachment</seealso></indexterm><indexterm><primary>data transfer object</primary></indexterm><indexterm><primary>value object</primary></indexterm>\n-    A common use case for an application running in a servlet or\n-    application server is to \"detach\" objects from all server resources,\n-    modify them, and then \"attach\" them again. For example, a servlet\n-    might store persistent data in a user session between a modification\n-    based on a series of web forms. Between each form request, the web\n-    container might decide to serialize the session, requiring that the\n-    stored persistent state be disassociated from any other\n-    resources. Similarly, a client/server application might\n-    transfer persistent objects to a client via serialization, allow the\n-    client to modify their state, and then have the client return the\n-    modified data in order to be saved. This is sometimes referred to as\n-    the <emphasis>data transfer object</emphasis> or <emphasis>value \n-    object</emphasis> pattern, and it allows fine-grained manipulation \n-    of data objects without incurring the overhead of multiple remote \n-    method invocations.\n-    </para>\n-        <para>\n-    EJB persistence provides support for this pattern by automatically\n-    detaching entities when they are serialized or when a persistence\n-    context ends (see \n-    <xref linkend=\"jpa_overview_emfactory_perscontext\"/> for an\n-    exploration of persistence contexts).  The EJB persistence \n-    <emphasis>merge</emphasis> API re-attaches detached entities.\n-    This allows you to detach a persistent instance, modify the\n-    detached instance offline, and merge the instance back into an \n-    <classname>EntityManager</classname> (either the same one that \n-    detached the instance, or a new one). The changes will then be \n-    applied to the existing instance from the datastore.  \n-    </para>\n         <para>\n-    A detached entity maintains its persistent identity, but cannot load \n-    additional state from the datastore.  Accessing any persistent field or\n-    property that was not loaded at the time of detachment has undefined \n-    results.  Also, be sure not to alter the version or identity fields of\n-    detached instances if you plan on merging them later.\n-    </para>\n-        <para>\n-    The <methodname>merge</methodname> method returns a managed copy of the\n-    given detached entity.  Changes made to the persistent state of the\n-    detached entity are applied to this managed instance.  Because merging \n-    involves changing persistent state, you can only merge within a \n-    transaction.\n-    </para>\n-        <para>\n-    If you attempt to merge an instance whose representation has\n-    changed in the datastore since detachment, the merge operation will\n-    throw an exception, or the transaction in which you perform the \n-    merge will fail on commit, just as if a normal optimistic conflict\n-    were detected.\n-    </para>\n-        <note>\n-          <para>\n-      OpenJPA offers enhancements to EJB persistence detachment \n-      functionality, including additional options to control which \n-      fields are detached.  See <xref linkend=\"ref_guide_detach\"/> \n-      in the Reference Guide for details.\n-      </para>\n-        </note>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                merge\n+            </secondary>\n+            <seealso>\n+                detachment\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                detachment\n+            </primary>\n+            <secondary>\n+                JPA\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                merge\n+            </primary>\n+            <seealso>\n+                detachment\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                data transfer object\n+            </primary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                value object\n+            </primary>\n+        </indexterm>\n+A common use case for an application running in a servlet or application server\n+is to \"detach\" objects from all server resources, modify them, and then \"attach\"\n+them again. For example, a servlet might store persistent data in a user session\n+between a modification based on a series of web forms. Between each form\n+request, the web container might decide to serialize the session, requiring that\n+the stored persistent state be disassociated from any other resources.\n+Similarly, a client/server application might transfer persistent objects to a\n+client via serialization, allow the client to modify their state, and then have\n+the client return the modified data in order to be saved. This is sometimes\n+referred to as the <emphasis>data transfer object</emphasis> or <emphasis>value\n+object</emphasis> pattern, and it allows fine-grained manipulation of data\n+objects without incurring the overhead of multiple remote method invocations.\n+        </para>\n         <para>\n-    For a given entity <literal>A</literal>, the <methodname>merge\n-    </methodname> method behaves as follows:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a detached entity, its state\n-        is copied into existing managed instance <literal>A'</literal>\n-        of the same entity identity, or a new managed copy of\n-        <literal>A</literal> is created.\n+JPA provides support for this pattern by automatically detaching\n+entities when they are serialized or when a persistence context ends (see\n+<xref linkend=\"jpa_overview_emfactory_perscontext\"></xref> for an exploration of\n+persistence contexts). The JPA <emphasis>merge</emphasis> API\n+re-attaches detached entities. This allows you to detach a persistent instance,\n+modify the detached instance offline, and merge the instance back into an\n+<classname>EntityManager</classname> (either the same one that detached the\n+instance, or a new one). The changes will then be applied to the existing\n+instance from the datastore.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a new entity, a new managed\n-        entity <literal>A'</literal> is created and the state of \n-        <literal>A</literal> is copied into <literal>A'</literal>.\n+        <para>\n+A detached entity maintains its persistent identity, but cannot load additional\n+state from the datastore. Accessing any persistent field or property that was\n+not loaded at the time of detachment has undefined results. Also, be sure not to\n+alter the version or identity fields of detached instances if you plan on\n+merging them later.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is an existing managed entity, it is\n-        ignored.  However, the merge operation still cascades as \n-        defined below.\n+        <para>\n+The <methodname>merge</methodname> method returns a managed copy of the given\n+detached entity. Changes made to the persistent state of the detached entity are\n+applied to this managed instance. Because merging involves changing persistent\n+state, you can only merge within a transaction.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        If <literal>A</literal> is a removed entity, an\n-        <classname>IllegalArgumentException</classname> is thrown.\n+        <para>\n+If you attempt to merge an instance whose representation has changed in the\n+datastore since detachment, the merge operation will throw an exception, or the\n+transaction in which you perform the merge will fail on commit, just as if a\n+normal optimistic conflict were detected.\n         </para>\n-          </listitem>\n-          <listitem>\n+        <note>\n             <para>\n-        The merge operation recurses on all relation fields of \n-        <literal>A</literal> whose \n-        <link linkend=\"jpa_overview_meta_cascade\">cascades</link> \n-        include <literal>CascadeType.MERGE</literal>.\n+OpenJPA offers enhancements to JPA detachment functionality,\n+including additional options to control which fields are detached. See\n+<xref linkend=\"ref_guide_detach\"></xref> in the Reference Guide for details.\n+            </para>\n+        </note>\n+        <para>\n+For a given entity <literal>A</literal>, the <methodname>merge</methodname>\n+method behaves as follows:\n         </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a detached entity, its state is copied into existing\n+managed instance <literal>A'</literal> of the same entity identity, or a new\n+managed copy of <literal>A</literal> is created.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a new entity, a new managed entity <literal>A'\n+</literal> is created and the state of <literal>A</literal> is copied into\n+<literal>A'</literal>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is an existing managed entity, it is ignored. However,\n+the merge operation still cascades as defined below.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+If <literal>A</literal> is a removed entity, an <classname>\n+IllegalArgumentException</classname> is thrown.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+The merge operation recurses on all relation fields of <literal>A</literal>\n+whose <link linkend=\"jpa_overview_meta_cascade\">cascades</link> include\n+<literal>CascadeType.MERGE</literal>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public void lock (Object entity, LockModeType mode);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>lock</secondary></indexterm><indexterm><primary>locking</primary><seealso>EntityManager</seealso></indexterm>\n-    This method locks the given entity using the named mode.  The\n-    <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/LockmodeType.html\"><classname>javax.persistence.LockModeType</classname></ulink> enum\n-    defines two modes:\n-    </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                lock\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                locking\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+This method locks the given entity using the named mode. The\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/LockmodeType.html\">\n+<classname>javax.persistence.LockModeType</classname></ulink> enum defines two\n+modes:\n+        </para>\n         <itemizedlist>\n-          <listitem>\n-            <para><literal>READ</literal>: Other transactions may concurrently \n-        read the object, but cannot concurrently update it.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>WRITE</literal>: Other transactions cannot \n-        concurrently read or write the object. When a transaction\n-        is committed that holds WRITE locks on any entites, those\n-        entites will have their version incremented even if\n-        the entities themselves did not change in the transaction.\n-        </para>\n-          </listitem>\n+            <listitem>\n+                <para>\n+<literal>READ</literal>: Other transactions may concurrently read the object,\n+but cannot concurrently update it.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>WRITE</literal>: Other transactions cannot concurrently read or write\n+the object. When a transaction is committed that holds WRITE locks on any\n+entites, those entites will have their version incremented even if the entities\n+themselves did not change in the transaction.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <note>\n-          <para>\n-      OpenJPA has additional APIs for controlling object locking.  See\n-      <xref linkend=\"ref_guide_locking\"/> in the Reference Guide for\n-      details.\n-      </para>\n+            <para>\n+OpenJPA has additional APIs for controlling object locking. See\n+<xref linkend=\"ref_guide_locking\"></xref> in the Reference Guide for details.\n+            </para>\n         </note>\n         <para>\n-    The following diagram illustrates the lifecycle of an entity with\n-    respect to the APIs presented in this section.\n-    </para>\n+The following diagram illustrates the lifecycle of an entity with respect to the\n+APIs presented in this section.\n+        </para>\n         <mediaobject>\n-          <imageobject>\n-<!-- PNG image data, 445 x 337 (see README) -->\n-            <imagedata fileref=\"img/jpa-state-transitions.png\" width=\"297px\"/>\n-          </imageobject>\n+            <imageobject>\n+                <!-- PNG image data, 445 x 337 (see README) -->\n+                <imagedata fileref=\"img/jpa-state-transitions.png\" width=\"297px\">\n+                </imagedata>\n+            </imageobject>\n         </mediaobject>\n-      </section>\n-      <section id=\"jpa_overview_em_lifeexamples\">\n-        <title>Lifecycle Examples</title>\n-        <para>\n-    The examples below demonstrate how to use the lifecycle methods\n-    presented in the previous section.  The examples are appropriate for\n-    out-of-container use.  Within a container, <classname>\n-    EntityManager</classname>s are usually injected, and transactions are \n-    usually managed.  You would therefore omit the \n-    <methodname>createEntityManager</methodname> and <methodname>close\n-    </methodname> calls, as well as all transaction demarcation code.\n-    </para>\n+    </section>\n+    <section id=\"jpa_overview_em_lifeexamples\">\n+        <title>\n+            Lifecycle Examples\n+        </title>\n+        <para>\n+The examples below demonstrate how to use the lifecycle methods presented in the\n+previous section. The examples are appropriate for out-of-container use. Within\n+a container, <classname> EntityManager</classname>s are usually injected, and\n+transactions are usually managed. You would therefore omit the <methodname>\n+createEntityManager</methodname> and <methodname>close</methodname> calls, as\n+well as all transaction demarcation code.\n+        </para>\n         <example id=\"jpa_overview_em_lifecycle_persist\">\n-          <title>Persisting Objects</title>\n-          <indexterm>\n-            <primary>persistent objects</primary>\n-            <secondary>persisting</secondary>\n-            <tertiary>example</tertiary>\n-          </indexterm>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Persisting Objects\n+            </title>\n+            <indexterm>\n+                <primary>\n+                    persistent objects\n+                </primary>\n+                <secondary>\n+                    persisting\n+                </secondary>\n+                <tertiary>\n+                    example\n+                </tertiary>\n+            </indexterm>\n+<programlisting>\n // create some objects\n Magazine mag = new Magazine (\"1B78-YU9L\", \"JavaWorld\");\n \n@@ -409,7 +569,7 @@ pub.setRevenue (1750000D);\n mag.setPublisher (pub);\n pub.addMagazine (mag);\n \n-Article art = new Article (\"EJB Rules!\", \"Transparent Object Persistence\");\n+Article art = new Article (\"JPA Rules!\", \"Transparent Object Persistence\");\n art.addAuthor (new Author (\"Fred\", \"Hoyle\"));\n mag.addArticle (art);\n \n@@ -426,20 +586,28 @@ em.close ();\n </programlisting>\n         </example>\n         <example id=\"jpa_overview_em_lifecycle_update\">\n-          <title>Updating Objects</title>\n-          <indexterm>\n-            <primary>persistent objects</primary>\n-            <secondary>updating</secondary>\n-            <tertiary>example</tertiary>\n-          </indexterm>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Updating Objects\n+            </title>\n+            <indexterm>\n+                <primary>\n+                    persistent objects\n+                </primary>\n+                <secondary>\n+                    updating\n+                </secondary>\n+                <tertiary>\n+                    example\n+                </tertiary>\n+            </indexterm>\n+<programlisting>\n Magazine.MagazineId mi = new Magazine.MagazineId ();\n mi.isbn = \"1B78-YU9L\";\n mi.title = \"JavaWorld\";\n \n // updates should always be made within transactions; note that\n // there is no code explicitly linking the magazine or company\n-// with the transaction; EJB automatically tracks all changes\n+// with the transaction; JPA automatically tracks all changes\n EntityManager em = emf.createEntityManager ();\n em.getTransaction ().begin ();\n Magazine mag = em.find (Magazine.class, mi);\n@@ -453,13 +621,21 @@ em.close ();\n </programlisting>\n         </example>\n         <example id=\"jpa_overview_em_lifecycle_delete\">\n-          <title>Removing Objects</title>\n-          <indexterm>\n-            <primary>persistent objects</primary>\n-            <secondary>deleting</secondary>\n-            <tertiary>example</tertiary>\n-          </indexterm>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Removing Objects\n+            </title>\n+            <indexterm>\n+                <primary>\n+                    persistent objects\n+                </primary>\n+                <secondary>\n+                    deleting\n+                </secondary>\n+                <tertiary>\n+                    example\n+                </tertiary>\n+            </indexterm>\n+<programlisting>\n // assume we have an object id for the company whose subscriptions\n // we want to delete\n Object oid = ...;\n@@ -478,13 +654,15 @@ em.close ();\n </programlisting>\n         </example>\n         <example id=\"jpa_overview_em_detachex\">\n-          <title>Detaching and Merging</title>\n-          <para>\n-      This example demonstrates a common client/server scenario.  The\n-      client requests objects and makes changes to them, while the \n-      server handles the object lookups and transactions.\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Detaching and Merging\n+            </title>\n+            <para>\n+This example demonstrates a common client/server scenario. The client requests\n+objects and makes changes to them, while the server handles the object lookups\n+and transactions.\n+            </para>\n+<programlisting>\n // CLIENT:\n // requests an object with a given oid\n Record detached = (Record) getFromServer (oid);\n@@ -520,195 +698,344 @@ em.getTransaction ().commit ();\n em.close ();\n </programlisting>\n         </example>\n-      </section>\n-      <section id=\"jpa_overview_em_identity\">\n-        <title>Entity Identity Management</title>\n-        <para>\n-    Each <classname>EntityManager</classname> is responsible for\n-    managing the persistent identities of the managed objects in the\n-    persistence context.  The following methods allow you to interact \n-    with the management of persistent identities.  The behavior of these\n-    methods is deeply affected by the persistence context type of the\n-    <classname>EntityManager</classname>; see \n-    <xref linkend=\"jpa_overview_emfactory_perscontext\"/> for an\n-    explanation of persistence contexts.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+    </section>\n+    <section id=\"jpa_overview_em_identity\">\n+        <title>\n+            Entity Identity Management\n+        </title>\n+        <para>\n+Each <classname>EntityManager</classname> is responsible for managing the\n+persistent identities of the managed objects in the persistence context. The\n+following methods allow you to interact with the management of persistent\n+identities. The behavior of these methods is deeply affected by the persistence\n+context type of the <classname>EntityManager</classname>; see\n+<xref linkend=\"jpa_overview_emfactory_perscontext\"></xref> for an explanation of\n+persistence contexts.\n+        </para>\n+<programlisting>\n public &lt;T&gt; T find (Class&lt;T&gt; cls, Object oid);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>find</secondary><seealso>identity</seealso></indexterm><indexterm><primary>find</primary><seealso>EntityManager</seealso></indexterm><indexterm><primary>identity</primary><secondary>retrieving objects by identity</secondary></indexterm>\n-    This method returns the persistent instance of the given type with\n-    the given persistent identity.  If the instance is already present in\n-    the current persistence context, the cached version will be returned.  \n-    Otherwise, a new instance will be constructed and loaded with \n-    state from the datastore.  If no entity with the given type and identity\n-    exists in the datastore, this method returns null.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+        <para>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                find\n+            </secondary>\n+            <seealso>\n+                identity\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                find\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                identity\n+            </primary>\n+            <secondary>\n+                retrieving objects by identity\n+            </secondary>\n+        </indexterm>\n+This method returns the persistent instance of the given type with the given\n+persistent identity. If the instance is already present in the current\n+persistence context, the cached version will be returned. Otherwise, a new\n+instance will be constructed and loaded with state from the datastore. If no\n+entity with the given type and identity exists in the datastore, this method\n+returns null.\n+        </para>\n+<programlisting>\n public &lt;T&gt; T getReference (Class&lt;T&gt; cls, Object oid);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>getReference</secondary><seealso>identity</seealso></indexterm><indexterm><primary>getReference</primary><seealso>EntityManager</seealso></indexterm><indexterm><primary>identity</primary><secondary>retrieving objects by identity</secondary></indexterm><indexterm><primary>EntityNotFoundException</primary></indexterm>\n-    This method is similar to <methodname>find</methodname>, but does not\n-    necessarily go to the database when the entity is not found in cache.\n-    The implementation may construct a <emphasis>hollow</emphasis> entity \n-    and return it to you instead.  Hollow entities do not have any\n-    state loaded.  The state only gets loaded when you attempt to access\n-    a persistent field.  At that time, the implementation may throw an\n-    <classname>EntityNotFoundException</classname> if it discovers that\n-    the entity does not exist in the datastore.  The implementation may\n-    also throw an <classname>EntityNotFoundException</classname> from\n-    the <methodname>getReference</methodname> method itself.  Unlike \n-    <methodname>find</methodname>, <methodname>getReference</methodname>\n-    does not return null.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+        <para>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                getReference\n+            </secondary>\n+            <seealso>\n+                identity\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                getReference\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                identity\n+            </primary>\n+            <secondary>\n+                retrieving objects by identity\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                EntityNotFoundException\n+            </primary>\n+        </indexterm>\n+This method is similar to <methodname>find</methodname>, but does not\n+necessarily go to the database when the entity is not found in cache. The\n+implementation may construct a <emphasis>hollow</emphasis> entity and return it\n+to you instead. Hollow entities do not have any state loaded. The state only\n+gets loaded when you attempt to access a persistent field. At that time, the\n+implementation may throw an <classname>EntityNotFoundException</classname> if it\n+discovers that the entity does not exist in the datastore. The implementation\n+may also throw an <classname>EntityNotFoundException</classname> from the\n+<methodname>getReference</methodname> method itself. Unlike <methodname>find\n+</methodname>, <methodname>getReference</methodname> does not return null.\n+        </para>\n+<programlisting>\n public boolean contains (Object entity);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>contains</secondary></indexterm><indexterm><primary>contains</primary><seealso>EntityManager</seealso></indexterm>\n-    Returns true if the given entity is part of the current persistence\n-    context, and false otherwise.  Removed entities are not considered part\n-    of the current persistence context.\n-    </para>\n-      </section>\n-      <section id=\"jpa_overview_em_cache\">\n-        <title>Cache Management</title>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                contains\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                contains\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+Returns true if the given entity is part of the current persistence context, and\n+false otherwise. Removed entities are not considered part of the current\n+persistence context.\n+        </para>\n+    </section>\n+    <section id=\"jpa_overview_em_cache\">\n+        <title>\n+            Cache Management\n+        </title>\n         <indexterm zone=\"jpa_overview_em_cache\">\n-          <primary>EntityManager</primary>\n-          <secondary>cache</secondary>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                cache\n+            </secondary>\n         </indexterm>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public void flush ();\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>flush</secondary></indexterm><indexterm><primary>flush</primary><seealso>EntityManager</seealso></indexterm><indexterm><primary>transactions</primary><secondary>flushing changes before commit</secondary></indexterm>\n-    The <methodname>flush</methodname> method writes any changes that have\n-    been made in the current transaction to the datastore.  If the\n-    <classname>EntityManager</classname> does not already have a \n-    connection to the datastore, it obtains one for the flush and retains\n-    it for the duration of the transaction.  Any exceptions during flush\n-    cause the transaction to be marked for rollback.\n-    See <xref linkend=\"jpa_overview_trans\"/>.\n-    </para>\n         <para>\n-    Flushing requires an active transaction.  If there isn't a transaction\n-    in progress, the <methodname>flush</methodname> method throws a\n-    <classname>TransactionRequiredException</classname>.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                flush\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                flush\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                flushing changes before commit\n+            </secondary>\n+        </indexterm>\n+The <methodname>flush</methodname> method writes any changes that have been made\n+in the current transaction to the datastore. If the <classname>EntityManager\n+</classname> does not already have a connection to the datastore, it obtains one\n+for the flush and retains it for the duration of the transaction. Any exceptions\n+during flush cause the transaction to be marked for rollback. See\n+<xref linkend=\"jpa_overview_trans\"></xref>.\n+        </para>\n+        <para>\n+Flushing requires an active transaction. If there isn't a transaction in\n+progress, the <methodname>flush</methodname> method throws a <classname>\n+TransactionRequiredException</classname>.\n+        </para>\n+<programlisting>\n public FlushModeType getFlushMode ();\n public void setFlushMode (FlushModeType flushMode);\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>FlushMode</secondary></indexterm><indexterm><primary>FlushMode</primary></indexterm>\n-    The <classname>EntityManager</classname>'s <literal>FlushMode</literal>\n-    property controls whether to flush transactional changes before \n-    executing queries.  This allows the query results to take into account\n-    changes you have made during the current transaction.  Available\n-    <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/FlushModeType.html\"><classname>javax.persistence.FlushModeType</classname></ulink> constants\n-    are:\n-    </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                FlushMode\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                FlushMode\n+            </primary>\n+        </indexterm>\n+The <classname>EntityManager</classname>'s <literal>FlushMode</literal> property\n+controls whether to flush transactional changes before executing queries. This\n+allows the query results to take into account changes you have made during the\n+current transaction. Available\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/FlushModeType.html\">\n+<classname>javax.persistence.FlushModeType</classname></ulink> constants are:\n+        </para>\n         <itemizedlist>\n-          <listitem>\n-            <para><literal>COMMIT</literal>: Only flush when committing, or\n-        when told to do so through the <methodname>flush</methodname>\n-        method.  Query results may not take into account changes made\n-        in the current transaction.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>AUTO</literal>: The implementation is permitted to\n-        flush before queries to ensure that the results reflect the\n-        most recent object state.\n-        </para>\n-          </listitem>\n+            <listitem>\n+                <para>\n+<literal>COMMIT</literal>: Only flush when committing, or when told to do so\n+through the <methodname>flush</methodname> method. Query results may not take\n+into account changes made in the current transaction.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>AUTO</literal>: The implementation is permitted to flush before\n+queries to ensure that the results reflect the most recent object state.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <para>\n-    You can also set the flush mode on individual \n-    <link linkend=\"jpa_overview_query\"><classname>Query</classname></link>\n-    instances.\n-    </para>\n+You can also set the flush mode on individual\n+<link linkend=\"jpa_overview_query\"><classname>Query</classname></link>\n+instances.\n+        </para>\n         <note>\n-          <para>\n-      OpenJPA only flushes before a query if the query might be affected\n-      by data changed in the current transaction.  Additionally,\n-      OpenJPA allows fine-grained control over flushing behavior.\n-      See the Reference Guide's \n-      <xref linkend=\"ref_guide_dbsetup_retain\"/>.\n-      </para>\n+            <para>\n+OpenJPA only flushes before a query if the query might be affected by data\n+changed in the current transaction. Additionally, OpenJPA allows fine-grained\n+control over flushing behavior. See the Reference Guide's\n+<xref linkend=\"ref_guide_dbsetup_retain\"></xref>.\n+            </para>\n         </note>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public void clear ();\n </programlisting>\n-        <para><indexterm><primary>EntityManager</primary><secondary>clear</secondary></indexterm><indexterm><primary>clear</primary><seealso>EntityManager</seealso></indexterm>\n-    Clearing the <classname>EntityManager</classname> effectively ends the\n-    persistence context.  All entities managed by\n-    the <classname>EntityManager</classname> become detached. \n-    </para>\n-      </section>\n-      <section id=\"jpa_overview_em_query\">\n-        <title>Query Factory</title>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                clear\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                clear\n+            </primary>\n+            <seealso>\n+                EntityManager\n+            </seealso>\n+        </indexterm>\n+Clearing the <classname>EntityManager</classname> effectively ends the\n+persistence context. All entities managed by the <classname>EntityManager\n+</classname> become detached.\n+        </para>\n+    </section>\n+    <section id=\"jpa_overview_em_query\">\n+        <title>\n+            Query Factory\n+        </title>\n         <indexterm zone=\"jpa_overview_em_query\">\n-          <primary>EntityManager</primary>\n-          <secondary>as Query factory</secondary>\n-          <seealso>Query</seealso>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                as Query factory\n+            </secondary>\n+            <seealso>\n+                Query\n+            </seealso>\n         </indexterm>\n         <indexterm zone=\"jpa_overview_em_query\">\n-          <primary>Query</primary>\n-          <secondary>creating</secondary>\n+            <primary>\n+                Query\n+            </primary>\n+            <secondary>\n+                creating\n+            </secondary>\n         </indexterm>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public Query createQuery (String query);\n </programlisting>\n-        <para><classname>Query</classname> objects are used to find entities\n-    matching certain criteria.  The <methodname>createQuery</methodname>\n-    method creates a query using the given EJB Query Language (JPQL) \n-    string. See <xref linkend=\"jpa_overview_query\"/> for details.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+        <para>\n+<classname>Query</classname> objects are used to find entities matching certain\n+criteria. The <methodname>createQuery</methodname> method creates a query using\n+the given Java Persistence Query Language (JPQL) string. See\n+<xref linkend=\"jpa_overview_query\"></xref> for details.\n+        </para>\n+<programlisting>\n public Query createNamedQuery (String name);\n </programlisting>\n         <para>\n-    This method retrieves a query defined in metadata by name.  The returned\n-    <classname>Query</classname> instance is initialized with the \n-    information declared in metadata.  For more information on named \n-    queries, read <xref linkend=\"jpa_overview_query_named\"/>.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+This method retrieves a query defined in metadata by name. The returned\n+<classname>Query</classname> instance is initialized with the information\n+declared in metadata. For more information on named queries, read\n+<xref linkend=\"jpa_overview_query_named\"></xref>.\n+        </para>\n+<programlisting>\n public Query createNativeQuery (String sql);\n public Query createNativeQuery (String sql, Class resultCls);\n public Query createNativeQuery (String sql, String resultMapping);\n </programlisting>\n-        <para><emphasis>Native</emphasis> queries are queries in the datastore's\n-    native language.  For relational databases, this the Structured Query \n-    Language (SQL).  <xref linkend=\"jpa_overview_sqlquery\"/> elaborates\n-    on EJB persistence's native query support.  \n-    </para>\n-      </section>\n-      <section id=\"jpa_overview_em_closing\">\n-        <title>Closing</title>\n+        <para>\n+<emphasis>Native</emphasis> queries are queries in the datastore's native\n+language. For relational databases, this the Structured Query Language (SQL).\n+<xref linkend=\"jpa_overview_sqlquery\"></xref> elaborates on JPA's\n+native query support.\n+        </para>\n+    </section>\n+    <section id=\"jpa_overview_em_closing\">\n+        <title>\n+            Closing\n+        </title>\n         <indexterm zone=\"jpa_overview_em_closing\">\n-          <primary>EntityManager</primary>\n-          <secondary>closing</secondary>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                closing\n+            </secondary>\n         </indexterm>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public boolean isOpen ();\n public void close ();\n </programlisting>\n         <para>\n-    When an <classname>EntityManager</classname> is no longer\n-    needed, you should call its <methodname>close</methodname> method.\n-    Closing an <classname>EntityManager</classname> releases any resources \n-    it is using.  The persistence context ends, and the entities managed by\n-    the <classname>EntityManager</classname> become detached. \n-    Any <classname>Query</classname> instances the <classname>EntityManager\n-    </classname> created become invalid.\n-    Calling any method other than <methodname>isOpen</methodname> on a \n-    closed <classname>EntityManager</classname> results in an\n-    <classname>IllegalStateException</classname>.  You cannot close a \n-    <classname>EntityManager</classname> that is in the middle of a\n-    transaction.\n-    </para>\n+When an <classname>EntityManager</classname> is no longer needed, you should\n+call its <methodname>close</methodname> method. Closing an <classname>\n+EntityManager</classname> releases any resources it is using. The persistence\n+context ends, and the entities managed by the <classname>EntityManager\n+</classname> become detached. Any <classname>Query</classname> instances the\n+<classname>EntityManager</classname> created become invalid. Calling any method\n+other than <methodname>isOpen</methodname> on a closed <classname>EntityManager\n+</classname> results in an <classname>IllegalStateException</classname>. You\n+cannot close a <classname>EntityManager</classname> that is in the middle of a\n+transaction.\n+        </para>\n         <para>\n-    If you are in a managed environment using injected entity managers,\n-    you should not close them.  \n-    </para>\n-      </section>\n-    </chapter>\n+If you are in a managed environment using injected entity managers, you should\n+not close them.\n+        </para>\n+    </section>\n+</chapter>"},{"sha":"0a8f5b0114631403823fee230244446fe3efa679","filename":"openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","status":"modified","additions":297,"deletions":266,"changes":563,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,248 +1,274 @@\n-\n-    <chapter id=\"jpa_overview_emfactory\">\n-      <title>EntityManagerFactory</title>\n-      <indexterm zone=\"jpa_overview_emfactory\">\n-        <primary>EntityManagerFactory</primary>\n-      </indexterm>\n-      <mediaobject>\n+<chapter id=\"jpa_overview_emfactory\">\n+    <title>\n+        EntityManagerFactory\n+    </title>\n+    <indexterm zone=\"jpa_overview_emfactory\">\n+        <primary>\n+            EntityManagerFactory\n+        </primary>\n+    </indexterm>\n+    <mediaobject>\n         <imageobject>\n-<!-- PNG image data, 418 x 274 (see README) -->\n-          <imagedata fileref=\"img/entitymanagerfactory.png\" width=\"279px\"/>\n+            <!-- PNG image data, 418 x 274 (see README) -->\n+            <imagedata fileref=\"img/entitymanagerfactory.png\" width=\"279px\">\n+            </imagedata>\n         </imageobject>\n-      </mediaobject>\n-      <para>\n-  The <classname>EntityManagerFactory</classname> creates\n-  <classname>EntityManager</classname> instances for application\n-  use. \n-  </para>\n-      <note>\n-        <para>\n-    OpenJPA extends the standard <classname>EntityManagerFactory</classname>\n-    interface with the\n-    <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManagerFactory.html\"><classname>OpenJPAEntityManagerFactory</classname></ulink> to provide\n-    additional functionality.\n+    </mediaobject>\n+    <para>\n+The <classname>EntityManagerFactory</classname> creates <classname>\n+EntityManager</classname> instances for application use.\n     </para>\n-      </note>\n-      <section id=\"jpa_overview_emfactory_obtain\">\n-        <title>Obtaining an EntityManagerFactory</title>\n+    <note>\n+        <para>\n+OpenJPA extends the standard <classname>EntityManagerFactory</classname>\n+interface with the\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManagerFactory.html\">\n+<classname>OpenJPAEntityManagerFactory</classname></ulink> to provide additional\n+functionality.\n+        </para>\n+    </note>\n+    <section id=\"jpa_overview_emfactory_obtain\">\n+        <title>\n+            Obtaining an EntityManagerFactory\n+        </title>\n         <indexterm zone=\"jpa_overview_emfactory_obtain\">\n-          <primary>EntityManagerFactory</primary>\n-          <secondary>construction</secondary>\n+            <primary>\n+                EntityManagerFactory\n+            </primary>\n+            <secondary>\n+                construction\n+            </secondary>\n         </indexterm>\n         <indexterm>\n-          <primary>Java Connector Architecture</primary>\n-          <see>JCA</see>\n+            <primary>\n+                Java Connector Architecture\n+            </primary>\n+            <see>\n+                JCA\n+            </see>\n         </indexterm>\n         <indexterm>\n-          <primary>JCA</primary>\n+            <primary>\n+                JCA\n+            </primary>\n         </indexterm>\n         <para>\n-    Within a container, you will typically use <emphasis>injection\n-    </emphasis> to access an <classname>EntityManagerFactory</classname>.\n-    There are, however, alternative mechanisms for \n-    <classname>EntityManagerFactory</classname> construction.\n-    </para>\n+Within a container, you will typically use <emphasis>injection</emphasis> to\n+access an <classname>EntityManagerFactory</classname>. There are, however,\n+alternative mechanisms for <classname>EntityManagerFactory</classname>\n+construction.\n+        </para>\n         <para>\n-    Some vendors may supply public constructors for their \n-    <classname>EntityManagerFactory</classname> implementations, but\n-    we recommend using the Java Connector Architecture (JCA) in a managed \n-    environment, or the <classname>Persistence</classname> class'\n-    <methodname>createEntityManagerFactory</methodname> methods in an\n-    unmanaged environment, as described in\n-    <xref linkend=\"jpa_overview_persistence\"/>.  These strategies allow\n-    vendors to pool factories, cutting down on resource utilization.\n-    </para>\n-        <para><indexterm><primary>JNDI</primary></indexterm>\n-    JPA allows you to create and configure an\n-    <classname>EntityManagerFactory</classname>, then store it in a \n-    Java Naming and Directory Interface (JNDI) tree for later retrieval \n-    and use.\n-    </para>\n-      </section>\n-      <section id=\"jpa_overview_emfactory_em\">\n-        <title>Obtaining EntityManagers</title>\n+Some vendors may supply public constructors for their <classname>\n+EntityManagerFactory</classname> implementations, but we recommend using the\n+Java Connector Architecture (JCA) in a managed environment, or the <classname>\n+Persistence</classname> class' <methodname>createEntityManagerFactory\n+</methodname> methods in an unmanaged environment, as described in\n+<xref linkend=\"jpa_overview_persistence\"></xref>. These strategies allow\n+vendors to pool factories, cutting down on resource utilization.\n+        </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                JNDI\n+            </primary>\n+        </indexterm>\n+JPA allows you to create and configure an <classname>EntityManagerFactory\n+</classname>, then store it in a Java Naming and Directory Interface (JNDI)\n+tree for later retrieval and use.\n+        </para>\n+    </section>\n+    <section id=\"jpa_overview_emfactory_em\">\n+        <title>\n+            Obtaining EntityManagers\n+        </title>\n         <indexterm zone=\"jpa_overview_emfactory_em\">\n-          <primary>EntityManager</primary>\n-          <secondary>obtaining</secondary>\n-          <seealso>EntityManagerFactory</seealso>\n+            <primary>\n+                EntityManager\n+            </primary>\n+            <secondary>\n+                obtaining\n+            </secondary>\n+            <seealso>\n+                EntityManagerFactory\n+            </seealso>\n         </indexterm>\n         <indexterm zone=\"jpa_overview_emfactory_em\">\n-          <primary>EntityManagerFactory</primary>\n-          <secondary>obtaining EntityManagers</secondary>\n+            <primary>\n+                EntityManagerFactory\n+            </primary>\n+            <secondary>\n+                obtaining EntityManagers\n+            </secondary>\n         </indexterm>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public EntityManager createEntityManager ();\n public EntityManager createEntityManager (Map map);\n </programlisting>\n         <para>\n-    The two <methodname>createEntityManager</methodname> methods above\n-    create a new <classname>EntityManager</classname> each time they are \n-    invoked.  The optional <classname>Map</classname> is used to to supply\n-    vendor-specific settings.   If you have configured your implementation\n-    for JTA transactions and a JTA transaction is active, the returned \n-    <classname>EntityManager</classname> will be synchronized with that\n-    transaction.\n-    <!--\n-    <classname>EntityManager</classname> with a persistence context type of\n-    <literal>TRANSACTION</literal>.  The second version allows you to\n-    specify the persistence context type.  We relate the differences \n-    between persistence context types \n-    <link linkend=\"jpa_overview_emfactory_perscontext\">below</link>.\n-    -->\n-    </para>\n+The two <methodname>createEntityManager</methodname> methods above create a new\n+<classname>EntityManager</classname> each time they are invoked. The optional\n+<classname>Map</classname> is used to to supply vendor-specific settings. If you\n+have configured your implementation for JTA transactions and a JTA transaction\n+is active, the returned <classname>EntityManager</classname> will be \n+synchronized with that transaction.\n+        </para>\n         <note>\n-          <para>\n-      OpenJPA recognizes the following string keys in the map supplied to\n-      <methodname>createEntityManager</methodname>:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-                <literal>openjpa.ConnectionUserName</literal>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <literal>openjpa.ConnectionPassword</literal>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <literal>openjpa.ConnectionRetainMode</literal>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <literal>openjpa.TransactionMode</literal>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>openjpa.&lt;property&gt;</literal>, where \n-          <emphasis>&lt;property&gt;</emphasis> is any JavaBean\n-          property of the \n-          <ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManager.html\"><classname>\n-          org.apache.openjpa.persistence.OpenJPAEntityManager</classname></ulink>.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-      The last option uses reflection to configure any property of OpenJPA's\n-      <classname>EntityManager</classname> implementation with the value\n-      supplied in your map.  The first options correspond exactly to\n-      the same-named OpenJPA configuration keys described in\n-      <xref linkend=\"ref_guide_conf\"/> of the Reference Guide.\n-      </para>\n+            <para>\n+OpenJPA recognizes the following string keys in the map supplied to <methodname>\n+createEntityManager</methodname>:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+<literal>openjpa.ConnectionUserName</literal>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>openjpa.ConnectionPassword</literal>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>openjpa.ConnectionRetainMode</literal>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>openjpa.TransactionMode</literal>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>openjpa.&lt;property&gt;</literal>, where <emphasis>&lt;property&gt;\n+</emphasis> is any JavaBean property of the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n+<classname> org.apache.openjpa.persistence.OpenJPAEntityManager</classname>\n+</ulink>.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+The last option uses reflection to configure any property of OpenJPA's\n+<classname>EntityManager</classname> implementation with the value supplied in\n+your map. The first options correspond exactly to the same-named OpenJPA\n+configuration keys described in <xref linkend=\"ref_guide_conf\"></xref> of the\n+Reference Guide.\n+            </para>\n         </note>\n-      </section>\n-      <section id=\"jpa_overview_emfactory_perscontext\">\n-        <title>Persistence Context</title>\n+    </section>\n+    <section id=\"jpa_overview_emfactory_perscontext\">\n+        <title>\n+            Persistence Context\n+        </title>\n         <indexterm zone=\"jpa_overview_emfactory_perscontext\">\n-          <primary>persistence context</primary>\n+            <primary>\n+                persistence context\n+            </primary>\n         </indexterm>\n         <indexterm>\n-          <primary>PersistenceContextType</primary>\n-          <see>persistence context</see>\n+            <primary>\n+                PersistenceContextType\n+            </primary>\n+            <see>\n+                persistence context\n+            </see>\n         </indexterm>\n         <para>\n-    A persistence context is a set of entities such that for any persistent\n-    identity there is a unique entity instance.  Within a persistence\n-    context, entities are <emphasis>managed</emphasis>.  The <classname>\n-    EntityManager</classname> controls their lifecycle, and they can access\n-    datastore resources.\n-    </para>\n-        <para>\n-    When a persistence context ends, previously-managed entities become\n-    <emphasis>detached</emphasis>.  A detached entity is no longer under\n-    the control of the <classname>EntityManager</classname>, and no longer\n-    has access to datastore resources.  We discuss detachment is detail in\n-    <xref linkend=\"jpa_overview_em_lifecycle\"/>.  For now, it is sufficient\n-    to know that detachment as has two obvious consequences:\n-    </para>\n-        <orderedlist>\n-          <listitem>\n-            <para>\n-        The detached entity cannot load any additional persistent\n-        state.\n+A persistence context is a set of entities such that for any persistent identity\n+there is a unique entity instance. Within a persistence context, entities are\n+<emphasis>managed</emphasis>. The <classname> EntityManager</classname> controls\n+their lifecycle, and they can access datastore resources.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        The <classname>EntityManager</classname> will not return the\n-        detached entity from <methodname>find</methodname>, nor will\n-        queries include the detached entity in their results.  Instead,\n-        <methodname>find</methodname> method invocations and query \n-        executions that would normally incorporate the detached entity\n-        will create a new managed entity with the same identity.\n+        <para>\n+When a persistence context ends, previously-managed entities become <emphasis>\n+detached</emphasis>. A detached entity is no longer under the control of the\n+<classname>EntityManager</classname>, and no longer has access to datastore\n+resources. We discuss detachment is detail in\n+<xref linkend=\"jpa_overview_em_lifecycle\"></xref>. For now, it is sufficient to\n+know that detachment as has two obvious consequences:\n         </para>\n-          </listitem>\n+        <orderedlist>\n+            <listitem>\n+                <para>\n+The detached entity cannot load any additional persistent state.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+The <classname>EntityManager</classname> will not return the detached entity\n+from <methodname>find</methodname>, nor will queries include the detached\n+entity in their results. Instead, <methodname>find</methodname> method\n+invocations and query executions that would normally incorporate the detached\n+entity will create a new managed entity with the same identity.\n+                </para>\n+            </listitem>\n         </orderedlist>\n         <note>\n-          <para>\n-      OpenJPA offers several features related to detaching entities.  See\n-      <xref linkend=\"ref_guide_detach\"/> in the Reference Guide.  \n-      <xref linkend=\"ref_guide_detach_graph\"/> in particular describes\n-      how to use the <literal>DetachState</literal> setting to boost\n-      the performance of merging detached entities.\n-      </para>\n+            <para>\n+OpenJPA offers several features related to detaching entities. See\n+<xref linkend=\"ref_guide_detach\"></xref> in the Reference Guide.\n+<xref linkend=\"ref_guide_detach_graph\"></xref> in particular describes how to\n+use the <literal>DetachState</literal> setting to boost the performance of\n+merging detached entities.\n+            </para>\n         </note>\n-        <para> \n-    Injected <classname>EntityManager</classname>s have use a \n-    <emphasis>transaction</emphasis>, while <classname>\n-    EntityManager</classname>s obtained through the\n-    <classname>EntityManagerFactory</classname> have an <emphasis>\n-    extended</emphasis> persistence context.  We describe these persistence\n-    context types below.\n-    </para>\n+        <para>\n+Injected <classname>EntityManager</classname>s have use a <emphasis>transaction\n+</emphasis>, while <classname> EntityManager</classname>s obtained through the\n+<classname>EntityManagerFactory</classname> have an <emphasis> extended\n+</emphasis> persistence context. We describe these persistence context types\n+below.\n+        </para>\n         <section id=\"jpa_overview_emfactory_perscontext_trans\">\n-          <title>Transaction Persistence Context</title>\n-          <para>\n-      Under the transaction persistence context featureSelection, an <classname>\n-      EntityManager</classname> begins a new persistence context\n-      with each transaction, and ends the context when the transaction \n-      commits or rolls back.  Within the transaction, entities you\n-      retrieve through the <classname>EntityManager</classname> or via\n-      <classname>Queries</classname> are managed entities.  They \n-      can access datastore resources to lazy-load additional \n-      persistent state as needed, and only one entity may exist for any \n-      persistent identity.\n-      </para>\n-          <para>\n-      When the transaction completes, all entities lose their \n-      association with the <classname>EntityManager</classname> and \n-      become detached.  Traversing a persistent field that wasn't\n-      already loaded now has undefined results.  And using the <classname>\n-      EntityManager</classname> or a <classname>Query</classname> to \n-      retrieve additional objects may now create new instances with the \n-      same persistent identities as detached instances. \n-      </para>\n-          <para>\n-      If you use an <classname>EntityManager</classname> with a \n-      transaction persistence context featureSelection outside of \n-      an active transaction, each method invocation creates a new \n-      persistence context, performs the method action, and ends the \n-      persistence context.  For example, consider using the\n-      <methodname>EntityManager.find</methodname> method outside \n-      of a transaction.  The <classname>EntityManager</classname> will \n-      create a temporary persistence context, perform the find operation,\n-      end the persistence context, and return the detached result object \n-      to you.  A second call with the same id will return a second \n-      detached object.\n-      </para>\n-          <para>\n-      When the next transaction begins, the <classname>EntityManager\n-      </classname> will begin a new persistence context, and will again\n-      start returning managed entities.  As you'll see in\n-      <xref linkend=\"jpa_overview_em\"/>, you can also merge the\n-      previously-detached entites back into the new persistence context.\n-      </para>\n-          <example id=\"jpa_overview_emfactory_perscontext_transex\">\n-            <title>Behavior of Transaction Persistence Context</title>\n+            <title>\n+                Transaction Persistence Context\n+            </title>\n             <para>\n-        The following code illustrates the behavior of entites under\n-        an <classname>EntityManager</classname> using a transaction\n-        persistence context.\n-        </para>\n-            <programlisting format=\"linespecific\">\n+Under the transaction persistence context featureSelection, an <classname> EntityManager\n+</classname> begins a new persistence context with each transaction, and ends\n+the context when the transaction commits or rolls back. Within the transaction,\n+entities you retrieve through the <classname>EntityManager</classname> or via\n+<classname>Queries</classname> are managed entities. They can access datastore\n+resources to lazy-load additional persistent state as needed, and only one\n+entity may exist for any persistent identity.\n+            </para>\n+            <para>\n+When the transaction completes, all entities lose their association with the\n+<classname>EntityManager</classname> and become detached. Traversing a\n+persistent field that wasn't already loaded now has undefined results. And using\n+the <classname> EntityManager</classname> or a <classname>Query</classname> to\n+retrieve additional objects may now create new instances with the same\n+persistent identities as detached instances.\n+            </para>\n+            <para>\n+If you use an <classname>EntityManager</classname> with a transaction\n+persistence context featureSelection outside of an active transaction, each method\n+invocation creates a new persistence context, performs the method action, and\n+ends the persistence context. For example, consider using the <methodname>\n+EntityManager.find</methodname> method outside of a transaction. The <classname>\n+EntityManager</classname> will create a temporary persistence context, perform\n+the find operation, end the persistence context, and return the detached result\n+object to you. A second call with the same id will return a second detached\n+object.\n+            </para>\n+            <para>\n+When the next transaction begins, the <classname>EntityManager</classname> will\n+begin a new persistence context, and will again start returning managed\n+entities. As you'll see in <xref linkend=\"jpa_overview_em\"></xref>, you can\n+also merge the previously-detached entites back into the new persistence\n+context.\n+            </para>\n+            <example id=\"jpa_overview_emfactory_perscontext_transex\">\n+                <title>\n+                    Behavior of Transaction Persistence Context\n+                </title>\n+                <para>\n+The following code illustrates the behavior of entites under an <classname>\n+EntityManager</classname> using a transaction persistence context.\n+                </para>\n+<programlisting>\n EntityManager em; // injected\n ...\n \n@@ -273,29 +299,30 @@ assertTrue (mag4 == mag3);\n Magazine mag5 = em.find (Magazine.class, magId);\n assertTrue (mag5 != mag3);\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"jpa_overview_emfactory_perscontext_extend\">\n-          <title>Extended Persistence Context</title>\n-          <para>\n-      An <classname>EntityManager</classname> using an extended \n-      persistence context maintains the same persistence context for\n-      its entire lifecycle.  Whether inside a transaction or not, all \n-      entities returned from the <classname>EntityManager</classname> \n-      are managed, and the <classname>EntityManager</classname> never \n-      creates two entity instances to represent the same persistent \n-      identity.  Entities only become detached when you finally close \n-      the <classname>EntityManager</classname> (or when they are \n-      serialized).\n-      </para>\n-          <example id=\"jpa_overview_emfactory_perscontext_extendex\">\n-            <title>Behavior of Extended Persistence Context</title>\n+            <title>\n+                Extended Persistence Context\n+            </title>\n             <para>\n-        The following code illustrates the behavior of entites under\n-        an <classname>EntityManager</classname> using an extended\n-        persistence context.\n-        </para>\n-            <programlisting format=\"linespecific\">\n+An <classname>EntityManager</classname> using an extended persistence context\n+maintains the same persistence context for its entire lifecycle. Whether inside\n+a transaction or not, all entities returned from the <classname>EntityManager\n+</classname> are managed, and the <classname>EntityManager</classname> never\n+creates two entity instances to represent the same persistent identity. Entities\n+only become detached when you finally close the <classname>EntityManager\n+</classname> (or when they are serialized).\n+            </para>\n+            <example id=\"jpa_overview_emfactory_perscontext_extendex\">\n+                <title>\n+                    Behavior of Extended Persistence Context\n+                </title>\n+                <para>\n+The following code illustrates the behavior of entites under an <classname>\n+EntityManager</classname> using an extended persistence context.\n+                </para>\n+<programlisting>\n EntityManagerFactory emf = ...\n EntityManager em = emf.createEntityManager (PersistenceContextType.EXTENDED);\n \n@@ -322,44 +349,48 @@ assertTrue (mag5 == mag1);\n // instance finally becomes detached when EM closes\n em.close ();\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n-      </section>\n-      <section id=\"jpa_overview_emfactory_close\">\n-        <title>Closing the EntityManagerFactory</title>\n+    </section>\n+    <section id=\"jpa_overview_emfactory_close\">\n+        <title>\n+            Closing the EntityManagerFactory\n+        </title>\n         <indexterm zone=\"jpa_overview_emfactory_close\">\n-          <primary>EntityManagerFactory</primary>\n-          <secondary>closing</secondary>\n+            <primary>\n+                EntityManagerFactory\n+            </primary>\n+            <secondary>\n+                closing\n+            </secondary>\n         </indexterm>\n-        <programlisting format=\"linespecific\">\n+<programlisting>\n public boolean isOpen ();\n public void close ();\n </programlisting>\n-        <para><classname>EntityManagerFactory</classname> instances are\n-    heavyweight objects.  Each factory might maintain a metadata cache,\n-    object state cache, <classname>EntityManager</classname> pool, \n-    connection pool, and more.  If your application no longer needs an \n-    <classname>EntityManagerFactory</classname>, you should close it\n-    to free these resources.  When an <classname>EntityManagerFactory\n-    </classname> closes, all <classname>EntityManager</classname>s \n-    from that factory, and by extension all entities managed\n-    by those <classname>EntityManager</classname>s, become invalid.\n-    Attempting to close an <classname>EntityManagerFactory</classname>\n-    while one or more of its <classname>EntityManager</classname>s \n-    has an active transaction may result in an\n-    <classname>IllegalStateException</classname>.\n-    </para>\n         <para>\n-    Closing an <classname>EntityManagerFactory</classname> should not\n-    be taken lightly.  It is much better to keep a factory open for a long\n-    period of time than to repeatedly create and close new factories.  Thus,\n-    most applications will never close the factory, or only close it when\n-    the application is exiting.  Only applications that require multiple\n-    factories with different configurations have an obvious reason to\n-    create and close multiple <classname>EntityManagerFactory\n-    </classname> instances.  Once a factory is closed, all methods except\n-    <methodname>isOpen</methodname> throw an <classname>\n-    IllegalStateException</classname>.\n-    </para>\n-      </section>\n-    </chapter>\n+<classname>EntityManagerFactory</classname> instances are heavyweight objects.\n+Each factory might maintain a metadata cache, object state cache, <classname>\n+EntityManager</classname> pool, connection pool, and more. If your application\n+no longer needs an <classname>EntityManagerFactory</classname>, you should\n+close it to free these resources. When an <classname>EntityManagerFactory\n+</classname> closes, all <classname>EntityManager</classname>s from that\n+factory, and by extension all entities managed by those <classname>\n+EntityManager</classname> s, become invalid. Attempting to close an <classname>\n+EntityManagerFactory</classname> while one or more of its <classname>\n+EntityManager</classname>s has an active transaction may result in an\n+<classname>IllegalStateException</classname>.\n+        </para>\n+        <para>\n+Closing an <classname>EntityManagerFactory</classname> should not be taken\n+lightly. It is much better to keep a factory open for a long period of time than\n+to repeatedly create and close new factories. Thus, most applications will never\n+close the factory, or only close it when the application is exiting. Only\n+applications that require multiple factories with different configurations have\n+an obvious reason to create and close multiple <classname>EntityManagerFactory\n+</classname> instances. Once a factory is closed, all methods except\n+<methodname>isOpen</methodname> throw an <classname> IllegalStateException\n+</classname>.\n+        </para>\n+    </section>\n+</chapter>"},{"sha":"69a02b32bb44330114fc3314ff5a738bdfb8df1d","filename":"openjpa-project/src/doc/manual/jpa_overview_intro.xml","status":"modified","additions":75,"deletions":52,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_intro.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_intro.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_intro.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,57 +1,80 @@\n-\n-    <chapter id=\"jpa_overview_intro\">\n-      <title>Introduction</title>\n-      <para><indexterm><primary>EJB3 Persistence</primary><see>EJB</see></indexterm><indexterm><primary>EJB</primary></indexterm>\n-  Enterprise Java Beans 3.0 Persistence (EJB persistence) is a specification \n-  from Sun Microsystems for the persistence of Java objects to any relational\n-  datastore.  EJB persistence requires J2SE 1.5 (also referred to as \"Java 5\")\n-  or higher, as it makes heavy use of new Java language features such as\n-  annotations and generics.  This document provides an overview of EJB \n-  persistence.  Unless otherwise noted, the information presented\n-  applies to all EJB persistence implementations.\n-  </para>\n-      <note>\n-        <para>\n-    This document describes the Public Draft of the EJB 3.0\n-    persistence specification.\n+<chapter id=\"jpa_overview_intro\">\n+    <title>\n+        Introduction\n+    </title>\n+    <para>\n+    <indexterm>\n+        <primary>\n+            EJB3 Persistence\n+        </primary>\n+        <see>\n+            JPA\n+        </see>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            JPA\n+        </primary>\n+    </indexterm>\n+The Java Persistence API (JPA) is a specification from\n+Sun Microsystems for the persistence of Java objects to any relational\n+datastore. JPA requires J2SE 1.5 (also referred to as \"Java 5\") or\n+higher, as it makes heavy use of new Java language features such as annotations\n+and generics. This document provides an overview of JPA. Unless\n+otherwise noted, the information presented applies to all JPA implementations.\n     </para>\n+    <note>\n         <para>\n-    For coverage of OpenJPA's many extensions to the EJB persistence \n-    specification, see the <link linkend=\"ref_guide_intro\">Reference\n-    Guide</link>.\n-    </para>\n-      </note>\n-      <section id=\"jpa_overview_intro_audience\">\n-        <title>Intended Audience</title>\n+For coverage of OpenJPA's many extensions to the JPA specification,\n+see the <link linkend=\"ref_guide_intro\">Reference Guide</link>.\n+        </para>\n+    </note>\n+    <section id=\"jpa_overview_intro_audience\">\n+        <title>\n+            Intended Audience\n+        </title>\n         <para>\n-    This document is intended for developers who want to learn about\n-    EJB persistence in order to use it in their applications.\n-    It assumes that you have a strong knowledge of object-oriented concepts\n-    and Java, including Java 5 annotations and generics.  It also assumes\n-    some experience with relational databases and the \n-    Structured Query Language (SQL).\n-    </para>\n-      </section>\n-      <section id=\"jpa_overview_intro_transpers\">\n-        <title>Lightweight Persistence</title>\n+This document is intended for developers who want to learn about JPA\n+in order to use it in their applications. It assumes that you have a strong\n+knowledge of object-oriented concepts and Java, including Java 5 annotations and\n+generics. It also assumes some experience with relational databases and the\n+Structured Query Language (SQL).\n+        </para>\n+    </section>\n+    <section id=\"jpa_overview_intro_transpers\">\n+        <title>\n+            Lightweight Persistence\n+        </title>\n         <indexterm zone=\"jpa_overview_intro_transpers\">\n-          <primary>lightweight persistence</primary>\n+            <primary>\n+                lightweight persistence\n+            </primary>\n         </indexterm>\n-        <para><indexterm><primary>persistent data</primary></indexterm><emphasis>Persistent data</emphasis> is information that can\n-    outlive the program that creates it.  The majority of complex\n-    programs use persistent data: GUI applications need to store user \n-    preferences across program invocations, web applications track \n-    user movements and orders over long periods of time, etc.\n-    </para>\n-        <para><emphasis>Lightweight persistence</emphasis> is the storage and \n-    retrieval of persistent data with little or no work from you, the \n-    developer.  For example, Java serialization<indexterm><primary>serialization</primary></indexterm> is a form of \n-    lightweight persistence because it can be used to persist Java \n-    objects directly to a file with very little effort.  Serialization's\n-    capabilities as a lightweight persistence mechanism pale in \n-    comparison to those provided by EJB, however.  The next\n-    chapter compares EJB to serialization and other available\n-    persistence mechanisms.\n-    </para>\n-      </section>\n-    </chapter>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                persistent data\n+            </primary>\n+        </indexterm>\n+<emphasis>Persistent data</emphasis> is information that can outlive the program\n+that creates it. The majority of complex programs use persistent data: GUI\n+applications need to store user preferences across program invocations, web\n+applications track user movements and orders over long periods of time, etc.\n+        </para>\n+        <para>\n+<emphasis>Lightweight persistence</emphasis> is the storage and retrieval of\n+persistent data with little or no work from you, the developer. For example,\n+Java serialization\n+        <indexterm>\n+            <primary>\n+                serialization\n+            </primary>\n+        </indexterm>\n+is a form of lightweight persistence because it can be used to persist Java\n+objects directly to a file with very little effort. Serialization's capabilities\n+as a lightweight persistence mechanism pale in comparison to those provided by\n+JPA, however. The next chapter compares JPA to serialization and other available\n+persistence mechanisms.\n+        </para>\n+    </section>\n+</chapter>"},{"sha":"e3f339c19e8bd1631c9b54b79d04467d28062fb6","filename":"openjpa-project/src/doc/manual/jpa_overview_mapping.xml","status":"modified","additions":2533,"deletions":1914,"changes":4447,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_mapping.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"341368cb88a4a34ac5084de8e2fab5af8c535495","filename":"openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"modified","additions":1733,"deletions":1437,"changes":3170,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"6e1e1b54a7e01792a71e0ed92b2e999d80c32fcf","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":1122,"deletions":824,"changes":1946,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,56 +1,72 @@\n-\n-    <chapter id=\"jpa_overview_pc\">\n-      <title>Entity</title>\n-      <indexterm zone=\"jpa_overview_pc\">\n-        <primary>persistent classes</primary>\n-      </indexterm>\n-      <indexterm zone=\"jpa_overview_pc\">\n-        <primary>Entity</primary>\n-        <seealso>persistent classes</seealso>\n-      </indexterm>\n-      <indexterm>\n-        <primary>class</primary>\n-        <secondary>persistent</secondary>\n-        <see>persistent classes</see>\n-      </indexterm>\n-      <indexterm>\n-        <primary>persistence capable</primary>\n-        <see>Entity</see>\n-      </indexterm>\n-      <para>\n-  JPA recognizes two types of persistent classes: <emphasis>\n-  entity</emphasis> classes and <emphasis>embeddable</emphasis> classes.\n-  Each persistent instance of an entity class - each \n-  <emphasis>entity</emphasis> - represents a unique datastore\n-  record.  You can use the <classname>EntityManager</classname> to find an \n-  entity by its persistent identity (covered later in this chapter), or use \n-  a <classname>Query</classname> to find entities matching certain criteria.  \n-  </para>\n-      <para>\n-  An instance of an embeddable class, on the other hand, is only stored\n-  as part of a separate entity.  Embeddable instances have no\n-  persistent identity, and are never returned directly from the\n-  <classname>EntityManager</classname> or from a <classname>Query</classname>.\n-  </para>\n-      <para>\n-  Despite these differences, there are few differences between entity classes\n-  and embeddable classes.  In fact, writing either type\n-  of persistent class is little different than writing any other \n-  class.  There are no special parent classes to extend from, field types to \n-  use, or methods to write.  This is one important way in which JPA makes\n-  persistence transparent to you, the developer.\n-  </para>\n-      <note>\n-        <para>\n-    JPA supports both fields and JavaBean properties\n-    as persistent state.  For simplicity, however, we will\n-    refer to all persistent state as persistent fields, unless we\n-    want to note a unique aspect of persistent properties.\n+<chapter id=\"jpa_overview_pc\">\n+    <title>\n+        Entity\n+    </title>\n+    <indexterm zone=\"jpa_overview_pc\">\n+        <primary>\n+            persistent classes\n+        </primary>\n+    </indexterm>\n+    <indexterm zone=\"jpa_overview_pc\">\n+        <primary>\n+            Entity\n+        </primary>\n+        <seealso>\n+            persistent classes\n+        </seealso>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            class\n+        </primary>\n+        <secondary>\n+            persistent\n+        </secondary>\n+        <see>\n+            persistent classes\n+        </see>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            persistence capable\n+        </primary>\n+        <see>\n+            Entity\n+        </see>\n+    </indexterm>\n+    <para>\n+JPA recognizes two types of persistent classes: <emphasis> entity</emphasis>\n+classes and <emphasis>embeddable</emphasis> classes. Each persistent instance of\n+an entity class - each <emphasis>entity</emphasis> - represents a unique\n+datastore record. You can use the <classname>EntityManager</classname> to find\n+an entity by its persistent identity (covered later in this chapter), or use a\n+<classname>Query</classname> to find entities matching certain criteria.\n+    </para>\n+    <para>\n+An instance of an embeddable class, on the other hand, is only stored as part of\n+a separate entity. Embeddable instances have no persistent identity, and are\n+never returned directly from the <classname>EntityManager</classname> or from a\n+<classname>Query</classname>.\n+    </para>\n+    <para>\n+Despite these differences, there are few differences between entity classes and\n+embeddable classes. In fact, writing either type of persistent class is little\n+different than writing any other class. There are no special parent classes to\n+extend from, field types to use, or methods to write. This is one important way\n+in which JPA makes persistence transparent to you, the developer.\n     </para>\n-      </note>\n-      <example id=\"jpa_overview_pc_pcclass\">\n-        <title>Persistent Class</title>\n-        <programlisting format=\"linespecific\">\n+    <note>\n+        <para>\n+JPA supports both fields and JavaBean properties as persistent state. For\n+simplicity, however, we will refer to all persistent state as persistent fields,\n+unless we want to note a unique aspect of persistent properties.\n+        </para>\n+    </note>\n+    <example id=\"jpa_overview_pc_pcclass\">\n+        <title>\n+            Persistent Class\n+        </title>\n+<programlisting>\n package org.mag;\n \n /**\n@@ -99,504 +115,723 @@ public class Magazine\n     // rest of methods omitted\n }\n </programlisting>\n-      </example>\n-      <section id=\"jpa_overview_pc_restrict\">\n-        <title>Restrictions on Persistent Classes</title>\n+    </example>\n+    <section id=\"jpa_overview_pc_restrict\">\n+        <title>\n+            Restrictions on Persistent Classes\n+        </title>\n         <indexterm zone=\"jpa_overview_pc_restrict\">\n-          <primary>persistent classes</primary>\n-          <secondary>restrictions on</secondary>\n+            <primary>\n+                persistent classes\n+            </primary>\n+            <secondary>\n+                restrictions on\n+            </secondary>\n         </indexterm>\n         <para>\n-    There are very few restrictions placed on persistent classes.\n-    Still, it never hurts to familiarize yourself with exactly what\n-    JPA does and does not support.\n-    </para>\n+There are very few restrictions placed on persistent classes. Still, it never\n+hurts to familiarize yourself with exactly what JPA does and does not support.\n+        </para>\n         <section id=\"jpa_overview_pc_no_arg\">\n-          <title>Default or No-Arg Constructor</title>\n-          <indexterm zone=\"jpa_overview_pc_no_arg\">\n-            <primary>persistent classes</primary>\n-            <secondary>no-arg constructor requirement</secondary>\n-          </indexterm>\n-          <indexterm>\n-            <primary>constructor</primary>\n-            <secondary>no-arg constructor requirement</secondary>\n-          </indexterm>\n-          <para>\n-      The JPA specification requires that all persistent\n-      classes have a no-arg constructor.  This constructor\n-      may be public or protected.  Because the compiler automatically\n-      creates a default no-arg constructor when no other constructor\n-      is defined, only classes that define constructors must also\n-      include a no-arg constructor.\n-      </para>\n-          <note>\n+            <title>\n+                Default or No-Arg Constructor\n+            </title>\n+            <indexterm zone=\"jpa_overview_pc_no_arg\">\n+                <primary>\n+                    persistent classes\n+                </primary>\n+                <secondary>\n+                    no-arg constructor requirement\n+                </secondary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    constructor\n+                </primary>\n+                <secondary>\n+                    no-arg constructor requirement\n+                </secondary>\n+            </indexterm>\n             <para>\n-        OpenJPA's <emphasis>enhancer</emphasis> will automatically add a \n-        protected no-arg constructor to your class when required.  \n-        Therefore, this restriction does not apply when using\n-        OpenJPA.  See <xref linkend=\"ref_guide_pc_enhance\"/> \n-        of the Reference Guide for details.\n-        </para>\n-          </note>\n+The JPA specification requires that all persistent classes have a no-arg\n+constructor. This constructor may be public or protected. Because the compiler\n+automatically creates a default no-arg constructor when no other constructor is\n+defined, only classes that define constructors must also include a no-arg\n+constructor.\n+            </para>\n+            <note>\n+                <para>\n+OpenJPA's <emphasis>enhancer</emphasis> will automatically add a protected\n+no-arg constructor to your class when required. Therefore, this restriction does\n+not apply when using OpenJPA. See <xref linkend=\"ref_guide_pc_enhance\"></xref>\n+of the Reference Guide for details.\n+                </para>\n+            </note>\n         </section>\n         <section id=\"jpa_overview_pc_final\">\n-          <title>Final</title>\n-          <para>\n-      Entity classes may not be final.  No method of an entity class can\n-      be final.\n-      </para>\n-          <note>\n+            <title>\n+                Final\n+            </title>\n             <para>\n-        OpenJPA supports final classes and final methods.\n-        </para>\n-          </note>\n+Entity classes may not be final. No method of an entity class can be final.\n+            </para>\n+            <note>\n+                <para>\n+OpenJPA supports final classes and final methods.\n+                </para>\n+            </note>\n         </section>\n         <section id=\"jpa_overview_pc_id\">\n-          <title>Identity Fields</title>\n-          <indexterm zone=\"jpa_overview_pc_id\">\n-            <primary>identity fields</primary>\n-            <seealso>persistent fields</seealso>\n-          </indexterm>\n-          <indexterm zone=\"jpa_overview_pc_id\">\n-            <primary>persistent classes</primary>\n-            <secondary>JPA id requirement</secondary>\n-          </indexterm>\n-          <para>\n-      All entity classes must declare one or more fields which together\n-      form the persistent identity of an instance.  These are called \n-      <emphasis>identity</emphasis> or <emphasis>primary key</emphasis>\n-      fields.  In our <classname>Magazine</classname> class, \n-      <literal>isbn</literal> and\n-      <literal>title</literal> are identity fields, because no two \n-      magazine records in the datastore can have the same \n-      <literal>isbn</literal> and <literal>title</literal> values.\n-      <xref linkend=\"jpa_overview_meta_id\"/> will show you how to denote \n-      your identity fields in JPA metadata.  \n-      <xref linkend=\"jpa_overview_pc_identity\"/> below examines \n-      persistent identity.\n-      </para>\n-          <note>\n+            <title>\n+                Identity Fields\n+            </title>\n+            <indexterm zone=\"jpa_overview_pc_id\">\n+                <primary>\n+                    identity fields\n+                </primary>\n+                <seealso>\n+                    persistent fields\n+                </seealso>\n+            </indexterm>\n+            <indexterm zone=\"jpa_overview_pc_id\">\n+                <primary>\n+                    persistent classes\n+                </primary>\n+                <secondary>\n+                    JPA id requirement\n+                </secondary>\n+            </indexterm>\n             <para>\n-        OpenJPA fully supports identity fields, but does not require them.\n-        See <xref linkend=\"ref_guide_pc_oid\"/> of the Reference\n-        Guide for details.\n-        </para>\n-          </note>\n+All entity classes must declare one or more fields which together form the\n+persistent identity of an instance. These are called <emphasis>identity\n+</emphasis> or <emphasis>primary key</emphasis> fields. In our <classname>\n+Magazine</classname> class, <literal>isbn</literal> and <literal>title</literal>\n+are identity fields, because no two magazine records in the datastore can have\n+the same <literal>isbn</literal> and <literal>title</literal> values.\n+<xref linkend=\"jpa_overview_meta_id\"></xref> will show you how to denote your\n+identity fields in JPA metadata. <xref linkend=\"jpa_overview_pc_identity\">\n+</xref> below examines persistent identity.\n+            </para>\n+            <note>\n+                <para>\n+OpenJPA fully supports identity fields, but does not require them. See\n+<xref linkend=\"ref_guide_pc_oid\"></xref> of the Reference Guide for details.\n+                </para>\n+            </note>\n         </section>\n         <section id=\"jpa_overview_pc_version\">\n-          <title>Version Field</title>\n-          <indexterm zone=\"jpa_overview_pc_version\">\n-            <primary>version fields</primary>\n-            <seealso>persistent fields</seealso>\n-          </indexterm>\n-          <indexterm zone=\"jpa_overview_pc_version\">\n-            <primary>persistent classes</primary>\n-            <secondary>JPA version requirement</secondary>\n-          </indexterm>\n-          <para>\n-      The <literal>version</literal> field in our <classname>Magazine\n-      </classname> class may seem out of place.\n-      JPA uses a version field in your entity to detect\n-      concurrent modifications to the same datastore record.  When the\n-      JPA runtime detects an attempt to concurrently modify \n-      the same record, it throws an exception to the transaction \n-      attempting to commit last.  This prevents overwriting the previous\n-      commit with stale data.\n-      </para>\n-          <para>\n-      The version field is not required, but without one concurrent \n-      threads or processes might succeed in making conflicting changes \n-      to the same record at the same time.  This is unacceptable to most\n-      applications.  <xref linkend=\"jpa_overview_meta_version\"/>\n-      shows you how to designate a version field in JPA metadata.\n-      </para>\n-          <para>\n-      The version field must be an integral type (<classname>\n-      int</classname>, <classname>Long</classname>, etc) or a \n-      <classname>java.sql.Timestamp</classname>.  You should consider\n-      version fields immutable.  Changing the field value has undefined\n-      results.\n-      </para>\n-          <note>\n+            <title>\n+                Version Field\n+            </title>\n+            <indexterm zone=\"jpa_overview_pc_version\">\n+                <primary>\n+                    version fields\n+                </primary>\n+                <seealso>\n+                    persistent fields\n+                </seealso>\n+            </indexterm>\n+            <indexterm zone=\"jpa_overview_pc_version\">\n+                <primary>\n+                    persistent classes\n+                </primary>\n+                <secondary>\n+                    JPA version requirement\n+                </secondary>\n+            </indexterm>\n             <para>\n-        OpenJPA fully supports version fields, but does not require them\n-        for concurrency detection.  OpenJPA can maintain \n-        surrogate version values or use state comparisons to detect \n-        concurrent modifications.  See \n-        <xref linkend=\"ref_guide_mapping_ejb\"/> in the Reference Guide.\n-        </para>\n-          </note>\n+The <literal>version</literal> field in our <classname>Magazine</classname>\n+class may seem out of place. JPA uses a version field in your entity to detect\n+concurrent modifications to the same datastore record. When the JPA runtime\n+detects an attempt to concurrently modify the same record, it throws an\n+exception to the transaction attempting to commit last. This prevents\n+overwriting the previous commit with stale data.\n+            </para>\n+            <para>\n+The version field is not required, but without one concurrent threads or\n+processes might succeed in making conflicting changes to the same record at the\n+same time. This is unacceptable to most applications.\n+<xref linkend=\"jpa_overview_meta_version\"></xref> shows you how to designate a\n+version field in JPA metadata.\n+            </para>\n+            <para>\n+The version field must be an integral type ( <classname> int</classname>,\n+<classname>Long</classname>, etc) or a <classname>java.sql.Timestamp</classname>\n+. You should consider version fields immutable. Changing the field value has\n+undefined results.\n+            </para>\n+            <note>\n+                <para>\n+OpenJPA fully supports version fields, but does not require them for concurrency\n+detection. OpenJPA can maintain surrogate version values or use state\n+comparisons to detect concurrent modifications. See\n+<xref linkend=\"ref_guide_mapping_jpa\"></xref> in the Reference Guide.\n+                </para>\n+            </note>\n         </section>\n         <section id=\"jpa_overview_pc_restrict_inheritance\">\n-          <title>Inheritance</title>\n-          <indexterm zone=\"jpa_overview_pc_restrict_inheritance\">\n-            <primary>persistent classes</primary>\n-            <secondary>inheritance of</secondary>\n-            <seealso>inheritance</seealso>\n-          </indexterm>\n-          <indexterm>\n-            <primary>inheritance</primary>\n-            <secondary>of persistent classes</secondary>\n-          </indexterm>\n-          <para>\n-      JPA fully supports inheritance in persistent classes.  \n-      It allows persistent classes to inherit from non-persistent classes,\n-      persistent classes to inherit from other persistent classes,\n-      and non-persistent classes to inherit from persistent classes.\n-      It is even possible to form inheritance hierarchies in which\n-      persistence skips generations.  There are, however, a few \n-      important limitations:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-          Persistent classes cannot inherit from certain\n-          natively-implemented system classes such as\n-          <classname>java.net.Socket</classname> and \n-          <classname>java.lang.Thread</classname>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          If a persistent class inherits from a non-persistent\n-          class, the fields of the non-persistent superclass\n-          cannot be persisted.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          All classes in an inheritance tree must use the same\n-          identity type.  We cover entity identity in\n-          <xref linkend=\"jpa_overview_pc_identity\"/>.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n+            <title>\n+                Inheritance\n+            </title>\n+            <indexterm zone=\"jpa_overview_pc_restrict_inheritance\">\n+                <primary>\n+                    persistent classes\n+                </primary>\n+                <secondary>\n+                    inheritance of\n+                </secondary>\n+                <seealso>\n+                    inheritance\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    inheritance\n+                </primary>\n+                <secondary>\n+                    of persistent classes\n+                </secondary>\n+            </indexterm>\n+            <para>\n+JPA fully supports inheritance in persistent classes. It allows persistent\n+classes to inherit from non-persistent classes, persistent classes to inherit\n+from other persistent classes, and non-persistent classes to inherit from\n+persistent classes. It is even possible to form inheritance hierarchies in which\n+persistence skips generations. There are, however, a few important limitations:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Persistent classes cannot inherit from certain natively-implemented system\n+classes such as <classname>java.net.Socket</classname> and <classname>\n+java.lang.Thread</classname>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+If a persistent class inherits from a non-persistent class, the fields of the\n+non-persistent superclass cannot be persisted.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+All classes in an inheritance tree must use the same identity type. We cover\n+entity identity in <xref linkend=\"jpa_overview_pc_identity\"></xref>.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n         <section id=\"jpa_overview_pc_restrict_fields\">\n-          <title>Persistent Fields</title>\n-          <indexterm zone=\"jpa_overview_pc_restrict_fields\">\n-            <primary>persistent classes</primary>\n-            <secondary>field restrictions</secondary>\n-            <seealso>persistent fields</seealso>\n-          </indexterm>\n-          <indexterm>\n-            <primary>field</primary>\n-            <secondary>persistent</secondary>\n-            <see>persistent fields</see>\n-          </indexterm>\n-          <indexterm zone=\"jpa_overview_pc_restrict_fields\">\n-            <primary>persistent fields</primary>\n-            <secondary>restrictions on</secondary>\n-          </indexterm>\n-          <para>\n-      JPA manages the state of all persistent fields.\n-      Before you access persistent state, the JPA runtime\n-      makes sure that it has been loaded from the datastore.  When you \n-      set a field, the runtime records that it has changed so that \n-      the new value will be persisted.  This allows you to treat the \n-      field in exactly the same way you treat any other field - another \n-      aspect of JPA's transparency.\n-      </para>\n-          <para>\n-      JPA does not support static or final fields.\n-      It does, however, include built-in support for most \n-      common field types.  These types can be roughly divided into three \n-      categories: immutable types, mutable types, and relations.\n-      </para>\n-          <para><indexterm><primary>persistent fields</primary><secondary>immutable types</secondary></indexterm><indexterm><primary>immutable</primary><secondary>persistent field types</secondary></indexterm><emphasis>Immutable</emphasis> types, once created, cannot be   \n-      changed.  The only way to alter a persistent field of an immutable \n-      type is to assign a new value to the field.  JPA \n-      supports the following immutable types:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-          All primitives (<classname>int, float, byte</classname>,\n-          etc)\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          All primitive wrappers (<classname>java.lang.Integer,\n-          java.lang.Float, java.lang.Byte</classname>, etc)\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <classname>java.lang.String</classname>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <classname>java.math.BigInteger</classname>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <classname>java.math.BigDecimal</classname>\n-              </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-      JPA also supports <classname>byte[]</classname> and\n-      <classname>char[]</classname> as immutable types.  That is, you\n-      can persist fields of these types, but you should not manipulate\n-      individual array indexes without resetting the array into the \n-      persistent field.\n-      </para>\n-<!-- ### EJB3 : Byte[], Character[] -->\n-          <para><indexterm><primary>persistent fields</primary><secondary>mutable types</secondary><seealso>proxies</seealso></indexterm><indexterm><primary>mutable</primary><secondary>persistent field types</secondary><seealso>persistent fields</seealso><seealso>proxies</seealso></indexterm><indexterm><primary>persistent fields</primary><secondary>user-defined types</secondary></indexterm><indexterm><primary>user-defined</primary><secondary>persistent field types</secondary><seealso>persistent fields</seealso></indexterm>\n-      Persistent fields of <emphasis>mutable</emphasis> types \n-      can be altered without assigning the field a new value.\n-      Mutable types can be modified directly through their own\n-      methods.  The JPA specification requires that\n-      implementations support the following mutable field types:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-                <classname>java.util.Date</classname>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <classname>java.util.Calendar</classname>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <classname>java.sql.Date</classname>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-                <classname>java.sql.Timestamp</classname>\n-              </para>\n-            </listitem>\n-            <listitem>\n-              <para>Enums</para>\n-            </listitem>\n-            <listitem>\n-              <para>Entity types (relations between entities)</para>\n-            </listitem>\n-            <listitem>\n-              <para>Embeddable types</para>\n-            </listitem>\n-            <listitem>\n-              <para><classname>java.util.Collection</classname>s of entities\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><classname>java.util.Set</classname>s of entities\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><classname>java.util.List</classname>s of entities\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><classname>java.util.Map</classname>s in which each entry\n-          maps the value of one of an entity's fields to that entity.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-      Collection and map types may be parameterized.\n-      </para>\n-          <para><indexterm><primary>persistent fields</primary><secondary>of unknown types</secondary></indexterm><indexterm><primary>Object</primary><secondary>as persistent field type</secondary><seealso>persistent fields</seealso></indexterm>\n-      Most JPA implementations also have support for \n-      persisting serializable values as binary data in the datastore.\n-      <xref linkend=\"jpa_overview_meta\"/> has more information on\n-      persisting serializable types.\n-      </para>\n-          <note>\n+            <title>\n+                Persistent Fields\n+            </title>\n+            <indexterm zone=\"jpa_overview_pc_restrict_fields\">\n+                <primary>\n+                    persistent classes\n+                </primary>\n+                <secondary>\n+                    field restrictions\n+                </secondary>\n+                <seealso>\n+                    persistent fields\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    field\n+                </primary>\n+                <secondary>\n+                    persistent\n+                </secondary>\n+                <see>\n+                    persistent fields\n+                </see>\n+            </indexterm>\n+            <indexterm zone=\"jpa_overview_pc_restrict_fields\">\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    restrictions on\n+                </secondary>\n+            </indexterm>\n             <para>\n-        OpenJPA also supports arrays, <classname>\n-        java.lang.Number</classname>, <classname>\n-        java.util.Locale</classname>, all JDK 1.2 <classname>\n-        Set</classname>, <classname>List</classname>, and <classname>\n-        Map</classname> types, collections and maps of immutable and\n-        embedded as well as entity types, and many other mutable and \n-        immutable field types.  OpenJPA also allows you to plug in \n-        support for custom types.\n-        </para>\n-          </note>\n+JPA manages the state of all persistent fields. Before you access persistent\n+state, the JPA runtime makes sure that it has been loaded from the datastore.\n+When you set a field, the runtime records that it has changed so that the new\n+value will be persisted. This allows you to treat the field in exactly the same\n+way you treat any other field - another aspect of JPA's transparency.\n+            </para>\n+            <para>\n+JPA does not support static or final fields. It does, however, include built-in\n+support for most common field types. These types can be roughly divided into\n+three categories: immutable types, mutable types, and relations.\n+            </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    immutable types\n+                </secondary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    immutable\n+                </primary>\n+                <secondary>\n+                    persistent field types\n+                </secondary>\n+            </indexterm>\n+<emphasis>Immutable</emphasis> types, once created, cannot be changed. The only\n+way to alter a persistent field of an immutable type is to assign a new value to\n+the field. JPA supports the following immutable types:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+All primitives ( <classname>int, float, byte</classname>, etc)\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+All primitive wrappers ( <classname>java.lang.Integer, java.lang.Float,\n+java.lang.Byte</classname>, etc)\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.lang.String</classname>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.math.BigInteger</classname>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.math.BigDecimal</classname>\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+JPA also supports <classname>byte[]</classname>, <classname>Byte[]</classname>,\n+<classname>char[]</classname>, and <classname>Character[]</classname> as \n+immutable types. That is, you can persist fields of these types,\n+but you should not manipulate individual array indexes without resetting the\n+array into the persistent field.\n+            </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    mutable types\n+                </secondary>\n+                <seealso>\n+                    proxies\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    mutable\n+                </primary>\n+                <secondary>\n+                    persistent field types\n+                </secondary>\n+                <seealso>\n+                    persistent fields\n+                </seealso>\n+                <seealso>\n+                    proxies\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    user-defined types\n+                </secondary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    user-defined\n+                </primary>\n+                <secondary>\n+                    persistent field types\n+                </secondary>\n+                <seealso>\n+                    persistent fields\n+                </seealso>\n+            </indexterm>\n+Persistent fields of <emphasis>mutable</emphasis> types can be altered without\n+assigning the field a new value. Mutable types can be modified directly through\n+their own methods. The JPA specification requires that implementations support\n+the following mutable field types:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+<classname>java.util.Date</classname>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.util.Calendar</classname>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.sql.Date</classname>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.sql.Timestamp</classname>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Enums\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Entity types (relations between entities)\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Embeddable types\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.util.Collection</classname>s of entities\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.util.Set</classname>s of entities\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.util.List</classname>s of entities\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>java.util.Map</classname>s in which each entry maps the value of one\n+of an entity's fields to that entity.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+Collection and map types may be parameterized.\n+            </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    of unknown types\n+                </secondary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    Object\n+                </primary>\n+                <secondary>\n+                    as persistent field type\n+                </secondary>\n+                <seealso>\n+                    persistent fields\n+                </seealso>\n+            </indexterm>\n+Most JPA implementations also have support for persisting serializable values as\n+binary data in the datastore. <xref linkend=\"jpa_overview_meta\"></xref> has more\n+information on persisting serializable types.\n+            </para>\n+            <note>\n+                <para>\n+OpenJPA also supports arrays, <classname> java.lang.Number</classname>,\n+<classname> java.util.Locale</classname>, all JDK 1.2 <classname> Set\n+</classname>, <classname>List</classname>, and <classname> Map</classname>\n+types, collections and maps of immutable and embedded as well as entity types,\n+and many other mutable and immutable field types. OpenJPA also allows you to\n+plug in support for custom types.\n+                </para>\n+            </note>\n         </section>\n         <section id=\"jpa_overview_pc_restrict_conclusion\">\n-          <title>Conclusions</title>\n-          <para>\n-      This section detailed all of the restrictions JPA \n-      places on persistent classes.  While it may seem like we presented \n-      a lot of information, you will seldom find yourself hindered by \n-      these restrictions in practice.  Additionally, there are often ways\n-      of using JPA's other features to circumvent any \n-      limitations you run into.  \n-      <!-- ### EJBDOC : good transition when lifecycle listeners are\n-           ### added back as next section\n-      The next section explores a powerful JPA feature \n-      that is particularly useful for this purpose.\n-      -->\n-      </para>\n+            <title>\n+                Conclusions\n+            </title>\n+            <para>\n+This section detailed all of the restrictions JPA places on persistent classes.\n+While it may seem like we presented a lot of information, you will seldom find\n+yourself hindered by these restrictions in practice. Additionally, there are\n+often ways of using JPA's other features to circumvent any limitations you run\n+into.\n+            </para>\n         </section>\n-      </section>\n-      <section id=\"jpa_overview_pc_identity\">\n-        <title>Entity Identity</title>\n+    </section>\n+    <section id=\"jpa_overview_pc_identity\">\n+        <title>\n+            Entity Identity\n+        </title>\n         <indexterm zone=\"jpa_overview_pc_identity\">\n-          <primary>JPA</primary>\n-          <secondary>identity</secondary>\n-          <seealso>identity</seealso>\n+            <primary>\n+                JPA\n+            </primary>\n+            <secondary>\n+                identity\n+            </secondary>\n+            <seealso>\n+                identity\n+            </seealso>\n         </indexterm>\n         <indexterm>\n-          <primary>entity identity</primary>\n-          <see>identity</see>\n+            <primary>\n+                entity identity\n+            </primary>\n+            <see>\n+                identity\n+            </see>\n         </indexterm>\n         <indexterm zone=\"jpa_overview_pc_identity\">\n-          <primary>identity</primary>\n-          <secondary>JPA</secondary>\n+            <primary>\n+                identity\n+            </primary>\n+            <secondary>\n+                JPA\n+            </secondary>\n         </indexterm>\n-        <para><indexterm><primary>identity</primary><secondary>numeric</secondary></indexterm><indexterm><primary>identity</primary><secondary>qualitative</secondary></indexterm><indexterm><primary>numeric identity</primary><seealso>identity</seealso></indexterm><indexterm><primary>qualitative identity</primary><seealso>identity</seealso></indexterm>\n-    Java recognizes two forms of object identity: numeric identity and\n-    qualitative identity.  If two references are \n-    <emphasis>numerically</emphasis> identical, then they refer to the \n-    same JVM instance in memory.  You can test for this using the \n-    <literal>==</literal> operator.  <emphasis>Qualitative</emphasis> \n-    identity, on the other hand, relies on some user-defined criteria to \n-    determine whether two objects are \"equal\".  You test for qualitative \n-    identity using the <methodname>equals</methodname> method.  By default,\n-    this method simply relies on numeric identity.\n-    </para>\n         <para>\n-    JPA introduces another form of object identity, called \n-    <emphasis>entity identity</emphasis> or <emphasis>persistent \n-    identity</emphasis>.  Entity identity tests whether two persistent \n-    objects represent the same state in the datastore.\n-    </para>\n-        <para><indexterm><primary>persistent fields</primary><secondary>id</secondary></indexterm><indexterm><primary>id</primary><secondary>fields</secondary><seealso>persistent fields</seealso></indexterm>\n-     The entity identity of each persistent instance is encapsulated in its \n-    <emphasis>identity field(s)</emphasis>.  If two entities of the same \n-    type have the same identity field values, then the two \n-    entities represent the same state in the datastore.  Each entity's \n-    identity field values must be unique among all other entites of the \n-    same type.\n-    </para>\n+        <indexterm>\n+            <primary>\n+                identity\n+            </primary>\n+            <secondary>\n+                numeric\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                identity\n+            </primary>\n+            <secondary>\n+                qualitative\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                numeric identity\n+            </primary>\n+            <seealso>\n+                identity\n+            </seealso>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                qualitative identity\n+            </primary>\n+            <seealso>\n+                identity\n+            </seealso>\n+        </indexterm>\n+Java recognizes two forms of object identity: numeric identity and qualitative\n+identity. If two references are <emphasis>numerically</emphasis> identical, then\n+they refer to the same JVM instance in memory. You can test for this using the\n+<literal>==</literal> operator. <emphasis>Qualitative</emphasis> identity, on\n+the other hand, relies on some user-defined criteria to determine whether two\n+objects are \"equal\". You test for qualitative identity using the <methodname>\n+equals</methodname> method. By default, this method simply relies on numeric\n+identity.\n+        </para>\n         <para>\n-    Identity fields must be primitives, primitive wrappers, \n-    <classname>String</classname>s, <classname>Date</classname>s,\n-    <classname>Timestamp</classname>s, or embeddable types. Notably, other \n-    entities instances can <emphasis>not</emphasis> be used as identity \n-    fields.\n-    </para>\n+JPA introduces another form of object identity, called <emphasis>entity\n+identity</emphasis> or <emphasis>persistent identity</emphasis>. Entity\n+identity tests whether two persistent objects represent the same state in the\n+datastore.\n+        </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                persistent fields\n+            </primary>\n+            <secondary>\n+                id\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                id\n+            </primary>\n+            <secondary>\n+                fields\n+            </secondary>\n+            <seealso>\n+                persistent fields\n+            </seealso>\n+        </indexterm>\n+The entity identity of each persistent instance is encapsulated in its\n+<emphasis>identity field(s)</emphasis>. If two entities of the same type have\n+the same identity field values, then the two entities represent the same state\n+in the datastore. Each entity's identity field values must be unique among all\n+other entites of the same type.\n+        </para>\n+        <para>\n+Identity fields must be primitives, primitive wrappers, <classname>String\n+</classname> s, <classname>Date</classname> s, <classname>Timestamp</classname>\n+s, or embeddable types. Notably, other entities instances can <emphasis>not\n+</emphasis> be used as identity fields.\n+        </para>\n         <note>\n-          <para>\n-      For legacy schemas with binary primary key columns, OpenJPA\n-      also supports using identity fields of type \n-      <classname>byte[]</classname>.  When you use a <classname>byte[]\n-      </classname> identity field, you must \n-      create an identity class.  Identity classes are covered below.\n-      </para>\n+            <para>\n+For legacy schemas with binary primary key columns, OpenJPA also supports using\n+identity fields of type <classname>byte[]</classname>. When you use a\n+<classname>byte[]</classname> identity field, you must create an identity class.\n+Identity classes are covered below.\n+            </para>\n         </note>\n         <warning>\n-          <para>\n-      Changing the fields of an embeddable instance while it is assigned\n-      to an identity field has undefined results.  Always treat \n-      embeddable identity instances as immutable objects in your \n-      applications.\n-      </para>\n+            <para>\n+Changing the fields of an embeddable instance while it is assigned to an\n+identity field has undefined results. Always treat embeddable identity instances\n+as immutable objects in your applications.\n+            </para>\n         </warning>\n-        <para><indexterm><primary>identity</primary><secondary>uniqueness requirement</secondary></indexterm><indexterm><primary>uniquness requirement</primary><seealso>identity</seealso></indexterm>\n-    If you are dealing with a single persistence context (see\n-    <xref linkend=\"jpa_overview_emfactory_perscontext\"/>),\n-    then you do not have to compare identity fields to test \n-    whether two entity references represent the same state in the \n-    datastore.  There is a much easier way: the \n-    <literal>==</literal> operator.  JPA requires that \n-    each persistence context maintain only one JVM object to represent \n-    each unique datastore record.  Thus, entity identity is equivalent to \n-    numeric identity within a persistence context.  This is referred to as \n-    the <emphasis>uniqueness requirement</emphasis>. \n-    </para>\n         <para>\n-    The uniqueness requirement is extremely important - without it, it\n-    would be impossible to maintain data integrity.  Think of what \n-    could happen if two different objects in the same transaction\n-    were allowed to represent the same persistent data.  If you made \n-    different modifications to each of these objects, which set of changes \n-    should be written to the datastore?  How would your application logic \n-    handle seeing two different \"versions\" of the same data?  Thanks to the\n-    uniqueness requirement, these questions do not have to be answered.\n-    </para>\n-        <section id=\"jpa_overview_pc_identitycls\">\n-          <title>Identity Class</title>\n-          <para><indexterm zone=\"jpa_overview_pc_identitycls\"><primary>identity class</primary><seealso>identity</seealso></indexterm><indexterm zone=\"jpa_overview_pc_identitycls\"><primary>identity</primary><secondary>class requirements</secondary></indexterm>\n-      If your entity has only one identity field, you can use the value of\n-      that field as the entity's identity object in all \n-      <link linkend=\"jpa_overview_em\"><classname>EntityManager\n-      </classname></link> APIs.  Otherwise, you must supply an identity \n-      class to use for identity objects.  Your identity\n-      class must meet the following criteria:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>The class must be public.</para>\n-            </listitem>\n-            <listitem>\n-              <para>The class must be serializable.</para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          The class must have a public no-args constructor.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          The names of the non-static fields or properties of the \n-          class must be the same as the names of the identity fields\n-          or properties of the corresponding entity class, and the \n-          types must be identical.  \n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          The <methodname>equals</methodname> and \n-          <methodname>hashCode</methodname> methods of the class\n-          must use the values of all fields or properties \n-          corresponding to identity fields or properties in the \n-          entity class.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          If the class is an inner class, it must be\n-          <literal>static</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          All entity classes related by inheritance must use the same\n-          identity class, or else each entity class must have its \n-          own identity class whose inheritance hierarchy mirrors the \n-          inheritance hierarchy of the owning entity classes (see \n-          <xref linkend=\"jpa_overview_pc_identity_hierarchy\"/>).\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <note>\n-            <para>\n-        Though you may still create identity classes by\n-        hand, OpenJPA provides the <classname>appidtool</classname>\n-        to automatically generate proper identity classes\n-        based on your identity fields.  See\n-        <xref linkend=\"ref_guide_pc_oid_application\"/> of the\n-        Reference Guide.\n+        <indexterm>\n+            <primary>\n+                identity\n+            </primary>\n+            <secondary>\n+                uniqueness requirement\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                uniquness requirement\n+            </primary>\n+            <seealso>\n+                identity\n+            </seealso>\n+        </indexterm>\n+If you are dealing with a single persistence context (see\n+<xref linkend=\"jpa_overview_emfactory_perscontext\"></xref> ), then you do not\n+have to compare identity fields to test whether two entity references represent\n+the same state in the datastore. There is a much easier way: the <literal>==\n+</literal> operator. JPA requires that each persistence context maintain only\n+one JVM object to represent each unique datastore record. Thus, entity identity\n+is equivalent to numeric identity within a persistence context. This is referred\n+to as the <emphasis>uniqueness requirement</emphasis>.\n         </para>\n-          </note>\n-          <example id=\"jpa_overview_pc_identity_appidcode\">\n-            <title>Identity Class</title>\n-            <para>\n-        This example illustrates a proper identity class for an entity\n-        with multiple identity fields.\n+        <para>\n+The uniqueness requirement is extremely important - without it, it would be\n+impossible to maintain data integrity. Think of what could happen if two\n+different objects in the same transaction were allowed to represent the same\n+persistent data. If you made different modifications to each of these objects,\n+which set of changes should be written to the datastore? How would your\n+application logic handle seeing two different \"versions\" of the same data?\n+Thanks to the uniqueness requirement, these questions do not have to be\n+answered.\n         </para>\n-            <programlisting format=\"linespecific\">\n+        <section id=\"jpa_overview_pc_identitycls\">\n+            <title>\n+                Identity Class\n+            </title>\n+            <para>\n+            <indexterm zone=\"jpa_overview_pc_identitycls\">\n+                <primary>\n+                    identity class\n+                </primary>\n+                <seealso>\n+                    identity\n+                </seealso>\n+            </indexterm>\n+            <indexterm zone=\"jpa_overview_pc_identitycls\">\n+                <primary>\n+                    identity\n+                </primary>\n+                <secondary>\n+                    class requirements\n+                </secondary>\n+            </indexterm>\n+If your entity has only one identity field, you can use the value of that field\n+as the entity's identity object in all <link linkend=\"jpa_overview_em\">\n+<classname>EntityManager</classname></link> APIs. Otherwise, you must supply an\n+identity class to use for identity objects. Your identity class must meet the\n+following criteria:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+The class must be public.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+The class must be serializable.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+The class must have a public no-args constructor.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+The names of the non-static fields or properties of the class must be the same\n+as the names of the identity fields or properties of the corresponding entity\n+class, and the types must be identical.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+The <methodname>equals</methodname> and <methodname>hashCode</methodname>\n+methods of the class must use the values of all fields or properties\n+corresponding to identity fields or properties in the entity class.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+If the class is an inner class, it must be <literal>static</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+All entity classes related by inheritance must use the same identity class, or\n+else each entity class must have its own identity class whose inheritance\n+hierarchy mirrors the inheritance hierarchy of the owning entity classes (see\n+<xref linkend=\"jpa_overview_pc_identity_hierarchy\"></xref> ).\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <note>\n+                <para>\n+Though you may still create identity classes by hand, OpenJPA provides the\n+<classname>appidtool</classname> to automatically generate proper identity\n+classes based on your identity fields. See\n+<xref linkend=\"ref_guide_pc_oid_application\"></xref> of the Reference Guide.\n+                </para>\n+            </note>\n+            <example id=\"jpa_overview_pc_identity_appidcode\">\n+                <title>\n+                    Identity Class\n+                </title>\n+                <para>\n+This example illustrates a proper identity class for an entity with multiple\n+identity fields.\n+                </para>\n+<programlisting>\n /**\n  * Persistent class using application identity.\n  */\n@@ -654,241 +889,302 @@ public class Magazine\n     }\n }\n </programlisting>\n-          </example>\n-          <section id=\"jpa_overview_pc_identity_hierarchy\">\n-            <title>Identity Hierarchies</title>\n-            <indexterm zone=\"jpa_overview_pc_identity_hierarchy\">\n-              <primary>identity</primary>\n-              <secondary>hierarchy</secondary>\n-            </indexterm>\n-            <mediaobject>\n-              <imageobject>\n-<!-- PNG image data, 320 x 267 (see README) -->\n-                <imagedata fileref=\"img/appid-hierarchy.png\" width=\"213px\"/>\n-              </imageobject>\n-            </mediaobject>\n-            <para>\n-        An alternative to having a single identity\n-        class for an entire inheritance hierarchy is to have\n-        one identity class per level in the\n-        inheritance hierarchy. The requirements for using\n-        a hierarchy of identity classes are as follows:\n-        </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para>\n-            The inheritance hierarchy of identity \n-            classes must exactly mirror the hierarchy of the\n-            persistent classes that they identify. In the example\n-            pictured above, abstract class\n-            <classname>Person</classname> is extended by abstract\n-            class <classname>Employee</classname>, which is extended\n-            by non-abstract class <classname>\n-            FullTimeEmployee</classname>, which is extended by\n-            non-abstract class <classname>Manager</classname>.\n-            The corresponding identity classes, then, are\n-            an abstract <classname>PersonId</classname> class,\n-            extended by an abstract \n-            <classname>EmployeeId</classname> class, extended by a \n-            non-abstract <classname>FullTimeEmployeeId</classname>\n-            class, extended by a non-abstract\n-            <classname>ManagerId</classname> class.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para>\n-            Subclasses in the identity hierarchy\n-            may define additional identity fields until\n-            the hierarchy becomes non-abstract. In the\n-            aforementioned example, <classname>Person</classname>\n-            defines an identity field <literal>ssn</literal>,\n-            <classname>Employee</classname> defines additional \n-            identity field <literal>userName</literal>, and \n-            <classname>FullTimeEmployee</classname> adds a final\n-            identity field, <literal>empId</literal>.  \n-            However, <classname>Manager</classname> may not define \n-            any additional identity fields, since it is a \n-            subclass of a non-abstract class.  The hierarchy of\n-            identity classes, of course, must match the identity\n-            field definitions of the persistent class hierarchy.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para>\n-            It is not necessary for each abstract class to declare \n-            identity fields.  In the previous example, the \n-            abstract <classname>Person</classname> and \n-            <classname>Employee</classname> classes could declare \n-            no identity fields, and the first concrete subclass \n-            <classname>FullTimeEmployee</classname> could define \n-            one or more identity fields.\n-            </para>\n-              </listitem>\n-              <listitem>\n+            </example>\n+            <section id=\"jpa_overview_pc_identity_hierarchy\">\n+                <title>\n+                    Identity Hierarchies\n+                </title>\n+                <indexterm zone=\"jpa_overview_pc_identity_hierarchy\">\n+                    <primary>\n+                        identity\n+                    </primary>\n+                    <secondary>\n+                        hierarchy\n+                    </secondary>\n+                </indexterm>\n+                <mediaobject>\n+                    <imageobject>\n+                        <!-- PNG image data, 320 x 267 (see README) -->\n+                        <imagedata fileref=\"img/appid-hierarchy.png\" width=\"213px\">\n+                        </imagedata>\n+                    </imageobject>\n+                </mediaobject>\n                 <para>\n-            All subclasses of a concrete identity class must\n-            be <methodname>equals</methodname> and <methodname>\n-            hashCode</methodname>-compatible with the concrete\n-            superclass.  This means that in our example, a\n-            <classname>ManagerId</classname> instance and a\n-            <classname>FullTimeEmployeeId</classname> instance \n-            with the same identity field values should have the\n-            same hash code, and should compare equal to each other\n-            using the <methodname>equals</methodname> method of\n-            either one.  In practice, this requirement reduces to\n-            the following coding practices:  \n-            </para>\n-                <orderedlist>\n-                  <listitem>\n-                    <para>\n-                Use <literal>instanceof</literal> instead of\n-                comparing <classname>Class</classname> objects\n-                in the <methodname>equals</methodname> methods\n-                of your identity classes.\n-                </para>\n-                  </listitem>\n-                  <listitem>\n-                    <para>\n-                An identity class that extends another \n-                non-abstract identity class should not override\n-                <methodname>equals</methodname> or \n-                <methodname>hashCode</methodname>.\n+An alternative to having a single identity class for an entire inheritance\n+hierarchy is to have one identity class per level in the inheritance hierarchy.\n+The requirements for using a hierarchy of identity classes are as follows:\n                 </para>\n-                  </listitem>\n-                </orderedlist>\n-              </listitem>\n-            </itemizedlist>\n-          </section>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+The inheritance hierarchy of identity classes must exactly mirror the hierarchy\n+of the persistent classes that they identify. In the example pictured above,\n+abstract class <classname>Person</classname> is extended by abstract class\n+<classname>Employee</classname>, which is extended by non-abstract class\n+<classname> FullTimeEmployee</classname>, which is extended by non-abstract\n+class <classname>Manager</classname>. The corresponding identity classes, then,\n+are an abstract <classname>PersonId</classname> class, extended by an abstract\n+<classname>EmployeeId</classname> class, extended by a non-abstract <classname>\n+FullTimeEmployeeId</classname> class, extended by a non-abstract <classname>\n+ManagerId</classname> class.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Subclasses in the identity hierarchy may define additional identity fields until\n+the hierarchy becomes non-abstract. In the aforementioned example, <classname>\n+Person</classname> defines an identity field <literal>ssn</literal>, <classname>\n+Employee</classname> defines additional identity field <literal>userName\n+</literal>, and <classname>FullTimeEmployee</classname> adds a final identity\n+field, <literal>empId</literal>. However, <classname>Manager</classname> may not\n+define any additional identity fields, since it is a subclass of a non-abstract\n+class. The hierarchy of identity classes, of course, must match the identity\n+field definitions of the persistent class hierarchy.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+It is not necessary for each abstract class to declare identity fields. In the\n+previous example, the abstract <classname>Person</classname> and <classname>\n+Employee</classname> classes could declare no identity fields, and the first\n+concrete subclass <classname>FullTimeEmployee</classname> could define one or\n+more identity fields.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+All subclasses of a concrete identity class must be <methodname>equals\n+</methodname> and <methodname> hashCode</methodname> -compatible with the\n+concrete superclass. This means that in our example, a <classname>ManagerId\n+</classname> instance and a <classname>FullTimeEmployeeId</classname> instance\n+with the same identity field values should have the same hash code, and should\n+compare equal to each other using the <methodname>equals</methodname> method of\n+either one. In practice, this requirement reduces to the following coding\n+practices:\n+                        </para>\n+                        <orderedlist>\n+                            <listitem>\n+                                <para>\n+Use <literal>instanceof</literal> instead of comparing <classname>Class\n+</classname> objects in the <methodname>equals</methodname> methods of your\n+identity classes.\n+                                </para>\n+                            </listitem>\n+                            <listitem>\n+                                <para>\n+An identity class that extends another non-abstract identity class should not\n+override <methodname>equals</methodname> or <methodname>hashCode</methodname>.\n+                                </para>\n+                            </listitem>\n+                        </orderedlist>\n+                    </listitem>\n+                </itemizedlist>\n+            </section>\n         </section>\n-      </section>\n-      <section id=\"jpa_overview_pc_callbacks\">\n-        <title>Lifecycle Callbacks</title>\n+    </section>\n+    <section id=\"jpa_overview_pc_callbacks\">\n+        <title>\n+            Lifecycle Callbacks\n+        </title>\n         <indexterm zone=\"jpa_overview_pc_callbacks\">\n-          <primary>lifecycle callbacks</primary>\n+            <primary>\n+                lifecycle callbacks\n+            </primary>\n         </indexterm>\n         <indexterm zone=\"jpa_overview_pc_callbacks\">\n-          <primary>persistent classes</primary>\n-          <secondary>lifecycle callbacks</secondary>\n-          <seealso>lifecycle callbacks</seealso>\n+            <primary>\n+                persistent classes\n+            </primary>\n+            <secondary>\n+                lifecycle callbacks\n+            </secondary>\n+            <seealso>\n+                lifecycle callbacks\n+            </seealso>\n         </indexterm>\n         <para>\n-    It is often necessary to perform various actions at different stages\n-    of a persistent object's lifecycle.  JPA includes \n-    a variety of callbacks methods for monitoring changes in the \n-    lifecycle of your persistent objects.  These callbacks can\n-    be defined on the persistent classes themselves and\n-    on non-persistent listener classes.\n-    </para>\n+It is often necessary to perform various actions at different stages of a\n+persistent object's lifecycle. JPA includes a variety of callbacks methods for\n+monitoring changes in the lifecycle of your persistent objects. These callbacks\n+can be defined on the persistent classes themselves and on non-persistent\n+listener classes.\n+        </para>\n         <section id=\"jpa_overview_pc_callbacks_methods\">\n-          <title>Callback Methods</title>\n-          <indexterm zone=\"jpa_overview_pc_callbacks_methods\">\n-            <primary>lifecycle callbacks</primary>\n-            <secondary>callback methods</secondary>\n-          </indexterm>\n-          <indexterm zone=\"jpa_overview_pc_callbacks_methods\">\n-            <primary>entity</primary>\n-            <secondary>callback methods</secondary>\n-          </indexterm>\n-          <para>\n-      Every persistence event has a corresponding callback method\n-      marker.  These markers are shared between persistent classes\n-      and their listeners.  You can use these markers to designate\n-      a method for callback either by annotating that method or by\n-      listing the method in the XML mapping file for a given class.\n-      The lifecycle events and their corresponding method markers are:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para><indexterm><primary>PrePersist</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PrePersist.html\"><classname>PrePersist</classname></ulink>:\n-          Methods marked with this annotation will be invoked \n-          before an object is persisted.  This could be used for \n-          assigning primary key values to persistent objects.\n-          This is equivalent to the XML element tag \n-          <literal>pre-persist</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><indexterm><primary>PostPersist</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostPersist.html\"><classname>PostPersist</classname></ulink>:\n-          Methods marked with this annotation will be invoked \n-          after an object has transitioned to the persistent state.  \n-          You might want to use such methods to update a screen\n-          after a new row is added.  This is equivalent \n-          to the XML element tag <literal>post-persist</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><indexterm><primary>PostLoad</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostLoad.html\"><classname>PostLoad</classname></ulink>:\n-          Methods marked with this annotation will be invoked after \n-          all eagerly fetched fields of your class have been\n-          loaded from the datastore.  No other persistent fields\n-          can be accessed in this method.  This is equivalent \n-          to the XML element tag <literal>post-load</literal>.\n-          </para>\n-              <para><classname>PostLoad</classname> is often used to\n-          initialize non-persistent fields whose values depend \n-          on the values of persistent fields, such as a complex\n-          datastructure.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><indexterm><primary>PreUpdate</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PreUpdate.html\"><classname>PreUpdate</classname></ulink>:\n-          Methods marked with this annotation will be invoked \n-          just the persistent values in your objects are flushed\n-          to the datastore. This is equivalent to the XML element tag \n-          <literal>pre-update</literal>.\n-          </para>\n-              <para><classname>PreUpdate</classname> is the complement to\n-          <classname>PostLoad</classname>.  While methods marked\n-          with <classname>PostLoad</classname> are most often used\n-          to initialize non-persistent values from persistent data,\n-          methods annotated with <classname>PreUpdate</classname>\n-          is normally used to set persistent fields with information\n-          cached in non-persistent data.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><indexterm><primary>PostUpdate</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostUpdate.html\"><classname>PostUpdate</classname></ulink>:\n-          Methods marked with this annotation will be invoked \n-          after changes to a given instance have been stored to the \n-          datastore. This is useful for clearing stale data cached\n-          at the application layer.  This is equivalent to the \n-          XML element tag <literal>post-update</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><indexterm><primary>PreRemove</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PreRemove.html\"><classname>PreRemove</classname></ulink>:\n-          Methods marked with this annotation will be invoked \n-          before an object transactions to the deleted state.  \n-          Access to persistent fields is valid within this method.\n-          You might use this method to cascade the deletion to\n-          related objects based on complex criteria, or to \n-          perform other cleanup. This is equivalent to the \n-          XML element tag <literal>pre-remove</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><indexterm><primary>PostRemove</primary><seealso>lifecycle callbacks</seealso></indexterm><ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostRemove.html\"><classname>PostRemove</classname></ulink>:\n-          Methods marked with this annotation will be invoked after \n-          an object has been marked as to be deleted.  This is \n-          equivalent to the XML element tag \n-          <literal>post-remove</literal>.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n+            <title>\n+                Callback Methods\n+            </title>\n+            <indexterm zone=\"jpa_overview_pc_callbacks_methods\">\n+                <primary>\n+                    lifecycle callbacks\n+                </primary>\n+                <secondary>\n+                    callback methods\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"jpa_overview_pc_callbacks_methods\">\n+                <primary>\n+                    entity\n+                </primary>\n+                <secondary>\n+                    callback methods\n+                </secondary>\n+            </indexterm>\n+            <para>\n+Every persistence event has a corresponding callback method marker. These\n+markers are shared between persistent classes and their listeners. You can use\n+these markers to designate a method for callback either by annotating that\n+method or by listing the method in the XML mapping file for a given class. The\n+lifecycle events and their corresponding method markers are:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PrePersist\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PrePersist.html\">\n+<classname>PrePersist</classname></ulink>: Methods marked with this annotation\n+will be invoked before an object is persisted. This could be used for assigning\n+primary key values to persistent objects. This is equivalent to the XML element\n+tag <literal>pre-persist</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PostPersist\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostPersist.html\">\n+<classname>PostPersist</classname></ulink>: Methods marked with this annotation\n+will be invoked after an object has transitioned to the persistent state. You\n+might want to use such methods to update a screen after a new row is added. This\n+is equivalent to the XML element tag <literal>post-persist</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PostLoad\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostLoad.html\">\n+<classname>PostLoad</classname></ulink>: Methods marked with this annotation\n+will be invoked after all eagerly fetched fields of your class have been loaded\n+from the datastore. No other persistent fields can be accessed in this method.\n+This is equivalent to the XML element tag <literal>post-load</literal>.\n+                    </para>\n+                    <para>\n+<classname>PostLoad</classname> is often used to initialize non-persistent\n+fields whose values depend on the values of persistent fields, such as a complex\n+datastructure.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PreUpdate\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PreUpdate.html\">\n+<classname>PreUpdate</classname></ulink>: Methods marked with this annotation\n+will be invoked just the persistent values in your objects are flushed to the\n+datastore. This is equivalent to the XML element tag <literal>pre-update\n+</literal>.\n+                    </para>\n+                    <para>\n+<classname>PreUpdate</classname> is the complement to <classname>PostLoad\n+</classname>. While methods marked with <classname>PostLoad</classname> are most\n+often used to initialize non-persistent values from persistent data, methods\n+annotated with <classname>PreUpdate</classname> is normally used to set\n+persistent fields with information cached in non-persistent data.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PostUpdate\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostUpdate.html\">\n+<classname>PostUpdate</classname></ulink>: Methods marked with this annotation\n+will be invoked after changes to a given instance have been stored to the\n+datastore. This is useful for clearing stale data cached at the application\n+layer. This is equivalent to the XML element tag <literal>post-update</literal>\n+.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PreRemove\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PreRemove.html\">\n+<classname>PreRemove</classname></ulink>: Methods marked with this annotation\n+will be invoked before an object transactions to the deleted state. Access to\n+persistent fields is valid within this method. You might use this method to\n+cascade the deletion to related objects based on complex criteria, or to perform\n+other cleanup. This is equivalent to the XML element tag <literal>pre-remove\n+</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            PostRemove\n+                        </primary>\n+                        <seealso>\n+                            lifecycle callbacks\n+                        </seealso>\n+                    </indexterm>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/PostRemove.html\">\n+<classname>PostRemove</classname></ulink>: Methods marked with this annotation\n+will be invoked after an object has been marked as to be deleted. This is\n+equivalent to the XML element tag <literal>post-remove</literal>.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n         <section id=\"jpa_overview_callbacks_using\">\n-          <title>Using Callback Methods</title>\n-          <para>\n-      When declaring callback methods on a persistent class,\n-      any method may be used which takes no arguments and is not\n-      shared with any property access fields.  Multiple events\n-      can be assigned to a single method as well.\n-      </para>\n-          <para>\n-      Below is an example of how to declare callback methods\n-      on persistent classes:\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Using Callback Methods\n+            </title>\n+            <para>\n+When declaring callback methods on a persistent class, any method may be used\n+which takes no arguments and is not shared with any property access fields.\n+Multiple events can be assigned to a single method as well.\n+            </para>\n+            <para>\n+Below is an example of how to declare callback methods on persistent classes:\n+            </para>\n+<programlisting>\n /**\n  * Example persistent class declaring our entity listener.\n  */\n@@ -918,46 +1214,45 @@ public class Magazine\n }\n \n </programlisting>\n-          <para>\n-      In an XML mapping file, we can define the same methods \n-      without annotations:\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <para>\n+In an XML mapping file, we can define the same methods without annotations:\n+            </para>\n+<programlisting>\n &lt;entity class=\"Magazine\"&gt;\n     &lt;pre-remove&gt;logMagazineDeletion&lt;/pre-remove&gt;\n     &lt;post-load&gt;convertPhotos&lt;/post-load&gt;\n &lt;/entity&gt;\n </programlisting>\n-          <note>\n-            <para>\n-        We fully explore persistence metadata annotations and XML in \n-        <xref linkend=\"jpa_overview_meta\"/>.\n-        </para>\n-          </note>\n+            <note>\n+                <para>\n+We fully explore persistence metadata annotations and XML in\n+<xref linkend=\"jpa_overview_meta\"></xref>.\n+                </para>\n+            </note>\n         </section>\n         <section id=\"jpa_overview_entity_listeners_using\">\n-          <title>Using Entity Listeners</title>\n-          <para>\n-      Mixing lifecycle event code into your persistent classes is not\n-      always ideal.  It is often more elegant to handle cross-cutting \n-      lifecycle events in a non-persistent listener class.\n-      JPA allows for this, requiring only that listener\n-      classes have a public no-arg constructor.  Like persistent \n-      classes, your listener classes can consume any number of callbacks.\n-      The callback methods must take in a single \n-      <classname>java.lang.Object</classname> argument which\n-      represents the persistent object that triggered the event.\n-      </para>\n-          <para>\n-      Entities can enumerate listeners using the \n-      <classname>EntityListeners</classname> annotation.  This annotation\n-      takes an array of listener classes as its value.\n-      </para>\n-          <para>\n-      Below is an example of how to declare an entity and its \n-      corresponding listener classes.\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Using Entity Listeners\n+            </title>\n+            <para>\n+Mixing lifecycle event code into your persistent classes is not always ideal. It\n+is often more elegant to handle cross-cutting lifecycle events in a\n+non-persistent listener class. JPA allows for this, requiring only that listener\n+classes have a public no-arg constructor. Like persistent classes, your listener\n+classes can consume any number of callbacks. The callback methods must take in a\n+single <classname>java.lang.Object</classname> argument which represents the\n+persistent object that triggered the event.\n+            </para>\n+            <para>\n+Entities can enumerate listeners using the <classname>EntityListeners\n+</classname> annotation. This annotation takes an array of listener classes as\n+its value.\n+            </para>\n+            <para>\n+Below is an example of how to declare an entity and its corresponding listener\n+classes.\n+            </para>\n+<programlisting>\n /**\n  * Example persistent class declaring our entity listener.\n  */\n@@ -989,11 +1284,10 @@ public class MagazineLogger\n     }\n }\n </programlisting>\n-          <para>\n-      In XML, we define both the listeners and their callback\n-      methods as so:\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <para>\n+In XML, we define both the listeners and their callback methods as so:\n+            </para>\n+<programlisting>\n &lt;entity class=\"Magazine\"&gt;\n     &lt;entity-listeners&gt;\n         &lt;entity-listener class=\"MagazineLogger\"&gt;\n@@ -1005,54 +1299,58 @@ public class MagazineLogger\n </programlisting>\n         </section>\n         <section id=\"jpa_overview_entity_listeners_exclude\">\n-          <title>Entity Listeners Hierarchy</title>\n-          <indexterm zone=\"jpa_overview_entity_listeners_exclude\">\n-            <primary>lifecycle listeners</primary>\n-            <secondary>hierarchy</secondary>\n-          </indexterm>\n-          <para>\n-      Entity listener methods are invoked in a specific order when a \n-      given event is fired. So-called <emphasis>default</emphasis> \n-      listeners are invoked first: these are listeners\n-      which have been defined in a package annotation or in the root \n-      element of XML mapping files.  Next, entity listeners are invoked\n-      in the order of the inheritance hierarchy, with superclass listeners\n-      being invoked before subclass listeners.  Finally, if an entity has\n-      multiple listeners for the same event, the listeners are invoked \n-      in declaration order.\n-      </para>\n-          <para>\n-      You can exclude default listeners and listeners defined in \n-      superclasses from the invocation chain through the use of two \n-      class-level annotations: \n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para><classname>ExcludeDefaultListeners</classname>: This\n-          annotation indicates that no default listeners will be\n-          invoked for this class, or any of its subclasses. The XML\n-          equivalent is the empty\n-          <literal>exclude-default-listeners</literal> element.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><classname>ExcludeSuperclassListeners</classname>: This\n-          annotation will cause OpenJPA to skip invoking any listeners\n-          declared in superclasses.  The XML equivalent is empty the \n-          <literal>exclude-superclass-listeners</literal> element.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n+            <title>\n+                Entity Listeners Hierarchy\n+            </title>\n+            <indexterm zone=\"jpa_overview_entity_listeners_exclude\">\n+                <primary>\n+                    lifecycle listeners\n+                </primary>\n+                <secondary>\n+                    hierarchy\n+                </secondary>\n+            </indexterm>\n+            <para>\n+Entity listener methods are invoked in a specific order when a given event is\n+fired. So-called <emphasis>default</emphasis> listeners are invoked first: these\n+are listeners which have been defined in a package annotation or in the root\n+element of XML mapping files. Next, entity listeners are invoked in the order of\n+the inheritance hierarchy, with superclass listeners being invoked before\n+subclass listeners. Finally, if an entity has multiple listeners for the same\n+event, the listeners are invoked in declaration order.\n+            </para>\n+            <para>\n+You can exclude default listeners and listeners defined in superclasses from the\n+invocation chain through the use of two class-level annotations:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+<classname>ExcludeDefaultListeners</classname>: This annotation indicates that\n+no default listeners will be invoked for this class, or any of its subclasses.\n+The XML equivalent is the empty <literal>exclude-default-listeners</literal>\n+element.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>ExcludeSuperclassListeners</classname>: This annotation will cause\n+OpenJPA to skip invoking any listeners declared in superclasses. The XML\n+equivalent is empty the <literal>exclude-superclass-listeners</literal> element.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n-      </section>\n-      <section id=\"jpa_overview_pc_conclusion\">\n-        <title>Conclusions</title>\n+    </section>\n+    <section id=\"jpa_overview_pc_conclusion\">\n+        <title>\n+            Conclusions\n+        </title>\n         <para>\n-    This chapter covered everything you need to know to write persistent\n-    class definitions in JPA.  JPA \n-    cannot use your persistent classes, however, until you complete one \n-    additional step: you must define the persistence metadata.  The next \n-    chapter explores metadata in detail.\n-    </para>\n-      </section>\n-    </chapter>\n+This chapter covered everything you need to know to write persistent class\n+definitions in JPA. JPA cannot use your persistent classes, however, until you\n+complete one additional step: you must define the persistence metadata. The next\n+chapter explores metadata in detail.\n+        </para>\n+    </section>\n+</chapter>"},{"sha":"168ba43d8369458d2a8b00a5d6ae32366d31163a","filename":"openjpa-project/src/doc/manual/jpa_overview_persistence.xml","status":"modified","additions":183,"deletions":157,"changes":340,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_persistence.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,69 +1,89 @@\n-\n-    <chapter id=\"jpa_overview_persistence\">\n-      <title>Persistence</title>\n-      <indexterm zone=\"jpa_overview_persistence\">\n-        <primary>Persistence</primary>\n-      </indexterm>\n-      <indexterm zone=\"jpa_overview_persistence\">\n-        <primary>EntityManagerFactory</primary>\n-        <secondary>construction</secondary>\n-      </indexterm>\n-      <indexterm zone=\"jpa_overview_persistence\">\n-        <primary>Persistence</primary>\n-        <secondary>getEntityManagerFactory</secondary>\n-      </indexterm>\n-      <indexterm zone=\"jpa_overview_persistence\">\n-        <primary>getEntityManagerFactory</primary>\n-        <seealso>Persistence</seealso>\n-      </indexterm>\n-      <mediaobject>\n+<chapter id=\"jpa_overview_persistence\">\n+    <title>\n+        Persistence\n+    </title>\n+    <indexterm zone=\"jpa_overview_persistence\">\n+        <primary>\n+            Persistence\n+        </primary>\n+    </indexterm>\n+    <indexterm zone=\"jpa_overview_persistence\">\n+        <primary>\n+            EntityManagerFactory\n+        </primary>\n+        <secondary>\n+            construction\n+        </secondary>\n+    </indexterm>\n+    <indexterm zone=\"jpa_overview_persistence\">\n+        <primary>\n+            Persistence\n+        </primary>\n+        <secondary>\n+            getEntityManagerFactory\n+        </secondary>\n+    </indexterm>\n+    <indexterm zone=\"jpa_overview_persistence\">\n+        <primary>\n+            getEntityManagerFactory\n+        </primary>\n+        <seealso>\n+            Persistence\n+        </seealso>\n+    </indexterm>\n+    <mediaobject>\n         <imageobject>\n-<!-- PNG image data, 427 x 121 (see README) -->\n-          <imagedata fileref=\"img/persistence.png\" width=\"285px\"/>\n+            <!-- PNG image data, 427 x 121 (see README) -->\n+            <imagedata fileref=\"img/persistence.png\" width=\"285px\">\n+            </imagedata>\n         </imageobject>\n-      </mediaobject>\n-      <note>\n+    </mediaobject>\n+    <note>\n         <para>\n-    OpenJPA also includes the \n-    <ulink url=\"../../api/openjpa/persistence/OpenJPAPersistence.html\"><classname>OpenJPAPersistence</classname></ulink> helper class to provide \n-    additional utility methods.\n+OpenJPA also includes the\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAPersistence.html\"><classname>\n+OpenJPAPersistence</classname></ulink> helper class to provide additional\n+utility methods.\n+        </para>\n+    </note>\n+    <para>\n+Within a container, you will typically use <emphasis>injection</emphasis> to\n+access an <classname>EntityManagerFactory</classname>. Applications operating\n+of a container, however, can use the\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Persistence.html\">\n+<classname>Persistence</classname></ulink> class to obtain <classname>\n+EntityManagerFactory</classname> objects in a vendor-neutral fashion.\n     </para>\n-      </note>\n-      <para>\n-  Within a container, you will typically use <emphasis>injection\n-  </emphasis> to access an <classname>EntityManagerFactory</classname>.\n-  Applications operating of a container, however,  can use the\n-  <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Persistence.html\"><classname>Persistence</classname></ulink> class to obtain\n-  <classname>EntityManagerFactory</classname> objects in a vendor-neutral\n-  fashion.\n-  </para>\n-      <programlisting format=\"linespecific\">\n+<programlisting>\n public static EntityManagerFactory createEntityManagerFactory (String name);\n public static EntityManagerFactory createEntityManagerFactory (String name, Map props);\n </programlisting>\n-      <para>\n-  Each <methodname>createEntityManagerFactory</methodname> method searches\n-  the system for an <classname>EntityManagerFactory</classname> definition \n-  with the given name.  Use <literal>null</literal> for an unnamed factory.\n-  The optional map contains vendor-specific property settings used to further\n-  configure the factory.\n-  </para>\n-      <para><filename>persistence.xml</filename> files define <classname>\n-  EntityManagerFactories</classname>.  The <methodname>\n-  createEntityManagerFactory</methodname> methods search for <filename>\n-  persistence.xml</filename> files within the <filename>META-INF</filename> \n-  directory of any <literal>CLASSPATH</literal> element.  For example, if \n-  your <literal>CLASSPATH</literal> contains the <filename>conf</filename>\n-  directory, you could place an <classname>EntityManagerFactory</classname> \n-  definition in <filename>conf/META-INF/persistence.xml</filename>.\n-  </para>\n-      <section id=\"jpa_overview_persistence_xml\">\n-        <title>persistence.xml</title>\n-        <para>\n-    The <filename>persistence.xml</filename> file format obeys the following\n-    Document Type Descriptor (DTD):\n+    <para>\n+Each <methodname>createEntityManagerFactory</methodname> method searches the\n+system for an <classname>EntityManagerFactory</classname> definition with the\n+given name. Use <literal>null</literal> for an unnamed factory. The optional map\n+contains vendor-specific property settings used to further configure the\n+factory.\n     </para>\n-        <programlisting format=\"linespecific\">\n+    <para>\n+<filename>persistence.xml</filename> files define <classname>\n+EntityManagerFactories</classname>. The <methodname> createEntityManagerFactory\n+</methodname> methods search for <filename> persistence.xml</filename> files\n+within the <filename>META-INF</filename> directory of any <literal>CLASSPATH\n+</literal> element. For example, if your <literal>CLASSPATH</literal> contains\n+the <filename>conf</filename> directory, you could place an <classname>\n+EntityManagerFactory</classname> definition in <filename>\n+conf/META-INF/persistence.xml</filename>.\n+    </para>\n+    <section id=\"jpa_overview_persistence_xml\">\n+        <title>\n+            persistence.xml\n+        </title>\n+        <para>\n+The <filename>persistence.xml</filename> file format obeys the following\n+Document Type Descriptor (DTD):\n+        </para>\n+<programlisting>\n &lt;!ELEMENT persistence (persistence-unit*)&gt;\n &lt;!ELEMENT persistence-unit (description?,provider?,jta-datasource?,\n   non-jta-datasource?,(class|jar-file|mapping-file)*,\n@@ -84,95 +104,98 @@ public static EntityManagerFactory createEntityManagerFactory (String name, Map\n &lt;!ATTLIST property value CDATA #REQUIRED&gt;\n </programlisting>\n         <para>\n-    The root element of a <filename>persistence.xml</filename> file is\n-    <literal>persistence</literal>, which then contains one or more\n-    <literal>persistence-unit</literal> definitions. \n-    Each persistence unit describes the configuration for the entity\n-    managers created by the persistence unit's entity manager factory. \n-    The persistence unit can specify these elements and attribtues.\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para><literal>name</literal>: This is the name you pass to the\n-        <methodname>Persistence.createEntityManagerFactory</methodname>\n-        methods described above. The name attribute is required.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>transaction-type</literal>: Whether to use managed\n-        (<literal>JTA</literal>) or local \n-        (<literal>RESOURCE_LOCAL</literal>) transaction management.\n-        Defaults to <literal>JTA</literal>.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>provider</literal>: If you are using a third-party\n-        JPA vendor, this element names its implementation of the \n-        <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/spi/PersistenceProvider.html\"><classname>PersistenceProvider</classname></ulink> bootstrapping\n-        interface. \n-        </para>\n-            <note>\n-              <para>\n-          Set the <literal>provider</literal> to <classname>\n-          org.apache.openjpa.persistence.PersistenceProviderImpl</classname>\n-          to use OpenJPA. \n-          </para>\n-            </note>\n-          </listitem>\n-          <listitem>\n-            <para><literal>jta-data-source</literal>: The JNDI name of a JDBC\n-        <classname>DataSource</classname> that is automatically enlisted\n-        in JTA transactions.  This may be an XA <classname>\n-        DataSource</classname>.\n+The root element of a <filename>persistence.xml</filename> file is <literal>\n+persistence</literal>, which then contains one or more <literal>\n+persistence-unit</literal> definitions. Each persistence unit describes the\n+configuration for the entity managers created by the persistence unit's entity\n+manager factory. The persistence unit can specify these elements and attribtues.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>non-jta-data-source</literal>: The JNDI name of a JDBC\n-        <classname>DataSource</classname> that is not enlisted\n-        in JTA transactions.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>mapping-file</literal>*: The resource names of\n-        XML mapping files for entities and embeddable classes.\n-        You can also specify mapping information in an <filename>\n-        orm.xml</filename> file in your <filename>META-INF</filename>\n-        directory. If present, the <filename>orm.xml</filename>\n-        mapping file will be read automatically.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>jar-file</literal>*: The names of jar files containing\n-        entities and embeddable classes.  The implementation will scan\n-        the jar for annotated classes.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>class</literal>*: The class names of entities and\n-        embeddable classes.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>properties</literal>: This element contains nested\n-        <literal>property</literal> elements used to specify \n-        vendor-specific settings.  Each <literal>property</literal>\n-        has a name attribute and a value attribute.\n-        </para>\n-            <note>\n-              <para>\n-          The Reference Guide's <xref linkend=\"ref_guide_conf\"/>\n-          describes OpenJPA's configuration properties.\n-          </para>\n-            </note>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+<literal>name</literal>: This is the name you pass to the <methodname>\n+Persistence.createEntityManagerFactory</methodname> methods described above. The\n+name attribute is required.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>transaction-type</literal>: Whether to use managed ( <literal>JTA\n+</literal>) or local ( <literal>RESOURCE_LOCAL</literal>) transaction\n+management. Defaults to <literal>JTA</literal>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>provider</literal>: If you are using a third-party JPA vendor, this\n+element names its implementation of the\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/spi/PersistenceProvider.html\">\n+<classname>PersistenceProvider</classname></ulink> bootstrapping interface.\n+                </para>\n+                <note>\n+                    <para>\n+Set the <literal>provider</literal> to <classname>\n+org.apache.openjpa.persistence.PersistenceProviderImpl</classname> to use\n+OpenJPA.\n+                    </para>\n+                </note>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>jta-data-source</literal>: The JNDI name of a JDBC <classname>\n+DataSource</classname> that is automatically enlisted in JTA transactions. This\n+may be an XA <classname> DataSource</classname>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>non-jta-data-source</literal>: The JNDI name of a JDBC <classname>\n+DataSource</classname> that is not enlisted in JTA transactions.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>mapping-file</literal> *: The resource names of XML mapping files for\n+entities and embeddable classes. You can also specify mapping information in an\n+<filename> orm.xml</filename> file in your <filename>META-INF</filename>\n+directory. If present, the <filename>orm.xml</filename> mapping file will be\n+read automatically.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>jar-file</literal> *: The names of jar files containing entities and\n+embeddable classes. The implementation will scan the jar for annotated classes.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>class</literal> *: The class names of entities and embeddable classes.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>properties</literal>: This element contains nested <literal>property\n+</literal> elements used to specify vendor-specific settings. Each <literal>\n+property</literal> has a name attribute and a value attribute.\n+                </para>\n+                <note>\n+                    <para>\n+The Reference Guide's <xref linkend=\"ref_guide_conf\"></xref> describes OpenJPA's\n+configuration properties.\n+                    </para>\n+                </note>\n+            </listitem>\n         </itemizedlist>\n         <para>\n-    Here is a typical <filename>persistence.xml</filename> file for a\n-    non-EE environment:\n-    </para>\n+Here is a typical <filename>persistence.xml</filename> file for a non-EE\n+environment:\n+        </para>\n         <example id=\"jpa_overview_persistence_xmlex\">\n-          <title>persistence.xml</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                persistence.xml\n+            </title>\n+<programlisting>\n &lt;?xml version=\"1.0\"?&gt;\n &lt;persistence&gt;\n   &lt;persistence-unit name=\"openjpa\"&gt;\n@@ -192,20 +215,23 @@ public static EntityManagerFactory createEntityManagerFactory (String name, Map\n &lt;/persistence&gt;\n </programlisting>\n         </example>\n-      </section>\n-      <section id=\"jpa_overview_persistence_use\">\n-        <title>Non-EE Use</title>\n+    </section>\n+    <section id=\"jpa_overview_persistence_use\">\n+        <title>\n+            Non-EE Use\n+        </title>\n         <para>\n-    The example below demonstrates the <classname>Persistence</classname>\n-    class in action.  You will typically execute code like this on \n-    application startup, then cache the resulting factory for future use.\n-    This bootstrapping code is only necessary in non-EE environments; in \n-    an EE environment <classname>EntityManagerFactories</classname> are \n-    typically injected.  \n-    </para>\n+The example below demonstrates the <classname>Persistence</classname> class in\n+action. You will typically execute code like this on application startup, then\n+cache the resulting factory for future use. This bootstrapping code is only\n+necessary in non-EE environments; in an EE environment <classname>\n+EntityManagerFactories</classname> are typically injected.\n+        </para>\n         <example id=\"jpa_overview_persistence_getemfactory\">\n-          <title>Obtaining an EntityManagerFactory</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Obtaining an EntityManagerFactory\n+            </title>\n+<programlisting>\n // if your persistence.xml file does not contain all settings already, you\n // can add vendor settings to a map \n Properties props = new Properties ();\n@@ -215,5 +241,5 @@ Properties props = new Properties ();\n EntityManagerFactory emf = Persistence.createEntityManagerFactory (\"openjpa\", props);\n </programlisting>\n         </example>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"6b1b78e3af2f826e10557e97e0136f34e5f4b43e","filename":"openjpa-project/src/doc/manual/jpa_overview_query.xml","status":"modified","additions":3080,"deletions":2361,"changes":5441,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_query.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_query.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_query.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"4972e6c2c5570422edef17924fadd6664784f04f","filename":"openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","status":"modified","additions":199,"deletions":292,"changes":491,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,135 +1,195 @@\n-\n-    <chapter id=\"jpa_overview_sqlquery\">\n-      <title>SQL Queries</title>\n-      <indexterm zone=\"jpa_overview_sqlquery\">\n-        <primary>SQL queries</primary>\n-        <seealso>Query</seealso>\n-      </indexterm>\n-      <indexterm>\n-        <primary>Query</primary>\n-        <secondary>SQL</secondary>\n-        <see>SQL queries</see>\n-      </indexterm>\n-      <indexterm>\n-        <primary>SQL</primary>\n-        <secondary>queries</secondary>\n-        <see>SQL queries</see>\n-      </indexterm>\n-      <indexterm>\n-        <primary>Native</primary>\n-        <secondary>queries</secondary>\n-        <see>SQL queries</see>\n-      </indexterm>\n-      <para>\n-  JPQL is a powerful query language, but there are times when it is \n-  not enough.  Maybe you're migrating a JDBC application to JPA\n-  on a strict deadline, and you don't have time to translate your existing \n-  SQL selects to JPQL.  Or maybe a certain query requires\n-  database-specific SQL your JPA implementation doesn't support.  \n-  Or maybe your DBA has spent hours crafting the perfect select statement \n-  for a query in your application's critical path.  Whatever the reason, SQL \n-  queries can remain an essential part of an application.\n-  </para>\n-      <para>\n-  You are probably familiar with executing SQL queries by obtaining a \n-  <classname>java.sql.Connection</classname>, using the JDBC APIs to create\n-  a <classname>Statement</classname>, and executing that <classname>Statement\n-  </classname> to obtain a <classname>ResultSet</classname>.  And of course, \n-  you are free to continue using this low-level approach to SQL execution in \n-  your JPA applications.  However, JPA also supports executing SQL queries \n-  through the <classname>javax.persistence.Query</classname>\n-  interface introduced in <xref linkend=\"jpa_overview_query\"/>.\n-  Using a JPA SQL query, you can retrieve either persistent objects\n-  or projections of column values.  The following sections detail each use.\n-  </para>\n-      <section id=\"jpa_overview_sqlquery_create\">\n-        <title>Creating SQL Queries</title>\n+<chapter id=\"jpa_overview_sqlquery\">\n+    <title>\n+        SQL Queries\n+    </title>\n+    <indexterm zone=\"jpa_overview_sqlquery\">\n+        <primary>\n+            SQL queries\n+        </primary>\n+        <seealso>\n+            Query\n+        </seealso>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            Query\n+        </primary>\n+        <secondary>\n+            SQL\n+        </secondary>\n+        <see>\n+            SQL queries\n+        </see>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            SQL\n+        </primary>\n+        <secondary>\n+            queries\n+        </secondary>\n+        <see>\n+            SQL queries\n+        </see>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            Native\n+        </primary>\n+        <secondary>\n+            queries\n+        </secondary>\n+        <see>\n+            SQL queries\n+        </see>\n+    </indexterm>\n+    <para>\n+JPQL is a powerful query language, but there are times when it is not enough.\n+Maybe you're migrating a JDBC application to JPA on a strict deadline, and you\n+don't have time to translate your existing SQL selects to JPQL. Or maybe a\n+certain query requires database-specific SQL your JPA implementation doesn't\n+support. Or maybe your DBA has spent hours crafting the perfect select statement\n+for a query in your application's critical path. Whatever the reason, SQL\n+queries can remain an essential part of an application.\n+    </para>\n+    <para>\n+You are probably familiar with executing SQL queries by obtaining a <classname>\n+java.sql.Connection</classname>, using the JDBC APIs to create a <classname>\n+Statement</classname>, and executing that <classname>Statement</classname> to\n+obtain a <classname>ResultSet</classname>. And of course, you are free to\n+continue using this low-level approach to SQL execution in your JPA\n+applications. However, JPA also supports executing SQL queries through the\n+<classname>javax.persistence.Query</classname> interface introduced in\n+<xref linkend=\"jpa_overview_query\"></xref>. Using a JPA SQL query, you can\n+retrieve either persistent objects or projections of column values. The\n+following sections detail each use.\n+    </para>\n+    <section id=\"jpa_overview_sqlquery_create\">\n+        <title>\n+            Creating SQL Queries\n+        </title>\n         <indexterm zone=\"jpa_overview_sqlquery_create\">\n-          <primary>SQL queries</primary>\n-          <secondary>creating</secondary>\n+            <primary>\n+                SQL queries\n+            </primary>\n+            <secondary>\n+                creating\n+            </secondary>\n         </indexterm>\n         <para>\n-    The <classname>EntityManager</classname> has two factory methods\n-    suitable for creating SQL queries:\n-    </para>\n-        <programlisting format=\"linespecific\">\n+The <classname>EntityManager</classname> has two factory methods suitable for\n+creating SQL queries:\n+        </para>\n+<programlisting>\n public Query createNativeQuery (String sqlString, Class resultClass);\n public Query createNativeQuery (String sqlString, String resultSetMapping);\n </programlisting>\n         <para>\n-    The first method is used to create a new <classname>Query</classname> \n-    instance that will return instances of the specified class.\n-    </para>\n+The first method is used to create a new <classname>Query</classname> instance\n+that will return instances of the specified class.\n+        </para>\n         <para>\n-    The second method uses a <literal>SqlResultSetMapping</literal>\n-    to determine the type of object or objects to return.\n-    The example below shows these methods in action.\n-    </para>\n+The second method uses a <literal>SqlResultSetMapping</literal> to determine the\n+type of object or objects to return. The example below shows these methods in\n+action.\n+        </para>\n         <example id=\"jpa_overview_sqlquery_createex\">\n-          <title>Creating a SQL Query</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Creating a SQL Query\n+            </title>\n+<programlisting>\n EntityManager em = ...;\n Query query = em.createNativeQuery (\"SELECT * FROM MAG\", Magazine.class);\n processMagazines (query.getResultList ());\n </programlisting>\n         </example>\n         <note>\n-          <para><indexterm><primary>SQL queries</primary><secondary>stored procedures</secondary></indexterm><indexterm><primary>stored procedures</primary><secondary>as queries</secondary><seealso>Query</seealso></indexterm>\n-      In addition to SELECT statements, OpenJPA supports stored procedure\n-      invocations as SQL queries.  OpenJPA will assume any SQL that does \n-      not begin with the <literal>SELECT</literal> keyword (ignoring\n-      case) is a stored procedure call, and invoke it as such at the\n-      JDBC level.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    SQL queries\n+                </primary>\n+                <secondary>\n+                    stored procedures\n+                </secondary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    stored procedures\n+                </primary>\n+                <secondary>\n+                    as queries\n+                </secondary>\n+                <seealso>\n+                    Query\n+                </seealso>\n+            </indexterm>\n+In addition to SELECT statements, OpenJPA supports stored procedure invocations\n+as SQL queries. OpenJPA will assume any SQL that does not begin with the\n+<literal>SELECT</literal> keyword (ignoring case) is a stored procedure call,\n+and invoke it as such at the JDBC level.\n+            </para>\n         </note>\n-      </section>\n-      <section id=\"jpa_overview_sqlquery_obj\">\n-        <title>Retrieving Persistent Objects with SQL</title>\n+    </section>\n+    <section id=\"jpa_overview_sqlquery_obj\">\n+        <title>\n+            Retrieving Persistent Objects with SQL\n+        </title>\n         <indexterm zone=\"jpa_overview_sqlquery_obj\">\n-          <primary>SQL queries</primary>\n-          <secondary>retrieving persistent objects</secondary>\n+            <primary>\n+                SQL queries\n+            </primary>\n+            <secondary>\n+                retrieving persistent objects\n+            </secondary>\n         </indexterm>\n         <indexterm zone=\"jpa_overview_sqlquery_obj\">\n-          <primary>persistent objects</primary>\n-          <secondary>retrieving with SQL</secondary>\n-          <seealso>SQL queries</seealso>\n+            <primary>\n+                persistent objects\n+            </primary>\n+            <secondary>\n+                retrieving with SQL\n+            </secondary>\n+            <seealso>\n+                SQL queries\n+            </seealso>\n         </indexterm>\n         <para>\n-    When you give a SQL <classname>Query</classname> a candidate class, it \n-    will return persistent instances of that class.  At a minimum, your \n-    SQL must select the \n-    class' primary key columns, discriminator column (if mapped), and\n-    version column (also if mapped).  The JPA runtime uses the values\n-    of the primary key columns to construct each result object's identity,\n-    and possibly to match it with a persistent object already in the \n-    <classname>EntityManager</classname>'s cache.  When an object is \n-    not already cached, the\n-    implementation creates a new object to represent the current result\n-    row.  It might use the discriminator column value to make sure it \n-    constructs an object of the correct subclass.  Finally, the query \n-    records available version column data for use in optimistic concurrency\n-    checking, should you later change the result object and flush it back \n-    to the database.\n-    </para>\n+When you give a SQL <classname>Query</classname> a candidate class, it will\n+return persistent instances of that class. At a minimum, your SQL must select\n+the class' primary key columns, discriminator column (if mapped), and version\n+column (also if mapped). The JPA runtime uses the values of the primary key\n+columns to construct each result object's identity, and possibly to match it\n+with a persistent object already in the <classname>EntityManager</classname>'s\n+cache. When an object is not already cached, the implementation creates a new\n+object to represent the current result row. It might use the discriminator\n+column value to make sure it constructs an object of the correct subclass.\n+Finally, the query records available version column data for use in optimistic\n+concurrency checking, should you later change the result object and flush it\n+back to the database.\n+        </para>\n         <para>\n-    Aside from the primary key, discriminator, and version columns, any \n-    columns you select are used to populate the persistent fields of each \n-    result object.  JPA implementations will compete on how effectively \n-    they map your selected data to your persistent instance fields.\n-    </para>\n+Aside from the primary key, discriminator, and version columns, any columns you\n+select are used to populate the persistent fields of each result object. JPA\n+implementations will compete on how effectively they map your selected data to\n+your persistent instance fields.\n+        </para>\n         <para>\n-    Let's make the discussion above concrete with an example.  It uses\n-    the following simple mapping between a class and the database:\n-    </para>\n+Let's make the discussion above concrete with an example. It uses the following\n+simple mapping between a class and the database:\n+        </para>\n         <mediaobject>\n-          <imageobject>\n-<!-- PNG image data, 320 x 149 (see README) -->\n-            <imagedata fileref=\"img/sqlquery-featureSelection.png\" width=\"213px\"/>\n-          </imageobject>\n+            <imageobject>\n+                <!-- PNG image data, 320 x 149 (see README) -->\n+                <imagedata fileref=\"img/sqlquery-featureSelection.png\" width=\"213px\">\n+                </imagedata>\n+            </imageobject>\n         </mediaobject>\n         <example id=\"jpa_overview_sqlquery_objex\">\n-          <title>Retrieving Persistent Objects</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Retrieving Persistent Objects\n+            </title>\n+<programlisting>\n Query query = em.createNativeQuery (\"SELECT ISBN, TITLE, PRICE, \"\n     + \"VERS FROM MAG WHERE PRICE &gt; 5 AND PRICE &lt; 10\", Magazine.class);\n List&lt;Magazine&gt; results = query.getResultList ();\n@@ -138,13 +198,15 @@ for (Magazine mag : results)\n </programlisting>\n         </example>\n         <para>\n-    The query above works as advertised, but isn't very flexible.  Let's\n-    update it to take in parameters for the minimum and maximum price, \n-    so we can reuse it to find magazines in any price range:\n-    </para>\n+The query above works as advertised, but isn't very flexible. Let's update it to\n+take in parameters for the minimum and maximum price, so we can reuse it to find\n+magazines in any price range:\n+        </para>\n         <example id=\"jpa_overview_sqlquery_obj_paramex\">\n-          <title>SQL Query Parameters</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                SQL Query Parameters\n+            </title>\n+<programlisting>\n Query query = em.createNativeQuery (\"SELECT ISBN, TITLE, PRICE, \"\n     + \"VERS FROM MAG WHERE PRICE &gt; ?1 AND PRICE &lt; ?2\", Magazine.class);\n \n@@ -156,183 +218,28 @@ for (Magazine mag : results)\n     processMagazine (mag);\n </programlisting>\n         </example>\n-        <para><indexterm><primary>SQL queries</primary><secondary>parameters</secondary></indexterm><indexterm><primary>parameters</primary><secondary>in SQL queries</secondary><seealso>SQL queries</seealso></indexterm>\n-    Like JDBC prepared statements, SQL queries represent parameters with\n-    question marks, but are followed by an integer to represent its\n-    index.\n-    </para>\n-      </section>\n-<!--\n-  <section id=\"jpa_overview_sqlquery_proj\">\n-    <title>SQL Projections</title>\n-    <indexterm zone=\"jpa_overview_sqlquery_proj\">\n-      <primary>SQL queries</primary>\n-      <secondary>projections</secondary>\n-    </indexterm>\n-    <indexterm zone=\"jpa_overview_sqlquery_proj\">\n-      <primary>projections</primary>\n-      <secondary>of column data</secondary>\n-      <seealso>SQL queries</seealso>\n-    </indexterm>\n-    <para>\n-    SQL queries without a candidate class are treated as projections of\n-    column data.  If you select a single column, the query returns\n-    a list of <classname>Object</classname>s.  If you select multiple\n-    columns, it returns a list of <classname>Object[]</classname>s.\n-    In either case, each column value is obtained using the \n-    <methodname>java.sql.ResultSet.getObject</methodname> method.  The \n-    following example demonstrates a query for the values of the \n-    <literal>ISBN</literal> and <literal>VERS</literal> columns of all \n-    <literal>MAG</literal> table records, using the data featureSelection we \n-    defined in <xref linkend=\"jpa_overview_sqlquery_obj\"/>.\n-    </para>\n-    <example id=\"jpa_overview_sqlquery_projex\">\n-      <title>Column Projection</title>\n-<programlisting>\n-Query query = em.newQuery (\"javax.persistence.query.SQL\", \n-    \"SELECT ISBN, VERS FROM MAG\");\n-List results = query.getResultList ();\n-for (Iterator itr = results.iterator (); itr.hasNext ();)\n-{\n-    Object[] data = (Object[]) results.next ();\n-    processISBNAndVersion (data[0], data[1]);\n-}\n-</programlisting>\n-      <para>\n-      Notice that in the code above, we did not set a candidate class. \n-      Therefore, the query is treated as a projection.\n-      </para>\n-    </example>\n-    <para>\n-    <indexterm>\n-      <primary>SQL queries</primary>\n-      <secondary>result class</secondary>\n-    </indexterm>\n-    Our discussion of JPQL query result classes in \n-    <xref linkend=\"jpa_overview_query_resultcls\"/> also \n-    applies to SQL queries.  As with JPQL queries, SQL queries can \n-    automatically pack their results into objects of a specified type.  \n-    JPA uses the <methodname>java.sql.ResultSetMetaData.getColumnLabel\n-    </methodname> method to match each column alias to the result class' \n-    public fields and JavaBean setter methods.  Here is a modification of \n-    our example above that packs the selected column values into JavaBean\n-    instances.\n-    </para>\n-    <example id=\"jpa_overview_sqlquery_proj_labelex\">\n-      <title>Result Class</title>\n-<programlisting>\n-public class Identity\n-{\n-    private String id;\n-    private int versionNumber;\n-\n-    public void setId (String id)\n-    {\n-        this.id = id;\n-    }\n-\n-    public String getId ()\n-    {\n-        return id;\n-    }\n-\n-    public void setVersionNumber (int versionNumber)\n-    {\n-        this.versionNumber = versionNumber;\n-    }\n- \n-    public int getVersionNumber ()\n-    {\n-        return versionNumber;\n-    }\n-}\n-\n-Query query = em.createNativeQuery (\"javax.persistence.query.SQL\", \n-    \"SELECT ISBN AS id, VERS AS versionNumber FROM MAG\", Identity.class);\n-List results = query.getResultList ();\n-for (Iterator itr = results.iterator (); itr.hasNext ();)\n-    processIdentity ((Identity) itr.next ());\n-</programlisting>\n-    </example>\n-  </section>\n-  <section id=\"jpa_overview_sqlquery_named\">\n-    <title>Named SQL Queries</title>\n-    <indexterm zone=\"jpa_overview_sqlquery_named\">\n-      <primary>SQL queries</primary>\n-      <secondary>named</secondary>\n-      <see>named queries</see>\n-    </indexterm>\n-    <indexterm zone=\"jpa_overview_sqlquery_named\">\n-      <primary>named queries</primary>\n-      <secondary>SQL</secondary>\n-    </indexterm>\n-    <para>\n-    We discussed how to write named JPQL queries in\n-    <xref linkend=\"jpa_overview_query_named\"/>.  Named queries, however,\n-    are not limited to JPQL.  By setting the <literal>query</literal>\n-    element's <literal>language</literal> attribute to <literal>\n-    javax.persistence.query.SQL</literal>, you can define a named SQL query.  A \n-    named SQL query within a <literal>class</literal> element queries for\n-    instances of that class; a named SQL query outside of a <literal>class\n-    </literal> element acts as a column data projection.  \n-    </para>\n-    <example id=\"jpa_overview_sqlquery_namedex\">\n-      <title>Named SQL Queries</title>\n-<programlisting>\n-<![CDATA[<?xml version=\"1.0\"?>\n-<jdoquery>\n-    <query name=\"salesReport\" language=\"javax.persistence.query.SQL\">\n-        SELECT TITLE, PRICE * COPIES FROM MAG\n-    </query>\n-    <package name=\"org.mag\">\n-        <class name=\"Magazine\">\n-            <query name=\"findByTitle\" language=\"javax.persistence.query.SQL\">\n-                SELECT * FROM MAG WHERE TITLE = ?\n-            </query>\n-        </class>\n-    </package>\n-</jdoquery>]]>\n-</programlisting>\n-      <para>\n-      The <literal>salesReport</literal> query above returns the title\n-      and revenue generated for each <classname>Magazine</classname>.\n-      Because it is a projection, it does not have a candidate class, and\n-      so we specify it at the root level.\n-      </para>\n-      <para>\n-      The <literal>findByTitle</literal> query returns the <classname>\n-      Magazine</classname> with the title given on execution.  The code \n-      below executes both queries.\n-      </para>\n-<programlisting>\n-EntityManager em = ...;\n-Query query = em.newNamedQuery (null, \"salesReport\");\n-List sales = query.getResultList ();\n-for (Iterator itr = sales.iterator (); itr.hasNext ();)\n-{\n-    Object[] salesData = (Object[]) itr.next ();\n-    processSalesData ((String) salesData[0], (Number) salesData[1]);\n-}\n-\n-query = em.newNamedQuery (Magazine.class, \"findByTitle\");\n-query.setUnique (true);\n-Magazine jdj = (Magazine) query.execute (\"JDJ\"); \n-</programlisting>\n-    </example>\n-  </section>\n-  <section id=\"jpa_overview_sqlquery_conclusion\">\n-    <title>Conclusion</title>\n-    <para>\n-    If you've used relational databases extensively, you might be tempted\n-    to perform all your JPA queries with SQL.  Try to resist this \n-    temptation.  SQL queries tie your application to the particulars of\n-    your current table featureSelection and database vendor.  If you stick with JPQL,\n-    on the other hand, you can port your application to other schemas and \n-    database vendors without any changes to your code.  Additionally,\n-    most JPA implementations already produce highly optimized SQL from\n-    your JPQL filters, and many are able to cache JPQL query results\n-    for added performance. \n-    </para>\n-  </section>\n-  -->\n-    </chapter>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                SQL queries\n+            </primary>\n+            <secondary>\n+                parameters\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                parameters\n+            </primary>\n+            <secondary>\n+                in SQL queries\n+            </secondary>\n+            <seealso>\n+                SQL queries\n+            </seealso>\n+        </indexterm>\n+Like JDBC prepared statements, SQL queries represent parameters with question\n+marks, but are followed by an integer to represent its index.\n+        </para>\n+    </section>\n+</chapter>"},{"sha":"dfc2198e2218b265cb1013ba67c02803f82fa31f","filename":"openjpa-project/src/doc/manual/jpa_overview_trans.xml","status":"modified","additions":370,"deletions":181,"changes":551,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_trans.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_trans.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_trans.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,214 +1,403 @@\n-\n-    <chapter id=\"jpa_overview_trans\">\n-      <title>Transaction</title>\n-      <indexterm zone=\"jpa_overview_trans\">\n-        <primary>transactions</primary>\n-        <seealso>Transaction</seealso>\n-      </indexterm>\n-      <para>\n-  Transactions are critical to maintaining data integrity.  They are \n-  used to group operations into units of work that act in an \n-  all-or-nothing fashion.  Transactions have the following qualities:\n-  </para>\n-      <itemizedlist>\n+<chapter id=\"jpa_overview_trans\">\n+    <title>\n+        Transaction\n+    </title>\n+    <indexterm zone=\"jpa_overview_trans\">\n+        <primary>\n+            transactions\n+        </primary>\n+        <seealso>\n+            Transaction\n+        </seealso>\n+    </indexterm>\n+    <para>\n+Transactions are critical to maintaining data integrity. They are used to group\n+operations into units of work that act in an all-or-nothing fashion.\n+Transactions have the following qualities:\n+    </para>\n+    <itemizedlist>\n         <listitem>\n-          <para><indexterm><primary>atomicity</primary><seealso>transactions</seealso></indexterm><indexterm><primary>transactions</primary><secondary>atomicity</secondary></indexterm><emphasis>Atomicity</emphasis>.  Atomicity refers to the\n-      all-or-nothing property of transactions.  Either every \n-      data update in the transaction completes successfully, or they\n-      all fail, leaving the datastore in its original state.  A\n-      transaction cannot be only partially successful.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    atomicity\n+                </primary>\n+                <seealso>\n+                    transactions\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    transactions\n+                </primary>\n+                <secondary>\n+                    atomicity\n+                </secondary>\n+            </indexterm>\n+<emphasis>Atomicity</emphasis>. Atomicity refers to the all-or-nothing property\n+of transactions. Either every data update in the transaction completes\n+successfully, or they all fail, leaving the datastore in its original state. A\n+transaction cannot be only partially successful.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>consistency</primary><seealso>transactions</seealso></indexterm><indexterm><primary>transactions</primary><secondary>consistency</secondary></indexterm><emphasis>Consistency</emphasis>.  Each transaction takes the\n-      datastore from one consistent state to another consistent\n-      state.  \n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    consistency\n+                </primary>\n+                <seealso>\n+                    transactions\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    transactions\n+                </primary>\n+                <secondary>\n+                    consistency\n+                </secondary>\n+            </indexterm>\n+<emphasis>Consistency</emphasis>. Each transaction takes the datastore from one\n+consistent state to another consistent state.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>isolation</primary><seealso>transactions</seealso></indexterm><indexterm><primary>transactions</primary><secondary>isolation</secondary></indexterm><emphasis>Isolation</emphasis>.  Transactions are isolated from\n-      each other.  When you are reading persistent data in one\n-      transaction, you cannot \"see\" the changes that are being made\n-      to that data in other transactions.  Similarly,\n-      the updates you make in one transaction cannot conflict with\n-      updates made in concurrent transactions.  The form of\n-      conflict resolution employed depends on whether you are using\n-      pessimistic or optimistic transactions.  Both types are\n-      described later in this chapter.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    isolation\n+                </primary>\n+                <seealso>\n+                    transactions\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    transactions\n+                </primary>\n+                <secondary>\n+                    isolation\n+                </secondary>\n+            </indexterm>\n+<emphasis>Isolation</emphasis>. Transactions are isolated from each other. When\n+you are reading persistent data in one transaction, you cannot \"see\" the changes\n+that are being made to that data in other transactions. Similarly, the updates\n+you make in one transaction cannot conflict with updates made in concurrent\n+transactions. The form of conflict resolution employed depends on whether you\n+are using pessimistic or optimistic transactions. Both types are described later\n+in this chapter.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>durability</primary><seealso>transactions</seealso></indexterm><indexterm><primary>transactions</primary><secondary>durability</secondary></indexterm><emphasis>Durability</emphasis>.  The effects of successful\n-      transactions are durable; the updates made to persistent data\n-      last for the lifetime of the datastore.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    durability\n+                </primary>\n+                <seealso>\n+                    transactions\n+                </seealso>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    transactions\n+                </primary>\n+                <secondary>\n+                    durability\n+                </secondary>\n+            </indexterm>\n+<emphasis>Durability</emphasis>. The effects of successful transactions are\n+durable; the updates made to persistent data last for the lifetime of the\n+datastore.\n+            </para>\n         </listitem>\n-      </itemizedlist>\n-      <para><indexterm><primary>ACID</primary><seealso>transactions</seealso></indexterm><indexterm><primary>transactions</primary><secondary>ACID</secondary></indexterm>\n-  Together, these qualities are called the ACID properties of\n-  transactions.  To understand why these properties are so important\n-  to maintaining data integrity, consider the following example:\n-  </para>\n-      <para>\n-  Suppose you create an application to manage bank accounts.  The \n-  application includes a method to transfer funds from one user to\n-  another, and it looks something like this:\n-  </para>\n-      <programlisting format=\"linespecific\">\n+    </itemizedlist>\n+    <para>\n+    <indexterm>\n+        <primary>\n+            ACID\n+        </primary>\n+        <seealso>\n+            transactions\n+        </seealso>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            transactions\n+        </primary>\n+        <secondary>\n+            ACID\n+        </secondary>\n+    </indexterm>\n+Together, these qualities are called the ACID properties of transactions. To\n+understand why these properties are so important to maintaining data integrity,\n+consider the following example:\n+    </para>\n+    <para>\n+Suppose you create an application to manage bank accounts. The application\n+includes a method to transfer funds from one user to another, and it looks\n+something like this:\n+    </para>\n+<programlisting>\n public void transferFunds (User from, User to, double amnt)\n {\n     from.decrementAccount (amnt);\n     to.incrementAccount (amnt);\n }\n </programlisting>\n-      <para>\n-  Now suppose that user Alice wants to transfer 100 dollars to user Bob.\n-  No problem; you simply invoke your \n-  <methodname>transferFunds</methodname> method, supplying Alice in the\n-  <literal>from</literal> parameter, Bob in the <literal>to</literal>\n-  parameter, and <literal>100.00</literal> as the <literal>amnt</literal>.\n-  The first line of the method is executed, and 100 dollars is subtracted\n-  from Alice's account.  But then, something goes wrong.  An unexpected\n-  exception occurs, or the hardware fails, and your method never\n-  completes.\n-  </para>\n-      <para>\n-  You are left with a situation in which the 100 dollars has simply \n-  disappeared.  Thanks to the first line of your method, it is no longer\n-  in Alice's account, and yet it was never transferred to Bob's account \n-  either.  The datastore is in an inconsistent state.\n-  </para>\n-      <para>\n-  The importance of transactions should now be clear.  If the two lines\n-  of the <methodname>transferFunds</methodname> method had been placed \n-  together in a transaction, it would be impossible for only the\n-  first line to succeed.  Either the funds would be transferred \n-  properly or they would not be transferred at all, and an exception\n-  would be thrown.  Money could never vanish into thin air, and the data \n-  store could never get into an inconsistent state.  \n-  </para>\n-      <section id=\"jpa_overview_trans_types\">\n-        <title>Transaction Types</title>\n-        <indexterm zone=\"jpa_overview_trans_types\">\n-          <primary>transactions</primary>\n-          <secondary>types</secondary>\n-        </indexterm>\n-        <para>\n-    There are two major types of transactions: pessimistic transactions \n-    and optimistic transactions.  Each type has both advantages and \n-    disadvantages.\n-    </para>\n-        <para><indexterm><primary>transactions</primary><secondary>pessimistic</secondary></indexterm><indexterm><primary>pessimistic transactions</primary><see>transactions, pessimistic</see></indexterm><indexterm><primary>deadlock</primary><seealso>transactions</seealso></indexterm>\n-    Pessimistic transactions generally lock the datastore records they\n-    act on, preventing other concurrent transactions from using the\n-    same data.  This avoids conflicts between transactions, but \n-    consumes database resources.  Additionally, locking records\n-    can result in <emphasis>deadlock</emphasis>, a situation in which two \n-    transactions are both waiting for the other to release its locks before\n-    completing.  The results of a deadlock are datastore-dependent; \n-    usually one transaction is forcefully rolled back after some specified \n-    timeout interval, and an exception is thrown.\n+    <para>\n+Now suppose that user Alice wants to transfer 100 dollars to user Bob. No\n+problem; you simply invoke your <methodname>transferFunds</methodname> method,\n+supplying Alice in the <literal>from</literal> parameter, Bob in the <literal>\n+to</literal> parameter, and <literal>100.00</literal> as the <literal>amnt\n+</literal>. The first line of the method is executed, and 100 dollars is\n+subtracted from Alice's account. But then, something goes wrong. An unexpected\n+exception occurs, or the hardware fails, and your method never completes.\n     </para>\n-        <para><indexterm><primary>transactions</primary><secondary>datastore</secondary></indexterm><indexterm><primary>datastore transactions</primary><see>transactions, datastore</see></indexterm>\n-    This document will often use the term <emphasis>datastore</emphasis>\n-    transaction in place of <emphasis>pessimistic</emphasis> transaction.\n-    This is to acknowledge that some datastores do not support pessimistic \n-    semantics, and that the exact meaning of a non-optimistic JPA \n-    transaction is dependent on the datastore.  Most of the \n-    time, a datastore transaction is equivalent to a pessimistic \n-    transaction.  \n+    <para>\n+You are left with a situation in which the 100 dollars has simply disappeared.\n+Thanks to the first line of your method, it is no longer in Alice's account, and\n+yet it was never transferred to Bob's account either. The datastore is in an\n+inconsistent state.\n     </para>\n-        <para><indexterm><primary>transactions</primary><secondary>optimistic</secondary></indexterm><indexterm><primary>optimistic transactions</primary><see>transactions, optimistic</see></indexterm>\n-    Optimistic transactions consume less resources than\n-    pessimistic/datastore transactions, but only at the expense of \n-    reliability.  Because optimistic transactions do not lock datastore \n-    records, two transactions might change the same persistent information\n-    at the same time, and the conflict will not be detected until\n-    the second transaction attempts to flush or commit.  At this time, the\n-    second transaction will realize that another transaction has \n-    concurrently modified the same records (usually through a timestamp\n-    or versioning system), and will throw an appropriate exception.\n-    Note that optimistic transactions still maintain data integrity;\n-    they are simply more likely to fail in heavily concurrent \n-    situations.\n+    <para>\n+The importance of transactions should now be clear. If the two lines of the\n+<methodname>transferFunds</methodname> method had been placed together in a\n+transaction, it would be impossible for only the first line to succeed. Either\n+the funds would be transferred properly or they would not be transferred at all,\n+and an exception would be thrown. Money could never vanish into thin air, and\n+the data store could never get into an inconsistent state.\n     </para>\n+    <section id=\"jpa_overview_trans_types\">\n+        <title>\n+            Transaction Types\n+        </title>\n+        <indexterm zone=\"jpa_overview_trans_types\">\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                types\n+            </secondary>\n+        </indexterm>\n         <para>\n-    Despite their drawbacks, optimistic transactions are the best choice\n-    for most applications.  They offer better performance, better\n-    scalability, and lower risk of hanging due to deadlock.  \n-    </para>\n+There are two major types of transactions: pessimistic transactions and\n+optimistic transactions. Each type has both advantages and disadvantages.\n+        </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                pessimistic\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                pessimistic transactions\n+            </primary>\n+            <see>\n+                transactions, pessimistic\n+            </see>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                deadlock\n+            </primary>\n+            <seealso>\n+                transactions\n+            </seealso>\n+        </indexterm>\n+Pessimistic transactions generally lock the datastore records they act on,\n+preventing other concurrent transactions from using the same data. This avoids\n+conflicts between transactions, but consumes database resources. Additionally,\n+locking records can result in <emphasis>deadlock</emphasis>, a situation in\n+which two transactions are both waiting for the other to release its locks\n+before completing. The results of a deadlock are datastore-dependent; usually\n+one transaction is forcefully rolled back after some specified timeout interval,\n+and an exception is thrown.\n+        </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                datastore\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                datastore transactions\n+            </primary>\n+            <see>\n+                transactions, datastore\n+            </see>\n+        </indexterm>\n+This document will often use the term <emphasis>datastore</emphasis> transaction\n+in place of <emphasis>pessimistic</emphasis> transaction. This is to acknowledge\n+that some datastores do not support pessimistic semantics, and that the exact\n+meaning of a non-optimistic JPA transaction is dependent on the datastore. Most\n+of the time, a datastore transaction is equivalent to a pessimistic transaction.\n+        </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                optimistic\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                optimistic transactions\n+            </primary>\n+            <see>\n+                transactions, optimistic\n+            </see>\n+        </indexterm>\n+Optimistic transactions consume less resources than pessimistic/datastore\n+transactions, but only at the expense of reliability. Because optimistic\n+transactions do not lock datastore records, two transactions might change the\n+same persistent information at the same time, and the conflict will not be\n+detected until the second transaction attempts to flush or commit. At this time,\n+the second transaction will realize that another transaction has concurrently\n+modified the same records (usually through a timestamp or versioning system),\n+and will throw an appropriate exception. Note that optimistic transactions still\n+maintain data integrity; they are simply more likely to fail in heavily\n+concurrent situations.\n+        </para>\n+        <para>\n+Despite their drawbacks, optimistic transactions are the best choice for most\n+applications. They offer better performance, better scalability, and lower risk\n+of hanging due to deadlock.\n+        </para>\n         <note>\n-          <para>\n-      OpenJPA uses optimistic semantics by default, but supports both \n-      optimistic and datastore transactions.\n-      OpenJPA also offers advanced locking and versioning APIs for \n-      fine-grained control over database resource allocation and object \n-      versioning.  See <xref linkend=\"ref_guide_locking\"/> and\n-      <xref linkend=\"ref_guide_lock_groups\"/> of the Reference Guide for \n-      details on locking.  <xref linkend=\"jpa_overview_meta_version\"/>\n-      of this document covers standard object versioning.\n-      <!-- ### EJBDOC : link additional strats when available from JPA -->\n-      </para>\n+            <para>\n+OpenJPA uses optimistic semantics by default, but supports both optimistic and\n+datastore transactions. OpenJPA also offers advanced locking and versioning APIs\n+for fine-grained control over database resource allocation and object\n+versioning. See <xref linkend=\"ref_guide_locking\"></xref> and\n+<xref linkend=\"ref_guide_lock_groups\"></xref> of the Reference Guide for details\n+on locking. <xref linkend=\"jpa_overview_meta_version\"></xref>\n+of this document covers standard object versioning, while\n+<xref linkend=\"ref_guide_mapping_jpa\"/> of the Reference Guide discusses \n+additional versioning strategies available in OpenJPA.\n+            </para>\n         </note>\n-      </section>\n-      <section id=\"jpa_overview_trans_ejb3\">\n-        <title>The EntityTransaction Interface</title>\n-        <indexterm zone=\"jpa_overview_trans_ejb3\">\n-          <primary>Transaction</primary>\n-          <seealso>transactions</seealso>\n+    </section>\n+    <section id=\"jpa_overview_trans_local\">\n+        <title>\n+            The EntityTransaction Interface\n+        </title>\n+        <indexterm zone=\"jpa_overview_trans_local\">\n+            <primary>\n+                Transaction\n+            </primary>\n+            <seealso>\n+                transactions\n+            </seealso>\n         </indexterm>\n         <mediaobject>\n-          <imageobject>\n-<!-- PNG image data, 193 x 157 (see README) -->\n-            <imagedata fileref=\"img/jpa-transaction.png\" width=\"129px\"/>\n-          </imageobject>\n+            <imageobject>\n+                <!-- PNG image data, 193 x 157 (see README) -->\n+                <imagedata fileref=\"img/jpa-transaction.png\" width=\"129px\">\n+                </imagedata>\n+            </imageobject>\n         </mediaobject>\n         <para>\n-    JPA integrates with your container's <emphasis>managed\n-    </emphasis> transactions, allowing you to use the container's \n-    declarative transaction demarcation and its Java Transaction API (JTA) \n-    implementation for transaction management.  \n-    Outside of a container, though, you must demarcate transactions\n-    manually through JPA.  The <classname>\n-    EntityTransaction</classname> interface controls unmanaged transactions\n-    in JPA.  \n-    </para>\n-        <programlisting format=\"linespecific\">\n+JPA integrates with your container's <emphasis>managed</emphasis> transactions,\n+allowing you to use the container's declarative transaction demarcation and its\n+Java Transaction API (JTA) implementation for transaction management. Outside of\n+a container, though, you must demarcate transactions manually through JPA. The\n+<classname> EntityTransaction</classname> interface controls unmanaged\n+transactions in JPA.\n+        </para>\n+<programlisting>\n public void begin ();\n public void commit ();\n public void rollback ();\n </programlisting>\n-        <para><indexterm><primary>Transaction</primary><secondary>demarcation</secondary></indexterm><indexterm><primary>transactions</primary><secondary>demarcating</secondary></indexterm><indexterm><primary>Transaction</primary><secondary>begin</secondary></indexterm><indexterm><primary>Transaction</primary><secondary>commit</secondary></indexterm><indexterm><primary>Transaction</primary><secondary>rollback</secondary></indexterm>\n-    The <methodname>begin</methodname>, <methodname>commit</methodname>,\n-    and <methodname>rollback</methodname> methods demarcate transaction\n-    boundaries.  The methods should be self-explanatory: \n-    <methodname>begin</methodname> starts a transaction, \n-    <methodname>commit</methodname> attempts to commit the transaction's\n-    changes to the datastore, and <methodname>rollback</methodname>\n-    aborts the transaction, in which case the datastore is \n-    \"rolled back\" to its previous state.  JPA \n-    implementations will automatically roll back transactions if any \n-    exception is thrown during the commit process.\n-    </para>\n         <para>\n-    Unless you are using an extended persistence context, committing or\n-    rolling back also ends the persistence context.  All managed entites\n-    will be detached from the <classname>EntityManager</classname>.\n-    </para>\n-        <programlisting format=\"linespecific\">\n+        <indexterm>\n+            <primary>\n+                Transaction\n+            </primary>\n+            <secondary>\n+                demarcation\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                demarcating\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                Transaction\n+            </primary>\n+            <secondary>\n+                begin\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                Transaction\n+            </primary>\n+            <secondary>\n+                commit\n+            </secondary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                Transaction\n+            </primary>\n+            <secondary>\n+                rollback\n+            </secondary>\n+        </indexterm>\n+The <methodname>begin</methodname>, <methodname>commit</methodname>, and\n+<methodname>rollback</methodname> methods demarcate transaction boundaries. The\n+methods should be self-explanatory: <methodname>begin</methodname> starts a\n+transaction, <methodname>commit</methodname> attempts to commit the\n+transaction's changes to the datastore, and <methodname>rollback</methodname>\n+aborts the transaction, in which case the datastore is \"rolled back\" to its\n+previous state. JPA implementations will automatically roll back transactions if\n+any exception is thrown during the commit process.\n+        </para>\n+        <para>\n+Unless you are using an extended persistence context, committing or rolling back\n+also ends the persistence context. All managed entites will be detached from the\n+<classname>EntityManager</classname>.\n+        </para>\n+<programlisting>\n public boolean isActive ();\n </programlisting>\n-        <para><indexterm><primary>Transaction</primary><secondary>isActive</secondary></indexterm>\n-    Finally, the <methodname>isActive</methodname> method returns \n-    <literal>true</literal> if the transaction is in progress \n-    (<methodname>begin</methodname> has been called more recently than \n-    <methodname>commit</methodname> or \n-    <methodname>rollback</methodname>), and <literal>false</literal> \n-    otherwise.\n-    </para>\n+        <para>\n+        <indexterm>\n+            <primary>\n+                Transaction\n+            </primary>\n+            <secondary>\n+                isActive\n+            </secondary>\n+        </indexterm>\n+Finally, the <methodname>isActive</methodname> method returns <literal>true\n+</literal> if the transaction is in progress ( <methodname>begin</methodname>\n+has been called more recently than <methodname>commit</methodname> or\n+<methodname>rollback</methodname> ), and <literal>false</literal> otherwise.\n+        </para>\n         <example id=\"jpa_overview_trans_group\">\n-          <title>Grouping Operations with Transactions</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Grouping Operations with Transactions\n+            </title>\n+<programlisting>\n public void transferFunds (EntityManager em, User from, User to, double amnt)\n {\n     // note: it would be better practice to move the transaction demarcation\n@@ -230,5 +419,5 @@ public void transferFunds (EntityManager em, User from, User to, double amnt)\n }\n </programlisting>\n         </example>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"fcc23e78ba0ecd41697400fe60f1504be676e2bd","filename":"openjpa-project/src/doc/manual/jpa_overview_why.xml","status":"modified","additions":648,"deletions":354,"changes":1002,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_why.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_overview_why.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_why.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,371 +1,665 @@\n-\n-    <chapter id=\"jpa_overview_why\">\n-      <title>Why JPA?</title>\n-      <indexterm zone=\"jpa_overview_why\">\n-        <primary>JPA</primary>\n-        <secondary>why</secondary>\n-      </indexterm>\n-      <para>\n-  Java developers who need to store and retrieve persistent \n-  data already have several options available to them:\n-  serialization, JDBC, JDO, proprietary object-relational mapping tools, \n-  object databases, and EJB 2 entity beans.  Why introduce yet   \n-  another persistence framework?  The answer to this question is that with\n-  the exception of JDO, each of the aforementioned persistence solutions\n-  has severe limitations.  JPA attempts to overcome these\n-  limitations, as illustrated by the table below.\n-  </para>\n-      <table tocentry=\"1\">\n-        <title>Persistence Mechanisms</title>\n+<chapter id=\"jpa_overview_why\">\n+    <title>\n+        Why JPA?\n+    </title>\n+    <indexterm zone=\"jpa_overview_why\">\n+        <primary>\n+            JPA\n+        </primary>\n+        <secondary>\n+            why\n+        </secondary>\n+    </indexterm>\n+    <para>\n+Java developers who need to store and retrieve persistent data already have\n+several options available to them: serialization, JDBC, JDO, proprietary\n+object-relational mapping tools, object databases, and EJB 2 entity beans. Why\n+introduce yet another persistence framework? The answer to this question is that\n+with the exception of JDO, each of the aforementioned persistence solutions has\n+severe limitations. JPA attempts to overcome these limitations, as illustrated\n+by the table below.\n+    </para>\n+    <table tocentry=\"1\">\n+        <title>\n+            Persistence Mechanisms\n+        </title>\n         <tgroup cols=\"8\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n-          <colspec colname=\"sup\"/>\n-          <colspec colname=\"ser\"/>\n-          <colspec colname=\"jdbc\"/>\n-          <colspec colname=\"or\"/>\n-          <colspec colname=\"objdb\"/>\n-          <colspec colname=\"ejb2\"/>\n-          <colspec colname=\"jdo\"/>\n-          <colspec colname=\"ejb3\"/>\n-          <thead>\n-            <row>\n-              <entry colname=\"sup\">Supports:</entry>\n-              <entry colname=\"ser\">Serialization</entry>\n-              <entry colname=\"jdbc\">JDBC</entry>\n-              <entry colname=\"or\">ORM</entry>\n-              <entry colname=\"objdb\">ODB</entry>\n-              <entry colname=\"ejb2\">EJB 2</entry>\n-              <entry colname=\"jdo\">JDO</entry>\n-              <entry colname=\"ejb3\">JPA</entry>\n-            </row>\n-          </thead>\n-          <tbody>\n-            <row>\n-              <entry colname=\"sup\">Java Objects</entry>\n-              <entry colname=\"ser\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdbc\">No</entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Advanced OO Concepts</entry>\n-              <entry colname=\"ser\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdbc\">No</entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">No</entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Transactional Integrity</entry>\n-              <entry colname=\"ser\">No</entry>\n-              <entry colname=\"jdbc\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Concurrency</entry>\n-              <entry colname=\"ser\">No</entry>\n-              <entry colname=\"jdbc\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Large Data Sets</entry>\n-              <entry colname=\"ser\">No</entry>\n-              <entry colname=\"jdbc\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Existing Schema</entry>\n-              <entry colname=\"ser\">No</entry>\n-              <entry colname=\"jdbc\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">No</entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">\n+            <colspec colname=\"sup\">\n+            </colspec>\n+            <colspec colname=\"ser\">\n+            </colspec>\n+            <colspec colname=\"jdbc\">\n+            </colspec>\n+            <colspec colname=\"or\">\n+            </colspec>\n+            <colspec colname=\"objdb\">\n+            </colspec>\n+            <colspec colname=\"ejb2\">\n+            </colspec>\n+            <colspec colname=\"jdo\">\n+            </colspec>\n+            <colspec colname=\"jpa\">\n+            </colspec>\n+            <thead>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Supports:\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        Serialization\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        JDBC\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        ORM\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        ODB\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        EJB 2\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        JDO\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        JPA\n+                    </entry>\n+                </row>\n+            </thead>\n+            <tbody>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Java Objects\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Advanced OO Concepts\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Transactional Integrity\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Concurrency\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Large Data Sets\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Existing Schema\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        \n             Relational and Non-Relational Stores\n-          </entry>\n-              <entry colname=\"ser\">No</entry>\n-              <entry colname=\"jdbc\">No</entry>\n-              <entry colname=\"or\">No</entry>\n-              <entry colname=\"objdb\">No</entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">No</entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Queries</entry>\n-              <entry colname=\"ser\">No</entry>\n-              <entry colname=\"jdbc\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Strict Standards / Portability</entry>\n-              <entry colname=\"ser\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdbc\">No</entry>\n-              <entry colname=\"or\">No</entry>\n-              <entry colname=\"objdb\">No</entry>\n-              <entry colname=\"ejb2\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"sup\">Simplicity</entry>\n-              <entry colname=\"ser\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"jdbc\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"or\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"objdb\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb2\">No</entry>\n-              <entry colname=\"jdo\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-              <entry colname=\"ejb3\">\n-                <emphasis role=\"bold\">Yes</emphasis>\n-              </entry>\n-            </row>\n-          </tbody>\n+          \n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        No\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Queries\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Strict Standards / Portability\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"sup\">\n+                        Simplicity\n+                    </entry>\n+                    <entry colname=\"ser\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jdbc\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"or\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"objdb\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"ejb2\">\n+                        No\n+                    </entry>\n+                    <entry colname=\"jdo\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                    <entry colname=\"jpa\">\n+                        <emphasis role=\"bold\">\n+                            Yes\n+                        </emphasis>\n+                    </entry>\n+                </row>\n+            </tbody>\n         </tgroup>\n-      </table>\n-      <itemizedlist>\n+    </table>\n+    <itemizedlist>\n         <listitem>\n-          <para><indexterm><primary>serialization</primary></indexterm><indexterm><primary>JPA</primary><secondary>vs serialization</secondary></indexterm><emphasis>Serialization</emphasis> is Java's \n-      built-in mechanism for transforming an object graph into a\n-      series of bytes, which can then be sent over the network or\n-      stored in a file.  Serialization is very easy to use, \n-      but it is also very limited.  It must store and retrieve the\n-      entire object graph at once, making it unsuitable for\n-      dealing with large amounts of data.  It cannot undo changes \n-      that are made to objects if an error occurs while updating\n-      information, making it unsuitable for applications that \n-      require strict data integrity.  Multiple threads or programs\n-      cannot read and write the same serialized data concurrently\n-      without conflicting with each other.  It provides no query\n-      capabilities.  All these factors make serialization useless \n-      for all but the most trivial persistence needs.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    serialization\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    vs serialization\n+                </secondary>\n+            </indexterm>\n+<emphasis>Serialization</emphasis> is Java's built-in mechanism for transforming\n+an object graph into a series of bytes, which can then be sent over the network\n+or stored in a file. Serialization is very easy to use, but it is also very\n+limited. It must store and retrieve the entire object graph at once, making it\n+unsuitable for dealing with large amounts of data. It cannot undo changes that\n+are made to objects if an error occurs while updating information, making it\n+unsuitable for applications that require strict data integrity. Multiple threads\n+or programs cannot read and write the same serialized data concurrently without\n+conflicting with each other. It provides no query capabilities. All these\n+factors make serialization useless for all but the most trivial persistence\n+needs.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>Java Database Connectivity</primary><see>JDBC</see></indexterm><indexterm><primary>JDBC</primary></indexterm><indexterm><primary>JPA</primary><secondary>vs JDBC</secondary></indexterm>\n-      Many developers use the \n-      <emphasis>Java Database Connectivity</emphasis> (JDBC) APIs to\n-      manipulate persistent data in relational databases.  JDBC \n-      overcomes most of the shortcomings of serialization:\n-      it can handle large amounts of data, has mechanisms to ensure\n-      data integrity, supports concurrent access to information, and \n-      has a sophisticated query language in SQL.  Unfortunately, JDBC\n-      does not duplicate serialization's ease of use.  The relational\n-      paradigm used by JDBC was not designed for storing objects,\n-      and therefore forces you to either abandon\n-      object-oriented programming for the portions of your code \n-      that deal with persistent data, or to find a way of mapping \n-      object-oriented concepts like inheritance to relational \n-      databases yourself.  \n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    Java Database Connectivity\n+                </primary>\n+                <see>\n+                    JDBC\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JDBC\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    vs JDBC\n+                </secondary>\n+            </indexterm>\n+Many developers use the <emphasis>Java Database Connectivity</emphasis> (JDBC)\n+APIs to manipulate persistent data in relational databases. JDBC overcomes most\n+of the shortcomings of serialization: it can handle large amounts of data, has\n+mechanisms to ensure data integrity, supports concurrent access to information,\n+and has a sophisticated query language in SQL. Unfortunately, JDBC does not\n+duplicate serialization's ease of use. The relational paradigm used by JDBC was\n+not designed for storing objects, and therefore forces you to either abandon\n+object-oriented programming for the portions of your code that deal with\n+persistent data, or to find a way of mapping object-oriented concepts like\n+inheritance to relational databases yourself.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>object-relational mapping</primary><see>ORM</see></indexterm><indexterm><primary>ORM</primary></indexterm><indexterm><primary>JPA</primary><secondary>vs ORM products</secondary></indexterm>\n-      There are many proprietary software products that can perform the\n-      mapping between objects and relational database tables for you.\n-      These <emphasis>object-relational mapping</emphasis> (ORM) \n-      frameworks allow you to focus on the object featureSelection and not concern\n-      yourself with the mismatch between \n-      the object-oriented and relational paradigms.  Unfortunately, \n-      each of these product has its own set of APIs.\n-      Your code becomes tied to the proprietary interfaces of a single\n-      vendor.  If the vendor raises prices, fails to fix show-stopping \n-      bugs, or falls behind in features, you cannot switch to another \n-      product without rewriting all of your persistence code.   This is \n-      referred to as vendor lock-in.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    object-relational mapping\n+                </primary>\n+                <see>\n+                    ORM\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    ORM\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    vs ORM products\n+                </secondary>\n+            </indexterm>\n+There are many proprietary software products that can perform the mapping\n+between objects and relational database tables for you. These <emphasis>\n+object-relational mapping</emphasis> (ORM) frameworks allow you to focus on the\n+object featureSelection and not concern yourself with the mismatch between the\n+object-oriented and relational paradigms. Unfortunately, each of these product\n+has its own set of APIs. Your code becomes tied to the proprietary interfaces of\n+a single vendor. If the vendor raises prices, fails to fix show-stopping bugs,\n+or falls behind in features, you cannot switch to another product without\n+rewriting all of your persistence code. This is referred to as vendor lock-in.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>object database</primary><see>ODB</see></indexterm><indexterm><primary>ODB</primary></indexterm><indexterm><primary>JPA</primary><secondary>vs ODBs</secondary></indexterm><indexterm><primary>ODBMG</primary></indexterm>\n-      Rather than map objects to relational databases, some software\n-      companies have developed a form of database designed \n-      specifically to store objects.  These\n-      <emphasis>object databases</emphasis> (ODBs) are often much\n-      easier to use than object-relational mapping software.\n-      The Object Database Management Group (ODMG) was formed to create\n-      a standard API for accessing object databases; few object\n-      database vendors, however, comply with the ODMG's \n-      recommendations.  Thus, vendor lock-in plagues object databases\n-      as well.  Many companies are also hesitant to switch from\n-      tried-and-true relational systems to the relatively unknown object\n-      database technology.  Fewer data-analysis tools are available\n-      for object database systems, and there are vast quantities of\n-      data already stored in older relational databases.  For all of\n-      these reasons and more, object databases have not caught on\n-      as well as their creators hoped.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    object database\n+                </primary>\n+                <see>\n+                    ODB\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    ODB\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    vs ODBs\n+                </secondary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    ODBMG\n+                </primary>\n+            </indexterm>\n+Rather than map objects to relational databases, some software companies have\n+developed a form of database designed specifically to store objects. These\n+<emphasis>object databases</emphasis> (ODBs) are often much easier to use than\n+object-relational mapping software. The Object Database Management Group (ODMG)\n+was formed to create a standard API for accessing object databases; few object\n+database vendors, however, comply with the ODMG's recommendations. Thus, vendor\n+lock-in plagues object databases as well. Many companies are also hesitant to\n+switch from tried-and-true relational systems to the relatively unknown object\n+database technology. Fewer data-analysis tools are available for object database\n+systems, and there are vast quantities of data already stored in older\n+relational databases. For all of these reasons and more, object databases have\n+not caught on as well as their creators hoped.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>Enterprise Java Beans</primary><see>EJB</see></indexterm><indexterm><primary>EJB</primary></indexterm><indexterm><primary>JPA</primary><secondary>vs EJB 2</secondary></indexterm>\n-      The Enterprise Edition of the Java platform introduced entity\n-      Enterprise Java Beans (EJBs).  EJB 2.x entities are components that\n-      represent persistent information in a datastore.  Like \n-      object-relational mapping solutions, EJB 2.x entities provide\n-      an object-oriented view of persistent data.  Unlike \n-      object-relational software, however, EJB 2.x entities are not\n-      limited to relational databases; the persistent information they\n-      represent may come from an Enterprise Information System (EIS) or\n-      other storage device.  Also, EJB 2.x entities use a strict standard,\n-      making them portable across vendors.  Unfortunately, the EJB 2.x \n-      standard is somewhat limited in the object-oriented concepts it can \n-      represent.  Advanced features like inheritance, polymorphism, and \n-      complex relations are absent.  Additionally, EBJ 2.x entities are\n-      difficult to code, and they require heavyweight and often expensive\n-      application servers to run.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    Enterprise Java Beans\n+                </primary>\n+                <see>\n+                    EJB\n+                </see>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    EJB\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    vs EJB 2\n+                </secondary>\n+            </indexterm>\n+The Enterprise Edition of the Java platform introduced entity Enterprise Java\n+Beans (EJBs). EJB 2.x entities are components that represent persistent\n+information in a datastore. Like object-relational mapping solutions, EJB 2.x\n+entities provide an object-oriented view of persistent data. Unlike\n+object-relational software, however, EJB 2.x entities are not limited to\n+relational databases; the persistent information they represent may come from an\n+Enterprise Information System (EIS) or other storage device. Also, EJB 2.x\n+entities use a strict standard, making them portable across vendors.\n+Unfortunately, the EJB 2.x standard is somewhat limited in the object-oriented\n+concepts it can represent. Advanced features like inheritance, polymorphism, and\n+complex relations are absent. Additionally, EBJ 2.x entities are difficult to\n+code, and they require heavyweight and often expensive application servers to\n+run.\n+            </para>\n         </listitem>\n         <listitem>\n-          <para><indexterm><primary>JDO</primary></indexterm><indexterm><primary>JPA</primary><secondary>vs JDO</secondary></indexterm>\n-      The JDO specification uses an API that is strikingly similar to\n-      JPA.  JDO, however, supports non-relational databases, \n-      a feature that some argue dilutes the specification.\n-      </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    JDO\n+                </primary>\n+            </indexterm>\n+            <indexterm>\n+                <primary>\n+                    JPA\n+                </primary>\n+                <secondary>\n+                    vs JDO\n+                </secondary>\n+            </indexterm>\n+The JDO specification uses an API that is strikingly similar to JPA. JDO,\n+however, supports non-relational databases, a feature that some argue dilutes\n+the specification.\n+            </para>\n         </listitem>\n-      </itemizedlist>\n-      <para><indexterm><primary>JPA</primary></indexterm>\n-  JPA combines the best features from each of the persistence \n-  mechanisms listed above.  Creating entities under JPA\n-  is as simple as creating serializable classes.  JPA supports the\n-  large data sets, data consistency, concurrent use, and query capabilities of\n-  JDBC.  Like object-relational software and object databases, JPA\n-  allows the use of advanced object-oriented concepts such as inheritance. \n-  JPA avoids vendor lock-in by relying on a strict specification\n-  like JDO and EJB 2.x entities.  JPA focuses on relational \n-  databases.  And like JDO, JPA is extremely easy to use.\n-  </para>\n-      <note>\n+    </itemizedlist>\n+    <para>\n+    <indexterm>\n+        <primary>\n+            JPA\n+        </primary>\n+    </indexterm>\n+JPA combines the best features from each of the persistence mechanisms listed\n+above. Creating entities under JPA is as simple as creating serializable\n+classes. JPA supports the large data sets, data consistency, concurrent use, and\n+query capabilities of JDBC. Like object-relational software and object\n+databases, JPA allows the use of advanced object-oriented concepts such as\n+inheritance. JPA avoids vendor lock-in by relying on a strict specification like\n+JDO and EJB 2.x entities. JPA focuses on relational databases. And like JDO, JPA\n+is extremely easy to use.\n+    </para>\n+    <note>\n         <para>\n-    OpenJPA typically stores data in relational databases, but can be \n-    customized for use with non-relational datastores as well.\n+OpenJPA typically stores data in relational databases, but can be customized for\n+use with non-relational datastores as well.\n+        </para>\n+    </note>\n+    <para>\n+JPA is not ideal for every application. For many applications, though, it\n+provides an exciting alternative to other persistence mechanisms.\n     </para>\n-      </note>\n-      <para>\n-  JPA is not ideal for every application.  For many applications,\n-  though, it provides an exciting alternative to other persistence mechanisms.\n-  </para>\n-    </chapter>\n+</chapter>"},{"sha":"4d42fe7d686f24e4496b1693e38ee5205d254bd3","filename":"openjpa-project/src/doc/manual/jpa_resources.xml","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_resources.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_resources.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_resources.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,39 +1,39 @@\n-\n-  <appendix id=\"jpa_resources\">\n-    <title>JPA Resources</title>\n+<appendix id=\"jpa_resources\">\n+    <title>\n+        JPA Resources\n+    </title>\n     <itemizedlist>\n-      <listitem>\n-        <para>\n-          <ulink url=\"http://java.sun.com/aboutJava/communityprocess/jsr/jsr_220_dataobj.html\">\n-      EJB 3 JSR page</ulink>\n-        </para>\n-      </listitem>\n-      <listitem>\n-        <para>\n-          <ulink url=\"http://java.sun.com/products/ejb\">Sun EJB page</ulink>\n-        </para>\n-      </listitem>\n-      <listitem>\n-        <para>\n-          <ulink url=\"http://java.sun.com/javaee/5/docs/api/index.html\">Locally mirrored \n-      javax.persistence Javadoc</ulink>\n-        </para>\n-      </listitem>\n-      <listitem>\n-        <para>\n-          <ulink url=\"../../api/index.html\">OpenJPA API Javadoc</ulink>\n-        </para>\n-      </listitem>\n-      <listitem>\n-        <para>\n-          <ulink url=\"../apidocs/index.html\">Full OpenJPA Javadoc</ulink>\n-        </para>\n-      </listitem>\n-      <listitem>\n-        <para>\n-          <ulink url=\"Persistence.pdf\">Locally mirrored JPA\n-      specification</ulink>\n-        </para>\n-      </listitem>\n+        <listitem>\n+            <para>\n+<ulink url=\"http://java.sun.com/aboutJava/communityprocess/jsr/jsr_220_dataobj.html\">\n+EJB 3 JSR page</ulink>\n+            </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+<ulink url=\"http://java.sun.com/products/ejb\">Sun EJB page</ulink>\n+            </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/index.html\">Locally mirrored\n+javax.persistence Javadoc</ulink>\n+            </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+<ulink url=\"../../api/index.html\">OpenJPA API Javadoc</ulink>\n+            </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+<ulink url=\"../apidocs/index.html\">Full OpenJPA Javadoc</ulink>\n+            </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+<ulink url=\"Persistence.pdf\">Locally mirrored JPA specification</ulink>\n+            </para>\n+        </listitem>\n     </itemizedlist>\n-  </appendix>\n+</appendix>"},{"sha":"94145198434524a9ebba2b8aaf58f1a4d1c033d7","filename":"openjpa-project/src/doc/manual/jpa_tutorials.xml","status":"modified","additions":1202,"deletions":1379,"changes":2581,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_tutorials.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/jpa_tutorials.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_tutorials.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"8f9ac054cdb89fc8631b08621a03987475547dbd","filename":"openjpa-project/src/doc/manual/manual.xml","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/manual.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/manual.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/manual.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -36,17 +36,17 @@\n     <!ENTITY supported_databases.xml SYSTEM \"supported_databases.xml\">\n ]>\n <book id=\"manual\">\n-  <bookinfo>\n-    <title>OpenJPA Developers Guide</title>\n-  </bookinfo>\n+    <bookinfo>\n+        <title>OpenJPA Developers Guide</title>\n+    </bookinfo>\n \n-  <part id=\"introduction\">\n-    <title>Introduction</title>\n+    <part id=\"introduction\">\n+        <title>Introduction</title>\n         &openjpa_intro.xml;\n-  </part>\n+    </part>\n \n-  <part id=\"jpa_overview\">\n-    <title>Java Persistence API</title>\n+    <part id=\"jpa_overview\">\n+        <title>Java Persistence API</title>\n         &jpa_overview_intro.xml;\n         &jpa_overview_why.xml;\n         &jpa_overview_arch.xml;\n@@ -60,15 +60,15 @@\n         &jpa_overview_sqlquery.xml;\n         &jpa_overview_mapping.xml;\n         &jpa_overview_conclusion.xml;\n-  </part>\n+    </part>\n \n-  <part id=\"tutorials\">\n-    <title>Tutorials</title>\n+    <part id=\"tutorials\">\n+        <title>Tutorials</title>\n         &jpa_tutorials.xml;\n-  </part>\n+    </part>\n \n-  <part id=\"ref_guide\">\n-    <title>OpenJPA <phrase>JPA</phrase> Reference Guide</title>\n+    <part id=\"ref_guide\">\n+        <title>OpenJPA <phrase>JPA</phrase> Reference Guide</title>\n         &ref_guide_intro.xml;\n         &ref_guide_conf.xml;\n         &ref_guide_logging.xml;\n@@ -82,13 +82,13 @@\n         &ref_guide_remote.xml;\n         &ref_guide_integration.xml;\n         &ref_guide_optimization.xml;\n-  </part>\n+    </part>\n \n-  <part id=\"samples_guide_part\">\n-    <title>OpenJPA <phrase>JPA</phrase> Samples</title>\n+    <part id=\"samples_guide_part\">\n+        <title>OpenJPA <phrase>JPA</phrase> Samples</title>\n         &samples_guide.xml;\n-  </part>\n+    </part>\n \n-        &jpa_resources.xml;\n-        &supported_databases.xml;\n+    &jpa_resources.xml;\n+    &supported_databases.xml;\n </book>"},{"sha":"710e740a521511aab963b6c8ce4b6f6abde0a126","filename":"openjpa-project/src/doc/manual/openjpa_intro.xml","status":"modified","additions":59,"deletions":58,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/openjpa_intro.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/openjpa_intro.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/openjpa_intro.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,61 +1,62 @@\n-\n-    <chapter id=\"openjpa_intro\">\n-      <title>OpenJPA <phrase>JPA</phrase></title>\n-      <indexterm zone=\"openjpa_intro\">\n-        <primary>OpenJPA <phrase>JPA</phrase></primary>\n-      </indexterm>\n-      <para>\n-  OpenJPA is Apache's implementation of Sun's\n-  <phrase>Java Persistence API (JPA) specification</phrase>\n-  \n-  \n-  for the transparent persistence of Java objects.\n-  This document provides an overview of\n-  <phrase>the JPA standard</phrase>\n-  \n-  \n-  and technical details on the use of OpenJPA <phrase>JPA</phrase>.\n-  </para>\n-      <para>\n-  To quickly get started with JPA, you may want to begin at\n-  <xref linkend=\"jpa_tutorial\"/>.\n-  If you would prefer to start with an introduction to the concepts of JPA,\n-  begin with <xref linkend=\"jpa_overview_intro\"/>.\n-  </para>\n-      <section id=\"openjpa_intro_about\">\n-        <title>About This Document</title>\n-        <para>\n-    This document is intended for OpenJPA users.  It is divided into several \n-    parts:\n+<chapter id=\"openjpa_intro\">\n+    <title>\n+        OpenJPA \n+        <phrase>\n+            JPA\n+        </phrase>\n+    </title>\n+    <indexterm zone=\"openjpa_intro\">\n+        <primary>\n+            OpenJPA \n+            <phrase>\n+                JPA\n+            </phrase>\n+        </primary>\n+    </indexterm>\n+    <para>\n+OpenJPA is Apache's implementation of Sun's <phrase>Java Persistence API (JPA)\n+specification</phrase> for the transparent persistence of Java objects. This\n+document provides an overview of <phrase>the JPA standard</phrase> and technical\n+details on the use of OpenJPA.\n     </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para>\n-        The <link linkend=\"jpa_overview_intro\">JPA Overview</link> \n-        describes the fundamentals of JPA.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        In the <link linkend=\"tutorials\">OpenJPA <phrase>JPA</phrase> \n-        Tutorials</link> you will develop simple persistent applications\n-        using OpenJPA.  Through the tutorials' hands-on approach, you\n-        will become comfortable with the core tools and development\n-        processes under OpenJPA <phrase>JPA</phrase>.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        The <link linkend=\"ref_guide_intro\">OpenJPA <phrase>JPA</phrase> \n-        Reference Guide</link> contains detailed documentation on all \n-        aspects of OpenJPA <phrase>JPA</phrase>.  Browse through this guide to \n-        familiarize yourself with the many advanced features and \n-        customization opportunities OpenJPA provides.  Later, you can use \n-        the guide when you need details on a specific aspect of OpenJPA \n-        <phrase>JPA</phrase>.\n+    <para>\n+To quickly get started with JPA, you may want to begin at\n+<xref linkend=\"jpa_tutorial\"></xref>. If you would prefer to start with an\n+introduction to the concepts of JPA, begin with\n+<xref linkend=\"jpa_overview_intro\"></xref>.\n+    </para>\n+    <section id=\"openjpa_intro_about\">\n+        <title>\n+            About This Document\n+        </title>\n+        <para>\n+This document is intended for OpenJPA users. It is divided into several parts:\n         </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+The <link linkend=\"jpa_overview_intro\">JPA Overview</link> describes the\n+fundamentals of JPA.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+In the <link linkend=\"tutorials\">OpenJPA <phrase>JPA</phrase> Tutorials</link>\n+you will develop simple persistent applications using OpenJPA. Through the\n+tutorials' hands-on approach, you will become comfortable with the core tools\n+and development processes under OpenJPA <phrase>JPA</phrase>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+The <link linkend=\"ref_guide_intro\">OpenJPA <phrase>JPA</phrase> Reference Guide\n+</link> contains detailed documentation on all aspects of OpenJPA <phrase>JPA\n+</phrase>. Browse through this guide to familiarize yourself with the many\n+advanced features and customization opportunities OpenJPA provides. Later, you\n+can use the guide when you need details on a specific aspect of OpenJPA <phrase>\n+JPA</phrase>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n-      </section>\n-\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"496af13c34c5e6a31134a04daf9cf43705c62218","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":975,"deletions":846,"changes":1821,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,197 +1,246 @@\n-\n-    <chapter id=\"ref_guide_caching\">\n-      <title>Caching</title>\n-      <para>\n-  OpenJPA utilizes several configurable caches to maximize performance.\n-  This chapter explores OpenJPA's data cache, query cache, and query compilation\n-  cache.\n-  </para>\n-      <section id=\"ref_guide_cache\">\n-        <title>Data Cache</title>\n+<chapter id=\"ref_guide_caching\">\n+    <title>\n+        Caching\n+    </title>\n+    <para>\n+OpenJPA utilizes several configurable caches to maximize performance. This\n+chapter explores OpenJPA's data cache, query cache, and query compilation cache.\n+    </para>\n+    <section id=\"ref_guide_cache\">\n+        <title>\n+            Data Cache\n+        </title>\n         <indexterm zone=\"ref_guide_cache\">\n-          <primary>caching</primary>\n-          <secondary>data cache</secondary>\n+            <primary>\n+                caching\n+            </primary>\n+            <secondary>\n+                data cache\n+            </secondary>\n         </indexterm>\n         <para>\n-  The OpenJPA data cache is an optional cache of persistent object data that\n-  operates at the <classname>EntityManagerFactory</classname>\n-  level. This cache is designed to significantly increase\n-  performance while remaining in full compliance with the JPA\n-  standard. This means that turning on the caching option can\n-  transparently increase the performance of your application, with\n-  no changes to your code.\n-  </para>\n-        \n+The OpenJPA data cache is an optional cache of persistent object data that\n+operates at the <classname>EntityManagerFactory</classname> level. This cache is\n+designed to significantly increase performance while remaining in full\n+compliance with the JPA standard. This means that turning on the caching option\n+can transparently increase the performance of your application, with no changes\n+to your code.\n+        </para>\n         <para>\n-  OpenJPA's data cache is not related to the <classname>EntityManager\n-  </classname> cache dictated by the JPA specification. The JPA \n-  specification mandates behavior for the <classname>EntityManager</classname>\n-  cache aimed at guaranteeing transaction isolation when operating on\n-  persistent objects. \n-  </para>\n+OpenJPA's data cache is not related to the <classname>EntityManager</classname>\n+cache dictated by the JPA specification. The JPA specification mandates behavior\n+for the <classname>EntityManager</classname> cache aimed at guaranteeing\n+transaction isolation when operating on persistent objects.\n+        </para>\n         <para>\n-  OpenJPA's data cache is designed to\n-  provide significant performance increases over cacheless\n-  operation, while guaranteeing that behavior will be\n-  identical in both cache-enabled and cacheless operation.\n-  </para>\n+OpenJPA's data cache is designed to provide significant performance increases\n+over cacheless operation, while guaranteeing that behavior will be identical in\n+both cache-enabled and cacheless operation.\n+        </para>\n         <para>\n-  There are five ways to access data via the OpenJPA APIs:\n-  standard relation traversal, large result set relation traversal, \n-  queries, looking up an object by id, and iteration over an \n-  <classname>Extent</classname>. OpenJPA's cache plugin accelerates three of \n-  these mechanisms. It does not provide any caching of large result set \n-  relations or <classname>Extent</classname> iterators. If you find yourself \n-  in need of higher-performance <classname>Extent</classname> iteration, see \n-  <xref linkend=\"ref_guide_cache_limits_extent\"/>.\n-  <table><title>Data access methods</title><tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\"><colspec colname=\"access-method\"/><colspec colname=\"cacheable\"/><thead><row><entry colname=\"access-method\">Access method</entry><entry colname=\"cacheable\">Uses cache</entry></row></thead><tbody><row><entry colname=\"access-method\">\n-            Standard relation traversal\n-          </entry><entry colname=\"cacheable\">Yes</entry></row><row><entry colname=\"access-method\">\n-            Large result set relation traversal\n-          </entry><entry colname=\"cacheable\">No</entry></row><row><entry colname=\"access-method\">Query</entry><entry colname=\"cacheable\">Yes</entry></row><row><entry colname=\"access-method\">\n-            Lookups by object id\n-          </entry><entry colname=\"cacheable\">Yes</entry></row><row><entry colname=\"access-method\">\n-            Iteration over an <classname>Extent</classname>\n-          </entry><entry colname=\"cacheable\">No</entry></row></tbody></tgroup></table>\n-  </para>\n+There are five ways to access data via the OpenJPA APIs: standard relation\n+traversal, large result set relation traversal, queries, looking up an object by\n+id, and iteration over an <classname>Extent</classname>. OpenJPA's cache plugin\n+accelerates three of these mechanisms. It does not provide any caching of large\n+result set relations or <classname>Extent</classname> iterators. If you find\n+yourself in need of higher-performance <classname>Extent</classname> iteration,\n+see <xref linkend=\"ref_guide_cache_limits_extent\"></xref>. <table><title>Data\n+access methods</title><tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n+<colspec colname=\"access-method\"></colspec><colspec colname=\"cacheable\">\n+</colspec><thead><row><entry colname=\"access-method\">Access method</entry>\n+<entry colname=\"cacheable\">Uses cache</entry></row></thead><tbody><row>\n+<entry colname=\"access-method\"> Standard relation traversal</entry>\n+<entry colname=\"cacheable\">Yes</entry></row><row>\n+<entry colname=\"access-method\"> Large result set relation traversal</entry>\n+<entry colname=\"cacheable\">No</entry></row><row><entry colname=\"access-method\">\n+Query</entry><entry colname=\"cacheable\">Yes</entry></row><row>\n+<entry colname=\"access-method\"> Lookups by object id</entry>\n+<entry colname=\"cacheable\">Yes</entry></row><row>\n+<entry colname=\"access-method\"> Iteration over an <classname>Extent</classname>\n+</entry><entry colname=\"cacheable\">No</entry></row></tbody></tgroup></table>\n+        </para>\n         <para>\n-  When enabled, the cache is checked before making a trip to the\n-  datastore. Data is stored in the cache when objects are\n-  committed and when persistent objects are loaded from the\n-  datastore.\n-  </para>\n+When enabled, the cache is checked before making a trip to the datastore. Data\n+is stored in the cache when objects are committed and when persistent objects\n+are loaded from the datastore.\n+        </para>\n         <para>\n-  OpenJPA's data cache can in both single-JVM and multi-JVM environments. \n-  Multi-JVM caching is achieved through the use of the distributed event \n-  notification framework described in <xref linkend=\"ref_guide_event\"/>,\n-  or through one of OpenJPA's integrations with third-party distributed caches\n-  (see <xref linkend=\"ref_guide_datacacheintegrations\"/>).\n-  </para>\n+OpenJPA's data cache can in both single-JVM and multi-JVM environments.\n+Multi-JVM caching is achieved through the use of the distributed event\n+notification framework described in <xref linkend=\"ref_guide_event\"></xref>, or\n+through one of OpenJPA's integrations with third-party distributed caches (see\n+<xref linkend=\"ref_guide_datacacheintegrations\"></xref> ).\n+        </para>\n         <para>\n-  The single JVM mode of operation maintains and shares a data\n-  cache across all <classname>EntityManager</classname>\n-  instances obtained from a particular\n-  <classname>EntityManagerFactory</classname>. This is not\n-  appropriate for use in a distributed environment, as caches in\n-  different JVMs or created from different\n-  <classname>EntityManagerFactory</classname> objects will\n-  not be synchronized.\n-  </para>\n+The single JVM mode of operation maintains and shares a data cache across all\n+<classname>EntityManager</classname> instances obtained from a particular\n+<classname>EntityManagerFactory</classname>. This is not appropriate for use in\n+a distributed environment, as caches in different JVMs or created from different\n+<classname>EntityManagerFactory</classname> objects will not be synchronized.\n+        </para>\n         <section id=\"ref_guide_cache_conf\">\n-          <title>Data Cache Configuration</title>\n-          <para>\n-    To enable the basic single-factory cache set the\n-    <link linkend=\"openjpa.DataCache\"><literal>openjpa.DataCache</literal></link>\n-    property to <literal>true</literal>, and set the\n-    <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n-    openjpa.RemoteCommitProvider</literal></link> property to \n-    <literal>sjvm</literal>:\n-    </para>\n-          <example id=\"ref_guide_cache_conf_sjvm\">\n-            <title>Single-JVM Data Cache</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Data Cache Configuration\n+            </title>\n+            <para>\n+To enable the basic single-factory cache set the\n+<link linkend=\"openjpa.DataCache\"><literal>openjpa.DataCache</literal></link>\n+property to <literal>true</literal>, and set the\n+<link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n+openjpa.RemoteCommitProvider</literal></link> property to <literal>sjvm\n+</literal>:\n+            </para>\n+            <example id=\"ref_guide_cache_conf_sjvm\">\n+                <title>\n+                    Single-JVM Data Cache\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.DataCache\" value=\"true\"/&gt;\n &lt;property name=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/&gt;\n </programlisting>\n-          </example>\n-          <para>\n-    To configure the data cache to remain up-to-date in a distributed\n-    environment, set the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n-    openjpa.RemoteCommitProvider</literal></link> property appropriately, or\n-    integrate OpenJPA with a third-party caching solution.\n-    Remote commit providers are described in\n-    <xref linkend=\"ref_guide_event\"/>.  \n-    <xref linkend=\"ref_guide_datacacheintegrations\"/> enumerates supported\n-    third-party caching solutions.\n-    </para>\n-          <para><indexterm><primary>caching</primary><secondary>size</secondary></indexterm>\n-    OpenJPA's default implementation maintains a least-recently-used map \n-    of object ids to cache data. By default,\n-    1000 elements are kept in cache. This can be adjusted by setting\n-    the <literal>CacheSize</literal> property in your plugin string - see \n-    below for an example.  Objects that are pinned into the cache are not \n-    counted when determining if the cache size exceeds the maximum.\n-    </para>\n-          <para>\n-    Expired objects are moved to a soft reference map, so they may stick \n-    around for a little while longer. You can control\n-    the number of soft references OpenJPA keeps with the <literal>\n-    SoftReferenceSize</literal> property.  Soft references are unlimited by\n-    default.  Set to 0 to disable soft references completely.\n-    </para>\n-          <example id=\"ref_guide_cache_conf_size\">\n-            <title>Data Cache Size</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+To configure the data cache to remain up-to-date in a distributed environment,\n+set the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n+openjpa.RemoteCommitProvider</literal></link> property appropriately, or\n+integrate OpenJPA with a third-party caching solution. Remote commit providers\n+are described in <xref linkend=\"ref_guide_event\"></xref>.\n+<xref linkend=\"ref_guide_datacacheintegrations\"></xref> enumerates supported\n+third-party caching solutions.\n+            </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    size\n+                </secondary>\n+            </indexterm>\n+OpenJPA's default implementation maintains a least-recently-used map of object\n+ids to cache data. By default, 1000 elements are kept in cache. This can be\n+adjusted by setting the <literal>CacheSize</literal> property in your plugin\n+string - see below for an example. Objects that are pinned into the cache are\n+not counted when determining if the cache size exceeds the maximum.\n+            </para>\n+            <para>\n+Expired objects are moved to a soft reference map, so they may stick around for\n+a little while longer. You can control the number of soft references OpenJPA\n+keeps with the <literal> SoftReferenceSize</literal> property. Soft references\n+are unlimited by default. Set to 0 to disable soft references completely.\n+            </para>\n+            <example id=\"ref_guide_cache_conf_size\">\n+                <title>\n+                    Data Cache Size\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.DataCache\" value=\"true(CacheSize=5000, SoftReferenceSize=0)\"/&gt;\n </programlisting>\n-          </example>\n-          <para><indexterm><primary>caching</primary><secondary>timeout</secondary></indexterm>\n-    You can specify a cache timeout value for a class by setting the \n-    timeout <link linkend=\"ref_guide_meta_ext\">metadata extension</link>\n-    to the amount of time in milliseconds a class's data is valid. Use a \n-    value of -1 for no expiration.  This is the default value.\n-    </para>\n-          <example id=\"ex_timeout_cache\">\n-            <title>Data Cache Timeout</title>\n+            </example>\n             <para>\n-      Timeout <classname>Employee</classname> objects after 10 seconds.\n-      </para>\n-            <programlisting format=\"linespecific\">\n+            <indexterm>\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    timeout\n+                </secondary>\n+            </indexterm>\n+You can specify a cache timeout value for a class by setting the timeout\n+<link linkend=\"ref_guide_meta_ext\">metadata extension</link> to the amount of\n+time in milliseconds a class's data is valid. Use a value of -1 for no\n+expiration. This is the default value.\n+            </para>\n+            <example id=\"ex_timeout_cache\">\n+                <title>\n+                    Data Cache Timeout\n+                </title>\n+                <para>\n+Timeout <classname>Employee</classname> objects after 10 seconds.\n+                </para>\n+<programlisting>\n @Entity\n @DataCache(timeout=10000)\n public class Employee\n {\n     ...\n }\n </programlisting>\n-          </example>\n-          <para>\n-    See the <ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\"><classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc\n-    for more information on the <classname>DataCache</classname> annotation.\n-    </para>\n-          <para><indexterm><primary>caching</primary><secondary>cron-style invalidation</secondary></indexterm>\n-    A cache can specify that it should be cleared at certain times\n-    rather than using data timeouts.  The\n-    <literal>EvictionSchedule</literal> property of OpenJPA's \n-    cache implementation accepts a <literal>cron</literal>\n-    style eviction schedule.  The format of this property is a \n-    whitespace-separated list of five tokens, where the \n-    <literal>*</literal> symbol (asterisk), indicates match all.  The \n-    tokens are, in order:\n-    </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>Minute</para>\n-            </listitem>\n-            <listitem>\n-              <para>Hour of Day</para>\n-            </listitem>\n-            <listitem>\n-              <para>Day of Month</para>\n-            </listitem>\n-            <listitem>\n-              <para>Month</para>\n-            </listitem>\n-            <listitem>\n-              <para>Day of Week</para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-    For example, the following <literal>openjpa.DataCache</literal> setting\n-    schedules the default cache to evict values\n-    from the cache at 15 and 45 minutes past 3 PM on Sunday.\n-    </para>\n-          <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+See the <ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\">\n+<classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc\n+for more information on the <classname>DataCache</classname> annotation.\n+            </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    cron-style invalidation\n+                </secondary>\n+            </indexterm>\n+A cache can specify that it should be cleared at certain times rather than using\n+data timeouts. The <literal>EvictionSchedule</literal> property of OpenJPA's\n+cache implementation accepts a <literal>cron</literal> style eviction schedule.\n+The format of this property is a whitespace-separated list of five tokens, where\n+the <literal>*</literal> symbol (asterisk), indicates match all. The tokens are,\n+in order:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Minute\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Hour of Day\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Day of Month\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Month\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Day of Week\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+For example, the following <literal>openjpa.DataCache</literal> setting\n+schedules the default cache to evict values from the cache at 15 and 45 minutes\n+past 3 PM on Sunday.\n+            </para>\n+<programlisting>\n true(EvictionSchedule='15,45 15 * * 1')\n </programlisting>\n-          <para><indexterm><primary>caching</primary><secondary>named caches</secondary></indexterm>\n-    It is also possible for different persistence-capable classes to use\n-    different caches. This is achieved by specifying a cache name in\n-    a <link linkend=\"ref_guide_meta_ext\">metadata extension</link>.\n-    </para>\n-          <example id=\"ex_non_default_cache\">\n-            <title>Named Data Cache Specification</title>\n-            <programlisting format=\"linespecific\">\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    named caches\n+                </secondary>\n+            </indexterm>\n+It is also possible for different persistence-capable classes to use different\n+caches. This is achieved by specifying a cache name in a\n+<link linkend=\"ref_guide_meta_ext\">metadata extension</link>.\n+            </para>\n+            <example id=\"ex_non_default_cache\">\n+                <title>\n+                    Named Data Cache Specification\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n @Entity\n@@ -201,71 +250,75 @@ public class Employee\n     ...\n }\n </programlisting>\n-          </example>\n-          <para>\n-    See the <ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\"><classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc\n-    for more information on the <classname>DataCache</classname> annotation.\n-    </para>\n-          <para>\n-    The metadata above will cause instances of the <classname>Employee\n-    </classname> class to be stored in a cache named <literal>\n-    small-cache</literal>. \n-    This <literal>small-cache</literal> cache can be explicitly configured \n-    in the <literal>openjpa.DataCache</literal> plugin string, or can be\n-    implicitly defined, in which case it will take on the same\n-    default configuration properties as the default cache identified\n-    in the <literal>openjpa.DataCache</literal> property.\n-    </para>\n-          <example id=\"ref_guide_cache_named\">\n-            <title>Named Data Cache Configuration</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+See the <ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\">\n+<classname>org.apache.openjpa.persistence.DataCache</classname></ulink> Javadoc\n+for more information on the <classname>DataCache</classname> annotation.\n+            </para>\n+            <para>\n+The metadata above will cause instances of the <classname>Employee</classname>\n+class to be stored in a cache named <literal> small-cache</literal>. This\n+<literal>small-cache</literal> cache can be explicitly configured in the\n+<literal>openjpa.DataCache</literal> plugin string, or can be implicitly\n+defined, in which case it will take on the same default configuration properties\n+as the default cache identified in the <literal>openjpa.DataCache</literal>\n+property.\n+            </para>\n+            <example id=\"ref_guide_cache_named\">\n+                <title>\n+                    Named Data Cache Configuration\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.DataCache\" value=\"true, true(Name=small-cache, CacheSize=100)\"/&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_cache_use\">\n-          <title>Data Cache Usage</title>\n-          <para>\n-    The <literal>org.apache.openjpa.datacache</literal> package defines OpenJPA's\n-    data caching framework.  While you may use this framework directly\n-    (see its <ulink url=\"../apidocs/org/apache/openjpa/datacache/package-summary.html\">\n-    Javadoc</ulink> for details), its APIs are meant primarily for \n-    service providers.  In fact, <xref linkend=\"ref_guide_cache_extension\"/>\n-    below has tips on how to use this package to extend OpenJPA's caching \n-    service yourself.\n-    </para>\n-          <para>\n-    Rather than use the low-level <literal>org.apache.openjpa.datacache</literal>\n-    package APIs, JPA users should typically access the data \n-    cache through OpenJPA's high-level \n-    <ulink url=\"../../api/openjpa/persistence/StoreCache.html\"><classname>org.apache.openjpa.persistence.StoreCache</classname></ulink> facade.  \n-    This facade has methods to pin and unpin records, evict data from the \n-    cache, and more.  \n-    </para>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Data Cache Usage\n+            </title>\n+            <para>\n+The <literal>org.apache.openjpa.datacache</literal> package defines OpenJPA's\n+data caching framework. While you may use this framework directly (see its\n+<ulink url=\"../apidocs/org/apache/openjpa/datacache/package-summary.html\">\n+Javadoc</ulink> for details), its APIs are meant primarily for service\n+providers. In fact, <xref linkend=\"ref_guide_cache_extension\"></xref> below has\n+tips on how to use this package to extend OpenJPA's caching service yourself.\n+            </para>\n+            <para>\n+Rather than use the low-level <literal>org.apache.openjpa.datacache</literal>\n+package APIs, JPA users should typically access the data cache through OpenJPA's\n+high-level <ulink url=\"../../api/openjpa/persistence/StoreCache.html\">\n+<classname>org.apache.openjpa.persistence.StoreCache</classname></ulink> facade.\n+This facade has methods to pin and unpin records, evict data from the cache, and\n+more.\n+            </para>\n+<programlisting>\n public StoreCache getStoreCache ();\n public StoreCache getStoreCache (String name);\n </programlisting>\n-          <para>\n-    You obtain the <classname>StoreCache</classname> through the\n-    <methodname>OpenJPAEntityManagerFactory.getStoreCache</methodname> methods.\n-    When you have multiple data caches configured as in the \n-    <literal>small-cache</literal> example above, the <classname>\n-    StoreCache</classname> can act as a unified facade over all your\n-    caches.  For every oid parameter to the <classname>StoreCache\n-    </classname> methods, it determines the correct data cache for that \n-    oid's corresponding persistent class, and dynamically delegates to \n-    that cache.\n-    </para>\n-          <para>\n-    If you know that you want to access a certain data cache and no others,\n-    the <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManagerFactory.html\"><methodname>OpenJPAEntityManagerFactory.getStoreCache(String name)\n-    </methodname></ulink> method returns a <classname>StoreCache</classname>\n-    interface to a particular named data cache.\n-    </para>\n-          <example id=\"ref_guide_cache_access_ejb\">\n-            <title>Accessing the StoreCache</title>\n-            <programlisting format=\"linespecific\">\n+            <para>\n+You obtain the <classname>StoreCache</classname> through the <methodname>\n+OpenJPAEntityManagerFactory.getStoreCache</methodname> methods. When you have\n+multiple data caches configured as in the <literal>small-cache</literal> example\n+above, the <classname> StoreCache</classname> can act as a unified facade over\n+all your caches. For every oid parameter to the <classname>StoreCache\n+</classname> methods, it determines the correct data cache for that oid's\n+corresponding persistent class, and dynamically delegates to that cache.\n+            </para>\n+            <para>\n+If you know that you want to access a certain data cache and no others, the\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManagerFactory.html\">\n+<methodname>OpenJPAEntityManagerFactory.getStoreCache(String name)</methodname>\n+</ulink> method returns a <classname>StoreCache</classname> interface to a\n+particular named data cache.\n+            </para>\n+            <example id=\"ref_guide_cache_access_jpa\">\n+                <title>\n+                    Accessing the StoreCache\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n@@ -276,46 +329,46 @@ StoreCache cache = kemf.getStoreCache ();\n StoreCache smallCache = kemf.getStoreCache (\"small-cache\");\n ...\n </programlisting>\n-          </example>\n-          <programlisting format=\"linespecific\">\n+            </example>\n+<programlisting>\n public void evict (Class cls, Object oid);\n public void evictAll ();\n public void evictAll (Class cls, Object... oids);\n public void evictAll (Class cls, Collection oids);\n </programlisting>\n-          <para>\n-    The <methodname>evict</methodname> methods tell the cache to release \n-    data.  Each method takes an entity class and one or more identity \n-    values, and releases the cached data for the corresponding persistent \n-    instances.  The <methodname>evictAll</methodname> method with no \n-    arguments clears the cache.  Eviction is useful when the datastore is \n-    changed by a separate process outside OpenJPA's control.  In this \n-    scenario, you typically\n-    have to manually evict the data from the datastore cache; otherwise the\n-    OpenJPA runtime, oblivious to the changes, will maintain its stale copy.\n-    </para>\n-          <programlisting format=\"linespecific\">\n+            <para>\n+The <methodname>evict</methodname> methods tell the cache to release data. Each\n+method takes an entity class and one or more identity values, and releases the\n+cached data for the corresponding persistent instances. The <methodname>\n+evictAll</methodname> method with no arguments clears the cache. Eviction is\n+useful when the datastore is changed by a separate process outside OpenJPA's\n+control. In this scenario, you typically have to manually evict the data from\n+the datastore cache; otherwise the OpenJPA runtime, oblivious to the changes,\n+will maintain its stale copy.\n+            </para>\n+<programlisting>\n public void pin (Class cls, Object oid);\n public void pinAll (Class cls, Object... oids);\n public void pinAll (Class cls, Collection oids);\n public void unpin (Class cls, Object oid);\n public void unpinAll (Class cls, Object... oids);\n public void unpinAll (Class cls, Collection oids);\n </programlisting>\n-          <para>\n-    Most caches are of limited size.  Pinning an identity to the cache\n-    ensures that the cache will mill not kick the data for the corresponding\n-    instance out of the cache, unless you manually evict it.  Note that even\n-    after manual eviction, the data will get pinned again the next time it \n-    is fetched from the store.  You can only remove a pin and make the data\n-    once again available for normal cache overflow eviction through the\n-    <methodname>unpin</methodname> methods.  Use pinning when you want a \n-    guarantee that a certain object will always be available from cache, \n-    rather than requiring a datastore trip.\n-    </para>\n-          <example id=\"ref_guide_cache_use_ejb\">\n-            <title>StoreCache Usage</title>\n-            <programlisting format=\"linespecific\">\n+            <para>\n+Most caches are of limited size. Pinning an identity to the cache ensures that\n+the cache will mill not kick the data for the corresponding instance out of the\n+cache, unless you manually evict it. Note that even after manual eviction, the\n+data will get pinned again the next time it is fetched from the store. You can\n+only remove a pin and make the data once again available for normal cache\n+overflow eviction through the <methodname>unpin</methodname> methods. Use\n+pinning when you want a guarantee that a certain object will always be available\n+from cache, rather than requiring a datastore trip.\n+            </para>\n+            <example id=\"ref_guide_cache_use_jpa\">\n+                <title>\n+                    StoreCache Usage\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n@@ -325,184 +378,197 @@ StoreCache cache = kemf.getStoreCache ();\n cache.pin (Magazine.class, popularMag.getId ());\n cache.evict (Magazine.class, changedMag.getId ());\n </programlisting>\n-          </example>\n-          <para>\n-    See the <classname>StoreCache</classname> \n-    <ulink url=\"../../api/openjpa/persistence/StoreCache.html\">Javadoc</ulink>\n-    for information on additional functionality it provides.\n-    Also, <xref linkend=\"ref_guide_runtime\"/> discusses OpenJPA's other \n-    extensions to the standard set of JPA runtime interfaces.\n-    </para>\n-          <para>\n-    The examples above include calls to <methodname>evict</methodname> to\n-    manually remove data from the data cache.  Rather than evicting objects \n-    from the data cache directly, you can also configure OpenJPA to \n-    automatically evict objects from the data cache when\n-    you use the <classname>OpenJPAEntityManager</classname>'s eviction APIs.\n-    </para>\n-          <example id=\"ref_guide_cache_pmevict\">\n-            <title>Automatic Data Cache Eviction</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+See the <classname>StoreCache</classname>\n+<ulink url=\"../../api/openjpa/persistence/StoreCache.html\">Javadoc</ulink> for\n+information on additional functionality it provides. Also,\n+<xref linkend=\"ref_guide_runtime\"></xref> discusses OpenJPA's other extensions\n+to the standard set of JPA runtime interfaces.\n+            </para>\n+            <para>\n+The examples above include calls to <methodname>evict</methodname> to manually\n+remove data from the data cache. Rather than evicting objects from the data\n+cache directly, you can also configure OpenJPA to automatically evict objects\n+from the data cache when you use the <classname>OpenJPAEntityManager</classname>\n+'s eviction APIs.\n+            </para>\n+            <example id=\"ref_guide_cache_pmevict\">\n+                <title>\n+                    Automatic Data Cache Eviction\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.BrokerImpl\" value=\"EvictFromDataCache=true\"/&gt;\n </programlisting>\n-            <programlisting format=\"linespecific\">\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n \n OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n kem.evict (changedMag);  // will evict from data cache also\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_cache_query\">\n-          <title>Query Cache</title>\n-          <indexterm zone=\"ref_guide_cache_query\">\n-            <primary>caching</primary>\n-            <secondary>query cache</secondary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_cache_query\">\n-            <primary>Query</primary>\n-            <secondary>result caching</secondary>\n-          </indexterm>\n-          <para>\n-    In addition to the data cache, the <literal>org.apache.openjpa.datacache</literal>\n-    package defines service provider interfaces for a query cache.\n-    The query cache is enabled by default when the data cache\n-    is enabled. The query cache stores the object ids returned by\n-    query executions. When you run a query, OpenJPA assembles a key based on\n-    the query properties and the parameters used at execution time,\n-    and checks for a cached query result. If one is found, the\n-    object ids in the cached result are looked up, and the resultant\n-    persistence-capable objects are returned. Otherwise, the query\n-    is executed against the database, and the object ids loaded by\n-    the query are put into the cache. The object id list is not\n-    cached until the list returned at query execution time is fully\n-    traversed.\n-    </para>\n-          <para>\n-    OpenJPA exposes a high-level interface to the query cache through\n-    the <ulink url=\"../../api/openjpa/persistence/QueryResultCache.html\"><classname>org.apache.openjpa.persistence.QueryResultCache</classname></ulink> class.\n-    You can access this class through the <classname>\n-    OpenJPAEntityManagerFactory</classname>.\n-    </para>\n-          <example id=\"ref_guide_cache_queryaccess\">\n-            <title>Accessing the QueryResultCache</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Query Cache\n+            </title>\n+            <indexterm zone=\"ref_guide_cache_query\">\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    query cache\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_cache_query\">\n+                <primary>\n+                    Query\n+                </primary>\n+                <secondary>\n+                    result caching\n+                </secondary>\n+            </indexterm>\n+            <para>\n+In addition to the data cache, the <literal>org.apache.openjpa.datacache\n+</literal> package defines service provider interfaces for a query cache. The\n+query cache is enabled by default when the data cache is enabled. The query\n+cache stores the object ids returned by query executions. When you run a query,\n+OpenJPA assembles a key based on the query properties and the parameters used at\n+execution time, and checks for a cached query result. If one is found, the\n+object ids in the cached result are looked up, and the resultant\n+persistence-capable objects are returned. Otherwise, the query is executed\n+against the database, and the object ids loaded by the query are put into the\n+cache. The object id list is not cached until the list returned at query\n+execution time is fully traversed.\n+            </para>\n+            <para>\n+OpenJPA exposes a high-level interface to the query cache through the\n+<ulink url=\"../../api/openjpa/persistence/QueryResultCache.html\"><classname>\n+org.apache.openjpa.persistence.QueryResultCache</classname></ulink> class. You\n+can access this class through the <classname> OpenJPAEntityManagerFactory\n+</classname>.\n+            </para>\n+            <example id=\"ref_guide_cache_queryaccess\">\n+                <title>\n+                    Accessing the QueryResultCache\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n \n OpenJPAEntityManagerFactory kemf = OpenJPAPersistence.cast (emf);\n QueryResultCache qcache = kemf.getQueryResultCache ();\n </programlisting>\n-          </example>\n-          <para>\n-    The default query cache implementation caches 100 query\n-    executions in a least-recently-used cache. This can be changed\n-    by setting the cache size in the <literal>CacheSize</literal>\n-    plugin property.  Like the data cache, the query cache also has a\n-    backing soft reference map.  The <literal>SoftReferenceSize</literal>\n-    property controls the size of this map.  It is disabled by default.\n-    </para>\n-          <example id=\"ref_guide_cache_cachesize\">\n-            <title>Query Cache Size</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+The default query cache implementation caches 100 query executions in a\n+least-recently-used cache. This can be changed by setting the cache size in the\n+<literal>CacheSize</literal> plugin property. Like the data cache, the query\n+cache also has a backing soft reference map. The <literal>SoftReferenceSize\n+</literal> property controls the size of this map. It is disabled by default.\n+            </para>\n+            <example id=\"ref_guide_cache_cachesize\">\n+                <title>\n+                    Query Cache Size\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.QueryCache\" value=\"CacheSize=1000, SoftReferenceSize=100\"/&gt;\n </programlisting>\n-          </example>\n-          <para>\n-    To disable the query cache completely, set the \n-    <literal>openjpa.QueryCache</literal> property to <literal>false</literal>:\n-    </para>\n-          <example id=\"ref_guide_cache_disablequery\">\n-            <title>Disabling the Query Cache</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+To disable the query cache completely, set the <literal>openjpa.QueryCache\n+</literal> property to <literal>false</literal>:\n+            </para>\n+            <example id=\"ref_guide_cache_disablequery\">\n+                <title>\n+                    Disabling the Query Cache\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.QueryCache\" value=\"false\"/&gt;\n </programlisting>\n-          </example>\n-          <para>\n-    There are certain situations in which the query cache is bypassed:\n-    </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-        Caching is not used for in-memory queries (queries in which \n-        the candidates are a collection instead of a class or \n-        <classname>Extent</classname>).\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Caching is not used in transactions that have \n-        <literal>IgnoreChanges</literal> set to <literal>false</literal>\n-        and in which modifications to classes in the query's access \n-        path have occurred. If none of the classes in the access path \n-        have been touched, then cached results are still valid and\n-        are used.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Caching is not used in pessimistic transactions, since OpenJPA \n-        must go to the database to lock the appropriate rows.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Caching is not used when the the data cache does not have any\n-        cached data for an id in a query result.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Queries that use persistence-capable objects as parameters are\n-        only cached if the parameter is directly compared to field,\n-        as in:\n-        </para>\n-              <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+There are certain situations in which the query cache is bypassed:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Caching is not used for in-memory queries (queries in which the candidates are a\n+collection instead of a class or <classname>Extent</classname> ).\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Caching is not used in transactions that have <literal>IgnoreChanges</literal>\n+set to <literal>false</literal> and in which modifications to classes in the\n+query's access path have occurred. If none of the classes in the access path\n+have been touched, then cached results are still valid and are used.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Caching is not used in pessimistic transactions, since OpenJPA must go to the\n+database to lock the appropriate rows.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Caching is not used when the the data cache does not have any cached data for an\n+id in a query result.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Queries that use persistence-capable objects as parameters are only cached if\n+the parameter is directly compared to field, as in:\n+                    </para>\n+<programlisting>\n select e from Employee e where e.company.address = :addr\n </programlisting>\n-              <para>\n-        If you extract field values from the parameter in your query\n-        string, or if the parameter is used in collection element\n-        comparisons, the query is not cached.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Queries that result in projections of custom field types or\n-        <classname>BigDecimal</classname> or \n-        <classname>BigInteger</classname> fields are not cached.\n-        </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-    Cache results are removed from the cache when instances of\n-    classes in a cached query's access path are touched. That is, if\n-    a query accesses data in class <classname>A</classname>, and instances \n-    of class <classname>A</classname> are modified, deleted, or inserted, \n-    then the cached query result is dropped from the cache.\n-    </para>\n-          <para>\n-    It is possible to tell the query cache that a class has been altered. \n-    This is only necessary when the changes occur via direct modification \n-    of the database outside of OpenJPA's control.  You can also evict \n-    individual queries, or clear the entire cache.\n-    </para>\n-          <programlisting format=\"linespecific\">\n+                    <para>\n+If you extract field values from the parameter in your query string, or if the\n+parameter is used in collection element comparisons, the query is not cached.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Queries that result in projections of custom field types or <classname>\n+BigDecimal</classname> or <classname>BigInteger</classname> fields are not\n+cached.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+Cache results are removed from the cache when instances of classes in a cached\n+query's access path are touched. That is, if a query accesses data in class\n+<classname>A</classname>, and instances of class <classname>A</classname> are\n+modified, deleted, or inserted, then the cached query result is dropped from the\n+cache.\n+            </para>\n+            <para>\n+It is possible to tell the query cache that a class has been altered. This is\n+only necessary when the changes occur via direct modification of the database\n+outside of OpenJPA's control. You can also evict individual queries, or clear\n+the entire cache.\n+            </para>\n+<programlisting>\n public void evict (Query q);\n public void evictAll (Class cls);\n public void evictAll ();\n </programlisting>\n-          <para>\n-    For JPA queries with parameters, set the desired parameter values\n-    into the <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html\"><classname>Query</classname></ulink> instance before calling the\n-    above methods.\n-    </para>\n-          <example id=\"ref_guide_cache_query_classchange\">\n-            <title>Evicting Queries</title>\n-            <programlisting format=\"linespecific\">\n+            <para>\n+For JPA queries with parameters, set the desired parameter values into the\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html\">\n+<classname>Query</classname></ulink> instance before calling the above methods.\n+            </para>\n+            <example id=\"ref_guide_cache_query_classchange\">\n+                <title>\n+                    Evicting Queries\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n@@ -520,36 +586,37 @@ Query q = em.createQuery (...).\n     setParameter (1, paramVal1);\n qcache.evict (q);\n </programlisting>\n-          </example>\n-          <para>\n-    When using one of OpenJPA's distributed cache implementations, it is\n-    necessary to perform this in every JVM - the change notification is \n-    not propagated automatically. When using a coherent cache \n-    implementation such as OpenJPA's Tangosol cache implementation, it is not \n-    necessary to do this in every JVM (although it won't hurt to do so), \n-    as the cache results are stored directly in the coherent cache.\n-    </para>\n-          <para>\n-    Queries can also be pinned and unpinned\n-    through the <classname>QueryResultCache</classname>.  The semantics of\n-    these operations are the same as pinning and unpinning data from the\n-    data cache.\n-    </para>\n-          <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+When using one of OpenJPA's distributed cache implementations, it is necessary\n+to perform this in every JVM - the change notification is not propagated\n+automatically. When using a coherent cache implementation such as OpenJPA's\n+Tangosol cache implementation, it is not necessary to do this in every JVM\n+(although it won't hurt to do so), as the cache results are stored directly in\n+the coherent cache.\n+            </para>\n+            <para>\n+Queries can also be pinned and unpinned through the <classname>QueryResultCache\n+</classname>. The semantics of these operations are the same as pinning and\n+unpinning data from the data cache.\n+            </para>\n+<programlisting>\n public void pin (Query q);\n public void unpin (Query q);\n </programlisting>\n-          <para>\n-    For JPA queries with parameters, set the desired parameter values\n-    into the <ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html\"><classname>Query</classname></ulink> instance before calling the\n-    above methods.\n-    </para>\n-          <para>\n-    The following example shows these APIs in action.\n-    </para>\n-          <example id=\"ref_guide_cache_query_pin\">\n-            <title>Pinning, and Unpinning Query Results</title>\n-            <programlisting format=\"linespecific\">\n+            <para>\n+For JPA queries with parameters, set the desired parameter values into the\n+<ulink url=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html\">\n+<classname>Query</classname></ulink> instance before calling the above methods.\n+            </para>\n+            <para>\n+The following example shows these APIs in action.\n+            </para>\n+            <example id=\"ref_guide_cache_query_pin\">\n+                <title>\n+                    Pinning, and Unpinning Query Results\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n@@ -567,29 +634,21 @@ Query unpinQuery = em.createQuery (...).\n     setParameter (1, paramVal1);\n qcache.unpin (unpinQuery);\n </programlisting>\n-          </example>\n-          <para>\n-    Pinning data into the cache instructs the cache to not expire the \n-    pinned results when cache flushing occurs. However, pinned results \n-    will be removed from the cache if an event occurs that invalidates the \n-    results.\n-    </para>\n-<!--\n-    ### known issues:\n-      - timeouts of query cache data based on access path timeouts\n-      - distributed cache\n-        - fire class change notifications\n-      - tangosol\n-        - either fire ccn's or store queries in cache\n-      - access path\n-    -->\n-          <para>\n-    You can disable caching on a per-<classname>EntityManager\n-    </classname> or per-<classname>Query</classname> basis:\n-    </para>\n-          <example id=\"ref_guide_cache_query_disable\">\n-            <title>Disabling and Enabling Query Caching</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+Pinning data into the cache instructs the cache to not expire the pinned results\n+when cache flushing occurs. However, pinned results will be removed from the\n+cache if an event occurs that invalidates the results.\n+            </para>\n+            <para>\n+You can disable caching on a per- <classname>EntityManager</classname> or per-\n+<classname>Query</classname> basis:\n+            </para>\n+            <example id=\"ref_guide_cache_query_disable\">\n+                <title>\n+                    Disabling and Enabling Query Caching\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n@@ -602,7 +661,7 @@ kem.getFetchPlan ().setQueryResultCache (false);\n OpenJPAQuery kq = kem.createQuery (...);\n kq.getFetchPlan ().setQueryResultCache (true);\n </programlisting>\n-            <programlisting format=\"linespecific\">\n+<programlisting>\n import org.apache.openjpa.jdo.*;\n \n ...\n@@ -617,203 +676,217 @@ Query q = pm.newQuery (...);\n OpenJPAFetchPlan fetch = OpenJPAJDOHelper.cast (pm.getFetchPlan ());\n fetch.setQueryResultCache (true);\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_cache_concurrent\">\n-          <title>The Concurrent Data Cache</title>\n-          <para>\n-    The <emphasis>concurrent</emphasis> is a new data cache plugin for OpenJPA.\n-    It has not been as thoroughly tested as OpenJPA's standard data cache. \n-    The concurrent cache can, however, offer considerably greater \n-    performance and scalability characteristics compared to the standard \n-    cache when the following conditions are met:  \n-    </para>\n-          <orderedlist>\n-            <listitem>\n-              <para>\n-        The cache is big enough to hold all of your commonly-used data.  \n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Your application is heavily concurrent.\n-        </para>\n-            </listitem>\n-          </orderedlist>\n-          <para>\n-    Additionally, this cache does not fully index its contents by class,\n-    but rather just keeps track of which clasess are in the cache. It \n-    services requests to drop given classes by checking to see if any \n-    instances of that class might be in the cache, and then clearing the\n-    entire cache. This inefficiency can easily be worked around with careful\n-    cache partitioning.\n-    </para>\n-          <para>\n-    To use the concurrent data cache instead of the standard data cache, \n-    set your <literal>openjpa.DataCache</literal> property to \n-    <literal>concurrent</literal> instead of <literal>true</literal>.\n-    Or, you can mix concurrent and standard caches in a set of named\n-    caches.\n-    </para>\n-          <para>\n-    The concurrent cache has the following configuration parameters:\n-    </para>\n-          <orderedlist>\n-            <listitem>\n-              <para><literal>CacheSize</literal>: The maximum number of \n-        objects that this cache will hold. The default is 1000 objects. \n-        This setting differs from the setting for the default data cache\n-        in that instances that are pinned into cache do count towards \n-        this limit.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>Name</literal>: The unique name of the cache.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>EvictionSchedule</literal>: A cron-style eviction\n-        schedule that this cache should follow.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>LRUThresholdRatio</literal>: The ratio above which \n-        this implementation should start applying its \n-        least-recently-used algorithm to prepare for eviction should \n-        the need arise. Default is 80%. Values should be integers \n-        between 1 and 100.\n-        </para>\n-            </listitem>\n-          </orderedlist>\n-          <example id=\"ref_guide_cache_concurrent_conf\">\n-            <title>Concurrent Data Cache Configuration</title>\n+            <title>\n+                The Concurrent Data Cache\n+            </title>\n             <para>\n-      The following configuration uses the standard OpenJPA cache as the\n-      primary cache and a named concurrent cache as a secondary cache.\n-      Various classes can be configured to use this secondary cache in\n-      their metadata.\n-      </para>\n-            <programlisting format=\"linespecific\">\n+The <emphasis>concurrent</emphasis> is a new data cache plugin for OpenJPA. It\n+has not been as thoroughly tested as OpenJPA's standard data cache. The\n+concurrent cache can, however, offer considerably greater performance and\n+scalability characteristics compared to the standard cache when the following\n+conditions are met:\n+            </para>\n+            <orderedlist>\n+                <listitem>\n+                    <para>\n+The cache is big enough to hold all of your commonly-used data.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Your application is heavily concurrent.\n+                    </para>\n+                </listitem>\n+            </orderedlist>\n+            <para>\n+Additionally, this cache does not fully index its contents by class, but rather\n+just keeps track of which clasess are in the cache. It services requests to drop\n+given classes by checking to see if any instances of that class might be in the\n+cache, and then clearing the entire cache. This inefficiency can easily be\n+worked around with careful cache partitioning.\n+            </para>\n+            <para>\n+To use the concurrent data cache instead of the standard data cache, set your\n+<literal>openjpa.DataCache</literal> property to <literal>concurrent</literal>\n+instead of <literal>true</literal>. Or, you can mix concurrent and standard\n+caches in a set of named caches.\n+            </para>\n+            <para>\n+The concurrent cache has the following configuration parameters:\n+            </para>\n+            <orderedlist>\n+                <listitem>\n+                    <para>\n+<literal>CacheSize</literal>: The maximum number of objects that this cache\n+will hold. The default is 1000 objects. This setting differs from the setting\n+for the default data cache in that instances that are pinned into cache do count\n+towards this limit.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>Name</literal>: The unique name of the cache.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>EvictionSchedule</literal>: A cron-style eviction schedule that this\n+cache should follow.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>LRUThresholdRatio</literal>: The ratio above which this implementation\n+should start applying its least-recently-used algorithm to prepare for eviction\n+should the need arise. Default is 80%. Values should be integers between 1 and\n+100.\n+                    </para>\n+                </listitem>\n+            </orderedlist>\n+            <example id=\"ref_guide_cache_concurrent_conf\">\n+                <title>\n+                    Concurrent Data Cache Configuration\n+                </title>\n+                <para>\n+The following configuration uses the standard OpenJPA cache as the primary cache\n+and a named concurrent cache as a secondary cache. Various classes can be\n+configured to use this secondary cache in their metadata.\n+                </para>\n+<programlisting>\n &lt;property name=\"openjpa.DataCache\" value=\"true, concurrent(Name=secondary)\"/&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_datacacheintegrations\">\n-          <title>Third-Party Integrations</title>\n-          <para>\n-    OpenJPA includes built-in integrations with Tangosol Coherence and\n-    GemStone GemFire caching products.\n-    </para>\n-          <section id=\"ref_guide_cache_tangosol\">\n-            <title>Tangosol Integration</title>\n-            <indexterm zone=\"ref_guide_cache_tangosol\">\n-              <primary>caching</primary>\n-              <secondary>tangosol integration</secondary>\n-            </indexterm>\n+            <title>\n+                Third-Party Integrations\n+            </title>\n             <para>\n-      The OpenJPA data cache can integrate with Tangosol's Coherence caching\n-      system.  To use Tangosol integration, set the \n-      <link linkend=\"openjpa.DataCache\"><literal>openjpa.DataCache</literal></link> configuration property to <literal>tangosol</literal>, with\n-      the appropriate plugin properties for your Tangosol setup.  For \n-      example:\n-      </para>\n-            <example id=\"ref_guide_cache_tangosol_conf\">\n-              <title>Tangosol Cache Configuration</title>\n-              <programlisting format=\"linespecific\">\n+OpenJPA includes built-in integrations with Tangosol Coherence and GemStone\n+GemFire caching products.\n+            </para>\n+            <section id=\"ref_guide_cache_tangosol\">\n+                <title>\n+                    Tangosol Integration\n+                </title>\n+                <indexterm zone=\"ref_guide_cache_tangosol\">\n+                    <primary>\n+                        caching\n+                    </primary>\n+                    <secondary>\n+                        tangosol integration\n+                    </secondary>\n+                </indexterm>\n+                <para>\n+The OpenJPA data cache can integrate with Tangosol's Coherence caching system.\n+To use Tangosol integration, set the <link linkend=\"openjpa.DataCache\">\n+<literal>openjpa.DataCache</literal></link> configuration property to <literal>\n+tangosol</literal>, with the appropriate plugin properties for your Tangosol\n+setup. For example:\n+                </para>\n+                <example id=\"ref_guide_cache_tangosol_conf\">\n+                    <title>\n+                        Tangosol Cache Configuration\n+                    </title>\n+<programlisting>\n &lt;property name=\"openjpa.DataCache\" value=\"tangosol(TangosolCacheName=openjpa)\"/&gt;\n </programlisting>\n-            </example>\n-            <para>\n-      The Tangosol cache understands the following properties:\n-      </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>TangosolCacheName</literal>: The name of the \n-          Tangosol Coherence cache to use.  Defaults to \n-          <literal>openjpa</literal>.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>TangosolCacheType</literal>: The type of Tangosol \n-          Coherence cache to use (optional).  Valid values are\n-          <literal>named</literal>, <literal>distributed</literal>, or\n-          <literal>replicated</literal>. Defaults to <literal>\n-          named</literal>, which means that the cache is looked \n-          up via the <literal>\n-          com.tangosol.net.CacheFactory.getCache(String)</literal>\n-          method. This method looks up the cached by name as\n-          defined in the Coherence configuration.\n-          </para>\n-                <note>\n-                  <para>\n-            As of this writing, it is not possible to use a Tangosol\n-            Coherence 1.2.2 distributed cache type with Apple's OS X\n-            1.3.1 JVM. Use their replicated cache instead.\n-            </para>\n-                </note>\n-              </listitem>\n-              <listitem>\n-                <para><literal>ClearOnClose</literal>: Whether the Tangosol\n-          named cache should be completely cleared when the\n-          <phrase><classname>EntityManagerFactory</classname></phrase>\n-          \n-          \n-          is closed.  Defaults to <literal>false</literal>.\n-          </para>\n-              </listitem>\n-            </itemizedlist>\n-            <para>\n-      The OpenJPA query cache can also integrate with Tangosol's Coherence \n-      caching system.  To use Tangosol query cache integration, set the \n-      <link linkend=\"openjpa.QueryCache\"><literal>openjpa.QueryCache</literal></link> configuration property to <literal>tangosol</literal>, \n-      with the appropriate plugin properties for your Tangosol setup.  \n-      For example:\n-      </para>\n-            <example id=\"ref_guide_cache_tangosol_query_conf\">\n-              <title>Tangosol Query Cache Configuration</title>\n-              <programlisting format=\"linespecific\">\n+                </example>\n+                <para>\n+The Tangosol cache understands the following properties:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>TangosolCacheName</literal>: The name of the Tangosol Coherence cache\n+to use. Defaults to <literal>openjpa</literal>.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>TangosolCacheType</literal>: The type of Tangosol Coherence cache to\n+use (optional). Valid values are <literal>named</literal>, <literal>distributed\n+</literal>, or <literal>replicated</literal>. Defaults to <literal> named\n+</literal>, which means that the cache is looked up via the <literal>\n+com.tangosol.net.CacheFactory.getCache(String)</literal> method. This method\n+looks up the cached by name as defined in the Coherence configuration.\n+                        </para>\n+                        <note>\n+                            <para>\n+As of this writing, it is not possible to use a Tangosol Coherence 1.2.2\n+distributed cache type with Apple's OS X 1.3.1 JVM. Use their replicated cache\n+instead.\n+                            </para>\n+                        </note>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>ClearOnClose</literal>: Whether the Tangosol named cache should be\n+completely cleared when the <phrase><classname>EntityManagerFactory</classname>\n+</phrase> is closed. Defaults to <literal>false</literal>.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+                <para>\n+The OpenJPA query cache can also integrate with Tangosol's Coherence caching\n+system. To use Tangosol query cache integration, set the\n+<link linkend=\"openjpa.QueryCache\"><literal>openjpa.QueryCache</literal></link>\n+configuration property to <literal>tangosol</literal>, with the appropriate\n+plugin properties for your Tangosol setup. For example:\n+                </para>\n+                <example id=\"ref_guide_cache_tangosol_query_conf\">\n+                    <title>\n+                        Tangosol Query Cache Configuration\n+                    </title>\n+<programlisting>\n &lt;property name=\"openjpa.QueryCache\" value=\"tangosol(TangosolCacheName=openjpa-query)\"/&gt;\n </programlisting>\n-            </example>\n-            <para>\n-      The Tangosol query cache understands the same properties as the \n-      data cache, with a default Tangosol cache name of \n-      <literal>openjpa-query</literal>.\n-      </para>\n-          </section>\n-          <section id=\"ref_guide_cache_gemfire\">\n-            <title>GemStone GemFire Integration</title>\n-            <para>\n-      The OpenJPA data cache can integrate with GemStone's GemFire v3.5.1\n-      caching system.\n-      later. To use GemFire in OpenJPA you will need to change your\n-      <literal>gemfire.properties</literal> to have the property \n-      <literal>enable-shared-memory=true</literal>.  You will also need \n-      to add both OpenJPA and GemFire to your classpath and then start \n-      a GemFire server.\n-      </para>\n-            <programlisting format=\"linespecific\">\n+                </example>\n+                <para>\n+The Tangosol query cache understands the same properties as the data cache, with\n+a default Tangosol cache name of <literal>openjpa-query</literal>.\n+                </para>\n+            </section>\n+            <section id=\"ref_guide_cache_gemfire\">\n+                <title>\n+                    GemStone GemFire Integration\n+                </title>\n+                <para>\n+The OpenJPA data cache can integrate with GemStone's GemFire v3.5.1 caching\n+system. later. To use GemFire in OpenJPA you will need to change your <literal>\n+gemfire.properties</literal> to have the property <literal>\n+enable-shared-memory=true</literal>. You will also need to add both OpenJPA and\n+GemFire to your classpath and then start a GemFire server.\n+                </para>\n+<programlisting>\n prompt&gt; gemfire start\n </programlisting>\n-            <para>\n-      By default, the GemFire data cache will use a GemFire region of \n-      <literal>root/openjpa-data-cache</literal> and the GemFire query cache \n-      will use a region of <literal>root/openjpa-query-cache</literal>. This \n-      can be changed be setting the optional property \n-      <literal>GemFireCacheName</literal>. \n-      </para>\n-            <example id=\"ref_guide_datacacheintegrations_gemfire_conf\">\n-              <title>GemFire Cache Configuration</title>\n-              <para><filename>persistence.xml</filename>:\n-        </para>\n-              <programlisting format=\"linespecific\">\n+                <para>\n+By default, the GemFire data cache will use a GemFire region of <literal>\n+root/openjpa-data-cache</literal> and the GemFire query cache will use a region\n+of <literal>root/openjpa-query-cache</literal>. This can be changed be setting\n+the optional property <literal>GemFireCacheName</literal>.\n+                </para>\n+                <example id=\"ref_guide_datacacheintegrations_gemfire_conf\">\n+                    <title>\n+                        GemFire Cache Configuration\n+                    </title>\n+                    <para>\n+<filename>persistence.xml</filename>:\n+                    </para>\n+<programlisting>\n &lt;property name=\"openjpa.DataCache\" \n     value=\"gemfire(GemFireCacheName=/root/my-openjpa-data-cache)\"/&gt;\n &lt;property name=\"openjpa.QueryCache\" \n     value=\"gemfire(GemFireCacheName=/root/my-openjpa-query-cache)\"/&gt;\n </programlisting>\n-              <para>GemFire <filename>cache.xml</filename>:</para>\n-              <programlisting format=\"linespecific\">\n+                    <para>\n+GemFire <filename>cache.xml</filename>:\n+                    </para>\n+<programlisting>\n ...\n     &lt;shared-root-region name=\"root\"&gt;\n         &lt;region-attributes&gt;\n@@ -830,158 +903,171 @@ prompt&gt; gemfire start\n     &lt;/shared-root-region&gt;\n     ...\n </programlisting>\n-            </example>\n-            <para>\n-      If you set GemFire for both <literal>openjpa.DataCache</literal> and \n-      <literal>openjpa.QueryCache</literal> you aren't required to \n-      specify a <literal>openjpa.RemoteCommitProvider</literal> unless you \n-      are registering your own <classname>\n-      RemoteCommitListener</classname>s.\n-      </para>\n-            <para>\n-      Some notes regarding using GemFire with OpenJPA:\n-      </para>\n-            <itemizedlist>\n-              <listitem>\n+                </example>\n                 <para>\n-          Custom field types mapped with externalizers or custom \n-          mappings must be serializable.\n-          </para>\n-              </listitem>\n-              <listitem>\n+If you set GemFire for both <literal>openjpa.DataCache</literal> and <literal>\n+openjpa.QueryCache</literal> you aren't required to specify a <literal>\n+openjpa.RemoteCommitProvider</literal> unless you are registering your own\n+<classname> RemoteCommitListener</classname> s.\n+                </para>\n                 <para>\n-          The <link linkend=\"openjpa.DynamicDataStructs\"><literal>\n-          openjpa.DynamicDataStructs</literal></link> option\n-          is not supported.\n-          </para>\n-              </listitem>\n-            </itemizedlist>\n-          </section>\n+Some notes regarding using GemFire with OpenJPA:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+Custom field types mapped with externalizers or custom mappings must be\n+serializable.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+The <link linkend=\"openjpa.DynamicDataStructs\"><literal>\n+openjpa.DynamicDataStructs</literal></link> option is not supported.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </section>\n         </section>\n         <section id=\"ref_guide_cache_extension\">\n-          <title>Cache Extension</title>\n-          <indexterm zone=\"ref_guide_cache_extension\">\n-            <primary>caching</primary>\n-            <secondary>data cache</secondary>\n-            <tertiary>extension</tertiary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_cache_extension\">\n-            <primary>caching</primary>\n-            <secondary>query cache</secondary>\n-            <tertiary>extension</tertiary>\n-          </indexterm>\n-          <para>\n-    The provided data cache classes can be easily extended to\n-    add additional functionality. If you are adding new behavior,\n-    you should extend <classname>org.apache.openjpa.datacache.DataCacheImpl</classname>. \n-    To use your own storage mechanism, extend\n-    <classname>org.apache.openjpa.datacache.AbstractDataCache</classname>, or implement\n-    <classname>org.apache.openjpa.datacache.DataCache</classname> directly.\n-    If you want to implement a distributed cache that uses an\n-    unsupported method for communications, create an implementation\n-    of <classname>org.apache.openjpa.event.RemoteCommitProvider</classname>. This \n-    process is described in greater detail in \n-    <xref linkend=\"ref_guide_event_customization\"/>.\n-    </para>\n-          <para>\n-    The query cache is just as easy to extend.  Add functionality by \n-    extending the default \n-    <classname>org.apache.openjpa.datacache.QueryCacheImpl</classname>.  Implement your\n-    own storage mechanism for query results by extending \n-    <classname>org.apache.openjpa.datacache.AbstractQueryCache</classname> or implementing\n-    the <classname>org.apache.openjpa.datacache.QueryCache</classname> interface directly.\n-    </para>\n+            <title>\n+                Cache Extension\n+            </title>\n+            <indexterm zone=\"ref_guide_cache_extension\">\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    data cache\n+                </secondary>\n+                <tertiary>\n+                    extension\n+                </tertiary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_cache_extension\">\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    query cache\n+                </secondary>\n+                <tertiary>\n+                    extension\n+                </tertiary>\n+            </indexterm>\n+            <para>\n+The provided data cache classes can be easily extended to add additional\n+functionality. If you are adding new behavior, you should extend <classname>\n+org.apache.openjpa.datacache.DataCacheImpl</classname>. To use your own storage\n+mechanism, extend <classname>org.apache.openjpa.datacache.AbstractDataCache\n+</classname>, or implement <classname>org.apache.openjpa.datacache.DataCache\n+</classname> directly. If you want to implement a distributed cache that uses an\n+unsupported method for communications, create an implementation of <classname>\n+org.apache.openjpa.event.RemoteCommitProvider</classname>. This process is\n+described in greater detail in <xref linkend=\"ref_guide_event_customization\">\n+</xref>.\n+            </para>\n+            <para>\n+The query cache is just as easy to extend. Add functionality by extending the\n+default <classname>org.apache.openjpa.datacache.QueryCacheImpl</classname>.\n+Implement your own storage mechanism for query results by extending <classname>\n+org.apache.openjpa.datacache.AbstractQueryCache</classname> or implementing the\n+<classname>org.apache.openjpa.datacache.QueryCache</classname> interface\n+directly.\n+            </para>\n         </section>\n         <section id=\"ref_guide_cache_notes\">\n-          <title>Important Notes</title>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-        The default cache implementations <emphasis>do not</emphasis> \n-        automatically refresh objects in other <classname>\n-        EntityManager</classname>s\n-        when the cache is updated or invalidated. This behavior would \n-        not be compliant with the JPA specification.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        Invoking <methodname>OpenJPAEntityManager.evict</methodname>\n-        <emphasis>does not</emphasis> result in\n-        the corresponding data being dropped from the data cache, unless\n-        you have set the proper configuration options as explained \n-        above (see <xref linkend=\"ref_guide_cache_pmevict\"/>).  Other \n-        methods related to the <classname>EntityManager</classname>\n-        cache also do not effect the data cache.\n-        </para>\n-              <para>\n-        The data cache \n-        assumes that it is up-to-date with respect to the datastore, \n-        so it is effectively an in-memory extension of the database. To \n-        manipulate the data cache, you should generally use the data\n-        cache facades presented in this chapter.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-        You must specify a <classname>org.apache.openjpa.event.RemoteCommitProvider\n-        </classname> (via the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>openjpa.RemoteCommitProvider</literal></link> \n-        property) in order to use the data cache, even when using the \n-        cache in a single-JVM mode.  When using it in a single-JVM \n-        context, set this property to <literal>sjvm</literal>.\n-        </para>\n-            </listitem>\n-          </itemizedlist>\n+            <title>\n+                Important Notes\n+            </title>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+The default cache implementations <emphasis>do not</emphasis> automatically\n+refresh objects in other <classname> EntityManager</classname>s when the cache\n+is updated or invalidated. This behavior would not be compliant with the JPA\n+specification.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Invoking <methodname>OpenJPAEntityManager.evict</methodname><emphasis>does not\n+</emphasis> result in the corresponding data being dropped from the data cache,\n+unless you have set the proper configuration options as explained above (see\n+<xref linkend=\"ref_guide_cache_pmevict\"></xref> ). Other methods related to the\n+<classname>EntityManager</classname> cache also do not effect the data cache.\n+                    </para>\n+                    <para>\n+The data cache assumes that it is up-to-date with respect to the datastore, so\n+it is effectively an in-memory extension of the database. To manipulate the data\n+cache, you should generally use the data cache facades presented in this\n+chapter.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+You must specify a <classname>org.apache.openjpa.event.RemoteCommitProvider\n+</classname> (via the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n+openjpa.RemoteCommitProvider</literal></link> property) in order to use the data\n+cache, even when using the cache in a single-JVM mode. When using it in a\n+single-JVM context, set this property to <literal>sjvm</literal>.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n         <section id=\"datastore_cache_issues\">\n-          <title>Known Issues and Limitations</title>\n-          <indexterm zone=\"datastore_cache_issues\">\n-            <primary>caching</primary>\n-            <secondary>issues and limitations</secondary>\n-          </indexterm>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-        When using datastore (pessimistic) transactions in concert \n-        with the distributed caching implementations, it is possible \n-        to read stale data when reading data outside a transaction.\n-        </para>\n-              <para>\n-        For example, if you have two JVMs (JVM A and JVM B) both \n-        communicating with each other, and JVM A obtains a data\n-        store lock on a particular object's underlying data, it is\n-        possible for JVM B to load the data from the cache without\n-        going to the datastore, and therefore load data that should\n-        be locked. This will only happen if JVM B attempts to read\n-        data that is already in its cache during the period between\n-        when JVM A locked the data and JVM B received and processed\n-        the invalidation notification.\n-        </para>\n-              <para>\n-        This problem is impossible to solve without putting together a \n-        two-phase commit system for cache notifications, which would \n-        add significant overhead to the caching implementation. As a \n-        result, we recommend that people use optimistic locking when \n-        using data caching. If you do not, then understand that some \n-        of your non-transactional data may not be consistent with the \n-        datastore.\n-        </para>\n-              <para>\n-        Note that when loading objects in a transaction, the \n-        appropriate datastore transactions will be obtained. So,\n-        transactional code will maintain its integrity.\n-        </para>\n-            </listitem>\n-            <listitem>\n-              <para><classname>Extent</classname>s are not cached. So, if you plan \n-        on iterating over a list of all the objects in an \n-        <classname>Extent</classname> on a regular basis, you will \n-        only benefit from caching if you do so with a \n-        <classname>Query</classname> instead:\n-        </para>\n-              <example id=\"ref_guide_cache_limits_extent\">\n-                <title>Query Replaces Extent</title>\n-                <programlisting format=\"linespecific\">\n+            <title>\n+                Known Issues and Limitations\n+            </title>\n+            <indexterm zone=\"datastore_cache_issues\">\n+                <primary>\n+                    caching\n+                </primary>\n+                <secondary>\n+                    issues and limitations\n+                </secondary>\n+            </indexterm>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+When using datastore (pessimistic) transactions in concert with the distributed\n+caching implementations, it is possible to read stale data when reading data\n+outside a transaction.\n+                    </para>\n+                    <para>\n+For example, if you have two JVMs (JVM A and JVM B) both communicating with each\n+other, and JVM A obtains a data store lock on a particular object's underlying\n+data, it is possible for JVM B to load the data from the cache without going to\n+the datastore, and therefore load data that should be locked. This will only\n+happen if JVM B attempts to read data that is already in its cache during the\n+period between when JVM A locked the data and JVM B received and processed the\n+invalidation notification.\n+                    </para>\n+                    <para>\n+This problem is impossible to solve without putting together a two-phase commit\n+system for cache notifications, which would add significant overhead to the\n+caching implementation. As a result, we recommend that people use optimistic\n+locking when using data caching. If you do not, then understand that some of\n+your non-transactional data may not be consistent with the datastore.\n+                    </para>\n+                    <para>\n+Note that when loading objects in a transaction, the appropriate datastore\n+transactions will be obtained. So, transactional code will maintain its\n+integrity.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<classname>Extent</classname>s are not cached. So, if you plan on iterating\n+over a list of all the objects in an <classname>Extent</classname> on a regular\n+basis, you will only benefit from caching if you do so with a <classname>Query\n+</classname> instead:\n+                    </para>\n+                    <example id=\"ref_guide_cache_limits_extent\">\n+                        <title>\n+                            Query Replaces Extent\n+                        </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n ...\n@@ -997,92 +1083,135 @@ OpenJPAQuery extentQuery = kem.createQuery (...);\n extentQuery.setSubclasses (false);\n Iterator cachedIterator = extentQuery.getResultList ().iterator ();\n </programlisting>\n-              </example>\n-            </listitem>\n-          </itemizedlist>\n+                    </example>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n-      </section>\n-      <section id=\"ref_guide_cache_querycomp\">\n-        <title>Query Compilation Cache</title>\n+    </section>\n+    <section id=\"ref_guide_cache_querycomp\">\n+        <title>\n+            Query Compilation Cache\n+        </title>\n         <indexterm zone=\"ref_guide_cache_querycomp\">\n-          <primary>caching</primary>\n-          <secondary>query compilation cache</secondary>\n+            <primary>\n+                caching\n+            </primary>\n+            <secondary>\n+                query compilation cache\n+            </secondary>\n         </indexterm>\n         <para>\n-    The query compilation cache is a <classname>Map</classname> used to\n-    cache parsed query strings.  As a result, most queries are\n-    only parsed once in OpenJPA, and cached thereafter.  You can control the\n-    compilation cache through the \n-    <link linkend=\"openjpa.QueryCompilationCache\"><literal>\n-    openjpa.QueryCompilationCache</literal></link> configuration property.\n-    This property accepts a plugin string (see \n-    <xref linkend=\"ref_guide_conf_plugins\"/>) describing the\n-    <classname>Map</classname> used to associate query strings and their \n-    parsed form.  This property accepts the following aliases:\n-    </para>\n+The query compilation cache is a <classname>Map</classname> used to cache parsed\n+query strings. As a result, most queries are only parsed once in OpenJPA, and\n+cached thereafter. You can control the compilation cache through the\n+<link linkend=\"openjpa.QueryCompilationCache\"><literal>\n+openjpa.QueryCompilationCache</literal></link> configuration property. This\n+property accepts a plugin string (see <xref linkend=\"ref_guide_conf_plugins\">\n+</xref>) describing the <classname>Map</classname> used to associate query\n+strings and their parsed form. This property accepts the following aliases:\n+        </para>\n         <table>\n-          <title>Pre-defined aliases</title>\n-          <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n-            <colspec colname=\"alias\"/>\n-            <colspec colname=\"value\"/>\n-            <colspec colname=\"notes\"/>\n-            <thead>\n-              <row>\n-                <entry colname=\"alias\">Alias</entry>\n-                <entry colname=\"value\">Value</entry>\n-                <entry colname=\"notes\">Notes</entry>\n-              </row>\n-            </thead>\n-            <tbody>\n-              <row>\n-                <entry colname=\"alias\">\n-                  <literal>true</literal>\n-                </entry>\n-                <entry colname=\"value\">\n-                  <literal>openjpa.util.CacheMap</literal>\n-                </entry>\n-                <entry colname=\"notes\">\n+            <title>\n+                Pre-defined aliases\n+            </title>\n+            <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n+                <colspec colname=\"alias\">\n+                </colspec>\n+                <colspec colname=\"value\">\n+                </colspec>\n+                <colspec colname=\"notes\">\n+                </colspec>\n+                <thead>\n+                    <row>\n+                        <entry colname=\"alias\">\n+                            Alias\n+                        </entry>\n+                        <entry colname=\"value\">\n+                            Value\n+                        </entry>\n+                        <entry colname=\"notes\">\n+                            Notes\n+                        </entry>\n+                    </row>\n+                </thead>\n+                <tbody>\n+                    <row>\n+                        <entry colname=\"alias\">\n+                            <literal>\n+                                true\n+                            </literal>\n+                        </entry>\n+                        <entry colname=\"value\">\n+                            <literal>\n+                                openjpa.util.CacheMap\n+                            </literal>\n+                        </entry>\n+                        <entry colname=\"notes\">\n+                            \n               The default option.  Uses a \n-              <ulink url=\"../apidocs/org/apache/openjpa/util/CacheMap.html\"><literal>CacheMap</literal></ulink> to store \n-              compilation data.  <literal>CacheMap</literal> uses\n+              \n+                            <ulink url=\"../apidocs/org/apache/openjpa/util/CacheMap.html\">\n+                                <literal>\n+                                    CacheMap\n+                                </literal>\n+                            </ulink>\n+                             to store \n+              compilation data.  \n+                            <literal>\n+                                CacheMap\n+                            </literal>\n+                             uses\n               a least-recently-used strategy for a fixed number \n               of cache entries, and an optional soft reference \n               map for entries that are moved out of the LRU \n               space. So, for applications that have a \n               monotonically increasing number of distinct queries,\n               this option can be used to ensure that a fixed \n               amount of memory is used by the cache.\n-            </entry>\n-              </row>\n-              <row>\n-                <entry colname=\"alias\">\n-                  <literal>all</literal>\n-                </entry>\n-                <entry colname=\"value\">\n-                  <literal>java.util.HashMap</literal>\n-                </entry>\n-                <entry colname=\"notes\">\n+            \n+                        </entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"alias\">\n+                            <literal>\n+                                all\n+                            </literal>\n+                        </entry>\n+                        <entry colname=\"value\">\n+                            <literal>\n+                                java.util.HashMap\n+                            </literal>\n+                        </entry>\n+                        <entry colname=\"notes\">\n+                            \n               This is the fastest option, but compilation data is\n               never dropped from the cache, so if you use a large \n               number of dynamic queries, this option may result in\n               ever-increasing memory usage. Note that if your \n               queries only differ in the values of the parameters,\n               this should not be an issue.\n-            </entry>\n-              </row>\n-              <row>\n-                <entry colname=\"alias\">\n-                  <literal>false</literal>\n-                </entry>\n-                <entry colname=\"value\">\n-                  <emphasis>none</emphasis>\n-                </entry>\n-                <entry colname=\"notes\">\n+            \n+                        </entry>\n+                    </row>\n+                    <row>\n+                        <entry colname=\"alias\">\n+                            <literal>\n+                                false\n+                            </literal>\n+                        </entry>\n+                        <entry colname=\"value\">\n+                            <emphasis>\n+                                none\n+                            </emphasis>\n+                        </entry>\n+                        <entry colname=\"notes\">\n+                            \n               Disables the compilation cache.\n-            </entry>\n-              </row>\n-            </tbody>\n-          </tgroup>\n+            \n+                        </entry>\n+                    </row>\n+                </tbody>\n+            </tgroup>\n         </table>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"29695a247c85e7db89cf7fc4e1a3ac98d75b7d24","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":3485,"deletions":2747,"changes":6232,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"25f56c589e14734d35efb7410b51037408cd8711","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":4181,"deletions":2403,"changes":6584,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"d4f65033434d6345d64a96b600a74841cfddaf0f","filename":"openjpa-project/src/doc/manual/ref_guide_deploy.xml","status":"modified","additions":136,"deletions":204,"changes":340,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_deploy.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_deploy.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_deploy.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,224 +1,156 @@\n-\n-    <chapter id=\"ref_guide_deploy\">\n-      <title>Deployment</title>\n-      <para>\n-  OpenJPA deployment includes choosing a factory deployment strategy,\n-  and in a managed environment, optionally integrating with your application\n-  server's managed and XA transactions.  This chapter examines each aspect\n-  of deployment in turn.\n-  </para>\n-      <section id=\"ref_guide_deploy_factory\">\n-        <title>Factory Deployment</title>\n-        <para>\n-    OpenJPA offers several \n-    <phrase><classname>EntityManagerFactory</classname></phrase>\n-    \n-    \n-    deployment options.\n+<chapter id=\"ref_guide_deploy\">\n+    <title>\n+        Deployment\n+    </title>\n+    <para>\n+OpenJPA deployment includes choosing a factory deployment strategy, and in a\n+managed environment, optionally integrating with your application server's\n+managed and XA transactions. This chapter examines each aspect of deployment in\n+turn.\n     </para>\n+    <section id=\"ref_guide_deploy_factory\">\n+        <title>\n+            Factory Deployment\n+        </title>\n+        <para>\n+OpenJPA offers several <phrase><classname>EntityManagerFactory</classname>\n+</phrase> deployment options.\n+        </para>\n         <section id=\"ref_guide_deploy_factory_standalone\">\n-          <title>Standalone Deployment</title>\n-          <indexterm zone=\"ref_guide_deploy_factory_standalone\">\n-            <primary>deployment</primary>\n-            <secondary>standalone</secondary>\n-            <seealso>Persistence</seealso>\n-          </indexterm>\n-          <para>\n-      The JPA Overview describes the \n-      <classname>javax.persistence.Persistence</classname> class.  You \n-      can use <classname>Persistence</classname> to obtain \n-      <classname>EntityManagerFactory</classname> instances, as \n-      demonstrated in <xref linkend=\"jpa_overview_persistence\"/>.\n-      OpenJPA also extends <classname>Persistence</classname> to add\n-      additional <classname>EntityManagerFactory</classname> \n-      creation methods.  The\n-      <classname>org.apache.openjpa.persistence.OpenJPAPersistence</classname> class\n-      <ulink url=\"../../api/openjpa/persistence/OpenJPAPersistence.html\">\n-      Javadoc</ulink> details these extensions.\n-      </para>\n-          <para>\n-      After obtaining the factory, you can cache it for all \n-      <phrase><classname>EntityManager</classname></phrase>\n-       \n-      \n-      creation duties.\n-      </para>\n-        </section>\n-        <section id=\"ref_guide_deploy_inject\">\n-          <title>EntityManager Injection</title>\n-<!-- ### EJBDOC -->\n-          <para>\n-      To be decided.\n-      </para>\n-        </section>\n-        <section id=\"ref_guide_deploy_jca_ejb\">\n-          <title>OpenJPA JCA Deployment</title>\n-          <indexterm zone=\"ref_guide_deploy_jca_ejb\">\n-            <primary>deployment</primary>\n-            <secondary>JCA</secondary>\n-            <seealso>JCA</seealso>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_deploy_jca_ejb\">\n-            <primary>JCA</primary>\n-            <secondary>deployment</secondary>\n-          </indexterm>\n-          <para>\n-      OpenJPA can deploy OpenJPA through the Java Connector Architecture\n-      (JCA) in any JCA-compliant application server that supports\n-      JDK 1.5 (all EJB 3 implementations require JDK 1.5).  We present\n-      the deployment steps for the most common servers below.\n-      </para>\n-          <section id=\"ref_guide_deploy_jca_jpa_weblogic9\">\n-            <title>WebLogic 9</title>\n-            <indexterm zone=\"ref_guide_deploy_jca_jpa_weblogic9\">\n-              <primary>Weblogic</primary>\n+            <title>\n+                Standalone Deployment\n+            </title>\n+            <indexterm zone=\"ref_guide_deploy_factory_standalone\">\n+                <primary>\n+                    deployment\n+                </primary>\n+                <secondary>\n+                    standalone\n+                </secondary>\n+                <seealso>\n+                    Persistence\n+                </seealso>\n             </indexterm>\n-            <indexterm zone=\"ref_guide_deploy_jca_jpa_weblogic9\">\n-              <primary>JCA</primary>\n-              <secondary>Weblogic 9</secondary>\n-            </indexterm>\n-            <para><!-- ### JDO2MIG : everything in system path for now -->\n-        First, ensure that your JDBC driver is in your system classpath.\n-        In addition, you will be adding the OpenJPA and specification API\n-        jars to the system classpath.  You can accomplish this by\n-        editing <filename>startWebLogic.sh/.cmd</filename>.\n-        </para>\n-            <warning>\n-              <para>Currently WebLogic ships with an old version\n-          of the EJB 3 libraries.  Be sure to put \n-          <filename>org.apache.openjpa.jar</filename> in the <emphasis>beginning\n-          </emphasis> of the <literal>CLASSPATH</literal>.</para>\n-            </warning>\n             <para>\n-        The next step is to deploy \n-        <filename>openjpa-persistence.rar</filename> from the \n-        <filename>jca/persistence</filename> directory of your OpenJPA\n-        installation.  Copy this file to the <filename>autodeploy\n-        </filename> directory of your domain.  \n-        </para>\n-            <para>\n-        We will now extract <filename>META-INF/ra.xml</filename>\n-        and <filename>META-INF/weblogic-ra.xml</filename>\n-        to edit our configuration:\n-        </para>\n-            <programlisting format=\"linespecific\">\n-jar xvf openjpa-ejb.rar META-INF/ra.xml META-INF/weblogic-ra.xml\n-</programlisting>\n+The JPA Overview describes the <classname>javax.persistence.Persistence\n+</classname> class. You can use <classname>Persistence</classname> to obtain\n+<classname>EntityManagerFactory</classname> instances, as demonstrated in\n+<xref linkend=\"jpa_overview_persistence\"></xref>. OpenJPA also extends\n+<classname>Persistence</classname> to add additional <classname>\n+EntityManagerFactory</classname> creation methods. The <classname>\n+org.apache.openjpa.persistence.OpenJPAPersistence</classname> class\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAPersistence.html\"> Javadoc\n+</ulink> details these extensions.\n+            </para>\n             <para>\n-        Now you should configure OpenJPA JCA by editing\n-        <filename>META-INF/ra.xml</filename> substituting\n-        <literal>config-property-value</literal> stanzas\n-        with your own values.  You can comment out\n-        properties (config-property stanzas) which you are\n-        not using or you can leave them at their default settings.\n-        Edit <filename>META-INF/weblogic-ra.xml</filename>\n-        to configure the JNDI location to which you\n-        want OpenJPA to be bound.\n-        </para>\n-            <para>\n-        Now we can re-jar the manifest files back into the \n-        <filename>RAR</filename> file.\n-        </para>\n-            <programlisting format=\"linespecific\">\n-jar uvf openjpa-ejb.rar META-INF/ra.xml META-INF/weblogic-ra.xml\n-rm META-INF/ra.xml META-IN/weblogic-ra.xml\n-rmdir META-INF\n-</programlisting>\n+After obtaining the factory, you can cache it for all <phrase><classname>\n+EntityManager</classname></phrase> creation duties.\n+            </para>\n+        </section>\n+        <section id=\"ref_guide_deploy_inject\">\n+            <title>\n+                EntityManager Injection\n+            </title>\n+            <!-- ### -->\n             <para>\n-        Now you can start WebLogic and WebLogic should\n-        deploy OpenJPA for you.  If you have installed OpenJPA correctly, \n-        at this point, one should be able to see OpenJPA bound to the \n-        JNDI location which you specified earlier.\n-        </para>\n-          </section>\n+TBD\n+            </para>\n         </section>\n-      </section>\n-      <section id=\"ref_guide_enterprise_xa\">\n-        <title>XA Transactions</title>\n+    </section>\n+    <section id=\"ref_guide_enterprise_xa\">\n+        <title>\n+            XA Transactions\n+        </title>\n         <indexterm zone=\"ref_guide_enterprise_xa\">\n-          <primary>transactions</primary>\n-          <secondary>XA</secondary>\n+            <primary>\n+                transactions\n+            </primary>\n+            <secondary>\n+                XA\n+            </secondary>\n         </indexterm>\n         <indexterm>\n-          <primary>XA transactions</primary>\n-          <see>transactions</see>\n+            <primary>\n+                XA transactions\n+            </primary>\n+            <see>\n+                transactions\n+            </see>\n         </indexterm>\n         <para>\n-    The X/Open Distributed Transaction Processing (X/Open DTP)\n-    featureSelection, designed by <ulink url=\"http://www.xopen.org\">Open Group</ulink>\n-    (a vendor consortium), defines a standard communication architecture\n-    that provides the following:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para>\n-        Concurrent execution of applications on shared resources.\n+The X/Open Distributed Transaction Processing (X/Open DTP) featureSelection, designed by\n+<ulink url=\"http://www.xopen.org\">Open Group</ulink> (a vendor consortium),\n+defines a standard communication architecture that provides the following:\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        Coordination of transactions across applications.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        Components, interfaces, and protocols that define the \n-        architecture and provide portability of applications.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para>Atomicity of transaction systems.</para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-        Single-thread control and sequential function-calling.\n-        </para>\n-          </listitem>\n-        </itemizedlist>\n-        <para>\n-    The X/Open DTP XA standard defines the application programming\n-    interfaces that a resource manager uses to communicate\n-    with a transaction manager. The XA interfaces enable resource\n-    managers to join transactions, to perform two-phase commit,\n-    and to recover in-doubt transactions following a failure.\n-    </para>\n-        <section id=\"ref_guide_enterprise_xa_req\">\n-          <title>Using OpenJPA with XA Transactions</title>\n-          <para>\n-      OpenJPA supports XA-compliant transactions when used in a properly\n-      configured managed environment. The following components are \n-      required:\n-      </para>\n-          <itemizedlist>\n+        <itemizedlist>\n             <listitem>\n-              <para>\n-          A managed environment that provides an XA compliant \n-          transaction manager. Examples of this are application \n-          servers such as JBoss and WebLogic.\n-          </para>\n+                <para>\n+Concurrent execution of applications on shared resources.\n+                </para>\n             </listitem>\n             <listitem>\n-              <para>\n-          Instances of a <classname>javax.sql.XADataSource</classname>\n-          for each of the <classname>DataSource</classname>s that \n-          OpenJPA will use.\n-          </para>\n+                <para>\n+Coordination of transactions across applications.\n+                </para>\n             </listitem>\n-          </itemizedlist>\n-          <para>\n-      Given these components, setting up OpenJPA to participate in \n-      distributed transactions is a simple two-step process:\n-      </para>\n-          <orderedlist>\n             <listitem>\n-              <para>\n-          Point OpenJPA at an enlisted \n-          <classname>XADataSource</classname>, and configure a \n-          second non-enlisted data source.\n-          See <xref linkend=\"ref_guide_dbsetup_thirdparty_enlist\"/>.\n-          </para>\n+                <para>\n+Components, interfaces, and protocols that define the architecture and provide\n+portability of applications.\n+                </para>\n             </listitem>\n-          </orderedlist>\n+            <listitem>\n+                <para>\n+Atomicity of transaction systems.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+Single-thread control and sequential function-calling.\n+                </para>\n+            </listitem>\n+        </itemizedlist>\n+        <para>\n+The X/Open DTP XA standard defines the application programming interfaces that a\n+resource manager uses to communicate with a transaction manager. The XA\n+interfaces enable resource managers to join transactions, to perform two-phase\n+commit, and to recover in-doubt transactions following a failure.\n+        </para>\n+        <section id=\"ref_guide_enterprise_xa_req\">\n+            <title>\n+                Using OpenJPA with XA Transactions\n+            </title>\n+            <para>\n+OpenJPA supports XA-compliant transactions when used in a properly configured\n+managed environment. The following components are required:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+A managed environment that provides an XA compliant transaction manager.\n+Examples of this are application servers such as JBoss and WebLogic.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Instances of a <classname>javax.sql.XADataSource</classname> for each of the\n+<classname>DataSource</classname>s that OpenJPA will use.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+Given these components, setting up OpenJPA to participate in distributed\n+transactions is a simple two-step process:\n+            </para>\n+            <orderedlist>\n+                <listitem>\n+                    <para>\n+Point OpenJPA at an enlisted <classname>XADataSource</classname>, and configure\n+a second non-enlisted data source. See\n+<xref linkend=\"ref_guide_dbsetup_thirdparty_enlist\"></xref>.\n+                    </para>\n+                </listitem>\n+            </orderedlist>\n         </section>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"e634dbf9b77e6f774df660225fd1b3c5a42885d9","filename":"openjpa-project/src/doc/manual/ref_guide_integration.xml","status":"modified","additions":355,"deletions":292,"changes":647,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_integration.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_integration.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_integration.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,97 +1,99 @@\n-\n-    <chapter id=\"ref_guide_integration\">\n-      <title>Third Party Integration</title>\n-      <para>\n-  OpenJPA provides a number of mechanisms for integrating with third-party \n-  tools. The following chapter will illustrate these integration features.\n-  </para>\n-      <section id=\"ref_guide_integration_ant\">\n-        <title>Apache Ant</title>\n+<chapter id=\"ref_guide_integration\">\n+    <title>\n+        Third Party Integration\n+    </title>\n+    <para>\n+OpenJPA provides a number of mechanisms for integrating with third-party tools.\n+The following chapter will illustrate these integration features.\n+    </para>\n+    <section id=\"ref_guide_integration_ant\">\n+        <title>\n+            Apache Ant\n+        </title>\n         <indexterm zone=\"ref_guide_integration_ant\">\n-          <primary>Ant</primary>\n+            <primary>\n+                Ant\n+            </primary>\n         </indexterm>\n         <para>\n-    Ant is a very popular tool for building Java projects. It is similar to\n-    the <literal>make</literal> command, but is Java-centric and has\n-    more modern features. Ant is open source, and can be downloaded\n-    from Apache's Ant web page at\n-    <ulink url=\"http://jakarta.apache.org/ant/\">\n-    http://jakarta.apache.org/ant/</ulink>.\n-    Ant has become the de-facto standard build tool for Java, and\n-    many commercial integrated development environments provide\n-    some support for using ant build files. The remainder of this\n-    section assumes familiarity with writing Ant\n-    <filename>build.xml</filename> files.\n-    </para>\n+Ant is a very popular tool for building Java projects. It is similar to the\n+<literal>make</literal> command, but is Java-centric and has more modern\n+features. Ant is open source, and can be downloaded from Apache's Ant web page\n+at <ulink url=\"http://jakarta.apache.org/ant/\"> http://jakarta.apache.org/ant/\n+</ulink>. Ant has become the de-facto standard build tool for Java, and many\n+commercial integrated development environments provide some support for using\n+ant build files. The remainder of this section assumes familiarity with writing\n+Ant <filename>build.xml</filename> files.\n+        </para>\n         <para>\n-    OpenJPA provides pre-built Ant task definitions for all bundled tools:\n-    </para>\n+OpenJPA provides pre-built Ant task definitions for all bundled tools:\n+        </para>\n         <itemizedlist>\n-          <listitem>\n-            <para>\n-              <link linkend=\"ref_guide_integration_enhance\">Enhancer\n-        Task</link>\n-            </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-              <link linkend=\"ref_guide_integration_appidtool\">Application\n-        Identity Tool Task</link>\n-            </para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-              <link linkend=\"ref_guide_integration_mappingtool\">Mapping \n-        Tool Task</link>\n-            </para>\n-          </listitem>\n-          <listitem>\n+            <listitem>\n+                <para>\n+<link linkend=\"ref_guide_integration_enhance\">Enhancer Task</link>\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<link linkend=\"ref_guide_integration_appidtool\">Application Identity Tool Task\n+</link>\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<link linkend=\"ref_guide_integration_mappingtool\">Mapping Tool Task</link>\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<link linkend=\"ref_guide_integration_revmappingtool\">Reverse Mapping Tool Task\n+</link>\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<link linkend=\"ref_guide_integration_schematool\">Schema Tool Task</link>\n+                </para>\n+            </listitem>\n+        </itemizedlist>\n+        <para>\n+The source code for all the ant tasks is provided with the distribution under\n+the <filename>src</filename> directory. This allows you to customize various\n+aspects of the ant tasks in order to better integrate into your development\n+environment.\n+        </para>\n+        <section id=\"ref_guide_integration_conf\">\n+            <title>\n+                Common Ant Configuration Options\n+            </title>\n+            <indexterm>\n+                <primary>\n+                    Ant\n+                </primary>\n+                <secondary>\n+                    configuration options\n+                </secondary>\n+            </indexterm>\n             <para>\n-              <link linkend=\"ref_guide_integration_revmappingtool\">Reverse\n-        Mapping Tool Task</link>\n+All OpenJPA tasks accept a nested <literal>config</literal> element, which\n+defines the configuration environment in which the specified task will run. The\n+attributes for the <literal>config</literal> tag are defined by the\n+<ulink url=\"../apidocs/org/apache/openjpa/jdbc/conf/JDBCConfiguration.html\">\n+<classname>JDBCConfiguration</classname></ulink> bean methods. Note that\n+excluding the <literal>config</literal> element will cause the Ant task to use\n+the default system configuration mechanism, such as the configuration defined in\n+the <phrase><filename>org.apache.openjpa.xml</filename></phrase> file.\n             </para>\n-          </listitem>\n-          <listitem>\n             <para>\n-              <link linkend=\"ref_guide_integration_schematool\">Schema Tool\n-        Task</link>\n+Following is an example of how to use the nested <literal>config</literal> tag\n+in a <filename>build.xml</filename> file:\n             </para>\n-          </listitem>\n-        </itemizedlist>\n-        <para>\n-    The source code for all the ant tasks is provided with the distribution\n-    under the <filename>src</filename> directory. This allows you\n-    to customize various aspects of the ant tasks in order to better \n-    integrate into your development environment.\n-    </para>\n-        <section id=\"ref_guide_integration_conf\">\n-          <title>Common Ant Configuration Options</title>\n-          <indexterm>\n-            <primary>Ant</primary>\n-            <secondary>configuration options</secondary>\n-          </indexterm>\n-          <para>\n-      All OpenJPA tasks accept a nested <literal>config</literal>\n-      element, which defines the configuration environment in which\n-      the specified task will run. The attributes for the\n-      <literal>config</literal> tag are defined by the \n-      <ulink url=\"../apidocs/org/apache/openjpa/jdbc/conf/JDBCConfiguration.html\"><classname>JDBCConfiguration</classname></ulink> bean methods. \n-      Note that excluding the <literal>config</literal> element \n-      will cause the Ant task to use the default system configuration \n-      mechanism, such as the configuration defined in the \n-      <phrase><filename>org.apache.openjpa.xml</filename></phrase>\n-      \n-      \n-      file.\n-      </para>\n-          <para>\n-      Following is an example of how to use the nested\n-      <literal>config</literal> tag in a <filename>build.xml</filename> \n-      file:\n-      </para>\n-          <example id=\"ref_guide_integration_conf_config\">\n-            <title>Using the &lt;config&gt; Ant Tag</title>\n-            <programlisting format=\"linespecific\">\n+            <example id=\"ref_guide_integration_conf_config\">\n+                <title>\n+                    Using the &lt;config&gt; Ant Tag\n+                </title>\n+<programlisting>\n &lt;mappingtool&gt;\n   &lt;fileset dir=\"${basedir}\"&gt;\n     &lt;include name=\"**/featureSelection/*.java\" /&gt;\n@@ -101,56 +103,59 @@\n     connectionDriverName=\"oracle.jdbc.driver.OracleDriver\" /&gt;\n &lt;/mappingtool&gt;\n </programlisting>\n-          </example>\n-          <para>\n-      It is also possible to specify a <literal>properties</literal> \n-      or <literal>propertiesFile</literal> attribute on the \n-      <literal>config</literal> tag, which will be used to \n-      locate a properties resource or file. The resource will be \n-      loaded relative to the current CLASSPATH.\n-      </para>\n-          <example id=\"ref_guide_integration_props\">\n-            <title>Using the Properties Attribute of the &lt;config&gt; \n-        Tag</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+It is also possible to specify a <literal>properties</literal> or <literal>\n+propertiesFile</literal> attribute on the <literal>config</literal> tag, which\n+will be used to locate a properties resource or file. The resource will be\n+loaded relative to the current CLASSPATH.\n+            </para>\n+            <example id=\"ref_guide_integration_props\">\n+                <title>\n+                    Using the Properties Attribute of the &lt;config&gt; \n+        Tag\n+                </title>\n+<programlisting>\n &lt;mappingtool&gt;\n   &lt;fileset dir=\"${basedir}\"&gt;\n     &lt;include name=\"**/featureSelection/*.java\"/&gt;\n   &lt;/fileset&gt;\n   &lt;config properties=\"openjpa-dev.properties\"/&gt;\n &lt;/mappingtool&gt;\n </programlisting>\n-          </example>\n-          <example id=\"ref_guide_integration_propsfile\">\n-            <title>Using the PropertiesFile Attribute of the &lt;config&gt; \n-        Tag</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <example id=\"ref_guide_integration_propsfile\">\n+                <title>\n+                    Using the PropertiesFile Attribute of the &lt;config&gt; \n+        Tag\n+                </title>\n+<programlisting>\n &lt;mappingtool&gt;\n   &lt;fileset dir=\"${basedir}\"&gt;\n     &lt;include name=\"**/featureSelection/*.java\"/&gt;\n   &lt;/fileset&gt;\n   &lt;config propertiesFile=\"../conf/openjpa-dev.properties\"/&gt;\n &lt;/mappingtool&gt;\n </programlisting>\n-          </example>\n-          <para>\n-      Tasks also accept a nested <literal>classpath</literal> \n-      element, which you can use in place of the default classpath.\n-      The <literal>classpath</literal> argument behaves the same \n-      as it does for Ant's standard <literal>javac</literal>\n-      element. It is sometimes the case that projects are compiled\n-      to a separate directory than the source tree. If the target\n-      path for compiled classes is not included in the project's\n-      classpath, then a <literal>classpath</literal> element\n-      that includes the target class directory needs to be included so \n-      the enhancer and mapping tool can locate the relevant classes.\n-      </para>\n-          <para>\n-      Following is an example of using a <literal>classpath</literal> tag:\n-      </para>\n-          <example id=\"ref_guide_integration_conf_classpath\">\n-            <title>Using the &lt;classpath&gt; Ant Tag</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+Tasks also accept a nested <literal>classpath</literal> element, which you can\n+use in place of the default classpath. The <literal>classpath</literal> argument\n+behaves the same as it does for Ant's standard <literal>javac</literal> element.\n+It is sometimes the case that projects are compiled to a separate directory than\n+the source tree. If the target path for compiled classes is not included in the\n+project's classpath, then a <literal>classpath</literal> element that includes\n+the target class directory needs to be included so the enhancer and mapping tool\n+can locate the relevant classes.\n+            </para>\n+            <para>\n+Following is an example of using a <literal>classpath</literal> tag:\n+            </para>\n+            <example id=\"ref_guide_integration_conf_classpath\">\n+                <title>\n+                    Using the &lt;classpath&gt; Ant Tag\n+                </title>\n+<programlisting>\n &lt;openjpac&gt;\n   &lt;fileset dir=\"${basedir}/source\"&gt;\n     &lt;include name=\"**/featureSelection/*.java\" /&gt;\n@@ -162,102 +167,126 @@\n   &lt;/classpath&gt;\n &lt;/openjpac&gt;\n </programlisting>\n-          </example>\n-          <para>\n-      Finally, tasks that invoke code-generation tools like the\n-      application identity tool and reverse mapping tool accept a nested\n-      <literal>codeformat</literal> element.  See the code formatting\n-      documentation in <xref linkend=\"ref_guide_conf_devtools_format\"/>\n-      for a list of code formatting attributes.\n-      </para>\n-          <example id=\"ref_guide_integration_conf_codeformat\">\n-            <title>Using the &lt;codeformat&gt; Ant Tag</title>\n-            <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+Finally, tasks that invoke code-generation tools like the application identity\n+tool and reverse mapping tool accept a nested <literal>codeformat</literal>\n+element. See the code formatting documentation in\n+<xref linkend=\"ref_guide_conf_devtools_format\"></xref> for a list of code\n+formatting attributes.\n+            </para>\n+            <example id=\"ref_guide_integration_conf_codeformat\">\n+                <title>\n+                    Using the &lt;codeformat&gt; Ant Tag\n+                </title>\n+<programlisting>\n &lt;reversemappingtool package=\"com.xyz.jdo\" directory=\"${basedir}/src\"&gt;\n   &lt;codeformat tabSpaces=\"4\" spaceBeforeParen=\"true\" braceOnSameLine=\"false\"/&gt;\n &lt;/reversemappingtool&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_integration_enhance\">\n-          <title>Enhancer Ant Task</title>\n-          <indexterm zone=\"ref_guide_integration_enhance\">\n-            <primary>Ant</primary>\n-            <secondary>enhancer task</secondary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_integration_enhance\">\n-            <primary>enhancer</primary>\n-            <secondary>Ant task</secondary>\n-          </indexterm>\n-          <para>\n-      The enhancer task allows you to invoke the OpenJPA enhancer\n-      directly from within the Ant build process.  The task's \n-      parameters correspond exactly to the long versions of the \n-      command-line arguments to <link linkend=\"ref_guide_pc_enhance\"><literal>openjpac</literal></link>.\n-      </para>\n-          <para>  \n-      The enhancer task accepts a nested <literal>fileset</literal> tag \n-      to specify the files that should be processed. You can specify \n-      <filename>.java</filename> or <filename>.class</filename> files.\n-      If you do not specify any files, the task will run on the classes \n-      listed in your <link linkend=\"openjpa.MetaDataFactory\"><literal>\n-      openjpa.MetaDataFactory</literal></link> property.\n-      </para>\n-          <para>\n-      Following is an example of using the enhancer task\n-      in a <filename>build.xml</filename> file:\n-      </para>\n-          <example id=\"ref_guide_integration_enhance_task\">\n-            <title>Invoking the Enhancer from Ant</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Enhancer Ant Task\n+            </title>\n+            <indexterm zone=\"ref_guide_integration_enhance\">\n+                <primary>\n+                    Ant\n+                </primary>\n+                <secondary>\n+                    enhancer task\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_integration_enhance\">\n+                <primary>\n+                    enhancer\n+                </primary>\n+                <secondary>\n+                    Ant task\n+                </secondary>\n+            </indexterm>\n+            <para>\n+The enhancer task allows you to invoke the OpenJPA enhancer directly from within\n+the Ant build process. The task's parameters correspond exactly to the long\n+versions of the command-line arguments to <link linkend=\"ref_guide_pc_enhance\">\n+<literal>openjpac</literal></link>.\n+            </para>\n+            <para>\n+The enhancer task accepts a nested <literal>fileset</literal> tag to specify the\n+files that should be processed. You can specify <filename>.java</filename> or\n+<filename>.class</filename> files. If you do not specify any files, the task\n+will run on the classes listed in your <link linkend=\"openjpa.MetaDataFactory\">\n+<literal> openjpa.MetaDataFactory</literal></link> property.\n+            </para>\n+            <para>\n+Following is an example of using the enhancer task in a <filename>build.xml\n+</filename> file:\n+            </para>\n+            <example id=\"ref_guide_integration_enhance_task\">\n+                <title>\n+                    Invoking the Enhancer from Ant\n+                </title>\n+<programlisting>\n &lt;target name=\"enhance\"&gt;\n   &lt;!-- define the openjpac task; this can be done at the top of the    --&gt;\n   &lt;!-- build.xml file, so it will be available for all targets      --&gt;\n   &lt;taskdef name=\"openjpac\" classname=\"org.apache.openjpa.ant.PCEnhancerTask\"/&gt;\n \n-  &lt;!-- invoke enhancer on all .jdo files below the current directory --&gt;\n+  &lt;!-- invoke enhancer on all .java files below the featureSelection directory --&gt;\n   &lt;openjpac&gt;\n     &lt;fileset dir=\".\"&gt;\n       &lt;include name=\"**/featureSelection/*.java\" /&gt;\n     &lt;/fileset&gt;\n   &lt;/openjpac&gt;\n &lt;/target&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_integration_appidtool\">\n-          <title>Application Identity Tool Ant Task</title>\n-          <indexterm zone=\"ref_guide_integration_enhance\">\n-            <primary>Ant</primary>\n-            <secondary>application identity tool task</secondary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_integration_enhance\">\n-            <primary>application identity tool</primary>\n-            <secondary>Ant task</secondary>\n-          </indexterm>\n-          <para>\n-      The application identity tool task allows you to invoke the \n-      application identity tool directly from within the Ant build \n-      process.  The task's parameters correspond exactly to the long \n-      versions of the command-line arguments to\n-      <link linkend=\"ref_guide_pc_appid_appidtool\"><literal>appidtool</literal></link>.\n-      </para>\n-          <para>  \n-      The application identity tool task accepts a nested \n-      <literal>fileset</literal> tag to specify the files that should be \n-      processed. You can specify \n-      <filename>.java</filename> or <filename>.class</filename> files.\n-      If you do not specify any files, the task will run on the classes \n-      listed in your <link linkend=\"openjpa.MetaDataFactory\"><literal>\n-      openjpa.MetaDataFactory</literal></link> property.\n-      </para>\n-          <para>\n-      Following is an example of using the application identity tool task\n-      in a <filename>build.xml</filename> file:\n-      </para>\n-          <example id=\"ref_guide_integration_appidtool_task\">\n-            <title>Invoking the Application Identity Tool from Ant</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Application Identity Tool Ant Task\n+            </title>\n+            <indexterm zone=\"ref_guide_integration_enhance\">\n+                <primary>\n+                    Ant\n+                </primary>\n+                <secondary>\n+                    application identity tool task\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_integration_enhance\">\n+                <primary>\n+                    application identity tool\n+                </primary>\n+                <secondary>\n+                    Ant task\n+                </secondary>\n+            </indexterm>\n+            <para>\n+The application identity tool task allows you to invoke the application identity\n+tool directly from within the Ant build process. The task's parameters\n+correspond exactly to the long versions of the command-line arguments to\n+<link linkend=\"ref_guide_pc_appid_appidtool\"><literal>appidtool</literal></link>\n+.\n+            </para>\n+            <para>\n+The application identity tool task accepts a nested <literal>fileset</literal>\n+tag to specify the files that should be processed. You can specify <filename>\n+.java</filename> or <filename>.class</filename> files. If you do not specify any\n+files, the task will run on the classes listed in your\n+<link linkend=\"openjpa.MetaDataFactory\"><literal> openjpa.MetaDataFactory\n+</literal></link> property.\n+            </para>\n+            <para>\n+Following is an example of using the application identity tool task in a\n+<filename>build.xml</filename> file:\n+            </para>\n+            <example id=\"ref_guide_integration_appidtool_task\">\n+                <title>\n+                    Invoking the Application Identity Tool from Ant\n+                </title>\n+<programlisting>\n &lt;target name=\"appids\"&gt;\n   &lt;!-- define the appidtool task; this can be done at the top of     --&gt;\n   &lt;!-- the build.xml file, so it will be available for all targets   --&gt;\n@@ -272,45 +301,53 @@\n   &lt;/appidtool&gt;\n &lt;/target&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_integration_mappingtool\">\n-          <title>Mapping Tool Ant Task</title>\n-          <indexterm zone=\"ref_guide_integration_mappingtool\">\n-            <primary>Ant</primary>\n-            <secondary>mapping tool task</secondary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_integration_mappingtool\">\n-            <primary>mapping tool</primary>\n-            <secondary>Ant task</secondary>\n-          </indexterm>\n-          <para>\n-      The mapping tool task allows you to directly invoke the\n-      mapping tool from within the Ant build process.  It is useful for\n-      making sure that the database schema and object-relational mapping\n-      data is always synchronized with your persistent class definitions,\n-      without needing to remember to invoke the mapping tool manually.\n-      The task's parameters correspond exactly to the long versions of\n-      the command-line arguments to the \n-      <link linkend=\"ref_guide_mapping_mappingtool\"><literal>\n-      mappingtool</literal></link>.\n-      </para>\n-          <para>  \n-      The mapping tool task accepts a nested \n-      <literal>fileset</literal> tag to specify the files that should be \n-      processed. You can specify \n-      <filename>.java</filename> or <filename>.class</filename> files.\n-      If you do not specify any files, the task will run on the classes \n-      listed in your <link linkend=\"openjpa.MetaDataFactory\"><literal>\n-      openjpa.MetaDataFactory</literal></link> property.\n-      </para>\n-          <para>\n-      Following is an example of a <filename>build.xml</filename>\n-      target that invokes the mapping tool:\n-      </para>\n-          <example id=\"ref_guide_integration_mappingtool_task\">\n-            <title>Invoking the Mapping Tool from Ant</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Mapping Tool Ant Task\n+            </title>\n+            <indexterm zone=\"ref_guide_integration_mappingtool\">\n+                <primary>\n+                    Ant\n+                </primary>\n+                <secondary>\n+                    mapping tool task\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_integration_mappingtool\">\n+                <primary>\n+                    mapping tool\n+                </primary>\n+                <secondary>\n+                    Ant task\n+                </secondary>\n+            </indexterm>\n+            <para>\n+The mapping tool task allows you to directly invoke the mapping tool from within\n+the Ant build process. It is useful for making sure that the database schema and\n+object-relational mapping data is always synchronized with your persistent class\n+definitions, without needing to remember to invoke the mapping tool manually.\n+The task's parameters correspond exactly to the long versions of the\n+command-line arguments to the <link linkend=\"ref_guide_mapping_mappingtool\">\n+<literal> mappingtool</literal></link>.\n+            </para>\n+            <para>\n+The mapping tool task accepts a nested <literal>fileset</literal> tag to specify\n+the files that should be processed. You can specify <filename>.java</filename>\n+or <filename>.class</filename> files. If you do not specify any files, the task\n+will run on the classes listed in your <link linkend=\"openjpa.MetaDataFactory\">\n+<literal> openjpa.MetaDataFactory</literal></link> property.\n+            </para>\n+            <para>\n+Following is an example of a <filename>build.xml</filename> target that invokes\n+the mapping tool:\n+            </para>\n+            <example id=\"ref_guide_integration_mappingtool_task\">\n+                <title>\n+                    Invoking the Mapping Tool from Ant\n+                </title>\n+<programlisting>\n &lt;target name=\"refresh\"&gt;\n   &lt;!-- define the mappingtool task; this can be done at the top of --&gt;\n   &lt;!-- the build.xml file, so it will be available for all targets --&gt;\n@@ -325,34 +362,45 @@\n   &lt;/mappingtool&gt;\n &lt;/target&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_integration_revmappingtool\">\n-          <title>Reverse Mapping Tool Ant Task</title>\n-          <indexterm zone=\"ref_guide_integration_revmappingtool\">\n-            <primary>Ant</primary>\n-            <secondary>reverse mapping tool task</secondary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_integration_revmappingtool\">\n-            <primary>reverse mapping tool</primary>\n-            <secondary>Ant task</secondary>\n-          </indexterm>\n-          <para>\n-      The reverse mapping tool task allows you to directly invoke the\n-      reverse mapping tool from within Ant.  While many users will only \n-      run the reverse mapping process once, others will make it part of \n-      their build process.  The task's parameters correspond exactly to \n-      the long versions of the command-line arguments to the \n-      <link linkend=\"ref_guide_pc_reverse_reversemappingtool\"><literal>\n-      reversemappingtool</literal></link>.\n-      </para>\n-          <para>\n-      Following is an example of a <filename>build.xml</filename>\n-      target that invokes the reverse mapping tool:\n-      </para>\n-          <example id=\"ref_guide_integration_revmappingtool_task\">\n-            <title>Invoking the Reverse Mapping Tool from Ant</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Reverse Mapping Tool Ant Task\n+            </title>\n+            <indexterm zone=\"ref_guide_integration_revmappingtool\">\n+                <primary>\n+                    Ant\n+                </primary>\n+                <secondary>\n+                    reverse mapping tool task\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_integration_revmappingtool\">\n+                <primary>\n+                    reverse mapping tool\n+                </primary>\n+                <secondary>\n+                    Ant task\n+                </secondary>\n+            </indexterm>\n+            <para>\n+The reverse mapping tool task allows you to directly invoke the reverse mapping\n+tool from within Ant. While many users will only run the reverse mapping process\n+once, others will make it part of their build process. The task's parameters\n+correspond exactly to the long versions of the command-line arguments to the\n+<link linkend=\"ref_guide_pc_reverse_reversemappingtool\"><literal>\n+reversemappingtool</literal></link>.\n+            </para>\n+            <para>\n+Following is an example of a <filename>build.xml</filename> target that invokes\n+the reverse mapping tool:\n+            </para>\n+            <example id=\"ref_guide_integration_revmappingtool_task\">\n+                <title>\n+                    Invoking the Reverse Mapping Tool from Ant\n+                </title>\n+<programlisting>\n &lt;target name=\"reversemap\"&gt;\n   &lt;!-- define the reversemappingtool task; this can be done at the top of --&gt;\n   &lt;!-- the build.xml file, so it will be available for all targets        --&gt;\n@@ -366,33 +414,44 @@\n   &lt;/reversemappingtool&gt;\n &lt;/target&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n         <section id=\"ref_guide_integration_schematool\">\n-          <title>Schema Tool Ant Task</title>\n-          <indexterm zone=\"ref_guide_integration_schematool\">\n-            <primary>Ant</primary>\n-            <secondary>schema tool task</secondary>\n-          </indexterm>\n-          <indexterm zone=\"ref_guide_integration_schematool\">\n-            <primary>schema tool</primary>\n-            <secondary>Ant task</secondary>\n-          </indexterm>\n-          <para>\n-      The schema tool task allows you to directly invoke the\n-      schema tool from within the Ant build process.\n-      The task's parameters correspond exactly to the long versions\n-      of the command-line arguments to the \n-      <link linkend=\"ref_guide_schema_schematool\"><literal>\n-      schematool</literal></link>.\n-      </para>\n-          <para>\n-      Following is an example of a <filename>build.xml</filename>\n-      target that invokes the schema tool:\n-      </para>\n-          <example id=\"ref_guide_integration_schematool_task\">\n-            <title>Invoking the Schema Tool from Ant</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Schema Tool Ant Task\n+            </title>\n+            <indexterm zone=\"ref_guide_integration_schematool\">\n+                <primary>\n+                    Ant\n+                </primary>\n+                <secondary>\n+                    schema tool task\n+                </secondary>\n+            </indexterm>\n+            <indexterm zone=\"ref_guide_integration_schematool\">\n+                <primary>\n+                    schema tool\n+                </primary>\n+                <secondary>\n+                    Ant task\n+                </secondary>\n+            </indexterm>\n+            <para>\n+The schema tool task allows you to directly invoke the schema tool from within\n+the Ant build process. The task's parameters correspond exactly to the long\n+versions of the command-line arguments to the\n+<link linkend=\"ref_guide_schema_schematool\"><literal> schematool</literal>\n+</link>.\n+            </para>\n+            <para>\n+Following is an example of a <filename>build.xml</filename> target that invokes\n+the schema tool:\n+            </para>\n+            <example id=\"ref_guide_integration_schematool_task\">\n+                <title>\n+                    Invoking the Schema Tool from Ant\n+                </title>\n+<programlisting>\n &lt;target name=\"schema\"&gt;\n   &lt;!-- define the schematool task; this can be done at the top of  --&gt;\n   &lt;!-- the build.xml file, so it will be available for all targets --&gt;\n@@ -407,13 +466,17 @@\n   &lt;/schematool&gt;\n &lt;/target&gt;\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n-      </section>\n-      <section id=\"ref_guide_integration_maven\">\n-        <title>Maven</title>\n+    </section>\n+    <section id=\"ref_guide_integration_maven\">\n+        <title>\n+            Maven\n+        </title>\n         <indexterm zone=\"ref_guide_integration_maven\">\n-          <primary>Maven</primary>\n+            <primary>\n+                Maven\n+            </primary>\n         </indexterm>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"8ed4ffb4ea4772da1000665be7b617ad1ea5c7f6","filename":"openjpa-project/src/doc/manual/ref_guide_intro.xml","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_intro.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_intro.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_intro.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,28 +1,30 @@\n-\n-    <chapter id=\"ref_guide_intro\">\n-      <title>Introduction</title>\n-      <para>\n-  OpenJPA <phrase>JPA</phrase> is a JDBC-based implementation of the JPA \n-  standard.  This document is a reference for the \n-  configuration and use of OpenJPA <phrase>JPA</phrase>. \n-  </para>\n-      <section id=\"ref_guide_intro_audience\">\n-        <title>Intended Audience</title>\n-        <para>\n-    This document is intended for OpenJPA <phrase>JPA</phrase> developers.  It \n-    assumes strong knowledge of Java, familiarity with the eXtensible \n-    Markup Language (XML), and an understanding of JPA.\n-    If you are not familiar with JPA, please read the\n-    <link linkend=\"jpa_overview_intro\">JPA Overview</link> \n-    before proceeding.  We also strongly recommend taking OpenJPA's hands-on \n-    <link linkend=\"tutorials\">tutorials</link> to get comfortable \n-    with OpenJPA basics.\n+<chapter id=\"ref_guide_intro\">\n+    <title>\n+        Introduction\n+    </title>\n+    <para>\n+OpenJPA <phrase>JPA</phrase> is a JDBC-based implementation of the JPA standard.\n+This document is a reference for the configuration and use of OpenJPA <phrase>\n+JPA</phrase>.\n     </para>\n+    <section id=\"ref_guide_intro_audience\">\n+        <title>\n+            Intended Audience\n+        </title>\n         <para>\n-    Certain sections of this guide cover advanced topics such as\n-    custom object-relational mapping, enterprise integration, and using\n-    OpenJPA with third-party tools.  These sections assume prior experience \n-    with the relevant subject.\n-    </para>\n-      </section>\n-    </chapter>\n+This document is intended for OpenJPA <phrase>JPA</phrase> developers. It\n+assumes strong knowledge of Java, familiarity with the eXtensible Markup\n+Language (XML), and an understanding of JPA. If you are not familiar with JPA,\n+please read the <link linkend=\"jpa_overview_intro\">JPA Overview</link> before\n+proceeding. We also strongly recommend taking OpenJPA's hands-on\n+<link linkend=\"tutorials\">tutorials</link> to get comfortable with OpenJPA\n+basics.\n+        </para>\n+        <para>\n+Certain sections of this guide cover advanced topics such as custom\n+object-relational mapping, enterprise integration, and using OpenJPA with\n+third-party tools. These sections assume prior experience with the relevant\n+subject.\n+        </para>\n+    </section>\n+</chapter>"},{"sha":"529d60101b7a735f2ef1ff9bf85b805e0de7ad2e","filename":"openjpa-project/src/doc/manual/ref_guide_logging.xml","status":"modified","additions":425,"deletions":304,"changes":729,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_logging.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_logging.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_logging.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,267 +1,371 @@\n-\n-    <chapter id=\"ref_guide_logging\">\n-      <title>Logging</title>\n-      <indexterm zone=\"ref_guide_logging\">\n-        <primary>logging</primary>\n-      </indexterm>\n-      <indexterm zone=\"ref_guide_logging\">\n-        <primary>Log</primary>\n-      </indexterm>\n-      <para>\n-  Logging is an important means of gaining insight into your application's\n-  runtime behavior.  OpenJPA\n-  provides a flexible logging system that integrates with many\n-  existing runtime systems, such as application servers and servlet\n-  runners.\n-  </para>\n-      <para>\n-  There are four built-in logging plugins: a \n-  <link linkend=\"ref_guide_logging_openjpa\">default logging framework</link>\n-  that covers most needs, a <link linkend=\"ref_guide_logging_log4j\">\n-  Log4J</link> delegate, an <link linkend=\"ref_guide_logging_commons\">\n-  Apache Commons Logging</link> delegate, and a \n-  <link linkend=\"ref_guide_logging_noop\">no-op</link> implementation for\n-  disabling logging.\n-  </para>\n-      <warning>\n-        <para>\n-    Logging can have a negative impact on performance. Disable\n-    verbose logging (such as logging of SQL statements) before\n-    running any performance tests. It is advisable to limit or\n-    disable logging for a production system. You can\n-    disable logging altogether by setting\n-    the <literal>openjpa.Log</literal> property\n-    to <literal>none</literal>.\n+<chapter id=\"ref_guide_logging\">\n+    <title>\n+        Logging\n+    </title>\n+    <indexterm zone=\"ref_guide_logging\">\n+        <primary>\n+            logging\n+        </primary>\n+    </indexterm>\n+    <indexterm zone=\"ref_guide_logging\">\n+        <primary>\n+            Log\n+        </primary>\n+    </indexterm>\n+    <para>\n+Logging is an important means of gaining insight into your application's runtime\n+behavior. OpenJPA provides a flexible logging system that integrates with many\n+existing runtime systems, such as application servers and servlet runners.\n     </para>\n-      </warning>\n-      <section id=\"ref_guide_logging_channels\">\n-        <title>Logging Channels</title>\n+    <para>\n+There are four built-in logging plugins: a\n+<link linkend=\"ref_guide_logging_openjpa\">default logging framework</link> that\n+covers most needs, a <link linkend=\"ref_guide_logging_log4j\"> Log4J</link>\n+delegate, an <link linkend=\"ref_guide_logging_commons\"> Apache Commons Logging\n+</link> delegate, and a <link linkend=\"ref_guide_logging_noop\">no-op</link>\n+implementation for disabling logging.\n+    </para>\n+    <warning>\n+        <para>\n+Logging can have a negative impact on performance. Disable verbose logging (such\n+as logging of SQL statements) before running any performance tests. It is\n+advisable to limit or disable logging for a production system. You can disable\n+logging altogether by setting the <literal>openjpa.Log</literal> property to\n+<literal>none</literal>.\n+        </para>\n+    </warning>\n+    <section id=\"ref_guide_logging_channels\">\n+        <title>\n+            Logging Channels\n+        </title>\n         <indexterm zone=\"ref_guide_logging_channels\">\n-          <primary>logging</primary>\n-          <secondary>channels</secondary>\n+            <primary>\n+                logging\n+            </primary>\n+            <secondary>\n+                channels\n+            </secondary>\n         </indexterm>\n         <para>\n-    Logging is done over a number of <emphasis>logging channels</emphasis>,\n-    each of which has a <emphasis>logging level</emphasis> which controls\n-    the verbosity of log messages recorded for the channel.  OpenJPA uses\n-    the following logging channels:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para><literal>openjpa.Tool</literal>: Messages issued by the OpenJPA\n-        command line and Ant tools.  Most messages\n-        are basic statements detailing which classes or files the \n-        tools are running on.  Detailed output is only available via\n-        the logging category the tool belongs to, such as \n-        <literal>openjpa.Enhance</literal> for the enhancer\n-        (see <xref linkend=\"ref_guide_pc_enhance\"/>) or\n-        <literal>openjpa.MetaData</literal> for the mapping tool\n-        (see <xref linkend=\"ref_guide_mapping_mappingtool\"/>).\n-        This logging category is provided so that you can\n-        get a general idea of what a tool is doing without having to\n-        manipulate logging settings that might also affect runtime\n-        behavior.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>configuration</primary><secondary>log messages</secondary></indexterm><literal>openjpa.Configuration</literal>: Messages issued\n-        by the configuration framework.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>enhancement</primary><secondary>log messages</secondary></indexterm><literal>openjpa.Enhance</literal>: Messages pertaining to\n-        enhancement and runtime class generation.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>metadata</primary><secondary>log messages</secondary></indexterm><literal>openjpa.MetaData</literal>: Details about the generation \n-        of metadata and object-relational mappings.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>openjpa.Runtime</literal>: General OpenJPA runtime messages.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>Query</primary><secondary>log messages</secondary></indexterm><literal>openjpa.Query</literal>: Messages about queries.\n-        Query strings and any parameter values, if applicable, will be \n-        logged to the <literal>TRACE</literal> level at execution\n-        time. Information about possible performance concerns\n-        will be logged to the <literal>INFO</literal> level.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>remote</primary><secondary>log messages</secondary></indexterm><literal>openjpa.Remote</literal>: Remote connection and execution\n-        messages.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>caching</primary><secondary>log messages</secondary></indexterm><literal>openjpa.DataCache</literal>: Messages from the L2 data \n-        cache plugins.\n+Logging is done over a number of <emphasis>logging channels</emphasis>, each of\n+which has a <emphasis>logging level</emphasis> which controls the verbosity of\n+log messages recorded for the channel. OpenJPA uses the following logging\n+channels:\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>JDBC</primary><secondary>log messages</secondary></indexterm><literal>openjpa.jdbc.JDBC</literal>: JDBC connection information.\n-        General JDBC information will be logged to the <literal>TRACE\n-        </literal> level.  Information about possible performance \n-        concerns will be logged to the <literal>INFO</literal> level.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>SQL</primary><secondary>log messages</secondary></indexterm><literal>openjpa.jdbc.SQL</literal>: This is the most common \n-        logging channel to use.  Detailed information about the \n-        execution of SQL statements will be sent to the \n-        <literal>TRACE</literal> level.  It is useful to enable this \n-        channel if you are curious about the exact SQL that OpenJPA \n-        issues to the datastore.\n-        </para>\n-            <para>\n-        When using the built-in OpenJPA logging facilities, you can \n-        enable SQL logging by adding <literal>SQL=TRACE</literal> to\n-        your <literal>openjpa.Log</literal> property.\n-        </para>\n-            <para>\n-        OpenJPA can optionally reformat the logged SQL to\n-        make it easier to read. To enable pretty-printing,\n-        add <literal>PrettyPrint=true</literal> to the\n-        <link linkend=\"openjpa.ConnectionFactoryProperties\"><literal>\n-        openjpa.ConnectionFactoryProperties</literal></link>\n-        property. You can control how many columns wide the\n-        pretty-printed SQL will be with the \n-        <literal>PrettyPrintLineLength</literal> property. The default \n-        line length is 60 columns.</para>\n-            <para>\n-        While pretty printing makes things easier to read, it can make \n-        output harder to process with tools like grep.\n-        </para>\n-            <para>\n-        Pretty-printing properties configuration might look like so:\n-        </para>\n-            <programlisting format=\"linespecific\">\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+<literal>openjpa.Tool</literal>: Messages issued by the OpenJPA command line\n+and Ant tools. Most messages are basic statements detailing which classes or\n+files the tools are running on. Detailed output is only available via the\n+logging category the tool belongs to, such as <literal>openjpa.Enhance</literal>\n+for the enhancer (see <xref linkend=\"ref_guide_pc_enhance\"></xref>) or <literal>\n+openjpa.MetaData</literal> for the mapping tool (see\n+<xref linkend=\"ref_guide_mapping_mappingtool\"></xref> ). This logging category\n+is provided so that you can get a general idea of what a tool is doing without\n+having to manipulate logging settings that might also affect runtime behavior.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        configuration\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.Configuration</literal>: Messages issued by the configuration\n+framework.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        enhancement\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.Enhance</literal>: Messages pertaining to enhancement and\n+runtime class generation.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.MetaData</literal>: Details about the generation of metadata\n+and object-relational mappings.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>openjpa.Runtime</literal>: General OpenJPA runtime messages.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        Query\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.Query</literal>: Messages about queries. Query strings and any\n+parameter values, if applicable, will be logged to the <literal>TRACE</literal>\n+level at execution time. Information about possible performance concerns will be\n+logged to the <literal>INFO</literal> level.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        remote\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.Remote</literal>: Remote connection and execution messages.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        caching\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.DataCache</literal>: Messages from the L2 data cache plugins.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        JDBC\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.jdbc.JDBC</literal>: JDBC connection information. General JDBC\n+information will be logged to the <literal>TRACE</literal> level. Information\n+about possible performance concerns will be logged to the <literal>INFO\n+</literal> level.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        SQL\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.jdbc.SQL</literal>: This is the most common logging channel to\n+use. Detailed information about the execution of SQL statements will be sent to\n+the <literal>TRACE</literal> level. It is useful to enable this channel if you\n+are curious about the exact SQL that OpenJPA issues to the datastore.\n+                </para>\n+                <para>\n+When using the built-in OpenJPA logging facilities, you can enable SQL logging\n+by adding <literal>SQL=TRACE</literal> to your <literal>openjpa.Log</literal>\n+property.\n+                </para>\n+                <para>\n+OpenJPA can optionally reformat the logged SQL to make it easier to read. To\n+enable pretty-printing, add <literal>PrettyPrint=true</literal> to the\n+<link linkend=\"openjpa.ConnectionFactoryProperties\"><literal>\n+openjpa.ConnectionFactoryProperties</literal></link> property. You can control\n+how many columns wide the pretty-printed SQL will be with the <literal>\n+PrettyPrintLineLength</literal> property. The default line length is 60 columns.\n+                </para>\n+                <para>\n+While pretty printing makes things easier to read, it can make output harder to\n+process with tools like grep.\n+                </para>\n+                <para>\n+Pretty-printing properties configuration might look like so:\n+                </para>\n+<programlisting>\n &lt;property name=\"openjpa.Log\" value=\"SQL=TRACE\"/&gt;\n &lt;property name=\"openjpa.ConnectionFactoryProperties\" \n     value=\"MaxActive=100, PrettyPrint=true, PrettyPrintLineLength=72\"/&gt;\n </programlisting>\n-          </listitem>\n-          <listitem>\n-            <para><indexterm><primary>schema</primary><secondary>log messages</secondary></indexterm><literal>openjpa.jdbc.Schema</literal>: Details about operations \n-        on the database schema.\n-        </para>\n-          </listitem>\n+            </listitem>\n+            <listitem>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        schema\n+                    </primary>\n+                    <secondary>\n+                        log messages\n+                    </secondary>\n+                </indexterm>\n+<literal>openjpa.jdbc.Schema</literal>: Details about operations on the\n+database schema.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n-      </section>\n-      <section id=\"ref_guide_logging_openjpa\">\n-        <title>OpenJPA Logging</title>\n+    </section>\n+    <section id=\"ref_guide_logging_openjpa\">\n+        <title>\n+            OpenJPA Logging\n+        </title>\n         <indexterm zone=\"ref_guide_logging_openjpa\">\n-          <primary>logging</primary>\n-          <secondary>default</secondary>\n+            <primary>\n+                logging\n+            </primary>\n+            <secondary>\n+                default\n+            </secondary>\n         </indexterm>\n         <para>\n-    By default, OpenJPA uses a basic logging framework with the following\n-    output format:\n-    </para>\n-        <para><literal>millis</literal><literal>level</literal>  [<literal>thread name</literal>] <literal>channel</literal> - <literal>message</literal></para>\n+By default, OpenJPA uses a basic logging framework with the following output\n+format:\n+        </para>\n         <para>\n-    For example, when loading an application that uses OpenJPA, a message \n-    like the following will be sent to the <literal>openjpa.Runtime</literal>\n-    channel:\n-    </para>\n-        <programlisting format=\"linespecific\">\n+<literal>millis</literal><literal>level</literal> [ <literal>thread name\n+</literal> ] <literal>channel</literal> - <literal>message</literal>\n+        </para>\n+        <para>\n+For example, when loading an application that uses OpenJPA, a message like the\n+following will be sent to the <literal>openjpa.Runtime</literal> channel:\n+        </para>\n+<programlisting>\n 2107  INFO   [main] openjpa.Runtime - Starting OpenJPA 4.0.0\n </programlisting>\n         <para>\n-    The default logging system accepts the following parameters:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para><literal>File</literal>: The name of the file to log to, or\n-        <literal>stdout</literal> or <literal>stderr</literal> to send\n-        messages to standard out and standard error, respectively.\n-        By default, OpenJPA sends log messages to standard error.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>DefaultLevel</literal>: The default logging level of\n-        unconfigured channels.  Recognized values are <literal>\n-        TRACE, DEBUG, INFO, WARN,</literal> and <literal>ERROR\n-        </literal>.  Defaults to <literal>INFO</literal>.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>DiagnosticContext</literal>: A string that will \n-        be prepended to all log messages.\n+The default logging system accepts the following parameters:\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>&lt;channel&gt;</literal>: Using the last token of\n-        the <link linkend=\"ref_guide_logging_channels\">logging channel \n-        </link> name, you can configure the log level to\n-        use for that channel.  See the examples below.\n-        </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+<literal>File</literal>: The name of the file to log to, or <literal>stdout\n+</literal> or <literal>stderr</literal> to send messages to standard out and\n+standard error, respectively. By default, OpenJPA sends log messages to standard\n+error.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>DefaultLevel</literal>: The default logging level of unconfigured\n+channels. Recognized values are <literal> TRACE, DEBUG, INFO, WARN,</literal>\n+and <literal>ERROR</literal>. Defaults to <literal>INFO</literal>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>DiagnosticContext</literal>: A string that will be prepended to all\n+log messages.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>&lt;channel&gt;</literal>: Using the last token of the\n+<link linkend=\"ref_guide_logging_channels\">logging channel</link> name, you can\n+configure the log level to use for that channel. See the examples below.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <example id=\"ref_guide_logging_openjpa_std_ex\">\n-          <title>Standard OpenJPA Log Configuration</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Standard OpenJPA Log Configuration\n+            </title>\n+<programlisting>\n &lt;property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Runtime=INFO, Tool=INFO\"/&gt;\n </programlisting>\n         </example>\n         <example id=\"ref_guide_logging_openjpa_sql_ex\">\n-          <title>Standard OpenJPA Log Configuration + All SQL Statements</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Standard OpenJPA Log Configuration + All SQL Statements\n+            </title>\n+<programlisting>\n &lt;property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Runtime=INFO, Tool=INFO, SQL=TRACE\"/&gt;\n </programlisting>\n         </example>\n         <example id=\"ref_guide_logging_openjpa_file\">\n-          <title>Logging to a File</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Logging to a File\n+            </title>\n+<programlisting>\n &lt;property name=\"openjpa.Log\" value=\"File=/tmp/org.apache.openjpa.log, DefaultLevel=WARN, Runtime=INFO, Tool=INFO\"/&gt;\n </programlisting>\n         </example>\n-      </section>\n-      <section id=\"ref_guide_logging_noop\">\n-        <title>Disabling Logging</title>\n+    </section>\n+    <section id=\"ref_guide_logging_noop\">\n+        <title>\n+            Disabling Logging\n+        </title>\n         <indexterm zone=\"ref_guide_logging_noop\">\n-          <primary>logging</primary>\n-          <secondary>disabling</secondary>\n+            <primary>\n+                logging\n+            </primary>\n+            <secondary>\n+                disabling\n+            </secondary>\n         </indexterm>\n         <para>\n-    Disabling logging can be useful to analyze performance without\n-    any I/O overhead or to reduce verbosity at the console. To do\n-    this, set the <literal>openjpa.Log</literal> property\n-    to <literal>none</literal>.\n-    </para>\n+Disabling logging can be useful to analyze performance without any I/O overhead\n+or to reduce verbosity at the console. To do this, set the <literal>openjpa.Log\n+</literal> property to <literal>none</literal>.\n+        </para>\n         <para>\n-    Disabling logging permanently, however, will cause all warnings\n-    to be consumed.  We recommend using one of the\n-    more sophisticated mechanisms described in this chapter.\n-    </para>\n-      </section>\n-      <section id=\"ref_guide_logging_log4j\">\n-        <title>Log4J</title>\n+Disabling logging permanently, however, will cause all warnings to be consumed.\n+We recommend using one of the more sophisticated mechanisms described in this\n+chapter.\n+        </para>\n+    </section>\n+    <section id=\"ref_guide_logging_log4j\">\n+        <title>\n+            Log4J\n+        </title>\n         <indexterm zone=\"ref_guide_logging_log4j\">\n-          <primary>logging</primary>\n-          <secondary>Log4j</secondary>\n+            <primary>\n+                logging\n+            </primary>\n+            <secondary>\n+                Log4j\n+            </secondary>\n         </indexterm>\n         <para>\n-    When <literal>openjpa.Log</literal> is set\n-    to <literal>log4j</literal>, OpenJPA will delegate to Log4J for logging.\n-    In a standalone application, Log4J logging levels are\n-    controlled by a resource named <filename>log4j.properties</filename>, \n-    which should be available as a top-level resource (either at the top \n-    level of a jar file, or in the root of one of\n-    the <literal>CLASSPATH</literal> directories). When deploying to\n-    a web or EJB application server, Log4J configuration is often\n-    performed in a <filename>log4j.xml</filename> file instead of a\n-    properties file. For further details on configuring Log4J,\n-    please see the \n-    <ulink url=\"http://jakarta.apache.org/log4j/docs/manual.html\">Log4J\n-    Manual</ulink>. We present an example \n-    <filename>log4j.properties</filename> file below.\n-    </para>\n+When <literal>openjpa.Log</literal> is set to <literal>log4j</literal>, OpenJPA\n+will delegate to Log4J for logging. In a standalone application, Log4J logging\n+levels are controlled by a resource named <filename>log4j.properties</filename>\n+, which should be available as a top-level resource (either at the top level of\n+a jar file, or in the root of one of the <literal>CLASSPATH</literal>\n+directories). When deploying to a web or EJB application server, Log4J\n+configuration is often performed in a <filename>log4j.xml</filename> file\n+instead of a properties file. For further details on configuring Log4J, please\n+see the <ulink url=\"http://jakarta.apache.org/log4j/docs/manual.html\">Log4J\n+Manual</ulink>. We present an example <filename>log4j.properties</filename> file\n+below.\n+        </para>\n         <example id=\"ref_guide_logging_log4j_ex\">\n-          <title>Standard Log4J Logging</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Standard Log4J Logging\n+            </title>\n+<programlisting>\n log4j.rootCategory=WARN, console\n log4j.category.openjpa.Tool=INFO\n log4j.category.openjpa.Runtime=INFO\n@@ -277,61 +381,70 @@ log4j.category.openjpa.jdbc.Schema=WARN\n log4j.appender.console=org.apache.log4j.ConsoleAppender\n </programlisting>\n         </example>\n-      </section>\n-      <section id=\"ref_guide_logging_commons\">\n-        <title>Apache Commons Logging</title>\n+    </section>\n+    <section id=\"ref_guide_logging_commons\">\n+        <title>\n+            Apache Commons Logging\n+        </title>\n         <indexterm zone=\"ref_guide_logging_commons\">\n-          <primary>logging</primary>\n-          <secondary>Apache Commons</secondary>\n+            <primary>\n+                logging\n+            </primary>\n+            <secondary>\n+                Apache Commons\n+            </secondary>\n         </indexterm>\n         <para>\n-    Set the <literal>openjpa.Log</literal> property to <literal>commons\n-    </literal> to use the\n-    <ulink url=\"http://jakarta.apache.org/commons/logging.html\">\n-    Apache Jakarta Commons Logging</ulink> thin library for issuing\n-    log messages. The Commons Logging libraries act as a wrapper\n-    around a number of popular logging APIs, including the\n-    <ulink url=\"http://jakarta.apache.org/log4j/docs/index.html\">\n-    Jakarta Log4J</ulink> project, and the native\n-    <ulink url=\"http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html\">\n-    java.util.logging</ulink> package in JDK 1.4.  If neither of these\n-    libraries are available, then logging will fall back to using simple \n-    console logging.\n-    </para>\n+Set the <literal>openjpa.Log</literal> property to <literal>commons</literal> to\n+use the <ulink url=\"http://jakarta.apache.org/commons/logging.html\"> Apache\n+Jakarta Commons Logging</ulink> thin library for issuing log messages. The\n+Commons Logging libraries act as a wrapper around a number of popular logging\n+APIs, including the\n+<ulink url=\"http://jakarta.apache.org/log4j/docs/index.html\"> Jakarta Log4J\n+</ulink> project, and the native\n+<ulink url=\"http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html\">\n+java.util.logging</ulink> package in JDK 1.4. If neither of these libraries are\n+available, then logging will fall back to using simple console logging.\n+        </para>\n         <para>\n-    When using the Commons Logging framework in conjunction with\n-    Log4J, configuration will be the same as was discussed in the\n-    Log4J section above.\n-    </para>\n+When using the Commons Logging framework in conjunction with Log4J,\n+configuration will be the same as was discussed in the Log4J section above.\n+        </para>\n         <section id=\"ref_guide_logging_jdk14\">\n-          <title>JDK 1.4 java.util.logging</title>\n-          <indexterm zone=\"ref_guide_logging_jdk14\">\n-            <primary>logging</primary>\n-            <secondary>JDK 1.4</secondary>\n-          </indexterm>\n-          <para>\n-      When using JDK 1.4 or higher in conjunction with OpenJPA's\n-      Commons Logging support, logging will proceed through Java's\n-      built-in logging provided by the\n-      <ulink url=\"http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html\">\n-      java.util.logging</ulink> package. For details on\n-      configuring the built-in logging system, please see the\n-      <ulink url=\"http://java.sun.com/j2se/1.4/docs/guide/util/logging/overview.html\">\n-      Java Logging Overview</ulink>.\n-      </para>\n-          <para>\n-      By default, JDK 1.4's logging package looks in\n-      the <filename> JAVA_HOME/lib/logging.properties</filename>\n-      file for logging configuration. This can be overridden with\n-      the <literal> java.util.logging.config.file</literal> system\n-      property. For example:\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                JDK 1.4 java.util.logging\n+            </title>\n+            <indexterm zone=\"ref_guide_logging_jdk14\">\n+                <primary>\n+                    logging\n+                </primary>\n+                <secondary>\n+                    JDK 1.4\n+                </secondary>\n+            </indexterm>\n+            <para>\n+When using JDK 1.4 or higher in conjunction with OpenJPA's Commons Logging\n+support, logging will proceed through Java's built-in logging provided by the\n+<ulink url=\"http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html\">\n+java.util.logging</ulink> package. For details on configuring the built-in\n+logging system, please see the\n+<ulink url=\"http://java.sun.com/j2se/1.4/docs/guide/util/logging/overview.html\">\n+Java Logging Overview</ulink>.\n+            </para>\n+            <para>\n+By default, JDK 1.4's logging package looks in the <filename>\n+JAVA_HOME/lib/logging.properties</filename> file for logging configuration. This\n+can be overridden with the <literal> java.util.logging.config.file</literal>\n+system property. For example:\n+            </para>\n+<programlisting>\n java -Djava.util.logging.config.file=mylogging.properties com.company.MyClass\n </programlisting>\n-          <example id=\"ref_guide_logging_jdk14_propfile\">\n-            <title>JDK 1.4 Log Properties</title>\n-            <programlisting format=\"linespecific\">\n+            <example id=\"ref_guide_logging_jdk14_propfile\">\n+                <title>\n+                    JDK 1.4 Log Properties\n+                </title>\n+<programlisting>\n # specify the handlers to create in the root logger\n # (all loggers are children of the root logger)\n # the following creates two handlers\n@@ -361,30 +474,38 @@ openjpa.jdbc.SQL.level=INFO\n openjpa.jdbc.JDBC.level=INFO\n openjpa.jdbc.Schema.level=INFO\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n-      </section>\n-      <section id=\"ref_guide_logging_custom\">\n-        <title>Custom Log</title>\n+    </section>\n+    <section id=\"ref_guide_logging_custom\">\n+        <title>\n+            Custom Log\n+        </title>\n         <indexterm zone=\"ref_guide_logging_custom\">\n-          <primary>logging</primary>\n-          <secondary>custom</secondary>\n+            <primary>\n+                logging\n+            </primary>\n+            <secondary>\n+                custom\n+            </secondary>\n         </indexterm>\n         <para>\n-    If none of available logging systems meet your needs, you can configure\n-    the logging system with a custom logger.  You might use\n-    custom logging to integrate with a proprietary logging framework used \n-    by some applications servers, or for logging to a graphical component \n-    for GUI applications.\n-    </para>\n+If none of available logging systems meet your needs, you can configure the\n+logging system with a custom logger. You might use custom logging to integrate\n+with a proprietary logging framework used by some applications servers, or for\n+logging to a graphical component for GUI applications.\n+        </para>\n         <para>\n-    A custom logging framework must include an implementation of the\n-    <ulink url=\"../apidocs/org/apache/openjpa/lib/log/LogFactory.html\"><classname>org.apache.openjpa.lib.log.LogFactory</classname></ulink> interface.\n-    We present a custom <classname>LogFactory</classname> below.\n-    </para>\n+A custom logging framework must include an implementation of the\n+<ulink url=\"../apidocs/org/apache/openjpa/lib/log/LogFactory.html\"><classname>\n+org.apache.openjpa.lib.log.LogFactory</classname></ulink> interface. We present\n+a custom <classname>LogFactory</classname> below.\n+        </para>\n         <example id=\"ref_guide_logging_custom_ex\">\n-          <title>Custom Logging Class</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Custom Logging Class\n+            </title>\n+<programlisting>\n package com.xyz;\n \n import org.apache.openjpa.lib.log.*;\n@@ -420,20 +541,20 @@ public class CustomLogFactory\n             }\n         };\n     }\n-}</programlisting>\n+}\n+</programlisting>\n         </example>\n         <para>\n-    To make OpenJPA use your custom log factory, set the \n-    <link linkend=\"openjpa.Log\"><literal>openjpa.Log</literal></link> \n-    configuration property to your factory's full class name.  Because\n-    this property is a plugin property (see \n-    <xref linkend=\"ref_guide_conf_plugins\"/>), you can also pass parameters\n-    to your factory.  For example, to use the example factory above and\n-    set its prefix to \"LOG MSG\", you would set the \n-    <literal>openjpa.Log</literal> property to the following string:\n-    </para>\n-        <programlisting format=\"linespecific\">\n+To make OpenJPA use your custom log factory, set the\n+<link linkend=\"openjpa.Log\"><literal>openjpa.Log</literal></link> configuration\n+property to your factory's full class name. Because this property is a plugin\n+property (see <xref linkend=\"ref_guide_conf_plugins\"></xref> ), you can also\n+pass parameters to your factory. For example, to use the example factory above\n+and set its prefix to \"LOG MSG\", you would set the <literal>openjpa.Log\n+</literal> property to the following string:\n+        </para>\n+<programlisting>\n com.xyz.CustomLogFactory(Prefix=\"LOG MSG\")\n </programlisting>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"7d1f046dd5733fee0f84a9dd356dc11e9ae536aa","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":3044,"deletions":2673,"changes":5717,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"c1cd75d72ae8a41b37cf2bc5326351ff1f13e10a","filename":"openjpa-project/src/doc/manual/ref_guide_meta.xml","status":"modified","additions":996,"deletions":895,"changes":1891,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_meta.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,953 +1,1054 @@\n-\n-    <chapter id=\"ref_guide_meta\">\n-      <title>Metadata</title>\n-      <para>\n-  The JPA Overview covers JPA metadata in \n-  <xref linkend=\"jpa_overview_meta\"/>.\n-  This chapter discusses OpenJPA's extensions to standard JPA metadata.\n-  </para>\n-      <section id=\"ref_guide_meta_factory\">\n-        <title>Metadata Factory</title>\n+<chapter id=\"ref_guide_meta\">\n+    <title>\n+        Metadata\n+    </title>\n+    <para>\n+The JPA Overview covers JPA metadata in <xref linkend=\"jpa_overview_meta\">\n+</xref>. This chapter discusses OpenJPA's extensions to standard JPA metadata.\n+    </para>\n+    <section id=\"ref_guide_meta_factory\">\n+        <title>\n+            Metadata Factory\n+        </title>\n         <indexterm zone=\"ref_guide_meta_factory\">\n-          <primary>metadata</primary>\n-          <secondary>loading and storing</secondary>\n-          <see>MetaDataFactory</see>\n+            <primary>\n+                metadata\n+            </primary>\n+            <secondary>\n+                loading and storing\n+            </secondary>\n+            <see>\n+                MetaDataFactory\n+            </see>\n         </indexterm>\n         <para>\n-    The <link linkend=\"openjpa.MetaDataFactory\"><literal>openjpa.MetaDataFactory\n-    </literal></link> configuration property controls metadata loading and\n-    storing.  This property takes a plugin string (see \n-    <xref linkend=\"ref_guide_conf_plugins\"/>) describing\n-    a concrete <ulink url=\"../apidocs/org/apache/openjpa/meta/MetaDataFactory.html\"><classname>org.apache.openjpa.meta.MetaDataFactory</classname></ulink> implementation.\n-    A metadata factory can load mapping information as well as persistence \n-    metadata, or it can leave mapping information to a separate \n-    <emphasis>mapping factory</emphasis> (see \n-    <xref linkend=\"ref_guide_mapping_factory\"/>).  \n-    OpenJPA recognizes the following built-in metadata factories:\n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para><literal>jpa</literal>: Standard JPA metadata.  \n-        This is an alias for the \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistenceMetaDataFactory.html\"><classname>\n-        org.apache.openjpa.persistence.PersistenceMetaDataFactory</classname></ulink>.\n+The <link linkend=\"openjpa.MetaDataFactory\"><literal>openjpa.MetaDataFactory\n+</literal></link> configuration property controls metadata loading and storing.\n+This property takes a plugin string (see <xref linkend=\"ref_guide_conf_plugins\">\n+</xref>) describing a concrete\n+<ulink url=\"../apidocs/org/apache/openjpa/meta/MetaDataFactory.html\">\n+<classname>org.apache.openjpa.meta.MetaDataFactory</classname></ulink>\n+implementation. A metadata factory can load mapping information as well as\n+persistence metadata, or it can leave mapping information to a separate\n+<emphasis>mapping factory</emphasis> (see\n+<xref linkend=\"ref_guide_mapping_factory\"></xref> ). OpenJPA recognizes the\n+following built-in metadata factories:\n         </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+<literal>jpa</literal>: Standard JPA metadata. This is an alias for the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistenceMetaDataFactory.html\">\n+<classname> org.apache.openjpa.persistence.PersistenceMetaDataFactory\n+</classname></ulink>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <para>\n-    The standard metadata factories all accept the following properties for\n-    locating persistent classes.  Each property represents a different \n-    mechanism for locating persistent types; you can choose the mechanism or\n-    combination of mechanisms that are most convenient.  See \n-    <xref linkend=\"ref_guide_pc_pcclasses\"/> for a discussion of when it\n-    is necessary to list your persistent classes. \n-    </para>\n-        <itemizedlist>\n-          <listitem>\n-            <para><literal>Types</literal>: A semicolon-separated list of \n-        fully-qualified persistent class names.\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>Resources</literal>: A semicolon-separated list of\n-        resource paths to metadata files or jar archives.  \n-        Each jar archive will be scanned for \n-        <phrase>annotated JPA entities</phrase>\n-        \n-        \n-        .\n+The standard metadata factories all accept the following properties for locating\n+persistent classes. Each property represents a different mechanism for locating\n+persistent types; you can choose the mechanism or combination of mechanisms that\n+are most convenient. See <xref linkend=\"ref_guide_pc_pcclasses\"></xref> for a\n+discussion of when it is necessary to list your persistent classes.\n         </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>URLs</literal>: A semicolon-separated list of URLs\n-        of metadata files or jar archives.  \n-        Each jar archive will be scanned for \n-        <phrase>annotated JPA entities</phrase>\n-        \n-        \n-        .\n-        </para>\n-          </listitem>\n-          <listitem>\n-            <para><literal>ClasspathScan</literal>: A semicolon-separated list of\n-        directories or jar archives listed in your classpath.\n-        Each directory and jar archive will be scanned for \n-        <phrase>annotated JPA entities</phrase>\n-        \n-        \n-        .\n-        </para>\n-          </listitem>\n+        <itemizedlist>\n+            <listitem>\n+                <para>\n+<literal>Types</literal>: A semicolon-separated list of fully-qualified\n+persistent class names.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>Resources</literal>: A semicolon-separated list of resource paths to\n+metadata files or jar archives. Each jar archive will be scanned for <phrase>\n+annotated JPA entities</phrase>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>URLs</literal>: A semicolon-separated list of URLs of metadata files\n+or jar archives. Each jar archive will be scanned for <phrase>annotated JPA\n+entities</phrase>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+<literal>ClasspathScan</literal>: A semicolon-separated list of directories or\n+jar archives listed in your classpath. Each directory and jar archive will be\n+scanned for <phrase>annotated JPA entities</phrase>.\n+                </para>\n+            </listitem>\n         </itemizedlist>\n         <example id=\"ref_guide_meta_stdfactoryex\">\n-          <title>Setting a Standard Metadata Factory</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Setting a Standard Metadata Factory\n+            </title>\n+<programlisting>\n &lt;property name=\"openjpa.MetaDataFactory\" value=\"jpa\"/&gt;\n </programlisting>\n         </example>\n         <example id=\"ref_guide_meta_customfactoryex\">\n-          <title>Setting a Custom Metadata Factory</title>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Setting a Custom Metadata Factory\n+            </title>\n+<programlisting>\n &lt;property name=\"openjpa.MetaDataFactory\" value=\"com.xyz.CustomMetaDataFactory\"/&gt;\n </programlisting>\n         </example>\n-      </section>\n-      <section id=\"ref_guide_meta_ejb\">\n-        <title>Additional JPA Metadata</title>\n-        <indexterm zone=\"ref_guide_meta_ejb\">\n-          <primary>metadata</primary>\n-          <secondary>JPA additions</secondary>\n+    </section>\n+    <section id=\"ref_guide_meta_jpa\">\n+        <title>\n+            Additional JPA Metadata\n+        </title>\n+        <indexterm zone=\"ref_guide_meta_jpa\">\n+            <primary>\n+                metadata\n+            </primary>\n+            <secondary>\n+                JPA additions\n+            </secondary>\n         </indexterm>\n         <para>\n-    This section describes OpenJPA's core additions to standard entity\n-    metadata.  We present the object-relational mapping syntax to\n-    support these additions in <xref linkend=\"ref_guide_mapping_ejb\"/>.\n-    Finally, <xref linkend=\"ref_guide_meta_ext\"/> covers additional \n-    extensions to  JPA metadata that allow you to access auxiliary\n-    OpenJPA features.\n-    </para>\n+This section describes OpenJPA's core additions to standard entity metadata. We\n+present the object-relational mapping syntax to support these additions in\n+<xref linkend=\"ref_guide_mapping_jpa\"></xref>. Finally,\n+<xref linkend=\"ref_guide_meta_ext\"></xref> covers additional extensions to JPA\n+metadata that allow you to access auxiliary OpenJPA features.\n+        </para>\n         <section id=\"ref_guide_meta_jpa_datastoreid\">\n-          <title>Datastore Identity</title>\n-          <indexterm zone=\"ref_guide_meta_jpa_datastoreid\">\n-            <primary>identity</primary>\n-            <secondary>datastore</secondary>\n-          </indexterm>\n-          <para>\n-      JPA typically requires you to declare one or more\n-      <literal>Id</literal> fields to act as primary keys.  OpenJPA, however,\n-      can create and maintain a surrogate primary key value when you do\n-      not declare any <literal>Id</literal> fields.  This form of \n-      persistent identity is called <emphasis>datastore \n-      identity</emphasis>.  <xref linkend=\"ref_guide_pc_oid\"/> discusses \n-      OpenJPA's support for datastore identity in JPA.  We\n-      cover how to map your datastore identity primary key column in\n-      <xref linkend=\"ref_guide_mapping_jpa_datastoreid\"/>\n-      </para>\n+            <title>\n+                Datastore Identity\n+            </title>\n+            <indexterm zone=\"ref_guide_meta_jpa_datastoreid\">\n+                <primary>\n+                    identity\n+                </primary>\n+                <secondary>\n+                    datastore\n+                </secondary>\n+            </indexterm>\n+            <para>\n+JPA typically requires you to declare one or more <literal>Id</literal> fields\n+to act as primary keys. OpenJPA, however, can create and maintain a surrogate\n+primary key value when you do not declare any <literal>Id</literal> fields. This\n+form of persistent identity is called <emphasis>datastore identity</emphasis>.\n+<xref linkend=\"ref_guide_pc_oid\"></xref> discusses OpenJPA's support for\n+datastore identity in JPA. We cover how to map your datastore identity primary\n+key column in <xref linkend=\"ref_guide_mapping_jpa_datastoreid\"></xref>\n+            </para>\n         </section>\n         <section id=\"ref_guide_meta_jpa_version\">\n-          <title>Surrogate Version</title>\n-          <indexterm zone=\"ref_guide_meta_jpa_version\">\n-            <primary>version</primary>\n-            <secondary>surrogate</secondary>\n-          </indexterm>\n-          <para>\n-      Just as OpenJPA can maintain your entity's identity without any\n-      <literal>Id</literal> fields, OpenJPA can maintain your entity's\n-      optimistic version without any <literal>Version</literal> fields.\n-      <xref linkend=\"ref_guide_mapping_jpa_version\"/> shows you how\n-      to map surrogate version columns.\n-      </para>\n-        </section>\n-        <section id=\"ref_guide_meta_jpa_persistent\">\n-          <title>Persistent Field Values</title>\n-          <indexterm zone=\"ref_guide_meta_jpa_persistent\">\n-            <primary>persistent fields</primary>\n-          </indexterm>\n-          <para>\n-      JPA defines <literal>Basic</literal>,\n-      <literal>Lob</literal>, <literal>Embedded</literal>, \n-      <literal>ManyToOne</literal>, and <literal>OneToOne</literal> \n-      persistence strategies for direct field values.  OpenJPA supports all \n-      of these standard strategies, but adds one of its own: \n-      <literal>Persistent</literal>.  The \n-      <ulink url=\"../apidocs/org/apache/openjpa/persistence/Persistent.html\"><classname>org.apache.openjpa.persistence.Persistent</classname></ulink> metadata\n-      annotation can represent any direct field value, including\n-      custom types.  It has the following properties:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para><literal>FetchType fetch</literal>: Whether to load the\n-          field eagerly or lazily.  Corresponds exactly to the\n-          same-named property of standard JPA annotations\n-          such as <link linkend=\"jpa_overview_meta_basic\"><classname>\n-          Basic</classname></link>. Defaults to\n-          <literal>FetchType.EAGER</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>CascadeType[] cascade</literal>: Array of enum\n-          values defining cascade behavior for this field.  \n-          Corresponds exactly to the same-named property of standard\n-          JPA annotations such as \n-          <link linkend=\"jpa_overview_meta_manytoone\"><classname>\n-          ManyToOne</classname></link>. Defaults to empty array.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>String mappedBy</literal>: Names the field in the\n-          related entity that maps this bidirectional relation.\n-          Corresponds to the same-named property of standard JPA \n-          annotations such as \n-          <link linkend=\"jpa_overview_meta_onetoone\"><classname>\n-          OneToOne</classname></link>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>boolean optional</literal>: Whether the value can\n-          be null.  Corresponds to the same-named property of standard\n-          JPA annotations such as \n-          <link linkend=\"jpa_overview_meta_manytoone\"><classname>\n-          ManyToOne</classname></link>, but can apply to non-entity\n-          object values as well. Defaults to <literal>true</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>boolean embedded</literal>: Set this property to\n-          <literal>true</literal> if the field value is stored as\n-          an embedded object.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-      Though you can use the <classname>Persistent</classname> annotation\n-      in place of most of the standard direct field annotations mentioned\n-      above, we recommend primarily using it for non-standard and custom\n-      types for which no standard JPA annotation exists.  For example,\n-      <xref linkend=\"ref_guide_mapping_jpa_columns\"/> demonstrates the\n-      use of the <classname>Persistent</classname> annotation to denote\n-      a persistent <classname>java.awt.Point</classname> field.\n-      </para>\n-        </section>\n-        <section id=\"ref_guide_meta_jpa_persistent_coll\">\n-          <title>Persistent Collection Fields</title>\n-          <indexterm zone=\"ref_guide_meta_jpa_persistent_coll\">\n-            <primary>persistent fields</primary>\n-            <secondary>collection metadata</secondary>\n-          </indexterm>\n-          <para>\n-      JPA standardizes support for collections of entities with the\n-      <literal>OneToMany</literal> and <literal>ManyToMany</literal>\n-      persistence strategies.  OpenJPA expands collection support to handle\n-      collections of simple types (primitive wrappers, \n-      <classname>String</classname>s, etc), custom types, and embedded \n-      objects.\n-      </para>\n-          <para>\n-      The\n-      <ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistentCollection.html\"><classname>org.apache.openjpa.persistence.PersistentCollection</classname></ulink>\n-      metadata annotation represents a persistent collection field.\n-      It has the following properties:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para><literal>Class elementType</literal>: The class of the\n-          collection elements.  This information is usually taken \n-          from the parameterized collection element type.  You must \n-          supply it explicitly, however, if your field isn't a \n-          parameterized type.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>FetchType fetch</literal>: Whether to load the\n-          collection eagerly or lazily.  Corresponds exactly to the\n-          same-named property of standard JPA annotations\n-          such as <link linkend=\"jpa_overview_meta_basic\"><classname>\n-          Basic</classname></link>. Defaults to\n-          <literal>FetchType.LAZY</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>String mappedBy</literal>: Names the field in the\n-          related entity that maps this bidirectional relation.\n-          Corresponds to the same-named property of standard JPA \n-          annotations such as \n-          <link linkend=\"jpa_overview_meta_manytomany\"><classname>\n-          ManyToMany</classname></link>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>CascadeType[] elementCascade</literal>: Array of \n-          enum values defining cascade behavior for the collection \n-          elements.  Corresponds exactly to the <literal>cascade\n-          </literal> property of standard JPA annotations\n-          such as <link linkend=\"jpa_overview_meta_manytomany\"><classname>ManyToMany</classname></link>. Defaults to \n-          empty array.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>boolean elementEmbedded</literal>: Set this\n-          property to <literal>true</literal> if the elements are\n-          stored as embedded objects.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para><xref linkend=\"ref_guide_mapping_jpa_coll\"/> contains several \n-      examples of using <classname>PersistentCollection</classname> to \n-      mark non-standard collection fields persistent.\n-      </para>\n-        </section>\n-        <section id=\"ref_guide_meta_jpa_persistent_map\">\n-          <title>Persistent Map Fields</title>\n-          <indexterm zone=\"ref_guide_meta_jpa_persistent_map\">\n-            <primary>persistent fields</primary>\n-            <secondary>map metadata</secondary>\n-          </indexterm>\n-          <para>\n-      JPA has limited support for maps.  OpenJPA introduces the \n-      <ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistentMap.html\"><classname>org.apache.openjpa.persistence.PersistentMap</classname></ulink>\n-      metadata annotation to represent a persistent map field.\n-      It has the following properties:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para><literal>Class keyType</literal>: The class of the\n-          map keys.  This information is usually taken \n-          from the parameterized map key type.  You must \n-          supply it explicitly, however, if your field isn't a \n-          parameterized type.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>Class elementType</literal>: The class of the\n-          map values.  This information is usually taken \n-          from the parameterized map value type.  You must \n-          supply it explicitly, however, if your field isn't a \n-          parameterized type.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>FetchType fetch</literal>: Whether to load the\n-          collection eagerly or lazily.  Corresponds exactly to the\n-          same-named property of standard JPA annotations\n-          such as <link linkend=\"jpa_overview_meta_basic\"><classname>\n-          Basic</classname></link>. Defaults to\n-          <literal>FetchType.LAZY</literal>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>CascadeType[] keyCascade</literal>: Array of \n-          enum values defining cascade behavior for the map \n-          keys.  Corresponds exactly to the <literal>cascade\n-          </literal> property of standard JPA annotations\n-          such as <link linkend=\"jpa_overview_meta_manytoone\"><classname>ManyToOne</classname></link>. Defaults to \n-          empty array.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>CascadeType[] elementCascade</literal>: Array of \n-          enum values defining cascade behavior for the map \n-          values.  Corresponds exactly to the <literal>cascade\n-          </literal> property of standard JPA annotations\n-          such as <link linkend=\"jpa_overview_meta_manytoone\"><classname>ManyToOne</classname></link>. Defaults to \n-          empty array.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>boolean keyEmbedded</literal>: Set this\n-          property to <literal>true</literal> if the map keys are\n-          stored as embedded objects.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>boolean elementEmbedded</literal>: Set this\n-          property to <literal>true</literal> if the map values are\n-          stored as embedded objects.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-      Map keys and values in OpenJPA can be entities, simple types\n-      (primitive wrappers, <classname>String</classname>s, etc),\n-      custom types, or embedded objects.\n-      <xref linkend=\"ref_guide_mapping_jpa_map\"/> contains several \n-      examples of using <classname>PersistentMap</classname> to annotate \n-      persistent map fields.\n-      </para>\n-        </section>\n-      </section>\n-      <section id=\"ref_guide_meta_ext\">\n-        <title>Metadata Extensions</title>\n-        <indexterm zone=\"ref_guide_meta_ext\">\n-          <primary>metadata</primary>\n-          <secondary>extensions</secondary>\n-        </indexterm>\n-        <para>\n-    OpenJPA extends standard metadata to allow you to access advanced OpenJPA \n-    functionality. This section covers persistence metadata extensions; we \n-    discuss mapping metadata extensions in \n-    <xref linkend=\"ref_guide_mapping_ext\"/>. \n-    All metadata extensions are optional; OpenJPA will rely on its defaults\n-    when no explicit data is provided.\n-    </para>\n-        <section id=\"ref_guide_meta_class\">\n-          <title>Class Extensions</title>\n-          <para>\n-      OpenJPA recognizes the following class extensions:\n-      </para>\n-          <section id=\"fetch-groups\">\n-            <title>Fetch Groups</title>\n-            <indexterm zone=\"data-cache\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>fetch groups</tertiary>\n-              <seealso>fetch groups</seealso>\n+            <title>\n+                Surrogate Version\n+            </title>\n+            <indexterm zone=\"ref_guide_meta_jpa_version\">\n+                <primary>\n+                    version\n+                </primary>\n+                <secondary>\n+                    surrogate\n+                </secondary>\n             </indexterm>\n             <para>\n-        \n-        The \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/FetchGroups.html\"><classname>org.apache.openjpa.persistence.FetchGroups</classname></ulink>\n-        and <ulink url=\"../apidocs/org/apache/openjpa/persistence/FetchGroup.html\"><classname>org.apache.openjpa.persistence.FetchGroup</classname></ulink>\n-        annotations allow you to define fetch groups in your JPA \n-        entities.  <xref linkend=\"ref_guide_fetch\"/> discusses OpenJPA's \n-        support for fetch groups in general; see \n-        <xref linkend=\"ref_guide_fetch_custom\"/> for how to use these\n-        annotations in particular.\n-        </para>\n-          </section>\n-          <section id=\"data-cache\">\n-            <title>Data Cache</title>\n-            <indexterm zone=\"data-cache\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>data cache</tertiary>\n-              <seealso>caching</seealso>\n+Just as OpenJPA can maintain your entity's identity without any <literal>Id\n+</literal> fields, OpenJPA can maintain your entity's optimistic version without\n+any <literal>Version</literal> fields.\n+<xref linkend=\"ref_guide_mapping_jpa_version\"></xref> shows you how to map\n+surrogate version columns.\n+            </para>\n+        </section>\n+        <section id=\"ref_guide_meta_jpa_persistent\">\n+            <title>\n+                Persistent Field Values\n+            </title>\n+            <indexterm zone=\"ref_guide_meta_jpa_persistent\">\n+                <primary>\n+                    persistent fields\n+                </primary>\n             </indexterm>\n-            <para><xref linkend=\"ref_guide_cache\"/> examines caching in OpenJPA.  \n-        Metadata extensions allow individual classes to override \n-        system caching defaults.\n-        </para>\n             <para>\n-        OpenJPA defines the \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\"><classname>org.apache.openjpa.persistence.DataCache</classname></ulink>\n-        annotation for caching information.  This annotation has the\n-        following properties:\n-        </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>boolean enabled</literal>: Whether to cache\n-            data for instances of the class.  Defaults to\n-            <literal>true</literal> for base classes, or the\n-            superclass value for subclasses.  If you set this \n-            property to <literal>false</literal>, all other \n-            properties are ignored.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>String name</literal>: Place data for instances\n-            of the class in a named cache.  By default, instance \n-            data is placed in the same cache as superclass data, or\n-            the default cache configured through\n-            the <link linkend=\"openjpa.DataCache\"><literal>\n-            openjpa.DataCache</literal></link> configuration property\n-            for base classes.\n+JPA defines <literal>Basic</literal>, <literal>Lob</literal>, <literal>Embedded\n+</literal>, <literal>ManyToOne</literal>, and <literal>OneToOne</literal>\n+persistence strategies for direct field values. OpenJPA supports all of these\n+standard strategies, but adds one of its own: <literal>Persistent</literal>.\n+The <ulink url=\"../apidocs/org/apache/openjpa/persistence/Persistent.html\">\n+<classname>org.apache.openjpa.persistence.Persistent</classname></ulink>\n+metadata annotation can represent any direct field value, including custom\n+types. It has the following properties:\n             </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>int timeout</literal>: The number of \n-            milliseconds data for the class remains valid.  Use\n-            -1 for no timeout.  Defaults to the\n-            <link linkend=\"openjpa.DataCacheTimeout\"><literal>\n-            openjpa.DataCacheTimeout</literal></link> property value.\n-            </para>\n-              </listitem>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+<literal>FetchType fetch</literal>: Whether to load the field eagerly or\n+lazily. Corresponds exactly to the same-named property of standard JPA\n+annotations such as <link linkend=\"jpa_overview_meta_basic\"><classname> Basic\n+</classname></link>. Defaults to <literal>FetchType.EAGER</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>CascadeType[] cascade</literal>: Array of enum values defining cascade\n+behavior for this field. Corresponds exactly to the same-named property of\n+standard JPA annotations such as <link linkend=\"jpa_overview_meta_manytoone\">\n+<classname> ManyToOne</classname></link>. Defaults to empty array.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>String mappedBy</literal>: Names the field in the related entity that\n+maps this bidirectional relation. Corresponds to the same-named property of\n+standard JPA annotations such as <link linkend=\"jpa_overview_meta_onetoone\">\n+<classname> OneToOne</classname></link>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>boolean optional</literal>: Whether the value can be null. Corresponds\n+to the same-named property of standard JPA annotations such as\n+<link linkend=\"jpa_overview_meta_manytoone\"><classname> ManyToOne</classname>\n+</link>, but can apply to non-entity object values as well. Defaults to\n+<literal>true</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>boolean embedded</literal>: Set this property to <literal>true\n+</literal> if the field value is stored as an embedded object.\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n             <para>\n-        The <literal>data-cache</literal> key accepts the \n-        following values:\n-        </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>true</literal>: Use the default cache, as\n-            configured by the <link linkend=\"openjpa.DataCache\"><literal>openjpa.DataCache</literal></link> configuration \n-            property. This is the default when no extension is \n-            given, unless a superclass names a different cache.\n+Though you can use the <classname>Persistent</classname> annotation in place of\n+most of the standard direct field annotations mentioned above, we recommend\n+primarily using it for non-standard and custom types for which no standard JPA\n+annotation exists. For example, <xref linkend=\"ref_guide_mapping_jpa_columns\">\n+</xref> demonstrates the use of the <classname>Persistent</classname> annotation\n+to denote a persistent <classname>java.awt.Point</classname> field.\n             </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>false</literal>: Data for instances of this \n-            class should not be cached.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>&lt;cache-name&gt;</literal>:  Place data for\n-            instances of this class into the cache with name \n-            <literal>&lt;cache-name&gt;</literal>.\n-            </para>\n-              </listitem>\n-            </itemizedlist>\n-          </section>\n-          <section id=\"detached-state-field\">\n-            <title>Detached State</title>\n-            <indexterm zone=\"detached-state-field\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>detached state field</tertiary>\n-              <seealso>detachment</seealso>\n+        </section>\n+        <section id=\"ref_guide_meta_jpa_persistent_coll\">\n+            <title>\n+                Persistent Collection Fields\n+            </title>\n+            <indexterm zone=\"ref_guide_meta_jpa_persistent_coll\">\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    collection metadata\n+                </secondary>\n             </indexterm>\n             <para>\n-        The OpenJPA <link linkend=\"ref_guide_pc_enhance\">enhancer</link> \n-        may add a synthetic field to detachable classes to hold detached\n-        state (see <xref linkend=\"ref_guide_detach_graph\"/> \n-        for details).  You can instead declare your own detached state \n-        field or supress the creation of a detached state field \n-        altogether.  In the latter case, your class must not use \n-        <link linkend=\"ref_guide_pc_oid\">datastore identity</link>,\n-        and should declare a version field to detect optimistic \n-        concurrency errors during detached modifications.\n-        </para>\n+JPA standardizes support for collections of entities with the <literal>\n+OneToMany</literal> and <literal>ManyToMany</literal> persistence strategies.\n+OpenJPA expands collection support to handle collections of simple types\n+(primitive wrappers, <classname>String</classname> s, etc), custom types, and\n+embedded objects.\n+            </para>\n             <para>\n-        OpenJPA defines the \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/DetachedState.html\"><classname>org.apache.openjpa.persistence.DetachedState</classname></ulink> annotation for controlling detached state.  When used\n-        to annotate a class, <classname>DetachedState</classname>\n-        recognizes the following properties:\n-        </para>\n+The\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistentCollection.html\">\n+<classname>org.apache.openjpa.persistence.PersistentCollection</classname>\n+</ulink> metadata annotation represents a persistent collection field. It has\n+the following properties:\n+            </para>\n             <itemizedlist>\n-              <listitem>\n-                <para><literal>boolean enabled</literal>: Set to false to\n-            suppress the use of detached state.\n+                <listitem>\n+                    <para>\n+<literal>Class elementType</literal>: The class of the collection elements.\n+This information is usually taken from the parameterized collection element\n+type. You must supply it explicitly, however, if your field isn't a\n+parameterized type.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>FetchType fetch</literal>: Whether to load the collection eagerly or\n+lazily. Corresponds exactly to the same-named property of standard JPA\n+annotations such as <link linkend=\"jpa_overview_meta_basic\"><classname> Basic\n+</classname></link>. Defaults to <literal>FetchType.LAZY</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>String mappedBy</literal>: Names the field in the related entity that\n+maps this bidirectional relation. Corresponds to the same-named property of\n+standard JPA annotations such as <link linkend=\"jpa_overview_meta_manytomany\">\n+<classname> ManyToMany</classname></link>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>CascadeType[] elementCascade</literal>: Array of enum values defining\n+cascade behavior for the collection elements. Corresponds exactly to the\n+<literal>cascade</literal> property of standard JPA annotations such as\n+<link linkend=\"jpa_overview_meta_manytomany\"><classname>ManyToMany</classname>\n+</link>. Defaults to empty array.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>boolean elementEmbedded</literal>: Set this property to <literal>true\n+</literal> if the elements are stored as embedded objects.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+<xref linkend=\"ref_guide_mapping_jpa_coll\"></xref> contains several examples of\n+using <classname>PersistentCollection</classname> to mark non-standard\n+collection fields persistent.\n             </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>String fieldName</literal>: Use this property \n-            to declare your own detached state field.  The field\n-            must be of type <classname>Object</classname>.  \n-            Typically this property is only used if the field is\n-            inherited from a non-persisted superclass.  If the field\n-            is declared in your entity class, you will typically\n-            annotate the field directly, as described below.\n+        </section>\n+        <section id=\"ref_guide_meta_jpa_persistent_map\">\n+            <title>\n+                Persistent Map Fields\n+            </title>\n+            <indexterm zone=\"ref_guide_meta_jpa_persistent_map\">\n+                <primary>\n+                    persistent fields\n+                </primary>\n+                <secondary>\n+                    map metadata\n+                </secondary>\n+            </indexterm>\n+            <para>\n+JPA has limited support for maps. OpenJPA introduces the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistentMap.html\">\n+<classname>org.apache.openjpa.persistence.PersistentMap</classname></ulink>\n+metadata annotation to represent a persistent map field. It has the following\n+properties:\n             </para>\n-              </listitem>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+<literal>Class keyType</literal>: The class of the map keys. This information\n+is usually taken from the parameterized map key type. You must supply it\n+explicitly, however, if your field isn't a parameterized type.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>Class elementType</literal>: The class of the map values. This\n+information is usually taken from the parameterized map value type. You must\n+supply it explicitly, however, if your field isn't a parameterized type.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>FetchType fetch</literal>: Whether to load the collection eagerly or\n+lazily. Corresponds exactly to the same-named property of standard JPA\n+annotations such as <link linkend=\"jpa_overview_meta_basic\"><classname> Basic\n+</classname></link>. Defaults to <literal>FetchType.LAZY</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>CascadeType[] keyCascade</literal>: Array of enum values defining\n+cascade behavior for the map keys. Corresponds exactly to the <literal>cascade\n+</literal> property of standard JPA annotations such as\n+<link linkend=\"jpa_overview_meta_manytoone\"><classname>ManyToOne</classname>\n+</link>. Defaults to empty array.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>CascadeType[] elementCascade</literal>: Array of enum values defining\n+cascade behavior for the map values. Corresponds exactly to the <literal>\n+cascade</literal> property of standard JPA annotations such as\n+<link linkend=\"jpa_overview_meta_manytoone\"><classname>ManyToOne</classname>\n+</link>. Defaults to empty array.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>boolean keyEmbedded</literal>: Set this property to <literal>true\n+</literal> if the map keys are stored as embedded objects.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>boolean elementEmbedded</literal>: Set this property to <literal>true\n+</literal> if the map values are stored as embedded objects.\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n             <para>\n-        If you declare your own detached state field, you can annotate\n-        that field with <classname>DetachedState</classname> directly,\n-        rather than placing the annotation at the class level and using\n-        the <literal>fieldName</literal> property.  When placed on a\n-        field, <classname>DetachedState</classname> acts as a marker \n-        annotation; it does not recognize any properties.  Your \n-        annotated field must be of type <classname>Object</classname>.\n-        </para>\n-          </section>\n-          <section id=\"lock-groups\">\n-            <title>Lock Groups</title>\n-            <para>\n-        OpenJPA requires you to pre-declare subclass lock groups in the\n-        least-derived mapped class.  \n-        <phrase>\n-        The JPA \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroups.html\"><classname>org.apache.openjpa.persistence.LockGroups</classname></ulink>\n-        annotation accepts an array of lock group names.\n-        </phrase>\n-        \n-        For details on lock groups, see \n-        <xref linkend=\"ref_guide_lock_groups_and_subclasses\"/>.\n+Map keys and values in OpenJPA can be entities, simple types (primitive\n+wrappers, <classname>String</classname> s, etc), custom types, or embedded\n+objects. <xref linkend=\"ref_guide_mapping_jpa_map\"></xref> contains several\n+examples of using <classname>PersistentMap</classname> to annotate persistent\n+map fields.\n+            </para>\n+        </section>\n+    </section>\n+    <section id=\"ref_guide_meta_ext\">\n+        <title>\n+            Metadata Extensions\n+        </title>\n+        <indexterm zone=\"ref_guide_meta_ext\">\n+            <primary>\n+                metadata\n+            </primary>\n+            <secondary>\n+                extensions\n+            </secondary>\n+        </indexterm>\n+        <para>\n+OpenJPA extends standard metadata to allow you to access advanced OpenJPA\n+functionality. This section covers persistence metadata extensions; we discuss\n+mapping metadata extensions in <xref linkend=\"ref_guide_mapping_ext\"></xref>.\n+All metadata extensions are optional; OpenJPA will rely on its defaults when no\n+explicit data is provided.\n         </para>\n-          </section>\n-          <section id=\"auditable\">\n-            <title>Auditable</title>\n+        <section id=\"ref_guide_meta_class\">\n+            <title>\n+                Class Extensions\n+            </title>\n             <para>\n-        Reserved for future use.\n-        </para>\n-          </section>\n+OpenJPA recognizes the following class extensions:\n+            </para>\n+            <section id=\"fetch-groups\">\n+                <title>\n+                    Fetch Groups\n+                </title>\n+                <indexterm zone=\"data-cache\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        fetch groups\n+                    </tertiary>\n+                    <seealso>\n+                        fetch groups\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+The <ulink url=\"../apidocs/org/apache/openjpa/persistence/FetchGroups.html\">\n+<classname>org.apache.openjpa.persistence.FetchGroups</classname></ulink> and\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/FetchGroup.html\">\n+<classname>org.apache.openjpa.persistence.FetchGroup</classname></ulink>\n+annotations allow you to define fetch groups in your JPA entities.\n+<xref linkend=\"ref_guide_fetch\"></xref> discusses OpenJPA's support for fetch\n+groups in general; see <xref linkend=\"ref_guide_fetch_custom\"></xref> for how to\n+use these annotations in particular.\n+                </para>\n+            </section>\n+            <section id=\"data-cache\">\n+                <title>\n+                    Data Cache\n+                </title>\n+                <indexterm zone=\"data-cache\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        data cache\n+                    </tertiary>\n+                    <seealso>\n+                        caching\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+<xref linkend=\"ref_guide_cache\"></xref> examines caching in OpenJPA. Metadata\n+extensions allow individual classes to override system caching defaults.\n+                </para>\n+                <para>\n+OpenJPA defines the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/DataCache.html\">\n+<classname>org.apache.openjpa.persistence.DataCache</classname></ulink>\n+annotation for caching information. This annotation has the following\n+properties:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>boolean enabled</literal>: Whether to cache data for instances of the\n+class. Defaults to <literal>true</literal> for base classes, or the superclass\n+value for subclasses. If you set this property to <literal>false</literal>, all\n+other properties are ignored.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>String name</literal>: Place data for instances of the class in a\n+named cache. By default, instance data is placed in the same cache as superclass\n+data, or the default cache configured through the\n+<link linkend=\"openjpa.DataCache\"><literal> openjpa.DataCache</literal></link>\n+configuration property for base classes.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>int timeout</literal>: The number of milliseconds data for the class\n+remains valid. Use -1 for no timeout. Defaults to the\n+<link linkend=\"openjpa.DataCacheTimeout\"><literal> openjpa.DataCacheTimeout\n+</literal></link> property value.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+                <para>\n+The <literal>data-cache</literal> key accepts the following values:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>true</literal>: Use the default cache, as configured by the\n+<link linkend=\"openjpa.DataCache\"><literal>openjpa.DataCache</literal></link>\n+configuration property. This is the default when no extension is given, unless a\n+superclass names a different cache.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>false</literal>: Data for instances of this class should not be\n+cached.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>&lt;cache-name&gt;</literal>: Place data for instances of this class\n+into the cache with name <literal>&lt;cache-name&gt;</literal>.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </section>\n+            <section id=\"detached-state-field\">\n+                <title>\n+                    Detached State\n+                </title>\n+                <indexterm zone=\"detached-state-field\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        detached state field\n+                    </tertiary>\n+                    <seealso>\n+                        detachment\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+The OpenJPA <link linkend=\"ref_guide_pc_enhance\">enhancer</link> may add a\n+synthetic field to detachable classes to hold detached state (see\n+<xref linkend=\"ref_guide_detach_graph\"></xref> for details). You can instead\n+declare your own detached state field or supress the creation of a detached\n+state field altogether. In the latter case, your class must not use\n+<link linkend=\"ref_guide_pc_oid\">datastore identity</link>, and should declare\n+a version field to detect optimistic concurrency errors during detached\n+modifications.\n+                </para>\n+                <para>\n+OpenJPA defines the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/DetachedState.html\">\n+<classname>org.apache.openjpa.persistence.DetachedState</classname></ulink>\n+annotation for controlling detached state. When used to annotate a class,\n+<classname>DetachedState</classname> recognizes the following properties:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>boolean enabled</literal>: Set to false to suppress the use of\n+detached state.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>String fieldName</literal>: Use this property to declare your own\n+detached state field. The field must be of type <classname>Object</classname>.\n+Typically this property is only used if the field is inherited from a\n+non-persisted superclass. If the field is declared in your entity class, you\n+will typically annotate the field directly, as described below.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+                <para>\n+If you declare your own detached state field, you can annotate that field with\n+<classname>DetachedState</classname> directly, rather than placing the\n+annotation at the class level and using the <literal>fieldName</literal>\n+property. When placed on a field, <classname>DetachedState</classname> acts as a\n+marker annotation; it does not recognize any properties. Your annotated field\n+must be of type <classname>Object</classname>.\n+                </para>\n+            </section>\n+            <section id=\"lock-groups\">\n+                <title>\n+                    Lock Groups\n+                </title>\n+                <para>\n+OpenJPA requires you to pre-declare subclass lock groups in the least-derived\n+mapped class. <phrase> The JPA\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroups.html\">\n+<classname>org.apache.openjpa.persistence.LockGroups</classname></ulink>\n+annotation accepts an array of lock group names.</phrase> For details on lock\n+groups, see <xref linkend=\"ref_guide_lock_groups_and_subclasses\"></xref>.\n+                </para>\n+            </section>\n+            <section id=\"auditable\">\n+                <title>\n+                    Auditable\n+                </title>\n+                <para>\n+Reserved for future use.\n+                </para>\n+            </section>\n         </section>\n         <section id=\"ref_guide_meta_field\">\n-          <title>Field Extensions</title>\n-          <para>\n-      OpenJPA recognizes the following field extensions:\n-      </para>\n-          <section id=\"dependent\">\n-            <title>Dependent</title>\n-            <indexterm zone=\"data-cache\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>dependent</tertiary>\n-            </indexterm>\n+            <title>\n+                Field Extensions\n+            </title>\n             <para>\n-        In a <emphasis>dependent</emphasis> relation, the referenced\n-        object is deleted whenever the owning object is deleted, or \n-        whenever the relation is severed by nulling or resetting the \n-        owning field.  For example, if the \n-        <literal>Magazine.coverArticle</literal> field is marked \n-        dependent, then setting <literal>Magazine.coverArticle</literal>\n-        to a new <classname>Article</classname> instance will \n-        automatically delete the old <classname>Article</classname> \n-        stored in the field.  Similarly, deleting a <classname>Magazine\n-        </classname> object will automatically delete its current cover\n-        <classname>Article</classname>.\n-        You can prevent an orphaned dependent object from being deleted\n-        by assigning it to another relation in the same transaction.\n-        </para>\n-            <para>\n-        \n-        OpenJPA offers a family of marker annotations to\n-        denote dependent relations in JPA entities:\n-        </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><ulink url=\"../apidocs/org/apache/openjpa/persistence/Dependent.html\"><classname>\n-            org.apache.openjpa.persistence.Dependent</classname></ulink>: Marks\n-            a direct relation as dependent.\n+OpenJPA recognizes the following field extensions:\n             </para>\n-              </listitem>\n-              <listitem>\n-                <para><ulink url=\"../apidocs/org/apache/openjpa/persistence/ElementDependent.html\"><classname>\n-            org.apache.openjpa.persistence.ElementDependent</classname></ulink>: \n-            Marks the entity elements of a collection, array, or \n-            map field as dependent.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para><ulink url=\"../apidocs/org/apache/openjpa/persistence/KeyDependent.html\"><classname>\n-            org.apache.openjpa.persistence.KeyDependent</classname></ulink>: \n-            Marks the key entities in a map field as dependent.\n-            </para>\n-              </listitem>\n-            </itemizedlist>\n-          </section>\n-          <section id=\"lrs\">\n-            <title>LRS</title>\n-            <indexterm zone=\"lrs\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>lrs</tertiary>\n-              <seealso>large result sets</seealso>\n-            </indexterm>\n-            <para>\n-        This boolean extension, denoted by \n-        <phrase>\n-        the JPA <ulink url=\"../apidocs/org/apache/openjpa/persistence/LRS.html\"><classname>org.apache.openjpa.persistence.LRS</classname></ulink> annotation,\n-        </phrase>\n-        \n-        \n-        indicates that a field should use \n-        OpenJPA's special large result set collection or map proxies.  \n-        A complete description of large result set proxies is \n-        available in <xref linkend=\"ref_guide_pc_scos_proxy_lrs\"/>.\n-        </para>\n-          </section>\n-          <section id=\"order-by\">\n-            <title>Order-By</title>\n-            <indexterm zone=\"order-by\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>order-by</tertiary>\n-            </indexterm>\n-            <para><phrase>\n-        The JPA Overview's \n-        <xref linkend=\"jpa_overview_meta_orderby\"/> describes JPA's \n-        <literal>OrderBy</literal> annotation for loading the elements\n-        of collection fields in a prescribed order.\n-        </phrase>\n-        \n-        \n-        \n-        Ordering syntax is as follows:\n-        </para>\n-            <programlisting format=\"linespecific\">\n+            <section id=\"dependent\">\n+                <title>\n+                    Dependent\n+                </title>\n+                <indexterm zone=\"data-cache\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        dependent\n+                    </tertiary>\n+                </indexterm>\n+                <para>\n+In a <emphasis>dependent</emphasis> relation, the referenced object is deleted\n+whenever the owning object is deleted, or whenever the relation is severed by\n+nulling or resetting the owning field. For example, if the <literal>\n+Magazine.coverArticle</literal> field is marked dependent, then setting\n+<literal>Magazine.coverArticle</literal> to a new <classname>Article</classname>\n+instance will automatically delete the old <classname>Article</classname> stored\n+in the field. Similarly, deleting a <classname>Magazine</classname> object will\n+automatically delete its current cover <classname>Article</classname>. You can\n+prevent an orphaned dependent object from being deleted by assigning it to\n+another relation in the same transaction.\n+                </para>\n+                <para>\n+OpenJPA offers a family of marker annotations to denote dependent relations in\n+JPA entities:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/Dependent.html\">\n+<classname> org.apache.openjpa.persistence.Dependent</classname></ulink>: Marks\n+a direct relation as dependent.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/ElementDependent.html\">\n+<classname> org.apache.openjpa.persistence.ElementDependent</classname></ulink>\n+: Marks the entity elements of a collection, array, or map field as dependent.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/KeyDependent.html\">\n+<classname> org.apache.openjpa.persistence.KeyDependent</classname></ulink>:\n+Marks the key entities in a map field as dependent.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </section>\n+            <section id=\"lrs\">\n+                <title>\n+                    LRS\n+                </title>\n+                <indexterm zone=\"lrs\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        lrs\n+                    </tertiary>\n+                    <seealso>\n+                        large result sets\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+This boolean extension, denoted by <phrase> the JPA\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/LRS.html\"><classname>\n+org.apache.openjpa.persistence.LRS</classname></ulink> annotation,</phrase>\n+indicates that a field should use OpenJPA's special large result set collection\n+or map proxies. A complete description of large result set proxies is available\n+in <xref linkend=\"ref_guide_pc_scos_proxy_lrs\"></xref>.\n+                </para>\n+            </section>\n+            <section id=\"order-by\">\n+                <title>\n+                    Order-By\n+                </title>\n+                <indexterm zone=\"order-by\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        order-by\n+                    </tertiary>\n+                </indexterm>\n+                <para>\n+<phrase> The JPA Overview's <xref linkend=\"jpa_overview_meta_orderby\"></xref>\n+describes JPA's <literal>OrderBy</literal> annotation for loading the elements\n+of collection fields in a prescribed order.</phrase> Ordering syntax is as\n+follows:\n+                </para>\n+<programlisting>\n #element|&lt;field name&gt;[ asc|ascending|desc|descending][, ...]\n </programlisting>\n-            <para>\n-        The token <literal>#element</literal> represents the element\n-        value.  Simple element types such as strings and primitive\n-        wrappers are sorted based on their natural ordering.  If the\n-        collection holds persistent objects, its elements are sorted \n-        based on the natural ordering of the objects' primary key \n-        values.  By substituting a field name for the <literal>\n-        #element</literal> token, you can order a collection of \n-        persistent objects by an arbitrary field in the related type,\n-        rather than by primary key.\n-        </para>\n-            <para>\n-        The field name or <literal>#element</literal> token may be\n-        followed by the keywords <literal>asc/ascending</literal> or \n-        <literal>desc/descending</literal> in either all-upper or \n-        all-lower case to mandate ascending and descending order.\n-        If the direction is omitted, OpenJPA defaults to ascending order.\n-        </para>\n-            <para>\n-        Note that the defined ordering is only applied when the \n-        collection is loaded from the datastore.  It is not maintained\n-        by OpenJPA as you modify the collection in memory.\n-        </para>\n-            <para>\n-        The following ordering string orders a collection by its \n-        element values in descending order:\n-        </para>\n-            <programlisting format=\"linespecific\">\n+                <para>\n+The token <literal>#element</literal> represents the element value. Simple\n+element types such as strings and primitive wrappers are sorted based on their\n+natural ordering. If the collection holds persistent objects, its elements are\n+sorted based on the natural ordering of the objects' primary key values. By\n+substituting a field name for the <literal> #element</literal> token, you can\n+order a collection of persistent objects by an arbitrary field in the related\n+type, rather than by primary key.\n+                </para>\n+                <para>\n+The field name or <literal>#element</literal> token may be followed by the\n+keywords <literal>asc/ascending</literal> or <literal>desc/descending</literal>\n+in either all-upper or all-lower case to mandate ascending and descending order.\n+If the direction is omitted, OpenJPA defaults to ascending order.\n+                </para>\n+                <para>\n+Note that the defined ordering is only applied when the collection is loaded\n+from the datastore. It is not maintained by OpenJPA as you modify the collection\n+in memory.\n+                </para>\n+                <para>\n+The following ordering string orders a collection by its element values in\n+descending order:\n+                </para>\n+<programlisting>\n \"#element desc\"\n </programlisting>\n-            <para>\n-        The following ordering string orders a collection of \n-        <classname>Author</classname> objects by each author's last\n-        name in ascending order.  If two last names are equal, the\n-        authors are ordered by first name in ascending order.\n-        </para>\n-            <programlisting format=\"linespecific\">\n+                <para>\n+The following ordering string orders a collection of <classname>Author\n+</classname> objects by each author's last name in ascending order. If two last\n+names are equal, the authors are ordered by first name in ascending order.\n+                </para>\n+<programlisting>\n \"firstName, lastName\"\n </programlisting>\n-          </section>\n-          <section id=\"inverse-logical\">\n-            <title>Inverse-Logical</title>\n-            <indexterm zone=\"inverse-logical\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>inverse-logical</tertiary>\n-              <seealso>bidirectional relations</seealso>\n-            </indexterm>\n-            <para>\n-        This extension names the inverse field in a logical \n-        bidirectional relation.  \n-        <phrase>\n-        To create a logical bidrectional relation in OpenJPA, use the\n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/InverseLogical.html\"><classname>org.apache.openjpa.persistence.InverseLogical</classname></ulink> \n-        annotation.\n-        </phrase>\n-        \n-        We discuss logical bidirectional relations and this extension\n-        in detail in <xref linkend=\"ref_guide_inverses\"/>.\n-        </para>\n-          </section>\n-          <section id=\"lock-group\">\n-            <title>Lock Group</title>\n-            <indexterm zone=\"lock-group\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>lock group</tertiary>\n-              <seealso>locking</seealso>\n-            </indexterm>\n-            <para>\n-        Lock groups allow for fine-grained optimistic locking \n-        concurrency.  \n-        Use\n-        <phrase>\n-        OpenJPA's \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroup.html\"><classname>org.apache.openjpa.persistence.LockGroup</classname></ulink>\n-        annotation\n-        </phrase>\n-        \n-        \n-        to name the lock group for a field.  You can exclude a field \n-        from optimistic locking with a value of <literal>none</literal>.\n-        We discuss lock groups and this extension further in \n-        <xref linkend=\"ref_guide_lock_groups\"/>.\n-        </para>\n-          </section>\n-          <section id=\"read-only\">\n-            <title>Read-Only</title>\n-            <indexterm zone=\"read-only\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>read-only</tertiary>\n-              <seealso>persistent fields</seealso>\n-            </indexterm>\n-            <indexterm zone=\"read-only\">\n-              <primary>persistent fields</primary>\n-              <secondary>read only</secondary>\n-            </indexterm>\n-            <para>\n-        The read-only extension makes a field unwritable.  The \n-        extension only applies to existing persistent objects; new \n-        object fields are always writeable.\n-        </para>\n-            <para>\n-        To mark a field read-only in JPA metadata, set the\n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/ReadOnly.html\"><classname>org.apache.openjpa.persistence.ReadOnly</classname></ulink>\n-        annotation to a\n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/UpdateAction.html\"><classname>org.apache.openjpa.persistence.UpdateAction</classname></ulink>\n-        enum value.  The <classname>UpdateAction</classname> enum\n-        includes:\n-        </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>UpdateAction.IGNORE</literal>: Updates to the \n-            field are completely ignored.  The field is not \n-            considered dirty.\n-            The new value will not even get stored in the\n-            OpenJPA <link linkend=\"ref_guide_cache\">data cache</link>.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>UpdateAction.RESTRICT</literal>: Any attempt \n-            to change the field will result in an immediate \n-            exception.\n-            </para>\n-              </listitem>\n-            </itemizedlist>\n-          </section>\n-          <section id=\"type\">\n-            <title>Type</title>\n-            <indexterm zone=\"type\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>type</tertiary>\n-              <seealso>persistent fields</seealso>\n-            </indexterm>\n-            <para>\n-        OpenJPA has three levels of support for relations:\n-        </para>\n-            <orderedlist>\n-              <listitem>\n+            </section>\n+            <section id=\"inverse-logical\">\n+                <title>\n+                    Inverse-Logical\n+                </title>\n+                <indexterm zone=\"inverse-logical\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        inverse-logical\n+                    </tertiary>\n+                    <seealso>\n+                        bidirectional relations\n+                    </seealso>\n+                </indexterm>\n                 <para>\n-            Relations that hold a reference to an object of a \n-            concrete persistent class are supported by storing \n-            the primary key values of the related instance in \n-            the database.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para>\n-            Relations that hold a reference to an object of an\n-            unknown persistent class are supported by storing \n-            the stringified identity value of the related \n-            instance.  This level of support does not allow \n-            queries across the relation.\n-            </para>\n-              </listitem>\n-              <listitem>\n-                <para>\n-            Relations that hold an unknown object or interface.\n-            The only way to support these relations is to \n-            serialize their value to the database.  This does \n-            not allow you to query the field, and is not very \n-            efficient.\n-            </para>\n-              </listitem>\n-            </orderedlist>\n-            <para>\n-        Clearly, when you declare a field's type to be another\n-        persistence-capable class, OpenJPA uses level 1 support.  \n-        By default, OpenJPA assumes that any interface-typed fields \n-        you declare will be implemented only by other persistent \n-        classes, and assigns interfaces level 2 support.  The exception\n-        to this rule is the <classname>java.io.Serializable</classname> \n-        interface.  If you declare a field to be of type \n-        <classname>Serializable</classname>, OpenJPA lumps it\n-        together with <classname>java.lang.Object</classname>\n-        fields and other non-interface, unrecognized field types,\n-        which are all assigned level 3 support.\n-        </para>\n-            <para>\n-        With OpenJPA's type family of metadata extensions, you can \n-        control the level of support given to your \n-        unknown/interface-typed fields.  Setting the value of this \n-        extension to \n-        <phrase><classname>Entity</classname></phrase>\n-        \n-        \n-        \n-        indicates that the field value will always be some persistent \n-        object, and gives level 2 support.  Setting the value of this\n-        extension to the class of a concrete persistent\n-        type is even better; it gives you level 1 \n-        support (just as if you had declared your field to be\n-        of that type in the first place).  Setting this extension\n-        to <classname>Object</classname> uses level 3 \n-        support.  This is useful when you have an interface\n-        relation that may <emphasis role=\"bold\">not</emphasis> \n-        hold other persistent objects (recall that OpenJPA \n-        assumes interface fields will always hold persistent\n-        instances by default).\n-        </para>\n-            <para>\n-        This extension is also used with OpenJPA's externalization feature,\n-        described in <xref linkend=\"ref_guide_pc_extern\"/>.\n-        </para>\n-            <para>\n-        OpenJPA defines the following type annotations for field \n-        values, collection, array, and map elements, and map keys,\n-        respectively:\n-        </para>\n-            <itemizedlist>\n-              <listitem>\n+This extension names the inverse field in a logical bidirectional relation.\n+<phrase> To create a logical bidrectional relation in OpenJPA, use the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/InverseLogical.html\">\n+<classname>org.apache.openjpa.persistence.InverseLogical</classname></ulink>\n+annotation.</phrase> We discuss logical bidirectional relations and this\n+extension in detail in <xref linkend=\"ref_guide_inverses\"></xref>.\n+                </para>\n+            </section>\n+            <section id=\"lock-group\">\n+                <title>\n+                    Lock Group\n+                </title>\n+                <indexterm zone=\"lock-group\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        lock group\n+                    </tertiary>\n+                    <seealso>\n+                        locking\n+                    </seealso>\n+                </indexterm>\n                 <para>\n-                  <ulink url=\"../apidocs/org/apache/openjpa/persistence/Type.html\">\n-                    <classname>org.apache.openjpa.persistence.Type</classname>\n-                  </ulink>\n+Lock groups allow for fine-grained optimistic locking concurrency. Use <phrase>\n+OpenJPA's <ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroup.html\">\n+<classname>org.apache.openjpa.persistence.LockGroup</classname></ulink>\n+annotation</phrase> to name the lock group for a field. You can exclude a field\n+from optimistic locking with a value of <literal>none</literal>. We discuss\n+lock groups and this extension further in <xref linkend=\"ref_guide_lock_groups\">\n+</xref>.\n                 </para>\n-              </listitem>\n-              <listitem>\n+            </section>\n+            <section id=\"read-only\">\n+                <title>\n+                    Read-Only\n+                </title>\n+                <indexterm zone=\"read-only\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        read-only\n+                    </tertiary>\n+                    <seealso>\n+                        persistent fields\n+                    </seealso>\n+                </indexterm>\n+                <indexterm zone=\"read-only\">\n+                    <primary>\n+                        persistent fields\n+                    </primary>\n+                    <secondary>\n+                        read only\n+                    </secondary>\n+                </indexterm>\n                 <para>\n-                  <ulink url=\"../apidocs/org/apache/openjpa/persistence/ElementType.html\">\n-                    <classname>org.apache.openjpa.persistence.ElementType\n-            </classname>\n-                  </ulink>\n+The read-only extension makes a field unwritable. The extension only applies to\n+existing persistent objects; new object fields are always writeable.\n                 </para>\n-              </listitem>\n-              <listitem>\n                 <para>\n-                  <ulink url=\"../apidocs/org/apache/openjpa/persistence/KeyType.html\">\n-                    <classname>org.apache.openjpa.persistence.KeyType\n-            </classname>\n-                  </ulink>\n+To mark a field read-only in JPA metadata, set the\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/ReadOnly.html\">\n+<classname>org.apache.openjpa.persistence.ReadOnly</classname></ulink>\n+annotation to a\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/UpdateAction.html\">\n+<classname>org.apache.openjpa.persistence.UpdateAction</classname></ulink> enum\n+value. The <classname>UpdateAction</classname> enum includes:\n                 </para>\n-              </listitem>\n-            </itemizedlist>\n-          </section>\n-          <section id=\"externalizer\">\n-            <title>Externalizer</title>\n-            <indexterm zone=\"externalizer\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>externalizer</tertiary>\n-              <seealso>externalization</seealso>\n-            </indexterm>\n-            <para>\n-        The \n-        <phrase>\n-        JPA \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/Externalizer.html\"><classname>org.apache.openjpa.persistence.Externalizer</classname></ulink>\n-        annotation\n-        </phrase>\n-        \n-        \n-        names a method to transform a field value into a value of \n-        another type.  See <xref linkend=\"ref_guide_pc_extern\"/>\n-        for details.\n-        </para>\n-          </section>\n-          <section id=\"factory\">\n-            <title>Factory</title>\n-            <indexterm zone=\"factory\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>factory</tertiary>\n-              <seealso>externalization</seealso>\n-            </indexterm>\n-            <para>\n-        The \n-        <phrase>\n-        JPA <ulink url=\"../apidocs/org/apache/openjpa/persistence/Factory.html\"><classname>org.apache.openjpa.persistence.Factory</classname></ulink>\n-        annotation\n-        </phrase>\n-        \n-        \n-        names a method to re-create a field value from its \n-        externalized form.  See <xref linkend=\"ref_guide_pc_extern\"/> \n-        for details.\n-        </para>\n-          </section>\n-          <section id=\"external-values\">\n-            <title>External Values</title>\n-            <indexterm zone=\"factory\">\n-              <primary>metadata</primary>\n-              <secondary>extensions</secondary>\n-              <tertiary>external values</tertiary>\n-              <seealso>externalization</seealso>\n-            </indexterm>\n-            <para>\n-        The \n-        <phrase>\n-        JPA \n-        <ulink url=\"../apidocs/org/apache/openjpa/persistence/ExternalValues.html\"><classname>org.apache.openjpa.persistence.ExternalValues</classname></ulink>\n-        annotation\n-        </phrase>\n-        \n-        \n-        declares values for transformation of simple fields\n-        to different constant values in the datastore.\n-        See <xref linkend=\"ref_guide_pc_extern_values\"/> for details.\n-        </para>\n-          </section>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>UpdateAction.IGNORE</literal>: Updates to the field are completely\n+ignored. The field is not considered dirty. The new value will not even get\n+stored in the OpenJPA <link linkend=\"ref_guide_cache\">data cache</link>.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>UpdateAction.RESTRICT</literal>: Any attempt to change the field will\n+result in an immediate exception.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </section>\n+            <section id=\"type\">\n+                <title>\n+                    Type\n+                </title>\n+                <indexterm zone=\"type\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        type\n+                    </tertiary>\n+                    <seealso>\n+                        persistent fields\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+OpenJPA has three levels of support for relations:\n+                </para>\n+                <orderedlist>\n+                    <listitem>\n+                        <para>\n+Relations that hold a reference to an object of a concrete persistent class are\n+supported by storing the primary key values of the related instance in the\n+database.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Relations that hold a reference to an object of an unknown persistent class are\n+supported by storing the stringified identity value of the related instance.\n+This level of support does not allow queries across the relation.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Relations that hold an unknown object or interface. The only way to support\n+these relations is to serialize their value to the database. This does not allow\n+you to query the field, and is not very efficient.\n+                        </para>\n+                    </listitem>\n+                </orderedlist>\n+                <para>\n+Clearly, when you declare a field's type to be another persistence-capable\n+class, OpenJPA uses level 1 support. By default, OpenJPA assumes that any\n+interface-typed fields you declare will be implemented only by other persistent\n+classes, and assigns interfaces level 2 support. The exception to this rule is\n+the <classname>java.io.Serializable</classname> interface. If you declare a\n+field to be of type <classname>Serializable</classname>, OpenJPA lumps it\n+together with <classname>java.lang.Object</classname> fields and other\n+non-interface, unrecognized field types, which are all assigned level 3 support.\n+                </para>\n+                <para>\n+With OpenJPA's type family of metadata extensions, you can control the level of\n+support given to your unknown/interface-typed fields. Setting the value of this\n+extension to <phrase><classname>Entity</classname></phrase> indicates that the\n+field value will always be some persistent object, and gives level 2 support.\n+Setting the value of this extension to the class of a concrete persistent type\n+is even better; it gives you level 1 support (just as if you had declared your\n+field to be of that type in the first place). Setting this extension to\n+<classname>Object</classname> uses level 3 support. This is useful when you have\n+an interface relation that may <emphasis role=\"bold\">not</emphasis> hold other\n+persistent objects (recall that OpenJPA assumes interface fields will always\n+hold persistent instances by default).\n+                </para>\n+                <para>\n+This extension is also used with OpenJPA's externalization feature, described in\n+<xref linkend=\"ref_guide_pc_extern\"></xref>.\n+                </para>\n+                <para>\n+OpenJPA defines the following type annotations for field values, collection,\n+array, and map elements, and map keys, respectively:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/Type.html\"><classname>\n+org.apache.openjpa.persistence.Type</classname></ulink>\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/ElementType.html\">\n+<classname>org.apache.openjpa.persistence.ElementType</classname></ulink>\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/KeyType.html\"><classname>\n+org.apache.openjpa.persistence.KeyType</classname></ulink>\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </section>\n+            <section id=\"externalizer\">\n+                <title>\n+                    Externalizer\n+                </title>\n+                <indexterm zone=\"externalizer\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        externalizer\n+                    </tertiary>\n+                    <seealso>\n+                        externalization\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+The <phrase> JPA\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/Externalizer.html\">\n+<classname>org.apache.openjpa.persistence.Externalizer</classname></ulink>\n+annotation</phrase> names a method to transform a field value into a value of\n+another type. See <xref linkend=\"ref_guide_pc_extern\"></xref> for details.\n+                </para>\n+            </section>\n+            <section id=\"factory\">\n+                <title>\n+                    Factory\n+                </title>\n+                <indexterm zone=\"factory\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        factory\n+                    </tertiary>\n+                    <seealso>\n+                        externalization\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+The <phrase> JPA\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/Factory.html\"><classname>\n+org.apache.openjpa.persistence.Factory</classname></ulink> annotation</phrase>\n+names a method to re-create a field value from its externalized form. See\n+<xref linkend=\"ref_guide_pc_extern\"></xref> for details.\n+                </para>\n+            </section>\n+            <section id=\"external-values\">\n+                <title>\n+                    External Values\n+                </title>\n+                <indexterm zone=\"factory\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        external values\n+                    </tertiary>\n+                    <seealso>\n+                        externalization\n+                    </seealso>\n+                </indexterm>\n+                <para>\n+The <phrase> JPA\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/ExternalValues.html\">\n+<classname>org.apache.openjpa.persistence.ExternalValues</classname></ulink>\n+annotation</phrase> declares values for transformation of simple fields to\n+different constant values in the datastore. See\n+<xref linkend=\"ref_guide_pc_extern_values\"></xref> for details.\n+                </para>\n+            </section>\n         </section>\n         <section id=\"ref_guide_meta_example\">\n-          <title>Example</title>\n-          <para>\n-      The following example shows you how to specify extensions in \n-      metadata.\n-      </para>\n-          <example id=\"ref_guide_metaex\">\n-            <title>OpenJPA Metadata Extensions</title>\n-            <programlisting format=\"linespecific\">\n+            <title>\n+                Example\n+            </title>\n+            <para>\n+The following example shows you how to specify extensions in metadata.\n+            </para>\n+            <example id=\"ref_guide_metaex\">\n+                <title>\n+                    OpenJPA Metadata Extensions\n+                </title>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n @Entity\n@@ -970,7 +1071,7 @@ public class Magazine\n     ...\n }\n </programlisting>\n-          </example>\n+            </example>\n         </section>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"05239e2db9545922ee282fbe92ae09f81a5b1b13","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":759,"deletions":526,"changes":1285,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,524 +1,692 @@\n-\n-    <chapter id=\"ref_guide_optimization\">\n-      <title>Optimization Guidelines</title>\n-      <indexterm zone=\"ref_guide_optimization\">\n-        <primary>optimization guidelines</primary>\n-      </indexterm>\n-      <para>\n-  There are numerous techniques you can use in order to ensure that OpenJPA \n-  operates in the fastest and most efficient manner. Following are some \n-  guidelines. Each describes what impact it will have on performance and\n-  scalability. Note that general guidelines regarding performance or\n-  scalability issues are just that - guidelines. Depending on the\n-  particular characteristics of your application, the optimal settings\n-  may be considerably different than what is outlined below.\n-  </para>\n-      <para>\n-  In the following table, each row is labeled with a list of\n-  italicized keywords. These keywords identify what characteristics\n-  the row in question may improve upon.  Many of the rows are marked with \n-  one or both of the <emphasis>performance</emphasis> and \n-  <emphasis>scalability</emphasis> labels. It is important to bear\n-  in mind the differences between performance and scalability (for the\n-  most part, we are referring to system-wide scalability, and not\n-  necessarily only scalability within a single JVM). The\n-  performance-related hints will probably improve the performance of\n-  your application for a given user load, whereas the\n-  scalability-related hints will probably increase the total number of\n-  users that your application can service. Sometimes, increasing\n-  performance will decrease scalability, and vice versa. Typically,\n-  options that reduce the amount of work done on the database server\n-  will improve scalability, whereas those that push more work onto the\n-  server will have a negative impact on scalability.\n-  </para>\n-      <table>\n-        <title>Optimization Guidelines</title>\n+<chapter id=\"ref_guide_optimization\">\n+    <title>\n+        Optimization Guidelines\n+    </title>\n+    <indexterm zone=\"ref_guide_optimization\">\n+        <primary>\n+            optimization guidelines\n+        </primary>\n+    </indexterm>\n+    <para>\n+There are numerous techniques you can use in order to ensure that OpenJPA\n+operates in the fastest and most efficient manner. Following are some\n+guidelines. Each describes what impact it will have on performance and\n+scalability. Note that general guidelines regarding performance or scalability\n+issues are just that - guidelines. Depending on the particular characteristics\n+of your application, the optimal settings may be considerably different than\n+what is outlined below.\n+    </para>\n+    <para>\n+In the following table, each row is labeled with a list of italicized keywords.\n+These keywords identify what characteristics the row in question may improve\n+upon. Many of the rows are marked with one or both of the <emphasis>performance\n+</emphasis> and <emphasis>scalability</emphasis> labels. It is important to bear\n+in mind the differences between performance and scalability (for the most part,\n+we are referring to system-wide scalability, and not necessarily only\n+scalability within a single JVM). The performance-related hints will probably\n+improve the performance of your application for a given user load, whereas the\n+scalability-related hints will probably increase the total number of users that\n+your application can service. Sometimes, increasing performance will decrease\n+scalability, and vice versa. Typically, options that reduce the amount of work\n+done on the database server will improve scalability, whereas those that push\n+more work onto the server will have a negative impact on scalability.\n+    </para>\n+    <table>\n+        <title>\n+            Optimization Guidelines\n+        </title>\n         <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n-          <colspec colname=\"name\"/>\n-          <colspec colname=\"desc\" colwidth=\"4*\"/>\n-          <tbody valign=\"top\">\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Optimize database indexes</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+            <colspec colname=\"name\">\n+            </colspec>\n+            <colspec colname=\"desc\" colwidth=\"4*\">\n+            </colspec>\n+            <tbody valign=\"top\">\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Optimize database indexes\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           The default set of indexes created by OpenJPA's mapping \n           tool may not always be the most appropriate for your \n           application. Manually setting indexes in your mapping\n           metadata or manually manipulating database indexes to \n           include frequently-queried fields (as well as dropping \n           indexes on rarely-queried fields) can yield significant \n           performance benefits.\n-          <para>\n-          A database must do extra work on insert, update, and\n-          delete to maintain an index. This extra work will benefit\n-          selects with WHERE clauses, which will execute much faster\n-          when the terms in the WHERE clause are appropriately\n-          indexed. So, for a read-mostly application, appropriate\n-          indexing will slow down updates (which are rare) but greatly\n-          accelerate reads. This means that the system as a whole will\n-          be faster, and also that the database will experience less\n-          load, meaning that the system will be more scalable.\n-          </para>\n-          <para>\n-          Bear in mind that over-indexing is a bad thing, both\n-          for scalability and performance, especially for applications\n-          that perform lots of inserts, updates, or deletes.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use the best JDBC driver</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability, reliability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                        <para>\n+A database must do extra work on insert, update, and delete to maintain an\n+index. This extra work will benefit selects with WHERE clauses, which will\n+execute much faster when the terms in the WHERE clause are appropriately\n+indexed. So, for a read-mostly application, appropriate indexing will slow down\n+updates (which are rare) but greatly accelerate reads. This means that the\n+system as a whole will be faster, and also that the database will experience\n+less load, meaning that the system will be more scalable.\n+                        </para>\n+                        <para>\n+Bear in mind that over-indexing is a bad thing, both for scalability and\n+performance, especially for applications that perform lots of inserts, updates,\n+or deletes.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use the best JDBC driver\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability, reliability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           The JDBC driver provided by the database vendor is not \n           always the fastest and most efficient. Some JDBC drivers \n           do not support features like batched statements, the lack \n           of which can significantly slow down OpenJPA's data access\n           and increase load on the database, reducing system \n           performance and scalability.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">JVM optimizations</emphasis>\n-                <para>\n-                  <emphasis>performance, reliability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            JVM optimizations\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, reliability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           Manipulating various parameters of the Java Virtual Machine\n           (such as hotspot compilation modes and the maximum memory)\n           can result in performance improvements. For more details\n           about optimizing the JVM execution environment, please see \n-          <ulink url=\"http://java.sun.com/docs/hotspot/PerformanceFAQ.html\"/>.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use the data cache</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n-          Using OpenJPA's <link linkend=\"ref_guide_cache\">data and \n-          query caching</link> features can often result \n+          \n+                        <ulink url=\"http://java.sun.com/docs/hotspot/PerformanceFAQ.html\">\n+                        </ulink>\n+                        .\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use the data cache\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n+          Using OpenJPA's \n+                        <link linkend=\"ref_guide_cache\">\n+                            data and \n+          query caching\n+                        </link>\n+                         features can often result \n           in a dramatic improvement in performance. Additionally, \n           these caches can significantly reduce the amount of load on\n           the database, increasing the scalability characteristics of\n           your application.  Also, be sure to read about the \n-          <link linkend=\"ref_guide_cache_concurrent\">concurrent cache\n-          </link> option to see if it fits your needs.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Set <literal>LargeTransaction\n-          </literal> to true, or set <literal>PopulateDataCache\n-          </literal> to false</emphasis>\n-                <para>\n-                  <emphasis>performance vs. scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n-          When using OpenJPA's <link linkend=\"ref_guide_cache\">data \n-          caching</link> features (available in OpenJPA JDO \n+          \n+                        <link linkend=\"ref_guide_cache_concurrent\">\n+                            concurrent cache\n+          \n+                        </link>\n+                         option to see if it fits your needs.\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Set \n+                            <literal>\n+                                LargeTransaction\n+          \n+                            </literal>\n+                             to true, or set \n+                            <literal>\n+                                PopulateDataCache\n+          \n+                            </literal>\n+                             to false\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance vs. scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n+          When using OpenJPA's \n+                        <link linkend=\"ref_guide_cache\">\n+                            data \n+          caching\n+                        </link>\n+                         features (available in OpenJPA JDO \n           Performance Pack and Enterprise Edition) \n           in a transaction that will delete, modify, or create \n-          a very large number of objects you can set <literal>\n-          LargeTransaction</literal> to true and perform periodic \n+          a very large number of objects you can set \n+                        <literal>\n+                            \n+          LargeTransaction\n+                        </literal>\n+                         to true and perform periodic \n           flushes during your transaction to reduce its memory \n           requirements.  See the Javadoc:\n-          <phrase><ulink url=\"javadoc/openjpa/persistence/OpenJPAEntityManager.html\">\n-          OpenJPAEntityManager.setLargeTransaction</ulink></phrase>\n+          \n+                        <phrase>\n+                            <ulink url=\"javadoc/openjpa/persistence/OpenJPAEntityManager.html\">\n+                                \n+          OpenJPAEntityManager.setLargeTransaction\n+                            </ulink>\n+                        </phrase>\n+                        \n           \n           \n           Note that transactions in large mode have to\n           more aggressively flush items from the data cache.\n-          <para>\n-          If your transaction will visit objects that you know\n-          are very unlikely to be accessed by other transactions,\n-          for example an exhaustive report run only once a month,\n-          you can turn off population of the data cache so that\n-          the transaction doesn't fill the entire data cache with\n-          objects that won't be accessed again.\n-          Again, see the Javadoc: \n-          <phrase><ulink url=\"javadoc/openjpa/persistence/OpenJPAEntityManager.html\">\n-          OpenJPAEntityManager.setPopulateDataCache</ulink></phrase>\n-          \n-          \n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Disable logging, performance \n-          tracking</emphasis>\n-                <para>\n-                  <emphasis>performance</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                        <para>\n+If your transaction will visit objects that you know are very unlikely to be\n+accessed by other transactions, for example an exhaustive report run only once a\n+month, you can turn off population of the data cache so that the transaction\n+doesn't fill the entire data cache with objects that won't be accessed again.\n+Again, see the Javadoc: <phrase>\n+<ulink url=\"javadoc/openjpa/persistence/OpenJPAEntityManager.html\">\n+OpenJPAEntityManager.setPopulateDataCache</ulink></phrase>\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Disable logging, performance \n+          tracking\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           Developer options such as verbose logging and the \n           JDBC performance tracker can result in serious performance \n           hits for your application. Before evaluating OpenJPA's\n           performance, these options should all be disabled.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Set <literal>IgnoreChanges</literal> \n-          to true, or set <literal>FlushBeforeQueries</literal> to \n-          true</emphasis>\n-                <para>\n-                  <emphasis>performance vs. scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-          When both the <link linkend=\"openjpa.IgnoreChanges\"><literal>openjpa.IgnoreChanges</literal></link> and \n-          <link linkend=\"openjpa.FlushBeforeQueries\"><literal>\n-          openjpa.FlushBeforeQueries</literal></link> properties are set\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Set \n+                            <literal>\n+                                IgnoreChanges\n+                            </literal>\n+                             \n+          to true, or set \n+                            <literal>\n+                                FlushBeforeQueries\n+                            </literal>\n+                             to \n+          true\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance vs. scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n+          When both the \n+                        <link linkend=\"openjpa.IgnoreChanges\">\n+                            <literal>\n+                                openjpa.IgnoreChanges\n+                            </literal>\n+                        </link>\n+                         and \n+          \n+                        <link linkend=\"openjpa.FlushBeforeQueries\">\n+                            <literal>\n+                                \n+          openjpa.FlushBeforeQueries\n+                            </literal>\n+                        </link>\n+                         properties are set\n           to false, OpenJPA needs to consider in-memory dirty instances \n           during queries.  This can sometimes result in OpenJPA needing \n           to evaluate the entire extent objects in order to \n           return the correct query results, which can have drastic \n           performance consequences.  If it is appropriate for your \n           application, configuring \n-          <literal>FlushBeforeQueries</literal>\n+          \n+                        <literal>\n+                            FlushBeforeQueries\n+                        </literal>\n+                        \n           to automatically flush before queries involving dirty\n           objects will ensure that this never\n-          happens. Setting <literal>IgnoreChanges</literal> to \n+          happens. Setting \n+                        <literal>\n+                            IgnoreChanges\n+                        </literal>\n+                         to \n           false will result in a small performance hit even if \n-          <literal>FlushBeforeQueries</literal> is true, as \n+          \n+                        <literal>\n+                            FlushBeforeQueries\n+                        </literal>\n+                         is true, as \n           incremental flushing is not as efficient overall as \n           delaying all flushing to a single operation during commit. \n           This is because incrementally flushing decreases OpenJPA's \n           ability to maximize statement batching, and increases \n           resource utilization.\n-          <para>\n-          Note that the default setting of \n-          <literal>FlushBeforeQueries</literal> is \n-          <literal>with-connection</literal>, which means that data \n-          will be flushed only if a dedicated connection is already \n-          in use by the <classname>EntityManager</classname>. \n-          So, the default value may not be appropriate for you.\n-          </para>\n-          \n-          \n-          <para>\n-          Setting <literal>IgnoreChanges</literal> to \n-          <literal>true</literal> will help performance, since dirty\n-          objects can be ignored for queries, meaning that \n-          incremental flushing or client-side processing\n-          is not necessary. It will also improve scalability, since \n-          overall database server usage is diminished.  On the other \n-          hand, setting <literal>IgnoreChanges</literal> to \n-          <literal>false</literal> will have a negative impact on\n-          scalability, even when using automatic flushing before\n-          queries, since more operations will be performed on the\n-          database server.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Configure <literal>\n-          openjpa.ConnectionRetainMode</literal> appropriately</emphasis>\n-                <para>\n-                  <emphasis>performance vs. scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-          The <link linkend=\"openjpa.ConnectionRetainMode\"><literal>\n-          ConnectionRetainMode</literal></link> configuration option \n+          \n+                        <para>\n+Note that the default setting of <literal>FlushBeforeQueries</literal> is\n+<literal>with-connection</literal>, which means that data will be flushed only\n+if a dedicated connection is already in use by the <classname>EntityManager\n+</classname>. So, the default value may not be appropriate for you.\n+                        </para>\n+                        <para>\n+Setting <literal>IgnoreChanges</literal> to <literal>true</literal> will help\n+performance, since dirty objects can be ignored for queries, meaning that\n+incremental flushing or client-side processing is not necessary. It will also\n+improve scalability, since overall database server usage is diminished. On the\n+other hand, setting <literal>IgnoreChanges</literal> to <literal>false</literal>\n+will have a negative impact on scalability, even when using automatic flushing\n+before queries, since more operations will be performed on the database server.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Configure \n+                            <literal>\n+                                \n+          openjpa.ConnectionRetainMode\n+                            </literal>\n+                             appropriately\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance vs. scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n+          The \n+                        <link linkend=\"openjpa.ConnectionRetainMode\">\n+                            <literal>\n+                                \n+          ConnectionRetainMode\n+                            </literal>\n+                        </link>\n+                         configuration option \n           controls when OpenJPA will obtain a connection, and how long \n           it will hold that connection. The optimal settings for this\n           option will vary considerably depending on the particular \n           behavior of your application. You may even benefit from \n           using different retain modes for different parts of your\n           application.\n-          <para>\n-          The default setting of <literal>on-demand</literal> \n-          minimizes the amount of time that OpenJPA holds onto a \n-          datastore connection. This is generally the best option \n-          from a scalability standpoind, as database resources are \n-          held for a minimal amount of time. However, if your \n-          connection pool is overly small relative to the number of \n-          concurrent sessions that need access to the \n-          database, or if your <classname>DataSource</classname> is \n-          not efficient at managing its pool, then this default value \n-          could cause undesirable pool contention.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Ensure that batch updates are \n-          available</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                        <para>\n+The default setting of <literal>on-demand</literal> minimizes the amount of time\n+that OpenJPA holds onto a datastore connection. This is generally the best\n+option from a scalability standpoind, as database resources are held for a\n+minimal amount of time. However, if your connection pool is overly small\n+relative to the number of concurrent sessions that need access to the database,\n+or if your <classname>DataSource</classname> is not efficient at managing its\n+pool, then this default value could cause undesirable pool contention.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Ensure that batch updates are \n+          available\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           When performing bulk inserts, updates, or deletes, OpenJPA \n           will use batched statements. If this feature is not \n           available in your JDBC driver, then OpenJPA will need to \n           issue multiple SQL statements instead of a single batch \n           statement.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use \n-          flat inheritance</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability vs. disk space</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use \n+          flat inheritance\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability vs. disk space</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           Mapping inheritance hierarchies to a single database table\n           is faster for most operations than other strategies\n           employing multiple tables. If it is appropriate for your \n           application, you should use this strategy whenever possible.\n-          <para>\n-          However, this strategy will require more disk \n-          space on the database side. Disk space is relatively \n-          inexpensive, but if your object featureSelection is particularly \n-          large, it can become a factor.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">High sequence increment</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                        <para>\n+However, this strategy will require more disk space on the database side. Disk\n+space is relatively inexpensive, but if your object featureSelection is particularly large,\n+it can become a factor.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            High sequence increment\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           For applications that perform large bulk inserts, the \n           retrieval of sequence numbers can be a bottleneck. \n           Increasing sequence increments and using table-based rather\n           than native database sequences can reduce or eliminate \n           this bottleneck. In some cases,\n           implementing your own sequence factory can further optimize\n           sequence number retrieval.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use optimistic transactions</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use optimistic transactions\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n           Using datastore transactions translates into pessimistic \n           database row locking, which can be a performance hit \n           (depending on the database). If appropriate for your \n           application, optimistic transactions are typically faster \n           than datastore transactions.\n-          <para>\n-          Optimistic transactions provide the same transactional\n-          guarantees as datastore transactions, except that you must\n-          handle a potential optimistic verification exception at the\n-          end of a transaction instead of assuming that a transaction\n-          will successfully complete. In many applications, it is\n-          unlikely that different concurrent transactions will operate\n-          on the same set of data at the same time, so optimistic\n-          verification increases the concurrency, and therefore both\n-          the performance and scalability characteristics, of the\n-          application. A common approach to handling optimistic\n-          verification exceptions is to simply present the end user\n-          with the fact that concurrent modifications happened, and\n-          require that the user redo any work.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use query aggregates and projections\n-          </emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n+          \n+                        <para>\n+Optimistic transactions provide the same transactional guarantees as datastore\n+transactions, except that you must handle a potential optimistic verification\n+exception at the end of a transaction instead of assuming that a transaction\n+will successfully complete. In many applications, it is unlikely that different\n+concurrent transactions will operate on the same set of data at the same time,\n+so optimistic verification increases the concurrency, and therefore both the\n+performance and scalability characteristics, of the application. A common\n+approach to handling optimistic verification exceptions is to simply present the\n+end user with the fact that concurrent modifications happened, and require that\n+the user redo any work.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use query aggregates and projections\n+          \n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n           Using aggregates to compute reporting data on the database\n           server can drastically speed up queries.  Similarly, using\n           projections when you are interested in specific\n           object fields or relations rather than the entire object\n           state can reduce the amount of data OpenJPA must transfer\n           from the database to your application.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Always close resources</emphasis>\n-                <para>\n-                  <emphasis>scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-                <para>  \n-          Under certain settings, <classname>\n-          EntityManager</classname>s, OpenJPA <classname>Extent\n-          </classname> iterators, and <classname>Query</classname> \n-          results may be backed by resources in the database.  \n-          </para>\n-                <para>\n-          For example, if you have\n-          configured OpenJPA to use scrollable cursors and lazy object\n-          instantiation by default, each query result will hold open \n-          a <classname>ResultSet</classname> object, which, in turn, \n-          will hold open a <classname>Statement</classname> object \n-          (preventing it from being re-used).  Garbage collection \n-          will clean up these resources, so it is never necessary to \n-          explicitly close them, but it is always faster if it is \n-          done at the application level.\n-          </para>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Optimize connection pool \n-          settings</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-                <para>\n-            OpenJPA's built-in connection pool's default settings may\n-          not be optimal for all applications. For applications that\n-          instantiate and close many <classname>\n-          EntityManager</classname>s (such as a\n-          web application), increasing the size of the connection\n-          pool will reduce the overhead of waiting on free connections\n-          or opening new connections.  \n-          </para>\n-                <para>\n-          You may want to tune the \n-          prepared statement pool size with the connection pool size.\n-          </para>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use detached state managers</emphasis>\n-                <para>\n-                  <emphasis>performance</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-                <para>\n-          Attaching and even persisting instances can be more \n-          efficient when your detached objects use detached state \n-          managers.  By default, OpenJPA does not use detached state \n-          managers when serializing an instance across tiers.  See \n-          <xref linkend=\"ref_guide_detach_graph\"/> for how to force\n-          OpenJPA to use detached state managers across tiers, and for\n-          other options for more efficient attachment.\n-          </para>\n-                <para>\n-          The downside of using a detached state manager\n-          across tiers is that your enhanced persistent classes and\n-          the OpenJPA libraries must be available on the client tier.\n-          </para>\n-              </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Utilize the <classname>\n-          EntityManager</classname> cache</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"> \n-          When possible and appropriate, re-using <classname>\n-          EntityManager</classname>s and setting the \n-          <link linkend=\"openjpa.RetainState\"><literal>\n-          RetainState</literal></link> configuration option to \n-          <literal>true</literal> may result in significant \n-          performance gains, since the <classname>\n-          EntityManager</classname>'s built-in\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Always close resources\n+                        </emphasis>\n+                        <para>\n+<emphasis>scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        <para>\n+Under certain settings, <classname> EntityManager</classname> s, OpenJPA\n+<classname>Extent</classname> iterators, and <classname>Query</classname>\n+results may be backed by resources in the database.\n+                        </para>\n+                        <para>\n+For example, if you have configured OpenJPA to use scrollable cursors and lazy\n+object instantiation by default, each query result will hold open a <classname>\n+ResultSet</classname> object, which, in turn, will hold open a <classname>\n+Statement</classname> object (preventing it from being re-used). Garbage\n+collection will clean up these resources, so it is never necessary to explicitly\n+close them, but it is always faster if it is done at the application level.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Optimize connection pool \n+          settings\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        <para>\n+OpenJPA's built-in connection pool's default settings may not be optimal for all\n+applications. For applications that instantiate and close many <classname>\n+EntityManager</classname>s (such as a web application), increasing the size of\n+the connection pool will reduce the overhead of waiting on free connections or\n+opening new connections.\n+                        </para>\n+                        <para>\n+You may want to tune the prepared statement pool size with the connection pool\n+size.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use detached state managers\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        <para>\n+Attaching and even persisting instances can be more efficient when your detached\n+objects use detached state managers. By default, OpenJPA does not use detached\n+state managers when serializing an instance across tiers. See\n+<xref linkend=\"ref_guide_detach_graph\"></xref> for how to force OpenJPA to use\n+detached state managers across tiers, and for other options for more efficient\n+attachment.\n+                        </para>\n+                        <para>\n+The downside of using a detached state manager across tiers is that your\n+enhanced persistent classes and the OpenJPA libraries must be available on the\n+client tier.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Utilize the \n+                            <classname>\n+                                \n+          EntityManager\n+                            </classname>\n+                             cache\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                         \n+          When possible and appropriate, re-using \n+                        <classname>\n+                            \n+          EntityManager\n+                        </classname>\n+                        s and setting the \n+          \n+                        <link linkend=\"openjpa.RetainState\">\n+                            <literal>\n+                                \n+          RetainState\n+                            </literal>\n+                        </link>\n+                         configuration option to \n+          \n+                        <literal>\n+                            true\n+                        </literal>\n+                         may result in significant \n+          performance gains, since the \n+                        <classname>\n+                            \n+          EntityManager\n+                        </classname>\n+                        's built-in\n           object cache will be used.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Enable multithreaded operation only \n-          when necessary</emphasis>\n-                <para>\n-                  <emphasis>performance</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-          OpenJPA respects the <link linkend=\"openjpa.Multithreaded\"><literal>openjpa.Multithreaded</literal></link> option in\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Enable multithreaded operation only \n+          when necessary\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n+          OpenJPA respects the \n+                        <link linkend=\"openjpa.Multithreaded\">\n+                            <literal>\n+                                openjpa.Multithreaded\n+                            </literal>\n+                        </link>\n+                         option in\n           that it does not impose synchronization overhead for\n           applications that set this value to \n-          <literal>false</literal>. If your application is \n+          \n+                        <literal>\n+                            false\n+                        </literal>\n+                        . If your application is \n           guaranteed to only use single-threaded access to OpenJPA\n           resources and persistent objects, setting this option to \n-          <literal>false</literal> will result\n+          \n+                        <literal>\n+                            false\n+                        </literal>\n+                         will result\n           in the elimination of synchronization overhead, and may \n           result in a modest performance increase.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Enable large data set \n-          handling</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Enable large data set \n+          handling\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n           If you execute queries that return large numbers of objects\n           or have relations (collections or maps) that are large, and\n           if you often only access parts of these data sets, enabling\n-          <link linkend=\"ref_guide_dbsetup_lrs\">large result set \n-          handling</link> where appropriate can\n+          \n+                        <link linkend=\"ref_guide_dbsetup_lrs\">\n+                            large result set \n+          handling\n+                        </link>\n+                         where appropriate can\n           dramatically speed up your application, since OpenJPA will\n           bring the data sets into memory from the database only as\n           necessary.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Disable large data set handling\n-          </emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Disable large data set handling\n+          \n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n           If you have enabled scrollable result sets and on-demand \n           loading but do you not require it, consider disabling it \n           again.  Some JDBC drivers and databases (SQLServer for \n           example) are much slower when used with scrolling result \n           sets.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use short discriminator values, or\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use short discriminator values, or\n           turn off the discriminator\n-          </emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n+          \n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n           The default discriminator strategy of storing the class\n           name in the discriminator column is quite robust, in that \n           it can handle any class and needs no configuration, but \n@@ -531,136 +699,201 @@\n           since the subclass indicator data can become a significant \n           proportion of the data transferred between the JVM and \n           the database.\n-          <para>\n-          Alternately, if certain persistent classes in your \n-          application do not make use of inheritance, then you can \n-          disable the discriminator for these classes altogether.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use the <classname>\n-          DynamicSchemaFactory</classname></emphasis>\n-                <para>\n-                  <emphasis>performance, validation</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-          If you are using a <link linkend=\"openjpa.jdbc.SchemaFactory\"><literal>openjpa.jdbc.SchemaFactory</literal></link> setting\n-          of something other than the default of <literal>\n-          dynamic</literal>, consider switching back.  While other\n+          \n+                        <para>\n+Alternately, if certain persistent classes in your application do not make use\n+of inheritance, then you can disable the discriminator for these classes\n+altogether.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use the \n+                            <classname>\n+                                \n+          DynamicSchemaFactory\n+                            </classname>\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, validation</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n+          If you are using a \n+                        <link linkend=\"openjpa.jdbc.SchemaFactory\">\n+                            <literal>\n+                                openjpa.jdbc.SchemaFactory\n+                            </literal>\n+                        </link>\n+                         setting\n+          of something other than the default of \n+                        <literal>\n+                            \n+          dynamic\n+                        </literal>\n+                        , consider switching back.  While other\n           factories can ensure that object-relational mapping \n           information is valid when a persistent class is first used,\n           this can be a slow process.  Though the validation is only \n           performed once for each class, switching back to the\n-          <classname>DynamicSchemaFactory</classname> \n+          \n+                        <classname>\n+                            DynamicSchemaFactory\n+                        </classname>\n+                         \n           can reduce the warm-up time for your application.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Do not use XA transactions</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\"><link linkend=\"ref_guide_enterprise_xa\">XA transactions\n-          </link> can be orders of magnitude slower than standard \n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Do not use XA transactions\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        <link linkend=\"ref_guide_enterprise_xa\">\n+                            XA transactions\n+          \n+                        </link>\n+                         can be orders of magnitude slower than standard \n           transactions. Unless distributed transaction functionality \n           is required by your application, use standard transactions.\n-          <para>\n-          Recall that XA transactions are distinct from\n-          managed transactions - managed transaction services\n-          such as that provided by EJB declarative transactions\n-          can be used both with XA and non-XA transactions. XA\n-          transactions should only be used when a given business\n-          transaction involves multiple different transactional\n-          resources (an Oracle database and an IBM transactional\n-          message queue, for example).\n-          </para></entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use <classname>Set</classname>s \n-          instead of <classname>List/Collection</classname>s\n-          </emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n+          \n+                        <para>\n+Recall that XA transactions are distinct from managed transactions - managed\n+transaction services such as that provided by EJB declarative transactions can\n+be used both with XA and non-XA transactions. XA transactions should only be\n+used when a given business transaction involves multiple different transactional\n+resources (an Oracle database and an IBM transactional message queue, for\n+example).\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use \n+                            <classname>\n+                                Set\n+                            </classname>\n+                            s \n+          instead of \n+                            <classname>\n+                                List/Collection\n+                            </classname>\n+                            s\n+          \n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n           There is a small amount of extra overhead for OpenJPA to \n           maintain collections where each element is not guaranteed \n           to be unique.  If your application does not require \n           duplicates for a collection, you should always declare your\n-          fields to be of type <classname>Set, SortedSet, \n-          HashSet,</classname> or <classname>TreeSet</classname>.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use query parameters instead of\n-          encoding search data in filter strings</emphasis>\n-                <para>\n-                  <emphasis>performance</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n+          fields to be of type \n+                        <classname>\n+                            Set, SortedSet, \n+          HashSet,\n+                        </classname>\n+                         or \n+                        <classname>\n+                            TreeSet\n+                        </classname>\n+                        .\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use query parameters instead of\n+          encoding search data in filter strings\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n           If your queries depend on parameter data only known at\n           runtime, you should use query parameters rather than\n           dynamically building different query strings. OpenJPA\n           performs aggressive caching of query compilation\n           data, and the effectiveness of this cache is diminished if\n           multiple query filters are used where a single one could\n           have sufficed.\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Tune your fetch groups\n-          appropriately</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-          The <link linkend=\"ref_guide_fetch\">fetch groups</link>\n+          \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Tune your fetch groups\n+          appropriately\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n+          The \n+                        <link linkend=\"ref_guide_fetch\">\n+                            fetch groups\n+                        </link>\n+                        \n           used when loading an object control how much data is\n           eagerly loaded, and by extension, which fields must be\n           lazily loaded at a future time. The ideal fetch group\n           configuration loads all the data that is needed in one\n           fetch, and no extra fields - this minimizes both the\n           amount of data transferred from the database, and the\n           number of trips to the database.\n-          <para>\n-          If extra fields are specified in the fetch groups\n-          (in particular, large fields such as binary data, or\n-          relations to other persistence-capable objects), then\n-          network overhead (for the extra data) and database\n-          processing (for any necessary additional joins) will\n-          hurt your application's performance. If too few fields\n-          are specified in the fetch groups, then OpenJPA will have\n-          to make additional trips to the database to load\n-          additional fields as necessary.\n-          </para>\n-          </entry>\n-            </row>\n-            <row>\n-              <entry colname=\"name\">\n-                <emphasis role=\"bold\">Use eager fetching</emphasis>\n-                <para>\n-                  <emphasis>performance, scalability</emphasis>\n-                </para>\n-              </entry>\n-              <entry colname=\"desc\">\n-          Using <link linkend=\"ref_guide_perfpack_eager\">eager \n-          fetching</link> when loading subclass data or traversing \n+          \n+                        <para>\n+If extra fields are specified in the fetch groups (in particular, large fields\n+such as binary data, or relations to other persistence-capable objects), then\n+network overhead (for the extra data) and database processing (for any necessary\n+additional joins) will hurt your application's performance. If too few fields\n+are specified in the fetch groups, then OpenJPA will have to make additional\n+trips to the database to load additional fields as necessary.\n+                        </para>\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Use eager fetching\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+                        \n+          Using \n+                        <link linkend=\"ref_guide_perfpack_eager\">\n+                            eager \n+          fetching\n+                        </link>\n+                         when loading subclass data or traversing \n           relations for each instance in a large collection of \n           results can speed up data loading by orders of magnitude.\n-          </entry>\n-            </row>\n-          </tbody>\n+          \n+                    </entry>\n+                </row>\n+            </tbody>\n         </tgroup>\n-      </table>\n-    </chapter>\n+    </table>\n+</chapter>"},{"sha":"9e54a54efbad9539736ee9ef9bde96c9e74834da","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":2112,"deletions":2009,"changes":4121,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"45f751632c13ad00d3809946f982e50fc67209f9","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":639,"deletions":549,"changes":1188,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,351 +1,366 @@\n-\n-    <chapter id=\"ref_guide_remote\">\n-      <title>Remote and Offline Operation</title>\n-      <indexterm zone=\"ref_guide_remote\">\n-        <primary>remote</primary>\n-      </indexterm>\n-      <indexterm>\n-        <primary>offline</primary>\n-        <see>remote</see>\n-      </indexterm>\n-      <para>\n-  The standard JPA runtime environment is \n-  <emphasis>local</emphasis> and <emphasis>online</emphasis>.  It is \n-  <emphasis>local</emphasis> in that components such as \n-  <classname>EntityManager</classname>s and queries connect directly to\n-  the datastore and execute their actions in the same JVM as the code using \n-  them.  It is <emphasis>online</emphasis> in that all changes to managed \n-  objects must be made in the context of an active <classname>\n-  EntityManager</classname>.  \n-  These two properties, combined with the fact that <classname>\n-  EntityManager</classname>s cannot be serialized for storage or network \n-  transfer, make the standard JPA runtime difficult to \n-  incorporate into some enterprise and client/server program designs.\n-  </para>\n-      <para>\n-  OpenJPA extends the standard runtime to add <emphasis>remote</emphasis>\n-  and <emphasis>offline</emphasis> capabilities in the form of enhanced\n-  <link linkend=\"ref_guide_detach\">Detach and Attach APIs</link> and\n-  <link linkend=\"ref_guide_event\">Remote Commit Events</link>.\n-  The following sections explain these capabilities in detail.\n-  </para>\n-      <section id=\"ref_guide_detach\">\n-        <title>Detach and Attach</title>\n+<chapter id=\"ref_guide_remote\">\n+    <title>\n+        Remote and Offline Operation\n+    </title>\n+    <indexterm zone=\"ref_guide_remote\">\n+        <primary>\n+            remote\n+        </primary>\n+    </indexterm>\n+    <indexterm>\n+        <primary>\n+            offline\n+        </primary>\n+        <see>\n+            remote\n+        </see>\n+    </indexterm>\n+    <para>\n+The standard JPA runtime environment is <emphasis>local</emphasis> and\n+<emphasis>online</emphasis>. It is <emphasis>local</emphasis> in that components\n+such as <classname>EntityManager</classname>s and queries connect directly to\n+the datastore and execute their actions in the same JVM as the code using them.\n+It is <emphasis>online</emphasis> in that all changes to managed objects must be\n+made in the context of an active <classname> EntityManager</classname>. These\n+two properties, combined with the fact that <classname> EntityManager\n+</classname>s cannot be serialized for storage or network transfer, make the\n+standard JPA runtime difficult to incorporate into some enterprise and\n+client/server program designs.\n+    </para>\n+    <para>\n+OpenJPA extends the standard runtime to add <emphasis>remote</emphasis> and\n+<emphasis>offline</emphasis> capabilities in the form of enhanced\n+<link linkend=\"ref_guide_detach\">Detach and Attach APIs</link> and\n+<link linkend=\"ref_guide_event\">Remote Commit Events</link>. The following\n+sections explain these capabilities in detail.\n+    </para>\n+    <section id=\"ref_guide_detach\">\n+        <title>\n+            Detach and Attach\n+        </title>\n         <indexterm zone=\"ref_guide_detach\">\n-          <primary>detachment</primary>\n+            <primary>\n+                detachment\n+            </primary>\n         </indexterm>\n         <indexterm>\n-          <primary>attachment</primary>\n-          <see>detachment</see>\n+            <primary>\n+                attachment\n+            </primary>\n+            <see>\n+                detachment\n+            </see>\n         </indexterm>\n-<!-- ### EJBDOC : more specific links to EM detach discussion -->\n         <para>\n-    The JPA Overview describes the specification's standard \n-    detach and attach APIs in <xref linkend=\"jpa_overview_em\"/>.  \n-    This section enumerates OpenJPA's enhancements to the standard behavior.\n-    </para>\n+The JPA Overview describes the specification's standard detach and attach APIs\n+in <xref linkend=\"jpa_overview_em_lifecycle\"></xref>. This section enumerates \n+OpenJPA's enhancements to the standard behavior.\n+        </para>\n         <section id=\"ref_guide_detach_behavior\">\n-          <title>Detach Behavior</title>\n-          <indexterm zone=\"ref_guide_detach_behavior\">\n-            <primary>detachment</primary>\n-            <secondary>behavior</secondary>\n-          </indexterm>\n-          <para>\n-      In JPA, objects detach automatically when they are\n-      serialized or when a <link linkend=\"jpa_overview_emfactory_perscontext\">persistence \n-      context</link> ends.  The specification does not define any way to\n-      explicitly detach objects.  The extended \n-      <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\"><classname>OpenJPAEntityManager</classname></ulink>, however, allows \n-      you to explicitly detach objects at any time.\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            <title>\n+                Detach Behavior\n+            </title>\n+            <indexterm zone=\"ref_guide_detach_behavior\">\n+                <primary>\n+                    detachment\n+                </primary>\n+                <secondary>\n+                    behavior\n+                </secondary>\n+            </indexterm>\n+            <para>\n+In JPA, objects detach automatically when they are serialized or when a\n+<link linkend=\"jpa_overview_emfactory_perscontext\">persistence context</link>\n+ends. The specification does not define any way to explicitly detach objects.\n+The extended\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\">\n+<classname>OpenJPAEntityManager</classname></ulink>, however, allows you to\n+explicitly detach objects at any time.\n+            </para>\n+<programlisting>\n public Object detach (Object pc):\n public Object[] detachAll (Object... pcs):\n public Collection detachAll (Collection pcs):\n </programlisting>\n-          <para>\n-      Each detach method returns detached copies of the given instances.\n-      The copy mechanism is similar to serialization, except that only \n-      certain fields are traversed. We will see how to control which \n-      fields are detached in a later section.\n-      </para>\n-          <para><indexterm><primary>detachment</primary><secondary>of dirty objects</secondary></indexterm>\n-      When detaching an instance that has been modified in the current\n-      transaction (and thus made dirty), the current transaction\n-      is flushed. This means that when subsequently re-attaching \n-      the detached instances, OpenJPA assumes that the transaction from \n-      which they were originally detached was committed; if \n-      it has been rolled back, then the re-attachment process will throw \n-      an optimistic concurrency exception.\n-      </para>\n-          <para>\n-      You can stop OpenJPA from assuming the transaction will commit by\n-      invoking <methodname>OpenJPAEntityManager.setRollbackOnly</methodname> \n-      prior to detaching your objects.  Setting the \n-      <literal>RollbackOnly</literal> flag prevents OpenJPA from flushing \n-      when detaching dirty objects; instead OpenJPA just runs its pre-flush \n-      actions (see the \n-      <methodname>OpenJPAEntityManager.preFlush</methodname>\n-      <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\">\n-      Javadoc</ulink> for details).\n-      </para>\n-          <para>\n-      This allows you to use the same \n-      instances in multiple attach/modify/detach/rollback cycles.  \n-      Alternatively, you might also prevent a flush by making your \n-      modifications outside of a transaction (with \n-      <literal>NontransactionalWrite</literal> enabled) before detaching.\n-      </para>\n+            <para>\n+Each detach method returns detached copies of the given instances. The copy\n+mechanism is similar to serialization, except that only certain fields are\n+traversed. We will see how to control which fields are detached in a later\n+section.\n+            </para>\n+            <para>\n+            <indexterm>\n+                <primary>\n+                    detachment\n+                </primary>\n+                <secondary>\n+                    of dirty objects\n+                </secondary>\n+            </indexterm>\n+When detaching an instance that has been modified in the current transaction\n+(and thus made dirty), the current transaction is flushed. This means that when\n+subsequently re-attaching the detached instances, OpenJPA assumes that the\n+transaction from which they were originally detached was committed; if it has\n+been rolled back, then the re-attachment process will throw an optimistic\n+concurrency exception.\n+            </para>\n+            <para>\n+You can stop OpenJPA from assuming the transaction will commit by invoking\n+<methodname>OpenJPAEntityManager.setRollbackOnly</methodname> prior to detaching\n+your objects. Setting the <literal>RollbackOnly</literal> flag prevents OpenJPA\n+from flushing when detaching dirty objects; instead OpenJPA just runs its\n+pre-flush actions (see the <methodname>OpenJPAEntityManager.preFlush\n+</methodname>\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\"> Javadoc\n+</ulink> for details).\n+            </para>\n+            <para>\n+This allows you to use the same instances in multiple\n+attach/modify/detach/rollback cycles. Alternatively, you might also prevent a\n+flush by making your modifications outside of a transaction (with <literal>\n+NontransactionalWrite</literal> enabled) before detaching.\n+            </para>\n         </section>\n         <section id=\"ref_guide_attach_behavior\">\n-          <title>Attach Behavior</title>\n-          <indexterm zone=\"ref_guide_attach_behavior\">\n-            <primary>attachment</primary>\n-            <secondary>behavior</secondary>\n-          </indexterm>\n-          <para>\n-      When attaching, OpenJPA uses several strategies to determine the \n-      optimal way to merge changes made to the detached instance.  As \n-      you will see, these strategies can even be used to attach changes \n-      made to a transient instance which was never detached in the first \n-      place.\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-          If the instance was detached and \n-          <link linkend=\"ref_guide_detach_graph\">detached state</link>\n-          is enabled, OpenJPA will use the detached state to determine \n-          the object's version and primary key values.  In addition,\n-          this state will tell OpenJPA which fields were loaded at the \n-          time of detach, and in turn where to expect changes.  Loaded\n-          detached fields with null values will set the attached\n-          instance's corresponding fields to null.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          If the instance has\n-          <phrase>\n-          a <literal>Version</literal> field,\n-          </phrase>\n-          \n-          \n-          OpenJPA will consider the object detached if the version\n-          field has a non-default value, and new otherwise.  \n-          </para>\n-              <para>\n-          When attaching null fields in these cases, OpenJPA cannot \n-          distinguish between a field that was unloaded and one that\n-          was intentionally set to null. In this case, OpenJPA will use \n-          the current \n-          <link linkend=\"ref_guide_detach_graph\">detach state</link>\n-          setting to determine how to handle null fields: \n-          fields that would have been included in the detached state \n-          are treated as loaded, and will in turn set the \n-          corresponding attached field to null.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          If neither of the above cases apply, OpenJPA will check to\n-          see if an instance with the same primary key values exists\n-          in the database.  If so, the object is considered detached.\n-          Otherwise, it is considered new.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <para>\n-      These strategies will be assigned on a per-instance basis,\n-      such that during the attachment of an object graph more than\n-      one of the above strategies may be used.\n-      </para>\n-          <para>\n-      If you attempt to attach a versioned instance whose representation \n-      has changed in the datastore since detachment, OpenJPA will throw an\n-      optimistic concurrency exception upon commit or flush, just as if \n-      a normal optimistic conflict was detected. When attaching an \n-      instance whose database record has \n-      been deleted since detaching, or when attaching a detached \n-      instance into a manager that has a stale version of the object, \n-      OpenJPA will throw an optimistic concurrency exception\n-      from the attach method. In these cases, OpenJPA sets the \n-      <literal>RollbackOnly</literal> flag on the transaction.\n-      </para>\n+            <title>\n+                Attach Behavior\n+            </title>\n+            <indexterm zone=\"ref_guide_attach_behavior\">\n+                <primary>\n+                    attachment\n+                </primary>\n+                <secondary>\n+                    behavior\n+                </secondary>\n+            </indexterm>\n+            <para>\n+When attaching, OpenJPA uses several strategies to determine the optimal way to\n+merge changes made to the detached instance. As you will see, these strategies\n+can even be used to attach changes made to a transient instance which was never\n+detached in the first place.\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+If the instance was detached and <link linkend=\"ref_guide_detach_graph\">\n+detached state</link> is enabled, OpenJPA will use the detached state to\n+determine the object's version and primary key values. In addition, this state\n+will tell OpenJPA which fields were loaded at the time of detach, and in turn\n+where to expect changes. Loaded detached fields with null values will set the\n+attached instance's corresponding fields to null.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+If the instance has <phrase> a <literal>Version</literal> field,</phrase>\n+OpenJPA will consider the object detached if the version field has a non-default\n+value, and new otherwise.\n+                    </para>\n+                    <para>\n+When attaching null fields in these cases, OpenJPA cannot distinguish between a\n+field that was unloaded and one that was intentionally set to null. In this\n+case, OpenJPA will use the current <link linkend=\"ref_guide_detach_graph\">\n+detach state</link> setting to determine how to handle null fields: fields that\n+would have been included in the detached state are treated as loaded, and will\n+in turn set the corresponding attached field to null.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+If neither of the above cases apply, OpenJPA will check to see if an instance\n+with the same primary key values exists in the database. If so, the object is\n+considered detached. Otherwise, it is considered new.\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n+            <para>\n+These strategies will be assigned on a per-instance basis, such that during the\n+attachment of an object graph more than one of the above strategies may be used.\n+            </para>\n+            <para>\n+If you attempt to attach a versioned instance whose representation has changed\n+in the datastore since detachment, OpenJPA will throw an optimistic concurrency\n+exception upon commit or flush, just as if a normal optimistic conflict was\n+detected. When attaching an instance whose database record has been deleted\n+since detaching, or when attaching a detached instance into a manager that has a\n+stale version of the object, OpenJPA will throw an optimistic concurrency\n+exception from the attach method. In these cases, OpenJPA sets the <literal>\n+RollbackOnly</literal> flag on the transaction.\n+            </para>\n         </section>\n         <section id=\"ref_guide_detach_graph\">\n-          <title>Defining the Detached Object Graph</title>\n-          <indexterm zone=\"ref_guide_detach_graph\">\n-            <primary>detachment</primary>\n-            <secondary>defining the object graph</secondary>\n-          </indexterm>\n-          <para>\n-      When detached objects lose their association with the OpenJPA\n-      runtime, they also lose the ability to load additional state\n-      from the datastore.  It is important, therefore, to populate objects\n-      with all the persistent state you will need before detaching them.\n-      While you are free to do this manually, OpenJPA includes\n-      facilities for automatically populating objects when they detach.\n-      The <link linkend=\"openjpa.DetachState\"><literal>openjpa.DetachState\n-      </literal></link> configuration property determines which fields\n-      and relations are detached by default.   All settings are recursive.\n-      They are:\n-      </para>\n-          <orderedlist>\n-            <listitem>\n-              <para><literal>loaded</literal>: Detach all fields and relations \n-          that are already loaded, but don't include unloaded fields \n-          in the detached graph.  This is the default.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>fgs</literal>: Detach all fields and relations in \n-          the default fetch group, and any other fetch groups that \n-          you have added to the current\n-          <link linkend=\"ref_guide_runtime\">fetch \n-          configuration</link>.  For more information on custom \n-          fetch groups, see <xref linkend=\"ref_guide_fetch\"/>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>all</literal>: Detach all fields and relations.  \n-          Be very careful when\n-          using this mode; if you have a highly-connected domain \n-          featureSelection, you could end up bringing every object in the\n-          database into memory!\n-          </para>\n-            </listitem>\n-          </orderedlist>\n-          <para>\n-        Any field that is not included in the set determined by the detach\n-      mode is set to its Java default value in the detached instance.\n-      </para>\n-          <para>\n-      The <literal>openjpa.DetachState</literal> option is actually a \n-      plugin string (see <xref linkend=\"ref_guide_conf_plugins\"/>) that\n-      allows you to also configure the following options related to\n-      detached state:\n-      </para>\n-          <itemizedlist>\n-            <listitem>\n-              <para><literal>DetachedStateField</literal>: As described in \n-          <xref linkend=\"ref_guide_attach_behavior\"/> above, OpenJPA can\n-          take advantage of a <emphasis>detached state field\n-          </emphasis> to make the attach process more efficient.\n-          This field is added by the enhancer and is not visible to\n-          your application.  Set this property to one of the\n-          following values:\n-          </para>\n-              <itemizedlist>\n+            <title>\n+                Defining the Detached Object Graph\n+            </title>\n+            <indexterm zone=\"ref_guide_detach_graph\">\n+                <primary>\n+                    detachment\n+                </primary>\n+                <secondary>\n+                    defining the object graph\n+                </secondary>\n+            </indexterm>\n+            <para>\n+When detached objects lose their association with the OpenJPA runtime, they also\n+lose the ability to load additional state from the datastore. It is important,\n+therefore, to populate objects with all the persistent state you will need\n+before detaching them. While you are free to do this manually, OpenJPA includes\n+facilities for automatically populating objects when they detach. The\n+<link linkend=\"openjpa.DetachState\"><literal>openjpa.DetachState</literal>\n+</link> configuration property determines which fields and relations are\n+detached by default. All settings are recursive. They are:\n+            </para>\n+            <orderedlist>\n+                <listitem>\n+                    <para>\n+<literal>loaded</literal>: Detach all fields and relations that are already\n+loaded, but don't include unloaded fields in the detached graph. This is the\n+default.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>fgs</literal>: Detach all fields and relations in the default fetch\n+group, and any other fetch groups that you have added to the current\n+<link linkend=\"ref_guide_runtime\">fetch configuration</link>. For more\n+information on custom fetch groups, see <xref linkend=\"ref_guide_fetch\"></xref>\n+.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>all</literal>: Detach all fields and relations. Be very careful when\n+using this mode; if you have a highly-connected domain featureSelection, you could end up\n+bringing every object in the database into memory!\n+                    </para>\n+                </listitem>\n+            </orderedlist>\n+            <para>\n+Any field that is not included in the set determined by the detach mode is set\n+to its Java default value in the detached instance.\n+            </para>\n+            <para>\n+The <literal>openjpa.DetachState</literal> option is actually a plugin string\n+(see <xref linkend=\"ref_guide_conf_plugins\"></xref>) that allows you to also\n+configure the following options related to detached state:\n+            </para>\n+            <itemizedlist>\n                 <listitem>\n-                  <para><literal>transient</literal>: Use a transient \n-              detached state field.  This gives the benefits of\n-              a detached state field to local objects that are\n-              never serialized, but retains\n-              serialization compatibility for client tiers without\n-              access to the enhanced versions of your classes. \n-              This is the default.\n-              </para>\n+                    <para>\n+<literal>DetachedStateField</literal>: As described in\n+<xref linkend=\"ref_guide_attach_behavior\"></xref> above, OpenJPA can take\n+advantage of a <emphasis>detached state field</emphasis> to make the attach\n+process more efficient. This field is added by the enhancer and is not visible\n+to your application. Set this property to one of the following values:\n+                    </para>\n+                    <itemizedlist>\n+                        <listitem>\n+                            <para>\n+<literal>transient</literal>: Use a transient detached state field. This gives\n+the benefits of a detached state field to local objects that are never\n+serialized, but retains serialization compatibility for client tiers without\n+access to the enhanced versions of your classes. This is the default.\n+                            </para>\n+                        </listitem>\n+                        <listitem>\n+                            <para>\n+<literal>true</literal>: Use a non-transient detached state field so that\n+objects crossing serialization barriers can still be attached efficiently. This\n+requires, however, that your client tier have the enhanced versions of your\n+classes and the OpenJPA libraries.\n+                            </para>\n+                        </listitem>\n+                        <listitem>\n+                            <para>\n+<literal>false</literal>: Do not use a detached state field.\n+                            </para>\n+                        </listitem>\n+                    </itemizedlist>\n+                    <para>\n+You can override the setting of this property or declare your own detached state\n+field on individual classes using OpenJPA's metadata extensions. See\n+<xref linkend=\"ref_guide_detach_field\"></xref> below.\n+                    </para>\n                 </listitem>\n                 <listitem>\n-                  <para><literal>true</literal>: Use a non-transient \n-              detached state field so that objects crossing\n-              serialization barriers can still be attached \n-              efficiently.  This requires, however, that your\n-              client tier have the enhanced versions of your\n-              classes and the OpenJPA libraries.\n-              </para>\n+                    <para>\n+<literal>DetachedStateManager</literal>: Whether to use a detached state\n+manager. A detached state manager makes attachment much more efficient. Like a\n+detached state field, however, it breaks serialization compatibility with the\n+unenhanced class if it isn't transient.\n+                    </para>\n+                    <para>\n+This setting piggybacks on the <literal>DetachedStateField</literal> setting\n+above. If your detached state field is transient, the detached state manager\n+will also be transient. If the detached state field is disabled, the detached\n+state manager will also be disabled. This is typically what you'll want. By\n+setting <literal> DetachedStateField</literal> to true (or transient) and\n+setting this property to false, however, you can use a detached state field\n+<emphasis role=\"bold\">without</emphasis> using a detached state manager. This\n+may be useful for debugging or for legacy OpenJPA users who find differences\n+between OpenJPA's behavior with a detached state manager and OpenJPA's older\n+behavior without one.\n+                    </para>\n                 </listitem>\n                 <listitem>\n-                  <para><literal>false</literal>: Do not use a detached\n-              state field.\n-              </para>\n+                    <para>\n+<literal>AccessUnloaded</literal>: Whether to allow access to unloaded fields\n+of detached objects. Defaults to true. Set to false to throw an exception\n+whenever an unloaded field is accessed. This option is only available when you\n+use detached state managers, as determined by the settings above.\n+                    </para>\n                 </listitem>\n-              </itemizedlist>\n-              <para>\n-          You can override the setting of this property or declare\n-          your own detached state field on individual classes using \n-          OpenJPA's metadata extensions.  See \n-          <xref linkend=\"ref_guide_detach_field\"/> below.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>DetachedStateManager</literal>: Whether to use a\n-          detached state manager.  A detached state manager makes\n-          attachment much more efficient.  Like a detached state \n-          field, however, it breaks serialization compatibility with\n-          the unenhanced class if it isn't transient.\n-          </para>\n-              <para>\n-          This setting piggybacks on the <literal>DetachedStateField\n-          </literal> setting above.  If your detached state field is \n-          transient, the detached state manager will also be \n-          transient. If the detached state field is disabled, the \n-          detached state manager will also be disabled.  This is \n-          typically what you'll want.  By setting <literal>\n-          DetachedStateField</literal> to true (or transient) and \n-          setting this property to false, however, you can use a \n-          detached state field <emphasis role=\"bold\">without\n-          </emphasis> using a detached state manager.   This may be \n-          useful for debugging or for legacy OpenJPA users who find \n-          differences between OpenJPA's behavior with a detached state \n-          manager and OpenJPA's older behavior without one.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>AccessUnloaded</literal>: Whether to allow access\n-          to unloaded fields of detached objects.  Defaults to true.\n-          Set to false to throw an exception whenever an unloaded\n-          field is accessed.  This option is only available when you\n-          use detached state managers, as determined by the settings\n-          above.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-          <example id=\"ref_guide_detach_graph_confex\">\n-            <title>Configuring Detached State</title>\n-            <programlisting format=\"linespecific\">\n+            </itemizedlist>\n+            <example id=\"ref_guide_detach_graph_confex\">\n+                <title>\n+                    Configuring Detached State\n+                </title>\n+<programlisting>\n &lt;property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\"/&gt;\n </programlisting>\n-          </example>\n-          <para>\n-      You can also alter the set of fields that will be included in the\n-      detached graph at runtime.\n-      <ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\"><classname>OpenJPAEntityManager</classname></ulink>s expose the \n-      following APIs for controlling detached state:\n-      </para>\n-          <programlisting format=\"linespecific\">\n+            </example>\n+            <para>\n+You can also alter the set of fields that will be included in the detached graph\n+at runtime.\n+<ulink url=\"../../api/openjpa/persistence/OpenJPAEntityManager.html\">\n+<classname>OpenJPAEntityManager</classname></ulink>s expose the following APIs\n+for controlling detached state:\n+            </para>\n+<programlisting>\n public static final int DETACH_LOADED;\n public static final int DETACH_FGS;\n public static final int DETACH_ALL;\n public int getDetachState ();\n public void setDetachState (int mode);\n </programlisting>\n-          <section id=\"ref_guide_detach_field\">\n-            <title>Detached State Field</title>\n-            <indexterm zone=\"ref_guide_detach_field\">\n-              <primary>detachment</primary>\n-              <secondary>detached state field</secondary>\n-            </indexterm>\n-            <para>\n-        When the detached state field is enabled, the OpenJPA enhancer \n-        adds an additional field to the enhanced version of your class.\n-        This field of type <classname>Object</classname>.  OpenJPA uses\n-        this field for bookkeeping information, such as the versioning\n-        data needed to detect optimistic concurrency violations when the\n-        object is re-attached. \n-        </para>\n-            <para>\n-        It is possible to define this detached state field yourself.\n-        Declaring this field in your class metadata prevents the \n-        enhancer from adding any extra fields to the class, and keeps \n-        the enhanced class serialization-compatible with \n-        the unenhanced version.\n-        The detached state field must not be persistent.\n-        See <xref linkend=\"detached-state-field\"/> for details on\n-        how to declare a detached state field.\n-        </para>\n-            <programlisting format=\"linespecific\">\n+            <section id=\"ref_guide_detach_field\">\n+                <title>\n+                    Detached State Field\n+                </title>\n+                <indexterm zone=\"ref_guide_detach_field\">\n+                    <primary>\n+                        detachment\n+                    </primary>\n+                    <secondary>\n+                        detached state field\n+                    </secondary>\n+                </indexterm>\n+                <para>\n+When the detached state field is enabled, the OpenJPA enhancer adds an\n+additional field to the enhanced version of your class. This field of type\n+<classname>Object</classname>. OpenJPA uses this field for bookkeeping\n+information, such as the versioning data needed to detect optimistic concurrency\n+violations when the object is re-attached.\n+                </para>\n+                <para>\n+It is possible to define this detached state field yourself. Declaring this\n+field in your class metadata prevents the enhancer from adding any extra fields\n+to the class, and keeps the enhanced class serialization-compatible with the\n+unenhanced version. The detached state field must not be persistent. See\n+<xref linkend=\"detached-state-field\"></xref> for details on how to declare a\n+detached state field.\n+                </para>\n+<programlisting>\n import org.apache.openjpa.persistence.*;\n \n @Entity\n@@ -357,248 +372,323 @@ public class Magazine\n     ...\n }\n </programlisting>\n-          </section>\n+            </section>\n         </section>\n-      </section>\n-      <section id=\"ref_guide_event\">\n-        <title>Remote Event Notification Framework</title>\n+    </section>\n+    <section id=\"ref_guide_event\">\n+        <title>\n+            Remote Event Notification Framework\n+        </title>\n         <indexterm zone=\"ref_guide_event\">\n-          <primary>remote</primary>\n-          <secondary>events</secondary>\n+            <primary>\n+                remote\n+            </primary>\n+            <secondary>\n+                events\n+            </secondary>\n         </indexterm>\n         <indexterm>\n-          <primary>events</primary>\n-          <secondary>remote</secondary>\n-          <see>remote, events</see>\n+            <primary>\n+                events\n+            </primary>\n+            <secondary>\n+                remote\n+            </secondary>\n+            <see>\n+                remote, events\n+            </see>\n         </indexterm>\n-        <para><indexterm><primary>remote</primary><secondary>events</secondary><tertiary>RemoteCommitProvider</tertiary></indexterm><indexterm><primary>remote</primary><secondary>events</secondary><tertiary>RemoteCommitListener</tertiary></indexterm>\n-  The remote event notification framework allows a subset of the \n-  information available through OpenJPA's transaction events (see \n-  <xref linkend=\"ref_guide_runtime_pm_event\"/>) to be broadcast to remote \n-  listeners.  OpenJPA's <link linkend=\"ref_guide_cache\">data cache</link>, for \n-  example, uses remote events to remain synchronized when deployed in \n-  multiple JVMs.\n-  </para>\n-        \n         <para>\n-  To enable remote events, you must configure the <classname>\n-  EntityManagerFactory</classname> to use a  \n-  <literal>RemoteCommitProvider</literal> (see below). \n-  </para>\n+        <indexterm>\n+            <primary>\n+                remote\n+            </primary>\n+            <secondary>\n+                events\n+            </secondary>\n+            <tertiary>\n+                RemoteCommitProvider\n+            </tertiary>\n+        </indexterm>\n+        <indexterm>\n+            <primary>\n+                remote\n+            </primary>\n+            <secondary>\n+                events\n+            </secondary>\n+            <tertiary>\n+                RemoteCommitListener\n+            </tertiary>\n+        </indexterm>\n+The remote event notification framework allows a subset of the information\n+available through OpenJPA's transaction events (see\n+<xref linkend=\"ref_guide_runtime_pm_event\"></xref>) to be broadcast to remote\n+listeners. OpenJPA's <link linkend=\"ref_guide_cache\">data cache</link>, for\n+example, uses remote events to remain synchronized when deployed in multiple\n+JVMs.\n+        </para>\n         <para>\n-  When a <literal>RemoteCommitProvider</literal> is properly configured, you \n-  can register <ulink url=\"../apidocs/org/apache/openjpa/event/RemoteCommitListener.html\"><classname>RemoteCommitListener</classname></ulink>s that will be alerted \n-  with a list of modified object ids whenever a transaction on a remote \n-  machine successfully commits.\n-  </para>\n-        <section id=\"ref_guide_event_conf\">\n-          <title>Remote Commit Provider Configuration</title>\n-          <indexterm zone=\"ref_guide_event_conf\">\n-            <primary>remote</primary>\n-            <secondary>events</secondary>\n-            <tertiary>configuration</tertiary>\n-          </indexterm>\n-          <para>\n-    OpenJPA includes built in remote commit providers for JMS and TCP \n-    communication.\n-    </para>\n-          <section id=\"ref_guide_event_conf_jms\">\n-            <title>JMS</title>\n-            <indexterm zone=\"ref_guide_event_conf_jms\">\n-              <primary>remote</primary>\n-              <secondary>events</secondary>\n-              <tertiary>JMS</tertiary>\n-            </indexterm>\n-            <para>\n-      OpenJPA includes built in remote commit providers for JMS and TCP\n-      communication.  The JMS remote commit provider can be configured by \n-      setting the <link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n-      openjpa.RemoteCommitProvider</literal></link> property\n-      to contain the appropriate configuration properties. The JMS\n-      provider understands the following properties:\n-      </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>Topic</literal>: The topic that the remote commit\n-          provider should publish notifications to and subscribe\n-          to for notifications sent from other JVMs.  Defaults to\n-          <literal>topic/OpenJPACommitProviderTopic</literal></para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>TopicConnectionFactory</literal>: The JNDI name of\n-          a <classname>javax.jms.TopicConnectionFactory</classname>\n-          factory to use for finding topics.  Defaults to <literal>\n-          java:/ConnectionFactory</literal>. This setting may\n-          vary depending on the application server in use; consult\n-          the application server's documentation for details\n-          of the default JNDI name for the \n-          <classname>javax.jms.TopicConnectionFactory</classname>\n-          instance. For example, under Weblogic, the JNDI name\n-          for the TopicConnectionFactory is\n-          <literal>javax.jms.TopicConnectionFactory</literal>.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>ExceptionReconnectAttempts</literal>: The number of\n-          times to attempt to reconnect if the JMS system notifies \n-          OpenJPA of a serious connection error.  Defaults to 0, meaning\n-          OpenJPA will log the error but otherwise ignore it, hoping the\n-          connection is still valid.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>*</literal>: All other configuration properties \n-          will be interpreted as settings to pass to the JNDI \n-          <classname>InitialContext</classname> on construction.  For\n-          example, you might set the <literal>java.naming.provider.url\n-          </literal> property to the URL of the context provider.\n-          </para>\n-              </listitem>\n-            </itemizedlist>\n-            <para>\n-      To configure a factory to use the JMS provider, your properties \n-      might look like the following:\n-      </para>\n-            <note>\n-              <para>\n-        Because of the nature of JMS, it is important that you invoke\n-        <methodname>EntityManagerFactory.close</methodname>\n-        when finished with a factory.  If you do not do so, a daemon \n-        thread will stay up in the JVM, preventing the JVM from exiting.\n+To enable remote events, you must configure the <classname> EntityManagerFactory\n+</classname> to use a <literal>RemoteCommitProvider</literal> (see below).\n         </para>\n-            </note>\n-          </section>\n-          <section id=\"ref_guide_event_conf_tcp\">\n-            <title>TCP</title>\n-            <indexterm zone=\"ref_guide_event_conf_tcp\">\n-              <primary>remote</primary>\n-              <secondary>events</secondary>\n-              <tertiary>TCP</tertiary>\n+        <para>\n+When a <literal>RemoteCommitProvider</literal> is properly configured, you can\n+register\n+<ulink url=\"../apidocs/org/apache/openjpa/event/RemoteCommitListener.html\">\n+<classname>RemoteCommitListener</classname></ulink>s that will be alerted with\n+a list of modified object ids whenever a transaction on a remote machine\n+successfully commits.\n+        </para>\n+        <section id=\"ref_guide_event_conf\">\n+            <title>\n+                Remote Commit Provider Configuration\n+            </title>\n+            <indexterm zone=\"ref_guide_event_conf\">\n+                <primary>\n+                    remote\n+                </primary>\n+                <secondary>\n+                    events\n+                </secondary>\n+                <tertiary>\n+                    configuration\n+                </tertiary>\n             </indexterm>\n             <para>\n-      The TCP remote commit provider has several options that are\n-      defined as host specifications containing a host name or IP\n-      address and an optional port separated by a colon. For example,\n-      the host specification <literal>saturn.bea.com:1234</literal>\n-      represents an <classname>InetAddress</classname> retrieved by \n-      invoking <methodname>InetAddress.getByName (\"saturn.bea.com\")\n-      </methodname> and a port of 1234.\n-      </para>\n-            <para><indexterm><primary>TCP provider</primary></indexterm>\n-      The TCP provider can be configured by setting the <literal>\n-      openjpa.RemoteCommitProvider</literal> plugin property to contain the \n-      appropriate configuration settings. The TCP provider understands the\n-      following properties:\n-      </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>Port</literal>: The TCP port that the provider \n-          should listen on for commit notifications.  Defaults to \n-          5636.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>Addresses</literal>: A semicolon-separated list of \n-          IP addresses to which notifications should be sent. No \n-          default value.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>NumBroadcastThreads</literal>: The number of \n-          threads to create for the purpose of transmitting events to\n-          peers.  You sould increase this value as the number of \n-          concurrent transactions increases. The maximum number of \n-          concurrent transactions is a function of the size of the \n-          connection pool.  See the the <literal>MaxActive</literal> \n-          property of\n-          <literal>openjpa.ConnectionFactoryProperties</literal> in\n-          <xref linkend=\"ref_guide_dbsetup_builtin\"/>.\n-          Setting a value of 0 will result in behavior where the\n-          thread invoking <methodname>commit</methodname> will \n-          perform the broadcast directly.  Defaults to 2.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>RecoveryTimeMillis</literal>: Amount of time to \n-          wait in milliseconds before attempting to reconnect to a \n-          peer of the cluster when connectivity to the peer is lost. \n-          Defaults to 15000.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>MaxIdle</literal>: The number of TCP sockets \n-          (channels) to keep open to each peer in the cluster for \n-          the transmission of events.  Defaults to 2.\n-          </para>\n-              </listitem>\n-              <listitem>\n-                <para><literal>MaxActive</literal>: The maximum allowed number \n-          of TCP sockets (channels) to open simultaneously \n-          between each peer in the cluster.\n-          Defaults to 2.\n-          </para>\n-              </listitem>\n-            </itemizedlist>\n-            <para>\n-      To configure a factory to use the TCP provider, your properties \n-      might look like the following:\n-      </para>\n-            <example id=\"ref_guide_event_conf_tcpex\">\n-              <title>TCP Remote Commit Provider Configuration</title>\n-              <programlisting format=\"linespecific\">\n+OpenJPA includes built in remote commit providers for JMS and TCP communication.\n+            </para>\n+            <section id=\"ref_guide_event_conf_jms\">\n+                <title>\n+                    JMS\n+                </title>\n+                <indexterm zone=\"ref_guide_event_conf_jms\">\n+                    <primary>\n+                        remote\n+                    </primary>\n+                    <secondary>\n+                        events\n+                    </secondary>\n+                    <tertiary>\n+                        JMS\n+                    </tertiary>\n+                </indexterm>\n+                <para>\n+OpenJPA includes built in remote commit providers for JMS and TCP communication.\n+The JMS remote commit provider can be configured by setting the\n+<link linkend=\"openjpa.RemoteCommitProvider\"><literal>\n+openjpa.RemoteCommitProvider</literal></link> property to contain the\n+appropriate configuration properties. The JMS provider understands the following\n+properties:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>Topic</literal>: The topic that the remote commit provider should\n+publish notifications to and subscribe to for notifications sent from other\n+JVMs. Defaults to <literal>topic/OpenJPACommitProviderTopic</literal>\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>TopicConnectionFactory</literal>: The JNDI name of a <classname>\n+javax.jms.TopicConnectionFactory</classname> factory to use for finding topics.\n+Defaults to <literal> java:/ConnectionFactory</literal>. This setting may vary\n+depending on the application server in use; consult the application server's\n+documentation for details of the default JNDI name for the <classname>\n+javax.jms.TopicConnectionFactory</classname> instance. For example, under\n+Weblogic, the JNDI name for the TopicConnectionFactory is <literal>\n+javax.jms.TopicConnectionFactory</literal>.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>ExceptionReconnectAttempts</literal>: The number of times to attempt\n+to reconnect if the JMS system notifies OpenJPA of a serious connection error.\n+Defaults to 0, meaning OpenJPA will log the error but otherwise ignore it,\n+hoping the connection is still valid.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>*</literal>: All other configuration properties will be interpreted as\n+settings to pass to the JNDI <classname>InitialContext</classname> on\n+construction. For example, you might set the <literal>java.naming.provider.url\n+</literal> property to the URL of the context provider.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+                <para>\n+To configure a factory to use the JMS provider, your properties might look like\n+the following:\n+                </para>\n+                <note>\n+                    <para>\n+Because of the nature of JMS, it is important that you invoke <methodname>\n+EntityManagerFactory.close</methodname> when finished with a factory. If you do\n+not do so, a daemon thread will stay up in the JVM, preventing the JVM from\n+exiting.\n+                    </para>\n+                </note>\n+            </section>\n+            <section id=\"ref_guide_event_conf_tcp\">\n+                <title>\n+                    TCP\n+                </title>\n+                <indexterm zone=\"ref_guide_event_conf_tcp\">\n+                    <primary>\n+                        remote\n+                    </primary>\n+                    <secondary>\n+                        events\n+                    </secondary>\n+                    <tertiary>\n+                        TCP\n+                    </tertiary>\n+                </indexterm>\n+                <para>\n+The TCP remote commit provider has several options that are defined as host\n+specifications containing a host name or IP address and an optional port\n+separated by a colon. For example, the host specification <literal>\n+saturn.bea.com:1234</literal> represents an <classname>InetAddress</classname>\n+retrieved by invoking <methodname>InetAddress.getByName (\"saturn.bea.com\")\n+</methodname> and a port of 1234.\n+                </para>\n+                <para>\n+                <indexterm>\n+                    <primary>\n+                        TCP provider\n+                    </primary>\n+                </indexterm>\n+The TCP provider can be configured by setting the <literal>\n+openjpa.RemoteCommitProvider</literal> plugin property to contain the\n+appropriate configuration settings. The TCP provider understands the following\n+properties:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>Port</literal>: The TCP port that the provider should listen on for\n+commit notifications. Defaults to 5636.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>Addresses</literal>: A semicolon-separated list of IP addresses to\n+which notifications should be sent. No default value.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>NumBroadcastThreads</literal>: The number of threads to create for the\n+purpose of transmitting events to peers. You sould increase this value as the\n+number of concurrent transactions increases. The maximum number of concurrent\n+transactions is a function of the size of the connection pool. See the the\n+<literal>MaxActive</literal> property of <literal>\n+openjpa.ConnectionFactoryProperties</literal> in\n+<xref linkend=\"ref_guide_dbsetup_builtin\"></xref>. Setting a value of 0 will\n+result in behavior where the thread invoking <methodname>commit</methodname>\n+will perform the broadcast directly. Defaults to 2.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>RecoveryTimeMillis</literal>: Amount of time to wait in milliseconds\n+before attempting to reconnect to a peer of the cluster when connectivity to the\n+peer is lost. Defaults to 15000.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>MaxIdle</literal>: The number of TCP sockets (channels) to keep open\n+to each peer in the cluster for the transmission of events. Defaults to 2.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>MaxActive</literal>: The maximum allowed number of TCP sockets\n+(channels) to open simultaneously between each peer in the cluster. Defaults to\n+2.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+                <para>\n+To configure a factory to use the TCP provider, your properties might look like\n+the following:\n+                </para>\n+                <example id=\"ref_guide_event_conf_tcpex\">\n+                    <title>\n+                        TCP Remote Commit Provider Configuration\n+                    </title>\n+<programlisting>\n &lt;property name=\"openjpa.RemoteCommitProvider\" \n     value=\"tcp(Addresses=10.0.1.10;10.0.1.11;10.0.1.12;10.0.1.13)\"/&gt;\n </programlisting>\n-            </example>\n-          </section>\n-          <section id=\"ref_guide_event_conf_common\">\n-            <title>Common Properties</title>\n-            <indexterm zone=\"ref_guide_event_conf_common\">\n-              <primary>remote</primary>\n-              <secondary>events</secondary>\n-              <tertiary>common properties</tertiary>\n-            </indexterm>\n-            <para>\n-      In addition to the provider-specific configuration options above,\n-      all providers accept the following plugin properties:\n-      </para>\n-            <itemizedlist>\n-              <listitem>\n-                <para><literal>TransmitPersistedObjectIds</literal>: Whether \n-          remote commit events will include the object ids of \n-          instances persisted in the transaction.  By default only \n-          the class names of types persisted in the transaction are \n-          sent.  This results in smaller events and more efficient \n-          network utilization.  If you have registered your own \n-          remote commit listeners, however, you may require the \n-          persisted object ids as well.\n-          </para>\n-              </listitem>\n-            </itemizedlist>\n-            <para>\n-      To transmit persisted object ids in our remote commit events\n-      using the JMS provider, we modify the previous example as follows:\n-      </para>\n-          </section>\n+                </example>\n+            </section>\n+            <section id=\"ref_guide_event_conf_common\">\n+                <title>\n+                    Common Properties\n+                </title>\n+                <indexterm zone=\"ref_guide_event_conf_common\">\n+                    <primary>\n+                        remote\n+                    </primary>\n+                    <secondary>\n+                        events\n+                    </secondary>\n+                    <tertiary>\n+                        common properties\n+                    </tertiary>\n+                </indexterm>\n+                <para>\n+In addition to the provider-specific configuration options above, all providers\n+accept the following plugin properties:\n+                </para>\n+                <itemizedlist>\n+                    <listitem>\n+                        <para>\n+<literal>TransmitPersistedObjectIds</literal>: Whether remote commit events\n+will include the object ids of instances persisted in the transaction. By\n+default only the class names of types persisted in the transaction are sent.\n+This results in smaller events and more efficient network utilization. If you\n+have registered your own remote commit listeners, however, you may require the\n+persisted object ids as well.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+                <para>\n+To transmit persisted object ids in our remote commit events using the JMS\n+provider, we modify the previous example as follows:\n+                </para>\n+            </section>\n         </section>\n         <section id=\"ref_guide_event_customization\">\n-          <title>Customization</title>\n-          <indexterm zone=\"ref_guide_event_customization\">\n-            <primary>remote</primary>\n-            <secondary>events</secondary>\n-            <tertiary>customization</tertiary>\n-          </indexterm>\n-          <para>\n-    You can develop additional mechanisms for remote event notification be\n-    by creating an implementation of the \n-    <ulink url=\"../apidocs/org/apache/openjpa/event/RemoteCommitProvider.html\"><classname>\n-    RemoteCommitProvider</classname></ulink> interface, possibly by \n-    extending the \n-    <ulink url=\"../apidocs/org/apache/openjpa/event/AbstractRemoteCommitProvider.html\"><classname>AbstractRemoteCommitProvider</classname></ulink>\n-    abstract class. For details on particular customization needs,\n-    contact us at <ulink url=\"mailto:support@solarmetric.com\">\n-    support@solarmetric.com</ulink>.\n-    </para>\n+            <title>\n+                Customization\n+            </title>\n+            <indexterm zone=\"ref_guide_event_customization\">\n+                <primary>\n+                    remote\n+                </primary>\n+                <secondary>\n+                    events\n+                </secondary>\n+                <tertiary>\n+                    customization\n+                </tertiary>\n+            </indexterm>\n+            <para>\n+You can develop additional mechanisms for remote event notification be by\n+creating an implementation of the\n+<ulink url=\"../apidocs/org/apache/openjpa/event/RemoteCommitProvider.html\">\n+<classname> RemoteCommitProvider</classname></ulink> interface, possibly by\n+extending the\n+<ulink url=\"../apidocs/org/apache/openjpa/event/AbstractRemoteCommitProvider.html\">\n+<classname>AbstractRemoteCommitProvider</classname></ulink> abstract class. For\n+details on particular customization needs, contact us at\n+<ulink url=\"mailto:support@solarmetric.com\"> support@solarmetric.com</ulink>.\n+            </para>\n         </section>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"92ec16623a059afed4d6e6624bb512094c1167f3","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":1507,"deletions":1189,"changes":2696,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0"},{"sha":"5d1dfa22bb2687a3969592af195388f241bdb919","filename":"openjpa-project/src/doc/manual/samples_guide.xml","status":"modified","additions":152,"deletions":120,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/samples_guide.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/samples_guide.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/samples_guide.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,137 +1,169 @@\n-\n-    <chapter id=\"samples_guide\">\n-      <title>OpenJPA Sample Code</title>\n-      <para>\n-  The OpenJPA distribution comes with a number of examples that\n-  illustrate the usage of various features.\n-  </para>\n+<chapter id=\"samples_guide\">\n+    <title>\n+        OpenJPA Sample Code\n+    </title>\n+    <para>\n+The OpenJPA distribution comes with a number of examples that illustrate the\n+usage of various features.\n+    </para>\n <!--\n-  This is information on the sample application. It will be included\n-  in the documentation (see doc/openjpa/samples-guide.xml). It will also\n-  automatically be converted into a README.txt file in this directory\n-  in the \"release.org.apache.openjpa.releasedocs\" build target phase of the release.\n+This is information on the sample application. It will be included\n+in the documentation (see doc/openjpa/samples-guide.xml). It will also\n+automatically be converted into a README.txt file in this directory\n+in the \"release.openjpa.releasedocs\" build target phase of the release.\n -->\n-      <section id=\"samples_guide_interop\">\n-        <title>JDO - JPA Persistence Interoperability</title>\n-        <para>This sample demonstrates how to combine JDO and JPA in a single\n-application. The <filename>MachineMain.java</filename> program uses both\n-<classname>EntityManager</classname>s and <classname>PersistenceManager</classname>s \n-in a single transaction including persist, delete and query operations.</para>\n-        <para>The sample includes both annotated persistent classes as well as JDOR \n-metadata information.  The application can switch to either system simply\n-by changing the bootstrap mechanism.  Depending on which configuration\n-system you use, OpenJPA will read the corresponding metadata format.  You can\n-override some or all of this behavior using OpenJPA's configuration options, \n-such as <link linkend=\"openjpa.MetaDataFactory\">openjpa.MetaDataFactory</link>.</para>\n-        <para>To use this sample, you should ensure that either a <filename>jdo.properties</filename>\n-or <filename>persistence.xml</filename> are in the <filename>META-INF</filename> directory \n-in your <envar>CLASSPATH</envar>. The rest of the files for this sample are located in the \n-<filename>samples/mixed</filename> directory of the OpenJPA installation.  This tutorial requires JDK 5.  \n-To run this tutorial:</para>\n+    <section id=\"samples_guide_interop\">\n+        <title>\n+            JDO - JPA Persistence Interoperability\n+        </title>\n+        <para>\n+This sample demonstrates how to combine JDO and JPA in a single application. The\n+<filename>MachineMain.java</filename> program uses both <classname>\n+EntityManager</classname>s and <classname>PersistenceManager</classname>s in a\n+single transaction including persist, delete and query operations.\n+        </para>\n+        <para>\n+The sample includes both annotated persistent classes as well as JDOR metadata\n+information. The application can switch to either system simply by changing the\n+bootstrap mechanism. Depending on which configuration system you use, OpenJPA\n+will read the corresponding metadata format. You can override some or all of\n+this behavior using OpenJPA's configuration options, such as\n+<link linkend=\"openjpa.MetaDataFactory\">openjpa.MetaDataFactory</link>.\n+        </para>\n+        <para>\n+To use this sample, you should ensure that either a <filename>jdo.properties\n+</filename> or <filename>persistence.xml</filename> are in the <filename>\n+META-INF</filename> directory in your <envar>CLASSPATH</envar>. The rest of the\n+files for this sample are located in the <filename>samples/mixed</filename>\n+directory of the OpenJPA installation. This tutorial requires JDK 5. To run this\n+tutorial:\n+        </para>\n         <itemizedlist>\n-          <listitem>\n-            <para>Ensure that your environment is set properly as described in the\n-  README and that your current path is in the mixed sample directory.</para>\n-          </listitem>\n-          <listitem>\n-            <para>\n-  You may want to edit <literal>ConnectionURL</literal> to point to an absolute \n-    URL (e.g. <filename>C:/openjpa/mixed-sample-db</filename>) if using a file-based database like \n-  <literal>HSQL</literal>.</para>\n-          </listitem>\n-          <listitem>\n-            <para>Include the list of persistent classes in your configuration file.  For\n-  JPA, you will want to add the following lines to \n-  <filename>persistence.xml</filename> before the <literal>&lt;property&gt;</literal> lines:\n-  </para>\n-            <programlisting format=\"linespecific\">\n+            <listitem>\n+                <para>\n+Ensure that your environment is set properly as described in the README and that\n+your current path is in the mixed sample directory.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+You may want to edit <literal>ConnectionURL</literal> to point to an absolute\n+URL (e.g. <filename>C:/openjpa/mixed-sample-db</filename>) if using a\n+file-based database like <literal>HSQL</literal>.\n+                </para>\n+            </listitem>\n+            <listitem>\n+                <para>\n+Include the list of persistent classes in your configuration file. For JPA, you\n+will want to add the following lines to <filename>persistence.xml</filename>\n+before the <literal>&lt;property&gt;</literal> lines:\n+                </para>\n+<programlisting>\n &lt;class&gt;samples.mixed.Machine&lt;/class&gt;\n &lt;class&gt;samples.mixed.Crane&lt;/class&gt;\n &lt;class&gt;samples.mixed.Bulldozer&lt;/class&gt;\n &lt;class&gt;samples.mixed.Operator&lt;/class&gt;\n </programlisting>\n-            <para>\n-  If you are using JDO, point the metadata factory at the <filename>.jdo</filename>\n-resource containing your persistent classes:\n-  </para>\n-            <programlisting format=\"linespecific\">\n+                <para>\n+If you are using JDO, point the metadata factory at the <filename>.jdo\n+</filename> resource containing your persistent classes:\n+                </para>\n+<programlisting>\n openjpa.MetaDataFactory: Resources=samples/mixed/package.jdo\n </programlisting>\n-          </listitem>\n-          <listitem>\n-            <para>Compile the classes:\n-  \n-  </para>\n-            <para>\n-              <userinput>javac *.java</userinput>\n-            </para>\n-          </listitem>\n-          <listitem>\n-            <para>You should then proceed to pass in the configuration file you are using\n-  to the enhancer:\n-\n-  </para>\n-            <para>\n-              <userinput>openjpac -p persistence.xml Machine.java Crane.java Bulldozer.java Operator.java</userinput>\n-            </para>\n-            <para>\n-    or\n-  </para>\n-            <para>\n-              <userinput>jdoc -p jdo.properties Machine.java Crane.java Bulldozer.java Operator.java</userinput>\n-            </para>\n-          </listitem>\n-          <listitem>\n-            <para>Similarly, you should pass in the same argument to <literal>mappingtool</literal>:\n-\n-  </para>\n-            <para>\n-              <userinput>mappingtool -p persistence.xml -a buildSchema Machine.java Crane.java Bulldozer.java Operator.java</userinput>\n-            </para>\n-            <para>\n-    or\n-  </para>\n-            <para>\n-              <userinput>mappingtool -p jdo.properties -a buildSchema Machine.java Crane.java Bulldozer.java Operator.java</userinput>\n-            </para>\n-          </listitem>\n-          <listitem>\n-            <para>You can now run the sample application.  The first argument is\n-  which operation you want the program to run.  The second argument tells \n-  the application which bootstrap system to use:\n-\n-  </para>\n-            <para>\n-              <userinput>java samples.mixed.MachineMain &lt;create | delete&gt; &lt;jdo | jpa&gt;</userinput>\n-            </para>\n-          </listitem>\n-        </itemizedlist>\n-      </section>\n-      <section id=\"samples_guide_ejbdiv\">\n-        <title>JPA</title>\n-<!--\n-  This is information on the sample application. It will be included\n-  in the documentation (see doc/openjpa/samples-guide.xml). It will also\n-  automatically be converted into a README.txt file in this directory\n-  in the \"release.jdo.releasedocs\" build target phase of the release.\n--->\n-        <section id=\"samples_guide_model_humres_ejb\">\n-          <title>Sample Human Resources Model</title>\n-          <para>The files for this sample are located in the <filename>samples/persistence/models/humres</filename> \n-directory of the OpenJPA installation.  This sample demonstrates the mapping of \n-an example \"Human Resources\" schema. The following concepts are illustrated\n-in this sample:</para>\n-          <itemizedlist>\n+            </listitem>\n+            <listitem>\n+                <para>\n+Compile the classes:\n+                </para>\n+                <para>\n+<userinput>javac *.java</userinput>\n+                </para>\n+            </listitem>\n             <listitem>\n-              <para>Value Mappings</para>\n+                <para>\n+You should then proceed to pass in the configuration file you are using to the\n+enhancer:\n+                </para>\n+                <para>\n+<userinput>openjpac -p persistence.xml Machine.java Crane.java Bulldozer.java\n+Operator.java</userinput>\n+                </para>\n+                <para>\n+or\n+                </para>\n+                <para>\n+<userinput>jdoc -p jdo.properties Machine.java Crane.java Bulldozer.java\n+Operator.java</userinput>\n+                </para>\n             </listitem>\n             <listitem>\n-              <para>One to One Mappings</para>\n+                <para>\n+Similarly, you should pass in the same argument to <literal>mappingtool\n+</literal>:\n+                </para>\n+                <para>\n+<userinput>mappingtool -p persistence.xml -a buildSchema Machine.java\n+Crane.java Bulldozer.java Operator.java</userinput>\n+                </para>\n+                <para>\n+or\n+                </para>\n+                <para>\n+<userinput>mappingtool -p jdo.properties -a buildSchema Machine.java Crane.java\n+Bulldozer.java Operator.java</userinput>\n+                </para>\n             </listitem>\n             <listitem>\n-              <para>One to Many Mappings (with and without inverses)</para>\n+                <para>\n+You can now run the sample application. The first argument is which operation\n+you want the program to run. The second argument tells the application which\n+bootstrap system to use:\n+                </para>\n+                <para>\n+<userinput>java samples.mixed.MachineMain &lt;create | delete&gt; &lt;jdo |\n+jpa&gt;</userinput>\n+                </para>\n             </listitem>\n-          </itemizedlist>\n+        </itemizedlist>\n+    </section>\n+    <section id=\"samples_guide_jpadiv\">\n+        <title>\n+            JPA\n+        </title>\n+<!--\n+This is information on the sample application. It will be included\n+in the documentation (see doc/openjpa/samples-guide.xml). It will also\n+automatically be converted into a README.txt file in this directory\n+in the \"release.jdo.releasedocs\" build target phase of the release.\n+-->\n+        <section id=\"samples_guide_model_humres_jpa\">\n+            <title>\n+                Sample Human Resources Model\n+            </title>\n+            <para>\n+The files for this sample are located in the <filename>\n+samples/persistence/models/humres</filename> directory of the OpenJPA\n+installation. This sample demonstrates the mapping of an example \"Human\n+Resources\" schema. The following concepts are illustrated in this sample:\n+            </para>\n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+Value Mappings\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+One to One Mappings\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+One to Many Mappings (with and without inverses)\n+                    </para>\n+                </listitem>\n+            </itemizedlist>\n         </section>\n-      </section>\n-    </chapter>\n+    </section>\n+</chapter>"},{"sha":"b9fdf861a919890b24c1153bdf1197543a1733a6","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":821,"deletions":516,"changes":1337,"blob_url":"https://github.com/apache/openjpa/blob/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/fe71475a594d1023cbbc8a52316413a9f1d823c0/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=fe71475a594d1023cbbc8a52316413a9f1d823c0","patch":"@@ -1,623 +1,928 @@\n-\n-  <appendix id=\"supported_databases\">\n-    <title>Supported Databases</title>\n+<appendix id=\"supported_databases\">\n+    <title>\n+        Supported Databases\n+    </title>\n     <para>\n-  Following is a table of the database and JDBC driver\n-  versions that are supported by OpenJPA <phrase>JPA</phrase>.\n-  <table tocentry=\"1\"><title>Supported Databases and JDBC Drivers</title><tgroup rowsep=\"1\" colsep=\"1\" align=\"left\" cols=\"4\"><colspec colname=\"dbname\"/><colspec colname=\"dbversion\"/><colspec colname=\"drivname\"/><colspec colname=\"drivversion\"/><thead><row><entry colname=\"dbname\">Database Name</entry><entry colname=\"dbversion\">Database Version</entry><entry colname=\"drivname\">JDBC Driver Name</entry><entry colname=\"drivversion\">JDBC Driver Version</entry></row></thead><tbody><row><entry colname=\"dbname\">Apache Derby</entry><entry colname=\"dbversion\">10.1.2.1</entry><entry colname=\"drivname\">Apache Derby Embedded JDBC Driver</entry><entry colname=\"drivversion\">10.1.2.1</entry></row><row><entry colname=\"dbname\">Borland Interbase</entry><entry colname=\"dbversion\">7.1.0.202</entry><entry colname=\"drivname\">Interclient</entry><entry colname=\"drivversion\">4.5.1</entry></row><row><entry colname=\"dbname\">Borland JDataStore</entry><entry colname=\"dbversion\">6.0</entry><entry colname=\"drivname\">\n+Following is a table of the database and JDBC driver versions that are supported\n+by OpenJPA <phrase>JPA</phrase>.\n+    </para>\n+    <table tocentry=\"1\">\n+        <title>\n+            Supported Databases and JDBC Drivers\n+        </title>\n+        <tgroup rowsep=\"1\" colsep=\"1\" align=\"left\" cols=\"4\">\n+            <colspec colname=\"dbname\">\n+            </colspec>\n+            <colspec colname=\"dbversion\">\n+            </colspec>\n+            <colspec colname=\"drivname\">\n+            </colspec>\n+            <colspec colname=\"drivversion\">\n+            </colspec>\n+            <thead>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Database Name\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        Database Version\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        JDBC Driver Name\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        JDBC Driver Version\n+                    </entry>\n+                </row>\n+            </thead>\n+            <tbody>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Apache Derby\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        10.1.2.1\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Apache Derby Embedded JDBC Driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        10.1.2.1\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Borland Interbase\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        7.1.0.202\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Interclient\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        4.5.1\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Borland JDataStore\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        6.0\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        \n             Borland JDataStore\n-          </entry><entry colname=\"drivversion\">6.0</entry></row><row><entry colname=\"dbname\">DB2</entry><entry colname=\"dbversion\">8.1</entry><entry colname=\"drivname\">\n+          \n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        6.0\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        DB2\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        8.1\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        \n             IBM DB2 JDBC Universal Driver\n-          </entry><entry colname=\"drivversion\">1.0.581</entry></row><row><entry colname=\"dbname\">Empress</entry><entry colname=\"dbversion\">8.62</entry><entry colname=\"drivname\">\n+          \n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        1.0.581\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Empress\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        8.62\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        \n             Empress Category 2 JDBC Driver\n-          </entry><entry colname=\"drivversion\">8.62</entry></row><row><entry colname=\"dbname\">Firebird</entry><entry colname=\"dbversion\">1.5</entry><entry colname=\"drivname\">JayBird JCA/JDBC driver</entry><entry colname=\"drivversion\">1.0.1</entry></row><row><entry colname=\"dbname\">Hypersonic Database Engine</entry><entry colname=\"dbversion\">1.8.0</entry><entry colname=\"drivname\">Hypersonic</entry><entry colname=\"drivversion\">1.8.0</entry></row><row><entry colname=\"dbname\">Informix Dynamic Server</entry><entry colname=\"dbversion\">9.30.UC10</entry><entry colname=\"drivname\">Informix JDBC driver</entry><entry colname=\"drivversion\">2.21.JC2</entry></row><row><entry colname=\"dbname\">InterSystems Cache</entry><entry colname=\"dbversion\">5.0</entry><entry colname=\"drivname\">Cache JDBC Driver</entry><entry colname=\"drivversion\">5.0</entry></row><row><entry colname=\"dbname\">Microsoft Access</entry><entry colname=\"dbversion\">9.0 (a.k.a. \"2000\")</entry><entry colname=\"drivname\">\n+          \n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        8.62\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Firebird\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        1.5\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        JayBird JCA/JDBC driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        1.0.1\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Hypersonic Database Engine\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        1.8.0\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Hypersonic\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        1.8.0\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Informix Dynamic Server\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        9.30.UC10\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Informix JDBC driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        2.21.JC2\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        InterSystems Cache\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        5.0\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Cache JDBC Driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        5.0\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Microsoft Access\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        9.0 (a.k.a. \"2000\")\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        \n             DataDirect SequeLink\n-          </entry><entry colname=\"drivversion\">5.4.0038</entry></row><row><entry colname=\"dbname\">Microsoft SQL Server</entry><entry colname=\"dbversion\">\n+          \n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        5.4.0038\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Microsoft SQL Server\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        \n             9.00.1399 (SQL Server 2005)\n-          </entry><entry colname=\"drivname\">SQLServer</entry><entry colname=\"drivversion\">1.0.809.102</entry></row><row><entry colname=\"dbname\">Microsoft Visual FoxPro</entry><entry colname=\"dbversion\">7.0</entry><entry colname=\"drivname\">\n+          \n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        SQLServer\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        1.0.809.102\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Microsoft Visual FoxPro\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        7.0\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        \n             DataDirect SequeLink\n-          </entry><entry colname=\"drivversion\">5.4.0038</entry></row><row><entry colname=\"dbname\">MySQL</entry><entry colname=\"dbversion\">3.23.43-log</entry><entry colname=\"drivname\">MySQL Driver</entry><entry colname=\"drivversion\">3.0.14</entry></row><row><entry colname=\"dbname\">Oracle</entry><entry colname=\"dbversion\">8.1,9.2,10.1</entry><entry colname=\"drivname\">Oracle JDBC driver</entry><entry colname=\"drivversion\">10.2.0.1.0</entry></row><row><entry colname=\"dbname\">Pointbase</entry><entry colname=\"dbversion\">4.4</entry><entry colname=\"drivname\">Pointbase JDBC driver</entry><entry colname=\"drivversion\">4.4 (4.4) </entry></row><row><entry colname=\"dbname\">PostgreSQL</entry><entry colname=\"dbversion\">7.2.1</entry><entry colname=\"drivname\">PostgreSQL Native Driver</entry><entry colname=\"drivversion\">7.2 (7.2)</entry></row><row><entry colname=\"dbname\">\n+          \n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        5.4.0038\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        MySQL\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        3.23.43-log\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        MySQL Driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        3.0.14\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Oracle\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        8.1,9.2,10.1\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Oracle JDBC driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        10.2.0.1.0\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        Pointbase\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        4.4\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        Pointbase JDBC driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        4.4 (4.4) \n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        PostgreSQL\n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        7.2.1\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        PostgreSQL Native Driver\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        7.2 (7.2)\n+                    </entry>\n+                </row>\n+                <row>\n+                    <entry colname=\"dbname\">\n+                        \n             Sybase Adaptive Server Enterprise\n-          </entry><entry colname=\"dbversion\">12.5</entry><entry colname=\"drivname\">jConnect</entry><entry colname=\"drivversion\">5.5 (5.5)</entry></row></tbody></tgroup></table>\n-    </para>\n+          \n+                    </entry>\n+                    <entry colname=\"dbversion\">\n+                        12.5\n+                    </entry>\n+                    <entry colname=\"drivname\">\n+                        jConnect\n+                    </entry>\n+                    <entry colname=\"drivversion\">\n+                        5.5 (5.5)\n+                    </entry>\n+                </row>\n+            </tbody>\n+        </tgroup>\n+    </table>\n     <section id=\"dbsupport_derby\">\n-      <title>Apache Derby</title>\n-      <example id=\"example_props_derby\">\n-        <title>Example properties for Derby</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Apache Derby\n+        </title>\n+        <example id=\"example_props_derby\">\n+            <title>\n+                Example properties for Derby\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: org.apache.derby.jdbc.EmbeddedDriver\n openjpa.ConnectionURL: jdbc:derby:DB_NAME;create=true\n </programlisting>\n-      </example>\n+        </example>\n     </section>\n     <section id=\"dbsupport_interbase\">\n-      <title>Borland Interbase</title>\n-      <example id=\"example_props_interbase\">\n-        <title>Example properties for Interbase</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Borland Interbase\n+        </title>\n+        <example id=\"example_props_interbase\">\n+            <title>\n+                Example properties for Interbase\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: interbase.interclient.Driver\n openjpa.ConnectionURL: jdbc:interbase://SERVER_NAME:SERVER_PORT/DB_PATH\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_interbase_issues\">\n-        <title>Known issues with Interbase</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            Interbase does not support record locking, so datastore\n-            transactions cannot use the pessimistic lock manager.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Interbase does not support the\n-            <literal>LOWER</literal>, <literal>SUBSTRING</literal>,\n-            or <literal>INSTR</literal> SQL functions,\n-            which means that\n-            <methodname>toLowerCase()</methodname>,\n-            <methodname>indexOf()</methodname>,\n-            and <methodname>substring()</methodname>\n-            methods in <phrase>JPA</phrase>QL cannot be used.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_interbase_issues\">\n+            <title>\n+                Known issues with Interbase\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> Interbase does not support record locking, so\n+datastore transactions cannot use the pessimistic lock manager.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Interbase does not support the <literal>LOWER</literal>, <literal>SUBSTRING\n+</literal>, or <literal>INSTR</literal> SQL functions, which means that\n+<methodname>toLowerCase()</methodname>, <methodname>indexOf()</methodname>, and\n+<methodname>substring()</methodname> methods in <phrase>JPA</phrase> QL cannot\n+be used.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_jdatastore\">\n-      <title>JDataStore</title>\n-      <example id=\"example_props_jdatastore\">\n-        <title>Example properties for JDataStore</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            JDataStore\n+        </title>\n+        <example id=\"example_props_jdatastore\">\n+            <title>\n+                Example properties for JDataStore\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.borland.datastore.jdbc.DataStoreDriver\n openjpa.ConnectionURL: jdbc:borland:dslocal:db-jdatastore.jds;create=true\n </programlisting>\n-      </example>\n+        </example>\n     </section>\n     <section id=\"dbsupport_db2\">\n-      <title>IBM DB2</title>\n-      <example id=\"example_props_db2\">\n-        <title>Example properties for IBM DB2</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            IBM DB2\n+        </title>\n+        <example id=\"example_props_db2\">\n+            <title>\n+                Example properties for IBM DB2\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.ibm.db2.jcc.DB2Driver\n openjpa.ConnectionURL: jdbc:db2://SERVER_NAME:SERVER_PORT/DB_NAME\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_db2_issues\">\n-        <title>Known issues with DB2</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>Floats and doubles may lose precision when stored.</para>\n-            </listitem>\n-            <listitem>\n-              <para>Empty char values are stored as NULL.</para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-      Fields of type BLOB and CLOB are limited to 1M. This number can be \n-      increased by extending <classname>DB2Dictionary</classname>.\n-      </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_db2_issues\">\n+            <title>\n+                Known issues with DB2\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para>Floats and doubles may lose precision when\n+stored.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Empty char values are stored as NULL.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Fields of type BLOB and CLOB are limited to 1M. This number can be increased by\n+extending <classname>DB2Dictionary</classname>.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_empress\">\n-      <title>Empress</title>\n-      <example id=\"example_props_empress\">\n-        <title>Example properties for Empress</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Empress\n+        </title>\n+        <example id=\"example_props_empress\">\n+            <title>\n+                Example properties for Empress\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: empress.jdbc.empressDriver\n openjpa.ConnectionURL: jdbc:empress://SERVER=yourserver;PORT=6322;DATABASE=yourdb\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_empress_issues\">\n-        <title>Known issues with Empress</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            Empress enforces pessimistic semantics (lock \n-            on read) when not using \n-            <literal>AllowConcurrentRead</literal> property\n-            (which bypasses row locking) for \n-            <classname>EmpressDictionary</classname>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Only the category 2 non-local driver is supported.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_empress_issues\">\n+            <title>\n+                Known issues with Empress\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> Empress enforces pessimistic semantics (lock on\n+read) when not using <literal>AllowConcurrentRead</literal> property (which\n+bypasses row locking) for <classname>EmpressDictionary</classname>.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Only the category 2 non-local driver is supported.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_hypersonic\">\n-      <title>Hypersonic</title>\n-      <example id=\"example_props_hypersonic\">\n-        <title>Example properties for Hypersonic</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Hypersonic\n+        </title>\n+        <example id=\"example_props_hypersonic\">\n+            <title>\n+                Example properties for Hypersonic\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: org.hsqldb.jdbcDriver\n openjpa.ConnectionURL: jdbc:hsqldb:DB_NAME\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_hypersonic_issues\">\n-        <title>Known issues with Hypersonic</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            Hypersonic does not properly support foreign key\n-            constraints.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Hypersonic does not support pessimistic locking,\n-            so non-optimistic transactions will fail unless\n-            the <literal>SimulateLocking</literal> property\n-            is set for the <link linkend=\"openjpa.jdbc.DBDictionary\">\n-            openjpa.jdbc.DBDictionary</link>\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_hypersonic_issues\">\n+            <title>\n+                Known issues with Hypersonic\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> Hypersonic does not properly support foreign key\n+constraints.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Hypersonic does not support pessimistic locking, so non-optimistic transactions\n+will fail unless the <literal>SimulateLocking</literal> property is set for the\n+<link linkend=\"openjpa.jdbc.DBDictionary\"> openjpa.jdbc.DBDictionary</link>\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_firebird\">\n-      <title>Firebird</title>\n-      <example id=\"example_props_firebird\">\n-        <title>Example properties for Firebird</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Firebird\n+        </title>\n+        <example id=\"example_props_firebird\">\n+            <title>\n+                Example properties for Firebird\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: org.firebirdsql.jdbc.FBDriver\n openjpa.ConnectionURL: jdbc:firebirdsql://SERVER_NAME:SERVER_PORT/DB_PATH\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_firebird_issues\">\n-        <title>Known issues with Firebird</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-          The Firebird JDBC driver does not have proper support\n-          for batch updates, so batch updates are disabled.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-          Firebird does not support auto-increment columns.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Firebird does not support the\n-            <literal>LOWER</literal>, <literal>SUBSTRING</literal>,\n-            or <literal>INSTR</literal> SQL functions,\n-            which means that\n-            <methodname>toLowerCase()</methodname>,\n-            <methodname>indexOf()</methodname>,\n-            and <methodname>substring()</methodname>\n-            methods in <phrase>JPA</phrase>QL cannot be used.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_firebird_issues\">\n+            <title>\n+                Known issues with Firebird\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> The Firebird JDBC driver does not have proper\n+support for batch updates, so batch updates are disabled.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Firebird does not support auto-increment columns.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Firebird does not support the <literal>LOWER</literal>, <literal>SUBSTRING\n+</literal>, or <literal>INSTR</literal> SQL functions, which means that\n+<methodname>toLowerCase()</methodname>, <methodname>indexOf()</methodname>, and\n+<methodname>substring()</methodname> methods in <phrase>JPA</phrase> QL cannot\n+be used.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_informix\">\n-      <title>Informix</title>\n-      <example id=\"example_props_informix\">\n-        <title>Example properties for Informix Dynamic Server</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Informix\n+        </title>\n+        <example id=\"example_props_informix\">\n+            <title>\n+                Example properties for Informix Dynamic Server\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.informix.jdbc.IfxDriver\n openjpa.ConnectionURL: \\\n   jdbc:informix-sqli://SERVER_NAME:SERVER_PORT/DB_NAME:INFORMIXSERVER=SERVER_ID\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_informix_issues\">\n-        <title>Known issues with Informix</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-          none\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_informix_issues\">\n+            <title>\n+                Known issues with Informix\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> none\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_intersystems_cache\">\n-      <title>InterSystems Cache</title>\n-      <example id=\"example_props_intersystems_cache\">\n-        <title>Example properties for InterSystems Cache</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            InterSystems Cache\n+        </title>\n+        <example id=\"example_props_intersystems_cache\">\n+            <title>\n+                Example properties for InterSystems Cache\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.intersys.jdbc.CacheDriver\n openjpa.ConnectionURL: jdbc:Cache://SERVER_NAME:SERVER_PORT/DB_NAME\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_intersystems_cache_issues\">\n-        <title>Known issues with InterSystems Cache</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-          Support for Cache is done via SQL access over JDBC, not\n-          through their object database APIs.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_intersystems_cache_issues\">\n+            <title>\n+                Known issues with InterSystems Cache\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> Support for Cache is done via SQL access over\n+JDBC, not through their object database APIs.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_access\">\n-      <title>Microsoft Access</title>\n-      <example id=\"example_props_access\">\n-        <title>Example properties for Microsoft Access</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Microsoft Access\n+        </title>\n+        <example id=\"example_props_access\">\n+            <title>\n+                Example properties for Microsoft Access\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.ddtek.jdbc.sequelink.SequeLinkDriver\n openjpa.ConnectionURL: jdbc:sequelink://SERVER_NAME:SERVER_PORT\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_access_issues\">\n-        <title>Known issues with Microsoft Access</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>Using the Sun JDBC-ODBC bridge to connect\n-      is not supported.</para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_access_issues\">\n+            <title>\n+                Known issues with Microsoft Access\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para>Using the Sun JDBC-ODBC bridge to connect is not\n+supported.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_sqlserver\">\n-      <title>Microsoft SQL Server</title>\n-      <example id=\"example_props_sqlserver\">\n-        <title>Example properties for Microsoft SQLServer</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Microsoft SQL Server\n+        </title>\n+        <example id=\"example_props_sqlserver\">\n+            <title>\n+                Example properties for Microsoft SQLServer\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver\n openjpa.ConnectionURL: \\\n     jdbc:sqlserver://SERVER_NAME:1433;DatabaseName=DB_NAME;selectMethod=cursor;sendStringParametersAsUnicode=false\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_sqlserver_issues\">\n-        <title>Known issues with SQL Server</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            SQL Server date fields are accurate only to the\n-            nearest 3 milliseconds, possibly resulting in\n-            precision loss in stored dates.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            The ConnectionURL must always contain the\n-            \"<literal>selectMethod=cursor</literal>\" string.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Adding <literal>sendStringParametersAsUnicode=false\n-            </literal> to the ConnectionURL may significantly \n-            increase performance.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            The Microsoft SQL Server driver only emulates\n-            batch updates. The DataDirect JDBC driver has\n-            true support for batch updates, and may result\n-            in a significant performance gain.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Floats and doubles may lose precision when stored.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para><literal>TEXT</literal> columns cannot be used\n-            in queries.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_sqlserver_issues\">\n+            <title>\n+                Known issues with SQL Server\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> SQL Server date fields are accurate only to the\n+nearest 3 milliseconds, possibly resulting in precision loss in stored dates.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+The ConnectionURL must always contain the \" <literal>selectMethod=cursor\n+</literal> \" string.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Adding <literal>sendStringParametersAsUnicode=false</literal> to the\n+ConnectionURL may significantly increase performance.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+The Microsoft SQL Server driver only emulates batch updates. The DataDirect JDBC\n+driver has true support for batch updates, and may result in a significant\n+performance gain.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Floats and doubles may lose precision when stored.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+<literal>TEXT</literal> columns cannot be used in queries.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_foxpro\">\n-      <title>Microsoft FoxPro</title>\n-      <example id=\"example_props_foxpro\">\n-        <title>Example properties for Microsoft FoxPro</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Microsoft FoxPro\n+        </title>\n+        <example id=\"example_props_foxpro\">\n+            <title>\n+                Example properties for Microsoft FoxPro\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.ddtek.jdbc.sequelink.SequeLinkDriver\n openjpa.ConnectionURL: jdbc:sequelink://SERVER_NAME:SERVER_PORT\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_foxpro_issues\">\n-        <title>Known issues with Microsoft FoxPro</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>Using the Sun JDBC-ODBC bridge to connect\n-      is not supported.</para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_foxpro_issues\">\n+            <title>\n+                Known issues with Microsoft FoxPro\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para>Using the Sun JDBC-ODBC bridge to connect is not\n+supported.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_mysql\">\n-      <title>MySQL</title>\n-      <example id=\"example_props_mysql\">\n-        <title>Example properties for MySQL</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            MySQL\n+        </title>\n+        <example id=\"example_props_mysql\">\n+            <title>\n+                Example properties for MySQL\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.mysql.jdbc.Driver\n openjpa.ConnectionURL: jdbc:mysql://SERVER_NAME/DB_NAME\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_mysql_issues\">\n-        <title>Known issues with MySQL</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            The default table types that MySQL uses do not\n-            support transactions, which will prevent OpenJPA from\n-            being able to roll back transactions. Use the \n-            <literal>InnoDB</literal> table type\n-            for any tables that OpenJPA will access.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            MySQL does not support sub-selects in versions\n-            prior to 4.1, and are disabled by default. Some\n-            operations (such as the <function>isEmpty()</function>\n-            method in a query) will fail due to this. If\n-            you are using MySQL 4.1 or later, you can lift\n-            this restriction by setting the\n-            <literal>SupportsSubselect=true</literal> parameter\n-            of the <link linkend=\"openjpa.jdbc.DBDictionary\">openjpa.jdbc.DBDictionary</link> property.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Rollback due to database error or optimistic lock\n-            violation is not supported unless the table type\n-            is one of the MySQL transactional types. Explicit\n-            calls to <function>rollback()</function> before a \n-            transaction has been committed, however, are\n-            always supported.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Floats and doubles may lose precision when stored\n-            in some datastores.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            When storing a field of type\n-            <classname>java.math.BigDecimal</classname>, some\n-            datastores will add extraneous trailing 0 \n-            characters, causing an equality mismatch between\n-            the field that is stored and the field that is\n-            retrieved.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Some version of the MySQL JDBC driver have a bug\n-            that prevents OpenJPA from being able to interrogate\n-            the database for foreign keys. Version\n-            3.0.14 (or higher) of the MySQL driver is required\n-            in order to get around this bug.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_mysql_issues\">\n+            <title>\n+                Known issues with MySQL\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> The default table types that MySQL uses do not\n+support transactions, which will prevent OpenJPA from being able to roll back\n+transactions. Use the <literal>InnoDB</literal> table type for any tables that\n+OpenJPA will access.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+MySQL does not support sub-selects in versions prior to 4.1, and are disabled by\n+default. Some operations (such as the <function>isEmpty()</function> method in a\n+query) will fail due to this. If you are using MySQL 4.1 or later, you can lift\n+this restriction by setting the <literal>SupportsSubselect=true</literal>\n+parameter of the <link linkend=\"openjpa.jdbc.DBDictionary\">\n+openjpa.jdbc.DBDictionary</link> property.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Rollback due to database error or optimistic lock violation is not supported\n+unless the table type is one of the MySQL transactional types. Explicit calls to\n+<function>rollback()</function> before a transaction has been committed,\n+however, are always supported.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Floats and doubles may lose precision when stored in some datastores.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+When storing a field of type <classname>java.math.BigDecimal</classname>, some\n+datastores will add extraneous trailing 0 characters, causing an equality\n+mismatch between the field that is stored and the field that is retrieved.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Some version of the MySQL JDBC driver have a bug that prevents OpenJPA from\n+being able to interrogate the database for foreign keys. Version 3.0.14 (or\n+higher) of the MySQL driver is required in order to get around this bug.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_oracle\">\n-      <title>Oracle</title>\n-      <example id=\"example_props_oracle\">\n-        <title>Example properties for Oracle</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Oracle\n+        </title>\n+        <example id=\"example_props_oracle\">\n+            <title>\n+                Example properties for Oracle\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: oracle.jdbc.driver.OracleDriver\n openjpa.ConnectionURL: jdbc:oracle:thin:@SERVER_NAME:1521:DB_NAME\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_oracle_query_hints\">\n-        <title>Using Query Hints with Oracle</title>\n-        <para>\n-      Oracle has support for \"query hints\", which are formatted\n-      comments embedded in SQL that provide some hint for\n-      how the query should be executed. These hints are usually\n-      designed to provide suggestions to the Oracle query\n-      optimizer for how to efficiently perform a certainly query,\n-      and aren't typically needed for any but the most intensive\n-      queries.\n-      </para>\n-        <example id=\"dbsupport_oracle_query_hints_ex\">\n-          <title>Using Oracle Hints</title>\n-          <programlisting format=\"linespecific\">\n+        </example>\n+        <section id=\"dbsupport_oracle_query_hints\">\n+            <title>\n+                Using Query Hints with Oracle\n+            </title>\n+            <para>\n+Oracle has support for \"query hints\", which are formatted comments embedded in\n+SQL that provide some hint for how the query should be executed. These hints are\n+usually designed to provide suggestions to the Oracle query optimizer for how to\n+efficiently perform a certainly query, and aren't typically needed for any but\n+the most intensive queries.\n+            </para>\n+            <example id=\"dbsupport_oracle_query_hints_ex\">\n+                <title>\n+                    Using Oracle Hints\n+                </title>\n+<programlisting>\n Query query = pm.createQuery (...);\n query.addExtension (org.apache.openjpa.jdbc.sql.OracleDictionary.SELECT_HINT,\n     \"/*+ first_rows(100) */\");\n List results = (List) query.execute ();\n </programlisting>\n-          <programlisting format=\"linespecific\">\n+<programlisting>\n Query query = em.createQuery (...);\n query.setHint (org.apache.openjpa.jdbc.sql.OracleDictionary.SELECT_HINT,\n     \"/*+ first_rows(100) */\");\n List results = query.getResultList ();\n </programlisting>\n-        </example>\n-      </section>\n-      <section id=\"dbsupport_oracle_issues\">\n-        <title>Known issues with Oracle</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            The Oracle JDBC driver has significant differences\n-            between different versions. It is important to\n-            use the officially supported version of the driver\n-            (10.2.0.1.0), which is backward compatible\n-            with previous versions of the Oracle server.\n-            It can be downloaded from \n-            <ulink url=\"http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html\">http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html</ulink>.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            For VARCHAR fields, <literal>null</literal>\n-            and a blank string are equivalent. This means that\n-            an object that stores a null string field will\n-            have it get read back as a blank string.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Oracle corp's JDBC driver for Oracle has only limited\n-            support for batch updates. The result for OpenJPA is\n-            that in some cases, the exact object that failed an\n-            optimistic lock check cannot be determined, and OpenJPA\n-            will throw an <classname>OptimisticVerificationException</classname> with\n-            more failed objects than actually failed.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Oracle cannot store numbers with more than 38 digits\n-            in numeric columns.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Floats and doubles may lose precision when stored.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            CLOB columns cannot be used in queries.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+            </example>\n+        </section>\n+        <section id=\"dbsupport_oracle_issues\">\n+            <title>\n+                Known issues with Oracle\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> The Oracle JDBC driver has significant\n+differences between different versions. It is important to use the officially\n+supported version of the driver (10.2.0.1.0), which is backward compatible with\n+previous versions of the Oracle server. It can be downloaded from\n+<ulink url=\"http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html\">\n+http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc101040.html\n+</ulink>.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+For VARCHAR fields, <literal>null</literal> and a blank string are equivalent.\n+This means that an object that stores a null string field will have it get read\n+back as a blank string.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Oracle corp's JDBC driver for Oracle has only limited support for batch updates.\n+The result for OpenJPA is that in some cases, the exact object that failed an\n+optimistic lock check cannot be determined, and OpenJPA will throw an\n+<classname>OptimisticVerificationException</classname> with more failed objects\n+than actually failed.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Oracle cannot store numbers with more than 38 digits in numeric columns.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Floats and doubles may lose precision when stored.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+CLOB columns cannot be used in queries.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_pointbase\">\n-      <title>Pointbase</title>\n-      <example id=\"example_props_pointbase\">\n-        <title>Example properties for Pointbase</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Pointbase\n+        </title>\n+        <example id=\"example_props_pointbase\">\n+            <title>\n+                Example properties for Pointbase\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.pointbase.jdbc.jdbcUniversalDriver\n openjpa.ConnectionURL: \\\n     jdbc:pointbase:DB_NAME,database.home=pointbasedb,create=true,cache.size=10000,database.pagesize=30720\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_pointbase_issues\">\n-        <title>Known issues with Pointbase</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-      Fields of type BLOB and CLOB are limited to 1M. This number can be \n-      increased by extending <classname>PointbaseDictionary</classname>.\n-      </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_pointbase_issues\">\n+            <title>\n+                Known issues with Pointbase\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> Fields of type BLOB and CLOB are limited to 1M.\n+This number can be increased by extending <classname>PointbaseDictionary\n+</classname>.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_postgresql\">\n-      <title>PostgreSQL</title>\n-      <example id=\"example_props_postgresql\">\n-        <title>Example properties for PostgreSQL</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            PostgreSQL\n+        </title>\n+        <example id=\"example_props_postgresql\">\n+            <title>\n+                Example properties for PostgreSQL\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: org.postgresql.Driver\n openjpa.ConnectionURL: jdbc:postgresql://SERVER_NAME:5432/DB_NAME\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_postgresql_issues\">\n-        <title>Known issues with PostgreSQL</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            Floats and doubles may lose precision when stored.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            PostgreSQL cannot store very low and very high dates.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Empty string/char values are stored as NULL.\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_postgresql_issues\">\n+            <title>\n+                Known issues with PostgreSQL\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> Floats and doubles may lose precision when\n+stored.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+PostgreSQL cannot store very low and very high dates.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Empty string/char values are stored as NULL.\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n     <section id=\"dbsupport_sybase\">\n-      <title>Sybase Adaptive Server</title>\n-      <example id=\"example_props_sybase\">\n-        <title>Example properties for Sybase</title>\n-        <programlisting format=\"linespecific\">\n+        <title>\n+            Sybase Adaptive Server\n+        </title>\n+        <example id=\"example_props_sybase\">\n+            <title>\n+                Example properties for Sybase\n+            </title>\n+<programlisting>\n openjpa.ConnectionDriverName: com.sybase.jdbc2.jdbc.SybDriver\n openjpa.ConnectionURL: \\\n     jdbc:sybase:Tds:SERVER_NAME:4100/DB_NAME?ServiceName=DB_NAME&amp;BE_AS_JDBC_COMPLIANT_AS_POSSIBLE=true\n </programlisting>\n-      </example>\n-      <section id=\"dbsupport_sybase_issues\">\n-        <title>Known issues with Sybase</title>\n-        <para>\n-          <itemizedlist>\n-            <listitem>\n-              <para>\n-            The \"<literal>DYNAMIC_PREPARE</literal>\" parameter\n-            of the Sybase JDBC driver cannot be used with OpenJPA.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Datastore locking cannot be used when manipulating\n-            many-to-many relations using the default OpenJPA\n-            schema created by the schematool,\n-            unless an auto-increment primary key field is\n-            manually added to the table.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            Persisting a zero-length string results in a\n-            string with a single space characted being returned\n-            from Sybase, Inc.'s JDBC driver.\n-          </para>\n-            </listitem>\n-            <listitem>\n-              <para>\n-            The <literal>BE_AS_JDBC_COMPLIANT_AS_POSSIBLE</literal>\n-            is required in order to use datastore (pessimistic)\n-            locking. Failure to set this property may lead\n-            to obscure errors like \"<literal>FOR UPDATE can\n-            not be used in a SELECT which is not part of\n-            the declaration of a cursor or which is not\n-            inside a stored procedure.</literal>\".\n-          </para>\n-            </listitem>\n-          </itemizedlist>\n-        </para>\n-      </section>\n+        </example>\n+        <section id=\"dbsupport_sybase_issues\">\n+            <title>\n+                Known issues with Sybase\n+            </title>\n+            <para>\n+<itemizedlist><listitem><para> The \" <literal>DYNAMIC_PREPARE</literal> \"\n+parameter of the Sybase JDBC driver cannot be used with OpenJPA.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Datastore locking cannot be used when manipulating many-to-many relations using\n+the default OpenJPA schema created by the schematool, unless an auto-increment\n+primary key field is manually added to the table.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+Persisting a zero-length string results in a string with a single space\n+characted being returned from Sybase, Inc.'s JDBC driver.\n+                        </para>\n+                    </listitem>\n+                    <listitem>\n+                        <para>\n+The <literal>BE_AS_JDBC_COMPLIANT_AS_POSSIBLE</literal> is required in order to\n+use datastore (pessimistic) locking. Failure to set this property may lead to\n+obscure errors like \" <literal>FOR UPDATE can not be used in a SELECT which is\n+not part of the declaration of a cursor or which is not inside a stored\n+procedure.</literal> \".\n+                        </para>\n+                    </listitem>\n+                </itemizedlist>\n+            </para>\n+        </section>\n     </section>\n-  </appendix>\n+</appendix>"}]}

