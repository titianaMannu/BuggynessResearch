{"sha":"fee930886b9c0f3e177d6257d60b158d5f2d9654","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlZTkzMDg4NmI5YzBmM2UxNzdkNjI1N2Q2MGIxNThkNWYyZDk2NTQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-03-27T20:47:21Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-03-27T20:47:21Z"},"message":"fixing indentation and few changes suggested by Abe for OpenJPA patch-168\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@523071 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7c0c54fd41cfbb52b98774b651ceae6355be628","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7c0c54fd41cfbb52b98774b651ceae6355be628"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fee930886b9c0f3e177d6257d60b158d5f2d9654","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fee930886b9c0f3e177d6257d60b158d5f2d9654","html_url":"https://github.com/apache/openjpa/commit/fee930886b9c0f3e177d6257d60b158d5f2d9654","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fee930886b9c0f3e177d6257d60b158d5f2d9654/comments","author":null,"committer":null,"parents":[{"sha":"f7aef4581483be989ba84eed1ea71ce0f043c17c","url":"https://api.github.com/repos/apache/openjpa/commits/f7aef4581483be989ba84eed1ea71ce0f043c17c","html_url":"https://github.com/apache/openjpa/commit/f7aef4581483be989ba84eed1ea71ce0f043c17c"}],"stats":{"total":296,"additions":155,"deletions":141},"files":[{"sha":"0b9809bbd971f364125b6a91231f12b0c838d11e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -363,18 +363,18 @@ private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n      * null if there is no data in the current fetch groups to select.\n      */\n     private Result getInitializeStateResult(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n-        throws SQLException {\n+            ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n+    throws SQLException {\n         Select sel = _sql.newSelect();\n         if (!select(sel, mapping, subs, sm, null, fetch,\n-            JDBCFetchConfiguration.EAGER_JOIN, true, false))\n+                JDBCFetchConfiguration.EAGER_JOIN, true, false))\n             return null;\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n-        //Set the expectedResultCount for the select as 1 as a single\n-        //object is being loaded. force = true is an indicator that it is \n-        //internally generated value\n-          sel.setExpectedResultCount(1,true);\n-       return sel.execute(this, fetch);\n+        // Set the expectedResultCount for the select as 1 as a single\n+        // object is being loaded. force = true is an indicator that it is \n+        // internally generated value\n+        sel.setExpectedResultCount(1,true);\n+        return sel.execute(this, fetch);\n     }\n \n     /**"},{"sha":"89798611d458e2e28eb172ad9b05fc0802695af3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -48,6 +48,7 @@\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.ExpressionStoreQuery;\n import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\n+import org.apache.openjpa.kernel.QueryHints;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n import org.apache.openjpa.kernel.exps.FilterListener;\n@@ -319,23 +320,22 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n                 subclassMode);\n             if (verts.length == 1 && subclasses)\n                 subclassBits.set(sels.size());\n-\n             // create criteria select and clone for each vert mapping\n             sel = ((JDBCExpressionFactory) facts[i]).getSelectConstructor().\n                 evaluate(ctx, null, null, exps[i], states[i]);\n-            //it means it is coming from getSingleResult so set the \n-            //expectedResultCount to 1.force = true indicates that this is \n-            //internally generated value\n-            if(this.ctx.isUnique())\n-                 sel.setExpectedResultCount(1,true);\n-            //it means this is coming from getResultList so set the \n-            //expectedResultCount based on any optimize hint if provided\n-            else{\n-                   if((optHint = ctx.fetch.getHint\n-                        (this.optimizeHint))!= null)\n-                         sel.setExpectedResultCount\n-                          (((Integer)optHint).intValue(),false);\n-               }\n+            // It means it is coming from getSingleResult so set the \n+            // expectedResultCount to 1.force = true indicates that this is \n+            // internally generated value\n+            if (this.ctx.isUnique())\n+                sel.setExpectedResultCount(1,true);\n+            // It means this is coming from getResultList so set the \n+            // expectedResultCount based on any optimize hint if provided\n+            else {\n+                if ((optHint = ctx.fetch.getHint\n+                              (QueryHints.HINT_RESULT_COUNT))!= null)\n+                   sel.setExpectedResultCount\n+                   (((Integer)optHint).intValue(),false);\n+            }\n             for (int j = 0; j < verts.length; j++) {\n                 selMappings.add(verts[j]);\n                 if (j == verts.length - 1) {"},{"sha":"720bdf344253b55d513ac48a8f19bf1640b8d5a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":44,"deletions":49,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -28,8 +28,7 @@\n  */\r\n public class DB2Dictionary\r\n     extends AbstractDB2Dictionary {\r\n-    \r\n-    //variables to support optimize clause\r\n+    // variables to support optimize clause\r\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n     public DB2Dictionary() {\r\n@@ -195,67 +194,63 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n                     bigintTypeName = \"DECIMAL(31,0)\";\r\n                 }\r\n             }\r\n-    \t}\r\n+        }\r\n     }\r\n-    //based on the expectedResultCount of the select create the optimize\r\n-    //for clause\r\n+    \r\n+    /** Based on the expectedResultCount of the select create the optimize\r\n+     *  for clause\r\n+     */ \r\n     public String getOptimizeClause(JDBCFetchConfiguration fetch, \r\n-                                   int expectedResultCount) {\r\n+            int expectedResultCount) {\r\n         Integer rows = null;\r\n         StringBuffer optimizeString = new StringBuffer();\r\n-        \r\n-        \tif(expectedResultCount != 0)\r\n-                optimizeString.append(\" \").append(optimizeClause).append(\" \")\r\n-                .append(expectedResultCount).append(\" \")\r\n-                .append(rowClause).append(\" \");\r\n-           return optimizeString.toString();    \r\n+        if (expectedResultCount != 0)\r\n+            optimizeString.append(\" \").append(optimizeClause).append(\" \")\r\n+            .append(expectedResultCount).append(\" \")\r\n+            .append(rowClause).append(\" \");\r\n+        return optimizeString.toString();    \r\n     }\r\n \r\n-    //override the DBDictionary toSelect to call getOptimizeClause and append \r\n-    //to the select string\r\n+    /** Override the DBDictionary toSelect to call getOptimizeClause and append \r\n+    *   to the select string\r\n+    */   \r\n     public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\r\n             SQLBuffer from, SQLBuffer where, SQLBuffer group,\r\n             SQLBuffer having, SQLBuffer order,\r\n             boolean distinct, boolean forUpdate, long start, long end,\r\n             int expectedResultCount) {\r\n-        \t\r\n-        \tString optimizeString = null;\r\n-        \tSQLBuffer selString = toOperation(getSelectOperation(fetch), \r\n-                                              selects, from, where,\r\n-                                              group, having, order, distinct,\r\n-                                              forUpdate, start, end);\r\n-            //return toOperation(getSelectOperation(fetch), selects, from, where,\r\n-             //group, having, order, distinct, forUpdate, start, end);\r\n-        \t\r\n-        \tif(fetch != null)\r\n-        \t    optimizeString = getOptimizeClause(fetch, expectedResultCount);\r\n-        \tif(optimizeString != null && optimizeString.length() > 0)\r\n-        \t\tselString.append(optimizeString);\r\n-        \t\r\n-        \treturn selString;\r\n-        \t\r\n-        }\r\n-    //override the DBDictionary toSelect to pass expectedResultcount to the \r\n-    //other toSelect method\r\n+        String optimizeString = null;\r\n+        SQLBuffer selString = toOperation(getSelectOperation(fetch), \r\n+                selects, from, where,\r\n+                group, having, order, distinct,\r\n+                forUpdate, start, end);\r\n+        if (fetch != null)\r\n+            optimizeString = getOptimizeClause(fetch, expectedResultCount);\r\n+        if (optimizeString != null && optimizeString.length() > 0)\r\n+            selString.append(optimizeString);\r\n+        return selString;\r\n+    }\r\n+    \r\n+    /** Override the DBDictionary toSelect to pass expectedResultcount to the \r\n+     * other toSelect method\r\n+     */\r\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n             JDBCFetchConfiguration fetch) {\r\n-            sel.addJoinClassConditions();\r\n-            \r\n-            boolean update = forUpdate && sel.getFromSelect() == null;\r\n-            SQLBuffer select = getSelects(sel, false, update);\r\n-            SQLBuffer ordering = null;\r\n-            if (!sel.isAggregate() || sel.getGrouping() != null)\r\n-                ordering = sel.getOrdering();\r\n-            SQLBuffer from;\r\n-            if (sel.getFromSelect() != null)\r\n-                from = getFromSelect(sel, forUpdate);\r\n-            else\r\n-                from = getFrom(sel, update);\r\n-            SQLBuffer where = getWhere(sel, update);\r\n-            return toSelect(select, fetch, from, where, sel.getGrouping(),\r\n+        sel.addJoinClassConditions();\r\n+        boolean update = forUpdate && sel.getFromSelect() == null;\r\n+        SQLBuffer select = getSelects(sel, false, update);\r\n+        SQLBuffer ordering = null;\r\n+        if (!sel.isAggregate() || sel.getGrouping() != null)\r\n+            ordering = sel.getOrdering();\r\n+        SQLBuffer from;\r\n+        if (sel.getFromSelect() != null)\r\n+            from = getFromSelect(sel, forUpdate);\r\n+        else\r\n+            from = getFrom(sel, update);\r\n+        SQLBuffer where = getWhere(sel, update);\r\n+        return toSelect(select, fetch, from, where, sel.getGrouping(),\r\n                 sel.getHaving(), ordering, sel.isDistinct(), forUpdate,\r\n                 sel.getStartIndex(), \r\n                 sel.getEndIndex(),sel.getExpectedResultCount());\r\n-        }\r\n-\r\n+    }\r\n }\r"},{"sha":"7dad3af69236917342cad67c7575b9f4b909674d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":19,"deletions":21,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -47,11 +47,7 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (LogicalUnion.class);\n-     //expected number of results for this select to be used in \n-    // optimize for clause\n     protected int expectedResultCount = 0;\n-    //indicate if this is internally generated result count \n-    //or not\n     protected boolean force = false;\n     protected final UnionSelect[] sels;\n     protected final DBDictionary dict;\n@@ -215,9 +211,10 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n         if (this.getExpectedResultCount()== 1) {\n             AbstractResult res;\n             for (int i = 0; i < sels.length; i++) {\n-                //for each select set the expected result count to 1\n-                //and force true indicating that this internally generated value\n-                 sels[i].sel.setExpectedResultCount(1,true);\n+                // For each select set the expected result count to 1\n+                // and force true indicating that this internally generated \n+                // value\n+                sels[i].sel.setExpectedResultCount(1,true);\n                 res = (AbstractResult) sels[i].execute(store, fetch,\n                     lockLevel);\n                 res.setBaseMapping(mappings[i]);\n@@ -305,10 +302,7 @@ public String toString() {\n         protected final int pos;\n         protected int orders = 0;\n         protected List orderIdxs = null;\n-        //  expected number of results for this select to be used in \n-        // optimize for clause\n         protected int expectedResultCount = 0;\n-        //force indicates it is internally generated result count or not\n         protected boolean force = false;\n        \n         public UnionSelect(SelectImpl sel, int pos) {\n@@ -844,17 +838,19 @@ public String toString() {\n             return sel.toString();\n         }\n \n-\t\tpublic int getExpectedResultCount() {\n-\t\t\treturn expectedResultCount;\n-\t\t}\n+        public int getExpectedResultCount() {\n+            return expectedResultCount;\n+        }\n \n-\t\tpublic void setExpectedResultCount(int expectedResultCount, boolean force) {\n-\t\t\tthis.expectedResultCount = expectedResultCount;\n+        public void setExpectedResultCount(int expectedResultCount,\n+                boolean force) {\n+            this.expectedResultCount = expectedResultCount;\n             this.force = force;\n-\t\t}\n-         public boolean isExpRsltCntForced() {\n-                return force;\n-            }\n+        }\n+        \n+        public boolean isExpRsltCntForced() {\n+            return force;\n+        }\n     }\n \n     /**\n@@ -939,11 +935,13 @@ public int compare(Object o1, Object o2) {\n     public int getExpectedResultCount() {\n         return expectedResultCount;\n     }\n-\n-    public void setExpectedResultCount(int expectedResultCount,boolean force) {\n+    \n+    public void setExpectedResultCount(int expectedResultCount,\n+            boolean force) {\n         this.expectedResultCount = expectedResultCount;\n         this.force = force;\n     }\n+    \n     public boolean isExpRsltCntForced() {\n         return force;\n     }"},{"sha":"1805cc2b265e8e6aa06f75138ce1e8cb99389390","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -130,12 +130,10 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n      * force indicates whether the count is internally generated\n      * or given by the user as optimize hint\n      */\n-    \n     public void setExpectedResultCount(int expectedResultCount,boolean force) ;\n-    \n+\n     /**\n      * Indicates whether the expectedResultCount is internally generated\n      */\n-     \n-     public boolean isExpRsltCntForced();\n+    public boolean isExpRsltCntForced();\n }"},{"sha":"3654a3593e4f3b45916af62ee1caa5d5d470e6ca","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":18,"deletions":21,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -154,11 +154,7 @@\n     private SelectImpl _from = null;\n     private SelectImpl _outer = null;\n     \n-    //expected number of results for this select to be used in \n-    // optimize for clause\n     private int expectedResultCount = 0;\n-    //true if the expectedResultCount is internally set false if\n-    //it is set by the user\n     private boolean force = false;\n      \n     /**\n@@ -312,19 +308,19 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         throws SQLException {\n         boolean forUpdate = false;\n         \n-        //expectedResultCount = 1 and force means that it is internally generated value \n-        //for getSingleResult,single valued relationship.We need to check if \n-        //there are any eager joins in the select if there are then the \n-        //optimize for 1 row clause is not generated else we do. if \n-        //!force then it is set by the user through hint and we \n-        //do not check the eager joins\n-        if(this.expectedResultCount == 1 && force ){\n-            if(this.hasEagerJoin(true))\n+        // ExpectedResultCount = 1 and force means that it is internally  \n+        // generated value for getSingleResult,single valued relationship. \n+        // We need to check if there are any eager joins in the select if  \n+        // there are then the optimize for 1 row clause is not generated  \n+        // else we do. if !force then it is set by the user through hint  \n+        // and we do not check the eager joins\n+        if (this.expectedResultCount == 1 && force ) {\n+            if (this.hasEagerJoin(true))\n                 this.setExpectedResultCount(0,false);\n             else\n-               this.setExpectedResultCount(1,false); \n-           }\n-      \n+                this.setExpectedResultCount(1,false); \n+        }\n+\n         if (!isAggregate() && _grouping == null) {\n             JDBCLockManager lm = store.getLockManager();\n             if (lm != null)\n@@ -2821,14 +2817,15 @@ public void clear() {\n         }\n     }\n \n-\tpublic int getExpectedResultCount() {\n-\t\treturn expectedResultCount;\n-\t}\n+    public int getExpectedResultCount() {\n+        return expectedResultCount;\n+    }\n \n-\tpublic void setExpectedResultCount(int expectedResultCount, boolean force) {\n-\t\tthis.expectedResultCount = expectedResultCount;\n+    public void setExpectedResultCount(int expectedResultCount,\n+            boolean force) {\n+        this.expectedResultCount = expectedResultCount;\n         this.force = force;\n-\t}\n+    }\n \n     public boolean isExpRsltCntForced() {\n         return force;"},{"sha":"e6a983fea6f5812209e1152facc0c48ddc44f6f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -33,8 +33,7 @@\n     implements StoreQuery {\n \n     protected QueryContext ctx = null;\n-    public static final String optimizeHint =\"openjpa.hint.OptimizeResultCount\";\n-\n+   \n     public QueryContext getContext() {\n         return ctx;\n     }"},{"sha":"fd9623a7ce8f418e62d243d704d1f7fd8031a4a0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -0,0 +1,25 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.kernel;\r\n+\r\n+public interface QueryHints {\r\n+    \r\n+    /** Hint to specify the number of rows for the optimize\r\n+     * clause for DB2\r\n+     */\r\n+    public static final String HINT_RESULT_COUNT =\r\n+        \"openjpa.hint.OptimizeResultCount\";\r\n+}\r"},{"sha":"9e4aa3279a63556efa85cb5b1bf36f6e0c514ece","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -1290,7 +1290,7 @@ private Object singleResult(ResultObjectProvider rop,\n                 return Arrays.asList(new Object[]{ single });\n             }\n              \n-            if(single == null)\n+            if (single == null)\n                 throw new InvalidStateException(_loc.get(\"is-null\",\n                         _class, _query));\n             "},{"sha":"06feacb2403be3709760ccc68b3d550175eae562","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -24,6 +24,7 @@\n import javax.persistence.TemporalType;\n \n import org.apache.openjpa.kernel.QueryFlushModes;\n+import org.apache.openjpa.kernel.QueryHints;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n@@ -36,7 +37,7 @@\n  * @published\n  */\n public interface OpenJPAQuery\n-    extends Query, QueryOperations, QueryFlushModes {\n+    extends Query, QueryOperations, QueryFlushModes, QueryHints {\n \n     /**\n      * The owning entity manage."},{"sha":"8f5a37d8dd9b9a7c11fcc4b3c40c2bf4e61951de","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/fee930886b9c0f3e177d6257d60b158d5f2d9654/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=fee930886b9c0f3e177d6257d60b158d5f2d9654","patch":"@@ -279,13 +279,12 @@ public List getResultList() {\n      */\n     public Object getSingleResult() {\n         _em.assertNotCloseInvoked();\n-        //Indicate that this query returns single result.Later copied into\n-        //select.expectedResultCount\n+        // Indicate that this query returns single result.Later copied into\n+        // select.expectedResultCount\n         _query.setUnique(true);\n-        try{\n-        Object ob = execute();\n-           return ob;\n-\n+        try {\n+            Object ob = execute();\n+            return ob;\n         } finally {\n             _query.setUnique(false);\n         }\n@@ -366,27 +365,29 @@ else if (\"FilterListeners\".equals(k)) {\n             } else if (k.startsWith(\"FetchPlan.\")) {\n                 k = k.substring(\"FetchPlan.\".length());\n                 Filters.hintToSetter(getFetchPlan(), k, value);\n-            } else if (k.startsWith(\"hint.\")){\n-            \tif(\"hint.OptimizeResultCount\".equals(k)){\n-            \t\tif((!(value instanceof String)&&!(value instanceof Integer))\n-                       ||  (value instanceof String &&(Integer.parseInt\n-                       ((String)value)< 0))||((value instanceof Integer)\n-                        && (((Integer)value).intValue()<0)) )\n-            \t\t\t    throw new ArgumentException(_loc.get\n-                                      (\"bad-hint-value\", key),\n-                                      null, null, false);\n-                    if(value instanceof String)\n+            } else if (k.startsWith(\"hint.\")) {\n+                if (\"hint.OptimizeResultCount\".equals(k)) {\n+                    if ((!(value instanceof String)&&! (value instanceof Integer))\n+                            || (value instanceof String &&(Integer.parseInt\n+                                    ((String)value)< 0))||\n+                                    ((value instanceof Integer)\n+                                            && (((Integer)value).intValue()<0)))\n+                        throw new ArgumentException(_loc.get\n+                                (\"bad-hint-value\", key),\n+                                null, null, false);\n+                    if (value instanceof String)\n                         value = new Integer((String)value);\n-         \t}\n+                }\n                 _query.getFetchConfiguration().setHint(key, value);\n             }\n             else\n                 throw new ArgumentException(_loc.get(\"bad-query-hint\", key),\n                     null, null, false);\n             return this;\n-        }catch(NumberFormatException e1){\n-              throw new ArgumentException(_loc.get(\"bad-hint-value\", key),\n-                null, null, false); \n+        }\n+         catch (NumberFormatException e1) {\n+            throw new ArgumentException(_loc.get(\"bad-hint-value\", key),\n+                    null, null, false); \n         }\n          catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);"}]}

