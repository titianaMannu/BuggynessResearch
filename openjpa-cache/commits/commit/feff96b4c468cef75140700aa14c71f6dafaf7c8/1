{"sha":"feff96b4c468cef75140700aa14c71f6dafaf7c8","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlZmY5NmI0YzQ2OGNlZjc1MTQwNzAwYWExNGM3MWY2ZGFmYWY3Yzg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T17:37:53Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-11T17:37:53Z"},"message":"OPENJPA-1334: Emulate 1.2 versions IncludedTypes/ExcludedTypes functionality via new distribution policy mechanics\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909091 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a0f3e87129fa859b1e738d376cb4bf039c60d13","url":"https://api.github.com/repos/apache/openjpa/git/trees/3a0f3e87129fa859b1e738d376cb4bf039c60d13"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8","html_url":"https://github.com/apache/openjpa/commit/feff96b4c468cef75140700aa14c71f6dafaf7c8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8/comments","author":null,"committer":null,"parents":[{"sha":"80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","url":"https://api.github.com/repos/apache/openjpa/commits/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945","html_url":"https://github.com/apache/openjpa/commit/80d6c79b52588dd0c0f7e1fd76f02b67a9b9a945"}],"stats":{"total":64,"additions":36,"deletions":28},"files":[{"sha":"77079e8e7d7b966bf37044cf38d780bdccddfbbf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/feff96b4c468cef75140700aa14c71f6dafaf7c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/feff96b4c468cef75140700aa14c71f6dafaf7c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=feff96b4c468cef75140700aa14c71f6dafaf7c8","patch":"@@ -152,8 +152,7 @@\n     private int _resMode = MODE_NONE;\n \n     private Class<?> _type = Object.class;\n-    private final Map<String,FieldMetaData> _fieldMap = \n-    \tnew TreeMap<String,FieldMetaData>();\n+    private final Map<String,FieldMetaData> _fieldMap = new TreeMap<String,FieldMetaData>();\n     private Map<String,FieldMetaData> _supFieldMap = null;\n     private boolean _defSupFields = false;\n     private Collection<String> _staticFields = null;\n@@ -183,6 +182,9 @@\n     private String _seqName = DEFAULT_STRING;\n     private SequenceMetaData _seqMeta = null;\n     private String _cacheName = DEFAULT_STRING; // null implies @DataCache(enabled=false)\n+    private boolean _dataCacheEnabled = false;     // true implies the class has been annotated by the user or name of\n+                                                // the cache is explicitly set by the user to a null string\n+\n     private Boolean _cacheEnabled = null;       // denotes status of JPA 2 @Cacheable annotation\n     private int _cacheTimeout = Integer.MIN_VALUE;\n     private Boolean _detachable = null;\n@@ -1429,14 +1431,24 @@ public String getDataCacheName() {\n         }\n         return _cacheName;\n     }\n-\n+    \n     /**\n      * Set the cache name for this class. \n      * \n      * @param can be null to disable cache.\n      */\n     public void setDataCacheName(String name) {\n         _cacheName = name;\n+        if (name != null)\n+            _dataCacheEnabled = true;\n+    }\n+    \n+    /**\n+     * Affirms true if this receiver is annotated with @DataCache and is not disabled. \n+     * A separate state variable is necessary besides the name of the cache defaulted to a special string.\n+     */\n+    public boolean getDataCacheEnabled() {\n+        return _dataCacheEnabled;\n     }\n \n     /**\n@@ -2430,6 +2442,7 @@ public void copy(ClassMetaData meta) {\n         if (_cacheTimeout == Integer.MIN_VALUE)\n             _cacheTimeout = meta.getDataCacheTimeout();\n         _cacheEnabled = meta.getCacheEnabled();\n+        _dataCacheEnabled = meta.getDataCacheEnabled();\n         if (_detachable == null)\n             _detachable = meta._detachable;\n         if (DEFAULT_STRING.equals(_detachState))"},{"sha":"75f0ee50b4cb2fccf6a3816a632123f1c506ff43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","status":"modified","additions":20,"deletions":25,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/feff96b4c468cef75140700aa14c71f6dafaf7c8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","raw_url":"https://github.com/apache/openjpa/raw/feff96b4c468cef75140700aa14c71f6dafaf7c8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=feff96b4c468cef75140700aa14c71f6dafaf7c8","patch":"@@ -28,9 +28,10 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n-public class TestCacheExclusions extends PersistenceTestCase {\n+public class TestCacheExclusions extends AbstractCachedEMFTestCase {\n \n     private OpenJPAEntityManagerFactorySPI emf = null;\n \n@@ -80,12 +81,10 @@ public void tearDown() throws Exception {\n             for (ClassMapping mapping : ((ClassMapping[]) emf\n                 .getConfiguration().getMetaDataRepositoryInstance()\n                 .getMetaDatas())) {\n-                if (mapping.getTable() != null) {\n-                    Query q =\n-                        em.createNativeQuery(\"DROP TABLE \"\n-                            + mapping.getTable().getName());\n-                    q.executeUpdate();\n-                }\n+                Query q =\n+                    em.createNativeQuery(\"DROP TABLE \"\n+                        + mapping.getTable().getName());\n+                q.executeUpdate();\n             }\n             em.getTransaction().commit();\n             em.close();\n@@ -107,31 +106,31 @@ public void testCacheItems() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Item.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, false, false, true);\n     }\n \n     public void testCacheItemsAndPurchases() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Item.class,\n             Purchase.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, true, false, true);\n     }\n \n     public void testCacheItemsAndOrders() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Item.class,\n             Order.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, false, true, true);\n     }\n \n     public void testCachePurchasesAndOrders() {\n         getEntityManagerFactoryCacheSettings(new Class[] { Purchase.class,\n             Order.class }, null);\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, true, true, true);\n+        assertCacheContents(cache, true, true, false);\n     }\n \n     public void testExcludePurchases() {\n@@ -169,7 +168,7 @@ public void testIncludePurchaseItemExcludePurchase() {\n             Item.class }, new Class[] { Purchase.class });\n         populate();\n         StoreCache cache = emf.getStoreCache();\n-        assertCacheContents(cache, false, true, true);\n+        assertCacheContents(cache, false, false, true);\n     }\n \n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n@@ -193,21 +192,17 @@ public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n             excludes.setLength(excludes.length() - 1); // remove last semicolon\n         }\n         StringBuilder dataCacheSettings = new StringBuilder();\n-        dataCacheSettings.append(\"default\");\n-        \n-        StringBuilder policySettings = new StringBuilder();\n-        if (includes.length() > 0 || excludes.length() > 0) {\n-            policySettings.append(\"type-based(\");\n-            policySettings.append(includes);\n-            if (includes.length() > 0 && excludes.length() > 0) {\n-                policySettings.append(\",\");\n-            }\n-            policySettings.append(excludes);\n-            policySettings.append(\")\");\n+        boolean hasIncludeOrExclude = includes.length() > 0 || excludes.length() > 0;\n+        dataCacheSettings.append(hasIncludeOrExclude ? \"type-based(\" : \"default\");\n+        if (hasIncludeOrExclude) {\n+            dataCacheSettings.append(includes);\n+            if (includes.length() > 0 && excludes.length() > 0) \n+                dataCacheSettings.append(\",\");\n+            dataCacheSettings.append(excludes);\n+            dataCacheSettings.append(\")\");\n         }\n         Map<String, String> props = new HashMap<String, String>();\n-        props.put(\"openjpa.DataCacheManager\", dataCacheSettings.toString());\n-        props.put(\"openjpa.CacheDistributionPolicy\", policySettings.toString());\n+        props.put(\"openjpa.CacheDistributionPolicy\", dataCacheSettings.toString());\n         props.put(\"openjpa.DataCache\", \"true\");\n         props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n         props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\""}]}

