{"sha":"ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmMmExZTZjMWY4NjU1YTUyZmE5ZGI1YThiMWU5ZmZlNTRmOTJmODE=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2020-04-25T18:11:04Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2020-04-25T18:11:04Z"},"message":"OPENJPA-2807 trim spaces from column names\n\n@Index(columnList=\"a, b, c\") used to not trim the spaces.\nThus it was looking for a column \"a \", \"b \" and \"c \" which obviously could\nnot be found.","tree":{"sha":"88842eb8083acfbe6f72d528d8fe44986fcf9e90","url":"https://api.github.com/repos/apache/openjpa/git/trees/88842eb8083acfbe6f72d528d8fe44986fcf9e90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","html_url":"https://github.com/apache/openjpa/commit/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a579043550b1cc4d1e6348ff65b8bb86c861928","url":"https://api.github.com/repos/apache/openjpa/commits/2a579043550b1cc4d1e6348ff65b8bb86c861928","html_url":"https://github.com/apache/openjpa/commit/2a579043550b1cc4d1e6348ff65b8bb86c861928"}],"stats":{"total":208,"additions":124,"deletions":84},"files":[{"sha":"9b8b467035fdab06d8b93a369059920ea71529f2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","raw_url":"https://github.com/apache/openjpa/raw/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java?ref=ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","patch":"@@ -418,7 +418,7 @@ public int compareTo(Identifier o) {\n     /**\n      * Converts the provided set of names to an array of identifiers of the\n      * provided type, optionally delimiting the names.\n-     * @param columnNames\n+     * @param names columnNames or other DB identifier names\n      * @param id\n      */\n     public static DBIdentifier[] toArray(String[] names, DBIdentifierType id, boolean delimit) {\n@@ -427,7 +427,7 @@ public int compareTo(Identifier o) {\n         }\n         DBIdentifier[] sNames = new DBIdentifier[names.length];\n         for (int i = 0; i < names.length; i++) {\n-            sNames[i] = new DBIdentifier(names[i], id, delimit);\n+            sNames[i] = new DBIdentifier(names[i].trim(), id, delimit);\n         }\n         return sNames;\n     }"},{"sha":"dfd72b50ffd66bc30354868c499015b6dae42958","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java","raw_url":"https://github.com/apache/openjpa/raw/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/Normalizer.java?ref=ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","patch":"@@ -253,8 +253,6 @@ public static String removeHungarianNotation(String name) {\n \n     /**\n      * Removes default delimiters from a string.\n-     * @param name1\n-     * @param name2\n      */\n     public static String removeDelimiters(String name) {\n         return normalizer.removeDelimiters(defaultRule, name);\n@@ -263,17 +261,13 @@ public static String removeDelimiters(String name) {\n     /**\n      * Delimits a string if necessary, optionally forcing it to be\n      * delimited.\n-     * @param name1\n-     * @param name2\n      */\n     public static String delimit(String name, boolean force) {\n         return normalizer.delimit(defaultRule, name, force);\n     }\n \n     /**\n      * Determines whether a name can be split into multiple components.\n-     * @param name1\n-     * @param name2\n      */\n     public static boolean canSplit(String name) {\n         return normalizer.canSplit(defaultRule, name);\n@@ -282,8 +276,6 @@ public static boolean canSplit(String name) {\n     /**\n      * Determines whether a name can be split into multiple components, taking\n      * into account the specified delimiter.\n-     * @param name1\n-     * @param name2\n      */\n     public static boolean canSplit(String name, String delim) {\n         return normalizer.canSplit(defaultRule, name, delim);"},{"sha":"c53c2d10b3ed01e86e9d777b342b98d78af5ff9a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java","raw_url":"https://github.com/apache/openjpa/raw/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/identifier/IdentifierUtil.java?ref=ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","patch":"@@ -50,15 +50,15 @@\n \n     /**\n      * Delimit the name if it requires delimiters\n-     * @param the rule to use for delimiting\n+     * @param rule the rule to use for delimiting\n      * @param name the name to delimit\n      * @return the delimited name, if delimiting was necessary.\n      */\n     String delimit(String rule, String name);\n \n     /**\n      * Delimit the name if it requires delimiters\n-     * @param the rule to use for delimiting\n+     * @param rule the rule to use for delimiting\n      * @param name the name to delimit\n      * @return the delimited name, if delimiting was necessary.\n      */\n@@ -68,7 +68,7 @@\n      * Delimit the string with the option to force delimiting.  If force is\n      * true, the name will delimited without checking to see if it\n      * requires delimiters.\n-     * @param the rule to use for delimiting\n+     * @param rule the rule to use for delimiting\n      * @param name the name to delimit\n      * @param force add delimiters even if delimiting is not required\n      * @return the delimited name, if delimiting was necessary.\n@@ -79,7 +79,7 @@\n      * Delimit the string with the option to force delimiting.  If force is\n      * true, the name will delimited without checking to see if it\n      * requires delimiters.\n-     * @param the rule to use for delimiting\n+     * @param rule the rule to use for delimiting\n      * @param name the name to delimit\n      * @param force add delimiters even if delimiting is not required\n      * @return the delimited name, if delimiting was necessary.\n@@ -89,35 +89,35 @@\n \n     /**\n      * Remove delimiters from a delimited name\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name from which to remove delimiters\n      */\n     String removeDelimiters(String rule, String name);\n \n     /**\n      * Remove delimiters from a delimited name\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name from which to remove delimiters\n      */\n     String removeDelimiters(IdentifierConfiguration config, String rule, String name);\n \n     /**\n      * Remove delimiters from a delimited name\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name from which to remove delimiters\n      */\n     String removeDelimiters(IdentifierRule rule, String name);\n \n     /**\n      * Determines whether a name is delimited.\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name to examine for delimiters\n      */\n     boolean isDelimited(String rule, String name);\n \n     /**\n      * Determines whether a name is delimited.\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name to examine for delimiters\n      */\n     boolean isDelimited(IdentifierRule rule, String name);\n@@ -128,7 +128,7 @@\n      * <li> The SQL-92 Reference definition of a valid unquoted name</li>\n      * <li> The naming rule specified</li>\n      * </ul>\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name to examine for delimiting requirements\n      */\n     boolean requiresDelimiters(String rule, String name);\n@@ -139,7 +139,7 @@\n      * <li> The SQL-92 Reference definition of a valid unquoted name</li>\n      * <li> The naming rule specified</li>\n      * </ul>\n-     * @param the rule to use for removing delimiters\n+     * @param rule the rule to use for removing delimiters\n      * @param name the name to examine for delimiting requirements\n      */\n     boolean requiresDelimiters(IdentifierRule rule, String name);"},{"sha":"cd0c95450793644d81328a5996b375e1570f200f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","patch":"@@ -655,8 +655,10 @@ else if (info instanceof FieldMappingInfo)\n \n     org.apache.openjpa.jdbc.schema.Index createIndex(MetaDataContext ctx, javax.persistence.Index anno) {\n         String columnNames = anno.columnList();\n-        if (StringUtil.isEmpty(columnNames))\n+        if (StringUtil.isEmpty(columnNames)) {\n             throw new UserException(_loc.get(\"index-no-column\", ctx));\n+        }\n+\n         DBIdentifier[] sColNames = DBIdentifier.toArray(columnNames.split(\",\"), DBIdentifierType.COLUMN, delimit());\n         org.apache.openjpa.jdbc.schema.Index indx = new org.apache.openjpa.jdbc.schema.Index();\n         for (int i = 0; i < sColNames.length; i++) {"},{"sha":"1cf9b84b1de4272c52d81aab4a6f90930fb9cb9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java","status":"modified","additions":59,"deletions":35,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java","raw_url":"https://github.com/apache/openjpa/raw/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EntityWithIndices.java?ref=ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","patch":"@@ -26,51 +26,75 @@\n \n @Entity\n @Table(name = \"INDICES1\"\n-\t, indexes = {@Index(name = \"idx_index1\", columnList = \"index1\")\n-\t\t, @Index(name = \"idx_long\", columnList = \"LONG_NAME\", unique = true)})\n+    , indexes = {@Index(name = \"idx_index1\", columnList = \"INDEX1\")\n+        , @Index(name = \"idx_long\", columnList = \"LONG_NAME\", unique = true)\n+        , @Index(name = \"idx_wo_spaces\", columnList = \"INDEX1,COL2,COL3\")\n+        , @Index(name = \"idx_with_spaces\", columnList = \" LONG_NAME , COL2, COL3 \")})\n public class EntityWithIndices {\n-\t@Id\n-\t@Column(name = \"PK\")\n-\tprivate Long pk;\n+    @Id\n+    @Column(name = \"PK\")\n+    private Long pk;\n \n-\t@Column(name = \"INDEX1\")\n-\tprivate String index1;\n+    @Column(name = \"INDEX1\")\n+    private String index1;\n \n-\t@Column(name = \"LONG_NAME\")\n-\tprivate String longName;\n+    @Column(name = \"LONG_NAME\")\n+    private String longName;\n \n-\t@Column(name = \"NAME\")\n-\tprivate String name;\n+    @Column(name = \"NAME\")\n+    private String name;\n+    \n+    @Column(name = \"COL2\") \n+    private String col2;\n+    \n+    @Column(name = \"COL3\") \n+    private String col3;\n \n-\tpublic Long getPk() {\n-\t\treturn pk;\n-\t}\n+    public Long getPk() {\n+        return pk;\n+    }\n \n-\tpublic void setPk(Long pk) {\n-\t\tthis.pk = pk;\n-\t}\n+    public void setPk(Long pk) {\n+        this.pk = pk;\n+    }\n \n-\tpublic String getIndex1() {\n-\t\treturn index1;\n-\t}\n+    public String getIndex1() {\n+        return index1;\n+    }\n \n-\tpublic void setIndex1(String index1) {\n-\t\tthis.index1 = index1;\n-\t}\n+    public void setIndex1(String index1) {\n+        this.index1 = index1;\n+    }\n \n-\tpublic String getLongName() {\n-\t\treturn longName;\n-\t}\n+    public String getLongName() {\n+        return longName;\n+    }\n \n-\tpublic void setLongName(String longName) {\n-\t\tthis.longName = longName;\n-\t}\n+    public void setLongName(String longName) {\n+        this.longName = longName;\n+    }\n \n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n+    public String getName() {\n+        return name;\n+    }\n \n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getCol2() {\n+        return col2;\n+    }\n+\n+    public void setCol2(String col2) {\n+        this.col2 = col2;\n+    }\n+\n+    public String getCol3() {\n+        return col3;\n+    }\n+\n+    public void setCol3(String col3) {\n+        this.col3 = col3;\n+    }\n }"},{"sha":"a4a1d43c4ca0ee97fc7ad7e4b040ee2f31b93e83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java","status":"modified","additions":49,"deletions":27,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java","raw_url":"https://github.com/apache/openjpa/raw/ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestIndices.java?ref=ff2a1e6c1f8655a52fa9db5a8b1e9ffe54f92f81","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.openjpa.persistence.jdbc.annotations;\n \n+import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n@@ -31,34 +34,53 @@\n import org.junit.Test;\n \n public class TestIndices extends SingleEMFTestCase {\n-\t@Override\n-\tpublic void setUp() {\n-\t\tsetUp(EntityWithIndices.class, CLEAR_TABLES\n-//\t\t\t,\"openjpa.Log\",\"SQL=trace\"\n-\t\t);\n-\t}\n+    @Override\n+    public void setUp() {\n+        setUp(EntityWithIndices.class, CLEAR_TABLES\n+//            ,\"openjpa.Log\",\"SQL=trace\"\n+        );\n+    }\n \n-\t@Test\n-\tpublic void testIndicesCreated() {\n-\t\tJDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n-\t\tClassMapping cls = conf.getMappingRepositoryInstance().getMapping(EntityWithIndices.class, null, true);\n-\t\tTable table = cls.getTable();\n-\t\tIndex idx1 = table.getIndex(DBIdentifier.newIndex(\"idx_index1\"));\n-\t\tassertNotNull(\"Defined index should exist\", idx1);\n-\t\tassertFalse(idx1.isUnique());\n+    @Test\n+    public void testIndicesCreated() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().getMapping(EntityWithIndices.class, null, true);\n+        Table table = cls.getTable();\n+        Index idx1 = table.getIndex(DBIdentifier.newIndex(\"idx_index1\"));\n+        assertNotNull(\"Defined index should exist\", idx1);\n+        assertFalse(idx1.isUnique());\n \n-\t\tIndex idx2 = table.getIndex(DBIdentifier.newIndex(\"idx_long\"));\n-\t\tassertNotNull(\"Defined index should exist\", idx2);\n-\t\tassertTrue(idx2.isUnique());\n+        Index idx2 = table.getIndex(DBIdentifier.newIndex(\"idx_long\"));\n+        assertNotNull(\"Defined index should exist\", idx2);\n+        assertTrue(idx2.isUnique());\n \n-\t\tSet<String> indexedCols = new HashSet<>();\n-\t\tfor (Index idx : table.getIndexes()) {\n-\t\t\tfor (Column col : idx.getColumns()) {\n-\t\t\t\tindexedCols.add(col.getIdentifier().getName());\n-\t\t\t}\n-\t\t}\n-\t\tassertTrue(indexedCols.contains(\"INDEX1\"));\n-\t\tassertTrue(indexedCols.contains(\"LONG_NAME\"));\n-\t\tassertFalse(indexedCols.contains(\"NAME\"));\n-\t}\n+        Set<String> indexedCols = new HashSet<>();\n+        for (Index idx : table.getIndexes()) {\n+            for (Column col : idx.getColumns()) {\n+                indexedCols.add(col.getIdentifier().getName());\n+            }\n+        }\n+        assertTrue(indexedCols.contains(\"INDEX1\"));\n+        assertTrue(indexedCols.contains(\"LONG_NAME\"));\n+        assertFalse(indexedCols.contains(\"NAME\"));\n+\n+        // test multi column index without spaces\n+        assertIndexColumns(table, \"idx_wo_spaces\", \"INDEX1\", \"COL2\", \"COL3\");\n+\n+        // test multi column index without spaces\n+        assertIndexColumns(table, \"idx_with_spaces\", \"LONG_NAME\", \"COL2\", \"COL3\");\n+    }\n+\n+    private void assertIndexColumns(Table table, String indexName, String... assertedColumnNames) {\n+        Index idx = table.getIndex(DBIdentifier.newIndex(indexName));\n+        assertNotNull(\"Defined index should exist\", idx);\n+\n+        final List<String> indexColumnNames = Arrays.stream(idx.getColumns())\n+                .map(c -> c.getIdentifier().getName())\n+                .collect(Collectors.toList());\n+\n+        for (String assertedColumnName : assertedColumnNames) {\n+            assertTrue(\"Column \" + assertedColumnName + \" does not exist in index \" + indexName, indexColumnNames.contains(assertedColumnName));\n+        }\n+    }\n }"}]}

