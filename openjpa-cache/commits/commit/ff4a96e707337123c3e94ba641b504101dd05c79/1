{"sha":"ff4a96e707337123c3e94ba641b504101dd05c79","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmNGE5NmU3MDczMzcxMjNjM2U5NGJhNjQxYjUwNDEwMWRkMDVjNzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-26T22:04:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-26T22:04:06Z"},"message":"OPENJPA-340: Support for @UniqueConstraints on @TableGenerator, @SecondaryTable and @JoinTable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afcd44ad0ef11986c1b5eb8f1c6ca949c4100db7","url":"https://api.github.com/repos/apache/openjpa/git/trees/afcd44ad0ef11986c1b5eb8f1c6ca949c4100db7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff4a96e707337123c3e94ba641b504101dd05c79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff4a96e707337123c3e94ba641b504101dd05c79","html_url":"https://github.com/apache/openjpa/commit/ff4a96e707337123c3e94ba641b504101dd05c79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff4a96e707337123c3e94ba641b504101dd05c79/comments","author":null,"committer":null,"parents":[{"sha":"2b3f7ec90c3a834917232f4cdf27d00d0f62905a","url":"https://api.github.com/repos/apache/openjpa/commits/2b3f7ec90c3a834917232f4cdf27d00d0f62905a","html_url":"https://github.com/apache/openjpa/commit/2b3f7ec90c3a834917232f4cdf27d00d0f62905a"}],"stats":{"total":677,"additions":568,"deletions":109},"files":[{"sha":"c2eedf5b15050e372d017d9298471c69f2b51549","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -28,6 +28,7 @@\n \n import javax.transaction.NotSupportedException;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -38,6 +39,7 @@\n import org.apache.openjpa.jdbc.schema.SchemaTool;\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -49,6 +51,8 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -86,6 +90,7 @@\n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n+    private String[] _uniqueColumnNames;\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n@@ -191,6 +196,20 @@ public int getInitialValue() {\n     public void setInitialValue(int intValue) {\n         _intValue = intValue;\n     }\n+    \n+    /**\n+     * Sets the names of the columns on which a unique constraint is set.\n+     * @param columnsNames are passed as a single String concatenated with\n+     * a '|' character. This method parses it back to array of Strings. \n+     */\n+    public void setUniqueColumns(String columnNames) {\n+    \t_uniqueColumnNames = (StringUtils.isEmpty(columnNames)) \n+    \t\t? null : StringUtils.split(columnNames, '|');\n+    }\n+    \n+    public String getUniqueColumns() {\n+    \treturn StringUtils.join(_uniqueColumnNames, '|');\n+    }\n \n     /**\n      * @deprecated Use {@link #setAllocate}. Retained for backwards\n@@ -235,7 +254,12 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n             if (schema == null)\n                 schema = group.addSchema(schemaName);\n             \n-            schema.importTable(_pkColumn.getTable());\n+            Table copy = schema.importTable(_pkColumn.getTable());\n+            // importTable() does not import unique constraints\n+            Unique[] uniques = _pkColumn.getTable().getUniques();\n+            for (Unique u : uniques) {\n+            \tcopy.importUnique(u);\n+            }\n             // we need to reset the table name in the column with the\n             // fully qualified name for matching the table name from the\n             // Column.\n@@ -244,7 +268,6 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n             // some databases require to create an index for the sequence table\n             _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n                     _table, _pkColumn);\n-         \n         }\n     }\n \n@@ -361,6 +384,19 @@ private void buildTable() {\n             (_seqColumnName, table));\n         _seqColumn.setType(dict.getPreferredType(Types.BIGINT));\n         _seqColumn.setJavaType(JavaTypes.LONG);\n+        \n+        if (_uniqueColumnNames != null) {\n+    \t\tString uniqueName = dict.getValidUniqueName(\"UNQ\", table);\n+    \t\tUnique u = table.addUnique(uniqueName);\n+    \t\tfor (String columnName : _uniqueColumnNames) {\n+    \t\t\tif (!table.containsColumn(columnName))\n+    \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\",\n+    \t\t\t\t\tcolumnName, table.getName(), table.getColumnNames()));\n+    \t\t\tColumn col = table.getColumn(columnName);\n+    \t\t\tu.addColumn(col);\n+    \t\t}\n+        }\n+        \n     }\n \n     /**"},{"sha":"f39b552198e9a158201eff1fcb810366b4b204ae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":90,"deletions":44,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -19,13 +19,13 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.io.File;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Collection;\n-import java.util.ArrayList;\n+import java.util.Map.Entry;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n@@ -38,6 +38,7 @@\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -64,7 +65,8 @@\n     private File _file = null;\n     private int _srcType = SRC_OTHER;\n     private String[] _comments = null;\n-    private Collection _uniques = null;//Unique\n+    // Unique constraints indexed by primary or secondary table name\n+    private Map<String,List<Unique>> _uniques;\n \n     /**\n      * The described class name.\n@@ -221,25 +223,33 @@ public void setSecondaryTableJoinColumns(String tableName, List cols) {\n             _seconds = new HashMap();\n         _seconds.put(tableName, cols);\n     }\n-\n+    \n     /**\n-     * Return the table for the given class.\n+     * Return the named table for the given class.\n      */\n-    public Table getTable(final ClassMapping cls, boolean adapt) {\n+    public Table getTable(final ClassMapping cls, String tableName, \n+    \t\tboolean adapt) {\n         Table t = createTable(cls, new TableDefaults() {\n             public String get(Schema schema) {\n                 // delay this so that we don't do schema reflection for unique\n                 // table name unless necessary\n                 return cls.getMappingRepository().getMappingDefaults().\n                     getTableName(cls, schema);\n             }\n-        }, _schemaName, _tableName, adapt);\n+        }, _schemaName, tableName, adapt);\n         t.setComment(cls.getTypeAlias() == null\n             ? cls.getDescribedType().getName()\n             : cls.getTypeAlias());\n         return t;\n     }\n-\n+    \n+    /**\n+     * Return the primary table for the given class.\n+     */\n+    public Table getTable(final ClassMapping cls, boolean adapt) {\n+    \treturn getTable(cls, _tableName, adapt);\n+    }\n+    \n     /**\n      * Return the datastore identity columns for the given class, based on the\n      * given templates.\n@@ -340,51 +350,87 @@ public void copy(MappingInfo info) {\n                     _seconds.put(key, cinfo._seconds.get(key));\n             }\n         }\n-        if (cinfo._uniques != null) \n-           _uniques = new ArrayList(cinfo._uniques);\n-    }\n+        if (cinfo._uniques != null) {\n+        \tif (_uniques == null)\n+        \t\t_uniques = new HashMap<String, List<Unique>>();\n+        \tfor (Entry<String, List<Unique>> entry : cinfo._uniques.entrySet())\n+        \t\tif (!_uniques.containsKey(entry.getKey()))\n+        \t\t\t_uniques.put(entry.getKey(), entry.getValue());\n+        }\n \n-    public void addUnique(Unique unique) {\n-        if (unique == null)\n-            return;\n+    }\n+    \n+    /**\n+     * Add a unique constraint for the given table.\n+     * @param table must be primary table or secondary table name added a \n+     * priori to this receiver.\n+     * @param unique the unique constraint. null means no-op.\n+     */\n+    public void addUnique(String table, Unique unique) {\n+    \tif (!StringUtils.equals(_tableName, table) &&\n+    \t   (_seconds == null || !_seconds.containsKey(table))) {\n+    \t   \t\tthrow new UserException(_loc.get(\"unique-no-table\", \n+    \t   \t\t\tnew Object[]{table, _className, _tableName, \n+    \t   \t\t\t\t((_seconds == null) ? \"\" : _seconds.keySet())}));\n+    \t}\n+    \tif (unique == null)\n+    \t\treturn;\n         if (_uniques == null)\n-            _uniques = new ArrayList();\n-        _uniques.add(unique);\n+            _uniques = new HashMap<String,List<Unique>>();\n+        unique.setTableName(table);\n+        List<Unique> uniques = _uniques.get(table);\n+        if (uniques == null) {\n+        \tuniques = new ArrayList<Unique>();\n+        \tuniques.add(unique);\n+        \t_uniques.put(table, uniques);\n+        } else {\n+        \tuniques.add(unique);\n+        }\n     }\n     \n-    public Unique[] getUniques() {\n-        return (_uniques == null) ? new Unique[0] :\n-            (Unique[])_uniques.toArray(new Unique[_uniques.size()]);\n+    /**\n+     * Get the unique constraints of the given primary or secondary table.\n+     */\n+    public Unique[] getUniques(String table) {\n+        if (_uniques == null || _uniques.isEmpty() \n+        || _uniques.containsKey(table))\n+            return new Unique[0];\n+        List<Unique> uniques = _uniques.get(table);\n+        return uniques.toArray(new Unique[uniques.size()]);\n     }\n     \n-    public Unique[] getUniques(ClassMapping cm, boolean adapt) {\n+    /**\n+     * Get all the unique constraints associated with both the primary and/or \n+     * secondary tables.\n+     * \n+     */\n+    public Unique[] getUniques(MetaDataContext cm, boolean adapt) {\n         if (_uniques == null || _uniques.isEmpty())\n             return new Unique[0];\n-        \n-        Iterator uniqueConstraints = _uniques.iterator();\n-        Table table = cm.getTable();\n-        Collection result = new ArrayList();\n-        while (uniqueConstraints.hasNext()) {\n-            Unique template = (Unique) uniqueConstraints.next();\n-            Column[] templateColumns = template.getColumns();\n-            Column[] uniqueColumns = new Column[templateColumns.length];\n-            boolean missingColumn = true;\n-            for (int i=0; i<uniqueColumns.length; i++) {\n-                String columnName = templateColumns[i].getName();\n-                Column uniqueColumn = table.getColumn(columnName);\n-                missingColumn = (uniqueColumn == null);\n-                if (missingColumn) {\n-                    throw new UserException(_loc.get(\"missing-unique-column\", \n-                        cm, table, columnName));\n-                }\n-                uniqueColumns[i] = uniqueColumn;\n-            }\n-            Unique unique = super.createUnique(cm, \"unique\", template, \n-                uniqueColumns, adapt);\n-            if (unique != null)\n-                result.add(unique);\n+        List<Unique> result = new ArrayList<Unique>();\n+        for (String tableName : _uniques.keySet()) {\n+        \tList<Unique> uniqueConstraints = _uniques.get(tableName);\n+        \tfor (Unique template : uniqueConstraints) {\n+        \t\tColumn[] templateColumns = template.getColumns();\n+        \t\tColumn[] uniqueColumns = new Column[templateColumns.length];\n+        \t\tTable table = getTable((ClassMapping)cm, tableName, adapt);\n+        \t\tfor (int i=0; i<uniqueColumns.length; i++) {\n+        \t\t\tString columnName = templateColumns[i].getName();\n+        \t\t\tif (!table.containsColumn(columnName)) {\n+        \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\", \n+                           new Object[]{cm, columnName, tableName, \n+        \t\t\t\t\t\ttable.getColumnNames()}));\n+        \t\t\t}\n+        \t\t\tColumn uniqueColumn = table.getColumn(columnName);\n+        \t\t\tuniqueColumns[i] = uniqueColumn;\n+        \t\t}\n+        \t\tUnique unique = createUnique(cm, \"unique\", template,  \n+        \t\t\t\tuniqueColumns, adapt);\n+        \t\tif (unique != null)\n+        \t\t\tresult.add(unique);\n+        \t}\n         }\n-        return (Unique[]) result.toArray(new Unique[result.size()]);\n+        return result.toArray(new Unique[result.size()]);\n     }   \n     \n     public File getSourceFile() {"},{"sha":"effd4c473feafe2bb511774e5cea5d6de7a50e88","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -70,7 +70,8 @@\n     private Index _idx = null;\n     private boolean _outer = false;\n     private int _fetchMode = Integer.MAX_VALUE;\n-\n+    private Unique[] _joinTableUniques; // Unique constraints on JoinTable\n+    \n     /**\n      * Constructor.\n      */\n@@ -183,6 +184,14 @@ public void setJoinUnique(Unique unq) {\n         _unq = unq;\n     }\n \n+    public Unique[] getJoinTableUniques() {\n+    \treturn _joinTableUniques;\n+    }\n+    \n+    public void setJoinTableUniques(Unique[] unqs) {\n+    \t_joinTableUniques = unqs;\n+    }\n+    \n     /**\n      * Index on join foreign key columns.\n      */\n@@ -252,6 +261,13 @@ public void refSchemaComponents() {\n         _val.refSchemaComponents();\n         _key.refSchemaComponents();\n         _elem.refSchemaComponents();\n+        if (_joinTableUniques != null) {\n+        \tfor (Unique joinUnique : _joinTableUniques) {\n+        \t\tfor (Column col : joinUnique.getColumns()) {\n+        \t\t\tcol.ref();\n+        \t\t}\n+        \t}\n+        }\n     }\n \n     /**\n@@ -538,6 +554,7 @@ public void mapJoin(boolean adapt, boolean joinRequired) {\n             _io = _info.getColumnIO();\n             _outer = _info.isJoinOuter();\n             _unq = _info.getJoinUnique(this, false, adapt);\n+            _joinTableUniques = _info.getJoinTableUniques(this, false, adapt);\n             _idx = _info.getJoinIndex(this, adapt);\n         }\n     }"},{"sha":"fca07397ed24d48bd4b90dac89711aaf1acf34f6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"modified","additions":65,"deletions":1,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n \n import org.apache.openjpa.jdbc.schema.Column;\n@@ -31,7 +33,9 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Information about the mapping from a field to the schema, in raw form.\n@@ -40,6 +44,7 @@\n  * with the relevant pieces of information filled in.\n  *\n  * @author Abe White\n+ * @author Pinaki Poddar\n  */\n public class FieldMappingInfo\n     extends MappingInfo\n@@ -53,6 +58,7 @@\n     private Column _orderCol = null;\n     private boolean _canOrderCol = true;\n     private String[] _comments = null;\n+    private List<Unique> _joinTableUniques; // Unique constraints on the JoinTable\n \n     /**\n      * The user-supplied name of the table for this field.\n@@ -185,8 +191,47 @@ public Unique getJoinUnique(FieldMapping field, boolean def,\n                 getJoinUnique(field, fk.getTable(), fk.getColumns());\n         return createUnique(field, \"join\", unq, fk.getColumns(), adapt);\n     }\n-\n+    \n+    /**\n+     * Add Unique Constraint to the Join Table.\n+     */\n+    public void addJoinTableUnique(Unique u) {\n+    \tif (_joinTableUniques == null)\n+    \t\t_joinTableUniques = new ArrayList<Unique>();\n+    \t_joinTableUniques.add(u);\n+    }\n+    \n     /**\n+     * Get the unique constraints associated with the Sequence table.\n+     */\n+    public Unique[] getJoinTableUniques(FieldMapping field, boolean def, \n+    \t\tboolean adapt) {\n+        return getUniques(field, _joinTableUniques, def, adapt);\n+    }   \n+    \n+    private Unique[] getUniques(FieldMapping field, List<Unique> uniques, \n+    \t\tboolean def, boolean adapt) {\n+        if (uniques == null || uniques.isEmpty())\n+            return new Unique[0];\n+        Collection<Unique> result = new ArrayList<Unique>();\n+        for (Unique template : uniques) {\n+            Column[] templateColumns = template.getColumns();\n+            Column[] uniqueColumns = new Column[templateColumns.length];\n+            Table table = getTable(field, true, adapt);\n+            for (int i=0; i<uniqueColumns.length; i++) {\n+                String columnName = templateColumns[i].getName();\n+                Column uniqueColumn = table.getColumn(columnName);\n+                uniqueColumns[i] = uniqueColumn;\n+            }\n+            Unique unique = createUnique(field, \"unique\", template,  \n+                uniqueColumns, adapt);\n+            if (unique != null)\n+                result.add(unique);\n+        }\n+        return result.toArray(new Unique[result.size()]);\n+    }   \n+    \n+   /**\n      * Index on the field join.\n      */\n     public Index getJoinIndex(FieldMapping field, boolean adapt) {\n@@ -261,6 +306,7 @@ public void syncWith(FieldMapping field) {\n \n         syncIndex(field, field.getJoinIndex());\n         syncUnique(field, field.getJoinUnique());\n+        syncJoinTableUniques(field, field.getJoinTableUniques());\n         syncOrderColumn(field);\n         syncStrategy(field);\n     }\n@@ -290,6 +336,24 @@ public void syncOrderColumn(FieldMapping field) {\n         else\n             _orderCol = null;\n     }\n+    \n+    /**\n+     * Sets internal constraint information to match given mapped constraint.\n+     */\n+    protected void syncJoinTableUniques(MetaDataContext context, Unique[] unqs) {\n+        if (unqs == null) {\n+            _joinTableUniques = null;\n+            return;\n+        }\n+        _joinTableUniques = new ArrayList<Unique>();\n+        for (Unique unique:unqs) {\n+        \tUnique copy = new Unique();\n+        \tcopy.setName(unique.getName());\n+        \tcopy.setDeferred(unique.isDeferred());\n+        \t_joinTableUniques.add(unique);\n+        }\n+    }\n+\n \n     public boolean hasSchemaComponents() {\n         return super.hasSchemaComponents() || _tableName != null"},{"sha":"ec20b8f74a804fd6015672c1f8ac3c4feed7ed9b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -927,7 +927,7 @@ protected Unique createUnique(MetaDataContext context, String prefix,\n                     context, dict.platform));\n             deferred = false;\n         }\n-\n+        \n         Unique unq = table.addUnique(name);\n         unq.setDeferred(deferred);\n         unq.setColumns(cols);\n@@ -1534,7 +1534,7 @@ protected void syncUnique(MetaDataContext context, Unique unq) {\n         _unq.setName(unq.getName());\n         _unq.setDeferred(unq.isDeferred());\n     }\n-\n+    \n     /**\n      * Sets internal constraint and column information to match given mapped\n      * constraint."},{"sha":"981d4ae060957632b7e4b17704e982f48591dab0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -19,11 +19,16 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCSeqValue;\n import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.ValueTableJDBCSeq;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.meta.SequenceMetaData;\n \n@@ -55,13 +60,15 @@\n     private static final String PROP_SEQUENCE_COL = \"SequenceColumn\";\n     private static final String PROP_PK_COL = \"PrimaryKeyColumn\";\n     private static final String PROP_PK_VALUE = \"PrimaryKeyValue\";\n+    private static final String PROP_UNIQUE = \"UniqueColumns\";\n \n     private File _mapFile = null;\n     private String _table = null;\n     private String _sequenceColumn = null;\n     private String _primaryKeyColumn = null;\n     private String _primaryKeyValue = null;\n-\n+    private String[] _uniqueColumns   = null;\n+    \n     public SequenceMapping(String name, MappingRepository repos) {\n         super(name, repos);\n     }\n@@ -138,6 +145,14 @@ public void setPrimaryKeyValue(String primaryKeyValue) {\n         _primaryKeyValue = primaryKeyValue;\n     }\n \n+    public void setUniqueColumns(String[] cols) {\n+    \t_uniqueColumns = cols;\n+    }\n+    \n+    public String[] getUniqueColumns() {\n+    \treturn _uniqueColumns;\n+    }\n+    \n     protected PluginValue newPluginValue(String property) {\n         return new JDBCSeqValue(property);\n     }\n@@ -148,5 +163,11 @@ protected void addStandardProperties(StringBuffer props) {\n         appendProperty(props, PROP_SEQUENCE_COL, _sequenceColumn);\n         appendProperty(props, PROP_PK_COL, _primaryKeyColumn);\n         appendProperty(props, PROP_PK_VALUE, _primaryKeyValue);\n+        // Array of unique column names are passed to configuration\n+        // as a single string \"x|y|z\". The configurable (TableJDBCSeq) must\n+        // parse it back.\n+        if (_uniqueColumns != null && _uniqueColumns.length > 0)\n+        \tappendProperty(props, PROP_UNIQUE, \n+        \t\t\tStringUtils.join(_uniqueColumns,'|'));\n     }\n }"},{"sha":"e30d0f648a03095adb75e1c8163ce22a9d4a5f0d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -252,6 +252,11 @@ public String getResourceName() {\n         return _rels;\n     }\n \n+    public String[] getColumnNames() {\n+    \treturn _colMap == null ? new String[0] : \n+    \t\t(String[])_colMap.keySet().toArray(new String[_colMap.size()]);\n+    }\n+    \n     /**\n      * Return the column with the given name, or null if none.\n      */\n@@ -260,6 +265,17 @@ public Column getColumn(String name) {\n             return null;\n         return (Column) _colMap.get(name.toUpperCase());\n     }\n+    \n+    /**\n+     * Affirms if this table contains the column of the given name without any \n+     * side-effect. \n+     * @see Table#getColumn(String) can have side-effect of creating a column\n+     * for dynamic table implementation.\n+     */\n+    public boolean containsColumn(String name) {\n+    \treturn name != null && _colMap != null \n+    \t\t&& _colMap.containsKey(name.toUpperCase());\n+    }\n \n     /**\n      * Add a column to the table."},{"sha":"231ebdda7f6c2fd8b12e0fc91f08ca4229ace179","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -18,18 +18,21 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * Represents a unique constraint. It can also represent a partial constraint.\n  *\n  * @author Abe White\n  */\n public class Unique\n     extends LocalConstraint {\n-\n+\tprivate boolean _isAutoSetName = false;\n     /**\n      * Default constructor.\n      */\n     public Unique() {\n+    \t_isAutoSetName = true;\n     }\n \n     /**\n@@ -45,6 +48,26 @@ public Unique(String name, Table table) {\n     public boolean isLogical() {\n         return false;\n     }\n+    \n+    public void addColumn(Column col) {\n+    \tsuper.addColumn(col);\n+    \tcol.setNotNull(true);\n+    \tif (_isAutoSetName && getTable() == null) {\n+    \t\tString pre = StringUtils.isEmpty(getName()) ? \"UNQ\" : getName();\n+    \t\tsetName(pre + \"_\" + col.getName());\n+    \t\t_isAutoSetName = true;\n+    \t}\n+    }\n+    \n+    /**\n+     * Set the name of the constraint. This method cannot be called if the\n+     * constraint already belongs to a table.\n+     */\n+    public void setName(String name) {\n+        super.setName(name);\n+        _isAutoSetName = false;\n+    }\n+\n \n     /**\n      * Return true if the structure of this primary key matches that of"},{"sha":"e53d1361e605292fd95c3130d5ef087ed7802a9d","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -410,6 +410,8 @@ untraversable-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to traverse through a non-relation field.\n num-cols-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to map a field that does not have exactly 1 column.\n-missing-unique-column: A unique constraint specified in mapping of class \"{0}\" \\\n-    to table \"{1}\" includes a column \"{2}\". However, the column does not \\\n-\texist in \"{1}\" table.\n+unique-missing-column: The column \"{1}\" in a unique constraint in \"{0}\" on \\\n+\ttable \"{2}\" can not be found in the list of available columns \"{3}\".\n+unique-no-table: A unique constraint on table \"{0}\" can not be added to \\\n+\tmapping of class \"{1}\" because the table does neither match its primary \\\n+\ttable \"{2}\" nor any of its secondary table(s) \"{3}\".\n\\ No newline at end of file"},{"sha":"d9908d71cc3212978eed8bb9ad1751d7ab5572f1","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":54,"deletions":39,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -61,6 +61,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n@@ -80,6 +81,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.persistence.AnnotationPersistenceMetaDataParser;\n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n import org.apache.openjpa.util.InternalException;\n@@ -244,10 +246,16 @@ private void parseTableGenerator(AnnotatedElement el, TableGenerator gen) {\n         meta.setAllocate(gen.allocationSize());\n         meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n             meta.SRC_ANNOTATIONS);\n-\n-        //### EJB3\n-        if (gen.uniqueConstraints().length > 0 && log.isWarnEnabled())\n-            log.warn(_loc.get(\"unique-constraints\", name));\n+        \n+        switch (gen.uniqueConstraints().length) {\n+        case 0: \n+        \tbreak; // nothing to do\n+        case 1: \n+        \tmeta.setUniqueColumns(gen.uniqueConstraints()[0].columnNames());\n+        \tbreak;\n+        default:\n+        \tlog.warn(_loc.get(\"unique-many-on-seq-unsupported\", el, name));\n+        }\n     }\n \n     @Override\n@@ -464,8 +472,7 @@ private void parseSecondaryTables(ClassMapping cm,\n         Log log = getLog();\n \n         String name;\n-        List<Column> joins;\n-        boolean warnUnique = false;\n+        List<Column> joins = null;\n         for (SecondaryTable table : tables) {\n             name = table.name();\n             if (StringUtils.isEmpty(name))\n@@ -476,14 +483,10 @@ private void parseSecondaryTables(ClassMapping cm,\n                 joins = new ArrayList<Column>(table.pkJoinColumns().length);\n                 for (PrimaryKeyJoinColumn join : table.pkJoinColumns())\n                     joins.add(newColumn(join));\n-                info.setSecondaryTableJoinColumns(name, joins);\n-            }\n-            warnUnique |= table.uniqueConstraints().length > 0;\n+            } \n+            info.setSecondaryTableJoinColumns(name, joins);\n+            addUniqueConstraints(name, cm, info, table.uniqueConstraints());\n         }\n-\n-        //### EJB3\n-        if (warnUnique && log.isWarnEnabled())\n-            log.warn(_loc.get(\"unique-constraints\", cm));\n     }\n \n     /**\n@@ -494,10 +497,38 @@ private void parseTable(ClassMapping cm, Table table) {\n         if (tableName != null)\n             cm.getMappingInfo().setTableName(tableName);\n \n-        for (UniqueConstraint uniqueConstraint:table.uniqueConstraints()) {\n-            Unique unique = newUnique(cm, null, uniqueConstraint.columnNames());\n-            cm.getMappingInfo().addUnique(unique);\n-        }\n+        addUniqueConstraints(tableName, cm, cm.getMappingInfo(), \n+        \t\ttable.uniqueConstraints());\n+    }\n+    \n+    Unique createUniqueConstraint(MetaDataContext ctx, UniqueConstraint anno) {\n+\t\tString[] columnNames = anno.columnNames();\n+\t\tif (columnNames == null || columnNames.length == 0)\n+\t\t\tthrow new UserException(_loc.get(\"unique-no-column\", ctx));\n+\t\tUnique uniqueConstraint = new Unique();\n+\t\tfor (int i=0; i<columnNames.length; i++) {\n+\t\t\tif (StringUtils.isEmpty(columnNames[i]))\n+\t\t\t\tthrow new UserException(_loc.get(\"unique-empty-column\", \n+\t\t\t\t\t\tArrays.toString(columnNames), ctx));\n+\t\t\tColumn column = new Column();\n+\t\t\tcolumn.setName(columnNames[i]);\n+\t\t\tuniqueConstraint.addColumn(column);\n+\t\t}\n+\t\treturn uniqueConstraint;\n+    }\n+    \n+    void addUniqueConstraints(String table, MetaDataContext ctx, \n+    \t\tMappingInfo info, UniqueConstraint...uniqueConstraints) {\n+    \tfor (UniqueConstraint anno : uniqueConstraints) {\n+    \t\tUnique unique = createUniqueConstraint(ctx, anno);\n+    \t\tunique.setTableName(table);\n+    \t\tif (info instanceof ClassMappingInfo)\n+    \t\t\t((ClassMappingInfo)info).addUnique(table, unique);\n+    \t\telse if (info instanceof FieldMappingInfo)\n+    \t\t\t((FieldMappingInfo)info).addJoinTableUnique(unique);\n+    \t\telse\n+    \t\t\tthrow new InternalException();\n+    \t}\n     }\n \n     /**\n@@ -1261,8 +1292,7 @@ protected void parseColumns(FieldMapping fm,\n             }\n \n             unique |= (pcols[i].unique()) ? TRUE : FALSE;\n-            secondary = trackSecondaryTable(fm, secondary,\n-                pcols[i].table(), i);\n+        \tsecondary = trackSecondaryTable(fm, secondary,\tpcols[i].table(), i);\n         }\n \n         setColumns(fm, fm.getValueInfo(), cols, unique);\n@@ -1337,11 +1367,13 @@ private String trackSecondaryTable(FieldMapping fm, String secondary,\n      * Parse @JoinTable.\n      */\n     private void parseJoinTable(FieldMapping fm, JoinTable join) {\n-        fm.getMappingInfo().setTableName(toTableName(join.schema(),\n-            join.name()));\n-        parseJoinColumns(fm, fm.getMappingInfo(), false, join.joinColumns());\n+    \tFieldMappingInfo info = fm.getMappingInfo();\n+        info.setTableName(toTableName(join.schema(), join.name()));\n+        parseJoinColumns(fm, info, false, join.joinColumns());\n         parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n             join.inverseJoinColumns());\n+        addUniqueConstraints(info.getTableName(), fm, info,  \n+        \t\tjoin.uniqueConstraints());\n     }\n \n     /**\n@@ -1617,21 +1649,4 @@ private static Column newColumn(ElementJoinColumn join) {\n \t\tcol.setFlag (Column.FLAG_UNUPDATABLE, !join.updatable ());\n \t\treturn col;\n \t}\n-    \n-    private static Unique newUnique(ClassMapping cm, String name, \n-        String[] columnNames) {\n-        if (columnNames == null || columnNames.length == 0)\n-            return null;\n-        Unique uniqueConstraint = new Unique();\n-        uniqueConstraint.setName(name);\n-        for (int i=0; i<columnNames.length; i++) {\n-            if (StringUtils.isEmpty(columnNames[i]))\n-                throw new UserException(_loc.get(\"empty-unique-column\", \n-                    Arrays.toString(columnNames), cm));\n-            Column column = new Column();\n-            column.setName(columnNames[i]);\n-            uniqueConstraint.addColumn(column);\n-        }\n-        return uniqueConstraint;\n-    }\n }"},{"sha":"493a8ee2b54713d5ec840d068f57feebb1735907","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -221,12 +221,12 @@ protected void serializeClassMappingContent(ClassMetaData mapping) {\n         AnnotationBuilder abTable = addAnnotation(Table.class, mapping);\n         serializeTable(info.getTableName(), Strings\n             .getClassName(mapping.getDescribedType()), null,\n-            info.getUniques(), abTable);\n+            info.getUniques(info.getTableName()), abTable);\n         serializeColumns(info, ColType.PK_JOIN, null, abTable, cls);\n         for (String second : info.getSecondaryTableNames()) {\n             AnnotationBuilder abSecTable =\n                 addAnnotation(SecondaryTable.class, mapping);\n-            serializeTable(second, null, info, null, abSecTable);\n+            serializeTable(second, null, info, info.getUniques(second), abSecTable);\n         }\n     }\n "},{"sha":"fade2490cb809286ff8eac0b0169896f1fa42c1f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":31,"deletions":10,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.meta.DiscriminatorMappingInfo;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n import org.apache.openjpa.jdbc.meta.SequenceMapping;\n@@ -56,6 +57,8 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\n+import org.apache.openjpa.util.InternalException;\n+\n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n \n /**\n@@ -293,6 +296,9 @@ protected void endClassMappingElement(String name)\n             case COLUMN_NAME:\n                 endColumnName();\n                 break;\n+            case TABLE_GEN:\n+            \tendTableGenerator();\n+            \tbreak;\n         }\n     }\n \n@@ -405,8 +411,13 @@ private boolean startTableGenerator(Attributes attrs) {\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n         seq.setSource(getSourceFile(), scope, seq.SRC_XML);\n+        pushElement(seq);\n         return true;\n     }\n+    \n+    private void endTableGenerator() {\n+    \tpopElement();\n+    }\n \n     /**\n      * Parse inheritance.\n@@ -880,13 +891,9 @@ private boolean startColumnResult(Attributes attrs)\n      */\n     private boolean startUniqueConstraint(Attributes attrs) \n         throws SAXException {\n-        Object current = currentElement();\n-        if (current instanceof ClassMapping && _secondaryTable == null) {\n-            Unique unique = new Unique();\n-            pushElement(unique);\n-            return true;\n-        } \n-        return false;\n+        Unique unique = new Unique();\n+        pushElement(unique);\n+        return true;\n     }\n     \n     /**\n@@ -897,9 +904,23 @@ private boolean startUniqueConstraint(Attributes attrs)\n      */\n     private void endUniqueConstraint() {\n         Unique unique = (Unique) popElement();\n-        Object current = currentElement();\n-        if (current instanceof ClassMapping && _secondaryTable == null)\n-            ((ClassMapping) current).getMappingInfo().addUnique(unique);\n+        Object ctx = currentElement();\n+        String tableName = \"?\";\n+        ClassMappingInfo info = null;\n+        if (ctx instanceof ClassMapping) {\n+        \tinfo = ((ClassMapping) ctx).getMappingInfo();\n+        \ttableName = (_secondaryTable != null) ? info.getTableName() : _secondaryTable;\n+        \tinfo.addUnique(tableName, unique);\n+        } else if (ctx instanceof FieldMapping) {// JoinTable\n+        \tinfo = ((FieldMapping)ctx).getDeclaringMapping().getMappingInfo();\n+        \ttableName = info.getTableName();\n+        \tinfo.addUnique(tableName, unique);\n+        } else if (ctx instanceof SequenceMapping) {\n+        \ttableName = ((SequenceMapping)ctx).getTable();\n+        \tunique.setTableName(tableName);\n+        } else {\n+        \tthrow new InternalException();\n+        }\n     }\n     \n     /**"},{"sha":"65783e93457d13af197dcae4b132088c3bdd23f7","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -186,9 +186,9 @@ protected void serializeClassMappingContent(ClassMetaData mapping)\n         ClassMappingInfo info = cls.getMappingInfo();\n         serializeTable(info.getTableName(), \"table\", Strings\n             .getClassName(mapping.getDescribedType()), null, \n-            info.getUniques());\n+            info.getUniques(info.getTableName()));\n         for (String second : info.getSecondaryTableNames())\n-            serializeTable(second, \"secondary-table\", null, info, null);\n+            serializeTable(second, \"secondary-table\", null, info, info.getUniques(second));\n         serializeColumns(info, ColType.PK_JOIN, null);\n     }\n "},{"sha":"468a0a6277eca75d9babf43c2eea528c099e8805","filename":"openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -46,8 +46,13 @@ second-version: Version property \"{0}\" cannot map to a secondary table column. \\\n \tVersion columns must always be in the primary table of the class.\n not-embedded: Attempt to declare mapping overrides on non-embedded field \"{0}\".\n no-gen-table: No generated table found at \"{0}\".\n-empty-unique-column: A unique constraint \"{0}\" specified in mapping of class  \\\n+unique-no-column: A unique constraint specified in mapping of \"{0}\" specified \\\n+    no column.\n+unique-empty-column: A unique constraint \"{0}\" specified in mapping of class  \\\n     \"{1}\" includes an empty column.\n+unique-many-on-seq-unsupported: More than one unique constraints is specified \\\n+\ton sequence generator \"{1}\" in \"{0}\". But multiple unique constraint on \\\n+\tsequence generator is currently not supported.    \n discriminator-on-abstract-class: A discriminator value has been specified for \\\n \tthe abstract class \"{0}\". The discriminator will never be used and may be \\\n \tsafely removed."},{"sha":"c0c3357310f275b2e278435de9f6be8296eb20cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUnique.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUnique.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUnique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUnique.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestUnique extends SQLListenerTestCase {\r\n+    @Override\r\n+    public void setUp(Object... props) {\r\n+    \tsuper.setUp(UniqueA.class, UniqueB.class);    \t\t\t    \r\n+    }\r\n+    \r\n+\tpublic void testMapping() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\t\t// The above should trigger schema definition\r\n+\t\t\r\n+\t\tList<String> sqls = super.sql;\r\n+\t\t\r\n+\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_A\", \r\n+\t\t\t\t\"UNIQUE (a1, a2)\", \r\n+\t\t\t\t\"UNIQUE (a3, a4)\");\r\n+\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_B\", \r\n+\t\t\t\t\"UNIQUE (b1, b2)\");\r\n+\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_SECONDARY\", \r\n+\t\t\t\t\"UNIQUE (sa1)\");\r\n+\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_GENERATOR\", \r\n+\t\t\t\t\"UNIQUE (GEN1, GEN2)\");\r\n+\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_JOINTABLE\", \r\n+\t\t\t\t\"UNIQUE (UNIQUEA_AID, BS_BID)\");\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tvoid assertSQLFragnment(List<String> list, String...keys) {\r\n+\t\tfor (String sql : list) {\r\n+\t\t\tString SQL = sql.toUpperCase();\r\n+\t\t\tboolean matched = true;\r\n+\t\t\tfor (String key : keys) {\r\n+\t\t\t\tString KEY = key.toUpperCase();\r\n+\t\t\t\tif (SQL.indexOf(KEY) == -1) {\r\n+\t\t\t\t\tmatched = false;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matched)\r\n+\t\t\t\treturn;\r\n+\t\t}\r\n+\t\tint i = 0;\r\n+\t\tfor (String sql : list) {\r\n+\t\t\ti++;\r\n+\t\t\tSystem.out.println(\"\"+i+\":\"+sql);\r\n+\t\t}\r\n+\t\tfail(\"None of the above SQL contains all keys \" + Arrays.toString(keys));\r\n+\t}\r\n+}\r"},{"sha":"08d59f74184e75987da9e839724409a4dc736c3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinTable;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.SecondaryTable;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.UniqueConstraint;\r\n+\r\n+/**\r\n+ * Data structures for testing unique constraint settings\r\n+ * on ORM Annotatations.\r\n+ * \r\n+ * Unique columns must be non-nullable.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"UNIQUE_A\",\r\n+\t   uniqueConstraints={@UniqueConstraint(columnNames={\"a1\",\"a2\"}),\r\n+\t\t                  @UniqueConstraint(columnNames={\"a3\",\"a4\"})})\r\n+@SecondaryTable(name=\"UNIQUE_SECONDARY\",\r\n+\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"sa1\"}))\r\n+\r\n+public class UniqueA {\r\n+\t@Id\r\n+\tprivate int aid;\r\n+\r\n+\t@Column(unique=true, nullable=false)\r\n+\tprivate int a1;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int a2;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int a3;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int a4;\r\n+\t\r\n+\t\r\n+\tprivate int a5;\r\n+\tprivate int a6;\r\n+\t\r\n+\t@Column(table=\"UNIQUE_SECONDARY\", nullable=false)\r\n+\tprivate short sa1;\r\n+\t@Column(table=\"UNIQUE_SECONDARY\")\r\n+\tprivate short sa2;\r\n+\t\r\n+\t@ManyToMany\r\n+\t@JoinTable(name=\"UNIQUE_JOINTABLE\",\r\n+\t\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"UNIQUEA_AID\",\"BS_BID\"}))\r\n+\tprivate Collection<UniqueB> bs;\r\n+}\r"},{"sha":"db39129af913dec44a696e96e111484626d8849c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","raw_url":"https://github.com/apache/openjpa/raw/ff4a96e707337123c3e94ba641b504101dd05c79/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java?ref=ff4a96e707337123c3e94ba641b504101dd05c79","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name=\"UNIQUE_B\",\r\n+\t   uniqueConstraints={@UniqueConstraint(columnNames={\"b1\",\"b2\"})})\r\n+public class UniqueB {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.TABLE, generator=\"testGenerator\")\r\n+\t@TableGenerator(name=\"testGenerator\", table=\"UNIQUE_GENERATOR\", \r\n+\t\t\tpkColumnName=\"GEN1\", valueColumnName=\"GEN2\",\r\n+\t\t\tuniqueConstraints={@UniqueConstraint(columnNames={\"GEN1\",\"GEN2\"})})\r\n+\tprivate int bid;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int b1;\r\n+\t@Column(nullable=false)\r\n+\tprivate int b2;\r\n+}\r"}]}

