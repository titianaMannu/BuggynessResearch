{"sha":"ff4dc0c5cece716f812c2e2c36979b3756492bd2","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmNGRjMGM1Y2VjZTcxNmY4MTJjMmUyYzM2OTc5YjM3NTY0OTJiZDI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-07-06T18:18:43Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-07-06T18:18:43Z"},"message":"OPENJPA-2025: Generate SingularAttribute for unannotated arrays, ListAttribute will be used for @PersistentCollections.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1143520 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8bc15e0f21dd754eac27112f007e667836de0b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8bc15e0f21dd754eac27112f007e667836de0b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff4dc0c5cece716f812c2e2c36979b3756492bd2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff4dc0c5cece716f812c2e2c36979b3756492bd2","html_url":"https://github.com/apache/openjpa/commit/ff4dc0c5cece716f812c2e2c36979b3756492bd2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff4dc0c5cece716f812c2e2c36979b3756492bd2/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"928aa703cba0e665bee997ba2b05703905bd0890","url":"https://api.github.com/repos/apache/openjpa/commits/928aa703cba0e665bee997ba2b05703905bd0890","html_url":"https://github.com/apache/openjpa/commit/928aa703cba0e665bee997ba2b05703905bd0890"}],"stats":{"total":28,"additions":21,"deletions":7},"files":[{"sha":"558e39a04b261d525fcfde69e552a3c719f603e1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/ff4dc0c5cece716f812c2e2c36979b3756492bd2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/ff4dc0c5cece716f812c2e2c36979b3756492bd2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=ff4dc0c5cece716f812c2e2c36979b3756492bd2","patch":"@@ -48,6 +48,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n import org.apache.openjpa.persistence.PersistenceMetaDataFactory;\n+import org.apache.openjpa.persistence.PersistentCollection;\n import org.apache.openjpa.persistence.util.SourceCode;\n \n \n@@ -165,9 +166,10 @@ public String getMetaModelType() {\n      *  \n      */\n     private TypeCategory toMetaModelTypeCategory(TypeMirror mirror, \n-        String name) {\n-        if (mirror.getKind() == TypeKind.ARRAY)\n+        String name, boolean persistentCollection) {   \n+        if (mirror.getKind() == TypeKind.ARRAY && persistentCollection ) {\n             return TypeCategory.LIST;\n+        }\n         if (CLASSNAMES_COLLECTION.contains(name))\n             return TypeCategory.COLLECTION;\n         if (CLASSNAMES_LIST.contains(name))\n@@ -241,10 +243,13 @@ private boolean process(TypeElement e) {\n             Set<? extends Element> members = handler.getPersistentMembers(e);\n             \n             for (Element m : members) {\n+                boolean isPersistentCollection = m.getAnnotation(PersistentCollection.class) != null; \n+                \n                 TypeMirror decl  = handler.getDeclaredType(m);\n                 String fieldName = handler.getPersistentMemberName(m);\n-                String fieldType = handler.getDeclaredTypeName(decl);\n-                TypeCategory typeCategory = toMetaModelTypeCategory(decl, fieldType);\n+                String fieldType = handler.getDeclaredTypeName(decl, true, isPersistentCollection);  \n+                TypeCategory typeCategory =\n+                    toMetaModelTypeCategory(decl, fieldType, isPersistentCollection);\n                 String metaModelType = typeCategory.getMetaModelType();\n                 SourceCode.Field modelField = null;\n                 switch (typeCategory) {"},{"sha":"d4550965278c92cacb8a59c17047e485f75bf10a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/ff4dc0c5cece716f812c2e2c36979b3756492bd2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","raw_url":"https://github.com/apache/openjpa/raw/ff4dc0c5cece716f812c2e2c36979b3756492bd2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java?ref=ff4dc0c5cece716f812c2e2c36979b3756492bd2","patch":"@@ -548,6 +548,10 @@ String getDeclaredTypeName(TypeMirror mirror) {\n     \treturn getDeclaredTypeName(mirror, true);\n     }\n     \n+    String getDeclaredTypeName(TypeMirror mirror, boolean box) {\n+        return getDeclaredTypeName(mirror, box, false);\n+    }\n+    \n      /**\n      * Get the element name of the class the given mirror represents. If the\n      * mirror is primitive then returns the corresponding boxed class name.\n@@ -556,12 +560,17 @@ String getDeclaredTypeName(TypeMirror mirror) {\n      * <code>java.util.Set&lt;java.lang.String&gt;</code> this method will \n      * return <code>java.util.Set</code>.\n      */\n-    String getDeclaredTypeName(TypeMirror mirror, boolean box) {\n+    String getDeclaredTypeName(TypeMirror mirror, boolean box, boolean persistentCollection) {\n         if (mirror == null || mirror.getKind() == TypeKind.NULL || mirror.getKind() == TypeKind.WILDCARD)\n             return \"java.lang.Object\";\n     \tif (mirror.getKind() == TypeKind.ARRAY) {\n-    \t\tTypeMirror comp = ((ArrayType)mirror).getComponentType();\n-    \t\treturn getDeclaredTypeName(comp, false);\n+    \t    if(persistentCollection) { \n+    \t        TypeMirror comp = ((ArrayType)mirror).getComponentType();\n+    \t        return getDeclaredTypeName(comp, false);\n+    \t    }\n+    \t    else { \n+    \t        return mirror.toString();\n+    \t    }\n     \t}\n     \tmirror = box ? box(mirror) : mirror;\n     \tif (isPrimitive(mirror))"}]}

