{"sha":"ff932542e851f486df77726ee5ea2c9fe65a901a","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmOTMyNTQyZTg1MWY0ODZkZjc3NzI2ZWU1ZWEyYzlmZTY1YTkwMWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-31T22:04:13Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-31T22:04:13Z"},"message":"OPENJPA-1174:\nEnsure lazy hint from mapping-file is handled the same as an annotation\nSubmitted by: Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799754 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a67b6b7eebe5b584dc3c599f48781cd1a61078f","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a67b6b7eebe5b584dc3c599f48781cd1a61078f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff932542e851f486df77726ee5ea2c9fe65a901a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff932542e851f486df77726ee5ea2c9fe65a901a","html_url":"https://github.com/apache/openjpa/commit/ff932542e851f486df77726ee5ea2c9fe65a901a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff932542e851f486df77726ee5ea2c9fe65a901a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"385558d275a7fcbd237ee2ce72cdf40a660a8010","url":"https://api.github.com/repos/apache/openjpa/commits/385558d275a7fcbd237ee2ce72cdf40a660a8010","html_url":"https://github.com/apache/openjpa/commit/385558d275a7fcbd237ee2ce72cdf40a660a8010"}],"stats":{"total":545,"additions":533,"deletions":12},"files":[{"sha":"83af0959258ed2d41250e9547a23c4147b70e256","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import javax.persistence.*;\n+@Entity\n+@Table(name=\"COUNTRY1\")\n+public class Country {\n+    @Id\n+    @Column(name=\"COUNTRY_ID\")\n+    private long id;\n+    \n+    @Column(name=\"NAME\")\n+    private String name;\n+\n+    public Country() {\n+        super();\n+    }\n+\n+    public Country(long id, String name) {\n+        super();\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n+"},{"sha":"ce6d63f96fc101017a0117098652e1455cd45b93","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country1.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country1.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Country1.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+public class Country1 {\n+\n+    private long id;\n+\n+    private String name;\n+\n+    public Country1() {\n+        super();\n+    }\n+\n+    public Country1(long id, String name) {\n+        super();\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n+"},{"sha":"2daf3a41c26339f1493590ca28de2c95741046b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Embed.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Embed.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Embed.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+import javax.persistence.*;\n+\n+@Embeddable\n+public class Embed {\n+    \n+    public Embed() {\n+        \n+    }\n+    \n+    public Embed(String symbol) {\n+        this.symbol=symbol;\n+    }\n+    \n+    private String symbol;\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    public void setSymbol(String symbol) {\n+        this.symbol = symbol;\n+    }\n+    \n+}\n+"},{"sha":"6e624b1b6b5919149d3f5f011a757a79402d4f06","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"SECURITY1\")\n+public class Security {\n+    @Id\n+    @Column(name=\"SECURITY_ID\")\n+    private long id;\n+    \n+    @Embedded\n+    @Column(name=\"SYMBOL\")\n+    private Embed symbol;\n+    \n+    @ManyToOne(optional=false,fetch=FetchType.LAZY) \n+    @JoinColumn(name=\"COUNTRY_ID\")\n+    private Country country;\n+\n+    public Security() {\n+        super();\n+    }\n+\n+    public Security(long id, Embed symbol) {\n+        super();\n+        this.id = id;\n+        this.symbol = symbol;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public Country getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(Country c) {\n+        this.country = c;\n+    }\n+\n+    public Embed getSymbol() {\n+        return symbol;\n+    }\n+\n+    public void setSymbol(Embed symbol) {\n+        this.symbol = symbol;\n+    }\n+}\n+"},{"sha":"d90740af806a58ce9f0829e4024dbecfeff956e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security1.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security1.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/Security1.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+public class Security1 {\n+\n+    private long id;\n+\n+    private Embed symbol;\n+    \n+    private Country1 country;\n+\n+    public Security1() {\n+        super();\n+    }\n+\n+    public Security1(long id, Embed symbol) {\n+        super();\n+        this.id = id;\n+        this.symbol = symbol;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public Country1 getCountry1() {\n+        return country;\n+    }\n+\n+    public void setCountry1(Country1 c) {\n+        this.country = c;\n+    }\n+\n+    public Embed getSymbol() {\n+        return symbol;\n+    }\n+\n+    public void setSymbol(Embed symbol) {\n+        this.symbol = symbol;\n+    }\n+}\n+"},{"sha":"491536395efdc02994dd9935aeea34c49b2b8a7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestXMLPersistenceMetaDataParser.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestXMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestXMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestXMLPersistenceMetaDataParser.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import javax.persistence.*;\n+\n+public class TestXMLPersistenceMetaDataParser extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, Security1.class, Country1.class,\n+            Security.class, Country.class);\n+    }\n+\n+    protected String getPersistenceUnitName() {\n+        return \"test-persistence-xml-orm\";\n+    }\n+\n+    public void testManyToOneLazyFetch() {\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        // initialize objects\n+        long aI_sid = 148007244;\n+        long aUS_sid = 1;\n+\n+        Security1 aI_security = new Security1(aI_sid, new Embed(\"XYZ\"));\n+        Country1 aUS_country = new Country1(aUS_sid, \"USA\");\n+        aI_security.setCountry1(aUS_country);\n+\n+        Security aI_securityAnn = new Security(aI_sid, new Embed(\"XYZ\"));\n+        Country aUS_countryAnn = new Country(aUS_sid, \"USA\");\n+        aI_securityAnn.setCountry(aUS_countryAnn);\n+\n+        em.getTransaction().begin();\n+        em.persist(aI_security);\n+        em.persist(aUS_country);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        ArrayList<String> XMLsql = new ArrayList<String>();\n+        ArrayList<String> Annsql = new ArrayList<String>();\n+\n+        super.sql = new ArrayList<String>();\n+        aUS_country = em.find(Country1.class, aUS_sid);\n+        Iterator itr = super.sql.iterator();\n+        while (itr.hasNext()) {\n+            XMLsql.add((String) itr.next());\n+        }\n+        super.sql.clear();\n+\n+        super.sql = new ArrayList<String>();\n+        aUS_countryAnn = em.find(Country.class, aUS_sid);\n+        itr = super.sql.iterator();\n+        while (itr.hasNext()) {\n+            Annsql.add((String) itr.next());\n+        }\n+        super.sql.clear();\n+        compareselectSQLs(Annsql, XMLsql);\n+        Annsql.clear();\n+        XMLsql.clear();\n+\n+        super.sql = new ArrayList<String>();\n+        aI_security = em.find(Security1.class, aI_sid);\n+        itr = super.sql.iterator();\n+        while (itr.hasNext()) {\n+            XMLsql.add((String) itr.next());\n+        }\n+        super.sql.clear();\n+\n+        super.sql = new ArrayList<String>();\n+        aI_securityAnn = em.find(Security.class, aI_sid);\n+        itr = super.sql.iterator();\n+        while (itr.hasNext()) {\n+            Annsql.add((String) itr.next());\n+        }\n+        super.sql.clear();\n+        compareselectSQLs(Annsql, XMLsql);\n+        Annsql.clear();\n+        XMLsql.clear();\n+\n+        super.sql = new ArrayList<String>();\n+        Country1 aUS_country1 = aI_security.getCountry1();\n+        itr = super.sql.iterator();\n+        while (itr.hasNext()) {\n+            XMLsql.add((String) itr.next());\n+        }\n+        super.sql.clear();\n+\n+        super.sql = new ArrayList<String>();\n+        Country aUS_country2 = aI_securityAnn.getCountry();\n+        itr = super.sql.iterator();\n+        while (itr.hasNext()) {\n+            Annsql.add((String) itr.next());\n+        }\n+        super.sql.clear();\n+        compareselectSQLs(Annsql, XMLsql);\n+        Annsql.clear();\n+        XMLsql.clear();\n+\n+        // Close\n+        em.close();\n+\n+    }\n+\n+    private void printArrayList(ArrayList aList) {\n+        Iterator itr = aList.iterator();\n+        while (itr.hasNext()) {\n+            System.out.println(itr.next());\n+        }\n+    }\n+\n+    /*\n+     * This method is not a genralized method that can compare any select\n+     * statement. It is customized only for this testcase.\n+     */\n+    private void compareselectSQLs(List<String> a, List<String> b) {\n+        assertEquals(a.size(), b.size());\n+        for (int i = 0; i < a.size(); i++) {\n+            // assertEquals(a.get(i), b.get(i));\n+            String aStr = a.get(i);\n+            String bStr = b.get(i);\n+            String[] aArr =\n+                (aStr.substring(aStr.indexOf(\"SELECT \") + 7, aStr\n+                    .indexOf(\" FROM \"))).split(\",\");\n+            String[] bArr =\n+                (bStr.substring(bStr.indexOf(\"SELECT \") + 7, bStr\n+                    .indexOf(\" FROM \"))).split(\",\");\n+            Arrays.sort(aArr);\n+            Arrays.sort(bArr);\n+            assertTrue(Arrays.equals(aArr, bArr));\n+            assertEquals(aStr.substring(aStr.indexOf(\"FROM \") + 5), bStr\n+                .substring(aStr.indexOf(\"FROM \") + 5));\n+        }\n+    }\n+\n+}"},{"sha":"bcaaf23f871c72535b47f945c73b215ef9c54ead","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -49,6 +49,7 @@\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/inheritance/orm.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/orm.xml</mapping-file>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n@@ -174,6 +175,19 @@\n         </properties>\n     </persistence-unit>\n     \n+    <persistence-unit name=\"test-persistence-xml-orm\">\n+        <mapping-file>org/apache/openjpa/persistence/orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.Security1</class>\n+        <class>org.apache.openjpa.persistence.Country1</class>\n+        <class>org.apache.openjpa.persistence.Security</class>\n+        <class>org.apache.openjpa.persistence.Country</class>\n+        <class>org.apache.openjpa.persistence.Embed</class>\n+        <properties>\n+            <property name=\"openjpa.DynamicEnhancementAgent\" \n+                value=\"false\"/> \n+        </properties>\n+    </persistence-unit>\n+    \n     <persistence-unit name=\"PreparedQuery\" transaction-type=\"RESOURCE_LOCAL\">\n         <description>PU for PreparedQueryCache testing</description>\n         "},{"sha":"5d0150d01adb2f53bbb5438ff7922753cab76d00","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/orm.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/orm.xml?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+        Licensed to the Apache Software Foundation (ASF) under one\n+        or more contributor license agreements.  See the NOTICE file\n+        distributed with this work for additional information\n+        regarding copyright ownership.  The ASF licenses this file\n+        to you under the Apache License, Version 2.0 (the\n+        \"License\"); you may not use this file except in compliance\n+        with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing,\n+        software distributed under the License is distributed on an\n+        \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+        KIND, either express or implied.  See the License for the\n+        specific language governing permissions and limitations\n+        under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+ xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+ version=\"1.0\">\n+    <package>org.apache.openjpa.persistence</package>\n+    <entity class=\"Security1\">\n+        <table name=\"SECURITY1\" />\n+        <attributes>\n+            <id name=\"id\">\n+                <column name=\"SECURITY_ID\" />\n+            </id>\n+            <many-to-one name=\"country\" optional=\"false\" fetch=\"LAZY\">\n+                <join-column name=\"COUNTRY_ID\" />\n+            </many-to-one>\n+            <embedded name=\"symbol\" />\n+        </attributes>\n+    </entity>\n+    <entity class=\"Country1\">\n+        <table name=\"COUNTRY1\" />\n+        <attributes>\n+            <id name=\"id\">\n+                <column name=\"COUNTRY_ID\" />\n+            </id>\n+            <basic name=\"name\">\n+                <column name=\"NAME\" />\n+            </basic>\n+        </attributes>\n+    </entity>\n+    <embeddable class=\"Embed\">\n+        <attributes>\n+        <basic name=\"symbol\">\n+                <column name=\"SYMBOL\" />\n+            </basic>\n+        </attributes>\n+    </embeddable>\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"81b2090540df9487dd4db0a25fce1fd74a3fe9f3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":30,"deletions":12,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/ff932542e851f486df77726ee5ea2c9fe65a901a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=ff932542e851f486df77726ee5ea2c9fe65a901a","patch":"@@ -1321,10 +1321,7 @@ private boolean startStrategy(PersistenceStrategy strategy,\n         fmd.setExplicit(true);\n         fmd.setManagement(FieldMetaData.MANAGE_PERSISTENT);\n \n-        String val = attrs.getValue(\"fetch\");\n-        if (val != null)\n-            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n-        val = attrs.getValue(\"optional\");\n+        String val = attrs.getValue(\"optional\");\n         if (\"false\".equals(val))\n             fmd.setNullValue(FieldMetaData.NULL_EXCEPTION);\n         else if (\"true\".equals(val)\n@@ -1373,6 +1370,10 @@ private void parseStrategy(FieldMetaData fmd,\n                 parseOneToMany(fmd, attrs);\n                 break;\n             case TRANSIENT:\n+                String val = attrs.getValue(\"fetch\");\n+                if (val != null) {\n+                    fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n+                }\n                 fmd.setManagement(FieldMetaData.MANAGE_NONE);\n                 break;\n             case ELEM_COLL:\n@@ -1385,6 +1386,10 @@ private void parseStrategy(FieldMetaData fmd,\n      */\n     protected void parseBasic(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n+        String val = attrs.getValue(\"fetch\");\n+        if (val != null) {\n+            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n+        }\n     }\n \n     /**\n@@ -1393,6 +1398,7 @@ protected void parseBasic(FieldMetaData fmd, Attributes attrs)\n     protected void parseEmbedded(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n         assertPC(fmd, \"Embedded\");\n+        fmd.setInDefaultFetchGroup(true);\n         fmd.setEmbedded(true);\n         fmd.setSerialized(false); // override any Lob annotation\n         \n@@ -1416,13 +1422,15 @@ private void assertPC(FieldMetaData fmd, String attr)\n      */\n     protected void parseOneToOne(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n-        String val = attrs.getValue(\"target-entity\");\n+        String val = attrs.getValue(\"fetch\");\n+        if (val != null && \"EAGER\".equals(val)) {\n+            fmd.setInDefaultFetchGroup(true);\n+        }\n+        val = attrs.getValue(\"target-entity\");\n         if (val != null)\n             fmd.setTypeOverride(classForName(val));\n         assertPC(fmd, \"OneToOne\");\n         fmd.setSerialized(false); // override any Lob annotation\n-        if (!fmd.isDefaultFetchGroupExplicit())\n-            fmd.setInDefaultFetchGroup(true);\n         boolean orphanRemoval = Boolean.valueOf(attrs.getValue(\n             \"orphan-removal\"));\n         setOrphanRemoval(fmd, orphanRemoval);\n@@ -1433,21 +1441,27 @@ protected void parseOneToOne(FieldMetaData fmd, Attributes attrs)\n      */\n     protected void parseManyToOne(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n-        String val = attrs.getValue(\"target-entity\");\n+        String val = attrs.getValue(\"fetch\");\n+        if (val != null && \"EAGER\".equals(val)) {\n+            fmd.setInDefaultFetchGroup(true);\n+        }\n+        val = attrs.getValue(\"target-entity\");\n         if (val != null)\n             fmd.setTypeOverride(classForName(val));\n         assertPC(fmd, \"ManyToOne\");\n         fmd.setSerialized(false); // override any Lob annotation\n-        if (!fmd.isDefaultFetchGroupExplicit())\n-            fmd.setInDefaultFetchGroup(true);\n     }\n \n     /**\n      * Parse many-to-many.\n      */\n     protected void parseManyToMany(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n-        String val = attrs.getValue(\"target-entity\");\n+        String val = attrs.getValue(\"fetch\");\n+        if (val != null) {\n+            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n+        }\n+        val = attrs.getValue(\"target-entity\");\n         if (val != null)\n             fmd.getElement().setDeclaredType(classForName(val));\n         assertPCCollection(fmd, \"ManyToMany\");\n@@ -1477,7 +1491,11 @@ private void assertPCCollection(FieldMetaData fmd, String attr)\n      */\n     protected void parseOneToMany(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n-        String val = attrs.getValue(\"target-entity\");\n+        String val = attrs.getValue(\"fetch\");\n+        if (val != null) {\n+            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n+        }\n+        val = attrs.getValue(\"target-entity\");\n         if (val != null)\n             fmd.getElement().setDeclaredType(classForName(val));\n         assertPCCollection(fmd, \"OneToMany\");"}]}

