{"sha":"ff93b1d6e693df0e93c441ee68788f8d206515e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmOTNiMWQ2ZTY5M2RmMGU5M2M0NDFlZTY4Nzg4ZjhkMjA2NTE1ZTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T05:51:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T05:51:59Z"},"message":"OPENJPA-678: Hint based targeting of Slices required changes because of eager compilation of Query.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@686453 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e07ad6a9ab6b818e439f8466eb7994d7c625da6","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e07ad6a9ab6b818e439f8466eb7994d7c625da6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff93b1d6e693df0e93c441ee68788f8d206515e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff93b1d6e693df0e93c441ee68788f8d206515e4","html_url":"https://github.com/apache/openjpa/commit/ff93b1d6e693df0e93c441ee68788f8d206515e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff93b1d6e693df0e93c441ee68788f8d206515e4/comments","author":null,"committer":null,"parents":[{"sha":"c1d9abd216644255f1484c2a2c56a43879acd570","url":"https://api.github.com/repos/apache/openjpa/commits/c1d9abd216644255f1484c2a2c56a43879acd570","html_url":"https://github.com/apache/openjpa/commit/c1d9abd216644255f1484c2a2c56a43879acd570"}],"stats":{"total":44,"additions":26,"deletions":18},"files":[{"sha":"14f897634e3433e0d4bf3e544f5fd08719eddc04","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff93b1d6e693df0e93c441ee68788f8d206515e4/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/ff93b1d6e693df0e93c441ee68788f8d206515e4/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java?ref=ff93b1d6e693df0e93c441ee68788f8d206515e4","patch":"@@ -102,6 +102,10 @@ public DistributedStoreManager(DistributedJDBCConfiguration conf) {\n     public DistributedJDBCConfiguration getConfiguration() {\r\n         return _conf;\r\n     }\r\n+    \r\n+    public SliceStoreManager getSlice(int i) {\r\n+    \treturn _slices.get(i);\r\n+    }\r\n \r\n     /**\r\n      * Decides the index of the StoreManager by first looking at the\r"},{"sha":"35dfd7d1775f75183b162580f01b1fa928d98e23","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":22,"deletions":14,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/ff93b1d6e693df0e93c441ee68788f8d206515e4/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/ff93b1d6e693df0e93c441ee68788f8d206515e4/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=ff93b1d6e693df0e93c441ee68788f8d206515e4","patch":"@@ -32,6 +32,7 @@\n import org.apache.openjpa.kernel.FetchConfiguration;\r\n import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\r\n import org.apache.openjpa.kernel.QueryContext;\r\n+import org.apache.openjpa.kernel.StoreManager;\r\n import org.apache.openjpa.kernel.StoreQuery;\r\n import org.apache.openjpa.kernel.exps.ExpressionParser;\r\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\r\n@@ -61,17 +62,15 @@ void add(StoreQuery q) {\n \t\t_queries.add(q);\r\n \t}\r\n \t\r\n+\tpublic DistributedStoreManager getDistributedStore() {\r\n+\t\treturn (DistributedStoreManager)getStore();\r\n+\t}\r\n+\t\r\n     public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\r\n     \tParallelExecutor ex = new ParallelExecutor(this, meta, subs, _parser, \r\n     \t\t\tctx.getCompilation());\r\n-    \t\r\n-    \tFetchConfiguration fetch = getContext().getFetchConfiguration();\r\n-    \tDistributedStoreManager store = (DistributedStoreManager)getContext()\r\n-    \t    .getStoreContext().getStoreManager().getInnermostDelegate();\r\n-        List<SliceStoreManager> targets = store.getTargets(fetch);\r\n-        for (StoreQuery q:_queries) {\r\n-            if (targets.contains(((JDBCStoreQuery)q).getStore()))\r\n-                ex.addExecutor(q.newDataStoreExecutor(meta, subs));\r\n+        for (StoreQuery q : _queries) {\r\n+            ex.addExecutor(q.newDataStoreExecutor(meta, subs));\r\n         }\r\n         return ex;\r\n     }\r\n@@ -117,19 +116,23 @@ public ParallelExecutor(DistributedStoreQuery dsq, ClassMetaData meta,\n          */\r\n         public ResultObjectProvider executeQuery(StoreQuery q,\r\n                 final Object[] params, final Range range) {\r\n-        \tResultObjectProvider[] tmp = new ResultObjectProvider[executors.size()];\r\n-        \tfinal Iterator<StoreQuery> qs = owner._queries.iterator();\r\n         \tfinal List<Future<ResultObjectProvider>> futures = \r\n         \t\tnew ArrayList<Future<ResultObjectProvider>>();\r\n-        \tint i = 0;\r\n-        \tfor (Executor ex:executors)  {\r\n+        \tList<SliceStoreManager> targets = findTargets();\r\n+        \tfor (int i = 0; i < owner._queries.size(); i++) {\r\n+        \t\tStoreQuery query = owner._queries.get(i);\r\n+        \t\tStoreManager sm  = owner.getDistributedStore().getSlice(i);\r\n+        \t\tif (!targets.contains(sm))\r\n+        \t\t\tcontinue;\r\n         \t\tQueryExecutor call = new QueryExecutor();\r\n-        \t\tcall.executor = ex;\r\n-        \t\tcall.query    = qs.next();\r\n+        \t\tcall.executor = executors.get(i);\r\n+        \t\tcall.query    = query;\r\n         \t\tcall.params   = params;\r\n         \t\tcall.range    = range;\r\n         \t\tfutures.add(threadPool.submit(call)); \r\n         \t}\r\n+        \tint i = 0;\r\n+        \tResultObjectProvider[] tmp = new ResultObjectProvider[futures.size()];\r\n         \tfor (Future<ResultObjectProvider> future:futures) {\r\n         \t\ttry {\r\n \t\t\t\t\ttmp[i++] = future.get();\r\n@@ -210,6 +213,11 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n         \t}\r\n         \treturn new Integer(N);\r\n         }\r\n+        \r\n+        List<SliceStoreManager> findTargets() {\r\n+        \tFetchConfiguration fetch = owner.getContext().getFetchConfiguration();\r\n+        \treturn owner.getDistributedStore().getTargets(fetch);\r\n+        }\r\n \r\n \t}\r\n \t\r"},{"sha":"1c0875348c50b0f32503250507a8aadcc0a2a7c2","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ff93b1d6e693df0e93c441ee68788f8d206515e4/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/ff93b1d6e693df0e93c441ee68788f8d206515e4/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=ff93b1d6e693df0e93c441ee68788f8d206515e4","patch":"@@ -111,10 +111,6 @@ public void testSetMaxResult() {\n         em.getTransaction().rollback();\r\n     }\r\n     \r\n-    /**\r\n-     * Retired temporarily. Most likely side-effect of eager compilation of\r\n-     * query introduced recently.\r\n-     */\r\n     public void testHint() {\r\n         List<String> targets = new ArrayList<String>();\r\n         targets.add(\"Even\");\r"}]}

