{"sha":"ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmYWYxZDIxOTZiYWNmNWI3ZWJiZjE2MmRlNWUzY2Q5MzlmOWQxYmI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-27T16:36:48Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-27T16:36:48Z"},"message":"OPENJPA-385.  Committing changes for both 1.0.x and 1.1.0 to properly skip and optionally log malformed .class files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@580087 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd0dc0e73b82eeed76772c95c97fd20b2d24c364","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd0dc0e73b82eeed76772c95c97fd20b2d24c364"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","html_url":"https://github.com/apache/openjpa/commit/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb/comments","author":null,"committer":null,"parents":[{"sha":"44355583354a9cdc7d32c400f61e35687df17c9e","url":"https://api.github.com/repos/apache/openjpa/commits/44355583354a9cdc7d32c400f61e35687df17c9e","html_url":"https://github.com/apache/openjpa/commit/44355583354a9cdc7d32c400f61e35687df17c9e"}],"stats":{"total":31,"additions":28,"deletions":3},"files":[{"sha":"a6ee36b401c8b26c29a14e54bd83eb699fa4ef10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java?ref=ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","patch":"@@ -20,6 +20,9 @@\n \n import java.io.IOException;\n \n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n import serp.bytecode.lowlevel.ConstantPoolTable;\n \n /**\n@@ -33,6 +36,10 @@\n public class ClassAnnotationMetaDataFilter implements MetaDataFilter {\n \n     private final String[] _annos;\n+    \n+    private static final Localizer _loc = Localizer.forPackage\n+        (ClassAnnotationMetaDataFilter.class);\n+    private Log _log = null;\n \n     /**\n      * Constructor; supply annotation to match against.\n@@ -86,9 +93,16 @@ public boolean matches(Resource rsrc) throws IOException {\n                 idx += 4 + table.readInt(idx);\n             }\n         } catch (ArrayIndexOutOfBoundsException e) {\n+            /*\n+             * This ArrayIndexOutOfBoundsException indicates an incorrectly\n+             * formed .class file. We will eat the exception, log a trace\n+             * message (if a log exists), and return \"false\" to indicate there\n+             * was no match.\n+             */\n             Error cfe = new ClassFormatError(rsrc.getName());\n             cfe.initCause(e);\n-            throw cfe;\n+            if (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"class-arg\", rsrc.getName()), cfe);\n         }\n         return false;\n     }\n@@ -184,4 +198,12 @@ private static int skipFieldOrMethod(ConstantPoolTable table, int idx) {\n         }\n         return skipped;\n     }\n+\n+    public Log getLog() {\n+        return _log;\n+    }\n+\n+    public void setLog(Log _log) {\n+        this._log = _log;\n+    }\n }"},{"sha":"29a1e3a744afb7040a30215ac0baea0deca6a0a4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","patch":"@@ -374,8 +374,11 @@ private boolean hasNamedNativeQuery(String query,\n \n     @Override\n     protected MetaDataFilter newMetaDataFilter() {\n-        return new ClassAnnotationMetaDataFilter(new Class[]{\n-            Entity.class, Embeddable.class, MappedSuperclass.class });\n+        ClassAnnotationMetaDataFilter camdf = new ClassAnnotationMetaDataFilter(\n+                new Class[] { Entity.class, Embeddable.class,\n+                        MappedSuperclass.class });\n+        camdf.setLog(log);\n+        return camdf;\n     }\n \n     /**"}]}

