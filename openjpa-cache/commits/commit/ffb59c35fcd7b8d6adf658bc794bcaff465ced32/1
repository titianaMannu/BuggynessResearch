{"sha":"ffb59c35fcd7b8d6adf658bc794bcaff465ced32","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmYjU5YzM1ZmNkN2I4ZDZhZGY2NThiYzc5NGJjYWZmNDY1Y2VkMzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-11T17:18:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-11T17:18:31Z"},"message":"OPENJPA-692: Detect orphaning relation and change row update to delete for join table entry.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@684822 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4586e84704365dff59a1231f433ffc0a46b62815","url":"https://api.github.com/repos/apache/openjpa/git/trees/4586e84704365dff59a1231f433ffc0a46b62815"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffb59c35fcd7b8d6adf658bc794bcaff465ced32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffb59c35fcd7b8d6adf658bc794bcaff465ced32","html_url":"https://github.com/apache/openjpa/commit/ffb59c35fcd7b8d6adf658bc794bcaff465ced32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/comments","author":null,"committer":null,"parents":[{"sha":"c8895c6978546e325bd0fdde985965144e44a57a","url":"https://api.github.com/repos/apache/openjpa/commits/c8895c6978546e325bd0fdde985965144e44a57a","html_url":"https://github.com/apache/openjpa/commit/c8895c6978546e325bd0fdde985965144e44a57a"}],"stats":{"total":73,"additions":69,"deletions":4},"files":[{"sha":"3a532f77fd16bfccedba542b450810b233a0ec57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":50,"deletions":3,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=ffb59c35fcd7b8d6adf658bc794bcaff465ced32","patch":"@@ -73,6 +73,7 @@\n     private int _fetchMode = Integer.MAX_VALUE;\n     private Unique[] _joinTableUniques; // Unique constraints on JoinTable\n     private Boolean _bidirectionalJoinTableOwner = null;\n+    private Boolean _bidirectionalJoinTableNonOwner = null;\n     \n     /**\n      * Constructor.\n@@ -1075,20 +1076,66 @@ public boolean isBidirectionalJoinTableMappingOwner() {\n         ClassMapping relType = elem.getDeclaredTypeMapping();\n         if (relType == null) \n         \treturn false;\n-        FieldMetaData[] relFmds = relType.getFields();\n+        FieldMapping[] relFmds = relType.getFieldMappings();\n         for (int i=0; i<relFmds.length;i++) {\n-            if (relFmds[i].getDeclaredTypeMetaData() == getDeclaringMapping()) {\n-                FieldMapping rfm = (FieldMapping)relFmds[i];\n+            FieldMapping rfm = relFmds[i];\n+            if (rfm.getDeclaredTypeMetaData() == getDeclaringMapping()) {\n         \t\tForeignKey rjfk = rfm.getJoinForeignKey();\n         \t\tif (rjfk == null) \n         \t\t    continue;\n         \t\tif (rjfk.getTable() == jfk.getTable()\n         \t\t && jfk.getTable().getColumns().length \n         \t\t == jfk.getColumns().length + rjfk.getColumns().length) {\n         \t\t\t_bidirectionalJoinTableOwner = true;\n+        \t\t\tbreak;\n         \t\t}\n         \t}\n         }\n         return _bidirectionalJoinTableOwner.booleanValue();\n     }\n+    \n+    /**\n+     * Affirms if this field is the non-owning side of a bidirectional relation\n+     * with a join table. Evaluated only once and the result cached for \n+     * subsequent call. Hence must be called after resolution.\n+     */\n+    public boolean isBidirectionalJoinTableMappingNonOwner() {\n+    \tif (_bidirectionalJoinTableNonOwner != null)\n+    \t\treturn _bidirectionalJoinTableNonOwner.booleanValue();\n+    \t\n+    \t_bidirectionalJoinTableNonOwner = false;\n+        ForeignKey fk = getForeignKey();\n+        if (fk == null) \n+        \treturn false;\n+        ForeignKey jfk = getJoinForeignKey();\n+        if (jfk == null) \n+        \treturn false;\n+        FieldMapping mappedBy = getValueMappedByMapping();\n+        if (mappedBy != null) \n+        \treturn false;\n+        ValueMapping elem = getElementMapping();\n+        if (elem == null) \n+        \treturn false;\n+        ClassMapping relType = getDeclaredTypeMapping();\n+        if (relType == null) \n+        \treturn false;\n+        FieldMapping[] relFmds = relType.getFieldMappings();\n+        for (int i=0; i<relFmds.length;i++) {\n+            FieldMapping rfm = relFmds[i];\n+            ValueMapping relem = rfm.getElementMapping();\n+            if (relem != null && relem.getDeclaredTypeMapping() == getDeclaringMapping()) {\n+        \t\tForeignKey rjfk = rfm.getJoinForeignKey();\n+        \t\tif (rjfk == null) \n+        \t\t    continue;\n+        \t\tif (rjfk.getTable() == jfk.getTable()\n+        \t\t && jfk.getTable().getColumns().length \n+        \t\t == jfk.getColumns().length + rjfk.getColumns().length) {\n+        \t\t\t_bidirectionalJoinTableNonOwner = true;\n+        \t\t\tbreak;\n+        \t\t}\n+        \t}\n+        }\n+        return _bidirectionalJoinTableNonOwner.booleanValue();\n+    }\n+\n }"},{"sha":"523267496f7ba4bdb09c67a967523d54d04e0fbd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=ffb59c35fcd7b8d6adf658bc794bcaff465ced32","patch":"@@ -230,7 +230,10 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             nullInverse(sm, rm);\n             updateInverse(sm, rel, store, rm);\n         } else {\n-            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n+        \tint action = (rel == null \n+        \t\t\t&& field.isBidirectionalJoinTableMappingNonOwner()) ?\n+        \t\t\t\t\tRow.ACTION_DELETE : Row.ACTION_UPDATE;\n+            Row row = field.getRow(sm, store, rm, action);\n             if (row != null)\n                 field.setForeignKey(row, rel);\n         }"},{"sha":"6747667ab1401d7a7a2bcb4da9e9935b3c87cea1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","raw_url":"https://github.com/apache/openjpa/raw/ffb59c35fcd7b8d6adf658bc794bcaff465ced32/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java?ref=ffb59c35fcd7b8d6adf658bc794bcaff465ced32","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.jdbc.mapping.bidi;\r\n \r\n import java.util.Arrays;\r\n+import java.util.Set;\r\n \r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n@@ -125,6 +126,20 @@ public void testBulkDelete() {\n \t\tassertEquals(0, count(Address.class));\r\n \t\tassertSQL(\"DELETE FROM .*J_PERSON_ADDRESSES .*\");\r\n \t}\r\n+\t\r\n+\tpublic void testBreakingRelationCausesDeleteFromJoinTable() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tPerson person = em.find(Person.class, SSN);\r\n+\t\tem.getTransaction().begin();\r\n+\t\tSet<Address> addresses = person.getAddresses();\r\n+\t\tassertFalse(addresses.isEmpty());\r\n+\t\tAddress address = addresses.iterator().next();\r\n+\t\taddresses.remove(address);\r\n+\t\taddress.setPerson(null);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertSQL(\"DELETE FROM .*J_PERSON_ADDRESSES .*\");\r\n+\t}\r\n \r\n \t/**\r\n \t * Create a Person with given SSN and fixed number of addresses.\r"}]}

