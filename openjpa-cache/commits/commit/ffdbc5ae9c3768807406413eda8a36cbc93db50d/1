{"sha":"ffdbc5ae9c3768807406413eda8a36cbc93db50d","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmZGJjNWFlOWMzNzY4ODA3NDA2NDEzZWRhOGEzNmNiYzkzZGI1MGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T11:04:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T11:04:51Z"},"message":"OPENJPA-262. Added transaction callback registry to BrokerFactory as well, to parallel lifecycle callback structure\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551849 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b7b42121e4f23f826d5f3e4892bfd2b879785e42","url":"https://api.github.com/repos/apache/openjpa/git/trees/b7b42121e4f23f826d5f3e4892bfd2b879785e42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d","html_url":"https://github.com/apache/openjpa/commit/ffdbc5ae9c3768807406413eda8a36cbc93db50d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d/comments","author":null,"committer":null,"parents":[{"sha":"5a23d0455d010e292433ab4b1a0ec4214dfb171c","url":"https://api.github.com/repos/apache/openjpa/commits/5a23d0455d010e292433ab4b1a0ec4214dfb171c","html_url":"https://github.com/apache/openjpa/commit/5a23d0455d010e292433ab4b1a0ec4214dfb171c"}],"stats":{"total":91,"additions":80,"deletions":11},"files":[{"sha":"648ca0948c3cd32ab711d6a77a87d144fc0b50c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","raw_url":"https://github.com/apache/openjpa/raw/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java?ref=ffdbc5ae9c3768807406413eda8a36cbc93db50d","patch":"@@ -28,7 +28,7 @@\n public interface BrokerFactoryListener {\r\n \r\n     /**\r\n-     * Invoked after a {@link AbstractBrokerFactory} has been fully created.\r\n+     * Invoked after a {@link BrokerFactory} has been fully created.\r\n      * This happens after the factory has been made read-only.\r\n      */\r\n     public void afterBrokerFactoryCreate(BrokerFactoryEvent event);\r"},{"sha":"82d4abb60f7998220d9d0e962f3f9a18e2a6591a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":46,"deletions":10,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=ffdbc5ae9c3768807406413eda8a36cbc93db50d","patch":"@@ -26,6 +26,8 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.LinkedList;\n+import java.util.List;\n import javax.transaction.Status;\n import javax.transaction.Synchronization;\n import javax.transaction.Transaction;\n@@ -91,6 +93,9 @@\n     // lifecycle listeners to pass to each broker\n     private transient Map _lifecycleListeners = null;\n \n+    // transaction listeners to pass to each broker\n+    private transient List _transactionListeners = null;\n+\n     /**\n      * Return the pooled factory matching the given configuration, or null\n      * if none.\n@@ -174,7 +179,7 @@ public Broker newBroker(String user, String pass, boolean managed,\n \n                 broker = newBrokerImpl(user, pass);\n                 broker.initialize(this, dsm, managed, connRetainMode);\n-                addLifecycleListeners(broker);\n+                addListeners(broker);\n \n                 // if we're using remote events, register the event manager so\n                 // that it can broadcast commit notifications from the broker\n@@ -198,16 +203,24 @@ public Broker newBroker(String user, String pass, boolean managed,\n     /**\n      * Add factory-registered lifecycle listeners to the broker.\n      */\n-    protected void addLifecycleListeners(BrokerImpl broker) {\n-        if (_lifecycleListeners == null || _lifecycleListeners.isEmpty())\n-            return;\n+    protected void addListeners(BrokerImpl broker) {\n+        if (_lifecycleListeners != null && !_lifecycleListeners.isEmpty()) {\n+            Map.Entry entry;\n+            for (Iterator itr = _lifecycleListeners.entrySet().iterator();\n+                itr.hasNext();) {\n+                entry = (Map.Entry) itr.next();\n+                broker.addLifecycleListener(entry.getKey(), (Class[])\n+                    entry.getValue());\n+            }\n+        }\n \n-        Map.Entry entry;\n-        for (Iterator itr = _lifecycleListeners.entrySet().iterator();\n-            itr.hasNext();) {\n-            entry = (Map.Entry) itr.next();\n-            broker.addLifecycleListener(entry.getKey(), (Class[])\n-                entry.getValue());\n+        if (_transactionListeners != null && !_transactionListeners.isEmpty()) {\n+            Map.Entry entry;\n+            for (Iterator itr = _transactionListeners.iterator();\n+                itr.hasNext(); ) {\n+                entry = (Map.Entry) itr.next();\n+                broker.addTransactionListener(entry.getKey());\n+            }\n         }\n     }\n \n@@ -274,6 +287,29 @@ public void removeLifecycleListener(Object listener) {\n         }\n     }\n \n+    public void addTransactionListener(Object listener) {\n+        lock();\n+        try {\n+            assertOpen();\n+            if (_transactionListeners == null)\n+                _transactionListeners = new LinkedList();\n+            _transactionListeners.add(listener);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        lock();\n+        try {\n+            assertOpen();\n+            if (_transactionListeners != null)\n+                _transactionListeners.remove(listener);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n     /**\n      * Returns true if this broker factory is closed.\n      */"},{"sha":"0592d73f1846b6789170645d01594da933242d35","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=ffdbc5ae9c3768807406413eda8a36cbc93db50d","patch":"@@ -82,6 +82,23 @@ public Broker newBroker(String user, String pass, boolean managed,\n      */\n     public void removeLifecycleListener(Object listener);\n \n+    /**\n+     * Register a listener for transaction-related events on the specified\n+     * classes. It will be registered with all {@link Broker}s created\n+     * from this instance moving forward.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events. It will no longer\n+     * be registered with new {@link Broker}s created from this instance.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void removeTransactionListener(Object listener);\n+\n     /**\n      * Close the factory.\n      */"},{"sha":"bcf88c7338ebaa10cf132e5a1c2a0eaf67dbd710","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/ffdbc5ae9c3768807406413eda8a36cbc93db50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=ffdbc5ae9c3768807406413eda8a36cbc93db50d","patch":"@@ -162,6 +162,22 @@ public void removeLifecycleListener(Object listener) {\n         }\n     }\n \n+    public void addTransactionListener(Object listener) {\n+        try {\n+            _factory.addTransactionListener(listener);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        try {\n+            _factory.removeTransactionListener(listener);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public void close() {\n         try {\n             _factory.close();"}]}

