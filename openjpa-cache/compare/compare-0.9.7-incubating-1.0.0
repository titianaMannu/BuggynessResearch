{"url":"https://api.github.com/repos/apache/openjpa/compare/0.9.7-incubating...1.0.0","html_url":"https://github.com/apache/openjpa/compare/0.9.7-incubating...1.0.0","permalink_url":"https://github.com/apache/openjpa/compare/apache:ee4abcb...apache:849f746","diff_url":"https://github.com/apache/openjpa/compare/0.9.7-incubating...1.0.0.diff","patch_url":"https://github.com/apache/openjpa/compare/0.9.7-incubating...1.0.0.patch","base_commit":{"sha":"ee4abcbd6659ec58ed50ca17d1fd18ba88fcccbe","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlNGFiY2JkNjY1OWVjNThlZDUwY2ExN2QxZmQxOGJhODhmY2NjYmU=","commit":{"author":{"name":"Joe Schaefer","email":"joes@apache.org","date":"2007-05-23T02:33:15Z"},"committer":{"name":"Joe Schaefer","email":"joes@apache.org","date":"2007-05-23T02:33:15Z"},"message":"move openjpa repos to top-level\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/0.9.7-incubating@540807 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee8ab94d91bbf46f0522d5a6e08c72157272eee5","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee8ab94d91bbf46f0522d5a6e08c72157272eee5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee4abcbd6659ec58ed50ca17d1fd18ba88fcccbe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee4abcbd6659ec58ed50ca17d1fd18ba88fcccbe","html_url":"https://github.com/apache/openjpa/commit/ee4abcbd6659ec58ed50ca17d1fd18ba88fcccbe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee4abcbd6659ec58ed50ca17d1fd18ba88fcccbe/comments","author":null,"committer":null,"parents":[{"sha":"b8ab494a28c88768ea14a2a9ae28744ebd078f91","url":"https://api.github.com/repos/apache/openjpa/commits/b8ab494a28c88768ea14a2a9ae28744ebd078f91","html_url":"https://github.com/apache/openjpa/commit/b8ab494a28c88768ea14a2a9ae28744ebd078f91"}]},"merge_base_commit":{"sha":"aec27a30bf9d8d4e7fe1cde6a1830d10eb064119","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlYzI3YTMwYmY5ZDhkNGU3ZmUxY2RlNmExODMwZDEwZWIwNjQxMTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-04-15T02:32:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-04-15T02:32:50Z"},"message":"fixing typos in RELEASE-NOTES.html in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@528909 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93a9d8bccf7df515a18ab61b3ff927776974ff3a","url":"https://api.github.com/repos/apache/openjpa/git/trees/93a9d8bccf7df515a18ab61b3ff927776974ff3a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aec27a30bf9d8d4e7fe1cde6a1830d10eb064119","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aec27a30bf9d8d4e7fe1cde6a1830d10eb064119","html_url":"https://github.com/apache/openjpa/commit/aec27a30bf9d8d4e7fe1cde6a1830d10eb064119","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aec27a30bf9d8d4e7fe1cde6a1830d10eb064119/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"640cddad04c525af1122fbf8d6e2fde8a13adfb8","url":"https://api.github.com/repos/apache/openjpa/commits/640cddad04c525af1122fbf8d6e2fde8a13adfb8","html_url":"https://github.com/apache/openjpa/commit/640cddad04c525af1122fbf8d6e2fde8a13adfb8"}]},"status":"diverged","ahead_by":261,"behind_by":8,"total_commits":261,"commits":[{"sha":"b74ad208bde285b8b019c228112f322c186595bd","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3NGFkMjA4YmRlMjg1YjhiMDE5YzIyODExMmYzMjJjMTg2NTk1YmQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-20T22:52:37Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-20T22:52:37Z"},"message":"Added example for using the reverse mapping tool\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@530939 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"91980a378b0f2ea71f242e366713baf0da4f170e","url":"https://api.github.com/repos/apache/openjpa/git/trees/91980a378b0f2ea71f242e366713baf0da4f170e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b74ad208bde285b8b019c228112f322c186595bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b74ad208bde285b8b019c228112f322c186595bd","html_url":"https://github.com/apache/openjpa/commit/b74ad208bde285b8b019c228112f322c186595bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b74ad208bde285b8b019c228112f322c186595bd/comments","author":null,"committer":null,"parents":[{"sha":"129360ace992869aefdde406527456c51a550686","url":"https://api.github.com/repos/apache/openjpa/commits/129360ace992869aefdde406527456c51a550686","html_url":"https://github.com/apache/openjpa/commit/129360ace992869aefdde406527456c51a550686"}]},{"sha":"3f48eca25ad0300a78325a2894704fa7c2a30d4b","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmNDhlY2EyNWFkMDMwMGE3ODMyNWEyODk0NzA0ZmE3YzJhMzBkNGI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-20T23:02:24Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-20T23:02:24Z"},"message":"Exclude reversemapping/Main.java from the test compile, since it is dependant on classes that are only generated when running the reverse mapping demo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@530942 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd93ebc04507f38f6cc3006f611a5f851fc48898","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd93ebc04507f38f6cc3006f611a5f851fc48898"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f48eca25ad0300a78325a2894704fa7c2a30d4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f48eca25ad0300a78325a2894704fa7c2a30d4b","html_url":"https://github.com/apache/openjpa/commit/3f48eca25ad0300a78325a2894704fa7c2a30d4b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f48eca25ad0300a78325a2894704fa7c2a30d4b/comments","author":null,"committer":null,"parents":[{"sha":"b74ad208bde285b8b019c228112f322c186595bd","url":"https://api.github.com/repos/apache/openjpa/commits/b74ad208bde285b8b019c228112f322c186595bd","html_url":"https://github.com/apache/openjpa/commit/b74ad208bde285b8b019c228112f322c186595bd"}]},{"sha":"42f0d50d02b0699d7dd805a25aa6a99dd625c396","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyZjBkNTBkMDJiMDY5OWQ3ZGQ4MDVhMjVhYTZhOTlkZDYyNWMzOTY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T17:43:47Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T17:43:47Z"},"message":"Fixed to be more lenient when looking for artifact to expand.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531070 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"475e24cafdf67a5351b433a3c62cd41b5e3774ae","url":"https://api.github.com/repos/apache/openjpa/git/trees/475e24cafdf67a5351b433a3c62cd41b5e3774ae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/42f0d50d02b0699d7dd805a25aa6a99dd625c396","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/42f0d50d02b0699d7dd805a25aa6a99dd625c396","html_url":"https://github.com/apache/openjpa/commit/42f0d50d02b0699d7dd805a25aa6a99dd625c396","comments_url":"https://api.github.com/repos/apache/openjpa/commits/42f0d50d02b0699d7dd805a25aa6a99dd625c396/comments","author":null,"committer":null,"parents":[{"sha":"3f48eca25ad0300a78325a2894704fa7c2a30d4b","url":"https://api.github.com/repos/apache/openjpa/commits/3f48eca25ad0300a78325a2894704fa7c2a30d4b","html_url":"https://github.com/apache/openjpa/commit/3f48eca25ad0300a78325a2894704fa7c2a30d4b"}]},{"sha":"149011a3df2985a1b27be38b3d4601cf92c582ed","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0OTAxMWEzZGYyOTg1YTFiMjdiZTM4YjNkNDYwMWNmOTJjNTgyZWQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:19:10Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:19:10Z"},"message":"Fixed directory issues to ensure that this build file can be run from a different directory (such as when running the integration-test).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531074 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0edf4474202989fa4a76ce81a23ebf13131d4289","url":"https://api.github.com/repos/apache/openjpa/git/trees/0edf4474202989fa4a76ce81a23ebf13131d4289"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/149011a3df2985a1b27be38b3d4601cf92c582ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/149011a3df2985a1b27be38b3d4601cf92c582ed","html_url":"https://github.com/apache/openjpa/commit/149011a3df2985a1b27be38b3d4601cf92c582ed","comments_url":"https://api.github.com/repos/apache/openjpa/commits/149011a3df2985a1b27be38b3d4601cf92c582ed/comments","author":null,"committer":null,"parents":[{"sha":"42f0d50d02b0699d7dd805a25aa6a99dd625c396","url":"https://api.github.com/repos/apache/openjpa/commits/42f0d50d02b0699d7dd805a25aa6a99dd625c396","html_url":"https://github.com/apache/openjpa/commit/42f0d50d02b0699d7dd805a25aa6a99dd625c396"}]},{"sha":"c1486499a441607a7b0ac1c47300db0b76df0cfc","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxNDg2NDk5YTQ0MTYwN2E3YjBhYzFjNDczMDBkYjBiNzZkZjBjZmM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:20:45Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:20:45Z"},"message":"Use absolute path for derby database to ensure that the database is always places with the example code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"692a6b64a6284d777ca34e3aad0fc1c8664edc05","url":"https://api.github.com/repos/apache/openjpa/git/trees/692a6b64a6284d777ca34e3aad0fc1c8664edc05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1486499a441607a7b0ac1c47300db0b76df0cfc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1486499a441607a7b0ac1c47300db0b76df0cfc","html_url":"https://github.com/apache/openjpa/commit/c1486499a441607a7b0ac1c47300db0b76df0cfc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1486499a441607a7b0ac1c47300db0b76df0cfc/comments","author":null,"committer":null,"parents":[{"sha":"149011a3df2985a1b27be38b3d4601cf92c582ed","url":"https://api.github.com/repos/apache/openjpa/commits/149011a3df2985a1b27be38b3d4601cf92c582ed","html_url":"https://github.com/apache/openjpa/commit/149011a3df2985a1b27be38b3d4601cf92c582ed"}]},{"sha":"9b43b9d30829f8524c76bb4489686e6bdb42fc21","node_id":"MDY6Q29tbWl0MjA2MzY0OjliNDNiOWQzMDgyOWY4NTI0Yzc2YmI0NDg5Njg2ZTZiZGI0MmZjMjE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:28:12Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:28:12Z"},"message":"Specify that we should only include org.apache.openjpa packages in the javadoc so we don't accidentally include an of the example code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531077 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6430b91649d005ca39e3088251c117297fecb9c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6430b91649d005ca39e3088251c117297fecb9c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b43b9d30829f8524c76bb4489686e6bdb42fc21","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b43b9d30829f8524c76bb4489686e6bdb42fc21","html_url":"https://github.com/apache/openjpa/commit/9b43b9d30829f8524c76bb4489686e6bdb42fc21","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b43b9d30829f8524c76bb4489686e6bdb42fc21/comments","author":null,"committer":null,"parents":[{"sha":"c1486499a441607a7b0ac1c47300db0b76df0cfc","url":"https://api.github.com/repos/apache/openjpa/commits/c1486499a441607a7b0ac1c47300db0b76df0cfc","html_url":"https://github.com/apache/openjpa/commit/c1486499a441607a7b0ac1c47300db0b76df0cfc"}]},{"sha":"5d8c645682e476fcde3e83dd657758ab9a8f4baf","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkOGM2NDU2ODJlNDc2ZmNkZTNlODNkZDY1Nzc1OGFiOWE4ZjRiYWY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:43:55Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T18:43:55Z"},"message":"Cleaned up doc building so that images and css are copied to the target folder so that the docs can be built and previewed without needing to build the entire package.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531079 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"620862dbd3548e1e66ed3c58ef6f8348f40cfa40","url":"https://api.github.com/repos/apache/openjpa/git/trees/620862dbd3548e1e66ed3c58ef6f8348f40cfa40"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d8c645682e476fcde3e83dd657758ab9a8f4baf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d8c645682e476fcde3e83dd657758ab9a8f4baf","html_url":"https://github.com/apache/openjpa/commit/5d8c645682e476fcde3e83dd657758ab9a8f4baf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d8c645682e476fcde3e83dd657758ab9a8f4baf/comments","author":null,"committer":null,"parents":[{"sha":"9b43b9d30829f8524c76bb4489686e6bdb42fc21","url":"https://api.github.com/repos/apache/openjpa/commits/9b43b9d30829f8524c76bb4489686e6bdb42fc21","html_url":"https://github.com/apache/openjpa/commit/9b43b9d30829f8524c76bb4489686e6bdb42fc21"}]},{"sha":"78a8f126a1c0d6a040cea5e0da5bbdf363ebf412","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4YThmMTI2YTFjMGQ2YTA0MGNlYTVlMGRhNWJiZGYzNjNlYmY0MTI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T20:05:42Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T20:05:42Z"},"message":"Changed link tag to xref since there is no enclosed describing text.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531095 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f9e65e51f4f59617f9232ca370bf3e624f030085","url":"https://api.github.com/repos/apache/openjpa/git/trees/f9e65e51f4f59617f9232ca370bf3e624f030085"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78a8f126a1c0d6a040cea5e0da5bbdf363ebf412","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78a8f126a1c0d6a040cea5e0da5bbdf363ebf412","html_url":"https://github.com/apache/openjpa/commit/78a8f126a1c0d6a040cea5e0da5bbdf363ebf412","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78a8f126a1c0d6a040cea5e0da5bbdf363ebf412/comments","author":null,"committer":null,"parents":[{"sha":"5d8c645682e476fcde3e83dd657758ab9a8f4baf","url":"https://api.github.com/repos/apache/openjpa/commits/5d8c645682e476fcde3e83dd657758ab9a8f4baf","html_url":"https://github.com/apache/openjpa/commit/5d8c645682e476fcde3e83dd657758ab9a8f4baf"}]},{"sha":"0460c1113b5b270a41f2734742645d7b1cc2ff4e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0NjBjMTExM2I1YjI3MGE0MWYyNzM0NzQyNjQ1ZDdiMWNjMmZmNGU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T20:06:19Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-21T20:06:19Z"},"message":"Output multi-page manual as well as single manual page.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531100 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2cfc180f3fd99ff5ba625e85e5297b44359b991","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2cfc180f3fd99ff5ba625e85e5297b44359b991"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0460c1113b5b270a41f2734742645d7b1cc2ff4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0460c1113b5b270a41f2734742645d7b1cc2ff4e","html_url":"https://github.com/apache/openjpa/commit/0460c1113b5b270a41f2734742645d7b1cc2ff4e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0460c1113b5b270a41f2734742645d7b1cc2ff4e/comments","author":null,"committer":null,"parents":[{"sha":"78a8f126a1c0d6a040cea5e0da5bbdf363ebf412","url":"https://api.github.com/repos/apache/openjpa/commits/78a8f126a1c0d6a040cea5e0da5bbdf363ebf412","html_url":"https://github.com/apache/openjpa/commit/78a8f126a1c0d6a040cea5e0da5bbdf363ebf412"}]},{"sha":"68d9b38133fc0674a992b25a8521b82805f9024f","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4ZDliMzgxMzNmYzA2NzRhOTkyYjI1YTg1MjFiODI4MDVmOTAyNGY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T00:03:29Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T00:03:29Z"},"message":"Changed docbook processing to use the docbkx-maven-plugin, which enables us to easily also generate PDF documentation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531128 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"00bbba29bc5b831b447777cece5566ed0d12febd","url":"https://api.github.com/repos/apache/openjpa/git/trees/00bbba29bc5b831b447777cece5566ed0d12febd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68d9b38133fc0674a992b25a8521b82805f9024f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68d9b38133fc0674a992b25a8521b82805f9024f","html_url":"https://github.com/apache/openjpa/commit/68d9b38133fc0674a992b25a8521b82805f9024f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68d9b38133fc0674a992b25a8521b82805f9024f/comments","author":null,"committer":null,"parents":[{"sha":"0460c1113b5b270a41f2734742645d7b1cc2ff4e","url":"https://api.github.com/repos/apache/openjpa/commits/0460c1113b5b270a41f2734742645d7b1cc2ff4e","html_url":"https://github.com/apache/openjpa/commit/0460c1113b5b270a41f2734742645d7b1cc2ff4e"}]},{"sha":"24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0ZGMwYzdmN2U4ZDFmZTE1YTg4OGQzYmEzNzQ5YmM0YmIwYTZkNGQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T16:35:19Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T16:35:19Z"},"message":"Added \"Apache\" to the title of the guide.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531221 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d1cf0f10bbce257f4534ea37c46cb2b2330962a","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d1cf0f10bbce257f4534ea37c46cb2b2330962a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d","html_url":"https://github.com/apache/openjpa/commit/24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d/comments","author":null,"committer":null,"parents":[{"sha":"68d9b38133fc0674a992b25a8521b82805f9024f","url":"https://api.github.com/repos/apache/openjpa/commits/68d9b38133fc0674a992b25a8521b82805f9024f","html_url":"https://github.com/apache/openjpa/commit/68d9b38133fc0674a992b25a8521b82805f9024f"}]},{"sha":"ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1","node_id":"MDY6Q29tbWl0MjA2MzY0OmNlM2FiZjhhN2I3YzM5OWZiMDNjZWUzYjNkYThmM2RlNGQ4ZjJjYzE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T18:02:43Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T18:02:43Z"},"message":"Added the ability to use the YDoc UML doclet by enabling the \"ydoc-profile\" when bulding docs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531242 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28a6ee3b9288ba9e121fc6bdb79a35e9b1997eb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/28a6ee3b9288ba9e121fc6bdb79a35e9b1997eb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1","html_url":"https://github.com/apache/openjpa/commit/ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1/comments","author":null,"committer":null,"parents":[{"sha":"24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d","url":"https://api.github.com/repos/apache/openjpa/commits/24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d","html_url":"https://github.com/apache/openjpa/commit/24dc0c7f7e8d1fe15a888d3ba3749bc4bb0a6d4d"}]},{"sha":"9b05b6305de99beeb2eabee6331a62b6d4565c24","node_id":"MDY6Q29tbWl0MjA2MzY0OjliMDViNjMwNWRlOTliZWViMmVhYmVlNjMzMWE2MmI2ZDQ1NjVjMjQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T20:11:11Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-22T20:11:11Z"},"message":"Added the ability to use the YDoc UML doclet by enabling the \"ydoc-profile\" when bulding docs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@531262 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6864284b3d4b0aa10fbaf394f80973d16dcc8995","url":"https://api.github.com/repos/apache/openjpa/git/trees/6864284b3d4b0aa10fbaf394f80973d16dcc8995"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b05b6305de99beeb2eabee6331a62b6d4565c24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b05b6305de99beeb2eabee6331a62b6d4565c24","html_url":"https://github.com/apache/openjpa/commit/9b05b6305de99beeb2eabee6331a62b6d4565c24","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b05b6305de99beeb2eabee6331a62b6d4565c24/comments","author":null,"committer":null,"parents":[{"sha":"ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1","url":"https://api.github.com/repos/apache/openjpa/commits/ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1","html_url":"https://github.com/apache/openjpa/commit/ce3abf8a7b7c399fb03cee3b3da8f3de4d8f2cc1"}]},{"sha":"44c97873fbc1677650d6ed7cf21406c26cf61703","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0Yzk3ODczZmJjMTY3NzY1MGQ2ZWQ3Y2YyMTQwNmMyNmNmNjE3MDM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-24T18:43:43Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-24T18:43:43Z"},"message":"Fix bytecode generation to use new FetchConfiguration.requiresFetch signature.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532039 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f7d93da81d719ac0035b054a4f4663577cabdfb","url":"https://api.github.com/repos/apache/openjpa/git/trees/2f7d93da81d719ac0035b054a4f4663577cabdfb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/44c97873fbc1677650d6ed7cf21406c26cf61703","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/44c97873fbc1677650d6ed7cf21406c26cf61703","html_url":"https://github.com/apache/openjpa/commit/44c97873fbc1677650d6ed7cf21406c26cf61703","comments_url":"https://api.github.com/repos/apache/openjpa/commits/44c97873fbc1677650d6ed7cf21406c26cf61703/comments","author":null,"committer":null,"parents":[{"sha":"9b05b6305de99beeb2eabee6331a62b6d4565c24","url":"https://api.github.com/repos/apache/openjpa/commits/9b05b6305de99beeb2eabee6331a62b6d4565c24","html_url":"https://github.com/apache/openjpa/commit/9b05b6305de99beeb2eabee6331a62b6d4565c24"}]},{"sha":"9e044de7a7846432d1684a7873a8a434d95f23da","node_id":"MDY6Q29tbWl0MjA2MzY0OjllMDQ0ZGU3YTc4NDY0MzJkMTY4NGE3ODczYThhNDM0ZDk1ZjIzZGE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-24T19:53:37Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-24T19:53:37Z"},"message":"Fix broken functionality in allowing users to construct a custom application\noid from its stringified form.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532057 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"083568d5c157d83d2ed2bed196e57f80f6bb0a55","url":"https://api.github.com/repos/apache/openjpa/git/trees/083568d5c157d83d2ed2bed196e57f80f6bb0a55"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e044de7a7846432d1684a7873a8a434d95f23da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e044de7a7846432d1684a7873a8a434d95f23da","html_url":"https://github.com/apache/openjpa/commit/9e044de7a7846432d1684a7873a8a434d95f23da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e044de7a7846432d1684a7873a8a434d95f23da/comments","author":null,"committer":null,"parents":[{"sha":"44c97873fbc1677650d6ed7cf21406c26cf61703","url":"https://api.github.com/repos/apache/openjpa/commits/44c97873fbc1677650d6ed7cf21406c26cf61703","html_url":"https://github.com/apache/openjpa/commit/44c97873fbc1677650d6ed7cf21406c26cf61703"}]},{"sha":"6bad8ff71558cc7207a7a6098ef14f69a3e19863","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiYWQ4ZmY3MTU1OGNjNzIwN2E3YTYwOThlZjE0ZjY5YTNlMTk4NjM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-24T21:50:49Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-24T21:50:49Z"},"message":"Removed use of JDK 1.5+ String.contains() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532101 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b8da3322846e8b045df157a6481a874a9f38113","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b8da3322846e8b045df157a6481a874a9f38113"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6bad8ff71558cc7207a7a6098ef14f69a3e19863","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6bad8ff71558cc7207a7a6098ef14f69a3e19863","html_url":"https://github.com/apache/openjpa/commit/6bad8ff71558cc7207a7a6098ef14f69a3e19863","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6bad8ff71558cc7207a7a6098ef14f69a3e19863/comments","author":null,"committer":null,"parents":[{"sha":"9e044de7a7846432d1684a7873a8a434d95f23da","url":"https://api.github.com/repos/apache/openjpa/commits/9e044de7a7846432d1684a7873a8a434d95f23da","html_url":"https://github.com/apache/openjpa/commit/9e044de7a7846432d1684a7873a8a434d95f23da"}]},{"sha":"0e7feca04a29f354abc476d55252bab968a87f3f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlN2ZlY2EwNGEyOWYzNTRhYmM0NzZkNTUyNTJiYWI5NjhhODdmM2Y=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-24T23:34:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-24T23:34:46Z"},"message":"OPENJPA-219. Avoid Class.getDeclaredField() / Class.getDeclaredMethod() in Reflection, since they throw exceptions as a side-effect. Also contains assorted clean-up in ClassMetaData.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532137 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5221d89dade4b6bcda9fd2f7446272bfc0155d3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/5221d89dade4b6bcda9fd2f7446272bfc0155d3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0e7feca04a29f354abc476d55252bab968a87f3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0e7feca04a29f354abc476d55252bab968a87f3f","html_url":"https://github.com/apache/openjpa/commit/0e7feca04a29f354abc476d55252bab968a87f3f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0e7feca04a29f354abc476d55252bab968a87f3f/comments","author":null,"committer":null,"parents":[{"sha":"6bad8ff71558cc7207a7a6098ef14f69a3e19863","url":"https://api.github.com/repos/apache/openjpa/commits/6bad8ff71558cc7207a7a6098ef14f69a3e19863","html_url":"https://github.com/apache/openjpa/commit/6bad8ff71558cc7207a7a6098ef14f69a3e19863"}]},{"sha":"14ba7eed94c2a637b5619838d95d04d0c32ed517","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0YmE3ZWVkOTRjMmE2MzdiNTYxOTgzOGQ5NWQwNGQwYzMyZWQ1MTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-25T00:17:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-25T00:17:23Z"},"message":"Added OpenJPAVersion.RELEASE_STATUS to log messages to more completely encapsulate version data.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532151 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a3b7002ffe4f68b3d694a43415d0b71e543439b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/a3b7002ffe4f68b3d694a43415d0b71e543439b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/14ba7eed94c2a637b5619838d95d04d0c32ed517","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/14ba7eed94c2a637b5619838d95d04d0c32ed517","html_url":"https://github.com/apache/openjpa/commit/14ba7eed94c2a637b5619838d95d04d0c32ed517","comments_url":"https://api.github.com/repos/apache/openjpa/commits/14ba7eed94c2a637b5619838d95d04d0c32ed517/comments","author":null,"committer":null,"parents":[{"sha":"0e7feca04a29f354abc476d55252bab968a87f3f","url":"https://api.github.com/repos/apache/openjpa/commits/0e7feca04a29f354abc476d55252bab968a87f3f","html_url":"https://github.com/apache/openjpa/commit/0e7feca04a29f354abc476d55252bab968a87f3f"}]},{"sha":"f7770883a4e9f8f002dd2d99287903be577b2dd4","node_id":"MDY6Q29tbWl0MjA2MzY0OmY3NzcwODgzYTRlOWY4ZjAwMmRkMmQ5OTI4NzkwM2JlNTc3YjJkZDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-25T09:19:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-25T09:19:51Z"},"message":"Usability improvements discovered while working on OPENJPA-228. When loading enumerated types in the enhancer, pass them to serp as strings rather than as classes. This permits the use case where a subclass and superclass are both compiled and enhanced, and then the superclass is recompiled, and the subclass and superclass are both listed in persistence.xml, and the enhancer is then invoked.\n\nSimilarly, treat NoSuchMethodErrors that contain the string '.pc' as warnings rather than errors in MetaDataRepository.classForName().\n\nFinally, changed MetaDataRepository errors to stringify internal data sets eagerly, to avoid leaking incorrect information into error messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532273 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67e211dfb11a720eb0d1d36c2d0e77b9930568dc","url":"https://api.github.com/repos/apache/openjpa/git/trees/67e211dfb11a720eb0d1d36c2d0e77b9930568dc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4","html_url":"https://github.com/apache/openjpa/commit/f7770883a4e9f8f002dd2d99287903be577b2dd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4/comments","author":null,"committer":null,"parents":[{"sha":"14ba7eed94c2a637b5619838d95d04d0c32ed517","url":"https://api.github.com/repos/apache/openjpa/commits/14ba7eed94c2a637b5619838d95d04d0c32ed517","html_url":"https://github.com/apache/openjpa/commit/14ba7eed94c2a637b5619838d95d04d0c32ed517"}]},{"sha":"0819749391cecd16bfae12b78f1b21ae424eb94a","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4MTk3NDkzOTFjZWNkMTZiZmFlMTJiNzhmMWIyMWFlNDI0ZWI5NGE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-25T23:13:12Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-25T23:13:12Z"},"message":"Fixed MetaDataException to take a nested Throwable argument (which is the common case) instead of a FailedObject Object argument (which many of the existing constructions of MetaDataException are erronously using with a nested Throwable argument)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532524 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc6d30edae647cb9aa1885ad2f4c40b208b3a2a5","url":"https://api.github.com/repos/apache/openjpa/git/trees/cc6d30edae647cb9aa1885ad2f4c40b208b3a2a5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0819749391cecd16bfae12b78f1b21ae424eb94a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0819749391cecd16bfae12b78f1b21ae424eb94a","html_url":"https://github.com/apache/openjpa/commit/0819749391cecd16bfae12b78f1b21ae424eb94a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0819749391cecd16bfae12b78f1b21ae424eb94a/comments","author":null,"committer":null,"parents":[{"sha":"f7770883a4e9f8f002dd2d99287903be577b2dd4","url":"https://api.github.com/repos/apache/openjpa/commits/f7770883a4e9f8f002dd2d99287903be577b2dd4","html_url":"https://github.com/apache/openjpa/commit/f7770883a4e9f8f002dd2d99287903be577b2dd4"}]},{"sha":"b2beaec63446c937b69de2e73d2b7acda96b1549","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYmVhZWM2MzQ0NmM5MzdiNjlkZTJlNzNkMmI3YWNkYTk2YjE1NDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T17:17:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T17:17:10Z"},"message":"OPENJPA-229\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532805 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9fe282dcb0804fe91af22506d97c2534ea317a50","url":"https://api.github.com/repos/apache/openjpa/git/trees/9fe282dcb0804fe91af22506d97c2534ea317a50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2beaec63446c937b69de2e73d2b7acda96b1549","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2beaec63446c937b69de2e73d2b7acda96b1549","html_url":"https://github.com/apache/openjpa/commit/b2beaec63446c937b69de2e73d2b7acda96b1549","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2beaec63446c937b69de2e73d2b7acda96b1549/comments","author":null,"committer":null,"parents":[{"sha":"0819749391cecd16bfae12b78f1b21ae424eb94a","url":"https://api.github.com/repos/apache/openjpa/commits/0819749391cecd16bfae12b78f1b21ae424eb94a","html_url":"https://github.com/apache/openjpa/commit/0819749391cecd16bfae12b78f1b21ae424eb94a"}]},{"sha":"7d7e303f849f6cbb139f11e1620a9a03d977a3be","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkN2UzMDNmODQ5ZjZjYmIxMzlmMTFlMTYyMGE5YTAzZDk3N2EzYmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T17:24:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T17:24:40Z"},"message":"OPENJPA-229. Not sure how these didn't get committed in the first commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532808 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d12096e3156aa07ad76ba38486063e69536397ed","url":"https://api.github.com/repos/apache/openjpa/git/trees/d12096e3156aa07ad76ba38486063e69536397ed"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7d7e303f849f6cbb139f11e1620a9a03d977a3be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7d7e303f849f6cbb139f11e1620a9a03d977a3be","html_url":"https://github.com/apache/openjpa/commit/7d7e303f849f6cbb139f11e1620a9a03d977a3be","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7d7e303f849f6cbb139f11e1620a9a03d977a3be/comments","author":null,"committer":null,"parents":[{"sha":"b2beaec63446c937b69de2e73d2b7acda96b1549","url":"https://api.github.com/repos/apache/openjpa/commits/b2beaec63446c937b69de2e73d2b7acda96b1549","html_url":"https://github.com/apache/openjpa/commit/b2beaec63446c937b69de2e73d2b7acda96b1549"}]},{"sha":"a99763cf63446fac33964fbf7ce6244de54e1deb","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5OTc2M2NmNjM0NDZmYWMzMzk2NGZiZjdjZTYyNDRkZTU0ZTFkZWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T18:28:18Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-26T18:28:18Z"},"message":"Updated recently-added files to meet Apache's latest header syntax.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@532833 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b9d0a623fea2091be4d06ad980a406770520f83","url":"https://api.github.com/repos/apache/openjpa/git/trees/3b9d0a623fea2091be4d06ad980a406770520f83"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a99763cf63446fac33964fbf7ce6244de54e1deb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a99763cf63446fac33964fbf7ce6244de54e1deb","html_url":"https://github.com/apache/openjpa/commit/a99763cf63446fac33964fbf7ce6244de54e1deb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a99763cf63446fac33964fbf7ce6244de54e1deb/comments","author":null,"committer":null,"parents":[{"sha":"7d7e303f849f6cbb139f11e1620a9a03d977a3be","url":"https://api.github.com/repos/apache/openjpa/commits/7d7e303f849f6cbb139f11e1620a9a03d977a3be","html_url":"https://github.com/apache/openjpa/commit/7d7e303f849f6cbb139f11e1620a9a03d977a3be"}]},{"sha":"43c931014a4719ccebab8e7cd6173d45ee6bcaaf","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzYzkzMTAxNGE0NzE5Y2NlYmFiOGU3Y2Q2MTczZDQ1ZWU2YmNhYWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-27T20:46:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-27T20:46:03Z"},"message":"OPENJPA-226\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@533218 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"96bcdc8037e442d6eda88c6d737d41aeee2f114e","url":"https://api.github.com/repos/apache/openjpa/git/trees/96bcdc8037e442d6eda88c6d737d41aeee2f114e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/43c931014a4719ccebab8e7cd6173d45ee6bcaaf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/43c931014a4719ccebab8e7cd6173d45ee6bcaaf","html_url":"https://github.com/apache/openjpa/commit/43c931014a4719ccebab8e7cd6173d45ee6bcaaf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/43c931014a4719ccebab8e7cd6173d45ee6bcaaf/comments","author":null,"committer":null,"parents":[{"sha":"a99763cf63446fac33964fbf7ce6244de54e1deb","url":"https://api.github.com/repos/apache/openjpa/commits/a99763cf63446fac33964fbf7ce6244de54e1deb","html_url":"https://github.com/apache/openjpa/commit/a99763cf63446fac33964fbf7ce6244de54e1deb"}]},{"sha":"d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1ZDIxNGMxODIxY2I3OGY0YmY2NDRjZjBjMWZlMmQ1Y2IwOTJmNjk=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-02T21:35:55Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-02T21:35:55Z"},"message":"Fix for issue OPENJPA-51. It should also resolve issue OPENJPA-173.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@534623 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd74f571f24402487af94a49ae75a68581260006","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd74f571f24402487af94a49ae75a68581260006"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69","html_url":"https://github.com/apache/openjpa/commit/d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69/comments","author":null,"committer":null,"parents":[{"sha":"43c931014a4719ccebab8e7cd6173d45ee6bcaaf","url":"https://api.github.com/repos/apache/openjpa/commits/43c931014a4719ccebab8e7cd6173d45ee6bcaaf","html_url":"https://github.com/apache/openjpa/commit/43c931014a4719ccebab8e7cd6173d45ee6bcaaf"}]},{"sha":"a044af3287e0ec164de9d0b6841998369860045f","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwNDRhZjMyODdlMGVjMTY0ZGU5ZDBiNjg0MTk5ODM2OTg2MDA0NWY=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-02T22:53:39Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-02T22:53:39Z"},"message":"Fix for issue OPENJPA-51. It should also resolve issue OPENJPA-173.\nChange to use BitSet.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@534647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95c64a563f382ad5782a95982dc62fbbd51dbe18","url":"https://api.github.com/repos/apache/openjpa/git/trees/95c64a563f382ad5782a95982dc62fbbd51dbe18"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a044af3287e0ec164de9d0b6841998369860045f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a044af3287e0ec164de9d0b6841998369860045f","html_url":"https://github.com/apache/openjpa/commit/a044af3287e0ec164de9d0b6841998369860045f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a044af3287e0ec164de9d0b6841998369860045f/comments","author":null,"committer":null,"parents":[{"sha":"d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69","url":"https://api.github.com/repos/apache/openjpa/commits/d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69","html_url":"https://github.com/apache/openjpa/commit/d5d214c1821cb78f4bf644cf0c1fe2d5cb092f69"}]},{"sha":"bcc3b67223feefb2b379df3afb66295555f4a5c1","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjYzNiNjcyMjNmZWVmYjJiMzc5ZGYzYWZiNjYyOTU1NTVmNGE1YzE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-03T22:49:49Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-03T22:49:49Z"},"message":"add query test for OPENJPA-51, queries with subselects with correlated/non-correlated aliases\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535003 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e94d280f038463a7cdef820134761561d84933d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/e94d280f038463a7cdef820134761561d84933d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bcc3b67223feefb2b379df3afb66295555f4a5c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bcc3b67223feefb2b379df3afb66295555f4a5c1","html_url":"https://github.com/apache/openjpa/commit/bcc3b67223feefb2b379df3afb66295555f4a5c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bcc3b67223feefb2b379df3afb66295555f4a5c1/comments","author":null,"committer":null,"parents":[{"sha":"a044af3287e0ec164de9d0b6841998369860045f","url":"https://api.github.com/repos/apache/openjpa/commits/a044af3287e0ec164de9d0b6841998369860045f","html_url":"https://github.com/apache/openjpa/commit/a044af3287e0ec164de9d0b6841998369860045f"}]},{"sha":"d7d400b818b752add7bf3e061e1b1870a682afe8","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ3ZDQwMGI4MThiNzUyYWRkN2JmM2UwNjFlMWIxODcwYTY4MmFmZTg=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-04T00:39:55Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-04T00:39:55Z"},"message":"fix build break, class list is removed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535041 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f9ba3c1d818504e3457b48f8e1aaf878fa893705","url":"https://api.github.com/repos/apache/openjpa/git/trees/f9ba3c1d818504e3457b48f8e1aaf878fa893705"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d7d400b818b752add7bf3e061e1b1870a682afe8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d7d400b818b752add7bf3e061e1b1870a682afe8","html_url":"https://github.com/apache/openjpa/commit/d7d400b818b752add7bf3e061e1b1870a682afe8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d7d400b818b752add7bf3e061e1b1870a682afe8/comments","author":null,"committer":null,"parents":[{"sha":"bcc3b67223feefb2b379df3afb66295555f4a5c1","url":"https://api.github.com/repos/apache/openjpa/commits/bcc3b67223feefb2b379df3afb66295555f4a5c1","html_url":"https://github.com/apache/openjpa/commit/bcc3b67223feefb2b379df3afb66295555f4a5c1"}]},{"sha":"2f4cafdcfb6f0333538602b794a11e084d19cd3f","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmNGNhZmRjZmI2ZjAzMzM1Mzg2MDJiNzk0YTExZTA4NGQxOWNkM2Y=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-04T09:31:17Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-04T09:31:17Z"},"message":"OPENJPA-148 Fix for scanning directories for persistent types.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535139 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d3478b3d9d0bc677d09552bf19cfb2e99594ae1","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d3478b3d9d0bc677d09552bf19cfb2e99594ae1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2f4cafdcfb6f0333538602b794a11e084d19cd3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2f4cafdcfb6f0333538602b794a11e084d19cd3f","html_url":"https://github.com/apache/openjpa/commit/2f4cafdcfb6f0333538602b794a11e084d19cd3f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2f4cafdcfb6f0333538602b794a11e084d19cd3f/comments","author":null,"committer":null,"parents":[{"sha":"d7d400b818b752add7bf3e061e1b1870a682afe8","url":"https://api.github.com/repos/apache/openjpa/commits/d7d400b818b752add7bf3e061e1b1870a682afe8","html_url":"https://github.com/apache/openjpa/commit/d7d400b818b752add7bf3e061e1b1870a682afe8"}]},{"sha":"e422a7d179d7f153927f3685acab59c1dcefb9fd","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0MjJhN2QxNzlkN2YxNTM5MjdmMzY4NWFjYWI1OWMxZGNlZmI5ZmQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-04T16:36:15Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-04T16:36:15Z"},"message":"OPENJPA-148 Applied the rest of the patch for this bug.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535321 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"af8a8b5f63d9674ad97cc14e0ecffcc3459fab84","url":"https://api.github.com/repos/apache/openjpa/git/trees/af8a8b5f63d9674ad97cc14e0ecffcc3459fab84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e422a7d179d7f153927f3685acab59c1dcefb9fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e422a7d179d7f153927f3685acab59c1dcefb9fd","html_url":"https://github.com/apache/openjpa/commit/e422a7d179d7f153927f3685acab59c1dcefb9fd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e422a7d179d7f153927f3685acab59c1dcefb9fd/comments","author":null,"committer":null,"parents":[{"sha":"2f4cafdcfb6f0333538602b794a11e084d19cd3f","url":"https://api.github.com/repos/apache/openjpa/commits/2f4cafdcfb6f0333538602b794a11e084d19cd3f","html_url":"https://github.com/apache/openjpa/commit/2f4cafdcfb6f0333538602b794a11e084d19cd3f"}]},{"sha":"2f07532f22d11c9d1c43ab51022bfdb18fe1a3db","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmMDc1MzJmMjJkMTFjOWQxYzQzYWI1MTAyMmJmZGIxOGZlMWEzZGI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-04T19:22:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-04T19:22:50Z"},"message":"added clarifying comment to persistence.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535359 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8a204a893dad36e68e1ee06b99d8a286bc80e41c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8a204a893dad36e68e1ee06b99d8a286bc80e41c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2f07532f22d11c9d1c43ab51022bfdb18fe1a3db","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2f07532f22d11c9d1c43ab51022bfdb18fe1a3db","html_url":"https://github.com/apache/openjpa/commit/2f07532f22d11c9d1c43ab51022bfdb18fe1a3db","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2f07532f22d11c9d1c43ab51022bfdb18fe1a3db/comments","author":null,"committer":null,"parents":[{"sha":"e422a7d179d7f153927f3685acab59c1dcefb9fd","url":"https://api.github.com/repos/apache/openjpa/commits/e422a7d179d7f153927f3685acab59c1dcefb9fd","html_url":"https://github.com/apache/openjpa/commit/e422a7d179d7f153927f3685acab59c1dcefb9fd"}]},{"sha":"33aa3cb59f4be199e547db25e23da212b8b0de98","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzYWEzY2I1OWY0YmUxOTllNTQ3ZGIyNWUyM2RhMjEyYjhiMGRlOTg=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-05-04T20:50:24Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-05-04T20:50:24Z"},"message":"ran mvn install; seems to work\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535378 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4c8bbf00dd7e96f994f343c38ab9116d516aee4","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4c8bbf00dd7e96f994f343c38ab9116d516aee4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/33aa3cb59f4be199e547db25e23da212b8b0de98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/33aa3cb59f4be199e547db25e23da212b8b0de98","html_url":"https://github.com/apache/openjpa/commit/33aa3cb59f4be199e547db25e23da212b8b0de98","comments_url":"https://api.github.com/repos/apache/openjpa/commits/33aa3cb59f4be199e547db25e23da212b8b0de98/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f07532f22d11c9d1c43ab51022bfdb18fe1a3db","url":"https://api.github.com/repos/apache/openjpa/commits/2f07532f22d11c9d1c43ab51022bfdb18fe1a3db","html_url":"https://github.com/apache/openjpa/commit/2f07532f22d11c9d1c43ab51022bfdb18fe1a3db"}]},{"sha":"80671afcbf5802e3340c65ebda7e7bdf9bec75af","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwNjcxYWZjYmY1ODAyZTMzNDBjNjVlYmRhN2U3YmRmOWJlYzc1YWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-04T20:58:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-04T20:58:49Z"},"message":"OPENJPA-235. Reformatted code to meet OpenJPA conventions; widened some type arguments that seemed unnecessarily narrow.\n\nThis passes all the OpenJPA tests in my environment, and the logic seems sound. I think that we could adjust the algorithm to require less collection copying, but I don't think that we should hold up the commit for that type of optimization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535379 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"99b65b63f581a7bd177fb5d10364e6bd10050678","url":"https://api.github.com/repos/apache/openjpa/git/trees/99b65b63f581a7bd177fb5d10364e6bd10050678"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af","html_url":"https://github.com/apache/openjpa/commit/80671afcbf5802e3340c65ebda7e7bdf9bec75af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af/comments","author":null,"committer":null,"parents":[{"sha":"33aa3cb59f4be199e547db25e23da212b8b0de98","url":"https://api.github.com/repos/apache/openjpa/commits/33aa3cb59f4be199e547db25e23da212b8b0de98","html_url":"https://github.com/apache/openjpa/commit/33aa3cb59f4be199e547db25e23da212b8b0de98"}]},{"sha":"d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5ZmJiOWNjMTFkZjE1ZDI5OTY0ZjYyMGYyZmI0NjdlNWI2ZDZiNzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-07T21:38:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-07T21:38:20Z"},"message":"Propagate the provided classloader further into the PCEnhancer call stack.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba2c4c2b66810b7a53640dba6036501393e6b3d7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba2c4c2b66810b7a53640dba6036501393e6b3d7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","html_url":"https://github.com/apache/openjpa/commit/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73/comments","author":null,"committer":null,"parents":[{"sha":"80671afcbf5802e3340c65ebda7e7bdf9bec75af","url":"https://api.github.com/repos/apache/openjpa/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af","html_url":"https://github.com/apache/openjpa/commit/80671afcbf5802e3340c65ebda7e7bdf9bec75af"}]},{"sha":"23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzYmViOTY0YzU5MWQyYzZkYWMwYTNmM2I3ODI4ZmNmY2ZjYzY3Yjg=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-09T22:23:16Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-09T22:23:16Z"},"message":"undo patch for OPENJPA-51, revert back to r52881\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536692 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42178073cd3344a2332a994238dc1ccb36685b3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/42178073cd3344a2332a994238dc1ccb36685b3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8","html_url":"https://github.com/apache/openjpa/commit/23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8/comments","author":null,"committer":null,"parents":[{"sha":"d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","url":"https://api.github.com/repos/apache/openjpa/commits/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73","html_url":"https://github.com/apache/openjpa/commit/d9fbb9cc11df15d29964f620f2fb467e5b6d6b73"}]},{"sha":"a92785fea6938eebd85f1a6f8ed7d29fe20307cf","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5Mjc4NWZlYTY5MzhlZWJkODVmMWE2ZjhlZDdkMjlmZTIwMzA3Y2Y=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-09T22:23:54Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-09T22:23:54Z"},"message":"OPENJPA-194 Changed openjpa-all-VERSION.jar to be just openjpa-VERSION.jar, and changes openjpa-project-VERSION.zip to be apache-openjpa-VERSION.zip\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536693 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e4006492877840115bd904e23fa65d93814caca4","url":"https://api.github.com/repos/apache/openjpa/git/trees/e4006492877840115bd904e23fa65d93814caca4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a92785fea6938eebd85f1a6f8ed7d29fe20307cf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a92785fea6938eebd85f1a6f8ed7d29fe20307cf","html_url":"https://github.com/apache/openjpa/commit/a92785fea6938eebd85f1a6f8ed7d29fe20307cf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/comments","author":null,"committer":null,"parents":[{"sha":"23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8","url":"https://api.github.com/repos/apache/openjpa/commits/23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8","html_url":"https://github.com/apache/openjpa/commit/23beb964c591d2c6dac0a3f3b7828fcfcfcc67b8"}]},{"sha":"59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5YmQ1YjBkM2Y4OTFmMTZkN2Y5Y2E5M2RlYTEzYjQwYzA4MmMxMWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-05-09T23:05:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-05-09T23:05:16Z"},"message":"OPENJPA-51 removing testcases\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cce64d06212d5b032ae1f078532c5054a6ca9b50","url":"https://api.github.com/repos/apache/openjpa/git/trees/cce64d06212d5b032ae1f078532c5054a6ca9b50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","html_url":"https://github.com/apache/openjpa/commit/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a92785fea6938eebd85f1a6f8ed7d29fe20307cf","url":"https://api.github.com/repos/apache/openjpa/commits/a92785fea6938eebd85f1a6f8ed7d29fe20307cf","html_url":"https://github.com/apache/openjpa/commit/a92785fea6938eebd85f1a6f8ed7d29fe20307cf"}]},{"sha":"a461910160707b08dd4a9cb1cf95ba04bd27c357","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0NjE5MTAxNjA3MDdiMDhkZDRhOWNiMWNmOTViYTA0YmQyN2MzNTc=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-10T00:35:18Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-10T00:35:18Z"},"message":"Make sure the examples directory exists when we run the integration-test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536724 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"14d71144d6fab1f2e97f0853895bebb4244090ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/14d71144d6fab1f2e97f0853895bebb4244090ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a461910160707b08dd4a9cb1cf95ba04bd27c357","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a461910160707b08dd4a9cb1cf95ba04bd27c357","html_url":"https://github.com/apache/openjpa/commit/a461910160707b08dd4a9cb1cf95ba04bd27c357","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a461910160707b08dd4a9cb1cf95ba04bd27c357/comments","author":null,"committer":null,"parents":[{"sha":"59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","url":"https://api.github.com/repos/apache/openjpa/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","html_url":"https://github.com/apache/openjpa/commit/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d"}]},{"sha":"9eaec94118049ad189d237519d9dc366a4a7733c","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYWVjOTQxMTgwNDlhZDE4OWQyMzc1MTlkOWRjMzY2YTRhNzczM2M=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-11T15:44:13Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-05-11T15:44:13Z"},"message":"OpenJPA 168  testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@537213 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a39fe8838b82385a19869ab47b47d3161143cc35","url":"https://api.github.com/repos/apache/openjpa/git/trees/a39fe8838b82385a19869ab47b47d3161143cc35"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9eaec94118049ad189d237519d9dc366a4a7733c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9eaec94118049ad189d237519d9dc366a4a7733c","html_url":"https://github.com/apache/openjpa/commit/9eaec94118049ad189d237519d9dc366a4a7733c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9eaec94118049ad189d237519d9dc366a4a7733c/comments","author":null,"committer":null,"parents":[{"sha":"a461910160707b08dd4a9cb1cf95ba04bd27c357","url":"https://api.github.com/repos/apache/openjpa/commits/a461910160707b08dd4a9cb1cf95ba04bd27c357","html_url":"https://github.com/apache/openjpa/commit/a461910160707b08dd4a9cb1cf95ba04bd27c357"}]},{"sha":"15b0b59f25f755a96a6fdebf9d94a61e208ecbde","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1YjBiNTlmMjVmNzU1YTk2YTZmZGViZjlkOTRhNjFlMjA4ZWNiZGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-11T16:12:07Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-11T16:12:07Z"},"message":"OPENJPA-230. Updated patch based on an out-of-band patch from Vishal. This version avoids interrupts while still handling guaranteed delivery of messages in the queue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@537221 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b63288733de82ddbaf8fda4e275ead2423fbb6c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/b63288733de82ddbaf8fda4e275ead2423fbb6c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/15b0b59f25f755a96a6fdebf9d94a61e208ecbde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/15b0b59f25f755a96a6fdebf9d94a61e208ecbde","html_url":"https://github.com/apache/openjpa/commit/15b0b59f25f755a96a6fdebf9d94a61e208ecbde","comments_url":"https://api.github.com/repos/apache/openjpa/commits/15b0b59f25f755a96a6fdebf9d94a61e208ecbde/comments","author":null,"committer":null,"parents":[{"sha":"9eaec94118049ad189d237519d9dc366a4a7733c","url":"https://api.github.com/repos/apache/openjpa/commits/9eaec94118049ad189d237519d9dc366a4a7733c","html_url":"https://github.com/apache/openjpa/commit/9eaec94118049ad189d237519d9dc366a4a7733c"}]},{"sha":"add6a29be4017c1cf670034811ab5942f756ce94","node_id":"MDY6Q29tbWl0MjA2MzY0OmFkZDZhMjliZTQwMTdjMWNmNjcwMDM0ODExYWI1OTQyZjc1NmNlOTQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-11T16:37:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-11T16:37:15Z"},"message":"OPENJPA-230. Fixed dependency on not-yet-checked-in class.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@537227 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"99862993899c239d4eeed45a7fa60ac3ddf11531","url":"https://api.github.com/repos/apache/openjpa/git/trees/99862993899c239d4eeed45a7fa60ac3ddf11531"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/add6a29be4017c1cf670034811ab5942f756ce94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/add6a29be4017c1cf670034811ab5942f756ce94","html_url":"https://github.com/apache/openjpa/commit/add6a29be4017c1cf670034811ab5942f756ce94","comments_url":"https://api.github.com/repos/apache/openjpa/commits/add6a29be4017c1cf670034811ab5942f756ce94/comments","author":null,"committer":null,"parents":[{"sha":"15b0b59f25f755a96a6fdebf9d94a61e208ecbde","url":"https://api.github.com/repos/apache/openjpa/commits/15b0b59f25f755a96a6fdebf9d94a61e208ecbde","html_url":"https://github.com/apache/openjpa/commit/15b0b59f25f755a96a6fdebf9d94a61e208ecbde"}]},{"sha":"4a15b9c39ed31f94034e8a4cad59d29a22b870cb","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhMTViOWMzOWVkMzFmOTQwMzRlOGE0Y2FkNTlkMjlhMjJiODcwY2I=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-18T23:22:10Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-18T23:22:10Z"},"message":"OPENJPA-235 Reverted patch since it was causing TCK failures\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@539627 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8d387175dd33f073bb9e486497121f48f908e19","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8d387175dd33f073bb9e486497121f48f908e19"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4a15b9c39ed31f94034e8a4cad59d29a22b870cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4a15b9c39ed31f94034e8a4cad59d29a22b870cb","html_url":"https://github.com/apache/openjpa/commit/4a15b9c39ed31f94034e8a4cad59d29a22b870cb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4a15b9c39ed31f94034e8a4cad59d29a22b870cb/comments","author":null,"committer":null,"parents":[{"sha":"add6a29be4017c1cf670034811ab5942f756ce94","url":"https://api.github.com/repos/apache/openjpa/commits/add6a29be4017c1cf670034811ab5942f756ce94","html_url":"https://github.com/apache/openjpa/commit/add6a29be4017c1cf670034811ab5942f756ce94"}]},{"sha":"f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5OGVjZjRkMjJlOTc0YWMzZjVjMGJhZjcxMzRkYzBhNGEyNGU1N2M=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-18T23:31:55Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-18T23:31:55Z"},"message":"OPENJPA-235 Reverted patch since it was causing TCK failur\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@539630 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ceaebd3f5efab5775c15cdf080a16af0c004c72","url":"https://api.github.com/repos/apache/openjpa/git/trees/8ceaebd3f5efab5775c15cdf080a16af0c004c72"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c","html_url":"https://github.com/apache/openjpa/commit/f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c/comments","author":null,"committer":null,"parents":[{"sha":"4a15b9c39ed31f94034e8a4cad59d29a22b870cb","url":"https://api.github.com/repos/apache/openjpa/commits/4a15b9c39ed31f94034e8a4cad59d29a22b870cb","html_url":"https://github.com/apache/openjpa/commit/4a15b9c39ed31f94034e8a4cad59d29a22b870cb"}]},{"sha":"81e89bcd80c73dad3e457906b6efcf58c1823e32","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxZTg5YmNkODBjNzNkYWQzZTQ1NzkwNmI2ZWZjZjU4YzE4MjNlMzI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-20T01:25:52Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-20T01:25:52Z"},"message":"Formatting fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@539813 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21458c56918af31976a438a8643e15539cbd3029","url":"https://api.github.com/repos/apache/openjpa/git/trees/21458c56918af31976a438a8643e15539cbd3029"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/81e89bcd80c73dad3e457906b6efcf58c1823e32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/81e89bcd80c73dad3e457906b6efcf58c1823e32","html_url":"https://github.com/apache/openjpa/commit/81e89bcd80c73dad3e457906b6efcf58c1823e32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/81e89bcd80c73dad3e457906b6efcf58c1823e32/comments","author":null,"committer":null,"parents":[{"sha":"f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c","url":"https://api.github.com/repos/apache/openjpa/commits/f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c","html_url":"https://github.com/apache/openjpa/commit/f98ecf4d22e974ac3f5c0baf7134dc0a4a24e57c"}]},{"sha":"e041fe0d4de6baebefcbc34a3ff1962212535b5b","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwNDFmZTBkNGRlNmJhZWJlZmNiYzM0YTNmZjE5NjIyMTI1MzViNWI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-21T16:35:28Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-21T16:35:28Z"},"message":"OPENJPA-237 Copy aliases array so it can't get modified by reference\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@540199 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea36e89f9dd540e1d8d701d01fb41b1099718bfe","url":"https://api.github.com/repos/apache/openjpa/git/trees/ea36e89f9dd540e1d8d701d01fb41b1099718bfe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e041fe0d4de6baebefcbc34a3ff1962212535b5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e041fe0d4de6baebefcbc34a3ff1962212535b5b","html_url":"https://github.com/apache/openjpa/commit/e041fe0d4de6baebefcbc34a3ff1962212535b5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e041fe0d4de6baebefcbc34a3ff1962212535b5b/comments","author":null,"committer":null,"parents":[{"sha":"81e89bcd80c73dad3e457906b6efcf58c1823e32","url":"https://api.github.com/repos/apache/openjpa/commits/81e89bcd80c73dad3e457906b6efcf58c1823e32","html_url":"https://github.com/apache/openjpa/commit/81e89bcd80c73dad3e457906b6efcf58c1823e32"}]},{"sha":"04397f562eeffeeb521527f12bfe9ab8bb83a93e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0Mzk3ZjU2MmVlZmZlZWI1MjE1MjdmMTJiZmU5YWI4YmI4M2E5M2U=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-21T20:45:09Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-21T20:45:09Z"},"message":"OPENJPA-148 Applied follow-up patch that resolved potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@540283 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24c22a394f7d001a5fe85022ba081d60c7952fdd","url":"https://api.github.com/repos/apache/openjpa/git/trees/24c22a394f7d001a5fe85022ba081d60c7952fdd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04397f562eeffeeb521527f12bfe9ab8bb83a93e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04397f562eeffeeb521527f12bfe9ab8bb83a93e","html_url":"https://github.com/apache/openjpa/commit/04397f562eeffeeb521527f12bfe9ab8bb83a93e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04397f562eeffeeb521527f12bfe9ab8bb83a93e/comments","author":null,"committer":null,"parents":[{"sha":"e041fe0d4de6baebefcbc34a3ff1962212535b5b","url":"https://api.github.com/repos/apache/openjpa/commits/e041fe0d4de6baebefcbc34a3ff1962212535b5b","html_url":"https://github.com/apache/openjpa/commit/e041fe0d4de6baebefcbc34a3ff1962212535b5b"}]},{"sha":"bc0c353ef0533d23863758c4bb5fce9008f2170f","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjMGMzNTNlZjA1MzNkMjM4NjM3NThjNGJiNWZjZTkwMDhmMjE3MGY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-21T21:17:02Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-21T21:17:02Z"},"message":"OPENJPA-148 Fixed incorrect import of non-existent ClassLoaderMetaDataIterator in patched file\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@540301 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"278fcc7afaeb3c208754380072030fc716ae7611","url":"https://api.github.com/repos/apache/openjpa/git/trees/278fcc7afaeb3c208754380072030fc716ae7611"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bc0c353ef0533d23863758c4bb5fce9008f2170f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bc0c353ef0533d23863758c4bb5fce9008f2170f","html_url":"https://github.com/apache/openjpa/commit/bc0c353ef0533d23863758c4bb5fce9008f2170f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bc0c353ef0533d23863758c4bb5fce9008f2170f/comments","author":null,"committer":null,"parents":[{"sha":"04397f562eeffeeb521527f12bfe9ab8bb83a93e","url":"https://api.github.com/repos/apache/openjpa/commits/04397f562eeffeeb521527f12bfe9ab8bb83a93e","html_url":"https://github.com/apache/openjpa/commit/04397f562eeffeeb521527f12bfe9ab8bb83a93e"}]},{"sha":"fcad0cdca75753f2a84a4e9719822c9901dd0f19","node_id":"MDY6Q29tbWl0MjA2MzY0OmZjYWQwY2RjYTc1NzUzZjJhODRhNGU5NzE5ODIyYzk5MDFkZDBmMTk=","commit":{"author":{"name":"Joe Schaefer","email":"joes@apache.org","date":"2007-05-23T02:33:15Z"},"committer":{"name":"Joe Schaefer","email":"joes@apache.org","date":"2007-05-23T02:33:15Z"},"message":"move openjpa repos to top-level\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@540807 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"278fcc7afaeb3c208754380072030fc716ae7611","url":"https://api.github.com/repos/apache/openjpa/git/trees/278fcc7afaeb3c208754380072030fc716ae7611"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fcad0cdca75753f2a84a4e9719822c9901dd0f19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fcad0cdca75753f2a84a4e9719822c9901dd0f19","html_url":"https://github.com/apache/openjpa/commit/fcad0cdca75753f2a84a4e9719822c9901dd0f19","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fcad0cdca75753f2a84a4e9719822c9901dd0f19/comments","author":null,"committer":null,"parents":[{"sha":"bc0c353ef0533d23863758c4bb5fce9008f2170f","url":"https://api.github.com/repos/apache/openjpa/commits/bc0c353ef0533d23863758c4bb5fce9008f2170f","html_url":"https://github.com/apache/openjpa/commit/bc0c353ef0533d23863758c4bb5fce9008f2170f"}]},{"sha":"75e59a4e65374caaa1318ad0f8e06b77826ffea4","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1ZTU5YTRlNjUzNzRjYWFhMTMxOGFkMGY4ZTA2Yjc3ODI2ZmZlYTQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-23T03:10:18Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-23T03:10:18Z"},"message":"Test commit for new repository.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@540826 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c67cb6ee69563ea75e3792c5d767442c9dd67962","url":"https://api.github.com/repos/apache/openjpa/git/trees/c67cb6ee69563ea75e3792c5d767442c9dd67962"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/75e59a4e65374caaa1318ad0f8e06b77826ffea4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/75e59a4e65374caaa1318ad0f8e06b77826ffea4","html_url":"https://github.com/apache/openjpa/commit/75e59a4e65374caaa1318ad0f8e06b77826ffea4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/75e59a4e65374caaa1318ad0f8e06b77826ffea4/comments","author":null,"committer":null,"parents":[{"sha":"fcad0cdca75753f2a84a4e9719822c9901dd0f19","url":"https://api.github.com/repos/apache/openjpa/commits/fcad0cdca75753f2a84a4e9719822c9901dd0f19","html_url":"https://github.com/apache/openjpa/commit/fcad0cdca75753f2a84a4e9719822c9901dd0f19"}]},{"sha":"0e19b714ac65fd9ad833ccaf39d43d72a63ee768","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlMTliNzE0YWM2NWZkOWFkODMzY2NhZjM5ZDQzZDcyYTYzZWU3Njg=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-23T03:36:05Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-23T03:36:05Z"},"message":"Changed version from 0.9.8-incubating-SNAPSHOT to 0.9.8-SNAPSHOT to reflect move from incubation to TLP\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@540829 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"40694159e84ae9fcca44c729f0afce49995a5d61","url":"https://api.github.com/repos/apache/openjpa/git/trees/40694159e84ae9fcca44c729f0afce49995a5d61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0e19b714ac65fd9ad833ccaf39d43d72a63ee768","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0e19b714ac65fd9ad833ccaf39d43d72a63ee768","html_url":"https://github.com/apache/openjpa/commit/0e19b714ac65fd9ad833ccaf39d43d72a63ee768","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0e19b714ac65fd9ad833ccaf39d43d72a63ee768/comments","author":null,"committer":null,"parents":[{"sha":"75e59a4e65374caaa1318ad0f8e06b77826ffea4","url":"https://api.github.com/repos/apache/openjpa/commits/75e59a4e65374caaa1318ad0f8e06b77826ffea4","html_url":"https://github.com/apache/openjpa/commit/75e59a4e65374caaa1318ad0f8e06b77826ffea4"}]},{"sha":"e5cc6d8f802b13cedf4587d1bb2d7b2046d16026","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1Y2M2ZDhmODAyYjEzY2VkZjQ1ODdkMWJiMmQ3YjIwNDZkMTYwMjY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-23T03:40:15Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-23T03:40:15Z"},"message":"Changed reference to svn repository from incubator repos to TLP one.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@540830 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e93acec105bfa812f7bd8cc770d40eb2dbdcaeb6","url":"https://api.github.com/repos/apache/openjpa/git/trees/e93acec105bfa812f7bd8cc770d40eb2dbdcaeb6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5cc6d8f802b13cedf4587d1bb2d7b2046d16026","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5cc6d8f802b13cedf4587d1bb2d7b2046d16026","html_url":"https://github.com/apache/openjpa/commit/e5cc6d8f802b13cedf4587d1bb2d7b2046d16026","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5cc6d8f802b13cedf4587d1bb2d7b2046d16026/comments","author":null,"committer":null,"parents":[{"sha":"0e19b714ac65fd9ad833ccaf39d43d72a63ee768","url":"https://api.github.com/repos/apache/openjpa/commits/0e19b714ac65fd9ad833ccaf39d43d72a63ee768","html_url":"https://github.com/apache/openjpa/commit/0e19b714ac65fd9ad833ccaf39d43d72a63ee768"}]},{"sha":"87d118290c5eb7eaf87415cd38254e5a1b4e728d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3ZDExODI5MGM1ZWI3ZWFmODc0MTVjZDM4MjU0ZTVhMWI0ZTcyOGQ=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-05-23T22:04:57Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-05-23T22:04:57Z"},"message":"Add board report\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@541098 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c552aeb6cf24c104a1e7842473d692c31390f71b","url":"https://api.github.com/repos/apache/openjpa/git/trees/c552aeb6cf24c104a1e7842473d692c31390f71b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/87d118290c5eb7eaf87415cd38254e5a1b4e728d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/87d118290c5eb7eaf87415cd38254e5a1b4e728d","html_url":"https://github.com/apache/openjpa/commit/87d118290c5eb7eaf87415cd38254e5a1b4e728d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/87d118290c5eb7eaf87415cd38254e5a1b4e728d/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"e5cc6d8f802b13cedf4587d1bb2d7b2046d16026","url":"https://api.github.com/repos/apache/openjpa/commits/e5cc6d8f802b13cedf4587d1bb2d7b2046d16026","html_url":"https://github.com/apache/openjpa/commit/e5cc6d8f802b13cedf4587d1bb2d7b2046d16026"}]},{"sha":"3599a48964ae3894a34220efe3ed936a5656728f","node_id":"MDY6Q29tbWl0MjA2MzY0OjM1OTlhNDg5NjRhZTM4OTRhMzQyMjBlZmUzZWQ5MzZhNTY1NjcyOGY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-26T19:18:37Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-26T19:18:37Z"},"message":"Moving version to 1.0.0-SNAPSHOT as a result of mailing list vote\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@541929 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d0f77341e02cbb7b7b189926276db004d17a94d7","url":"https://api.github.com/repos/apache/openjpa/git/trees/d0f77341e02cbb7b7b189926276db004d17a94d7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3599a48964ae3894a34220efe3ed936a5656728f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3599a48964ae3894a34220efe3ed936a5656728f","html_url":"https://github.com/apache/openjpa/commit/3599a48964ae3894a34220efe3ed936a5656728f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3599a48964ae3894a34220efe3ed936a5656728f/comments","author":null,"committer":null,"parents":[{"sha":"87d118290c5eb7eaf87415cd38254e5a1b4e728d","url":"https://api.github.com/repos/apache/openjpa/commits/87d118290c5eb7eaf87415cd38254e5a1b4e728d","html_url":"https://github.com/apache/openjpa/commit/87d118290c5eb7eaf87415cd38254e5a1b4e728d"}]},{"sha":"4870d3ffc9c2dca7afcbd167d00e60874eedb516","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4NzBkM2ZmYzljMmRjYTdhZmNiZDE2N2QwMGU2MDg3NGVlZGI1MTY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-29T17:27:46Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-05-29T17:27:46Z"},"message":"Updated the scm information in poms whose directories do not match their assembly names, which will hopefully fix one of the recent Continuum problems on vmbuild\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@542596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efba78452426bd178978d4b6de9b2aaa79ecd970","url":"https://api.github.com/repos/apache/openjpa/git/trees/efba78452426bd178978d4b6de9b2aaa79ecd970"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4870d3ffc9c2dca7afcbd167d00e60874eedb516","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4870d3ffc9c2dca7afcbd167d00e60874eedb516","html_url":"https://github.com/apache/openjpa/commit/4870d3ffc9c2dca7afcbd167d00e60874eedb516","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4870d3ffc9c2dca7afcbd167d00e60874eedb516/comments","author":null,"committer":null,"parents":[{"sha":"3599a48964ae3894a34220efe3ed936a5656728f","url":"https://api.github.com/repos/apache/openjpa/commits/3599a48964ae3894a34220efe3ed936a5656728f","html_url":"https://github.com/apache/openjpa/commit/3599a48964ae3894a34220efe3ed936a5656728f"}]},{"sha":"c634dcb4d81b286fe77bc1cffdd92c811116948c","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2MzRkY2I0ZDgxYjI4NmZlNzdiYzFjZmZkZDkyYzgxMTExNjk0OGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-05-31T21:24:46Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-05-31T21:24:46Z"},"message":"OPENJPA-248.  Modified parseForeignKey to set the appropriate cascade update action.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@543265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"452ac211282d62a770d8773d663914aac0c32e34","url":"https://api.github.com/repos/apache/openjpa/git/trees/452ac211282d62a770d8773d663914aac0c32e34"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c634dcb4d81b286fe77bc1cffdd92c811116948c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c634dcb4d81b286fe77bc1cffdd92c811116948c","html_url":"https://github.com/apache/openjpa/commit/c634dcb4d81b286fe77bc1cffdd92c811116948c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c634dcb4d81b286fe77bc1cffdd92c811116948c/comments","author":null,"committer":null,"parents":[{"sha":"4870d3ffc9c2dca7afcbd167d00e60874eedb516","url":"https://api.github.com/repos/apache/openjpa/commits/4870d3ffc9c2dca7afcbd167d00e60874eedb516","html_url":"https://github.com/apache/openjpa/commit/4870d3ffc9c2dca7afcbd167d00e60874eedb516"}]},{"sha":"e8fb1e420becd7b5c18b64f3b2247181283b540c","node_id":"MDY6Q29tbWl0MjA2MzY0OmU4ZmIxZTQyMGJlY2Q3YjVjMThiNjRmM2IyMjQ3MTgxMjgzYjU0MGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-01T15:23:03Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-01T15:23:03Z"},"message":"A couple of minor doc updates (no specific JIRA report) relating to a typo of remove (instead of refresh) and referencing another section in the Reference Guide for additional order-by capabilities.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@543502 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8dee2f50b729c74e62f74f00e366f1ea347b90e8","url":"https://api.github.com/repos/apache/openjpa/git/trees/8dee2f50b729c74e62f74f00e366f1ea347b90e8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e8fb1e420becd7b5c18b64f3b2247181283b540c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e8fb1e420becd7b5c18b64f3b2247181283b540c","html_url":"https://github.com/apache/openjpa/commit/e8fb1e420becd7b5c18b64f3b2247181283b540c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e8fb1e420becd7b5c18b64f3b2247181283b540c/comments","author":null,"committer":null,"parents":[{"sha":"c634dcb4d81b286fe77bc1cffdd92c811116948c","url":"https://api.github.com/repos/apache/openjpa/commits/c634dcb4d81b286fe77bc1cffdd92c811116948c","html_url":"https://github.com/apache/openjpa/commit/c634dcb4d81b286fe77bc1cffdd92c811116948c"}]},{"sha":"1ef670d2f68df88890e7131813e8c68912e04cdc","node_id":"MDY6Q29tbWl0MjA2MzY0OjFlZjY3MGQyZjY4ZGY4ODg5MGU3MTMxODEzZThjNjg5MTJlMDRjZGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-01T15:24:32Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-01T15:24:32Z"},"message":"I'm pretty sure the rollback() test method should be calling rollback() instead of commit()...  :-)  I found this while attempting some other tests, so I figured I would clean this up before somebody else stumbles across it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@543503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f50639e0583fa958e801e4bb2eb2f6afd97f8534","url":"https://api.github.com/repos/apache/openjpa/git/trees/f50639e0583fa958e801e4bb2eb2f6afd97f8534"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ef670d2f68df88890e7131813e8c68912e04cdc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ef670d2f68df88890e7131813e8c68912e04cdc","html_url":"https://github.com/apache/openjpa/commit/1ef670d2f68df88890e7131813e8c68912e04cdc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ef670d2f68df88890e7131813e8c68912e04cdc/comments","author":null,"committer":null,"parents":[{"sha":"e8fb1e420becd7b5c18b64f3b2247181283b540c","url":"https://api.github.com/repos/apache/openjpa/commits/e8fb1e420becd7b5c18b64f3b2247181283b540c","html_url":"https://github.com/apache/openjpa/commit/e8fb1e420becd7b5c18b64f3b2247181283b540c"}]},{"sha":"4d23f445c608f4ebd5e688d22362150d4f758618","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMjNmNDQ1YzYwOGY0ZWJkNWU2ODhkMjIzNjIxNTBkNGY3NTg2MTg=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-06-06T00:22:05Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-06-06T00:22:05Z"},"message":"Added TLP migration and release naming tasks\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@544694 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f642cc0b910be33e5ebea1b9477d4a3be6e342d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/f642cc0b910be33e5ebea1b9477d4a3be6e342d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d23f445c608f4ebd5e688d22362150d4f758618","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d23f445c608f4ebd5e688d22362150d4f758618","html_url":"https://github.com/apache/openjpa/commit/4d23f445c608f4ebd5e688d22362150d4f758618","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d23f445c608f4ebd5e688d22362150d4f758618/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"1ef670d2f68df88890e7131813e8c68912e04cdc","url":"https://api.github.com/repos/apache/openjpa/commits/1ef670d2f68df88890e7131813e8c68912e04cdc","html_url":"https://github.com/apache/openjpa/commit/1ef670d2f68df88890e7131813e8c68912e04cdc"}]},{"sha":"5463700d6c7e120241dde074d2d8aa25c01b3fda","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0NjM3MDBkNmM3ZTEyMDI0MWRkZTA3NGQyZDhhYTI1YzAxYjNmZGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-06T18:49:30Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-06T18:49:30Z"},"message":"OPENJPA-235\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@544918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"252a886b30a80457626629de546cbbd2296ba451","url":"https://api.github.com/repos/apache/openjpa/git/trees/252a886b30a80457626629de546cbbd2296ba451"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5463700d6c7e120241dde074d2d8aa25c01b3fda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5463700d6c7e120241dde074d2d8aa25c01b3fda","html_url":"https://github.com/apache/openjpa/commit/5463700d6c7e120241dde074d2d8aa25c01b3fda","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5463700d6c7e120241dde074d2d8aa25c01b3fda/comments","author":null,"committer":null,"parents":[{"sha":"4d23f445c608f4ebd5e688d22362150d4f758618","url":"https://api.github.com/repos/apache/openjpa/commits/4d23f445c608f4ebd5e688d22362150d4f758618","html_url":"https://github.com/apache/openjpa/commit/4d23f445c608f4ebd5e688d22362150d4f758618"}]},{"sha":"0a5619ef1c642e527dc2b31d3e1c1ebefa13e713","node_id":"MDY6Q29tbWl0MjA2MzY0OjBhNTYxOWVmMWM2NDJlNTI3ZGMyYjMxZDNlMWMxZWJlZmExM2U3MTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-06T21:55:31Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-06T21:55:31Z"},"message":"Corrected delete-by-query example. Thanks, Ignacio, for pointing this out.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@544970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"637a08b1b8c8ffca5c46af2aaf9120b8a59cfa44","url":"https://api.github.com/repos/apache/openjpa/git/trees/637a08b1b8c8ffca5c46af2aaf9120b8a59cfa44"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0a5619ef1c642e527dc2b31d3e1c1ebefa13e713","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0a5619ef1c642e527dc2b31d3e1c1ebefa13e713","html_url":"https://github.com/apache/openjpa/commit/0a5619ef1c642e527dc2b31d3e1c1ebefa13e713","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0a5619ef1c642e527dc2b31d3e1c1ebefa13e713/comments","author":null,"committer":null,"parents":[{"sha":"5463700d6c7e120241dde074d2d8aa25c01b3fda","url":"https://api.github.com/repos/apache/openjpa/commits/5463700d6c7e120241dde074d2d8aa25c01b3fda","html_url":"https://github.com/apache/openjpa/commit/5463700d6c7e120241dde074d2d8aa25c01b3fda"}]},{"sha":"aea920d171c315bdc8944cce7fb2ba069b82c0f1","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlYTkyMGQxNzFjMzE1YmRjODk0NGNjZTdmYjJiYTA2OWI4MmMwZjE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-07T23:23:35Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-07T23:23:35Z"},"message":"Improve documentation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@545345 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6bfd35acca0fb014ade058f4ffd98bddca5c13ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/6bfd35acca0fb014ade058f4ffd98bddca5c13ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aea920d171c315bdc8944cce7fb2ba069b82c0f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aea920d171c315bdc8944cce7fb2ba069b82c0f1","html_url":"https://github.com/apache/openjpa/commit/aea920d171c315bdc8944cce7fb2ba069b82c0f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aea920d171c315bdc8944cce7fb2ba069b82c0f1/comments","author":null,"committer":null,"parents":[{"sha":"0a5619ef1c642e527dc2b31d3e1c1ebefa13e713","url":"https://api.github.com/repos/apache/openjpa/commits/0a5619ef1c642e527dc2b31d3e1c1ebefa13e713","html_url":"https://github.com/apache/openjpa/commit/0a5619ef1c642e527dc2b31d3e1c1ebefa13e713"}]},{"sha":"aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e","node_id":"MDY6Q29tbWl0MjA2MzY0OmFhMzM1M2QzNGQ0OWEzYzJlNWVlNWMzMjlkNTAxZDZkMDAzZjllOGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-08T01:18:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-08T01:18:40Z"},"message":"Reece's test case from OPENJPA-235. I was a bit nervous about the changes to EntityB and EntityC's relationships, but all the existing OpenJPA tests pass, so evidently we did not rely on the particular settings as they were.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@545360 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8859f4f6c04a82b5ac41bad866c6c83724a028f","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8859f4f6c04a82b5ac41bad866c6c83724a028f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e","html_url":"https://github.com/apache/openjpa/commit/aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e/comments","author":null,"committer":null,"parents":[{"sha":"aea920d171c315bdc8944cce7fb2ba069b82c0f1","url":"https://api.github.com/repos/apache/openjpa/commits/aea920d171c315bdc8944cce7fb2ba069b82c0f1","html_url":"https://github.com/apache/openjpa/commit/aea920d171c315bdc8944cce7fb2ba069b82c0f1"}]},{"sha":"273045b321a61bc2b0cbb25bc9269323341e21bb","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3MzA0NWIzMjFhNjFiYzJiMGNiYjI1YmM5MjY5MzIzMzQxZTIxYmI=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-06-08T23:01:31Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-06-08T23:01:31Z"},"message":"Final update for board report for June 2007\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@545661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09c2a5980f2a8a6851d1653f117dc8389e6fc776","url":"https://api.github.com/repos/apache/openjpa/git/trees/09c2a5980f2a8a6851d1653f117dc8389e6fc776"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/273045b321a61bc2b0cbb25bc9269323341e21bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/273045b321a61bc2b0cbb25bc9269323341e21bb","html_url":"https://github.com/apache/openjpa/commit/273045b321a61bc2b0cbb25bc9269323341e21bb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/273045b321a61bc2b0cbb25bc9269323341e21bb/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e","url":"https://api.github.com/repos/apache/openjpa/commits/aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e","html_url":"https://github.com/apache/openjpa/commit/aa3353d34d49a3c2e5ee5c329d501d6d003f9e8e"}]},{"sha":"2e8b28c4c227bcb1ed31db7119cc1a2d74f31050","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlOGIyOGM0YzIyN2JjYjFlZDMxZGI3MTE5Y2MxYTJkNzRmMzEwNTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-06-12T16:43:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-06-12T16:43:10Z"},"message":"Replace usage of String.contains() by JDK1.4 compliant method \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@546567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"39205a7f03a38ce6d56f46e3942b063525c2563e","url":"https://api.github.com/repos/apache/openjpa/git/trees/39205a7f03a38ce6d56f46e3942b063525c2563e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2e8b28c4c227bcb1ed31db7119cc1a2d74f31050","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2e8b28c4c227bcb1ed31db7119cc1a2d74f31050","html_url":"https://github.com/apache/openjpa/commit/2e8b28c4c227bcb1ed31db7119cc1a2d74f31050","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2e8b28c4c227bcb1ed31db7119cc1a2d74f31050/comments","author":null,"committer":null,"parents":[{"sha":"273045b321a61bc2b0cbb25bc9269323341e21bb","url":"https://api.github.com/repos/apache/openjpa/commits/273045b321a61bc2b0cbb25bc9269323341e21bb","html_url":"https://github.com/apache/openjpa/commit/273045b321a61bc2b0cbb25bc9269323341e21bb"}]},{"sha":"43eb43898a43f2419cd86564a50c2e661f65e5b2","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzZWI0Mzg5OGE0M2YyNDE5Y2Q4NjU2NGE1MGMyZTY2MWY2NWU1YjI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T05:34:31Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T05:34:31Z"},"message":"Removed JDK1.5-specific construct.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@546742 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c57e896aa95e1ded3d638ebf197c8ca0b6027c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/c57e896aa95e1ded3d638ebf197c8ca0b6027c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/43eb43898a43f2419cd86564a50c2e661f65e5b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/43eb43898a43f2419cd86564a50c2e661f65e5b2","html_url":"https://github.com/apache/openjpa/commit/43eb43898a43f2419cd86564a50c2e661f65e5b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/43eb43898a43f2419cd86564a50c2e661f65e5b2/comments","author":null,"committer":null,"parents":[{"sha":"2e8b28c4c227bcb1ed31db7119cc1a2d74f31050","url":"https://api.github.com/repos/apache/openjpa/commits/2e8b28c4c227bcb1ed31db7119cc1a2d74f31050","html_url":"https://github.com/apache/openjpa/commit/2e8b28c4c227bcb1ed31db7119cc1a2d74f31050"}]},{"sha":"d72a5ad309c7641a3f8a84931004c93c5a9d070d","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ3MmE1YWQzMDljNzY0MWEzZjhhODQ5MzEwMDRjOTNjNWE5ZDA3MGQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T05:41:16Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T05:41:16Z"},"message":"Fixed JDK-1.5-specific Array.toString() call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@546743 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"282c98ab2046b7c58b3902624c78dc88d0a931e5","url":"https://api.github.com/repos/apache/openjpa/git/trees/282c98ab2046b7c58b3902624c78dc88d0a931e5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d72a5ad309c7641a3f8a84931004c93c5a9d070d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d72a5ad309c7641a3f8a84931004c93c5a9d070d","html_url":"https://github.com/apache/openjpa/commit/d72a5ad309c7641a3f8a84931004c93c5a9d070d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d72a5ad309c7641a3f8a84931004c93c5a9d070d/comments","author":null,"committer":null,"parents":[{"sha":"43eb43898a43f2419cd86564a50c2e661f65e5b2","url":"https://api.github.com/repos/apache/openjpa/commits/43eb43898a43f2419cd86564a50c2e661f65e5b2","html_url":"https://github.com/apache/openjpa/commit/43eb43898a43f2419cd86564a50c2e661f65e5b2"}]},{"sha":"0091bcabe301f0264765729b418d30a10523d53c","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwOTFiY2FiZTMwMWYwMjY0NzY1NzI5YjQxOGQzMGExMDUyM2Q1M2M=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T07:50:11Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T07:50:11Z"},"message":"Added a 'java14.jar' property that can be used to specify the location of the JDK 1.4 runtime jar, against which we will compile the JDK 1.4-specific modules. This can be used to ensure that JDK 1.5-specific methods and classes don't slip into the JDK 1.4 modules.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@546768 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"99986be0e08e0e5b1ed97a5a14c183b78135dc81","url":"https://api.github.com/repos/apache/openjpa/git/trees/99986be0e08e0e5b1ed97a5a14c183b78135dc81"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0091bcabe301f0264765729b418d30a10523d53c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0091bcabe301f0264765729b418d30a10523d53c","html_url":"https://github.com/apache/openjpa/commit/0091bcabe301f0264765729b418d30a10523d53c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0091bcabe301f0264765729b418d30a10523d53c/comments","author":null,"committer":null,"parents":[{"sha":"d72a5ad309c7641a3f8a84931004c93c5a9d070d","url":"https://api.github.com/repos/apache/openjpa/commits/d72a5ad309c7641a3f8a84931004c93c5a9d070d","html_url":"https://github.com/apache/openjpa/commit/d72a5ad309c7641a3f8a84931004c93c5a9d070d"}]},{"sha":"5cda1770a06ce547c83e4544d5647df93a83ce1b","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjZGExNzcwYTA2Y2U1NDdjODNlNDU0NGQ1NjQ3ZGY5M2E4M2NlMWI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T22:39:42Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T22:39:42Z"},"message":"Fixed invalid index tag.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547052 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b65f36ee229af199dd9b0731263407222ef859b","url":"https://api.github.com/repos/apache/openjpa/git/trees/9b65f36ee229af199dd9b0731263407222ef859b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5cda1770a06ce547c83e4544d5647df93a83ce1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5cda1770a06ce547c83e4544d5647df93a83ce1b","html_url":"https://github.com/apache/openjpa/commit/5cda1770a06ce547c83e4544d5647df93a83ce1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5cda1770a06ce547c83e4544d5647df93a83ce1b/comments","author":null,"committer":null,"parents":[{"sha":"0091bcabe301f0264765729b418d30a10523d53c","url":"https://api.github.com/repos/apache/openjpa/commits/0091bcabe301f0264765729b418d30a10523d53c","html_url":"https://github.com/apache/openjpa/commit/0091bcabe301f0264765729b418d30a10523d53c"}]},{"sha":"b7aac8426207e30e320a9a7dd6b17a90e3f0f649","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3YWFjODQyNjIwN2UzMGUzMjBhOWE3ZGQ2YjE3YTkwZTNmMGY2NDk=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T22:42:38Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-13T22:42:38Z"},"message":"Fixed bad link names.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547054 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afa59aced098172fd33ec808c1b666680f5d830c","url":"https://api.github.com/repos/apache/openjpa/git/trees/afa59aced098172fd33ec808c1b666680f5d830c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7aac8426207e30e320a9a7dd6b17a90e3f0f649","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7aac8426207e30e320a9a7dd6b17a90e3f0f649","html_url":"https://github.com/apache/openjpa/commit/b7aac8426207e30e320a9a7dd6b17a90e3f0f649","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7aac8426207e30e320a9a7dd6b17a90e3f0f649/comments","author":null,"committer":null,"parents":[{"sha":"5cda1770a06ce547c83e4544d5647df93a83ce1b","url":"https://api.github.com/repos/apache/openjpa/commits/5cda1770a06ce547c83e4544d5647df93a83ce1b","html_url":"https://github.com/apache/openjpa/commit/5cda1770a06ce547c83e4544d5647df93a83ce1b"}]},{"sha":"90d053f4ef217ae2c3644f9d6258a6d5510260d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwZDA1M2Y0ZWYyMTdhZTJjMzY0NGY5ZDYyNThhNmQ1NTEwMjYwZDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-06-14T01:08:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-06-14T01:08:25Z"},"message":"Resolve Getter/Setter type inconsistency in Entity IdClass.\nReflects to find setter method in Application Identity class with correct parameter type.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"51df7816a62c4f6e34d6db70c54e6e122b40f067","url":"https://api.github.com/repos/apache/openjpa/git/trees/51df7816a62c4f6e34d6db70c54e6e122b40f067"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90d053f4ef217ae2c3644f9d6258a6d5510260d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90d053f4ef217ae2c3644f9d6258a6d5510260d0","html_url":"https://github.com/apache/openjpa/commit/90d053f4ef217ae2c3644f9d6258a6d5510260d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90d053f4ef217ae2c3644f9d6258a6d5510260d0/comments","author":null,"committer":null,"parents":[{"sha":"b7aac8426207e30e320a9a7dd6b17a90e3f0f649","url":"https://api.github.com/repos/apache/openjpa/commits/b7aac8426207e30e320a9a7dd6b17a90e3f0f649","html_url":"https://github.com/apache/openjpa/commit/b7aac8426207e30e320a9a7dd6b17a90e3f0f649"}]},{"sha":"ee3c0b1dc4867f257c6a9283f31b644052510c6a","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlM2MwYjFkYzQ4NjdmMjU3YzZhOTI4M2YzMWI2NDQwNTI1MTBjNmE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:41:50Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:41:50Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547827 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0219b469808c88f2e5db83c302d9dd6220a05765","url":"https://api.github.com/repos/apache/openjpa/git/trees/0219b469808c88f2e5db83c302d9dd6220a05765"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee3c0b1dc4867f257c6a9283f31b644052510c6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee3c0b1dc4867f257c6a9283f31b644052510c6a","html_url":"https://github.com/apache/openjpa/commit/ee3c0b1dc4867f257c6a9283f31b644052510c6a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee3c0b1dc4867f257c6a9283f31b644052510c6a/comments","author":null,"committer":null,"parents":[{"sha":"90d053f4ef217ae2c3644f9d6258a6d5510260d0","url":"https://api.github.com/repos/apache/openjpa/commits/90d053f4ef217ae2c3644f9d6258a6d5510260d0","html_url":"https://github.com/apache/openjpa/commit/90d053f4ef217ae2c3644f9d6258a6d5510260d0"}]},{"sha":"d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzODRkY2I4ZmQzZGZmZDFjMDRlOTFlZjk2YTE0N2Q4YmFjNWE0ZGU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:44:31Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:44:31Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547830 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b3227c26f88f80affe3e38801199634b68a21fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/3b3227c26f88f80affe3e38801199634b68a21fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","html_url":"https://github.com/apache/openjpa/commit/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de/comments","author":null,"committer":null,"parents":[{"sha":"ee3c0b1dc4867f257c6a9283f31b644052510c6a","url":"https://api.github.com/repos/apache/openjpa/commits/ee3c0b1dc4867f257c6a9283f31b644052510c6a","html_url":"https://github.com/apache/openjpa/commit/ee3c0b1dc4867f257c6a9283f31b644052510c6a"}]},{"sha":"f026af58cd50053116d8aad238f2e041ba76d8a5","node_id":"MDY6Q29tbWl0MjA2MzY0OmYwMjZhZjU4Y2Q1MDA1MzExNmQ4YWFkMjM4ZjJlMDQxYmE3NmQ4YTU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:44:47Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:44:47Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547831 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3c7ad12c5eaadcbde36d4524e87fb72deb06cb2","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3c7ad12c5eaadcbde36d4524e87fb72deb06cb2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f026af58cd50053116d8aad238f2e041ba76d8a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f026af58cd50053116d8aad238f2e041ba76d8a5","html_url":"https://github.com/apache/openjpa/commit/f026af58cd50053116d8aad238f2e041ba76d8a5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f026af58cd50053116d8aad238f2e041ba76d8a5/comments","author":null,"committer":null,"parents":[{"sha":"d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","url":"https://api.github.com/repos/apache/openjpa/commits/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de","html_url":"https://github.com/apache/openjpa/commit/d384dcb8fd3dffd1c04e91ef96a147d8bac5a4de"}]},{"sha":"1a130afb05ed4fd791884f403e516822fb2dc9ad","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhMTMwYWZiMDVlZDRmZDc5MTg4NGY0MDNlNTE2ODIyZmIyZGM5YWQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:45:00Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:45:00Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547832 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59bfb7b55d2514087a21746573f77f04ad38f1fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/59bfb7b55d2514087a21746573f77f04ad38f1fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a130afb05ed4fd791884f403e516822fb2dc9ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a130afb05ed4fd791884f403e516822fb2dc9ad","html_url":"https://github.com/apache/openjpa/commit/1a130afb05ed4fd791884f403e516822fb2dc9ad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a130afb05ed4fd791884f403e516822fb2dc9ad/comments","author":null,"committer":null,"parents":[{"sha":"f026af58cd50053116d8aad238f2e041ba76d8a5","url":"https://api.github.com/repos/apache/openjpa/commits/f026af58cd50053116d8aad238f2e041ba76d8a5","html_url":"https://github.com/apache/openjpa/commit/f026af58cd50053116d8aad238f2e041ba76d8a5"}]},{"sha":"3aac689d569860c61a18b6c5f6afa8f9150e112d","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhYWM2ODlkNTY5ODYwYzYxYTE4YjZjNWY2YWZhOGY5MTUwZTExMmQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:45:14Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:45:14Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547833 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c4670f766a3d2575d27ed67f01de65c269f3461","url":"https://api.github.com/repos/apache/openjpa/git/trees/7c4670f766a3d2575d27ed67f01de65c269f3461"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3aac689d569860c61a18b6c5f6afa8f9150e112d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3aac689d569860c61a18b6c5f6afa8f9150e112d","html_url":"https://github.com/apache/openjpa/commit/3aac689d569860c61a18b6c5f6afa8f9150e112d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3aac689d569860c61a18b6c5f6afa8f9150e112d/comments","author":null,"committer":null,"parents":[{"sha":"1a130afb05ed4fd791884f403e516822fb2dc9ad","url":"https://api.github.com/repos/apache/openjpa/commits/1a130afb05ed4fd791884f403e516822fb2dc9ad","html_url":"https://github.com/apache/openjpa/commit/1a130afb05ed4fd791884f403e516822fb2dc9ad"}]},{"sha":"04b873a44995ee31e1dd74005055cd7a6cb47baa","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0Yjg3M2E0NDk5NWVlMzFlMWRkNzQwMDUwNTVjZDdhNmNiNDdiYWE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:45:28Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-15T23:45:28Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e371374574288899b5a06b19a1413ee4daae0196","url":"https://api.github.com/repos/apache/openjpa/git/trees/e371374574288899b5a06b19a1413ee4daae0196"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04b873a44995ee31e1dd74005055cd7a6cb47baa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04b873a44995ee31e1dd74005055cd7a6cb47baa","html_url":"https://github.com/apache/openjpa/commit/04b873a44995ee31e1dd74005055cd7a6cb47baa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04b873a44995ee31e1dd74005055cd7a6cb47baa/comments","author":null,"committer":null,"parents":[{"sha":"3aac689d569860c61a18b6c5f6afa8f9150e112d","url":"https://api.github.com/repos/apache/openjpa/commits/3aac689d569860c61a18b6c5f6afa8f9150e112d","html_url":"https://github.com/apache/openjpa/commit/3aac689d569860c61a18b6c5f6afa8f9150e112d"}]},{"sha":"a4e1584fe3a6f4aeab8077b9fd29db67affe02ff","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0ZTE1ODRmZTNhNmY0YWVhYjgwNzdiOWZkMjlkYjY3YWZmZTAyZmY=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-16T00:01:50Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-16T00:01:50Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547836 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86619630f4018a53386a367c49b53b3a3d5d0f6e","url":"https://api.github.com/repos/apache/openjpa/git/trees/86619630f4018a53386a367c49b53b3a3d5d0f6e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4e1584fe3a6f4aeab8077b9fd29db67affe02ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4e1584fe3a6f4aeab8077b9fd29db67affe02ff","html_url":"https://github.com/apache/openjpa/commit/a4e1584fe3a6f4aeab8077b9fd29db67affe02ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4e1584fe3a6f4aeab8077b9fd29db67affe02ff/comments","author":null,"committer":null,"parents":[{"sha":"04b873a44995ee31e1dd74005055cd7a6cb47baa","url":"https://api.github.com/repos/apache/openjpa/commits/04b873a44995ee31e1dd74005055cd7a6cb47baa","html_url":"https://github.com/apache/openjpa/commit/04b873a44995ee31e1dd74005055cd7a6cb47baa"}]},{"sha":"e0e176ab83beed65cd9e21c9cfed8628f80553ca","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwZTE3NmFiODNiZWVkNjVjZDllMjFjOWNmZWQ4NjI4ZjgwNTUzY2E=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-16T00:09:45Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-16T00:09:45Z"},"message":"OPENJPA-240 Feature:Persistent field mapping support for XML column type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547837 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a5ec9042d29be0107b9c5cb5c59b1d3e7fb3f71","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a5ec9042d29be0107b9c5cb5c59b1d3e7fb3f71"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e0e176ab83beed65cd9e21c9cfed8628f80553ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e0e176ab83beed65cd9e21c9cfed8628f80553ca","html_url":"https://github.com/apache/openjpa/commit/e0e176ab83beed65cd9e21c9cfed8628f80553ca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e0e176ab83beed65cd9e21c9cfed8628f80553ca/comments","author":null,"committer":null,"parents":[{"sha":"a4e1584fe3a6f4aeab8077b9fd29db67affe02ff","url":"https://api.github.com/repos/apache/openjpa/commits/a4e1584fe3a6f4aeab8077b9fd29db67affe02ff","html_url":"https://github.com/apache/openjpa/commit/a4e1584fe3a6f4aeab8077b9fd29db67affe02ff"}]},{"sha":"9f0a7ff545b581cb39a11e27787ff5e792793daa","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmMGE3ZmY1NDViNTgxY2IzOWExMWUyNzc4N2ZmNWU3OTI3OTNkYWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-16T06:54:12Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-16T06:54:12Z"},"message":"OPENJPA-259. Applied Craig's patch (minus the ACK char; maybe Craig meant ^L instead?), and added a test case. The test uses dynamic JPQL, but the parser change should work for XML-based named queries also, and it seems fair to allow newlines in dynamic strings as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@547872 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a0dcdcf2125203312d36ddf83cb10db0b746251","url":"https://api.github.com/repos/apache/openjpa/git/trees/1a0dcdcf2125203312d36ddf83cb10db0b746251"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f0a7ff545b581cb39a11e27787ff5e792793daa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f0a7ff545b581cb39a11e27787ff5e792793daa","html_url":"https://github.com/apache/openjpa/commit/9f0a7ff545b581cb39a11e27787ff5e792793daa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f0a7ff545b581cb39a11e27787ff5e792793daa/comments","author":null,"committer":null,"parents":[{"sha":"e0e176ab83beed65cd9e21c9cfed8628f80553ca","url":"https://api.github.com/repos/apache/openjpa/commits/e0e176ab83beed65cd9e21c9cfed8628f80553ca","html_url":"https://github.com/apache/openjpa/commit/e0e176ab83beed65cd9e21c9cfed8628f80553ca"}]},{"sha":"79827a90f673b12d008d87c689898a53a35b0826","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5ODI3YTkwZjY3M2IxMmQwMDhkODdjNjg5ODk4YTUzYTM1YjA4MjY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-18T18:18:55Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-18T18:18:55Z"},"message":"Remove use of JDK 1.5-only method String.contains().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@548431 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c5622b3ea6358008b9f675e7cf43d44821e0af88","url":"https://api.github.com/repos/apache/openjpa/git/trees/c5622b3ea6358008b9f675e7cf43d44821e0af88"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/79827a90f673b12d008d87c689898a53a35b0826","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/79827a90f673b12d008d87c689898a53a35b0826","html_url":"https://github.com/apache/openjpa/commit/79827a90f673b12d008d87c689898a53a35b0826","comments_url":"https://api.github.com/repos/apache/openjpa/commits/79827a90f673b12d008d87c689898a53a35b0826/comments","author":null,"committer":null,"parents":[{"sha":"9f0a7ff545b581cb39a11e27787ff5e792793daa","url":"https://api.github.com/repos/apache/openjpa/commits/9f0a7ff545b581cb39a11e27787ff5e792793daa","html_url":"https://github.com/apache/openjpa/commit/9f0a7ff545b581cb39a11e27787ff5e792793daa"}]},{"sha":"8bf89a655ad5413adc21e3c1434ddd196658c382","node_id":"MDY6Q29tbWl0MjA2MzY0OjhiZjg5YTY1NWFkNTQxM2FkYzIxZTNjMTQzNGRkZDE5NjY1OGMzODI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-19T19:44:58Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-19T19:44:58Z"},"message":"OPENJPA-240, packaging/renaming/JAXB dependency cleanups\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@548834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"17a767c718f7cd5011f41f8f148d9888c98e519f","url":"https://api.github.com/repos/apache/openjpa/git/trees/17a767c718f7cd5011f41f8f148d9888c98e519f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8bf89a655ad5413adc21e3c1434ddd196658c382","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8bf89a655ad5413adc21e3c1434ddd196658c382","html_url":"https://github.com/apache/openjpa/commit/8bf89a655ad5413adc21e3c1434ddd196658c382","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8bf89a655ad5413adc21e3c1434ddd196658c382/comments","author":null,"committer":null,"parents":[{"sha":"79827a90f673b12d008d87c689898a53a35b0826","url":"https://api.github.com/repos/apache/openjpa/commits/79827a90f673b12d008d87c689898a53a35b0826","html_url":"https://github.com/apache/openjpa/commit/79827a90f673b12d008d87c689898a53a35b0826"}]},{"sha":"e59f995429d8c1ce5984b1d57465a3941433144a","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1OWY5OTU0MjlkOGMxY2U1OTg0YjFkNTc0NjVhMzk0MTQzMzE0NGE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-19T19:45:58Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-19T19:45:58Z"},"message":"OPENJPA-240, cleanup work\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@548835 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fda56fa2180f8573f8a0505fcd494f8e92368a05","url":"https://api.github.com/repos/apache/openjpa/git/trees/fda56fa2180f8573f8a0505fcd494f8e92368a05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e59f995429d8c1ce5984b1d57465a3941433144a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e59f995429d8c1ce5984b1d57465a3941433144a","html_url":"https://github.com/apache/openjpa/commit/e59f995429d8c1ce5984b1d57465a3941433144a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e59f995429d8c1ce5984b1d57465a3941433144a/comments","author":null,"committer":null,"parents":[{"sha":"8bf89a655ad5413adc21e3c1434ddd196658c382","url":"https://api.github.com/repos/apache/openjpa/commits/8bf89a655ad5413adc21e3c1434ddd196658c382","html_url":"https://github.com/apache/openjpa/commit/8bf89a655ad5413adc21e3c1434ddd196658c382"}]},{"sha":"1921d6cc598bc697587a6fd8365b19caca098249","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5MjFkNmNjNTk4YmM2OTc1ODdhNmZkODM2NWIxOWNhY2EwOTgyNDk=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-19T21:53:55Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-19T21:53:55Z"},"message":"OPENJPA-240 fix JAXB dependency and move XMLValueHandler to openjpa-jdbc-5.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@548860 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43e40be801170887e714ba4ceac87df824641b47","url":"https://api.github.com/repos/apache/openjpa/git/trees/43e40be801170887e714ba4ceac87df824641b47"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1921d6cc598bc697587a6fd8365b19caca098249","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1921d6cc598bc697587a6fd8365b19caca098249","html_url":"https://github.com/apache/openjpa/commit/1921d6cc598bc697587a6fd8365b19caca098249","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1921d6cc598bc697587a6fd8365b19caca098249/comments","author":null,"committer":null,"parents":[{"sha":"e59f995429d8c1ce5984b1d57465a3941433144a","url":"https://api.github.com/repos/apache/openjpa/commits/e59f995429d8c1ce5984b1d57465a3941433144a","html_url":"https://github.com/apache/openjpa/commit/e59f995429d8c1ce5984b1d57465a3941433144a"}]},{"sha":"a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzOWEyZGFjZTlkMmI3NmYyZTdhYzdjNzBkNmYxYzU2NDNlZTgwZWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-06-21T06:18:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-06-21T06:18:33Z"},"message":"Return gracefully when no class found for enhancement. Without this check raises NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34bb100460a4f327cc231a1d70803b67f98cf309","url":"https://api.github.com/repos/apache/openjpa/git/trees/34bb100460a4f327cc231a1d70803b67f98cf309"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee","html_url":"https://github.com/apache/openjpa/commit/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee/comments","author":null,"committer":null,"parents":[{"sha":"1921d6cc598bc697587a6fd8365b19caca098249","url":"https://api.github.com/repos/apache/openjpa/commits/1921d6cc598bc697587a6fd8365b19caca098249","html_url":"https://github.com/apache/openjpa/commit/1921d6cc598bc697587a6fd8365b19caca098249"}]},{"sha":"cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjOGFjMGJjNjQyNGVjYjQ2ZDRlZTc4OTNhYjBjMmRmMGJiY2U5MWE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-21T15:17:24Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-21T15:17:24Z"},"message":"Changed the parsing of the driver name to not use the JDK 1.5-specific method String.contains() and String.split().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549508 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a62bfb3f1e279d10abf8b139b925b209175a6851","url":"https://api.github.com/repos/apache/openjpa/git/trees/a62bfb3f1e279d10abf8b139b925b209175a6851"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","html_url":"https://github.com/apache/openjpa/commit/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a/comments","author":null,"committer":null,"parents":[{"sha":"a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee","url":"https://api.github.com/repos/apache/openjpa/commits/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee","html_url":"https://github.com/apache/openjpa/commit/a39a2dace9d2b76f2e7ac7c70d6f1c5643ee80ee"}]},{"sha":"bd51cad23f96e2febfdcde4abc83350b11aeba4d","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkNTFjYWQyM2Y5NmUyZmViZmRjZGU0YWJjODMzNTBiMTFhZWJhNGQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-21T15:44:06Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-21T15:44:06Z"},"message":"Changed checking for javax.xml.bind.annotation.XmlType to use reflection instead of a hard-wired class name so we more gracefully handle cases where JAXB is not available.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"053484177502948a71e4b5d444a4287ab04ceb76","url":"https://api.github.com/repos/apache/openjpa/git/trees/053484177502948a71e4b5d444a4287ab04ceb76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d","html_url":"https://github.com/apache/openjpa/commit/bd51cad23f96e2febfdcde4abc83350b11aeba4d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d/comments","author":null,"committer":null,"parents":[{"sha":"cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","url":"https://api.github.com/repos/apache/openjpa/commits/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a","html_url":"https://github.com/apache/openjpa/commit/cc8ac0bc6424ecb46d4ee7893ab0c2df0bbce91a"}]},{"sha":"578c987ac494c90f837f3915c1b945aedaec8d78","node_id":"MDY6Q29tbWl0MjA2MzY0OjU3OGM5ODdhYzQ5NGM5MGY4MzdmMzkxNWMxYjk0NWFlZGFlYzhkNzg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-22T10:47:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-22T10:47:47Z"},"message":"Removed unused import statement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549776 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b72b56e76ec90b3ba0d229749bd17948870d5c9","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b72b56e76ec90b3ba0d229749bd17948870d5c9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/578c987ac494c90f837f3915c1b945aedaec8d78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/578c987ac494c90f837f3915c1b945aedaec8d78","html_url":"https://github.com/apache/openjpa/commit/578c987ac494c90f837f3915c1b945aedaec8d78","comments_url":"https://api.github.com/repos/apache/openjpa/commits/578c987ac494c90f837f3915c1b945aedaec8d78/comments","author":null,"committer":null,"parents":[{"sha":"bd51cad23f96e2febfdcde4abc83350b11aeba4d","url":"https://api.github.com/repos/apache/openjpa/commits/bd51cad23f96e2febfdcde4abc83350b11aeba4d","html_url":"https://github.com/apache/openjpa/commit/bd51cad23f96e2febfdcde4abc83350b11aeba4d"}]},{"sha":"be91d228c537529c5bb7a9681a083b2e422ce0e5","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlOTFkMjI4YzUzNzUyOWM1YmI3YTk2ODFhMDgzYjJlNDIyY2UwZTU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-22T17:08:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-22T17:08:28Z"},"message":"OPENJPA-51. Committing Catalina's patch. It passes against Derby in my environment as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@549882 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc7c4473832ffef64d7d809a24cf3a406ecbb9b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/cc7c4473832ffef64d7d809a24cf3a406ecbb9b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5","html_url":"https://github.com/apache/openjpa/commit/be91d228c537529c5bb7a9681a083b2e422ce0e5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5/comments","author":null,"committer":null,"parents":[{"sha":"578c987ac494c90f837f3915c1b945aedaec8d78","url":"https://api.github.com/repos/apache/openjpa/commits/578c987ac494c90f837f3915c1b945aedaec8d78","html_url":"https://github.com/apache/openjpa/commit/578c987ac494c90f837f3915c1b945aedaec8d78"}]},{"sha":"cbb7bded12af4b523c0c4823a2db42cda1a2463a","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiYjdiZGVkMTJhZjRiNTIzYzBjNDgyM2EyZGI0MmNkYTFhMjQ2M2E=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-24T03:30:26Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-06-24T03:30:26Z"},"message":"Remove use of JDK 1.5-only method String.contains().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c277a99b9ed96af249f9b78577aa04cbc7256ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/7c277a99b9ed96af249f9b78577aa04cbc7256ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbb7bded12af4b523c0c4823a2db42cda1a2463a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbb7bded12af4b523c0c4823a2db42cda1a2463a","html_url":"https://github.com/apache/openjpa/commit/cbb7bded12af4b523c0c4823a2db42cda1a2463a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbb7bded12af4b523c0c4823a2db42cda1a2463a/comments","author":null,"committer":null,"parents":[{"sha":"be91d228c537529c5bb7a9681a083b2e422ce0e5","url":"https://api.github.com/repos/apache/openjpa/commits/be91d228c537529c5bb7a9681a083b2e422ce0e5","html_url":"https://github.com/apache/openjpa/commit/be91d228c537529c5bb7a9681a083b2e422ce0e5"}]},{"sha":"39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5ZjEwNzEwODVjMDJkZmI0YTRkOTRmMWY1MDhjMmU4MmRjNDRjZjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-24T09:16:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-24T09:16:57Z"},"message":"OPENJPA-262\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550185 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d66a97ff1ca3c387564ae703489c2258e19971d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/d66a97ff1ca3c387564ae703489c2258e19971d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","html_url":"https://github.com/apache/openjpa/commit/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/comments","author":null,"committer":null,"parents":[{"sha":"cbb7bded12af4b523c0c4823a2db42cda1a2463a","url":"https://api.github.com/repos/apache/openjpa/commits/cbb7bded12af4b523c0c4823a2db42cda1a2463a","html_url":"https://github.com/apache/openjpa/commit/cbb7bded12af4b523c0c4823a2db42cda1a2463a"}]},{"sha":"0dde3fdbfaea302b83efcec42483fa8925e24d93","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkZGUzZmRiZmFlYTMwMmI4M2VmY2VjNDI0ODNmYTg5MjVlMjRkOTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-24T09:19:56Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-24T09:19:56Z"},"message":"OPENJPA-262. Added @since tag.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550187 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a7b26217f08602b24fc5cdfdca3bb1ed08af899","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a7b26217f08602b24fc5cdfdca3bb1ed08af899"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0dde3fdbfaea302b83efcec42483fa8925e24d93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0dde3fdbfaea302b83efcec42483fa8925e24d93","html_url":"https://github.com/apache/openjpa/commit/0dde3fdbfaea302b83efcec42483fa8925e24d93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0dde3fdbfaea302b83efcec42483fa8925e24d93/comments","author":null,"committer":null,"parents":[{"sha":"39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","url":"https://api.github.com/repos/apache/openjpa/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","html_url":"https://github.com/apache/openjpa/commit/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7"}]},{"sha":"843c86153aaa9b7999d1cc77221c85b851682a1d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0M2M4NjE1M2FhYTliNzk5OWQxY2M3NzIyMWM4NWI4NTE2ODJhMWQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-25T18:17:26Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-25T18:17:26Z"},"message":"OPENJPA-240, changed jaxb dependency to version 2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550568 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86539fea6f7f774a2db0b6786567c8106369a2f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/86539fea6f7f774a2db0b6786567c8106369a2f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/843c86153aaa9b7999d1cc77221c85b851682a1d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/843c86153aaa9b7999d1cc77221c85b851682a1d","html_url":"https://github.com/apache/openjpa/commit/843c86153aaa9b7999d1cc77221c85b851682a1d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/843c86153aaa9b7999d1cc77221c85b851682a1d/comments","author":null,"committer":null,"parents":[{"sha":"0dde3fdbfaea302b83efcec42483fa8925e24d93","url":"https://api.github.com/repos/apache/openjpa/commits/0dde3fdbfaea302b83efcec42483fa8925e24d93","html_url":"https://github.com/apache/openjpa/commit/0dde3fdbfaea302b83efcec42483fa8925e24d93"}]},{"sha":"e65f53b43de6707db3515c17daa40a9103a558aa","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2NWY1M2I0M2RlNjcwN2RiMzUxNWMxN2RhYTQwYTkxMDNhNTU4YWE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-26T18:22:06Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-06-26T18:22:06Z"},"message":"OPENJPA-61.  Marc's patch tests out okay with WebSphere.  I made a couple of minor cosmetic changes to the\npatch.  We need to get this into the stream for additional testing and verification by other application servers.\nSo, let's go for it...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65324950a07a17ac1a897c5648df72c5db948c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/65324950a07a17ac1a897c5648df72c5db948c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e65f53b43de6707db3515c17daa40a9103a558aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e65f53b43de6707db3515c17daa40a9103a558aa","html_url":"https://github.com/apache/openjpa/commit/e65f53b43de6707db3515c17daa40a9103a558aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e65f53b43de6707db3515c17daa40a9103a558aa/comments","author":null,"committer":null,"parents":[{"sha":"843c86153aaa9b7999d1cc77221c85b851682a1d","url":"https://api.github.com/repos/apache/openjpa/commits/843c86153aaa9b7999d1cc77221c85b851682a1d","html_url":"https://github.com/apache/openjpa/commit/843c86153aaa9b7999d1cc77221c85b851682a1d"}]},{"sha":"c1c32b4d8cb3bfc8200833c41e42141c4d045c22","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxYzMyYjRkOGNiM2JmYzgyMDA4MzNjNDFlNDIxNDFjNGQwNDVjMjI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-06-26T22:43:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-06-26T22:43:25Z"},"message":"OPENJPA-266 Allowing PreparedStatementManagerImpl to be extendable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7154005670b8b05d05e63b0ed573dc457a8ca05a","url":"https://api.github.com/repos/apache/openjpa/git/trees/7154005670b8b05d05e63b0ed573dc457a8ca05a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1c32b4d8cb3bfc8200833c41e42141c4d045c22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1c32b4d8cb3bfc8200833c41e42141c4d045c22","html_url":"https://github.com/apache/openjpa/commit/c1c32b4d8cb3bfc8200833c41e42141c4d045c22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1c32b4d8cb3bfc8200833c41e42141c4d045c22/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e65f53b43de6707db3515c17daa40a9103a558aa","url":"https://api.github.com/repos/apache/openjpa/commits/e65f53b43de6707db3515c17daa40a9103a558aa","html_url":"https://github.com/apache/openjpa/commit/e65f53b43de6707db3515c17daa40a9103a558aa"}]},{"sha":"49445edc837dd9793f9a97679e6a7181888d0f91","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5NDQ1ZWRjODM3ZGQ5NzkzZjlhOTc2NzllNmE3MTgxODg4ZDBmOTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-27T13:23:36Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-27T13:23:36Z"},"message":"OPENJPA-267. Test case for some basic MethodQL behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"762b09355f87619f803f55e8aab2e2d3036bad90","url":"https://api.github.com/repos/apache/openjpa/git/trees/762b09355f87619f803f55e8aab2e2d3036bad90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/49445edc837dd9793f9a97679e6a7181888d0f91","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/49445edc837dd9793f9a97679e6a7181888d0f91","html_url":"https://github.com/apache/openjpa/commit/49445edc837dd9793f9a97679e6a7181888d0f91","comments_url":"https://api.github.com/repos/apache/openjpa/commits/49445edc837dd9793f9a97679e6a7181888d0f91/comments","author":null,"committer":null,"parents":[{"sha":"c1c32b4d8cb3bfc8200833c41e42141c4d045c22","url":"https://api.github.com/repos/apache/openjpa/commits/c1c32b4d8cb3bfc8200833c41e42141c4d045c22","html_url":"https://github.com/apache/openjpa/commit/c1c32b4d8cb3bfc8200833c41e42141c4d045c22"}]},{"sha":"058c174bef04520e4801447716b5c9203567a56f","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1OGMxNzRiZWYwNDUyMGU0ODAxNDQ3NzE2YjVjOTIwMzU2N2E1NmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-06-27T18:36:38Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-06-27T18:36:38Z"},"message":"OPENJPA-269 Updating InformixDBDictionary\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551263 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac01a4b4a7890033c926706584169bc83ef5addb","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac01a4b4a7890033c926706584169bc83ef5addb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/058c174bef04520e4801447716b5c9203567a56f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/058c174bef04520e4801447716b5c9203567a56f","html_url":"https://github.com/apache/openjpa/commit/058c174bef04520e4801447716b5c9203567a56f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/058c174bef04520e4801447716b5c9203567a56f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"49445edc837dd9793f9a97679e6a7181888d0f91","url":"https://api.github.com/repos/apache/openjpa/commits/49445edc837dd9793f9a97679e6a7181888d0f91","html_url":"https://github.com/apache/openjpa/commit/49445edc837dd9793f9a97679e6a7181888d0f91"}]},{"sha":"f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzNGUyMmVmZTRkZmVmOTlmM2M5YWJlNmZjY2RiY2IzZjM3YWRiMmI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T10:52:24Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T10:52:24Z"},"message":"Added setUp() so that extending types don't need to always create one.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551844 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9a728d7d7c34ec3c9924747cc5b10b017acdc48","url":"https://api.github.com/repos/apache/openjpa/git/trees/e9a728d7d7c34ec3c9924747cc5b10b017acdc48"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b","html_url":"https://github.com/apache/openjpa/commit/f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b/comments","author":null,"committer":null,"parents":[{"sha":"058c174bef04520e4801447716b5c9203567a56f","url":"https://api.github.com/repos/apache/openjpa/commits/058c174bef04520e4801447716b5c9203567a56f","html_url":"https://github.com/apache/openjpa/commit/058c174bef04520e4801447716b5c9203567a56f"}]},{"sha":"5a23d0455d010e292433ab4b1a0ec4214dfb171c","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMjNkMDQ1NWQwMTBlMjkyNDMzYWI0YjFhMGVjNDIxNGRmYjE3MWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T10:53:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T10:53:05Z"},"message":"Improved error messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed12bcf18d95b959e08b8372cb9b6ef494fd4164","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed12bcf18d95b959e08b8372cb9b6ef494fd4164"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a23d0455d010e292433ab4b1a0ec4214dfb171c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a23d0455d010e292433ab4b1a0ec4214dfb171c","html_url":"https://github.com/apache/openjpa/commit/5a23d0455d010e292433ab4b1a0ec4214dfb171c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a23d0455d010e292433ab4b1a0ec4214dfb171c/comments","author":null,"committer":null,"parents":[{"sha":"f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b","url":"https://api.github.com/repos/apache/openjpa/commits/f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b","html_url":"https://github.com/apache/openjpa/commit/f34e22efe4dfef99f3c9abe6fccdbcb3f37adb2b"}]},{"sha":"ffdbc5ae9c3768807406413eda8a36cbc93db50d","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmZGJjNWFlOWMzNzY4ODA3NDA2NDEzZWRhOGEzNmNiYzkzZGI1MGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T11:04:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T11:04:51Z"},"message":"OPENJPA-262. Added transaction callback registry to BrokerFactory as well, to parallel lifecycle callback structure\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551849 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b7b42121e4f23f826d5f3e4892bfd2b879785e42","url":"https://api.github.com/repos/apache/openjpa/git/trees/b7b42121e4f23f826d5f3e4892bfd2b879785e42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d","html_url":"https://github.com/apache/openjpa/commit/ffdbc5ae9c3768807406413eda8a36cbc93db50d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d/comments","author":null,"committer":null,"parents":[{"sha":"5a23d0455d010e292433ab4b1a0ec4214dfb171c","url":"https://api.github.com/repos/apache/openjpa/commits/5a23d0455d010e292433ab4b1a0ec4214dfb171c","html_url":"https://github.com/apache/openjpa/commit/5a23d0455d010e292433ab4b1a0ec4214dfb171c"}]},{"sha":"1b9d1e2d1258b3147929e5b27bedc23714a32964","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOWQxZTJkMTI1OGIzMTQ3OTI5ZTViMjdiZWRjMjM3MTRhMzI5NjQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T13:18:26Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T13:18:26Z"},"message":"OPENJPA-262. Added test case for lifecycle and tx registries in BrokerFactories. Also discovered that BEFORE_PERSIST listeners (and possibly a couple of others) were not being invoked; fixed-by-inspection and simplified the registration of types in the lifecycle event handler.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551885 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b513d26d9b57781be708f5353e2d280475fc0c9b","url":"https://api.github.com/repos/apache/openjpa/git/trees/b513d26d9b57781be708f5353e2d280475fc0c9b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964","html_url":"https://github.com/apache/openjpa/commit/1b9d1e2d1258b3147929e5b27bedc23714a32964","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964/comments","author":null,"committer":null,"parents":[{"sha":"ffdbc5ae9c3768807406413eda8a36cbc93db50d","url":"https://api.github.com/repos/apache/openjpa/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d","html_url":"https://github.com/apache/openjpa/commit/ffdbc5ae9c3768807406413eda8a36cbc93db50d"}]},{"sha":"7db9a7fae5397c99d72efb63b018436a0294a151","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkYjlhN2ZhZTUzOTdjOTlkNzJlZmI2M2IwMTg0MzZhMDI5NGExNTE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-29T21:22:01Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-29T21:22:01Z"},"message":"OPENJPA-266, committing the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552039 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2279dd81463d18b60a059efc2963334e785a5aad","url":"https://api.github.com/repos/apache/openjpa/git/trees/2279dd81463d18b60a059efc2963334e785a5aad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7db9a7fae5397c99d72efb63b018436a0294a151","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7db9a7fae5397c99d72efb63b018436a0294a151","html_url":"https://github.com/apache/openjpa/commit/7db9a7fae5397c99d72efb63b018436a0294a151","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7db9a7fae5397c99d72efb63b018436a0294a151/comments","author":null,"committer":null,"parents":[{"sha":"1b9d1e2d1258b3147929e5b27bedc23714a32964","url":"https://api.github.com/repos/apache/openjpa/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964","html_url":"https://github.com/apache/openjpa/commit/1b9d1e2d1258b3147929e5b27bedc23714a32964"}]},{"sha":"5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjNGE4YzdlNzNlMzk5N2Y2OTk2OWYwYWUwMzE1ZGVlNTdiYzBhMjY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T23:08:41Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T23:08:41Z"},"message":"OPENJPA-70. Added new RemoteCommitEvent payload type and logic to fire RemoteCommitEvents when stale records are detected. This logic still gets fired via afterCommit(), even though these checks can happen either after a commit or a flush is issued. Additionally, these events are only fired against local listeners, so actually represent local analysis that is detecting remote events, rather than remote events themselves.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552059 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e8e73fd2128b4fc52b2cef93b8a81a0941e4be2","url":"https://api.github.com/repos/apache/openjpa/git/trees/5e8e73fd2128b4fc52b2cef93b8a81a0941e4be2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","html_url":"https://github.com/apache/openjpa/commit/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26/comments","author":null,"committer":null,"parents":[{"sha":"7db9a7fae5397c99d72efb63b018436a0294a151","url":"https://api.github.com/repos/apache/openjpa/commits/7db9a7fae5397c99d72efb63b018436a0294a151","html_url":"https://github.com/apache/openjpa/commit/7db9a7fae5397c99d72efb63b018436a0294a151"}]},{"sha":"9975362f1f43b4f1c7bea9d3fb02c27c03f098de","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5NzUzNjJmMWY0M2I0ZjFjN2JlYTlkM2ZiMDJjMjdjMDNmMDk4ZGU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-30T02:33:35Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-30T02:33:35Z"},"message":"OPENJPA-271, add DB2 JDBC driver 2 support\n- datePrecision set to MICRO, (Timesptamp in micro-second in DB2)\n- save version strategy in Column (needed for specialized TimestampVersionStrategy)\n- set storeCharsAsNumbers to false (DB2 default - store chars as chars)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552078 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b98a690d33ddaa1f1daf1af58af64cf144c1537b","url":"https://api.github.com/repos/apache/openjpa/git/trees/b98a690d33ddaa1f1daf1af58af64cf144c1537b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","html_url":"https://github.com/apache/openjpa/commit/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/comments","author":null,"committer":null,"parents":[{"sha":"5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","url":"https://api.github.com/repos/apache/openjpa/commits/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","html_url":"https://github.com/apache/openjpa/commit/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26"}]},{"sha":"0b356dfc0dc4e7e1a80e17801ded076e8173b5a7","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiMzU2ZGZjMGRjNGU3ZTFhODBlMTc4MDFkZWQwNzZlODE3M2I1YTc=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-30T03:52:46Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-30T03:52:46Z"},"message":"OPENJPA-271, add DB2 JDBC driver 2 support, add message key/text\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552095 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4cfb74daac61d2b824b2eb5b2c01d167df5930a","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4cfb74daac61d2b824b2eb5b2c01d167df5930a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b356dfc0dc4e7e1a80e17801ded076e8173b5a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b356dfc0dc4e7e1a80e17801ded076e8173b5a7","html_url":"https://github.com/apache/openjpa/commit/0b356dfc0dc4e7e1a80e17801ded076e8173b5a7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b356dfc0dc4e7e1a80e17801ded076e8173b5a7/comments","author":null,"committer":null,"parents":[{"sha":"9975362f1f43b4f1c7bea9d3fb02c27c03f098de","url":"https://api.github.com/repos/apache/openjpa/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","html_url":"https://github.com/apache/openjpa/commit/9975362f1f43b4f1c7bea9d3fb02c27c03f098de"}]},{"sha":"85b2e766cae4a55e9e32442cc889a56b8fee0d65","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1YjJlNzY2Y2FlNGE1NWU5ZTMyNDQyY2M4ODlhNTZiOGZlZTBkNjU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-01T19:37:04Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-01T19:37:04Z"},"message":"OPENJPA-239 Patch to support the generation of annotation mappings using the reverse mapping tool\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552358 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95160584bb5f2df5ee8ec661d1c3ee6eaf172bc3","url":"https://api.github.com/repos/apache/openjpa/git/trees/95160584bb5f2df5ee8ec661d1c3ee6eaf172bc3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85b2e766cae4a55e9e32442cc889a56b8fee0d65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85b2e766cae4a55e9e32442cc889a56b8fee0d65","html_url":"https://github.com/apache/openjpa/commit/85b2e766cae4a55e9e32442cc889a56b8fee0d65","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85b2e766cae4a55e9e32442cc889a56b8fee0d65/comments","author":null,"committer":null,"parents":[{"sha":"0b356dfc0dc4e7e1a80e17801ded076e8173b5a7","url":"https://api.github.com/repos/apache/openjpa/commits/0b356dfc0dc4e7e1a80e17801ded076e8173b5a7","html_url":"https://github.com/apache/openjpa/commit/0b356dfc0dc4e7e1a80e17801ded076e8173b5a7"}]},{"sha":"1bded00298c66f51c8814b6391c32e3721495ed2","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiZGVkMDAyOThjNjZmNTFjODgxNGI2MzkxYzMyZTM3MjE0OTVlZDI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-01T21:13:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-01T21:13:16Z"},"message":"OPENJPA-199. Passed all local tests; I have not run against the CTS though. It *should* work against the CTS, as it was a bug on our side, and not the spec's side.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e2d7b0fe6b22af4a8bdde4a1a7443d9c14ab400","url":"https://api.github.com/repos/apache/openjpa/git/trees/5e2d7b0fe6b22af4a8bdde4a1a7443d9c14ab400"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1bded00298c66f51c8814b6391c32e3721495ed2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1bded00298c66f51c8814b6391c32e3721495ed2","html_url":"https://github.com/apache/openjpa/commit/1bded00298c66f51c8814b6391c32e3721495ed2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1bded00298c66f51c8814b6391c32e3721495ed2/comments","author":null,"committer":null,"parents":[{"sha":"85b2e766cae4a55e9e32442cc889a56b8fee0d65","url":"https://api.github.com/repos/apache/openjpa/commits/85b2e766cae4a55e9e32442cc889a56b8fee0d65","html_url":"https://github.com/apache/openjpa/commit/85b2e766cae4a55e9e32442cc889a56b8fee0d65"}]},{"sha":"21909df2ecea737a475d2d18ec33712570dc832a","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxOTA5ZGYyZWNlYTczN2E0NzVkMmQxOGVjMzM3MTI1NzBkYzgzMmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-03T14:26:09Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-03T14:26:09Z"},"message":"Guarantee that remote commit events are fired against OpenJPA internal data structures before externally-registered listeners. This means that externally-registered listeners can rely on the OpenJPA data structures being up-to-date by the time that they are fired.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552850 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa5aed7a2218c063bc22964d8d3e0a239132fa24","url":"https://api.github.com/repos/apache/openjpa/git/trees/aa5aed7a2218c063bc22964d8d3e0a239132fa24"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/21909df2ecea737a475d2d18ec33712570dc832a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/21909df2ecea737a475d2d18ec33712570dc832a","html_url":"https://github.com/apache/openjpa/commit/21909df2ecea737a475d2d18ec33712570dc832a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/21909df2ecea737a475d2d18ec33712570dc832a/comments","author":null,"committer":null,"parents":[{"sha":"1bded00298c66f51c8814b6391c32e3721495ed2","url":"https://api.github.com/repos/apache/openjpa/commits/1bded00298c66f51c8814b6391c32e3721495ed2","html_url":"https://github.com/apache/openjpa/commit/1bded00298c66f51c8814b6391c32e3721495ed2"}]},{"sha":"0c517d163e355f85ca40673db15a991693bc2d4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjNTE3ZDE2M2UzNTVmODVjYTQwNjczZGIxNWE5OTE2OTNiYzJkNGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-03T21:55:29Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-03T21:55:29Z"},"message":"OPENJPA-244 committing on behalf of Albert\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552996 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e1001cf0c15158783b884647c149a9812ac0cd5","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e1001cf0c15158783b884647c149a9812ac0cd5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c517d163e355f85ca40673db15a991693bc2d4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c517d163e355f85ca40673db15a991693bc2d4a","html_url":"https://github.com/apache/openjpa/commit/0c517d163e355f85ca40673db15a991693bc2d4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c517d163e355f85ca40673db15a991693bc2d4a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"21909df2ecea737a475d2d18ec33712570dc832a","url":"https://api.github.com/repos/apache/openjpa/commits/21909df2ecea737a475d2d18ec33712570dc832a","html_url":"https://github.com/apache/openjpa/commit/21909df2ecea737a475d2d18ec33712570dc832a"}]},{"sha":"8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","node_id":"MDY6Q29tbWl0MjA2MzY0OjhiNWE3ZjY4YTAwMTZlN2Q1YjVhYzlhMWM5MTM3OTRkY2NkY2VjZDc=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-03T22:42:39Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-03T22:42:39Z"},"message":"OPENJPA-244 Fixed some formatting inconsistencies with the patch for OPENJPA-244\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553010 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9e663b846bbdfb0c6556e3a5657d78774d60efa","url":"https://api.github.com/repos/apache/openjpa/git/trees/e9e663b846bbdfb0c6556e3a5657d78774d60efa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","html_url":"https://github.com/apache/openjpa/commit/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/comments","author":null,"committer":null,"parents":[{"sha":"0c517d163e355f85ca40673db15a991693bc2d4a","url":"https://api.github.com/repos/apache/openjpa/commits/0c517d163e355f85ca40673db15a991693bc2d4a","html_url":"https://github.com/apache/openjpa/commit/0c517d163e355f85ca40673db15a991693bc2d4a"}]},{"sha":"e286a915d570b48956e93105bb84321a89659aad","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyODZhOTE1ZDU3MGI0ODk1NmU5MzEwNWJiODQzMjFhODk2NTlhYWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-05T20:51:01Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-05T20:51:01Z"},"message":"OPENJPA-278\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553629 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8e159336add0ae2c513da821c7d0446ecb689017","url":"https://api.github.com/repos/apache/openjpa/git/trees/8e159336add0ae2c513da821c7d0446ecb689017"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e286a915d570b48956e93105bb84321a89659aad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e286a915d570b48956e93105bb84321a89659aad","html_url":"https://github.com/apache/openjpa/commit/e286a915d570b48956e93105bb84321a89659aad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e286a915d570b48956e93105bb84321a89659aad/comments","author":null,"committer":null,"parents":[{"sha":"8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","url":"https://api.github.com/repos/apache/openjpa/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","html_url":"https://github.com/apache/openjpa/commit/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7"}]},{"sha":"d99571342fcb93179e63b217749bfac60ef85fe9","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5OTU3MTM0MmZjYjkzMTc5ZTYzYjIxNzc0OWJmYWM2MGVmODVmZTk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T14:48:02Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T14:48:02Z"},"message":"fixed typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553911 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"859aff812fb4a4ccf6b2f358fa8a3e9986a85ea1","url":"https://api.github.com/repos/apache/openjpa/git/trees/859aff812fb4a4ccf6b2f358fa8a3e9986a85ea1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d99571342fcb93179e63b217749bfac60ef85fe9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d99571342fcb93179e63b217749bfac60ef85fe9","html_url":"https://github.com/apache/openjpa/commit/d99571342fcb93179e63b217749bfac60ef85fe9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d99571342fcb93179e63b217749bfac60ef85fe9/comments","author":null,"committer":null,"parents":[{"sha":"e286a915d570b48956e93105bb84321a89659aad","url":"https://api.github.com/repos/apache/openjpa/commits/e286a915d570b48956e93105bb84321a89659aad","html_url":"https://github.com/apache/openjpa/commit/e286a915d570b48956e93105bb84321a89659aad"}]},{"sha":"774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3NGU3YjViOGMzYTA3ZWYwMWZkZWI1ZDM4ZjFjNGJiNTlkZGE5YjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T14:49:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T14:49:52Z"},"message":"OPENJPA-274, OPENJPA-275. Improved our bulk update support to automatically increment version counters as necessary if an UPDATE query does not maintain the version fields itself. Also fixed a bug with all queries involving version fields by changing FieldMappings representing version fields to return their owning ClassMapping's Version's columns from a getColumns() call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553912 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d9c65b95647d154d39544a41a42217191b152de","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d9c65b95647d154d39544a41a42217191b152de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","html_url":"https://github.com/apache/openjpa/commit/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/comments","author":null,"committer":null,"parents":[{"sha":"d99571342fcb93179e63b217749bfac60ef85fe9","url":"https://api.github.com/repos/apache/openjpa/commits/d99571342fcb93179e63b217749bfac60ef85fe9","html_url":"https://github.com/apache/openjpa/commit/d99571342fcb93179e63b217749bfac60ef85fe9"}]},{"sha":"0826b7a717cf3023b16a15da0d8da3e35522222d","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4MjZiN2E3MTdjZjMwMjNiMTZhMTVkYTBkOGRhM2UzNTUyMjIyMmQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-06T18:08:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-06T18:08:06Z"},"message":"OPENJPA-279\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8fa60cc46e951b467fa208a315810e155d82a44d","url":"https://api.github.com/repos/apache/openjpa/git/trees/8fa60cc46e951b467fa208a315810e155d82a44d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0826b7a717cf3023b16a15da0d8da3e35522222d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0826b7a717cf3023b16a15da0d8da3e35522222d","html_url":"https://github.com/apache/openjpa/commit/0826b7a717cf3023b16a15da0d8da3e35522222d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0826b7a717cf3023b16a15da0d8da3e35522222d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","url":"https://api.github.com/repos/apache/openjpa/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","html_url":"https://github.com/apache/openjpa/commit/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0"}]},{"sha":"2f5d52b7e703327cc6047b641d66e79f860c2bf0","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmNWQ1MmI3ZTcwMzMyN2NjNjA0N2I2NDFkNjZlNzlmODYwYzJiZjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T23:21:06Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T23:21:06Z"},"message":"OPENJPA-280. Committing for David Ezzio.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@554083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b9eec6925853312c545ae68a4155d3e3cfae4df","url":"https://api.github.com/repos/apache/openjpa/git/trees/9b9eec6925853312c545ae68a4155d3e3cfae4df"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2f5d52b7e703327cc6047b641d66e79f860c2bf0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2f5d52b7e703327cc6047b641d66e79f860c2bf0","html_url":"https://github.com/apache/openjpa/commit/2f5d52b7e703327cc6047b641d66e79f860c2bf0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2f5d52b7e703327cc6047b641d66e79f860c2bf0/comments","author":null,"committer":null,"parents":[{"sha":"0826b7a717cf3023b16a15da0d8da3e35522222d","url":"https://api.github.com/repos/apache/openjpa/commits/0826b7a717cf3023b16a15da0d8da3e35522222d","html_url":"https://github.com/apache/openjpa/commit/0826b7a717cf3023b16a15da0d8da3e35522222d"}]},{"sha":"124f615eb51b063bbf2856cd487d168b1da5f839","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyNGY2MTVlYjUxYjA2M2JiZjI4NTZjZDQ4N2QxNjhiMWRhNWY4Mzk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-07T01:47:21Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-07T01:47:21Z"},"message":"OPENJPA-280. Correcting my mistaken commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@554111 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c44da4fed28a8a3c7fedf71ef75266b810c2cd85","url":"https://api.github.com/repos/apache/openjpa/git/trees/c44da4fed28a8a3c7fedf71ef75266b810c2cd85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/124f615eb51b063bbf2856cd487d168b1da5f839","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/124f615eb51b063bbf2856cd487d168b1da5f839","html_url":"https://github.com/apache/openjpa/commit/124f615eb51b063bbf2856cd487d168b1da5f839","comments_url":"https://api.github.com/repos/apache/openjpa/commits/124f615eb51b063bbf2856cd487d168b1da5f839/comments","author":null,"committer":null,"parents":[{"sha":"2f5d52b7e703327cc6047b641d66e79f860c2bf0","url":"https://api.github.com/repos/apache/openjpa/commits/2f5d52b7e703327cc6047b641d66e79f860c2bf0","html_url":"https://github.com/apache/openjpa/commit/2f5d52b7e703327cc6047b641d66e79f860c2bf0"}]},{"sha":"50332f053a10efb0f223cc893a6d80a9f36a26da","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwMzMyZjA1M2ExMGVmYjBmMjIzY2M4OTNhNmQ4MGE5ZjM2YTI2ZGE=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-08T21:33:09Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-08T21:33:09Z"},"message":"first draft of OpenJPA July 2007 board report\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@554446 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6266c535eaab3ba4a7610a66bb9e27e72e6c1b0","url":"https://api.github.com/repos/apache/openjpa/git/trees/f6266c535eaab3ba4a7610a66bb9e27e72e6c1b0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/50332f053a10efb0f223cc893a6d80a9f36a26da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/50332f053a10efb0f223cc893a6d80a9f36a26da","html_url":"https://github.com/apache/openjpa/commit/50332f053a10efb0f223cc893a6d80a9f36a26da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/50332f053a10efb0f223cc893a6d80a9f36a26da/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"124f615eb51b063bbf2856cd487d168b1da5f839","url":"https://api.github.com/repos/apache/openjpa/commits/124f615eb51b063bbf2856cd487d168b1da5f839","html_url":"https://github.com/apache/openjpa/commit/124f615eb51b063bbf2856cd487d168b1da5f839"}]},{"sha":"dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmYmE0ZGZmN2Q5ZWU5NGE4NDY0YjVlNGI4YmU5YjJjNTgzOWJkZDQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-10T02:28:11Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-10T02:28:11Z"},"message":"OPENJPA-266, extensibility for platform specific version column\nPassed TCK with Derby\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@554803 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47822ff52fd5474fab0b030da08a1729765a9f04","url":"https://api.github.com/repos/apache/openjpa/git/trees/47822ff52fd5474fab0b030da08a1729765a9f04"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","html_url":"https://github.com/apache/openjpa/commit/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4/comments","author":null,"committer":null,"parents":[{"sha":"50332f053a10efb0f223cc893a6d80a9f36a26da","url":"https://api.github.com/repos/apache/openjpa/commits/50332f053a10efb0f223cc893a6d80a9f36a26da","html_url":"https://github.com/apache/openjpa/commit/50332f053a10efb0f223cc893a6d80a9f36a26da"}]},{"sha":"b0513545077e6040f601ca7424e00bdd7879f2b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwNTEzNTQ1MDc3ZTYwNDBmNjAxY2E3NDI0ZTAwYmRkNzg3OWYyYjI=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-11T15:03:08Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-11T15:03:08Z"},"message":"Added David Ezzio to report\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@555294 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2bcf125caa81a1d0345048b80c6d584631c8eb2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2bcf125caa81a1d0345048b80c6d584631c8eb2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b0513545077e6040f601ca7424e00bdd7879f2b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b0513545077e6040f601ca7424e00bdd7879f2b2","html_url":"https://github.com/apache/openjpa/commit/b0513545077e6040f601ca7424e00bdd7879f2b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b0513545077e6040f601ca7424e00bdd7879f2b2/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","url":"https://api.github.com/repos/apache/openjpa/commits/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4","html_url":"https://github.com/apache/openjpa/commit/dfba4dff7d9ee94a8464b5e4b8be9b2c5839bdd4"}]},{"sha":"6b6a4b57e4e40f39abc9d1793840b81e095323e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiNmE0YjU3ZTRlNDBmMzlhYmM5ZDE3OTM4NDBiODFlMDk1MzIzZTg=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-11T18:39:08Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-11T18:39:08Z"},"message":"Add product version checking for DB2 UDB ISeries V6R1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@555361 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3839ff3d974426c80e65cc8a59240de891ef6ffc","url":"https://api.github.com/repos/apache/openjpa/git/trees/3839ff3d974426c80e65cc8a59240de891ef6ffc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6b6a4b57e4e40f39abc9d1793840b81e095323e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6b6a4b57e4e40f39abc9d1793840b81e095323e8","html_url":"https://github.com/apache/openjpa/commit/6b6a4b57e4e40f39abc9d1793840b81e095323e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6b6a4b57e4e40f39abc9d1793840b81e095323e8/comments","author":null,"committer":null,"parents":[{"sha":"b0513545077e6040f601ca7424e00bdd7879f2b2","url":"https://api.github.com/repos/apache/openjpa/commits/b0513545077e6040f601ca7424e00bdd7879f2b2","html_url":"https://github.com/apache/openjpa/commit/b0513545077e6040f601ca7424e00bdd7879f2b2"}]},{"sha":"3408ef1e0c40231ad877c8e45b71ca7ae6f071f6","node_id":"MDY6Q29tbWl0MjA2MzY0OjM0MDhlZjFlMGM0MDIzMWFkODc3YzhlNDViNzFjYTdhZTZmMDcxZjY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-11T20:36:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-11T20:36:55Z"},"message":"New test case. It works already, so this is mostly just additional coverage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@555389 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"873db801f7a512dc129e7e1d989706c5be1a6f37","url":"https://api.github.com/repos/apache/openjpa/git/trees/873db801f7a512dc129e7e1d989706c5be1a6f37"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3408ef1e0c40231ad877c8e45b71ca7ae6f071f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3408ef1e0c40231ad877c8e45b71ca7ae6f071f6","html_url":"https://github.com/apache/openjpa/commit/3408ef1e0c40231ad877c8e45b71ca7ae6f071f6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3408ef1e0c40231ad877c8e45b71ca7ae6f071f6/comments","author":null,"committer":null,"parents":[{"sha":"6b6a4b57e4e40f39abc9d1793840b81e095323e8","url":"https://api.github.com/repos/apache/openjpa/commits/6b6a4b57e4e40f39abc9d1793840b81e095323e8","html_url":"https://github.com/apache/openjpa/commit/6b6a4b57e4e40f39abc9d1793840b81e095323e8"}]},{"sha":"4b6b578f2b4ea6b140f0e27007830a872ef10f89","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiNmI1NzhmMmI0ZWE2YjE0MGYwZTI3MDA3ODMwYTg3MmVmMTBmODk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-12T16:52:22Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-12T16:52:22Z"},"message":"OPENJPA_283. Committing Ignacio Andreu's patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@555694 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cff43304e28704dbab83c7f336aecb6f5f2263e","url":"https://api.github.com/repos/apache/openjpa/git/trees/5cff43304e28704dbab83c7f336aecb6f5f2263e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b6b578f2b4ea6b140f0e27007830a872ef10f89","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b6b578f2b4ea6b140f0e27007830a872ef10f89","html_url":"https://github.com/apache/openjpa/commit/4b6b578f2b4ea6b140f0e27007830a872ef10f89","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b6b578f2b4ea6b140f0e27007830a872ef10f89/comments","author":null,"committer":null,"parents":[{"sha":"3408ef1e0c40231ad877c8e45b71ca7ae6f071f6","url":"https://api.github.com/repos/apache/openjpa/commits/3408ef1e0c40231ad877c8e45b71ca7ae6f071f6","html_url":"https://github.com/apache/openjpa/commit/3408ef1e0c40231ad877c8e45b71ca7ae6f071f6"}]},{"sha":"96a7367ec5d9e68412eb6c7ddc9f9816c70217aa","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2YTczNjdlYzVkOWU2ODQxMmViNmM3ZGRjOWY5ODE2YzcwMjE3YWE=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-13T19:44:51Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-13T19:44:51Z"},"message":"Final update to Jul-2007 board report\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@556126 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eaeec393c5fc90751302aed20962476e78c67317","url":"https://api.github.com/repos/apache/openjpa/git/trees/eaeec393c5fc90751302aed20962476e78c67317"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/96a7367ec5d9e68412eb6c7ddc9f9816c70217aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/96a7367ec5d9e68412eb6c7ddc9f9816c70217aa","html_url":"https://github.com/apache/openjpa/commit/96a7367ec5d9e68412eb6c7ddc9f9816c70217aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/96a7367ec5d9e68412eb6c7ddc9f9816c70217aa/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"4b6b578f2b4ea6b140f0e27007830a872ef10f89","url":"https://api.github.com/repos/apache/openjpa/commits/4b6b578f2b4ea6b140f0e27007830a872ef10f89","html_url":"https://github.com/apache/openjpa/commit/4b6b578f2b4ea6b140f0e27007830a872ef10f89"}]},{"sha":"7d6c0afa45acb46d8120e1663e4c65b4900dd220","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkNmMwYWZhNDVhY2I0NmQ4MTIwZTE2NjNlNGM2NWI0OTAwZGQyMjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-15T08:03:34Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-15T08:03:34Z"},"message":"Minor reformatting\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@556371 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afa1ab2cf87c97b87c1379c20cd347fca22e4805","url":"https://api.github.com/repos/apache/openjpa/git/trees/afa1ab2cf87c97b87c1379c20cd347fca22e4805"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7d6c0afa45acb46d8120e1663e4c65b4900dd220","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7d6c0afa45acb46d8120e1663e4c65b4900dd220","html_url":"https://github.com/apache/openjpa/commit/7d6c0afa45acb46d8120e1663e4c65b4900dd220","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7d6c0afa45acb46d8120e1663e4c65b4900dd220/comments","author":null,"committer":null,"parents":[{"sha":"96a7367ec5d9e68412eb6c7ddc9f9816c70217aa","url":"https://api.github.com/repos/apache/openjpa/commits/96a7367ec5d9e68412eb6c7ddc9f9816c70217aa","html_url":"https://github.com/apache/openjpa/commit/96a7367ec5d9e68412eb6c7ddc9f9816c70217aa"}]},{"sha":"62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyYWU4M2YzYjVhMGVjYTY3YjVhNWM0YWU2Y2QwMWM0ZjZiM2FjMjM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-07-17T13:43:40Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-07-17T13:43:40Z"},"message":"Minor updates to help with translation and formatting of messages.  Items like removing contractions like \"can't\" and \"doesn't\".  Also, ensuring there are two single quotes for possive like \"Provider's\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@556926 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7ec662aa05265bc756f5f2bea0bb5419ef37a7b","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7ec662aa05265bc756f5f2bea0bb5419ef37a7b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23","html_url":"https://github.com/apache/openjpa/commit/62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23/comments","author":null,"committer":null,"parents":[{"sha":"7d6c0afa45acb46d8120e1663e4c65b4900dd220","url":"https://api.github.com/repos/apache/openjpa/commits/7d6c0afa45acb46d8120e1663e4c65b4900dd220","html_url":"https://github.com/apache/openjpa/commit/7d6c0afa45acb46d8120e1663e4c65b4900dd220"}]},{"sha":"b8bb8404a9c1da1dd22ac8b414f7496ee033acbd","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4YmI4NDA0YTljMWRhMWRkMjJhYzhiNDE0Zjc0OTZlZTAzM2FjYmQ=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-17T23:56:45Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-07-17T23:56:45Z"},"message":"OPENJPA-235 break-nullable-patch contributed by Markus Fuchs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557089 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"daef4e142379608172e05ebbf208b3c0fe4bea7a","url":"https://api.github.com/repos/apache/openjpa/git/trees/daef4e142379608172e05ebbf208b3c0fe4bea7a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b8bb8404a9c1da1dd22ac8b414f7496ee033acbd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b8bb8404a9c1da1dd22ac8b414f7496ee033acbd","html_url":"https://github.com/apache/openjpa/commit/b8bb8404a9c1da1dd22ac8b414f7496ee033acbd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b8bb8404a9c1da1dd22ac8b414f7496ee033acbd/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23","url":"https://api.github.com/repos/apache/openjpa/commits/62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23","html_url":"https://github.com/apache/openjpa/commit/62ae83f3b5a0eca67b5a5c4ae6cd01c4f6b3ac23"}]},{"sha":"25fbdab82bfa714ed3fded62d7322b0603fb6656","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1ZmJkYWI4MmJmYTcxNGVkM2ZkZWQ2MmQ3MzIyYjA2MDNmYjY2NTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-19T00:43:08Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-19T00:43:08Z"},"message":"updated README\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557436 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47f5513881fc1f2f8567f83b9817b9c12bb95945","url":"https://api.github.com/repos/apache/openjpa/git/trees/47f5513881fc1f2f8567f83b9817b9c12bb95945"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/25fbdab82bfa714ed3fded62d7322b0603fb6656","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/25fbdab82bfa714ed3fded62d7322b0603fb6656","html_url":"https://github.com/apache/openjpa/commit/25fbdab82bfa714ed3fded62d7322b0603fb6656","comments_url":"https://api.github.com/repos/apache/openjpa/commits/25fbdab82bfa714ed3fded62d7322b0603fb6656/comments","author":null,"committer":null,"parents":[{"sha":"b8bb8404a9c1da1dd22ac8b414f7496ee033acbd","url":"https://api.github.com/repos/apache/openjpa/commits/b8bb8404a9c1da1dd22ac8b414f7496ee033acbd","html_url":"https://github.com/apache/openjpa/commit/b8bb8404a9c1da1dd22ac8b414f7496ee033acbd"}]},{"sha":"a275b7aefb43a9de0e183cbaff5de9b0489e59e2","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyNzViN2FlZmI0M2E5ZGUwZTE4M2NiYWZmNWRlOWIwNDg5ZTU5ZTI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T00:45:51Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T00:45:51Z"},"message":"OPENJPA-240  XMLMapping Query support for persistent field maps to XML column.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557437 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de7ec6c0d1e33c1bba79ddb5f4085e299372b8eb","url":"https://api.github.com/repos/apache/openjpa/git/trees/de7ec6c0d1e33c1bba79ddb5f4085e299372b8eb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a275b7aefb43a9de0e183cbaff5de9b0489e59e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a275b7aefb43a9de0e183cbaff5de9b0489e59e2","html_url":"https://github.com/apache/openjpa/commit/a275b7aefb43a9de0e183cbaff5de9b0489e59e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a275b7aefb43a9de0e183cbaff5de9b0489e59e2/comments","author":null,"committer":null,"parents":[{"sha":"25fbdab82bfa714ed3fded62d7322b0603fb6656","url":"https://api.github.com/repos/apache/openjpa/commits/25fbdab82bfa714ed3fded62d7322b0603fb6656","html_url":"https://github.com/apache/openjpa/commit/25fbdab82bfa714ed3fded62d7322b0603fb6656"}]},{"sha":"b761732fdf60ee4207aaca6002e63f9dbf1bea84","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3NjE3MzJmZGY2MGVlNDIwN2FhY2E2MDAyZTYzZjlkYmYxYmVhODQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:07:53Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:07:53Z"},"message":"OPENJPA-240 XMLMapping Query testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"439afbb83a84527bf9f1c91184aa46d38c860dea","url":"https://api.github.com/repos/apache/openjpa/git/trees/439afbb83a84527bf9f1c91184aa46d38c860dea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84","html_url":"https://github.com/apache/openjpa/commit/b761732fdf60ee4207aaca6002e63f9dbf1bea84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84/comments","author":null,"committer":null,"parents":[{"sha":"a275b7aefb43a9de0e183cbaff5de9b0489e59e2","url":"https://api.github.com/repos/apache/openjpa/commits/a275b7aefb43a9de0e183cbaff5de9b0489e59e2","html_url":"https://github.com/apache/openjpa/commit/a275b7aefb43a9de0e183cbaff5de9b0489e59e2"}]},{"sha":"462cf31ed5e389054d0c57e9eb7f79f43023c000","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2MmNmMzFlZDVlMzg5MDU0ZDBjNTdlOWViN2Y3OWY0MzAyM2MwMDA=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:32:03Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:32:03Z"},"message":"OPENJPA-240 XMLMapping Query testcase - fix identation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557444 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb3b582e8c27b15f533931e097725eaccb708096","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb3b582e8c27b15f533931e097725eaccb708096"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000","html_url":"https://github.com/apache/openjpa/commit/462cf31ed5e389054d0c57e9eb7f79f43023c000","comments_url":"https://api.github.com/repos/apache/openjpa/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000/comments","author":null,"committer":null,"parents":[{"sha":"b761732fdf60ee4207aaca6002e63f9dbf1bea84","url":"https://api.github.com/repos/apache/openjpa/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84","html_url":"https://github.com/apache/openjpa/commit/b761732fdf60ee4207aaca6002e63f9dbf1bea84"}]},{"sha":"0260d8de471d132c570e33e747f01488272dd260","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNjBkOGRlNDcxZDEzMmM1NzBlMzNlNzQ3ZjAxNDg4MjcyZGQyNjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-07-19T20:13:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-07-19T20:13:32Z"},"message":"Making inner ConfigurationParser public for reuse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557761 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de3a49bb60eff76cf2c43627038d8b9570ce3fa2","url":"https://api.github.com/repos/apache/openjpa/git/trees/de3a49bb60eff76cf2c43627038d8b9570ce3fa2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0260d8de471d132c570e33e747f01488272dd260","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0260d8de471d132c570e33e747f01488272dd260","html_url":"https://github.com/apache/openjpa/commit/0260d8de471d132c570e33e747f01488272dd260","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0260d8de471d132c570e33e747f01488272dd260/comments","author":null,"committer":null,"parents":[{"sha":"462cf31ed5e389054d0c57e9eb7f79f43023c000","url":"https://api.github.com/repos/apache/openjpa/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000","html_url":"https://github.com/apache/openjpa/commit/462cf31ed5e389054d0c57e9eb7f79f43023c000"}]},{"sha":"1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjOWYwYWUwYWU5YzQ4NjFkOWYwMTgxYjNmMDE3NGRmZmI3ZWI4N2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-19T20:55:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-19T20:55:30Z"},"message":"OPENJPA-287\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557768 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba458d529df6e9f6beaa19f9e6eb4c90d4807b98","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba458d529df6e9f6beaa19f9e6eb4c90d4807b98"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","html_url":"https://github.com/apache/openjpa/commit/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0260d8de471d132c570e33e747f01488272dd260","url":"https://api.github.com/repos/apache/openjpa/commits/0260d8de471d132c570e33e747f01488272dd260","html_url":"https://github.com/apache/openjpa/commit/0260d8de471d132c570e33e747f01488272dd260"}]},{"sha":"f12af8d977ce4f637af7616895bc151b76e41ea6","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxMmFmOGQ5NzdjZTRmNjM3YWY3NjE2ODk1YmMxNTFiNzZlNDFlYTY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-07-19T22:32:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-07-19T22:32:26Z"},"message":"Adding BootstrapException that ProductDerivations recognize during beforeConfigurationConstruct()/load()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557798 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9679d875ab1117739d1d749c32687529230e95c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/9679d875ab1117739d1d749c32687529230e95c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f12af8d977ce4f637af7616895bc151b76e41ea6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f12af8d977ce4f637af7616895bc151b76e41ea6","html_url":"https://github.com/apache/openjpa/commit/f12af8d977ce4f637af7616895bc151b76e41ea6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f12af8d977ce4f637af7616895bc151b76e41ea6/comments","author":null,"committer":null,"parents":[{"sha":"1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","url":"https://api.github.com/repos/apache/openjpa/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","html_url":"https://github.com/apache/openjpa/commit/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a"}]},{"sha":"99950ad3ff9d4d9adbf104dab04f3a3e036e384f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5OTUwYWQzZmY5ZDRkOWFkYmYxMDRkYWIwNGYzYTNlMDM2ZTM4NGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-20T17:50:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-20T17:50:56Z"},"message":"OPENJPA-288 committing on behalf of Teresa\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a851592a6498d0602e7109d8c83a15161caea5a","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a851592a6498d0602e7109d8c83a15161caea5a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99950ad3ff9d4d9adbf104dab04f3a3e036e384f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99950ad3ff9d4d9adbf104dab04f3a3e036e384f","html_url":"https://github.com/apache/openjpa/commit/99950ad3ff9d4d9adbf104dab04f3a3e036e384f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99950ad3ff9d4d9adbf104dab04f3a3e036e384f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f12af8d977ce4f637af7616895bc151b76e41ea6","url":"https://api.github.com/repos/apache/openjpa/commits/f12af8d977ce4f637af7616895bc151b76e41ea6","html_url":"https://github.com/apache/openjpa/commit/f12af8d977ce4f637af7616895bc151b76e41ea6"}]},{"sha":"a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ZDFhY2Q0NGVjNmY5YTJhNDdkN2ZjZGEwNWJkNTFhZTlhYjlhODI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-20T19:17:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-20T19:17:19Z"},"message":"OPENJPA-284 committing on behalf of Teresa\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558097 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4315b8a0fd25a6fe540f7c6905ccae4559ec186","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4315b8a0fd25a6fe540f7c6905ccae4559ec186"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","html_url":"https://github.com/apache/openjpa/commit/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"99950ad3ff9d4d9adbf104dab04f3a3e036e384f","url":"https://api.github.com/repos/apache/openjpa/commits/99950ad3ff9d4d9adbf104dab04f3a3e036e384f","html_url":"https://github.com/apache/openjpa/commit/99950ad3ff9d4d9adbf104dab04f3a3e036e384f"}]},{"sha":"168c0076c819a99e91bd8782834987a5903cdfc5","node_id":"MDY6Q29tbWl0MjA2MzY0OjE2OGMwMDc2YzgxOWE5OWU5MWJkODc4MjgzNDk4N2E1OTAzY2RmYzU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-20T20:37:08Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-20T20:37:08Z"},"message":"OPENJPA-263 : Introducing getAll(List) method for data cache to be called by loadAll() \nwill allow data cache plug-ins to leverage the advantage of any third-party cache that\nprovides a way to get multiple object in one call by providing a list of keys (oids).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558125 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d6952be81b7d287ff3b942104bec893e2f9c7c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/d6952be81b7d287ff3b942104bec893e2f9c7c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/168c0076c819a99e91bd8782834987a5903cdfc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/168c0076c819a99e91bd8782834987a5903cdfc5","html_url":"https://github.com/apache/openjpa/commit/168c0076c819a99e91bd8782834987a5903cdfc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/168c0076c819a99e91bd8782834987a5903cdfc5/comments","author":null,"committer":null,"parents":[{"sha":"a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","url":"https://api.github.com/repos/apache/openjpa/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","html_url":"https://github.com/apache/openjpa/commit/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82"}]},{"sha":"9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb","node_id":"MDY6Q29tbWl0MjA2MzY0OjljZTBiZWQwOWQ0MmIzY2VmYTQwYTgwOTE2MDdlNjVlN2RkZjdhZWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-20T22:42:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-20T22:42:16Z"},"message":"Test that externalization of EnumSets works as expected.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558186 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa9f09878d0f6fd8a53804f26d1caff54602dfeb","url":"https://api.github.com/repos/apache/openjpa/git/trees/aa9f09878d0f6fd8a53804f26d1caff54602dfeb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb","html_url":"https://github.com/apache/openjpa/commit/9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb/comments","author":null,"committer":null,"parents":[{"sha":"168c0076c819a99e91bd8782834987a5903cdfc5","url":"https://api.github.com/repos/apache/openjpa/commits/168c0076c819a99e91bd8782834987a5903cdfc5","html_url":"https://github.com/apache/openjpa/commit/168c0076c819a99e91bd8782834987a5903cdfc5"}]},{"sha":"e2556dd6b2567ac13f838ebf796d40c228eb6dd5","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyNTU2ZGQ2YjI1NjdhYzEzZjgzOGViZjc5NmQ0MGMyMjhlYjZkZDU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-20T23:03:21Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-20T23:03:21Z"},"message":"Test that @ContainerTable annotation is properly read.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558191 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0e8f5d6922a748369c3613548b59e42e8b11edb","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0e8f5d6922a748369c3613548b59e42e8b11edb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e2556dd6b2567ac13f838ebf796d40c228eb6dd5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e2556dd6b2567ac13f838ebf796d40c228eb6dd5","html_url":"https://github.com/apache/openjpa/commit/e2556dd6b2567ac13f838ebf796d40c228eb6dd5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e2556dd6b2567ac13f838ebf796d40c228eb6dd5/comments","author":null,"committer":null,"parents":[{"sha":"9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb","url":"https://api.github.com/repos/apache/openjpa/commits/9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb","html_url":"https://github.com/apache/openjpa/commit/9ce0bed09d42b3cefa40a8091607e65e7ddf7aeb"}]},{"sha":"a5ed9f701dcb37ffd020e5333bcd0c28b26d650d","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ZWQ5ZjcwMWRjYjM3ZmZkMDIwZTUzMzNiY2QwYzI4YjI2ZDY1MGQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-21T01:25:48Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-21T01:25:48Z"},"message":"OPENJPA-240 XMLMapping Query support,  fix eol delimiters to unix style\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558221 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8dabb15caad1618c1eb83423e4aef04f60da1f8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8dabb15caad1618c1eb83423e4aef04f60da1f8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5ed9f701dcb37ffd020e5333bcd0c28b26d650d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5ed9f701dcb37ffd020e5333bcd0c28b26d650d","html_url":"https://github.com/apache/openjpa/commit/a5ed9f701dcb37ffd020e5333bcd0c28b26d650d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5ed9f701dcb37ffd020e5333bcd0c28b26d650d/comments","author":null,"committer":null,"parents":[{"sha":"e2556dd6b2567ac13f838ebf796d40c228eb6dd5","url":"https://api.github.com/repos/apache/openjpa/commits/e2556dd6b2567ac13f838ebf796d40c228eb6dd5","html_url":"https://github.com/apache/openjpa/commit/e2556dd6b2567ac13f838ebf796d40c228eb6dd5"}]},{"sha":"19dc613dd0ad379cb2806fc7dcf16992c43da66c","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5ZGM2MTNkZDBhZDM3OWNiMjgwNmZjN2RjZjE2OTkyYzQzZGE2NmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-23T18:03:04Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-23T18:03:04Z"},"message":"Reset sequencetable for TestTableGenerator\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558815 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf05022f854c041b57d546f3c4a64bf7333f3ed5","url":"https://api.github.com/repos/apache/openjpa/git/trees/cf05022f854c041b57d546f3c4a64bf7333f3ed5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/19dc613dd0ad379cb2806fc7dcf16992c43da66c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/19dc613dd0ad379cb2806fc7dcf16992c43da66c","html_url":"https://github.com/apache/openjpa/commit/19dc613dd0ad379cb2806fc7dcf16992c43da66c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/19dc613dd0ad379cb2806fc7dcf16992c43da66c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a5ed9f701dcb37ffd020e5333bcd0c28b26d650d","url":"https://api.github.com/repos/apache/openjpa/commits/a5ed9f701dcb37ffd020e5333bcd0c28b26d650d","html_url":"https://github.com/apache/openjpa/commit/a5ed9f701dcb37ffd020e5333bcd0c28b26d650d"}]},{"sha":"126ed03a3b7bc4c66fa50c867a760c9fd6d37380","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyNmVkMDNhM2I3YmM0YzY2ZmE1MGM4NjdhNzYwYzlmZDZkMzczODA=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-23T22:19:28Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-23T22:19:28Z"},"message":"OPENJPA-266 process dbdictionaryPlugin values for vendor specific DB Dictionary.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558881 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34a51c290454c5348dbaf54eecd2c91690b6cc62","url":"https://api.github.com/repos/apache/openjpa/git/trees/34a51c290454c5348dbaf54eecd2c91690b6cc62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","html_url":"https://github.com/apache/openjpa/commit/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","comments_url":"https://api.github.com/repos/apache/openjpa/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380/comments","author":null,"committer":null,"parents":[{"sha":"19dc613dd0ad379cb2806fc7dcf16992c43da66c","url":"https://api.github.com/repos/apache/openjpa/commits/19dc613dd0ad379cb2806fc7dcf16992c43da66c","html_url":"https://github.com/apache/openjpa/commit/19dc613dd0ad379cb2806fc7dcf16992c43da66c"}]},{"sha":"9316b8157d3d5c3f91bf9612c944dc462198cb5b","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzMTZiODE1N2QzZDVjM2Y5MWJmOTYxMmM5NDRkYzQ2MjE5OGNiNWI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T19:40:09Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T19:40:09Z"},"message":"OPENJPA-240 XMLMapping Query - rename XMLMetaData to XMLFieldMetaData\nHelp Catalina committing changes for renaming classes, part 1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559172 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f074810c1f6c472f4e7b34d0606dcf8fe49c9e48","url":"https://api.github.com/repos/apache/openjpa/git/trees/f074810c1f6c472f4e7b34d0606dcf8fe49c9e48"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9316b8157d3d5c3f91bf9612c944dc462198cb5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9316b8157d3d5c3f91bf9612c944dc462198cb5b","html_url":"https://github.com/apache/openjpa/commit/9316b8157d3d5c3f91bf9612c944dc462198cb5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9316b8157d3d5c3f91bf9612c944dc462198cb5b/comments","author":null,"committer":null,"parents":[{"sha":"126ed03a3b7bc4c66fa50c867a760c9fd6d37380","url":"https://api.github.com/repos/apache/openjpa/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","html_url":"https://github.com/apache/openjpa/commit/126ed03a3b7bc4c66fa50c867a760c9fd6d37380"}]},{"sha":"c70b70b30f95f27bd7352b0eb92b79b39444662a","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3MGI3MGIzMGY5NWYyN2JkNzM1MmIwZWI5MmI3OWIzOTQ0NDY2MmE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T19:51:19Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T19:51:19Z"},"message":"OPENJPA-240 XMLMapping Query - rename XMLMapping interface to XMLMetaData\nHelp Catalina committing changes for renaming classes, part 2.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559179 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"004c981d87c31f4eac96f7bd97bc95f791db0b2f","url":"https://api.github.com/repos/apache/openjpa/git/trees/004c981d87c31f4eac96f7bd97bc95f791db0b2f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c70b70b30f95f27bd7352b0eb92b79b39444662a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c70b70b30f95f27bd7352b0eb92b79b39444662a","html_url":"https://github.com/apache/openjpa/commit/c70b70b30f95f27bd7352b0eb92b79b39444662a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c70b70b30f95f27bd7352b0eb92b79b39444662a/comments","author":null,"committer":null,"parents":[{"sha":"9316b8157d3d5c3f91bf9612c944dc462198cb5b","url":"https://api.github.com/repos/apache/openjpa/commits/9316b8157d3d5c3f91bf9612c944dc462198cb5b","html_url":"https://github.com/apache/openjpa/commit/9316b8157d3d5c3f91bf9612c944dc462198cb5b"}]},{"sha":"e634400c112155152e0229334cb5094ddbb5bdc2","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2MzQ0MDBjMTEyMTU1MTUyZTAyMjkzMzRjYjUwOTRkZGJiNWJkYzI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T20:09:32Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T20:09:32Z"},"message":"OPENJPA-240 XMLMapping Query - move XMLFieldMetaData & XMLMetaData close to XMLClassMetaData\nHelp Catalina committing changes for renaming classes, part 3.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559187 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7f5955976c269f3fe71e5aa60b3ac275a586739a","url":"https://api.github.com/repos/apache/openjpa/git/trees/7f5955976c269f3fe71e5aa60b3ac275a586739a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e634400c112155152e0229334cb5094ddbb5bdc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e634400c112155152e0229334cb5094ddbb5bdc2","html_url":"https://github.com/apache/openjpa/commit/e634400c112155152e0229334cb5094ddbb5bdc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e634400c112155152e0229334cb5094ddbb5bdc2/comments","author":null,"committer":null,"parents":[{"sha":"c70b70b30f95f27bd7352b0eb92b79b39444662a","url":"https://api.github.com/repos/apache/openjpa/commits/c70b70b30f95f27bd7352b0eb92b79b39444662a","html_url":"https://github.com/apache/openjpa/commit/c70b70b30f95f27bd7352b0eb92b79b39444662a"}]},{"sha":"502d6488de4dcf3035a47f05a52e9ee34681482b","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwMmQ2NDg4ZGU0ZGNmMzAzNWE0N2YwNWE1MmU5ZWUzNDY4MTQ4MmI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T20:13:00Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-24T20:13:00Z"},"message":"OPENJPA-240 XMLMapping Query - undo move XMLFieldMetaData & XMLMetaData close to XMLClassMetaData\nHelp Catalina committing changes for renaming classes, part 4.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559188 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"004c981d87c31f4eac96f7bd97bc95f791db0b2f","url":"https://api.github.com/repos/apache/openjpa/git/trees/004c981d87c31f4eac96f7bd97bc95f791db0b2f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/502d6488de4dcf3035a47f05a52e9ee34681482b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/502d6488de4dcf3035a47f05a52e9ee34681482b","html_url":"https://github.com/apache/openjpa/commit/502d6488de4dcf3035a47f05a52e9ee34681482b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/502d6488de4dcf3035a47f05a52e9ee34681482b/comments","author":null,"committer":null,"parents":[{"sha":"e634400c112155152e0229334cb5094ddbb5bdc2","url":"https://api.github.com/repos/apache/openjpa/commits/e634400c112155152e0229334cb5094ddbb5bdc2","html_url":"https://github.com/apache/openjpa/commit/e634400c112155152e0229334cb5094ddbb5bdc2"}]},{"sha":"092729c11c78b2f04206db04a8f2ababd40eadea","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5MjcyOWMxMWM3OGIyZjA0MjA2ZGIwNGE4ZjJhYmFiZDQwZWFkZWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T08:32:38Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T08:32:38Z"},"message":"Test case for selecting enum values into a new managed instance.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559353 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b7a9b0ea66af5d447068cb56690fe1b865d224d","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b7a9b0ea66af5d447068cb56690fe1b865d224d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/092729c11c78b2f04206db04a8f2ababd40eadea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/092729c11c78b2f04206db04a8f2ababd40eadea","html_url":"https://github.com/apache/openjpa/commit/092729c11c78b2f04206db04a8f2ababd40eadea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/092729c11c78b2f04206db04a8f2ababd40eadea/comments","author":null,"committer":null,"parents":[{"sha":"502d6488de4dcf3035a47f05a52e9ee34681482b","url":"https://api.github.com/repos/apache/openjpa/commits/502d6488de4dcf3035a47f05a52e9ee34681482b","html_url":"https://github.com/apache/openjpa/commit/502d6488de4dcf3035a47f05a52e9ee34681482b"}]},{"sha":"b50530274b695420b35c1119df83b6720b78321d","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1MDUzMDI3NGI2OTU0MjBiMzVjMTExOWRmODNiNjcyMGI3ODMyMWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:04:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:04:27Z"},"message":"Simple test case for in-memory remote commit provider.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bd0198fd911d3afecef46da6ae7e60468883f4b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/bd0198fd911d3afecef46da6ae7e60468883f4b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b50530274b695420b35c1119df83b6720b78321d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b50530274b695420b35c1119df83b6720b78321d","html_url":"https://github.com/apache/openjpa/commit/b50530274b695420b35c1119df83b6720b78321d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b50530274b695420b35c1119df83b6720b78321d/comments","author":null,"committer":null,"parents":[{"sha":"092729c11c78b2f04206db04a8f2ababd40eadea","url":"https://api.github.com/repos/apache/openjpa/commits/092729c11c78b2f04206db04a8f2ababd40eadea","html_url":"https://github.com/apache/openjpa/commit/092729c11c78b2f04206db04a8f2ababd40eadea"}]},{"sha":"dbf7ab273e954f11b4b89052483ad7d652604320","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiZjdhYjI3M2U5NTRmMTFiNGI4OTA1MjQ4M2FkN2Q2NTI2MDQzMjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:30:59Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:30:59Z"},"message":"Simple test case for lifecycle listener support.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559515 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"111f3ff60619de23ee003635335e9b7127d28c80","url":"https://api.github.com/repos/apache/openjpa/git/trees/111f3ff60619de23ee003635335e9b7127d28c80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dbf7ab273e954f11b4b89052483ad7d652604320","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dbf7ab273e954f11b4b89052483ad7d652604320","html_url":"https://github.com/apache/openjpa/commit/dbf7ab273e954f11b4b89052483ad7d652604320","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dbf7ab273e954f11b4b89052483ad7d652604320/comments","author":null,"committer":null,"parents":[{"sha":"b50530274b695420b35c1119df83b6720b78321d","url":"https://api.github.com/repos/apache/openjpa/commits/b50530274b695420b35c1119df83b6720b78321d","html_url":"https://github.com/apache/openjpa/commit/b50530274b695420b35c1119df83b6720b78321d"}]},{"sha":"3ddd88b576b4531b96a96e963d6c5f6fb69fa51c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkZGQ4OGI1NzZiNDUzMWI5NmE5NmU5NjNkNmM1ZjZmYjY5ZmE1MWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:49:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T16:49:44Z"},"message":"Removed unneeded imports.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559521 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21536a32bb5b7553c7d646a7b7e05539bd5aaf01","url":"https://api.github.com/repos/apache/openjpa/git/trees/21536a32bb5b7553c7d646a7b7e05539bd5aaf01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3ddd88b576b4531b96a96e963d6c5f6fb69fa51c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3ddd88b576b4531b96a96e963d6c5f6fb69fa51c","html_url":"https://github.com/apache/openjpa/commit/3ddd88b576b4531b96a96e963d6c5f6fb69fa51c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3ddd88b576b4531b96a96e963d6c5f6fb69fa51c/comments","author":null,"committer":null,"parents":[{"sha":"dbf7ab273e954f11b4b89052483ad7d652604320","url":"https://api.github.com/repos/apache/openjpa/commits/dbf7ab273e954f11b4b89052483ad7d652604320","html_url":"https://github.com/apache/openjpa/commit/dbf7ab273e954f11b4b89052483ad7d652604320"}]},{"sha":"7a6a81d713316ade9771ac825db7ccaaa16d1283","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhNmE4MWQ3MTMzMTZhZGU5NzcxYWM4MjVkYjdjY2FhYTE2ZDEyODM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T17:56:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T17:56:20Z"},"message":"Attempt to resolve high-load UUIDGenerator problem. I was not able to reproduce the issue, but code inspection seems to indicate that this fix should work.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559540 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd6d6237460f7824ad126cc05f75a2f861c23344","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd6d6237460f7824ad126cc05f75a2f861c23344"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7a6a81d713316ade9771ac825db7ccaaa16d1283","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7a6a81d713316ade9771ac825db7ccaaa16d1283","html_url":"https://github.com/apache/openjpa/commit/7a6a81d713316ade9771ac825db7ccaaa16d1283","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7a6a81d713316ade9771ac825db7ccaaa16d1283/comments","author":null,"committer":null,"parents":[{"sha":"3ddd88b576b4531b96a96e963d6c5f6fb69fa51c","url":"https://api.github.com/repos/apache/openjpa/commits/3ddd88b576b4531b96a96e963d6c5f6fb69fa51c","html_url":"https://github.com/apache/openjpa/commit/3ddd88b576b4531b96a96e963d6c5f6fb69fa51c"}]},{"sha":"6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiNDVkNmVkOTY4ZjBlNGQ4YWExZDcxYWU1ODdlZTg3MjBjZmMxMTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T20:48:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-25T20:48:05Z"},"message":"fixed incorrect method name\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@559600 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d282d18aa64b91a8c90d6e5b9c7a90eaaaf3fa8","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d282d18aa64b91a8c90d6e5b9c7a90eaaaf3fa8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110","html_url":"https://github.com/apache/openjpa/commit/6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110/comments","author":null,"committer":null,"parents":[{"sha":"7a6a81d713316ade9771ac825db7ccaaa16d1283","url":"https://api.github.com/repos/apache/openjpa/commits/7a6a81d713316ade9771ac825db7ccaaa16d1283","html_url":"https://github.com/apache/openjpa/commit/7a6a81d713316ade9771ac825db7ccaaa16d1283"}]},{"sha":"747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0NzIyNmIxZDZkYzZkNTdmZDI4MzMyYjRjMmE0YjBjNGFkN2E1OWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-26T22:08:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-26T22:08:37Z"},"message":"OPENJPA-293. All tests pass, but only because we don't currently test Java 5 + redefinition (only Java 5 + no redef). We need a new version of serp (1.13.1) to support that configuration; the new version has not yet made it into ibiblio.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560016 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b55eb4b18ccb2b0767ebce7456dd901add10e5d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b55eb4b18ccb2b0767ebce7456dd901add10e5d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","html_url":"https://github.com/apache/openjpa/commit/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c/comments","author":null,"committer":null,"parents":[{"sha":"6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110","url":"https://api.github.com/repos/apache/openjpa/commits/6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110","html_url":"https://github.com/apache/openjpa/commit/6b45d6ed968f0e4d8aa1d71ae587ee8720cfc110"}]},{"sha":"8c1710ed6376296daf967b32a7f48332ec1f3654","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMTcxMGVkNjM3NjI5NmRhZjk2N2IzMmE3ZjQ4MzMyZWMxZjM2NTQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T16:26:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T16:26:52Z"},"message":"OPENJPA-297\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560304 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"92e54152fe413c822924d046d02811959d93de92","url":"https://api.github.com/repos/apache/openjpa/git/trees/92e54152fe413c822924d046d02811959d93de92"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c1710ed6376296daf967b32a7f48332ec1f3654","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c1710ed6376296daf967b32a7f48332ec1f3654","html_url":"https://github.com/apache/openjpa/commit/8c1710ed6376296daf967b32a7f48332ec1f3654","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c1710ed6376296daf967b32a7f48332ec1f3654/comments","author":null,"committer":null,"parents":[{"sha":"747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","url":"https://api.github.com/repos/apache/openjpa/commits/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","html_url":"https://github.com/apache/openjpa/commit/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c"}]},{"sha":"8586e0fef3bf69757db2a9c27aaff91270ed1785","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1ODZlMGZlZjNiZjY5NzU3ZGIyYTljMjdhYWZmOTEyNzBlZDE3ODU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-27T17:38:24Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-27T17:38:24Z"},"message":"OPENJPA-240 add XMLMapping documentation to ref_guide_mapping.xml\nCommitting Catalina's openjpa-project.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560330 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b50558fb727e8172c46f1c1cc2382c5936b2f7b","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b50558fb727e8172c46f1c1cc2382c5936b2f7b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8586e0fef3bf69757db2a9c27aaff91270ed1785","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8586e0fef3bf69757db2a9c27aaff91270ed1785","html_url":"https://github.com/apache/openjpa/commit/8586e0fef3bf69757db2a9c27aaff91270ed1785","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8586e0fef3bf69757db2a9c27aaff91270ed1785/comments","author":null,"committer":null,"parents":[{"sha":"8c1710ed6376296daf967b32a7f48332ec1f3654","url":"https://api.github.com/repos/apache/openjpa/commits/8c1710ed6376296daf967b32a7f48332ec1f3654","html_url":"https://github.com/apache/openjpa/commit/8c1710ed6376296daf967b32a7f48332ec1f3654"}]},{"sha":"58533057a0aa95e53342c4a3ed9c50dfed859a44","node_id":"MDY6Q29tbWl0MjA2MzY0OjU4NTMzMDU3YTBhYTk1ZTUzMzQyYzRhM2VkOWM1MGRmZWQ4NTlhNDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T18:18:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T18:18:10Z"},"message":"OPENJPA-298\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560342 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7690c2163ddb42dfd286c68a973ee1ab26177850","url":"https://api.github.com/repos/apache/openjpa/git/trees/7690c2163ddb42dfd286c68a973ee1ab26177850"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44","html_url":"https://github.com/apache/openjpa/commit/58533057a0aa95e53342c4a3ed9c50dfed859a44","comments_url":"https://api.github.com/repos/apache/openjpa/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44/comments","author":null,"committer":null,"parents":[{"sha":"8586e0fef3bf69757db2a9c27aaff91270ed1785","url":"https://api.github.com/repos/apache/openjpa/commits/8586e0fef3bf69757db2a9c27aaff91270ed1785","html_url":"https://github.com/apache/openjpa/commit/8586e0fef3bf69757db2a9c27aaff91270ed1785"}]},{"sha":"9f6b7039976805d2b95793992e9c2ef84025b80a","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmNmI3MDM5OTc2ODA1ZDJiOTU3OTM5OTJlOWMyZWY4NDAyNWI4MGE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-27T19:46:58Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-27T19:46:58Z"},"message":"Changed 'PrimitiveWrapper.valueOf()' to 'new PrimitiveWrapper', since the valueOf() method is new as of JDK 1.5.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560364 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc0e73a7ec1a3e5376919a33a075b3cde2311b4f","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc0e73a7ec1a3e5376919a33a075b3cde2311b4f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f6b7039976805d2b95793992e9c2ef84025b80a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f6b7039976805d2b95793992e9c2ef84025b80a","html_url":"https://github.com/apache/openjpa/commit/9f6b7039976805d2b95793992e9c2ef84025b80a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f6b7039976805d2b95793992e9c2ef84025b80a/comments","author":null,"committer":null,"parents":[{"sha":"58533057a0aa95e53342c4a3ed9c50dfed859a44","url":"https://api.github.com/repos/apache/openjpa/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44","html_url":"https://github.com/apache/openjpa/commit/58533057a0aa95e53342c4a3ed9c50dfed859a44"}]},{"sha":"b83db9322909051f0253d0fc5ec754f7afe0cbce","node_id":"MDY6Q29tbWl0MjA2MzY0OmI4M2RiOTMyMjkwOTA1MWYwMjUzZDBmYzVlYzc1NGY3YWZlMGNiY2U=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-27T19:59:35Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-27T19:59:35Z"},"message":"Removed mention of 'openjpa.Configuration' logging channel, since it does not exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560367 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd18588e4433c531f7ac7302412b0a3fc099a00f","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd18588e4433c531f7ac7302412b0a3fc099a00f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b83db9322909051f0253d0fc5ec754f7afe0cbce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b83db9322909051f0253d0fc5ec754f7afe0cbce","html_url":"https://github.com/apache/openjpa/commit/b83db9322909051f0253d0fc5ec754f7afe0cbce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b83db9322909051f0253d0fc5ec754f7afe0cbce/comments","author":null,"committer":null,"parents":[{"sha":"9f6b7039976805d2b95793992e9c2ef84025b80a","url":"https://api.github.com/repos/apache/openjpa/commits/9f6b7039976805d2b95793992e9c2ef84025b80a","html_url":"https://github.com/apache/openjpa/commit/9f6b7039976805d2b95793992e9c2ef84025b80a"}]},{"sha":"0243702b35421949b0353d3b08de04cfcdec7fea","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNDM3MDJiMzU0MjE5NDliMDM1M2QzYjA4ZGUwNGNmY2RlYzdmZWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-28T19:53:13Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-28T19:53:13Z"},"message":"OPENJPA-293. Fixed problem with transactional state maintenance that was preventing lifecycle tests from passing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560601 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d184b4e87c445b851e00d0b5b248f704ceb4614c","url":"https://api.github.com/repos/apache/openjpa/git/trees/d184b4e87c445b851e00d0b5b248f704ceb4614c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0243702b35421949b0353d3b08de04cfcdec7fea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0243702b35421949b0353d3b08de04cfcdec7fea","html_url":"https://github.com/apache/openjpa/commit/0243702b35421949b0353d3b08de04cfcdec7fea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0243702b35421949b0353d3b08de04cfcdec7fea/comments","author":null,"committer":null,"parents":[{"sha":"b83db9322909051f0253d0fc5ec754f7afe0cbce","url":"https://api.github.com/repos/apache/openjpa/commits/b83db9322909051f0253d0fc5ec754f7afe0cbce","html_url":"https://github.com/apache/openjpa/commit/b83db9322909051f0253d0fc5ec754f7afe0cbce"}]},{"sha":"61c0800712155ce4f0422dfc2edf0c74dbf517c7","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxYzA4MDA3MTIxNTVjZTRmMDQyMmRmYzJlZGYwYzc0ZGJmNTE3Yzc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-29T03:52:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-29T03:52:05Z"},"message":"allow username info to be passed in to deploy step\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560665 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f68e3c753d3dfd4cdd877c6f931726fca700062","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f68e3c753d3dfd4cdd877c6f931726fca700062"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61c0800712155ce4f0422dfc2edf0c74dbf517c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61c0800712155ce4f0422dfc2edf0c74dbf517c7","html_url":"https://github.com/apache/openjpa/commit/61c0800712155ce4f0422dfc2edf0c74dbf517c7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61c0800712155ce4f0422dfc2edf0c74dbf517c7/comments","author":null,"committer":null,"parents":[{"sha":"0243702b35421949b0353d3b08de04cfcdec7fea","url":"https://api.github.com/repos/apache/openjpa/commits/0243702b35421949b0353d3b08de04cfcdec7fea","html_url":"https://github.com/apache/openjpa/commit/0243702b35421949b0353d3b08de04cfcdec7fea"}]},{"sha":"ffec0204a14cd23d0e271c746353102dee681e1b","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmZWMwMjA0YTE0Y2QyM2QwZTI3MWM3NDYzNTMxMDJkZWU2ODFlMWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-30T15:48:14Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-30T15:48:14Z"},"message":"Make it possible to run the TCK in various enhancement modes via system properties.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561022 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"765d191516516f93b89c5c68ed1493a2a0a64714","url":"https://api.github.com/repos/apache/openjpa/git/trees/765d191516516f93b89c5c68ed1493a2a0a64714"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffec0204a14cd23d0e271c746353102dee681e1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffec0204a14cd23d0e271c746353102dee681e1b","html_url":"https://github.com/apache/openjpa/commit/ffec0204a14cd23d0e271c746353102dee681e1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffec0204a14cd23d0e271c746353102dee681e1b/comments","author":null,"committer":null,"parents":[{"sha":"61c0800712155ce4f0422dfc2edf0c74dbf517c7","url":"https://api.github.com/repos/apache/openjpa/commits/61c0800712155ce4f0422dfc2edf0c74dbf517c7","html_url":"https://github.com/apache/openjpa/commit/61c0800712155ce4f0422dfc2edf0c74dbf517c7"}]},{"sha":"2bc4c4a5526bcf90de8a552f4feaf389a603af9f","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiYzRjNGE1NTI2YmNmOTBkZThhNTUyZjRmZWFmMzg5YTYwM2FmOWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-30T22:54:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-30T22:54:54Z"},"message":"Code cleanup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31da4c8aa4dfc84654021c81e96102d4d15c9e6a","url":"https://api.github.com/repos/apache/openjpa/git/trees/31da4c8aa4dfc84654021c81e96102d4d15c9e6a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2bc4c4a5526bcf90de8a552f4feaf389a603af9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2bc4c4a5526bcf90de8a552f4feaf389a603af9f","html_url":"https://github.com/apache/openjpa/commit/2bc4c4a5526bcf90de8a552f4feaf389a603af9f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2bc4c4a5526bcf90de8a552f4feaf389a603af9f/comments","author":null,"committer":null,"parents":[{"sha":"ffec0204a14cd23d0e271c746353102dee681e1b","url":"https://api.github.com/repos/apache/openjpa/commits/ffec0204a14cd23d0e271c746353102dee681e1b","html_url":"https://github.com/apache/openjpa/commit/ffec0204a14cd23d0e271c746353102dee681e1b"}]},{"sha":"872d00888d786f97f027946f59cd9c1962487fec","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3MmQwMDg4OGQ3ODZmOTdmMDI3OTQ2ZjU5Y2Q5YzE5NjI0ODdmZWM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-07-31T15:43:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-07-31T15:43:39Z"},"message":"OPENJPA-304.  Changes to DepthFirstAnalysis and associated classes and testcases to resolve IBM JDK and Sun JDK differences.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80edc57dbc3718d17c2414c7feb5fa1f6d53fb10","url":"https://api.github.com/repos/apache/openjpa/git/trees/80edc57dbc3718d17c2414c7feb5fa1f6d53fb10"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/872d00888d786f97f027946f59cd9c1962487fec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/872d00888d786f97f027946f59cd9c1962487fec","html_url":"https://github.com/apache/openjpa/commit/872d00888d786f97f027946f59cd9c1962487fec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/872d00888d786f97f027946f59cd9c1962487fec/comments","author":null,"committer":null,"parents":[{"sha":"2bc4c4a5526bcf90de8a552f4feaf389a603af9f","url":"https://api.github.com/repos/apache/openjpa/commits/2bc4c4a5526bcf90de8a552f4feaf389a603af9f","html_url":"https://github.com/apache/openjpa/commit/2bc4c4a5526bcf90de8a552f4feaf389a603af9f"}]},{"sha":"7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjYTQ2Y2Y2OWQ2M2M2ZTIxZjk0OTVlY2U3MGU3ZGQ2YjIxMGM3ZTI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T16:19:24Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T16:19:24Z"},"message":"OPENJPA-240 XMLMapping Query - refactoring JAXB XML annotaion parser\nHelp Catalina committing OPENJPA-240.r560665.patch for refactoring JAXB XML annotation parser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561376 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63bf22a264a73ac7ad74e13b518774a7ef858dbf","url":"https://api.github.com/repos/apache/openjpa/git/trees/63bf22a264a73ac7ad74e13b518774a7ef858dbf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","html_url":"https://github.com/apache/openjpa/commit/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/comments","author":null,"committer":null,"parents":[{"sha":"872d00888d786f97f027946f59cd9c1962487fec","url":"https://api.github.com/repos/apache/openjpa/commits/872d00888d786f97f027946f59cd9c1962487fec","html_url":"https://github.com/apache/openjpa/commit/872d00888d786f97f027946f59cd9c1962487fec"}]},{"sha":"a1d28857fa6cff6a6374b5f10d747b8538af9cdf","node_id":"MDY6Q29tbWl0MjA2MzY0OmExZDI4ODU3ZmE2Y2ZmNmE2Mzc0YjVmMTBkNzQ3Yjg1MzhhZjljZGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-31T17:32:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-31T17:32:01Z"},"message":"OPENJPA-303 committing on behalf of Albert\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6459c9ea1fef693901f18f20586fa740d0c830a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6459c9ea1fef693901f18f20586fa740d0c830a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","html_url":"https://github.com/apache/openjpa/commit/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","url":"https://api.github.com/repos/apache/openjpa/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","html_url":"https://github.com/apache/openjpa/commit/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2"}]},{"sha":"6128ddbc2d8477628e08c53363657f71b6fcca1a","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxMjhkZGJjMmQ4NDc3NjI4ZTA4YzUzMzYzNjU3ZjcxYjZmY2NhMWE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T18:01:19Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T18:01:19Z"},"message":"OPENJPA-266 load platform specific DBDictionary from dbdictionaryPlugin\nHelp committing Catalina's DBDictionaryFactory.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561413 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c685216c52fa4290ddba745b03507300d12f0ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c685216c52fa4290ddba745b03507300d12f0ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a","html_url":"https://github.com/apache/openjpa/commit/6128ddbc2d8477628e08c53363657f71b6fcca1a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a/comments","author":null,"committer":null,"parents":[{"sha":"a1d28857fa6cff6a6374b5f10d747b8538af9cdf","url":"https://api.github.com/repos/apache/openjpa/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","html_url":"https://github.com/apache/openjpa/commit/a1d28857fa6cff6a6374b5f10d747b8538af9cdf"}]},{"sha":"f61968f30255063c02971f041a0111e5dcf84220","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2MTk2OGYzMDI1NTA2M2MwMjk3MWYwNDFhMDExMWU1ZGNmODQyMjA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-01T21:55:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-01T21:55:44Z"},"message":"OPENJPA-285.  I am going ahead with the integration of Kevan's patches for the two memory leaks found in OpenJPA while testing Geronimo.  I will post more details in the Issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2333d04a3c4aeb81d057e994190a5558b8ab78e3","url":"https://api.github.com/repos/apache/openjpa/git/trees/2333d04a3c4aeb81d057e994190a5558b8ab78e3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f61968f30255063c02971f041a0111e5dcf84220","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f61968f30255063c02971f041a0111e5dcf84220","html_url":"https://github.com/apache/openjpa/commit/f61968f30255063c02971f041a0111e5dcf84220","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f61968f30255063c02971f041a0111e5dcf84220/comments","author":null,"committer":null,"parents":[{"sha":"6128ddbc2d8477628e08c53363657f71b6fcca1a","url":"https://api.github.com/repos/apache/openjpa/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a","html_url":"https://github.com/apache/openjpa/commit/6128ddbc2d8477628e08c53363657f71b6fcca1a"}]},{"sha":"97b94f6aa90375ea6f39533144e4bf9477813a01","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3Yjk0ZjZhYTkwMzc1ZWE2ZjM5NTMzMTQ0ZTRiZjk0Nzc4MTNhMDE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-02T03:51:38Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-02T03:51:38Z"},"message":"OPENJPA256 this class differs from most plugins in that the plugin type is the standard java interface Map.class (rather than an openjpa-specific interface), which means that the ClassLoader used to load the implementation will be the system class loader; this presents a problem if OpenJPA is not in the system classpath, so work around the problem by catching the IllegalArgumentException (which is what we wrap the ClassNotFoundException in) and try again, this time using this class' ClassLoader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1aa2700a91560879b1417cdd2ef9228b4542c19e","url":"https://api.github.com/repos/apache/openjpa/git/trees/1aa2700a91560879b1417cdd2ef9228b4542c19e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/97b94f6aa90375ea6f39533144e4bf9477813a01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/97b94f6aa90375ea6f39533144e4bf9477813a01","html_url":"https://github.com/apache/openjpa/commit/97b94f6aa90375ea6f39533144e4bf9477813a01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/97b94f6aa90375ea6f39533144e4bf9477813a01/comments","author":null,"committer":null,"parents":[{"sha":"f61968f30255063c02971f041a0111e5dcf84220","url":"https://api.github.com/repos/apache/openjpa/commits/f61968f30255063c02971f041a0111e5dcf84220","html_url":"https://github.com/apache/openjpa/commit/f61968f30255063c02971f041a0111e5dcf84220"}]},{"sha":"17ecf6753a58c57389d13c87de235c1ee5aa5a3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3ZWNmNjc1M2E1OGM1NzM4OWQxM2M4N2RlMjM1YzFlZTVhYTVhM2M=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-02T17:58:37Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-02T17:58:37Z"},"message":"Fixed test case to first check to see if any CREATE TABLE statement was issued at all. If not, then the database might already have created the TemporalFieldTypes table, in which case the validation assertions of the temporal column types will fail.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562206 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c31830be3bf379640bb3efdcc21538216556de4","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c31830be3bf379640bb3efdcc21538216556de4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/17ecf6753a58c57389d13c87de235c1ee5aa5a3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/17ecf6753a58c57389d13c87de235c1ee5aa5a3c","html_url":"https://github.com/apache/openjpa/commit/17ecf6753a58c57389d13c87de235c1ee5aa5a3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/17ecf6753a58c57389d13c87de235c1ee5aa5a3c/comments","author":null,"committer":null,"parents":[{"sha":"97b94f6aa90375ea6f39533144e4bf9477813a01","url":"https://api.github.com/repos/apache/openjpa/commits/97b94f6aa90375ea6f39533144e4bf9477813a01","html_url":"https://github.com/apache/openjpa/commit/97b94f6aa90375ea6f39533144e4bf9477813a01"}]},{"sha":"a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4ZmM4ZGZhNzY5YjIxYmJlNDUzNGI0YTRlNjI3NDZmN2QxZjliYTE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-02T20:33:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-02T20:33:18Z"},"message":"OPENJPA-295 improved testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562244 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2039195deedd1d063733aa3036ccc1a64cd2600f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2039195deedd1d063733aa3036ccc1a64cd2600f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","html_url":"https://github.com/apache/openjpa/commit/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"17ecf6753a58c57389d13c87de235c1ee5aa5a3c","url":"https://api.github.com/repos/apache/openjpa/commits/17ecf6753a58c57389d13c87de235c1ee5aa5a3c","html_url":"https://github.com/apache/openjpa/commit/17ecf6753a58c57389d13c87de235c1ee5aa5a3c"}]},{"sha":"60d4f7cd70dd150c0ec96f84ed371d9e1c691547","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwZDRmN2NkNzBkZDE1MGMwZWM5NmY4NGVkMzcxZDllMWM2OTE1NDc=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-08-03T04:45:44Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-08-03T04:45:44Z"},"message":"Draft board report for August\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2cd83a00bcb1d62465f131530a6210c0fe0e366","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2cd83a00bcb1d62465f131530a6210c0fe0e366"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/60d4f7cd70dd150c0ec96f84ed371d9e1c691547","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/60d4f7cd70dd150c0ec96f84ed371d9e1c691547","html_url":"https://github.com/apache/openjpa/commit/60d4f7cd70dd150c0ec96f84ed371d9e1c691547","comments_url":"https://api.github.com/repos/apache/openjpa/commits/60d4f7cd70dd150c0ec96f84ed371d9e1c691547/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","url":"https://api.github.com/repos/apache/openjpa/commits/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1","html_url":"https://github.com/apache/openjpa/commit/a8fc8dfa769b21bbe4534b4a4e62746f7d1f9ba1"}]},{"sha":"4150e7f566680cf07ab70a58faa6b12f26b6574a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxNTBlN2Y1NjY2ODBjZjA3YWI3MGE1OGZhYTZiMTJmMjZiNjU3NGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-03T17:35:54Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-03T17:35:54Z"},"message":"OPENJPA-295\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60ea16f7ea14249f49b2b7ebf568703c3891eec4","url":"https://api.github.com/repos/apache/openjpa/git/trees/60ea16f7ea14249f49b2b7ebf568703c3891eec4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a","html_url":"https://github.com/apache/openjpa/commit/4150e7f566680cf07ab70a58faa6b12f26b6574a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"60d4f7cd70dd150c0ec96f84ed371d9e1c691547","url":"https://api.github.com/repos/apache/openjpa/commits/60d4f7cd70dd150c0ec96f84ed371d9e1c691547","html_url":"https://github.com/apache/openjpa/commit/60d4f7cd70dd150c0ec96f84ed371d9e1c691547"}]},{"sha":"3c17af735143df69f6bfbc49c028f5b152405c31","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjMTdhZjczNTE0M2RmNjlmNmJmYmM0OWMwMjhmNWIxNTI0MDVjMzE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-08-03T21:17:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-08-03T21:17:24Z"},"message":"Fatal Bootstarp exception raised by any ProductDerivation will abandon bootstrapping process\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562584 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34eebed879921bee38b2c769a60a147a48ec967a","url":"https://api.github.com/repos/apache/openjpa/git/trees/34eebed879921bee38b2c769a60a147a48ec967a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3c17af735143df69f6bfbc49c028f5b152405c31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3c17af735143df69f6bfbc49c028f5b152405c31","html_url":"https://github.com/apache/openjpa/commit/3c17af735143df69f6bfbc49c028f5b152405c31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3c17af735143df69f6bfbc49c028f5b152405c31/comments","author":null,"committer":null,"parents":[{"sha":"4150e7f566680cf07ab70a58faa6b12f26b6574a","url":"https://api.github.com/repos/apache/openjpa/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a","html_url":"https://github.com/apache/openjpa/commit/4150e7f566680cf07ab70a58faa6b12f26b6574a"}]},{"sha":"a361f6a148d5d352f21e72c282052ac2e266805c","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzNjFmNmExNDhkNWQzNTJmMjFlNzJjMjgyMDUyYWMyZTI2NjgwNWM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-03T23:38:34Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-03T23:38:34Z"},"message":"Changed exception message to show the version id (e.g., 1.0.0-SNAPSHOT-r12345), rather than redundant version status string that had been output (e.g., 1.0.0-SNAPSHOT-SNAPSHOT).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562615 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3eb4b137d867e623971f00980b30d719243f24d6","url":"https://api.github.com/repos/apache/openjpa/git/trees/3eb4b137d867e623971f00980b30d719243f24d6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a361f6a148d5d352f21e72c282052ac2e266805c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a361f6a148d5d352f21e72c282052ac2e266805c","html_url":"https://github.com/apache/openjpa/commit/a361f6a148d5d352f21e72c282052ac2e266805c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a361f6a148d5d352f21e72c282052ac2e266805c/comments","author":null,"committer":null,"parents":[{"sha":"3c17af735143df69f6bfbc49c028f5b152405c31","url":"https://api.github.com/repos/apache/openjpa/commits/3c17af735143df69f6bfbc49c028f5b152405c31","html_url":"https://github.com/apache/openjpa/commit/3c17af735143df69f6bfbc49c028f5b152405c31"}]},{"sha":"17fcd0021173ca14645cc82027102c354f825193","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3ZmNkMDAyMTE3M2NhMTQ2NDVjYzgyMDI3MTAyYzM1NGY4MjUxOTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-04T20:25:35Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-04T20:25:35Z"},"message":"Minor docs clarification.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562760 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b757e9e8e9106a530a3ed65317d5ee9436366266","url":"https://api.github.com/repos/apache/openjpa/git/trees/b757e9e8e9106a530a3ed65317d5ee9436366266"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/17fcd0021173ca14645cc82027102c354f825193","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/17fcd0021173ca14645cc82027102c354f825193","html_url":"https://github.com/apache/openjpa/commit/17fcd0021173ca14645cc82027102c354f825193","comments_url":"https://api.github.com/repos/apache/openjpa/commits/17fcd0021173ca14645cc82027102c354f825193/comments","author":null,"committer":null,"parents":[{"sha":"a361f6a148d5d352f21e72c282052ac2e266805c","url":"https://api.github.com/repos/apache/openjpa/commits/a361f6a148d5d352f21e72c282052ac2e266805c","html_url":"https://github.com/apache/openjpa/commit/a361f6a148d5d352f21e72c282052ac2e266805c"}]},{"sha":"890d16047e3b1feabfd12134168589feb8bc13d2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5MGQxNjA0N2UzYjFmZWFiZmQxMjEzNDE2ODU4OWZlYjhiYzEzZDI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:20:10Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:20:10Z"},"message":"Just a couple of new testcases that I used to debug some problems recently.  Turned out to be non-issues, but I thought the testcases still might be worthwhile to have in our bucket.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"850809986217a8904bb8e05f96c522cb3b8d02a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/850809986217a8904bb8e05f96c522cb3b8d02a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/890d16047e3b1feabfd12134168589feb8bc13d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/890d16047e3b1feabfd12134168589feb8bc13d2","html_url":"https://github.com/apache/openjpa/commit/890d16047e3b1feabfd12134168589feb8bc13d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/890d16047e3b1feabfd12134168589feb8bc13d2/comments","author":null,"committer":null,"parents":[{"sha":"17fcd0021173ca14645cc82027102c354f825193","url":"https://api.github.com/repos/apache/openjpa/commits/17fcd0021173ca14645cc82027102c354f825193","html_url":"https://github.com/apache/openjpa/commit/17fcd0021173ca14645cc82027102c354f825193"}]},{"sha":"c34fb4e80ef3597fc11c72640cc80d222d1fe282","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzNGZiNGU4MGVmMzU5N2ZjMTFjNzI2NDBjYzgwZDIyMmQxZmUyODI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:30:08Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:30:08Z"},"message":"OPENJPA-281.  Committing the patch that I posted earlier this week.  These changes do the proper eager loading of @Basic types.  Along with a new testcase and updated AllFieldTypes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562986 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"879c88f45d9f35fdfb3db4bb06e1916b6edf5c60","url":"https://api.github.com/repos/apache/openjpa/git/trees/879c88f45d9f35fdfb3db4bb06e1916b6edf5c60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282","html_url":"https://github.com/apache/openjpa/commit/c34fb4e80ef3597fc11c72640cc80d222d1fe282","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282/comments","author":null,"committer":null,"parents":[{"sha":"890d16047e3b1feabfd12134168589feb8bc13d2","url":"https://api.github.com/repos/apache/openjpa/commits/890d16047e3b1feabfd12134168589feb8bc13d2","html_url":"https://github.com/apache/openjpa/commit/890d16047e3b1feabfd12134168589feb8bc13d2"}]},{"sha":"9382677eb148b417ae0328330e858cb6396c1a4c","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzODI2NzdlYjE0OGI0MTdhZTAzMjgzMzBlODU4Y2I2Mzk2YzFhNGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:34:06Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:34:06Z"},"message":"OPENJPA-272.  Committing the changes to allow @GeneratedValue to detect and report if initial values and/or setters were called on fields marked with @GeneratedValue.  New testcases were also provided.\n\nAlso had to update an existing testcase (TestSharedMappedSuperclassIdValue) and associated Entities because it was breaking the contract put in place.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b48e75efa9ac839c14927faca4567e6606c2354","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b48e75efa9ac839c14927faca4567e6606c2354"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9382677eb148b417ae0328330e858cb6396c1a4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9382677eb148b417ae0328330e858cb6396c1a4c","html_url":"https://github.com/apache/openjpa/commit/9382677eb148b417ae0328330e858cb6396c1a4c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9382677eb148b417ae0328330e858cb6396c1a4c/comments","author":null,"committer":null,"parents":[{"sha":"c34fb4e80ef3597fc11c72640cc80d222d1fe282","url":"https://api.github.com/repos/apache/openjpa/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282","html_url":"https://github.com/apache/openjpa/commit/c34fb4e80ef3597fc11c72640cc80d222d1fe282"}]},{"sha":"156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1NmE3ZmZkZDBiNzZmZDAwZDhmMzFmNzYzNzE3ZDczYTJlN2ZiNmE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T05:53:17Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T05:53:17Z"},"message":"OPENJPA240 applied patch by Catalina Wei to remove static dependency on JAXB classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563031 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3df344a7c976ec0328816d6bbb4a1bd99c923dbb","url":"https://api.github.com/repos/apache/openjpa/git/trees/3df344a7c976ec0328816d6bbb4a1bd99c923dbb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","html_url":"https://github.com/apache/openjpa/commit/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a/comments","author":null,"committer":null,"parents":[{"sha":"9382677eb148b417ae0328330e858cb6396c1a4c","url":"https://api.github.com/repos/apache/openjpa/commits/9382677eb148b417ae0328330e858cb6396c1a4c","html_url":"https://github.com/apache/openjpa/commit/9382677eb148b417ae0328330e858cb6396c1a4c"}]},{"sha":"a5010b4a788bfddea3bb5de7cf791fe39e549828","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1MDEwYjRhNzg4YmZkZGVhM2JiNWRlN2NmNzkxZmUzOWU1NDk4Mjg=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T15:52:55Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T15:52:55Z"},"message":"OPENJPA240 fixed to use JavaVersions.isEnumeration rather than Class.isEnum (which is not available in JDK 1.4)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563175 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"406d0839f7b9fa3aa52511d6e7b5bd2070672838","url":"https://api.github.com/repos/apache/openjpa/git/trees/406d0839f7b9fa3aa52511d6e7b5bd2070672838"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5010b4a788bfddea3bb5de7cf791fe39e549828","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5010b4a788bfddea3bb5de7cf791fe39e549828","html_url":"https://github.com/apache/openjpa/commit/a5010b4a788bfddea3bb5de7cf791fe39e549828","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5010b4a788bfddea3bb5de7cf791fe39e549828/comments","author":null,"committer":null,"parents":[{"sha":"156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","url":"https://api.github.com/repos/apache/openjpa/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","html_url":"https://github.com/apache/openjpa/commit/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a"}]},{"sha":"e466dee5f960aa7f989f87d6e9b6387708efe5e1","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0NjZkZWU1Zjk2MGFhN2Y5ODlmODdkNmU5YjYzODc3MDhlZmU1ZTE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T16:48:10Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T16:48:10Z"},"message":"OPENJPA240 added missing null check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563184 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d1e883755604cbcbda364804918e3860a6f5b62c","url":"https://api.github.com/repos/apache/openjpa/git/trees/d1e883755604cbcbda364804918e3860a6f5b62c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e466dee5f960aa7f989f87d6e9b6387708efe5e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e466dee5f960aa7f989f87d6e9b6387708efe5e1","html_url":"https://github.com/apache/openjpa/commit/e466dee5f960aa7f989f87d6e9b6387708efe5e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e466dee5f960aa7f989f87d6e9b6387708efe5e1/comments","author":null,"committer":null,"parents":[{"sha":"a5010b4a788bfddea3bb5de7cf791fe39e549828","url":"https://api.github.com/repos/apache/openjpa/commits/a5010b4a788bfddea3bb5de7cf791fe39e549828","html_url":"https://github.com/apache/openjpa/commit/a5010b4a788bfddea3bb5de7cf791fe39e549828"}]},{"sha":"dd1ea2703283aa3ba4795f00b19a994e7ef9db11","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkMWVhMjcwMzI4M2FhM2JhNDc5NWYwMGIxOWE5OTRlN2VmOWRiMTE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T17:04:29Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T17:04:29Z"},"message":"OPENJPA240 added missing null check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563192 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf2fb6b076c8ce7069804807df558b28c35b597b","url":"https://api.github.com/repos/apache/openjpa/git/trees/cf2fb6b076c8ce7069804807df558b28c35b597b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dd1ea2703283aa3ba4795f00b19a994e7ef9db11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dd1ea2703283aa3ba4795f00b19a994e7ef9db11","html_url":"https://github.com/apache/openjpa/commit/dd1ea2703283aa3ba4795f00b19a994e7ef9db11","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dd1ea2703283aa3ba4795f00b19a994e7ef9db11/comments","author":null,"committer":null,"parents":[{"sha":"e466dee5f960aa7f989f87d6e9b6387708efe5e1","url":"https://api.github.com/repos/apache/openjpa/commits/e466dee5f960aa7f989f87d6e9b6387708efe5e1","html_url":"https://github.com/apache/openjpa/commit/e466dee5f960aa7f989f87d6e9b6387708efe5e1"}]},{"sha":"d5ef5d1f3db5251683f1888da5353fb765584fe2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1ZWY1ZDFmM2RiNTI1MTY4M2YxODg4ZGE1MzUzZmI3NjU1ODRmZTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T00:16:08Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T00:16:08Z"},"message":"OPENJPA-308\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563355 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59289544c41e9a00a66c836022b1effb58cd64a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/59289544c41e9a00a66c836022b1effb58cd64a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d5ef5d1f3db5251683f1888da5353fb765584fe2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d5ef5d1f3db5251683f1888da5353fb765584fe2","html_url":"https://github.com/apache/openjpa/commit/d5ef5d1f3db5251683f1888da5353fb765584fe2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d5ef5d1f3db5251683f1888da5353fb765584fe2/comments","author":null,"committer":null,"parents":[{"sha":"dd1ea2703283aa3ba4795f00b19a994e7ef9db11","url":"https://api.github.com/repos/apache/openjpa/commits/dd1ea2703283aa3ba4795f00b19a994e7ef9db11","html_url":"https://github.com/apache/openjpa/commit/dd1ea2703283aa3ba4795f00b19a994e7ef9db11"}]},{"sha":"0b1b37dbbaa60d6fc732fc1a580388786009449f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiMWIzN2RiYmFhNjBkNmZjNzMyZmMxYTU4MDM4ODc4NjAwOTQ0OWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T00:19:53Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T00:19:53Z"},"message":"feedback from Bill Pugh of FindBugs fame\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563357 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb1bbc4a84b9d0baec8354411515b1388ee3fe8b","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb1bbc4a84b9d0baec8354411515b1388ee3fe8b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b1b37dbbaa60d6fc732fc1a580388786009449f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b1b37dbbaa60d6fc732fc1a580388786009449f","html_url":"https://github.com/apache/openjpa/commit/0b1b37dbbaa60d6fc732fc1a580388786009449f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b1b37dbbaa60d6fc732fc1a580388786009449f/comments","author":null,"committer":null,"parents":[{"sha":"d5ef5d1f3db5251683f1888da5353fb765584fe2","url":"https://api.github.com/repos/apache/openjpa/commits/d5ef5d1f3db5251683f1888da5353fb765584fe2","html_url":"https://github.com/apache/openjpa/commit/d5ef5d1f3db5251683f1888da5353fb765584fe2"}]},{"sha":"79c7b280d3cf397fb5527420a12565fd2c2b99b6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5YzdiMjgwZDNjZjM5N2ZiNTUyNzQyMGExMjU2NWZkMmMyYjk5YjY=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-07T03:03:58Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-07T03:03:58Z"},"message":"OPENJPA-240 check null before adding field meta\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563377 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec3f46a43858778dd89be968a80f0182c7db9b49","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec3f46a43858778dd89be968a80f0182c7db9b49"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/79c7b280d3cf397fb5527420a12565fd2c2b99b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/79c7b280d3cf397fb5527420a12565fd2c2b99b6","html_url":"https://github.com/apache/openjpa/commit/79c7b280d3cf397fb5527420a12565fd2c2b99b6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/79c7b280d3cf397fb5527420a12565fd2c2b99b6/comments","author":null,"committer":null,"parents":[{"sha":"0b1b37dbbaa60d6fc732fc1a580388786009449f","url":"https://api.github.com/repos/apache/openjpa/commits/0b1b37dbbaa60d6fc732fc1a580388786009449f","html_url":"https://github.com/apache/openjpa/commit/0b1b37dbbaa60d6fc732fc1a580388786009449f"}]},{"sha":"09e13c4ad887fbcec2532d175e6f761f1fe5b72e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5ZTEzYzRhZDg4N2ZiY2VjMjUzMmQxNzVlNmY3NjFmMWZlNWI3MmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T20:59:39Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T20:59:39Z"},"message":"Minor final-field change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563654 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a86429fe63d5ebcfda67c90ef777ef16777dda8","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a86429fe63d5ebcfda67c90ef777ef16777dda8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/09e13c4ad887fbcec2532d175e6f761f1fe5b72e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/09e13c4ad887fbcec2532d175e6f761f1fe5b72e","html_url":"https://github.com/apache/openjpa/commit/09e13c4ad887fbcec2532d175e6f761f1fe5b72e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/09e13c4ad887fbcec2532d175e6f761f1fe5b72e/comments","author":null,"committer":null,"parents":[{"sha":"79c7b280d3cf397fb5527420a12565fd2c2b99b6","url":"https://api.github.com/repos/apache/openjpa/commits/79c7b280d3cf397fb5527420a12565fd2c2b99b6","html_url":"https://github.com/apache/openjpa/commit/79c7b280d3cf397fb5527420a12565fd2c2b99b6"}]},{"sha":"fa39addf827a6ef14492389574e89055906efd49","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhMzlhZGRmODI3YTZlZjE0NDkyMzg5NTc0ZTg5MDU1OTA2ZWZkNDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T21:16:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T21:16:55Z"},"message":"Prevent this class from attempting to build its schema when using a database that doesn't support XML datatypes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28b4a463c3d5e4203cbe97fbe107e9e5759a7638","url":"https://api.github.com/repos/apache/openjpa/git/trees/28b4a463c3d5e4203cbe97fbe107e9e5759a7638"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fa39addf827a6ef14492389574e89055906efd49","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fa39addf827a6ef14492389574e89055906efd49","html_url":"https://github.com/apache/openjpa/commit/fa39addf827a6ef14492389574e89055906efd49","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fa39addf827a6ef14492389574e89055906efd49/comments","author":null,"committer":null,"parents":[{"sha":"09e13c4ad887fbcec2532d175e6f761f1fe5b72e","url":"https://api.github.com/repos/apache/openjpa/commits/09e13c4ad887fbcec2532d175e6f761f1fe5b72e","html_url":"https://github.com/apache/openjpa/commit/09e13c4ad887fbcec2532d175e6f761f1fe5b72e"}]},{"sha":"d260d34d69be456f78f195fc2fb075dcfa2aa4fb","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyNjBkMzRkNjliZTQ1NmY3OGYxOTVmYzJmYjA3NWRjZmEyYWE0ZmI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T21:32:06Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T21:32:06Z"},"message":"Oops; fixing NPE caused by previous short-circuiting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563664 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c44ff90f271686d8ddc87637e62248dbcf815f21","url":"https://api.github.com/repos/apache/openjpa/git/trees/c44ff90f271686d8ddc87637e62248dbcf815f21"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d260d34d69be456f78f195fc2fb075dcfa2aa4fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d260d34d69be456f78f195fc2fb075dcfa2aa4fb","html_url":"https://github.com/apache/openjpa/commit/d260d34d69be456f78f195fc2fb075dcfa2aa4fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d260d34d69be456f78f195fc2fb075dcfa2aa4fb/comments","author":null,"committer":null,"parents":[{"sha":"fa39addf827a6ef14492389574e89055906efd49","url":"https://api.github.com/repos/apache/openjpa/commits/fa39addf827a6ef14492389574e89055906efd49","html_url":"https://github.com/apache/openjpa/commit/fa39addf827a6ef14492389574e89055906efd49"}]},{"sha":"86e47000db1e081076ed16ef2873bb71e6e93c70","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2ZTQ3MDAwZGIxZTA4MTA3NmVkMTZlZjI4NzNiYjcxZTZlOTNjNzA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:12:56Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:12:56Z"},"message":"OPENJPA-86\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563697 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54435765252246f050b32d5a0c6163cf11008962","url":"https://api.github.com/repos/apache/openjpa/git/trees/54435765252246f050b32d5a0c6163cf11008962"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/86e47000db1e081076ed16ef2873bb71e6e93c70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/86e47000db1e081076ed16ef2873bb71e6e93c70","html_url":"https://github.com/apache/openjpa/commit/86e47000db1e081076ed16ef2873bb71e6e93c70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/86e47000db1e081076ed16ef2873bb71e6e93c70/comments","author":null,"committer":null,"parents":[{"sha":"d260d34d69be456f78f195fc2fb075dcfa2aa4fb","url":"https://api.github.com/repos/apache/openjpa/commits/d260d34d69be456f78f195fc2fb075dcfa2aa4fb","html_url":"https://github.com/apache/openjpa/commit/d260d34d69be456f78f195fc2fb075dcfa2aa4fb"}]},{"sha":"63c3748900811032ec5dc4e5e42d9745cfc53c4f","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzYzM3NDg5MDA4MTEwMzJlYzVkYzRlNWU0MmQ5NzQ1Y2ZjNTNjNGY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:47:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:47:19Z"},"message":"OPENJPA-165\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52852cb09ffb717cda6ba8ba9bcd9b880e48e7f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/52852cb09ffb717cda6ba8ba9bcd9b880e48e7f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f","html_url":"https://github.com/apache/openjpa/commit/63c3748900811032ec5dc4e5e42d9745cfc53c4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f/comments","author":null,"committer":null,"parents":[{"sha":"86e47000db1e081076ed16ef2873bb71e6e93c70","url":"https://api.github.com/repos/apache/openjpa/commits/86e47000db1e081076ed16ef2873bb71e6e93c70","html_url":"https://github.com/apache/openjpa/commit/86e47000db1e081076ed16ef2873bb71e6e93c70"}]},{"sha":"b7fe66357b6c964613866b773da5c2739c513e09","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3ZmU2NjM1N2I2Yzk2NDYxMzg2NmI3NzNkYTVjMjczOWM1MTNlMDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-08T00:05:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-08T00:05:40Z"},"message":"Tolerate container failure better, now that we can handle non-enhanced types.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563705 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3843a40f7d7fba5ccfe5dfe92888bc331c254d4f","url":"https://api.github.com/repos/apache/openjpa/git/trees/3843a40f7d7fba5ccfe5dfe92888bc331c254d4f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7fe66357b6c964613866b773da5c2739c513e09","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7fe66357b6c964613866b773da5c2739c513e09","html_url":"https://github.com/apache/openjpa/commit/b7fe66357b6c964613866b773da5c2739c513e09","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7fe66357b6c964613866b773da5c2739c513e09/comments","author":null,"committer":null,"parents":[{"sha":"63c3748900811032ec5dc4e5e42d9745cfc53c4f","url":"https://api.github.com/repos/apache/openjpa/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f","html_url":"https://github.com/apache/openjpa/commit/63c3748900811032ec5dc4e5e42d9745cfc53c4f"}]},{"sha":"4c9a7258697bc5e2bc62f12a58979ace59f8b1f1","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjOWE3MjU4Njk3YmM1ZTJiYzYyZjEyYTU4OTc5YWNlNTlmOGIxZjE=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-08-08T20:25:47Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-08-08T20:25:47Z"},"message":"Fix typos in caching section of doc\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@564011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79e1c7be1ab41762ad83279426fe43f7b6d6e0e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/79e1c7be1ab41762ad83279426fe43f7b6d6e0e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c9a7258697bc5e2bc62f12a58979ace59f8b1f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c9a7258697bc5e2bc62f12a58979ace59f8b1f1","html_url":"https://github.com/apache/openjpa/commit/4c9a7258697bc5e2bc62f12a58979ace59f8b1f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c9a7258697bc5e2bc62f12a58979ace59f8b1f1/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"b7fe66357b6c964613866b773da5c2739c513e09","url":"https://api.github.com/repos/apache/openjpa/commits/b7fe66357b6c964613866b773da5c2739c513e09","html_url":"https://github.com/apache/openjpa/commit/b7fe66357b6c964613866b773da5c2739c513e09"}]},{"sha":"60f59740f509071e75a705168fcf1b49540ecaeb","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwZjU5NzQwZjUwOTA3MWU3NWE3MDUxNjhmY2YxYjQ5NTQwZWNhZWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-09T05:56:02Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-09T05:56:02Z"},"message":"OPENJPA-293. Corrected PCEnhancer to use FieldMetaData.getDeclaredType() instead of getType() in some situations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@564093 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"26b3f79ba55c9b3add8ac4f3116a0a8b0ae4a082","url":"https://api.github.com/repos/apache/openjpa/git/trees/26b3f79ba55c9b3add8ac4f3116a0a8b0ae4a082"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/60f59740f509071e75a705168fcf1b49540ecaeb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/60f59740f509071e75a705168fcf1b49540ecaeb","html_url":"https://github.com/apache/openjpa/commit/60f59740f509071e75a705168fcf1b49540ecaeb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/60f59740f509071e75a705168fcf1b49540ecaeb/comments","author":null,"committer":null,"parents":[{"sha":"4c9a7258697bc5e2bc62f12a58979ace59f8b1f1","url":"https://api.github.com/repos/apache/openjpa/commits/4c9a7258697bc5e2bc62f12a58979ace59f8b1f1","html_url":"https://github.com/apache/openjpa/commit/4c9a7258697bc5e2bc62f12a58979ace59f8b1f1"}]},{"sha":"5c9642d5f47c319d2279382c60141ebcb65cd3b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjOTY0MmQ1ZjQ3YzMxOWQyMjc5MzgyYzYwMTQxZWJjYjY1Y2QzYjA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-09T22:27:17Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-09T22:27:17Z"},"message":"OPENJPA-244.  Committing Albert's changes for Java 2 Security (minus the white space).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@564408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55803f4de66db3809ed0c9b84023d27634ffe479","url":"https://api.github.com/repos/apache/openjpa/git/trees/55803f4de66db3809ed0c9b84023d27634ffe479"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0","html_url":"https://github.com/apache/openjpa/commit/5c9642d5f47c319d2279382c60141ebcb65cd3b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0/comments","author":null,"committer":null,"parents":[{"sha":"60f59740f509071e75a705168fcf1b49540ecaeb","url":"https://api.github.com/repos/apache/openjpa/commits/60f59740f509071e75a705168fcf1b49540ecaeb","html_url":"https://github.com/apache/openjpa/commit/60f59740f509071e75a705168fcf1b49540ecaeb"}]},{"sha":"8ba0483bf7273d3e26d88a4ac39762861afc0869","node_id":"MDY6Q29tbWl0MjA2MzY0OjhiYTA0ODNiZjcyNzNkM2UyNmQ4OGE0YWMzOTc2Mjg2MWFmYzA4Njk=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-10T00:24:19Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-10T00:24:19Z"},"message":"OPENJPA-168 Query Hints documentation added to jpa_overview_query.xml\nHelp Catalina committing the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@564439 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ee950e605cfdafeea66bd1fdfa8f769eab0ee2f","url":"https://api.github.com/repos/apache/openjpa/git/trees/6ee950e605cfdafeea66bd1fdfa8f769eab0ee2f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8ba0483bf7273d3e26d88a4ac39762861afc0869","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8ba0483bf7273d3e26d88a4ac39762861afc0869","html_url":"https://github.com/apache/openjpa/commit/8ba0483bf7273d3e26d88a4ac39762861afc0869","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8ba0483bf7273d3e26d88a4ac39762861afc0869/comments","author":null,"committer":null,"parents":[{"sha":"5c9642d5f47c319d2279382c60141ebcb65cd3b0","url":"https://api.github.com/repos/apache/openjpa/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0","html_url":"https://github.com/apache/openjpa/commit/5c9642d5f47c319d2279382c60141ebcb65cd3b0"}]},{"sha":"99ecf9564bc9f260bde9f702b2a79b121414345a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5ZWNmOTU2NGJjOWYyNjBiZGU5ZjcwMmIyYTc5YjEyMTQxNDM0NWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-10T17:33:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-10T17:33:08Z"},"message":"OPENJPA-311\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@564688 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31ba5fda798b03481b077c19c7e55a6950e52d91","url":"https://api.github.com/repos/apache/openjpa/git/trees/31ba5fda798b03481b077c19c7e55a6950e52d91"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99ecf9564bc9f260bde9f702b2a79b121414345a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99ecf9564bc9f260bde9f702b2a79b121414345a","html_url":"https://github.com/apache/openjpa/commit/99ecf9564bc9f260bde9f702b2a79b121414345a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99ecf9564bc9f260bde9f702b2a79b121414345a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8ba0483bf7273d3e26d88a4ac39762861afc0869","url":"https://api.github.com/repos/apache/openjpa/commits/8ba0483bf7273d3e26d88a4ac39762861afc0869","html_url":"https://github.com/apache/openjpa/commit/8ba0483bf7273d3e26d88a4ac39762861afc0869"}]},{"sha":"26b0e498455ffc4062ff4d06feec1d18ea560572","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2YjBlNDk4NDU1ZmZjNDA2MmZmNGQwNmZlZWMxZDE4ZWE1NjA1NzI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-14T17:38:00Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-14T17:38:00Z"},"message":"Help Catalina committing OPENJPA-313.r564688.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@565845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a2953c05deaaac7da12f4b13bf78553d2cb94841","url":"https://api.github.com/repos/apache/openjpa/git/trees/a2953c05deaaac7da12f4b13bf78553d2cb94841"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26b0e498455ffc4062ff4d06feec1d18ea560572","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26b0e498455ffc4062ff4d06feec1d18ea560572","html_url":"https://github.com/apache/openjpa/commit/26b0e498455ffc4062ff4d06feec1d18ea560572","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26b0e498455ffc4062ff4d06feec1d18ea560572/comments","author":null,"committer":null,"parents":[{"sha":"99ecf9564bc9f260bde9f702b2a79b121414345a","url":"https://api.github.com/repos/apache/openjpa/commits/99ecf9564bc9f260bde9f702b2a79b121414345a","html_url":"https://github.com/apache/openjpa/commit/99ecf9564bc9f260bde9f702b2a79b121414345a"}]},{"sha":"4e81825171676204c7e3ccaeaddbf679f0c5a590","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlODE4MjUxNzE2NzYyMDRjN2UzY2NhZWFkZGJmNjc5ZjBjNWE1OTA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-14T20:17:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-14T20:17:39Z"},"message":"OPENJPA-313.  Looks like this patch wasn't quite ready for prime time.  I attempted to re-build and re-test right after applying this change and I got several testcase errors in openjpa-persistence-jdbc.  I revert back ClassMapping.java and the problems go away.  Needs some more work...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@565896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31ba5fda798b03481b077c19c7e55a6950e52d91","url":"https://api.github.com/repos/apache/openjpa/git/trees/31ba5fda798b03481b077c19c7e55a6950e52d91"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590","html_url":"https://github.com/apache/openjpa/commit/4e81825171676204c7e3ccaeaddbf679f0c5a590","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590/comments","author":null,"committer":null,"parents":[{"sha":"26b0e498455ffc4062ff4d06feec1d18ea560572","url":"https://api.github.com/repos/apache/openjpa/commits/26b0e498455ffc4062ff4d06feec1d18ea560572","html_url":"https://github.com/apache/openjpa/commit/26b0e498455ffc4062ff4d06feec1d18ea560572"}]},{"sha":"ecc36a0f37420761683ddb164f8686ef04731dd9","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjYzM2YTBmMzc0MjA3NjE2ODNkZGIxNjRmODY4NmVmMDQ3MzFkZDk=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-14T22:39:55Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-14T22:39:55Z"},"message":"Build system work in preparation for 1.0.0 release; fixed some missing license headers; added maven ARAT plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@565955 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ad540f0fb4c7e8b4f5fc6b874a0e96a322603fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ad540f0fb4c7e8b4f5fc6b874a0e96a322603fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ecc36a0f37420761683ddb164f8686ef04731dd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ecc36a0f37420761683ddb164f8686ef04731dd9","html_url":"https://github.com/apache/openjpa/commit/ecc36a0f37420761683ddb164f8686ef04731dd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ecc36a0f37420761683ddb164f8686ef04731dd9/comments","author":null,"committer":null,"parents":[{"sha":"4e81825171676204c7e3ccaeaddbf679f0c5a590","url":"https://api.github.com/repos/apache/openjpa/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590","html_url":"https://github.com/apache/openjpa/commit/4e81825171676204c7e3ccaeaddbf679f0c5a590"}]},{"sha":"e59b9deab9ebe7d077867122e35060a641e24476","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1OWI5ZGVhYjllYmU3ZDA3Nzg2NzEyMmUzNTA2MGE2NDFlMjQ0NzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-15T01:48:13Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-15T01:48:13Z"},"message":"OPENJPA-293. Updated to latest serp dependency now that it's in the maven repository. Needed for interface-ordering issues in JDK1.5 + redefinition.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@565999 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c77528b53ab59b4b9432e36bd279ef04ef506b90","url":"https://api.github.com/repos/apache/openjpa/git/trees/c77528b53ab59b4b9432e36bd279ef04ef506b90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e59b9deab9ebe7d077867122e35060a641e24476","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e59b9deab9ebe7d077867122e35060a641e24476","html_url":"https://github.com/apache/openjpa/commit/e59b9deab9ebe7d077867122e35060a641e24476","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e59b9deab9ebe7d077867122e35060a641e24476/comments","author":null,"committer":null,"parents":[{"sha":"ecc36a0f37420761683ddb164f8686ef04731dd9","url":"https://api.github.com/repos/apache/openjpa/commits/ecc36a0f37420761683ddb164f8686ef04731dd9","html_url":"https://github.com/apache/openjpa/commit/ecc36a0f37420761683ddb164f8686ef04731dd9"}]},{"sha":"c014c925382f115e067fb9265d9c49f96aaf17f9","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwMTRjOTI1MzgyZjExNWUwNjdmYjkyNjVkOWM0OWY5NmFhZjE3Zjk=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-15T02:24:50Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-15T02:24:50Z"},"message":"Help Catalina committing OPENJPA-313.2.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82a8e6c563e2a2534c4801b0a6538c0941173ef1","url":"https://api.github.com/repos/apache/openjpa/git/trees/82a8e6c563e2a2534c4801b0a6538c0941173ef1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c014c925382f115e067fb9265d9c49f96aaf17f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c014c925382f115e067fb9265d9c49f96aaf17f9","html_url":"https://github.com/apache/openjpa/commit/c014c925382f115e067fb9265d9c49f96aaf17f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c014c925382f115e067fb9265d9c49f96aaf17f9/comments","author":null,"committer":null,"parents":[{"sha":"e59b9deab9ebe7d077867122e35060a641e24476","url":"https://api.github.com/repos/apache/openjpa/commits/e59b9deab9ebe7d077867122e35060a641e24476","html_url":"https://github.com/apache/openjpa/commit/e59b9deab9ebe7d077867122e35060a641e24476"}]},{"sha":"4463c743f014fa7a707f55bf18e73098cc66dd4d","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0NjNjNzQzZjAxNGZhN2E3MDdmNTViZjE4ZTczMDk4Y2M2NmRkNGQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-15T04:30:31Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-15T04:30:31Z"},"message":"Changed repository urls to deploy to the local site build.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566021 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e44eb8c406e59db28404e014add5ca3d5977e6b8","url":"https://api.github.com/repos/apache/openjpa/git/trees/e44eb8c406e59db28404e014add5ca3d5977e6b8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4463c743f014fa7a707f55bf18e73098cc66dd4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4463c743f014fa7a707f55bf18e73098cc66dd4d","html_url":"https://github.com/apache/openjpa/commit/4463c743f014fa7a707f55bf18e73098cc66dd4d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4463c743f014fa7a707f55bf18e73098cc66dd4d/comments","author":null,"committer":null,"parents":[{"sha":"c014c925382f115e067fb9265d9c49f96aaf17f9","url":"https://api.github.com/repos/apache/openjpa/commits/c014c925382f115e067fb9265d9c49f96aaf17f9","html_url":"https://github.com/apache/openjpa/commit/c014c925382f115e067fb9265d9c49f96aaf17f9"}]},{"sha":"7ae341d308956ec3bfe6a73cdb9a864a4923d0fe","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhZTM0MWQzMDg5NTZlYzNiZmU2YTczY2RiOWE4NjRhNDkyM2QwZmU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-15T18:40:47Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-15T18:40:47Z"},"message":"additional check for  XmlRootElement annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566297 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f54d1f06f09e934cb5bfcfa8393f63bf8e894e0b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f54d1f06f09e934cb5bfcfa8393f63bf8e894e0b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ae341d308956ec3bfe6a73cdb9a864a4923d0fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ae341d308956ec3bfe6a73cdb9a864a4923d0fe","html_url":"https://github.com/apache/openjpa/commit/7ae341d308956ec3bfe6a73cdb9a864a4923d0fe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ae341d308956ec3bfe6a73cdb9a864a4923d0fe/comments","author":null,"committer":null,"parents":[{"sha":"4463c743f014fa7a707f55bf18e73098cc66dd4d","url":"https://api.github.com/repos/apache/openjpa/commits/4463c743f014fa7a707f55bf18e73098cc66dd4d","html_url":"https://github.com/apache/openjpa/commit/4463c743f014fa7a707f55bf18e73098cc66dd4d"}]},{"sha":"485527ae0872028121f29eb5b7fd27f75efb5b4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4NTUyN2FlMDg3MjAyODEyMWYyOWViNWI3ZmQyN2Y3NWVmYjViNGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-15T19:49:12Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-15T19:49:12Z"},"message":"removed debugging code\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566315 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a11ecd72fe0284360b231f899e46d07f54a92480","url":"https://api.github.com/repos/apache/openjpa/git/trees/a11ecd72fe0284360b231f899e46d07f54a92480"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/485527ae0872028121f29eb5b7fd27f75efb5b4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/485527ae0872028121f29eb5b7fd27f75efb5b4a","html_url":"https://github.com/apache/openjpa/commit/485527ae0872028121f29eb5b7fd27f75efb5b4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/485527ae0872028121f29eb5b7fd27f75efb5b4a/comments","author":null,"committer":null,"parents":[{"sha":"7ae341d308956ec3bfe6a73cdb9a864a4923d0fe","url":"https://api.github.com/repos/apache/openjpa/commits/7ae341d308956ec3bfe6a73cdb9a864a4923d0fe","html_url":"https://github.com/apache/openjpa/commit/7ae341d308956ec3bfe6a73cdb9a864a4923d0fe"}]},{"sha":"88f293dec94ee995603f7c4b895cc26bffb0ac67","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4ZjI5M2RlYzk0ZWU5OTU2MDNmN2M0Yjg5NWNjMjZiZmZiMGFjNjc=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-15T22:56:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-15T22:56:44Z"},"message":"OPENJPA-312.  Committing these changes for Daniel.  I decided to make a common private utility method out of the common code across the proposed patch, but the intent of the original patch is still there.  Thanks, Daniel, for posting the fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566381 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"180e2b3c9087bb79d4ecaebb0d25174ce6bcca61","url":"https://api.github.com/repos/apache/openjpa/git/trees/180e2b3c9087bb79d4ecaebb0d25174ce6bcca61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67","html_url":"https://github.com/apache/openjpa/commit/88f293dec94ee995603f7c4b895cc26bffb0ac67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67/comments","author":null,"committer":null,"parents":[{"sha":"485527ae0872028121f29eb5b7fd27f75efb5b4a","url":"https://api.github.com/repos/apache/openjpa/commits/485527ae0872028121f29eb5b7fd27f75efb5b4a","html_url":"https://github.com/apache/openjpa/commit/485527ae0872028121f29eb5b7fd27f75efb5b4a"}]},{"sha":"8d1dacad825e9ec3115596170b0cc13b2d2278b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkMWRhY2FkODI1ZTllYzMxMTU1OTYxNzBiMGNjMTNiMmQyMjc4YjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-08-16T05:52:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-08-16T05:52:17Z"},"message":"Adding support for change of configuration properties after the configuration has been frozen. \nThree methods have been added to Configuration:\n  i) Configuration.getDynamicValues() returns list of Values that are dynamically modifiable.\n ii) Configuration.isDynamic(String property) affirms if the named property is dynamically modifiable.\niii) Configuration.modifyDynamic(String property, Object value) modifies the named property value even when Configuration.isReadOnly().\n\n  Currently, OpenJPAConfigurationImpl.getDynamicValues() return 3 simple IntValue properties {dataCacheTimeout, fetchBatchSize, lockTimeout) \n \n  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566494 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cda96df7bd2774b658e486e56591f81aa4897906","url":"https://api.github.com/repos/apache/openjpa/git/trees/cda96df7bd2774b658e486e56591f81aa4897906"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3","html_url":"https://github.com/apache/openjpa/commit/8d1dacad825e9ec3115596170b0cc13b2d2278b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3/comments","author":null,"committer":null,"parents":[{"sha":"88f293dec94ee995603f7c4b895cc26bffb0ac67","url":"https://api.github.com/repos/apache/openjpa/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67","html_url":"https://github.com/apache/openjpa/commit/88f293dec94ee995603f7c4b895cc26bffb0ac67"}]},{"sha":"6cd259f310fb0feab604805ffd0578e85513b64c","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjZDI1OWYzMTBmYjBmZWFiNjA0ODA1ZmZkMDU3OGU4NTUxM2I2NGM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-16T17:59:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-16T17:59:57Z"},"message":"OPENJPA-143\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c9bce16709ce5c5a6ed0335b2bbd7b9bfe13671d","url":"https://api.github.com/repos/apache/openjpa/git/trees/c9bce16709ce5c5a6ed0335b2bbd7b9bfe13671d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6cd259f310fb0feab604805ffd0578e85513b64c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6cd259f310fb0feab604805ffd0578e85513b64c","html_url":"https://github.com/apache/openjpa/commit/6cd259f310fb0feab604805ffd0578e85513b64c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6cd259f310fb0feab604805ffd0578e85513b64c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8d1dacad825e9ec3115596170b0cc13b2d2278b3","url":"https://api.github.com/repos/apache/openjpa/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3","html_url":"https://github.com/apache/openjpa/commit/8d1dacad825e9ec3115596170b0cc13b2d2278b3"}]},{"sha":"71f44f884e20bc6b08e339115bf14dc09a1ee8e5","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxZjQ0Zjg4NGUyMGJjNmIwOGUzMzkxMTViZjE0ZGMwOWExZWU4ZTU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-16T21:18:35Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-16T21:18:35Z"},"message":"OPENJPA-320.  Updated the resevered schema prefixes for DB2.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566855 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"758c494653de5dfa2d70e4f6739d6f2b21e243bf","url":"https://api.github.com/repos/apache/openjpa/git/trees/758c494653de5dfa2d70e4f6739d6f2b21e243bf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71f44f884e20bc6b08e339115bf14dc09a1ee8e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71f44f884e20bc6b08e339115bf14dc09a1ee8e5","html_url":"https://github.com/apache/openjpa/commit/71f44f884e20bc6b08e339115bf14dc09a1ee8e5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71f44f884e20bc6b08e339115bf14dc09a1ee8e5/comments","author":null,"committer":null,"parents":[{"sha":"6cd259f310fb0feab604805ffd0578e85513b64c","url":"https://api.github.com/repos/apache/openjpa/commits/6cd259f310fb0feab604805ffd0578e85513b64c","html_url":"https://github.com/apache/openjpa/commit/6cd259f310fb0feab604805ffd0578e85513b64c"}]},{"sha":"f9fcb11a351987564238341644efb1c96073b504","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5ZmNiMTFhMzUxOTg3NTY0MjM4MzQxNjQ0ZWZiMWM5NjA3M2I1MDQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-17T20:16:25Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-17T20:16:25Z"},"message":"Fixed JDK 1.5-ism of Character.valueOf(char) by changing it to new Characher(char).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567127 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"748255f68f8fb4febab846e7fc1a2042a369cf30","url":"https://api.github.com/repos/apache/openjpa/git/trees/748255f68f8fb4febab846e7fc1a2042a369cf30"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f9fcb11a351987564238341644efb1c96073b504","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f9fcb11a351987564238341644efb1c96073b504","html_url":"https://github.com/apache/openjpa/commit/f9fcb11a351987564238341644efb1c96073b504","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f9fcb11a351987564238341644efb1c96073b504/comments","author":null,"committer":null,"parents":[{"sha":"71f44f884e20bc6b08e339115bf14dc09a1ee8e5","url":"https://api.github.com/repos/apache/openjpa/commits/71f44f884e20bc6b08e339115bf14dc09a1ee8e5","html_url":"https://github.com/apache/openjpa/commit/71f44f884e20bc6b08e339115bf14dc09a1ee8e5"}]},{"sha":"784de8a57c599f43f5f26764b1dcd43e7f8a5be1","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4NGRlOGE1N2M1OTlmNDNmNWYyNjc2NGIxZGNkNDNlN2Y4YTViZTE=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-08-17T23:20:43Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-08-17T23:20:43Z"},"message":"OPENJPA-322.Copying over the TimeZone to the proxy. 446787 seems to have accidentally removed this.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567170 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b479a7494ebfe0f1ae22173fa355988c5aa3c8e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/b479a7494ebfe0f1ae22173fa355988c5aa3c8e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/784de8a57c599f43f5f26764b1dcd43e7f8a5be1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/784de8a57c599f43f5f26764b1dcd43e7f8a5be1","html_url":"https://github.com/apache/openjpa/commit/784de8a57c599f43f5f26764b1dcd43e7f8a5be1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/784de8a57c599f43f5f26764b1dcd43e7f8a5be1/comments","author":null,"committer":null,"parents":[{"sha":"f9fcb11a351987564238341644efb1c96073b504","url":"https://api.github.com/repos/apache/openjpa/commits/f9fcb11a351987564238341644efb1c96073b504","html_url":"https://github.com/apache/openjpa/commit/f9fcb11a351987564238341644efb1c96073b504"}]},{"sha":"9bebf551fc6be90240c858a05119cc71776d6c53","node_id":"MDY6Q29tbWl0MjA2MzY0OjliZWJmNTUxZmM2YmU5MDI0MGM4NThhMDUxMTljYzcxNzc2ZDZjNTM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-18T02:26:34Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-18T02:26:34Z"},"message":"Fixed TCK to only use a single jar in the top-level openjpa-all aggregate module.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567207 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d63efa620e733e73e60a143f2f0b9b5e7e2c715","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d63efa620e733e73e60a143f2f0b9b5e7e2c715"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9bebf551fc6be90240c858a05119cc71776d6c53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9bebf551fc6be90240c858a05119cc71776d6c53","html_url":"https://github.com/apache/openjpa/commit/9bebf551fc6be90240c858a05119cc71776d6c53","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9bebf551fc6be90240c858a05119cc71776d6c53/comments","author":null,"committer":null,"parents":[{"sha":"784de8a57c599f43f5f26764b1dcd43e7f8a5be1","url":"https://api.github.com/repos/apache/openjpa/commits/784de8a57c599f43f5f26764b1dcd43e7f8a5be1","html_url":"https://github.com/apache/openjpa/commit/784de8a57c599f43f5f26764b1dcd43e7f8a5be1"}]},{"sha":"6316c57e975766d06575ad8a0a9b4dab9561bc1e","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzMTZjNTdlOTc1NzY2ZDA2NTc1YWQ4YTBhOWI0ZGFiOTU2MWJjMWU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-20T16:50:20Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-20T16:50:20Z"},"message":"OPENJPA-323.  Committing message updates per Teresa's patch.  Thanks, Teresa!\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567748 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f56d4123ded111b44921cb0c0ba4aeaf96c03ad2","url":"https://api.github.com/repos/apache/openjpa/git/trees/f56d4123ded111b44921cb0c0ba4aeaf96c03ad2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6316c57e975766d06575ad8a0a9b4dab9561bc1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6316c57e975766d06575ad8a0a9b4dab9561bc1e","html_url":"https://github.com/apache/openjpa/commit/6316c57e975766d06575ad8a0a9b4dab9561bc1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6316c57e975766d06575ad8a0a9b4dab9561bc1e/comments","author":null,"committer":null,"parents":[{"sha":"9bebf551fc6be90240c858a05119cc71776d6c53","url":"https://api.github.com/repos/apache/openjpa/commits/9bebf551fc6be90240c858a05119cc71776d6c53","html_url":"https://github.com/apache/openjpa/commit/9bebf551fc6be90240c858a05119cc71776d6c53"}]},{"sha":"62f09afea9eaef64c213d888c50e457445d5635b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyZjA5YWZlYTllYWVmNjRjMjEzZDg4OGM1MGU0NTc0NDVkNTYzNWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T21:29:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T21:29:47Z"},"message":"something in Marc's checkin (r565955) broke how I run the examples; reverting the phase change to see if invocation in the old phase resolves the issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567835 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"686c89f5431e6f2081ab67ebabd8ce5a92356d73","url":"https://api.github.com/repos/apache/openjpa/git/trees/686c89f5431e6f2081ab67ebabd8ce5a92356d73"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62f09afea9eaef64c213d888c50e457445d5635b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62f09afea9eaef64c213d888c50e457445d5635b","html_url":"https://github.com/apache/openjpa/commit/62f09afea9eaef64c213d888c50e457445d5635b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62f09afea9eaef64c213d888c50e457445d5635b/comments","author":null,"committer":null,"parents":[{"sha":"6316c57e975766d06575ad8a0a9b4dab9561bc1e","url":"https://api.github.com/repos/apache/openjpa/commits/6316c57e975766d06575ad8a0a9b4dab9561bc1e","html_url":"https://github.com/apache/openjpa/commit/6316c57e975766d06575ad8a0a9b4dab9561bc1e"}]},{"sha":"778ab2a393ad53356f5b24f059f45f56e48e4dd4","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3OGFiMmEzOTNhZDUzMzU2ZjViMjRmMDU5ZjQ1ZjU2ZTQ4ZTRkZDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T21:32:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T21:32:54Z"},"message":"OPENJPA-317. Changed OpenJPA published API pre-1.0. Reduced the scope of the dependencies in OpenJPAEntityManager and the other published interfaces; converted JDK1.4-style symbolic constant usage to new enums; changed some method names for clarity and consistency; removed old javax.resource dependencies; updated @published and @nojavadoc tags. The published interfaces should now only reference other published interfaces in method signatures, and it should be possible to build javadoc for just the published interfaces.\n\nRemoved getDelegate() calls from the published interfaces, as they expose internals. They are still available on the impl classes themselves, or the SPI ifaces when available.\n\nAdded covariant return types to JDBCFetchPlan.\n\nChanged BrokerFactoryListener interface to not encode event types in the listener signature.\n\nMoved some methods from OpenJPAPersistence to JPAFacadeHelper.\n\nWe will need to grow these published interfaces to provide access to some things in the internal interfaces. However, these interfaces will remain stable moving forward within the constraints of the OpenJPA deprecation policies.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"597c6a9c4610816f77d26f43f947197086baa33e","url":"https://api.github.com/repos/apache/openjpa/git/trees/597c6a9c4610816f77d26f43f947197086baa33e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4","html_url":"https://github.com/apache/openjpa/commit/778ab2a393ad53356f5b24f059f45f56e48e4dd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4/comments","author":null,"committer":null,"parents":[{"sha":"62f09afea9eaef64c213d888c50e457445d5635b","url":"https://api.github.com/repos/apache/openjpa/commits/62f09afea9eaef64c213d888c50e457445d5635b","html_url":"https://github.com/apache/openjpa/commit/62f09afea9eaef64c213d888c50e457445d5635b"}]},{"sha":"007154980bea0a83d541872cddfb060f603ceb0f","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwNzE1NDk4MGJlYTBhODNkNTQxODcyY2RkZmIwNjBmNjAzY2ViMGY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:08:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:08:40Z"},"message":"OPENJPA-317. Removed comment; added exception to test case method definition for extensibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567851 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba03aa3d255460f10d6d3c18771295aaafd3a724","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba03aa3d255460f10d6d3c18771295aaafd3a724"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/007154980bea0a83d541872cddfb060f603ceb0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/007154980bea0a83d541872cddfb060f603ceb0f","html_url":"https://github.com/apache/openjpa/commit/007154980bea0a83d541872cddfb060f603ceb0f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/007154980bea0a83d541872cddfb060f603ceb0f/comments","author":null,"committer":null,"parents":[{"sha":"778ab2a393ad53356f5b24f059f45f56e48e4dd4","url":"https://api.github.com/repos/apache/openjpa/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4","html_url":"https://github.com/apache/openjpa/commit/778ab2a393ad53356f5b24f059f45f56e48e4dd4"}]},{"sha":"4e8936a70606269f985ee7aefa3d98816a0fbc9c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlODkzNmE3MDYwNjI2OWY5ODVlZTdhZWZhM2Q5ODgxNmEwZmJjOWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:11:59Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:11:59Z"},"message":"OPENJPA-317. There is no additional covariant-type work to do here.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567854 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"74aba2770c2ae9b3890668272c09f1e20e70b428","url":"https://api.github.com/repos/apache/openjpa/git/trees/74aba2770c2ae9b3890668272c09f1e20e70b428"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e8936a70606269f985ee7aefa3d98816a0fbc9c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e8936a70606269f985ee7aefa3d98816a0fbc9c","html_url":"https://github.com/apache/openjpa/commit/4e8936a70606269f985ee7aefa3d98816a0fbc9c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e8936a70606269f985ee7aefa3d98816a0fbc9c/comments","author":null,"committer":null,"parents":[{"sha":"007154980bea0a83d541872cddfb060f603ceb0f","url":"https://api.github.com/repos/apache/openjpa/commits/007154980bea0a83d541872cddfb060f603ceb0f","html_url":"https://github.com/apache/openjpa/commit/007154980bea0a83d541872cddfb060f603ceb0f"}]},{"sha":"032bf10ce6cddfe45122c01a88cb341e17ab3b97","node_id":"MDY6Q29tbWl0MjA2MzY0OjAzMmJmMTBjZTZjZGRmZTQ1MTIyYzAxYTg4Y2IzNDFlMTdhYjNiOTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:15:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:15:51Z"},"message":"OPENJPA-317. Javadoc clarification.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567855 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25203eaa9c440d8e953730b844ba60afbe03071d","url":"https://api.github.com/repos/apache/openjpa/git/trees/25203eaa9c440d8e953730b844ba60afbe03071d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/032bf10ce6cddfe45122c01a88cb341e17ab3b97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/032bf10ce6cddfe45122c01a88cb341e17ab3b97","html_url":"https://github.com/apache/openjpa/commit/032bf10ce6cddfe45122c01a88cb341e17ab3b97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/032bf10ce6cddfe45122c01a88cb341e17ab3b97/comments","author":null,"committer":null,"parents":[{"sha":"4e8936a70606269f985ee7aefa3d98816a0fbc9c","url":"https://api.github.com/repos/apache/openjpa/commits/4e8936a70606269f985ee7aefa3d98816a0fbc9c","html_url":"https://github.com/apache/openjpa/commit/4e8936a70606269f985ee7aefa3d98816a0fbc9c"}]},{"sha":"6de7e5f5812d642864fc91da4851569160fdec67","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkZTdlNWY1ODEyZDY0Mjg2NGZjOTFkYTQ4NTE1NjkxNjBmZGVjNjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:24:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:24:03Z"},"message":"Imports cleanup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567856 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c988b58dc51f304bef2968cab56e59a811e0e13c","url":"https://api.github.com/repos/apache/openjpa/git/trees/c988b58dc51f304bef2968cab56e59a811e0e13c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6de7e5f5812d642864fc91da4851569160fdec67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6de7e5f5812d642864fc91da4851569160fdec67","html_url":"https://github.com/apache/openjpa/commit/6de7e5f5812d642864fc91da4851569160fdec67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6de7e5f5812d642864fc91da4851569160fdec67/comments","author":null,"committer":null,"parents":[{"sha":"032bf10ce6cddfe45122c01a88cb341e17ab3b97","url":"https://api.github.com/repos/apache/openjpa/commits/032bf10ce6cddfe45122c01a88cb341e17ab3b97","html_url":"https://github.com/apache/openjpa/commit/032bf10ce6cddfe45122c01a88cb341e17ab3b97"}]},{"sha":"0a40e8c9a40d16300a94f7c46de76129327ee810","node_id":"MDY6Q29tbWl0MjA2MzY0OjBhNDBlOGM5YTQwZDE2MzAwYTk0ZjdjNDZkZTc2MTI5MzI3ZWU4MTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:25:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T22:25:37Z"},"message":"OPENJPA-323. If it was ok to comment out, it must be ok to remove altogether.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567858 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"07831255a358335162c69a41d4fbd6f62fafb44e","url":"https://api.github.com/repos/apache/openjpa/git/trees/07831255a358335162c69a41d4fbd6f62fafb44e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0a40e8c9a40d16300a94f7c46de76129327ee810","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0a40e8c9a40d16300a94f7c46de76129327ee810","html_url":"https://github.com/apache/openjpa/commit/0a40e8c9a40d16300a94f7c46de76129327ee810","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0a40e8c9a40d16300a94f7c46de76129327ee810/comments","author":null,"committer":null,"parents":[{"sha":"6de7e5f5812d642864fc91da4851569160fdec67","url":"https://api.github.com/repos/apache/openjpa/commits/6de7e5f5812d642864fc91da4851569160fdec67","html_url":"https://github.com/apache/openjpa/commit/6de7e5f5812d642864fc91da4851569160fdec67"}]},{"sha":"8dd6857f67991d646727bfd3597d8b5b9b03d69f","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkZDY4NTdmNjc5OTFkNjQ2NzI3YmZkMzU5N2Q4YjViOWIwM2Q2OWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T23:19:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T23:19:05Z"},"message":"OPENJPA-314, OPENJPA-315\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567875 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c76f1b66073645115804f54d243a58259c81353a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c76f1b66073645115804f54d243a58259c81353a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f","html_url":"https://github.com/apache/openjpa/commit/8dd6857f67991d646727bfd3597d8b5b9b03d69f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f/comments","author":null,"committer":null,"parents":[{"sha":"0a40e8c9a40d16300a94f7c46de76129327ee810","url":"https://api.github.com/repos/apache/openjpa/commits/0a40e8c9a40d16300a94f7c46de76129327ee810","html_url":"https://github.com/apache/openjpa/commit/0a40e8c9a40d16300a94f7c46de76129327ee810"}]},{"sha":"dda1e8ef6f2ac6aacf75934425aa00fae9355838","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkYTFlOGVmNmYyYWM2YWFjZjc1OTM0NDI1YWEwMGZhZTkzNTU4Mzg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T00:45:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T00:45:23Z"},"message":"OPENJPA-293. Allow runtime redefinition to be disabled via a configuration setting. We really should sweep through the code and change ImplHelper to take a Configuration as an argument, but that won't change the behavior; it'll just make some of the validations more eager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567886 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef5137d40958db92fd714ec70667f7cdea3c02e8","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef5137d40958db92fd714ec70667f7cdea3c02e8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838","html_url":"https://github.com/apache/openjpa/commit/dda1e8ef6f2ac6aacf75934425aa00fae9355838","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838/comments","author":null,"committer":null,"parents":[{"sha":"8dd6857f67991d646727bfd3597d8b5b9b03d69f","url":"https://api.github.com/repos/apache/openjpa/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f","html_url":"https://github.com/apache/openjpa/commit/8dd6857f67991d646727bfd3597d8b5b9b03d69f"}]},{"sha":"ede9dcbd61b0705da92e82dddb00d0d14e504639","node_id":"MDY6Q29tbWl0MjA2MzY0OmVkZTlkY2JkNjFiMDcwNWRhOTJlODJkZGRiMDBkMGQxNGU1MDQ2Mzk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T00:54:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T00:54:44Z"},"message":"OPENJPA-293. More-eager failures.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa3b3fc479fcf80c0bbde3bc820c3aa55ffe5609","url":"https://api.github.com/repos/apache/openjpa/git/trees/aa3b3fc479fcf80c0bbde3bc820c3aa55ffe5609"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ede9dcbd61b0705da92e82dddb00d0d14e504639","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ede9dcbd61b0705da92e82dddb00d0d14e504639","html_url":"https://github.com/apache/openjpa/commit/ede9dcbd61b0705da92e82dddb00d0d14e504639","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ede9dcbd61b0705da92e82dddb00d0d14e504639/comments","author":null,"committer":null,"parents":[{"sha":"dda1e8ef6f2ac6aacf75934425aa00fae9355838","url":"https://api.github.com/repos/apache/openjpa/commits/dda1e8ef6f2ac6aacf75934425aa00fae9355838","html_url":"https://github.com/apache/openjpa/commit/dda1e8ef6f2ac6aacf75934425aa00fae9355838"}]},{"sha":"e26e15496eda708f4e519328c834a4d08eccb25f","node_id":"MDY6Q29tbWl0MjA2MzY0OmUyNmUxNTQ5NmVkYTcwOGY0ZTUxOTMyOGM4MzRhNGQwOGVjY2IyNWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:09:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:09:20Z"},"message":"OPENJPA-317. Added ResultSetType and FetchDirection enums. Used FetchDirection instead of FetchDirectionType because FetchDirection seemed much more natural.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567893 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"caca826216444eb6b77ace3df96be3a9c1d31938","url":"https://api.github.com/repos/apache/openjpa/git/trees/caca826216444eb6b77ace3df96be3a9c1d31938"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e26e15496eda708f4e519328c834a4d08eccb25f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e26e15496eda708f4e519328c834a4d08eccb25f","html_url":"https://github.com/apache/openjpa/commit/e26e15496eda708f4e519328c834a4d08eccb25f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e26e15496eda708f4e519328c834a4d08eccb25f/comments","author":null,"committer":null,"parents":[{"sha":"ede9dcbd61b0705da92e82dddb00d0d14e504639","url":"https://api.github.com/repos/apache/openjpa/commits/ede9dcbd61b0705da92e82dddb00d0d14e504639","html_url":"https://github.com/apache/openjpa/commit/ede9dcbd61b0705da92e82dddb00d0d14e504639"}]},{"sha":"8c28c6bcbd2a4df40197db2a3e49fad68771c450","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMjhjNmJjYmQyYTRkZjQwMTk3ZGIyYTNlNDlmYWQ2ODc3MWM0NTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:20:14Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:20:14Z"},"message":"Improved debugging to reduce verbosity when not in TRACE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82a1216b0802b823ca37077a9014efe5176ce462","url":"https://api.github.com/repos/apache/openjpa/git/trees/82a1216b0802b823ca37077a9014efe5176ce462"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450","html_url":"https://github.com/apache/openjpa/commit/8c28c6bcbd2a4df40197db2a3e49fad68771c450","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450/comments","author":null,"committer":null,"parents":[{"sha":"e26e15496eda708f4e519328c834a4d08eccb25f","url":"https://api.github.com/repos/apache/openjpa/commits/e26e15496eda708f4e519328c834a4d08eccb25f","html_url":"https://github.com/apache/openjpa/commit/e26e15496eda708f4e519328c834a4d08eccb25f"}]},{"sha":"b0c5cfe69a76e3db981a0940350e37292fc59c1b","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwYzVjZmU2OWE3NmUzZGI5ODFhMDk0MDM1MGUzNzI5MmZjNTljMWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:28:12Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:28:12Z"},"message":"If a getter is marked @Transient, be a bit more quiet about compliance warnings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567897 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5b27530b21e1ad648dbb99d3da0b0283034388b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a5b27530b21e1ad648dbb99d3da0b0283034388b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b0c5cfe69a76e3db981a0940350e37292fc59c1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b0c5cfe69a76e3db981a0940350e37292fc59c1b","html_url":"https://github.com/apache/openjpa/commit/b0c5cfe69a76e3db981a0940350e37292fc59c1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b0c5cfe69a76e3db981a0940350e37292fc59c1b/comments","author":null,"committer":null,"parents":[{"sha":"8c28c6bcbd2a4df40197db2a3e49fad68771c450","url":"https://api.github.com/repos/apache/openjpa/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450","html_url":"https://github.com/apache/openjpa/commit/8c28c6bcbd2a4df40197db2a3e49fad68771c450"}]},{"sha":"89ec5482cbb790df7c2057da3bdd878397890c92","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5ZWM1NDgyY2JiNzkwZGY3YzIwNTdkYTNiZGQ4NzgzOTc4OTBjOTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:28:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:28:44Z"},"message":"Static field can be final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"740d61618808ad5450921bf30a2a7b59aa94e8be","url":"https://api.github.com/repos/apache/openjpa/git/trees/740d61618808ad5450921bf30a2a7b59aa94e8be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89ec5482cbb790df7c2057da3bdd878397890c92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89ec5482cbb790df7c2057da3bdd878397890c92","html_url":"https://github.com/apache/openjpa/commit/89ec5482cbb790df7c2057da3bdd878397890c92","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89ec5482cbb790df7c2057da3bdd878397890c92/comments","author":null,"committer":null,"parents":[{"sha":"b0c5cfe69a76e3db981a0940350e37292fc59c1b","url":"https://api.github.com/repos/apache/openjpa/commits/b0c5cfe69a76e3db981a0940350e37292fc59c1b","html_url":"https://github.com/apache/openjpa/commit/b0c5cfe69a76e3db981a0940350e37292fc59c1b"}]},{"sha":"ebcec6e55b3c475146e7a113e773f296fffd602f","node_id":"MDY6Q29tbWl0MjA2MzY0OmViY2VjNmU1NWIzYzQ3NTE0NmU3YTExM2U3NzNmMjk2ZmZmZDYwMmY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:37:39Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:37:39Z"},"message":"OPENJPA-317. Moved away from requiring Type at the end of enums, in favor of alignment with existing OpenJPA config settings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567900 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"50c24c5473e26ac31eee9f24e1be731ba298fecd","url":"https://api.github.com/repos/apache/openjpa/git/trees/50c24c5473e26ac31eee9f24e1be731ba298fecd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ebcec6e55b3c475146e7a113e773f296fffd602f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ebcec6e55b3c475146e7a113e773f296fffd602f","html_url":"https://github.com/apache/openjpa/commit/ebcec6e55b3c475146e7a113e773f296fffd602f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ebcec6e55b3c475146e7a113e773f296fffd602f/comments","author":null,"committer":null,"parents":[{"sha":"89ec5482cbb790df7c2057da3bdd878397890c92","url":"https://api.github.com/repos/apache/openjpa/commits/89ec5482cbb790df7c2057da3bdd878397890c92","html_url":"https://github.com/apache/openjpa/commit/89ec5482cbb790df7c2057da3bdd878397890c92"}]},{"sha":"fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiMWM1NTRjNGJkNmFiMWQwYjNmZTYyNjk5YjE5NGNkMGRmMDNlYzk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:46:38Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:46:38Z"},"message":"Fixed bug I introduced with new configuration setting earlier.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567904 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f966c2d1d9f23617d112da0fd96c82c008a1d9c8","url":"https://api.github.com/repos/apache/openjpa/git/trees/f966c2d1d9f23617d112da0fd96c82c008a1d9c8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9","html_url":"https://github.com/apache/openjpa/commit/fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9/comments","author":null,"committer":null,"parents":[{"sha":"ebcec6e55b3c475146e7a113e773f296fffd602f","url":"https://api.github.com/repos/apache/openjpa/commits/ebcec6e55b3c475146e7a113e773f296fffd602f","html_url":"https://github.com/apache/openjpa/commit/ebcec6e55b3c475146e7a113e773f296fffd602f"}]},{"sha":"3d22005bad92bb23973d8620a1b1e2649c772e46","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkMjIwMDViYWQ5MmJiMjM5NzNkODYyMGExYjFlMjY0OWM3NzJlNDY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T02:16:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T02:16:23Z"},"message":"Fixed bug I introduced with new configuration setting earlier.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567908 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60cd28fd39b90bfd632b7926b1f56d52997b8554","url":"https://api.github.com/repos/apache/openjpa/git/trees/60cd28fd39b90bfd632b7926b1f56d52997b8554"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3d22005bad92bb23973d8620a1b1e2649c772e46","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3d22005bad92bb23973d8620a1b1e2649c772e46","html_url":"https://github.com/apache/openjpa/commit/3d22005bad92bb23973d8620a1b1e2649c772e46","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3d22005bad92bb23973d8620a1b1e2649c772e46/comments","author":null,"committer":null,"parents":[{"sha":"fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9","url":"https://api.github.com/repos/apache/openjpa/commits/fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9","html_url":"https://github.com/apache/openjpa/commit/fb1c554c4bd6ab1d0b3fe62699b194cd0df03ec9"}]},{"sha":"7977291bea0d92b3356319a8dba1a1e9a273e751","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5NzcyOTFiZWEwZDkyYjMzNTYzMTlhOGRiYTFhMWU5YTI3M2U3NTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T02:21:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T02:21:44Z"},"message":"OPENJPA-293. Fixed bug with property access and booleans and 'is' accessors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567911 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4ec87e18cc01c49de6afdb8f03a5ef7e9a47fa3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/4ec87e18cc01c49de6afdb8f03a5ef7e9a47fa3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7977291bea0d92b3356319a8dba1a1e9a273e751","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7977291bea0d92b3356319a8dba1a1e9a273e751","html_url":"https://github.com/apache/openjpa/commit/7977291bea0d92b3356319a8dba1a1e9a273e751","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7977291bea0d92b3356319a8dba1a1e9a273e751/comments","author":null,"committer":null,"parents":[{"sha":"3d22005bad92bb23973d8620a1b1e2649c772e46","url":"https://api.github.com/repos/apache/openjpa/commits/3d22005bad92bb23973d8620a1b1e2649c772e46","html_url":"https://github.com/apache/openjpa/commit/3d22005bad92bb23973d8620a1b1e2649c772e46"}]},{"sha":"eaeebf20c7e89466748e4c872a6c15a732351382","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhZWViZjIwYzdlODk0NjY3NDhlNGM4NzJhNmMxNWE3MzIzNTEzODI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-21T03:15:37Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-21T03:15:37Z"},"message":"OPENJPA-321.  Committing Teresa's patch with a few minor formatting updates.  Thanks, Teresa.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567928 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f01c4ac700c43cb0ad341af94f284298c2460c73","url":"https://api.github.com/repos/apache/openjpa/git/trees/f01c4ac700c43cb0ad341af94f284298c2460c73"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eaeebf20c7e89466748e4c872a6c15a732351382","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eaeebf20c7e89466748e4c872a6c15a732351382","html_url":"https://github.com/apache/openjpa/commit/eaeebf20c7e89466748e4c872a6c15a732351382","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eaeebf20c7e89466748e4c872a6c15a732351382/comments","author":null,"committer":null,"parents":[{"sha":"7977291bea0d92b3356319a8dba1a1e9a273e751","url":"https://api.github.com/repos/apache/openjpa/commits/7977291bea0d92b3356319a8dba1a1e9a273e751","html_url":"https://github.com/apache/openjpa/commit/7977291bea0d92b3356319a8dba1a1e9a273e751"}]},{"sha":"748a8d9cc6f874298aea6b67e69b15872fe0b482","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0OGE4ZDljYzZmODc0Mjk4YWVhNmI2N2U2OWIxNTg3MmZlMGI0ODI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T03:56:32Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T03:56:32Z"},"message":"OpenJPA Release 1.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@567935 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f01c4ac700c43cb0ad341af94f284298c2460c73","url":"https://api.github.com/repos/apache/openjpa/git/trees/f01c4ac700c43cb0ad341af94f284298c2460c73"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/748a8d9cc6f874298aea6b67e69b15872fe0b482","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/748a8d9cc6f874298aea6b67e69b15872fe0b482","html_url":"https://github.com/apache/openjpa/commit/748a8d9cc6f874298aea6b67e69b15872fe0b482","comments_url":"https://api.github.com/repos/apache/openjpa/commits/748a8d9cc6f874298aea6b67e69b15872fe0b482/comments","author":null,"committer":null,"parents":[{"sha":"eaeebf20c7e89466748e4c872a6c15a732351382","url":"https://api.github.com/repos/apache/openjpa/commits/eaeebf20c7e89466748e4c872a6c15a732351382","html_url":"https://github.com/apache/openjpa/commit/eaeebf20c7e89466748e4c872a6c15a732351382"}]},{"sha":"14402214ebdfb6ee3796297f59a41f7a97013983","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0NDAyMjE0ZWJkZmI2ZWUzNzk2Mjk3ZjU5YTQxZjdhOTcwMTM5ODM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T03:58:29Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T03:58:29Z"},"message":"Bumping release number from 1.0.0-SNAPSHOT to 1.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@567937 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"852e1a9bcfbdf748b179df47538edc81286fdb5e","url":"https://api.github.com/repos/apache/openjpa/git/trees/852e1a9bcfbdf748b179df47538edc81286fdb5e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/14402214ebdfb6ee3796297f59a41f7a97013983","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/14402214ebdfb6ee3796297f59a41f7a97013983","html_url":"https://github.com/apache/openjpa/commit/14402214ebdfb6ee3796297f59a41f7a97013983","comments_url":"https://api.github.com/repos/apache/openjpa/commits/14402214ebdfb6ee3796297f59a41f7a97013983/comments","author":null,"committer":null,"parents":[{"sha":"748a8d9cc6f874298aea6b67e69b15872fe0b482","url":"https://api.github.com/repos/apache/openjpa/commits/748a8d9cc6f874298aea6b67e69b15872fe0b482","html_url":"https://github.com/apache/openjpa/commit/748a8d9cc6f874298aea6b67e69b15872fe0b482"}]},{"sha":"52d7ab797565c7b182a87128eb0a484a7e9237a7","node_id":"MDY6Q29tbWl0MjA2MzY0OjUyZDdhYjc5NzU2NWM3YjE4MmE4NzEyOGViMGE0ODRhN2U5MjM3YTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T05:26:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T05:26:15Z"},"message":"OPENJPA-321. Avoiding JDK1.5-specific String.replace() call. Also changed the method to return a well-balanced SQL, since it looks like the only usage is in a place where well-balanced-ness is possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567962 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69a2491ee15f813606b5dd41e6902ce6e7ed894a","url":"https://api.github.com/repos/apache/openjpa/git/trees/69a2491ee15f813606b5dd41e6902ce6e7ed894a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/52d7ab797565c7b182a87128eb0a484a7e9237a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/52d7ab797565c7b182a87128eb0a484a7e9237a7","html_url":"https://github.com/apache/openjpa/commit/52d7ab797565c7b182a87128eb0a484a7e9237a7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/52d7ab797565c7b182a87128eb0a484a7e9237a7/comments","author":null,"committer":null,"parents":[{"sha":"eaeebf20c7e89466748e4c872a6c15a732351382","url":"https://api.github.com/repos/apache/openjpa/commits/eaeebf20c7e89466748e4c872a6c15a732351382","html_url":"https://github.com/apache/openjpa/commit/eaeebf20c7e89466748e4c872a6c15a732351382"}]},{"sha":"56f6b437909815b1974c391d6496a1c4c5f87382","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2ZjZiNDM3OTA5ODE1YjE5NzRjMzkxZDY0OTZhMWM0YzVmODczODI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T07:03:48Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T07:03:48Z"},"message":"OPENJPA-317. Some more API Javadoc cleanup, plus a bit of last-minute renaming and method visibility changes for clarity.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567986 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89d6919672557b309d461e69636ae1ee6cdeab77","url":"https://api.github.com/repos/apache/openjpa/git/trees/89d6919672557b309d461e69636ae1ee6cdeab77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/56f6b437909815b1974c391d6496a1c4c5f87382","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/56f6b437909815b1974c391d6496a1c4c5f87382","html_url":"https://github.com/apache/openjpa/commit/56f6b437909815b1974c391d6496a1c4c5f87382","comments_url":"https://api.github.com/repos/apache/openjpa/commits/56f6b437909815b1974c391d6496a1c4c5f87382/comments","author":null,"committer":null,"parents":[{"sha":"52d7ab797565c7b182a87128eb0a484a7e9237a7","url":"https://api.github.com/repos/apache/openjpa/commits/52d7ab797565c7b182a87128eb0a484a7e9237a7","html_url":"https://github.com/apache/openjpa/commit/52d7ab797565c7b182a87128eb0a484a7e9237a7"}]},{"sha":"4d0f91ea2c0b490c8f52b213494bff3b904dcbc9","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMGY5MWVhMmMwYjQ5MGM4ZjUyYjIxMzQ5NGJmZjNiOTA0ZGNiYzk=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T11:33:26Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T11:33:26Z"},"message":"OpenJPA Release 1.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89d6919672557b309d461e69636ae1ee6cdeab77","url":"https://api.github.com/repos/apache/openjpa/git/trees/89d6919672557b309d461e69636ae1ee6cdeab77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d0f91ea2c0b490c8f52b213494bff3b904dcbc9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d0f91ea2c0b490c8f52b213494bff3b904dcbc9","html_url":"https://github.com/apache/openjpa/commit/4d0f91ea2c0b490c8f52b213494bff3b904dcbc9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d0f91ea2c0b490c8f52b213494bff3b904dcbc9/comments","author":null,"committer":null,"parents":[{"sha":"14402214ebdfb6ee3796297f59a41f7a97013983","url":"https://api.github.com/repos/apache/openjpa/commits/14402214ebdfb6ee3796297f59a41f7a97013983","html_url":"https://github.com/apache/openjpa/commit/14402214ebdfb6ee3796297f59a41f7a97013983"},{"sha":"56f6b437909815b1974c391d6496a1c4c5f87382","url":"https://api.github.com/repos/apache/openjpa/commits/56f6b437909815b1974c391d6496a1c4c5f87382","html_url":"https://github.com/apache/openjpa/commit/56f6b437909815b1974c391d6496a1c4c5f87382"}]},{"sha":"1f15d9f34d789cf092643566016e8006975f755a","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmMTVkOWYzNGQ3ODljZjA5MjY0MzU2NjAxNmU4MDA2OTc1Zjc1NWE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T11:36:14Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T11:36:14Z"},"message":"Bumping release number from 1.0.0-SNAPSHOT to 1.0.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3500c77ad0f9b687dce3569551b944e3741828b7","url":"https://api.github.com/repos/apache/openjpa/git/trees/3500c77ad0f9b687dce3569551b944e3741828b7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1f15d9f34d789cf092643566016e8006975f755a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1f15d9f34d789cf092643566016e8006975f755a","html_url":"https://github.com/apache/openjpa/commit/1f15d9f34d789cf092643566016e8006975f755a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1f15d9f34d789cf092643566016e8006975f755a/comments","author":null,"committer":null,"parents":[{"sha":"4d0f91ea2c0b490c8f52b213494bff3b904dcbc9","url":"https://api.github.com/repos/apache/openjpa/commits/4d0f91ea2c0b490c8f52b213494bff3b904dcbc9","html_url":"https://github.com/apache/openjpa/commit/4d0f91ea2c0b490c8f52b213494bff3b904dcbc9"}]},{"sha":"0b27d7313d6410a1a241fbabc354e95e21c93348","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiMjdkNzMxM2Q2NDEwYTFhMjQxZmJhYmMzNTRlOTVlMjFjOTMzNDg=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T15:13:01Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T15:13:01Z"},"message":"Added release notes for 1.0.0.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568161 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01186af9625444f8603e94f4cb1564e01a01ba96","url":"https://api.github.com/repos/apache/openjpa/git/trees/01186af9625444f8603e94f4cb1564e01a01ba96"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b27d7313d6410a1a241fbabc354e95e21c93348","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b27d7313d6410a1a241fbabc354e95e21c93348","html_url":"https://github.com/apache/openjpa/commit/0b27d7313d6410a1a241fbabc354e95e21c93348","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b27d7313d6410a1a241fbabc354e95e21c93348/comments","author":null,"committer":null,"parents":[{"sha":"1f15d9f34d789cf092643566016e8006975f755a","url":"https://api.github.com/repos/apache/openjpa/commits/1f15d9f34d789cf092643566016e8006975f755a","html_url":"https://github.com/apache/openjpa/commit/1f15d9f34d789cf092643566016e8006975f755a"}]},{"sha":"66f7dc69e76c6d26b7fdd851d24fc53875e26a9c","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2ZjdkYzY5ZTc2YzZkMjZiN2ZkZDg1MWQyNGZjNTM4NzVlMjZhOWM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T15:42:29Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T15:42:29Z"},"message":"Minor release notes fixes; exported HTML release notes to CHANGES.txt\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568170 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67e354a0a3a85de8aa2fef8e6d8ce706883c946e","url":"https://api.github.com/repos/apache/openjpa/git/trees/67e354a0a3a85de8aa2fef8e6d8ce706883c946e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/66f7dc69e76c6d26b7fdd851d24fc53875e26a9c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/66f7dc69e76c6d26b7fdd851d24fc53875e26a9c","html_url":"https://github.com/apache/openjpa/commit/66f7dc69e76c6d26b7fdd851d24fc53875e26a9c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/66f7dc69e76c6d26b7fdd851d24fc53875e26a9c/comments","author":null,"committer":null,"parents":[{"sha":"0b27d7313d6410a1a241fbabc354e95e21c93348","url":"https://api.github.com/repos/apache/openjpa/commits/0b27d7313d6410a1a241fbabc354e95e21c93348","html_url":"https://github.com/apache/openjpa/commit/0b27d7313d6410a1a241fbabc354e95e21c93348"}]},{"sha":"d493f9f2e7b43e940fde395145d24862dcfecff2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0OTNmOWYyZTdiNDNlOTQwZmRlMzk1MTQ1ZDI0ODYyZGNmZWNmZjI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T15:47:11Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T15:47:11Z"},"message":"OPENJPA-256 fixed for 1.0.0 branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568173 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f57a8cbbe1367b0cbe081a17fdb4b4dafa3032c9","url":"https://api.github.com/repos/apache/openjpa/git/trees/f57a8cbbe1367b0cbe081a17fdb4b4dafa3032c9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d493f9f2e7b43e940fde395145d24862dcfecff2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d493f9f2e7b43e940fde395145d24862dcfecff2","html_url":"https://github.com/apache/openjpa/commit/d493f9f2e7b43e940fde395145d24862dcfecff2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d493f9f2e7b43e940fde395145d24862dcfecff2/comments","author":null,"committer":null,"parents":[{"sha":"66f7dc69e76c6d26b7fdd851d24fc53875e26a9c","url":"https://api.github.com/repos/apache/openjpa/commits/66f7dc69e76c6d26b7fdd851d24fc53875e26a9c","html_url":"https://github.com/apache/openjpa/commit/66f7dc69e76c6d26b7fdd851d24fc53875e26a9c"}]},{"sha":"c743a5384f88442eead629da3f778d7099a53a3e","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3NDNhNTM4NGY4ODQ0MmVlYWQ2MjlkYTNmNzc4ZDcwOTlhNTNhM2U=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T22:13:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T22:13:19Z"},"message":"removed unneeded import\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568305 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"40d12289075d608cfe08add22098d494dda156ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/40d12289075d608cfe08add22098d494dda156ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c743a5384f88442eead629da3f778d7099a53a3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c743a5384f88442eead629da3f778d7099a53a3e","html_url":"https://github.com/apache/openjpa/commit/c743a5384f88442eead629da3f778d7099a53a3e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c743a5384f88442eead629da3f778d7099a53a3e/comments","author":null,"committer":null,"parents":[{"sha":"d493f9f2e7b43e940fde395145d24862dcfecff2","url":"https://api.github.com/repos/apache/openjpa/commits/d493f9f2e7b43e940fde395145d24862dcfecff2","html_url":"https://github.com/apache/openjpa/commit/d493f9f2e7b43e940fde395145d24862dcfecff2"}]},{"sha":"93986d55876c8ab738a6e25a238c372fee351012","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzOTg2ZDU1ODc2YzhhYjczOGE2ZTI1YTIzOGMzNzJmZWUzNTEwMTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T22:13:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T22:13:37Z"},"message":"OPENJPA-317 -- correction to a method name to better reflect what it does.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4da7dd0f05392f8e2aab415ab44852f35e75a777","url":"https://api.github.com/repos/apache/openjpa/git/trees/4da7dd0f05392f8e2aab415ab44852f35e75a777"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93986d55876c8ab738a6e25a238c372fee351012","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93986d55876c8ab738a6e25a238c372fee351012","html_url":"https://github.com/apache/openjpa/commit/93986d55876c8ab738a6e25a238c372fee351012","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93986d55876c8ab738a6e25a238c372fee351012/comments","author":null,"committer":null,"parents":[{"sha":"c743a5384f88442eead629da3f778d7099a53a3e","url":"https://api.github.com/repos/apache/openjpa/commits/c743a5384f88442eead629da3f778d7099a53a3e","html_url":"https://github.com/apache/openjpa/commit/c743a5384f88442eead629da3f778d7099a53a3e"}]},{"sha":"a5eee828784a57342d63950331419b21f0385a88","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ZWVlODI4Nzg0YTU3MzQyZDYzOTUwMzMxNDE5YjIxZjAzODVhODg=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T22:52:05Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-21T22:52:05Z"},"message":"Specify that the surefire plugin should pass -Xmx500m to the forked tests so we have ample memory to run all our tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568317 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eaa6b4c9501472f82be1b86d848e32fa0e785eef","url":"https://api.github.com/repos/apache/openjpa/git/trees/eaa6b4c9501472f82be1b86d848e32fa0e785eef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5eee828784a57342d63950331419b21f0385a88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5eee828784a57342d63950331419b21f0385a88","html_url":"https://github.com/apache/openjpa/commit/a5eee828784a57342d63950331419b21f0385a88","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5eee828784a57342d63950331419b21f0385a88/comments","author":null,"committer":null,"parents":[{"sha":"93986d55876c8ab738a6e25a238c372fee351012","url":"https://api.github.com/repos/apache/openjpa/commits/93986d55876c8ab738a6e25a238c372fee351012","html_url":"https://github.com/apache/openjpa/commit/93986d55876c8ab738a6e25a238c372fee351012"}]},{"sha":"dc3615c6133a80fb22c433d473999f72f6e94def","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjMzYxNWM2MTMzYTgwZmIyMmM0MzNkNDczOTk5ZjcyZjZlOTRkZWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T23:28:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T23:28:33Z"},"message":"Changed oddly-named methods. Looks like the result of a bum refactoring.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9a26374d7481141354109f1f1cad2486e0a21f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9a26374d7481141354109f1f1cad2486e0a21f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc3615c6133a80fb22c433d473999f72f6e94def","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc3615c6133a80fb22c433d473999f72f6e94def","html_url":"https://github.com/apache/openjpa/commit/dc3615c6133a80fb22c433d473999f72f6e94def","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc3615c6133a80fb22c433d473999f72f6e94def/comments","author":null,"committer":null,"parents":[{"sha":"a5eee828784a57342d63950331419b21f0385a88","url":"https://api.github.com/repos/apache/openjpa/commits/a5eee828784a57342d63950331419b21f0385a88","html_url":"https://github.com/apache/openjpa/commit/a5eee828784a57342d63950331419b21f0385a88"}]},{"sha":"ef56ba140684756696414a848f0d5179c950af07","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmNTZiYTE0MDY4NDc1NjY5NjQxNGE4NDhmMGQ1MTc5Yzk1MGFmMDc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T00:06:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T00:06:16Z"},"message":"OPENJPA-293. Better validation that the persistent types to subclass have properly been found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8a71f62c2865731b44df6de9bd36e42c930e819","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8a71f62c2865731b44df6de9bd36e42c930e819"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef56ba140684756696414a848f0d5179c950af07","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef56ba140684756696414a848f0d5179c950af07","html_url":"https://github.com/apache/openjpa/commit/ef56ba140684756696414a848f0d5179c950af07","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef56ba140684756696414a848f0d5179c950af07/comments","author":null,"committer":null,"parents":[{"sha":"dc3615c6133a80fb22c433d473999f72f6e94def","url":"https://api.github.com/repos/apache/openjpa/commits/dc3615c6133a80fb22c433d473999f72f6e94def","html_url":"https://github.com/apache/openjpa/commit/dc3615c6133a80fb22c433d473999f72f6e94def"}]},{"sha":"ff13fe7b6ad33457aff4302606b22b3b2b43d76d","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmMTNmZTdiNmFkMzM0NTdhZmY0MzAyNjA2YjIyYjNiMmI0M2Q3NmQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T00:08:32Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T00:08:32Z"},"message":"OPENJPA-325. Unit test to come later.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568338 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"591a2cb861218653833380f57c0a3107110d64a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/591a2cb861218653833380f57c0a3107110d64a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff13fe7b6ad33457aff4302606b22b3b2b43d76d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff13fe7b6ad33457aff4302606b22b3b2b43d76d","html_url":"https://github.com/apache/openjpa/commit/ff13fe7b6ad33457aff4302606b22b3b2b43d76d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff13fe7b6ad33457aff4302606b22b3b2b43d76d/comments","author":null,"committer":null,"parents":[{"sha":"ef56ba140684756696414a848f0d5179c950af07","url":"https://api.github.com/repos/apache/openjpa/commits/ef56ba140684756696414a848f0d5179c950af07","html_url":"https://github.com/apache/openjpa/commit/ef56ba140684756696414a848f0d5179c950af07"}]},{"sha":"6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiYTZjZTRlN2VhMDFiMWM3ZDczYmNmZDAxZmYwZDliY2E4ZDQ4NjM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T01:33:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T01:33:40Z"},"message":"OpenJPA used to rely on being able to implicitly specify a value for a @GeneratedValue field when using an IDENTITY generation strategy. Now that we do not allow that behavior, OpenJPA was failing to generate IDs properly in some cases. Fixed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efe453a17d37f5f8b93f55b5aa8fc8e3bc11290f","url":"https://api.github.com/repos/apache/openjpa/git/trees/efe453a17d37f5f8b93f55b5aa8fc8e3bc11290f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","html_url":"https://github.com/apache/openjpa/commit/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/comments","author":null,"committer":null,"parents":[{"sha":"ff13fe7b6ad33457aff4302606b22b3b2b43d76d","url":"https://api.github.com/repos/apache/openjpa/commits/ff13fe7b6ad33457aff4302606b22b3b2b43d76d","html_url":"https://github.com/apache/openjpa/commit/ff13fe7b6ad33457aff4302606b22b3b2b43d76d"}]},{"sha":"3ae441064b7df23ff0d6a90e1ada74b1886c02e3","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhZTQ0MTA2NGI3ZGYyM2ZmMGQ2YTkwZTFhZGE3NGIxODg2YzAyZTM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-22T02:40:59Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-22T02:40:59Z"},"message":"Fixed incorrect version in JTA jar name (which was preventing it from being included in the assembly after the removal of the JCA jar dependency)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7f833fa5f4a82e494fe650a16a32f60c369364b7","url":"https://api.github.com/repos/apache/openjpa/git/trees/7f833fa5f4a82e494fe650a16a32f60c369364b7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3ae441064b7df23ff0d6a90e1ada74b1886c02e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3ae441064b7df23ff0d6a90e1ada74b1886c02e3","html_url":"https://github.com/apache/openjpa/commit/3ae441064b7df23ff0d6a90e1ada74b1886c02e3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3ae441064b7df23ff0d6a90e1ada74b1886c02e3/comments","author":null,"committer":null,"parents":[{"sha":"6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","url":"https://api.github.com/repos/apache/openjpa/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","html_url":"https://github.com/apache/openjpa/commit/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863"}]},{"sha":"4b9b0fc4a375d49b43af1155e5b9b76398727d4c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiOWIwZmM0YTM3NWQ0OWI0M2FmMTE1NWU1YjliNzYzOTg3MjdkNGM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T18:21:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T18:21:03Z"},"message":"OPENJPA-293. Allow user configuration of error vs. warning if managed classes are not enhanced.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568721 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e17fb0593ea4d5a968643e8f0770087f3b15c0f9","url":"https://api.github.com/repos/apache/openjpa/git/trees/e17fb0593ea4d5a968643e8f0770087f3b15c0f9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","html_url":"https://github.com/apache/openjpa/commit/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/comments","author":null,"committer":null,"parents":[{"sha":"3ae441064b7df23ff0d6a90e1ada74b1886c02e3","url":"https://api.github.com/repos/apache/openjpa/commits/3ae441064b7df23ff0d6a90e1ada74b1886c02e3","html_url":"https://github.com/apache/openjpa/commit/3ae441064b7df23ff0d6a90e1ada74b1886c02e3"}]},{"sha":"1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOGE1NDg4Y2ExMTM4Y2MzZWQ0MmEyMTViM2U5YTI2ODJiZjdlNTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T18:34:42Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T18:34:42Z"},"message":"OPENJPA-293. Docs changes to reflect new settings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568723 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b704753074d6656140ae55911cab3922ac951031","url":"https://api.github.com/repos/apache/openjpa/git/trees/b704753074d6656140ae55911cab3922ac951031"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57","html_url":"https://github.com/apache/openjpa/commit/1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57/comments","author":null,"committer":null,"parents":[{"sha":"4b9b0fc4a375d49b43af1155e5b9b76398727d4c","url":"https://api.github.com/repos/apache/openjpa/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","html_url":"https://github.com/apache/openjpa/commit/4b9b0fc4a375d49b43af1155e5b9b76398727d4c"}]},{"sha":"cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmYmMyMTMxMzQ3OWRmOGYxY2JiZmI2OWRjOGFiMjJjZTRkOGNiYTA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-22T21:54:11Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-22T21:54:11Z"},"message":"OPENJPA-326.  Porting the change for the 1.0.0 branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac803852fd3576d188df84104520f857a0e9fa6e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac803852fd3576d188df84104520f857a0e9fa6e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","html_url":"https://github.com/apache/openjpa/commit/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0/comments","author":null,"committer":null,"parents":[{"sha":"1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57","url":"https://api.github.com/repos/apache/openjpa/commits/1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57","html_url":"https://github.com/apache/openjpa/commit/1b8a5488ca1138cc3ed42a215b3e9a2682bf7e57"}]},{"sha":"849f746573e5dcce0ab89ca7f3021d495d43ee56","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0OWY3NDY1NzNlNWRjY2UwYWI4OWNhN2YzMDIxZDQ5NWQ0M2VlNTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-24T05:27:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-24T05:27:43Z"},"message":"Minor logging / exception handling improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@569253 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","html_url":"https://github.com/apache/openjpa/commit/849f746573e5dcce0ab89ca7f3021d495d43ee56","comments_url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56/comments","author":null,"committer":null,"parents":[{"sha":"cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","url":"https://api.github.com/repos/apache/openjpa/commits/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","html_url":"https://github.com/apache/openjpa/commit/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0"}]}],"files":[{"sha":"c74545e7b2dada6fc0d06e78d7245a57c8da6c3d","filename":"README.txt","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/README.txt","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/README.txt?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -1,3 +1,4 @@\n-The Open JPA podling of the Apache incubator\n-\n+Apache OpenJPA Project\n+======================\n \n+For useful information, navigate to http://openjpa.apache.org"},{"sha":"123702f305914b53edb83e239dbbe7c57d4025bd","filename":"board/2007-06.txt","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/board/2007-06.txt","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/board/2007-06.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/board/2007-06.txt?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,25 @@\n+2007-06 Status Report for the Apache OpenJPA Project\n+\n+Highlights\n+\n+In its first month following graduation from the incubator,\n+OpenJPA has begun work on its first official release, 1.0.0.\n+\n+Community\n+\n+Email traffic on the lists continues to grow as more people\n+discover that the Java EE 5 specification really does allow\n+pluggable persistence implementations.\n+\n+Governance\n+\n+The TLP migration of the svn repository, mail lists, unix \n+aliases, and openjpa web site have been completed. The \n+incubator web site has been updated to indicate that openjpa\n+is no longer in incubation.\n+\n+Release naming policy is being discussed and resolution is \n+expected prior to the first release as a TLP.\n+\n+Michael Dick was added to the OpenJPA PMC.\n+"},{"sha":"26c3976aba73cf5e9b946db7a4e2916920741386","filename":"board/2007-07.txt","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/board/2007-07.txt","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/board/2007-07.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/board/2007-07.txt?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,29 @@\n+2007-07 Status Report for the Apache OpenJPA Project\n+\n+Highlights\n+\n+OpenJPA continues to work toward its first release as a TLP, to be called\n+OpenJPA 1.0.0. There are currently 46 open issues that have been\n+identified as \"close before 1.0.0\".\n+\n+Community\n+\n+The users@openjpa.apache.org mailing list was started upon graduation\n+and already has over 100 posts, from 16 unique non-committer posters.\n+\n+A public face-to-face meeting is being discussed for sometime this summer\n+in the bay area.  We're hoping that the planning date is far enough out \n+that many interested folks can join. We've invited Bull Pugh (FindBugs)\n+to give us a presentation.\n+\n+Governance\n+\n+Release naming policy for the first release has been resolved.\n+\n+David Ezzio was voted as a new committer (and new to Apache).\n+\n+The PMC continues to track contributors with an eye toward making them\n+committers.\n+\n+Releases\n+"},{"sha":"e88d6c4b8559f48bc56457a7e3366a272c47c054","filename":"board/2007-08.txt","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/board/2007-08.txt","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/board/2007-08.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/board/2007-08.txt?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,21 @@\n+2007-08 Status Report for the Apache OpenJPA Project\n+\n+Highlights\n+\n+OpenJPA continues to work toward its first release as a TLP, to be called\n+OpenJPA 1.0.0. There are currently 44 open issues that have been\n+identified as \"close before 1.0.0\".\n+\n+Community\n+\n+A public face-to-face meeting was held August 6 and 7, hosted by\n+BEA in San Jose. The meeting was advertised on the Apache party alias\n+in addition to the openjpa dev alias.\n+\n+Governance\n+\n+The PMC continues to track contributors with an eye toward making them\n+committers.\n+\n+Releases\n+"},{"sha":"ed659fa65c922d40087acbc31e26e3082c7d1839","filename":"openjpa-all/pom.xml","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,14 +22,24 @@\n     xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n         http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n-    <artifactId>openjpa-all</artifactId>\n+    <artifactId>openjpa</artifactId>\n     <packaging>jar</packaging>\n     <name>OpenJPA Aggregate Jar</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n+    <properties>\n+        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk/openjpa-all</scm.dir>\n+    </properties>\n+\n+    <scm>\n+        <connection>scm:svn:http://${scm.dir}</connection>\n+        <developerConnection>scm:svn:https://${scm.dir}</developerConnection>\n+        <url>https://${scm.dir}</url>\n+    </scm>\n+\n     <build>\n         <plugins>\n             <plugin>\n@@ -92,7 +102,9 @@\n                     <archive>\n                         <manifestEntries>\n                             <Premain-Class>\n-                                org.apache.openjpa.enhance.PCEnhancerAgent</Premain-Class>\n+                                org.apache.openjpa.enhance.PCEnhancerAgent\n+                            </Premain-Class>\n+                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                         </manifestEntries>\n                     </archive>\n                 </configuration>"},{"sha":"529db74d7cde0d3d549102b8dab48aca1c49c4d5","filename":"openjpa-examples/pom.xml","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,11 +26,11 @@\n     <packaging>jar</packaging>\n     <name>OpenJPA Persistence Examples</name>\n     <description>OpenJPA Persistence Examples</description>\n-    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <url>http://openjpa.apache.org</url>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -66,6 +66,13 @@\n                 <configuration>\n                     <source>1.5</source>\n                     <target>1.5</target>\n+                    <!--\n+                        need to skip reversemapping since it depends on\n+                        classes that are generated by the build.xml file\n+                    -->\n+                    <excludes>\n+                        <exclude>**/reversemapping/Main.java</exclude>\n+                    </excludes>\n                 </configuration>\n             </plugin>\n             <!-- ###"},{"sha":"2593fb0f3aaf5c1316aba021654a3b10c80e8078","filename":"openjpa-examples/src/main/java/META-INF/persistence.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/META-INF/persistence.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,6 +26,7 @@\n         See: http://issues.apache.org/jira/browse/OPENJPA-78\n     -->\n     <persistence-unit name=\"none\" transaction-type=\"RESOURCE_LOCAL\">\n+        <mapping-file>reversemapping/orm.xml</mapping-file>\n         <class>hellojpa.Message</class>\n         <class>relations.Deity</class>\n     </persistence-unit>\n@@ -75,4 +76,9 @@\n     <persistence-unit name=\"relations\" transaction-type=\"RESOURCE_LOCAL\">\n         <class>relations.Deity</class>\n     </persistence-unit>\n+\n+    <!-- persistence unit for the \"reversemapping\" example -->\n+    <persistence-unit name=\"reversemapping\" transaction-type=\"RESOURCE_LOCAL\">\n+        <mapping-file>reversemapping/orm.xml</mapping-file>\n+    </persistence-unit>\n </persistence>"},{"sha":"34d748e9de4d60194debe0f0cbd921b133b1e5bc","filename":"openjpa-examples/src/main/java/build.xml","status":"modified","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/build.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/build.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,6 +22,14 @@\n     <property name=\"parent\" value=\"${basedir}/..\"/>\n     <property name=\"root\" value=\"${parent}/..\"/>\n \n+    <!-- database connection properties -->\n+    <property name=\"dbdriver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n+    <property name=\"dburl\"\n+        value=\"jdbc:derby:${basedir}/${example}-database;create=true\"/>\n+    <property name=\"dbuser\" value=\"\"/>\n+    <property name=\"dbpass\" value=\"\"/>\n+\n+\n     <target name=\"usagewarning\">\n         <fail>\n Please traverse to a sub-directory and run \"ant\" from there.\n@@ -43,9 +51,9 @@ Please traverse to a sub-directory and run \"ant\" from there.\n     </path>\n     <pathconvert property=\"javaagent\" refid=\"javaagent\"/>\n \n-    <target name=\"clean\"\n+    <target name=\"clean\" depends=\"pre-clean\"\n         description=\"Clean up compiled files and generated database files\">\n-        <delete includeemptydirs=\"true\">\n+        <delete includeemptydirs=\"yes\">\n             <fileset dir=\"${basedir}\">\n                 <include name=\"*.class\"/>\n                 <include name=\"*.log\"/>\n@@ -55,9 +63,18 @@ Please traverse to a sub-directory and run \"ant\" from there.\n         </delete>\n     </target>\n \n-    <target name=\"compile\" description=\"Compile the example java files\">\n+    <!-- this target can be overridden by the sub-build -->\n+    <target name=\"pre-clean\" description=\"Pre-clean phase\">\n+    </target>\n+\n+    <target name=\"compile\" depends=\"pre-compile\"\n+        description=\"Compile the example java files\">\n         <javac srcdir=\"${parent}\" classpathref=\"classpath\"\n-            includes=\"${example}/**.java\"/>\n+            debug=\"yes\" includes=\"${example}/**.java\"/>\n+    </target>\n+\n+    <!-- this target can be overridden by the sub-build -->\n+    <target name=\"pre-compile\" description=\"Pre-compilation phase\">\n     </target>\n \n     <target name=\"run\" depends=\"compile\"\n@@ -84,9 +101,10 @@ Please traverse to a sub-directory and run \"ant\" from there.\n                 provided you ensure it is accessible in the classpath.\n             -->\n             <sysproperty key=\"openjpa.ConnectionDriverName\"\n-                value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n-            <sysproperty key=\"openjpa.ConnectionURL\"\n-                value=\"jdbc:derby:${example}-database;create=true\"/>\n+                value=\"${dbdriver}\"/>\n+            <sysproperty key=\"openjpa.ConnectionURL\" value=\"${dburl}\"/>\n+            <sysproperty key=\"openjpa.ConnectionUserName\" value=\"${dbuser}\"/>\n+            <sysproperty key=\"openjpa.ConnectionPassword\" value=\"${dbpass}\"/>\n \n             <!--\n                 Tell OpenJPA to automatically create tables in the database"},{"sha":"bffbdf13f02c940d2ebfd0a3ee665e975e238bee","filename":"openjpa-examples/src/main/java/hellojpa/Main.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/hellojpa/Main.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/hellojpa/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/hellojpa/Main.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -64,7 +64,7 @@ public static void main(String[] args) {\n \n         // Go through each of the entities and print out each of their\n         // messages, as well as the date on which it was created \n-        for (Message m : (List<Message>)q.getResultList()) {\n+        for (Message m : (List<Message>) q.getResultList()) {\n             System.out.println(m.getMessage()\n                 + \" (created on: \" + m.getCreated() + \")\"); \n         }"},{"sha":"d9a58cf130a3c1d7e9a3029e6df7073c8a0a1096","filename":"openjpa-examples/src/main/java/relations/Main.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/relations/Main.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/relations/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/relations/Main.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -135,33 +135,33 @@ public static void runQueries(EntityManager em) {\n \n         // Go through each of the entities and print out each of their\n         // messages, as well as the date on which it was created \n-        for (Deity m : (List<Deity>)q.getResultList()) {\n+        for (Deity m : (List<Deity>) q.getResultList()) {\n             System.out.println(m.getName());\n         }\n \n         q = em.createQuery(\"select x from Deity x \"\n             + \"where x.father.name = 'Zeus'\");\n \n-        for (Deity m : (List<Deity>)q.getResultList()) {\n+        for (Deity m : (List<Deity>) q.getResultList()) {\n             System.out.println(\"Child of Zeus: \" + m.getName());\n         }\n \n         q = em.createNamedQuery(\"siblings\").\n             setParameter(1, em.getReference(Deity.class, \"Rhea\"));\n \n-        for (Deity m : (List<Deity>)em.createNamedQuery(\"siblings\").\n+        for (Deity m : (List<Deity>) em.createNamedQuery(\"siblings\").\n             setParameter(1, em.getReference(Deity.class, \"Rhea\")).\n             getResultList()) {\n             System.out.println(\"Siblings of Rhea: \" + m.getName());\n         }\n \n-        for (Deity m : (List<Deity>)em.createNamedQuery(\"half-siblings\").\n+        for (Deity m : (List<Deity>) em.createNamedQuery(\"half-siblings\").\n             setParameter(1, em.getReference(Deity.class, \"Apollo\")).\n             getResultList()) {\n             System.out.println(\"Half-siblings of Apollo: \" + m.getName());\n         }\n \n-        for (Deity m : (List<Deity>)em.createNamedQuery(\"cousins\").\n+        for (Deity m : (List<Deity>) em.createNamedQuery(\"cousins\").\n             setParameter(1, em.getReference(Deity.class, \"Leto\")).\n             getResultList()) {\n             System.out.println(\"Cousins of Leto: \" + m.getName());"},{"sha":"fb9f787aab43ad30cf1e363a62b0136dd7d4cb92","filename":"openjpa-examples/src/main/java/reversemapping/Main.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/Main.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/Main.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package reversemapping;\n+\n+import java.text.*;\n+import java.util.*;\n+import javax.persistence.*;\n+\n+\n+/** \n+ * A simple program that uses the reverse-mapped classes from the airlines\n+ * schema to print out a list of schedules flightes and the \n+ * projected profits from them.\n+ */\n+public class Main {\n+\n+    private static void print(String msg) {\n+        System.out.println(msg);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void main(String[] args) {\n+        // Create a new EntityManagerFactory using the System properties.\n+        // The \"reversemapping\" name will be used to configure based on the\n+        // corresponding name in the META-INF/persistence.xml file\n+        EntityManagerFactory factory = Persistence.\n+            createEntityManagerFactory(\"reversemapping\",\n+                System.getProperties());\n+\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        EntityManager em = factory.createEntityManager();\n+\n+        List<Availability> schedule = (List<Availability>)\n+            em.createQuery(\"select avail from Availability avail \"\n+            + \"join fetch avail.flight \"\n+            + \"order by avail.flightDate asc, avail.flight.departureTime asc\").\n+                getResultList();\n+       for (Availability avail : schedule) {\n+           Flight flight = avail.getFlight();\n+\n+           // note that Availability.getFlightDate is just a DATE with no\n+           // time component, and Flight.getDepartureTime() is just a TIME\n+           // with no date component\n+           print(new SimpleDateFormat(\"MMM dd, yyyy\").\n+                    format(avail.getFlightDate())\n+               + \" flight \"\n+               + flight.getFlightId() + \" departs \"\n+               + new SimpleDateFormat(\"hh:mm aa\").\n+                    format(flight.getDepartureTime())\n+               + \" from \" + flight.getOrigAirport()\n+               + \" to \" + flight.getDestAirport());\n+\n+            // look up the Airline reference based on the flight ID\n+            Airline airline = em.getReference(Airline.class,\n+                flight.getFlightId().substring(0, 2));\n+            double ratePerMile = airline.getBasicRate();\n+            double rate = flight.getMiles() * ratePerMile;\n+\n+            int econTaken = avail.getEconomySeatsTaken();\n+            int businessTaken = avail.getBusinessSeatsTaken();\n+            int firstclassTaken = avail.getFirstclassSeatsTaken();\n+\n+            double income = (econTaken * rate)\n+                + (businessTaken * rate)\n+                + (businessTaken * rate * airline.getBusinessLevelFactor())\n+                + (firstclassTaken * rate)\n+                + (firstclassTaken * rate * airline.getFirstclassLevelFactor());\n+\n+            int seatsTaken = econTaken + businessTaken + firstclassTaken;\n+            int totalSeats = airline.getEconomySeats()\n+                    + airline.getBusinessSeats()\n+                    + airline.getFirstclassSeats();\n+            double percentFull = (double) seatsTaken / (double) totalSeats;\n+\n+            print(\"  income from flight: \"\n+                + NumberFormat.getCurrencyInstance().format(income)\n+                + \" with \" + seatsTaken + \" seats taken (\"\n+                + NumberFormat.getPercentInstance().format(percentFull)\n+                + \" full)\");\n+\n+            double gallonsPerMile = 2.0d; // approx for a small plane\n+            double totalGallons = gallonsPerMile * flight.getMiles();\n+            double costPerGallon = 0.50d; // approx 2006 prices\n+            double totalFuelCost = totalGallons * costPerGallon;\n+            print(\"  fuel cost of flight over \"\n+                + NumberFormat.getNumberInstance().format(flight.getMiles())\n+                + \" miles: \"\n+                + NumberFormat.getCurrencyInstance().format(totalFuelCost));\n+\n+            double totalCost = totalFuelCost;\n+\n+            print(\"  total profit: \" + NumberFormat.getCurrencyInstance().\n+                format(income - totalCost));\n+       } \n+\n+        // Again, it is always good to clean up after ourselves\n+        em.close();\n+\n+        factory.close();\n+    }\n+}"},{"sha":"729f1f6f490dace31d2183e8a5be4e099c2f1165","filename":"openjpa-examples/src/main/java/reversemapping/build.xml","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/build.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/build.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/build.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,92 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<project name=\"hellojpa\" default=\"run\">\n+    <property name=\"example\" value=\"reversemapping\"/>\n+    <import file=\"../build.xml\"/>\n+\n+    <!-- when we clean, also remove all of the auto-generated files -->\n+    <target name=\"pre-clean\" description=\"Pre-clean phase\">\n+        <delete includeemptydirs=\"true\">\n+            <fileset dir=\"${basedir}\">\n+                <include name=\"orm.xml\"/>\n+            </fileset>\n+            <fileset dir=\"${basedir}\">\n+                <include name=\"*.java\"/>\n+                <include name=\"*.java~\"/>\n+                <contains text=\"Auto-generated by:\"/>\n+            </fileset>\n+        </delete>\n+    </target>\n+\n+    <!--\n+        Before we compile and run, we first initialize a\n+        database and run the reverse mapping tool on it\n+    -->\n+    <target name=\"pre-compile\" depends=\"initialize-db,reverse-map-schema\"\n+        description=\"Pre-compilation phase\">\n+    </target>\n+\n+    <target name=\"initialize-db\" unless=\"initialize-db-skip\"\n+        description=\"Drop then re-create the database\">\n+        <!-- first make sure the database is empty -->\n+        <sql src=\"schema/dropdb.sql\"\n+            driver=\"${dbdriver}\" url=\"${dburl}\"\n+            userid=\"${dbuser}\" password=\"${dbpass}\"\n+            onerror=\"continue\" classpathref=\"classpath\"/>\n+\n+        <!-- build the database -->\n+        <sql\n+            driver=\"${dbdriver}\" url=\"${dburl}\"\n+            userid=\"${dbuser}\" password=\"${dbpass}\" classpathref=\"classpath\">\n+            <transaction src=\"schema/ToursDB_schema.sql\"/>\n+            <transaction src=\"schema/loadCOUNTRIES.sql\"/>\n+            <transaction src=\"schema/loadCITIES.sql\"/>\n+            <transaction src=\"schema/loadAIRLINES.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTS1.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTS2.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTAVAILABILITY1.sql\"/>\n+            <transaction src=\"schema/loadFLIGHTAVAILABILITY2.sql\"/>\n+        </sql>\n+    </target>\n+\n+    <target name=\"reverse-map-schema\" depends=\"initialize-db\"\n+        unless=\"reverse-map-schema-skip\"\n+        description=\"Generate java files from the database schema\">\n+        <!-- now run the tool to generate java files from the db schema -->\n+        <taskdef name=\"reversemappingtool\" classpathref=\"classpath\"\n+            classname=\"org.apache.openjpa.jdbc.ant.ReverseMappingToolTask\"/>\n+        <reversemappingtool package=\"reversemapping\" directory=\"${basedir}\"\n+            innerIdentityClasses=\"true\"\n+            customizerProperties=\"${basedir}/reverse-customizer.properties\">\n+            <config connectiondrivername=\"${dbdriver}\" connectionurl=\"${dburl}\"\n+                connectionusername=\"${dbuser}\" connectionpassword=\"${dbpass}\"/>\n+            <codeformat tabSpaces=\"4\" spaceBeforeParen=\"false\"\n+                braceOnSameLine=\"true\"/>\n+        </reversemappingtool>\n+\n+        <!--\n+            the reverse mapping tool always outputs the orm.xml file to\n+            the current directory; move it to the base directory in case\n+            we are executing this build file from a different directory.\n+        -->\n+        <move file=\"${user.dir}/orm.xml\"\n+            tofile=\"${basedir}/orm.xml\" failonerror=\"false\"/>\n+    </target>\n+</project>"},{"sha":"cebf2476b9afbc0030f1b35f67a682c125fe3a35","filename":"openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/reverse-customizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# Fix generated names to be more \"java-like\"\n+\n+reversemapping.Airlines.rename: reversemapping.Airline\n+reversemapping.Airline.airline.rename: airlineCode\n+reversemapping.Airline.airlineFull.rename: fullName\n+\n+reversemapping.Cities.rename: reversemapping.City\n+\n+reversemapping.Countries.rename: reversemapping.Country\n+\n+reversemapping.Flightavailability.rename: reversemapping.Availability\n+reversemapping.Availability.identity: Availability$ID\n+\n+reversemapping.Flights.rename: reversemapping.Flight\n+reversemapping.Flight.identity: Flight$ID\n+reversemapping.Flight.departTime.rename: departureTime\n+reversemapping.Flight.arriveTime.rename: arrivalTime\n+reversemapping.Flight.availabilitys.rename: availabilities\n+\n+reversemapping.Country.citys.rename: cities\n+\n+\n+"},{"sha":"ab3c84ebb1a8787cc3d3f36749482d39e5ef53cc","filename":"openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/ToursDB_schema.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,174 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+CREATE TABLE AIRLINES\n+   (\n+      AIRLINE CHAR(2) NOT NULL ,\n+      AIRLINE_FULL VARCHAR(24),\n+      BASIC_RATE DOUBLE PRECISION,\n+      DISTANCE_DISCOUNT DOUBLE PRECISION,\n+      BUSINESS_LEVEL_FACTOR DOUBLE PRECISION,\n+      FIRSTCLASS_LEVEL_FACTOR DOUBLE PRECISION,\n+      ECONOMY_SEATS INTEGER,\n+      BUSINESS_SEATS INTEGER,\n+      FIRSTCLASS_SEATS INTEGER\n+   );\n+\n+\n+ALTER TABLE AIRLINES\n+   ADD CONSTRAINT AIRLINES_PK Primary Key (\n+      AIRLINE);\n+\n+\n+-- \\************************************************************\\\n+\n+CREATE TABLE COUNTRIES\n+   (\n+      COUNTRY VARCHAR(26) NOT NULL,\n+      COUNTRY_ISO_CODE CHAR(2) NOT NULL ,\n+      REGION VARCHAR(26)\n+   );\n+ \n+\n+ALTER TABLE COUNTRIES\n+   ADD CONSTRAINT COUNTRIES_PK Primary Key (\n+      COUNTRY_ISO_CODE);\n+\n+ALTER TABLE COUNTRIES\n+   ADD CONSTRAINT COUNTRIES_UNQ_NM Unique (\n+      COUNTRY);\n+\n+\n+ALTER TABLE COUNTRIES\n+   ADD CONSTRAINT COUNTRIES_UC\n+   CHECK (country_ISO_code = upper(country_ISO_code) );\n+\n+\n+-- \\************************************************************\\\n+\n+CREATE TABLE CITIES\n+   (\n+      CITY_ID INTEGER NOT NULL ,\n+      CITY_NAME VARCHAR(24) NOT NULL,\n+\tCOUNTRY VARCHAR(26) NOT NULL,\n+\tAIRPORT VARCHAR(3),\n+\tLANGUAGE  VARCHAR(16),\n+      COUNTRY_ISO_CODE CHAR(2) \n+   );\n+\n+\n+ALTER TABLE CITIES\n+   ADD CONSTRAINT CITIES_PK Primary Key (\n+      CITY_ID);\n+\n+ALTER TABLE CITIES\n+   ADD CONSTRAINT COUNTRIES_FK Foreign Key (\n+      COUNTRY_ISO_CODE)\n+   REFERENCES COUNTRIES (\n+      COUNTRY_ISO_CODE);\n+\n+\n+-- \\************************************************************\\\n+\n+CREATE TABLE FLIGHTS\n+   (\n+      FLIGHT_ID CHAR(6) NOT NULL ,\n+      SEGMENT_NUMBER INTEGER NOT NULL ,\n+      ORIG_AIRPORT CHAR(3),\n+      DEPART_TIME TIME,\n+      DEST_AIRPORT CHAR(3),\n+      ARRIVE_TIME TIME,\n+      MEAL CHAR(1),\n+      FLYING_TIME DOUBLE PRECISION,\n+      MILES INTEGER,\n+      AIRCRAFT VARCHAR(6)\n+   );\n+\n+CREATE INDEX DESTINDEX ON FLIGHTS (\n+      DEST_AIRPORT) ;\n+  \n+CREATE INDEX ORIGINDEX ON FLIGHTS (\n+      ORIG_AIRPORT) ;\n+ \n+ALTER TABLE FLIGHTS\n+   ADD CONSTRAINT FLIGHTS_PK Primary Key (\n+      FLIGHT_ID,\n+      SEGMENT_NUMBER);\n+\n+ALTER TABLE FLIGHTS\n+   ADD CONSTRAINT MEAL_CONSTRAINT\n+   CHECK (meal IN ('B', 'L', 'D', 'S'));\n+\n+\n+-- \\************************************************************\\\n+\n+CREATE TABLE FLIGHTAVAILABILITY\n+   (\n+      FLIGHT_ID CHAR(6) NOT NULL ,\n+      SEGMENT_NUMBER INTEGER NOT NULL ,\n+      FLIGHT_DATE DATE NOT NULL ,\n+      ECONOMY_SEATS_TAKEN INTEGER DEFAULT 0,\n+      BUSINESS_SEATS_TAKEN INTEGER DEFAULT 0,\n+      FIRSTCLASS_SEATS_TAKEN INTEGER DEFAULT 0\n+   );\n+\n+\n+ALTER TABLE FLIGHTAVAILABILITY\n+   ADD CONSTRAINT FLIGHTAVAIL_PK Primary Key (\n+      FLIGHT_ID,\n+      SEGMENT_NUMBER,\n+      FLIGHT_DATE);\n+\n+ALTER TABLE FLIGHTAVAILABILITY\n+   ADD CONSTRAINT FLIGHTS_FK2 Foreign Key (\n+      FLIGHT_ID,\n+      SEGMENT_NUMBER)\n+   REFERENCES FLIGHTS (\n+      FLIGHT_ID,\n+      SEGMENT_NUMBER);\n+\n+\n+-- \\************************************************************\\\n+\n+CREATE TABLE MAPS\n+   (\n+      MAP_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+      MAP_NAME VARCHAR(24) NOT NULL,\n+      REGION VARCHAR(26),\n+      AREA DECIMAL(8,4) NOT NULL,\n+      PHOTO_FORMAT VARCHAR(26) NOT NULL,\n+      PICTURE BLOB(102400),\n+      UNIQUE (MAP_ID, MAP_NAME)\n+   );\n+\n+\n+-- \\************************************************************\\\n+\n+CREATE TABLE FLIGHTS_HISTORY\n+   (\n+      FLIGHT_ID CHAR(6),\n+      SEGMENT_NUMBER INTEGER,\n+      ORIG_AIRPORT CHAR(3),\n+      DEPART_TIME TIME,\n+      DEST_AIRPORT CHAR(3),\n+      ARRIVE_TIME TIME,\n+      MEAL CHAR(1),\n+      FLYING_TIME DOUBLE PRECISION,\n+      MILES INTEGER,\n+      AIRCRAFT VARCHAR(6), \n+      STATUS VARCHAR (20)\n+   );\n+\n+"},{"sha":"02d5394accaae596cd1c4c29971f69f58f9d8f4d","filename":"openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/dropdb.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,21 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--    http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+DROP TABLE FLIGHTS_HISTORY;\n+DROP TABLE FLIGHTAVAILABILITY;\n+DROP TABLE FLIGHTS;\n+DROP TABLE MAPS;\n+DROP TABLE AIRLINES;\n+DROP TABLE CITIES;\n+DROP TABLE COUNTRIES;"},{"sha":"5c1bf42b52c60e352101e5ab98de26d2f5d83936","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadAIRLINES.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,17 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into AIRLINES values ('AA','Amazonian Airways',0.18,0.03,0.5,1.5,20,10,5) ;\n+insert into AIRLINES values ('US','Union Standard Airlines',0.19,0.05,0.4,1.6,20,10,5);"},{"sha":"bd304668f0f3a747a629964ca0740dca037fbc2f","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadCITIES.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,102 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into CITIES VALUES (1,'Amsterdam','Netherlands','AMS','Dutch','NL');\n+insert into CITIES VALUES (2,'Athens','Greece','ATH','Greek','GR');\n+insert into CITIES VALUES (3,'Auckland','New Zealand','AKL','English','NZ');\n+insert into CITIES VALUES (4,'Beirut','Lebanon','BEY','Arabic','LB');\n+insert into CITIES VALUES (5,'Bogota','Colombia','BOG','Spanish','CO');\n+insert into CITIES VALUES (6,'Bombay','India','BOM','Hindi','IN');\n+insert into CITIES VALUES (7,'Budapest','Hungary','BUD','Hungarian','HU');\n+insert into CITIES VALUES (8,'Buenos Aires','Argentina','BUE','Spanish','AR');\n+insert into CITIES VALUES (9,'Cairo','Egypt','CAI','Arabic','EG');\n+insert into CITIES VALUES (10,'Calcutta','India','CCU','Bengali','IN');\n+insert into CITIES VALUES (11,'Cape Town','South Africa','CPT','English','ZA');\n+insert into CITIES VALUES (12,'Caracas','Venezuela','CCS','Spanish','VE');\n+insert into CITIES VALUES (13,'Casablanca','Morocco','CAS','Arabic','MA');\n+insert into CITIES VALUES (14,'Copenhagen','Denmark','CPH','Danish','DK');\n+insert into CITIES VALUES (15,'Dublin','Ireland','DUB','English','IE');\n+insert into CITIES VALUES (16,'Geneva','Switzerland','GVA','French','CH');\n+insert into CITIES VALUES (17,'Hong Kong','China','HKG','Chinese','CN');\n+insert into CITIES VALUES (18,'Istanbul','Turkey','IST','Turkish','TR');\n+insert into CITIES VALUES (19,'Jakarta','Indonesia','JKT','Indonesian','ID');\n+insert into CITIES VALUES (20,'Kabul','Afghanistan','KBL','Pashto','AF');\n+insert into CITIES VALUES (21,'Karachi','Pakistan','KHI','Punjabi','PK');\n+insert into CITIES VALUES (22,'Lagos','Nigeria','LOS','English','NG');\n+insert into CITIES VALUES (23,'Lima','Peru','LIM','Spanish','PE');\n+insert into CITIES VALUES (24,'Lisbon','Portugal','LIS','Portuguese','PT');\n+insert into CITIES VALUES (25,'London','United Kingdom','LHR','English','GB');\n+insert into CITIES VALUES (26,'Madrid','Spain','MAD','Spanish','ES');\n+insert into CITIES VALUES (27,'Manila','Philippines','MNL','Tagalog','PH');\n+insert into CITIES VALUES (28,'Melbourne','Australia','MEL','English','AU');\n+insert into CITIES VALUES (29,'Mexico City','Mexico','MEX','Spanish','MX');\n+insert into CITIES VALUES (30,'Montreal','Canada','YUL','French','CA');\n+insert into CITIES VALUES (31,'Moscow','Russia','SVO','Russian','RU');\n+insert into CITIES VALUES (32,'Nairobi','Kenya','NBO','English','KE');\n+insert into CITIES VALUES (33,'Osaka','Japan','OSA','Japanese','JP');\n+insert into CITIES VALUES (34,'Oslo','Norway','OSL','Norwegian','NO');\n+insert into CITIES VALUES (35,'Paris','France','CDG','French','FR');\n+insert into CITIES VALUES (36,'Prague','Czech Republic','PRG','Czech','CZ');\n+insert into CITIES VALUES (37,'Reykjavik','Iceland','REY','Icelandic','IS');\n+insert into CITIES VALUES (38,'Rio de Janeiro','Brazil','GIG','Portuguese','BR');\n+insert into CITIES VALUES (39,'Rome','Italy','FCO','Italian','IT');\n+insert into CITIES VALUES (40,'Santiago','Chile','SCL','Spanish','CL');\n+insert into CITIES VALUES (41,'Sao Paulo','Brazil','GRU','Portuguese','BR');\n+insert into CITIES VALUES (42,'Seoul','Korea, Republic of','SEL','Korean','KR');\n+insert into CITIES VALUES (43,'Shanghai','China','SHA','Chinese','CN');\n+insert into CITIES VALUES (44,'Singapore','Singapore','SIN','Malay','SG');\n+insert into CITIES VALUES (45,'Stockholm','Sweden','ARN','Swedish','SE');\n+insert into CITIES VALUES (46,'Sydney','Australia','SYD','English','AU');\n+insert into CITIES VALUES (47,'San Jose','United States','SJC','English','US');\n+insert into CITIES VALUES (48,'Tehran','Iran','THR','Farsi','IR');\n+insert into CITIES VALUES (49,'Tokyo','Japan','NRT','Japanese','JP');\n+insert into CITIES VALUES (50,'Toronto','Canada','YYZ','English','CA');\n+insert into CITIES VALUES (51,'Warsaw','Poland','WAW','Polish','PL');\n+insert into CITIES VALUES (52,'Albany','United States','ALB','English','US');\n+insert into CITIES VALUES (53,'Albuquerque','United States','ABQ','English','US');\n+insert into CITIES VALUES (54,'Atlanta','United States','ATL','English','US');\n+insert into CITIES VALUES (55,'Boise','United States','BOI','English','US');\n+insert into CITIES VALUES (56,'Boston','United States','BOS','English','US');\n+insert into CITIES VALUES (57,'Charleston','United States','CHS','English','US');\n+insert into CITIES VALUES (58,'Chicago','United States','MDW','English','US');\n+insert into CITIES VALUES (59,'Cleveland','United States','CLE','English','US');\n+insert into CITIES VALUES (60,'Dallas','United States','DFW','English','US');\n+insert into CITIES VALUES (61,'Denver','United States','DEN','English','US');\n+insert into CITIES VALUES (62,'Des Moines','United States','DSM','English','US');\n+insert into CITIES VALUES (63,'Fairbanks','United States','FAI','English','US');\n+insert into CITIES VALUES (64,'Helena','United States','HLN','English','US');\n+insert into CITIES VALUES (65,'Honolulu','United States','HNL','English','US');\n+insert into CITIES VALUES (66,'Houston','United States','HOU','English','US');\n+insert into CITIES VALUES (67,'Juneau','United States','JNU','English','US');\n+insert into CITIES VALUES (68,'Kansas City','United States','MCI','English','US');\n+insert into CITIES VALUES (69,'Los Angeles','United States','LAX','English','US');\n+insert into CITIES VALUES (70,'Memphis','United States','MEM','English','US');\n+insert into CITIES VALUES (71,'Miami','United States','MIA','English','US');\n+insert into CITIES VALUES (72,'Milwaukee','United States','MKE','English','US');\n+insert into CITIES VALUES (73,'Minneapolis','United States','MSP','English','US');\n+insert into CITIES VALUES (74,'Nashville','United States','BNA','English','US');\n+insert into CITIES VALUES (75,'New Orleans','United States','MSY','English','US');\n+insert into CITIES VALUES (76,'New York','United States','JFK','English','US');\n+insert into CITIES VALUES (77,'Oklahoma City','United States','OKC','English','US');\n+insert into CITIES VALUES (78,'Philadelphia','United States','PHL','English','US');\n+insert into CITIES VALUES (79,'Phoenix','United States','PHX','English','US');\n+insert into CITIES VALUES (80,'Saint Louis','United States','STL','English','US');\n+insert into CITIES VALUES (81,'Salt Lake City','United States','SLC','English','US');\n+insert into CITIES VALUES (82,'San Antonio','United States','SAT','English','US');\n+insert into CITIES VALUES (83,'San Diego','United States','SAN','English','US');\n+insert into CITIES VALUES (84,'San Francisco','United States','SFO','English','US');\n+insert into CITIES VALUES (85,'San Juan','United States','SJU','Spanish','US');\n+insert into CITIES VALUES (86,'Seattle','United States','SEA','English','US');\n+insert into CITIES VALUES (87,'Washington, DC','United States','IAD','English','US');"},{"sha":"608406c46c63b0519efe51fd47cec553513c70c1","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadCOUNTRIES.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,129 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into COUNTRIES values ( 'Afghanistan','AF','Asia');\n+insert into COUNTRIES values ( 'Albania','AL','Europe');\n+insert into COUNTRIES values ('Algeria','DZ','North Africa');\n+insert into COUNTRIES values ('American Samoa','AS','Pacific Islands');\n+insert into COUNTRIES values ('Angola','AO','Africa');\n+insert into COUNTRIES values ('Argentina','AR','South America');\n+insert into COUNTRIES values ('Armenia','AM','Europe');\n+insert into COUNTRIES values ('Australia','AU','Australia and New Zealand');\n+insert into COUNTRIES values ('Austria','AT','Europe');\n+insert into COUNTRIES values ('Azerbaijan','AZ','Central Asia');\n+insert into COUNTRIES values ('Bahamas','BS','Caribbean');\n+insert into COUNTRIES values ('Bangladesh','BD','Asia');\n+insert into COUNTRIES values ('Barbados','BB','Caribbean');\n+insert into COUNTRIES values ('Belgium','BE','Europe');\n+insert into COUNTRIES values ('Belize','BZ','Central America');\n+insert into COUNTRIES values ('Bermuda','BM','Caribbean');\n+insert into COUNTRIES values ('Bolivia','BO','South America');\n+insert into COUNTRIES values ('Botswana','BW','Africa');\n+insert into COUNTRIES values ('Brazil','BR','South America');\n+insert into COUNTRIES values ('Bulgaria','BG','Europe');\n+insert into COUNTRIES values ('Cambodia','KH','Asia');\n+insert into COUNTRIES values ('Cameroon','CM','Africa');\n+insert into COUNTRIES values ('Canada','CA','North America');\n+insert into COUNTRIES values ('Cape Verde','CV','Africa');\n+insert into COUNTRIES values ('Chile','CL','South America');\n+insert into COUNTRIES values ('China','CN','Asia');\n+insert into COUNTRIES values ('Colombia','CO','South America');\n+insert into COUNTRIES values ('Congo','CG','Africa');\n+insert into COUNTRIES values ('Costa Rica','CR','Central America');\n+insert into COUNTRIES values ('Cote d''Ivoire','CI','Africa');\n+insert into COUNTRIES values ('Cuba','CU','Caribbean');\n+insert into COUNTRIES values ('Czech Republic','CZ','Europe');\n+insert into COUNTRIES values ('Denmark','DK','Europe');\n+insert into COUNTRIES values ('Dominical Republic','DO','Caribbean');\n+insert into COUNTRIES values ('Ecuador','EC','South America');\n+insert into COUNTRIES values ('Egypt','EG','North Africa');\n+insert into COUNTRIES values ('El Salvador','SV','Central America');\n+insert into COUNTRIES values ('Ethiopia','ET','North Africa');\n+insert into COUNTRIES values ('Falkland Islands','FK','South America');\n+insert into COUNTRIES values ('Fiji','FJ','Pacific Islands');\n+insert into COUNTRIES values ('Finland','FI','Europe');\n+insert into COUNTRIES values ('France','FR','Europe');\n+insert into COUNTRIES values ('Georgia','GE','Europe');\n+insert into COUNTRIES values ('Germany','DE','Europe');\n+insert into COUNTRIES values ('Ghana','GH','Africa');\n+insert into COUNTRIES values ('Greece','GR','Europe');\n+insert into COUNTRIES values ('Guadeloupe','GP','Caribbean');\n+insert into COUNTRIES values ('Guatemala','GT','Central America');\n+insert into COUNTRIES values ('Honduras','HN','Central America');\n+insert into COUNTRIES values ('Hungary','HU','Europe');\n+insert into COUNTRIES values ('Iceland','IS','Europe');\n+insert into COUNTRIES values ('India','IN','Asia');\n+insert into COUNTRIES values ('Indonesia','ID','Asia');\n+insert into COUNTRIES values ('Iran','IR','Middle East');\n+insert into COUNTRIES values ('Iraq','IQ','Middle East');\n+insert into COUNTRIES values ('Ireland','IE','Europe');\n+insert into COUNTRIES values ('Israel','IL','Middle East');\n+insert into COUNTRIES values ('Italy','IT','Europe');\n+insert into COUNTRIES values ('Jamaica','JM','Caribbean');\n+insert into COUNTRIES values ('Japan','JP','Asia');\n+insert into COUNTRIES values ('Jordan','JO','Middle East');\n+insert into COUNTRIES values ('Kenya','KE','Africa');\n+insert into COUNTRIES values ('Korea, Republic of','KR','Asia');\n+insert into COUNTRIES values ('Lebanon','LB','Middle East');\n+insert into COUNTRIES values ('Lithuania','LT','Europe');\n+insert into COUNTRIES values ('Madagascar','MG','Africa');\n+insert into COUNTRIES values ('Malaysia','MY','Asia');\n+insert into COUNTRIES values ('Mali','ML','Africa');\n+insert into COUNTRIES values ('Mexico','MX','North America');\n+insert into COUNTRIES values ('Morocco','MA','North Africa');\n+insert into COUNTRIES values ('Mozambique','MZ','Africa');\n+insert into COUNTRIES values ('Nepal','NP','Asia');\n+insert into COUNTRIES values ('Netherlands','NL','Europe');\n+insert into COUNTRIES values ('New Zealand','NZ','Australia and New Zealand');\n+insert into COUNTRIES values ('Nicaragua','NI','Central America');\n+insert into COUNTRIES values ('Nigeria','NG','Africa');\n+insert into COUNTRIES values ('Norway','NO','Europe');\n+insert into COUNTRIES values ('Pakistan','PK','Central Asia');\n+insert into COUNTRIES values ('Paraguay','PY','South America');\n+insert into COUNTRIES values ('Peru','PE','South America');\n+insert into COUNTRIES values ('Philippines','PH','Asia');\n+insert into COUNTRIES values ('Poland','PL','Europe');\n+insert into COUNTRIES values ('Portugal','PT','Europe');\n+insert into COUNTRIES values ('Russia','RU','Europe');\n+insert into COUNTRIES values ('Samoa','WS','Pacific Islands');\n+insert into COUNTRIES values ('Senegal','SN','Africa');\n+insert into COUNTRIES values ('Sierra Leone','SL','Africa');\n+insert into COUNTRIES values ('Singapore','SG','Asia');\n+insert into COUNTRIES values ('Slovakia','SK','Europe');\n+insert into COUNTRIES values ('South Africa','ZA','Africa');\n+insert into COUNTRIES values ('Spain','ES','Europe');\n+insert into COUNTRIES values ('Sri Lanka','LK','Asia');\n+insert into COUNTRIES values ('Sudan','SD','Africa');\n+insert into COUNTRIES values ('Sweden','SE','Europe');\n+insert into COUNTRIES values ('Switzerland','CH','Europe');\n+insert into COUNTRIES values ('Syrian Arab Republic','SY','Middle East');\n+insert into COUNTRIES values ('Tajikistan','TJ','Central Asia');\n+insert into COUNTRIES values ('Tanzania','TZ','Africa');\n+insert into COUNTRIES values ('Thailand','TH','Asia');\n+insert into COUNTRIES values ('Trinidad and Tobago','TT','Caribbean');\n+insert into COUNTRIES values ('Tunisia','TN','North Africa');\n+insert into COUNTRIES values ('Turkey','TR','Middle East');\n+insert into COUNTRIES values ('Ukraine','UA','Europe');\n+insert into COUNTRIES values ('United Kingdom','GB','Europe');\n+insert into COUNTRIES values ('United States','US','North America');\n+insert into COUNTRIES values ('Uruguay','UY','South America');\n+insert into COUNTRIES values ('Uzbekistan','UZ','Central Asia');\n+insert into COUNTRIES values ('Venezuela','VE','South America');\n+insert into COUNTRIES values ('Viet Nam','VN','Asia');\n+insert into COUNTRIES values ('Virgin Islands (British)','VG','Caribbean');\n+insert into COUNTRIES values ('Virgin Islands (U.S.)','VI','Caribbean');\n+insert into COUNTRIES values ('Yugoslavia','YU','Europe');\n+insert into COUNTRIES values ('Zaire','ZR','Africa');\n+insert into COUNTRIES values ('Zimbabwe','ZW','Africa');"},{"sha":"623134de84b779a42b60edf3779e4049b29fe5a9","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql","status":"added","additions":310,"deletions":0,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY1.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,310 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1116',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1122',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1124',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1126',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1128',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1134',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1140',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1148',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1150',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1158',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1168',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1172',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1176',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1178',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1181',2,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1182',2,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1188',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1195',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1197',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1203',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1207',1,'2004-05-30',2,2,2); \n+ "},{"sha":"db3eae1c5e9648e18a32ce60c9c4d642376e397f","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql","status":"added","additions":239,"deletions":0,"changes":239,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTAVAILABILITY2.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,239 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1211',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1217',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1224',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1229',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1231',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1239',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1241',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1243',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1247',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1252',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1258',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1259',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-17',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-18',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-29',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1265',1,'2004-05-30',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-03-31',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-11',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-12',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-15',5,5,0); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-20',10,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-23',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-04-24',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-05-03',11,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-05-05',1,1,1); \n+insert into FLIGHTAVAILABILITY values ('AA1271',1,'2004-05-06',2,2,2); \n+insert into FLIGHTAVAILABILITY values ('AA1290',1,'2004-04-05',3,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1285',1,'2004-04-11',3,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1223',2,'2004-04-11',3,0,0); \n+insert into FLIGHTAVAILABILITY values ('US1552',1,'2004-04-19',3,0,0); \n+insert into FLIGHTAVAILABILITY values ('AA1221',1,'2004-04-19',3,0,0); \n+insert into FLIGHTAVAILABILITY values ('US1518',1,'2004-04-12',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('US1518',2,'2004-04-12',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('US1499',1,'2004-04-25',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('US1404',1,'2004-04-30',0,3,0); \n+insert into FLIGHTAVAILABILITY values ('US1519',2,'2004-04-30',0,3,0); \n+insert into FLIGHTAVAILABILITY values ('US1560',1,'2004-04-25',0,3,0); \n+insert into FLIGHTAVAILABILITY values ('US1276',2,'2004-05-05',0,3,0); \n+insert into FLIGHTAVAILABILITY values ('US1439',1,'2004-05-15',0,3,0); \n+insert into FLIGHTAVAILABILITY values ('AA1219',1,'2004-04-02',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('AA1248',1,'2004-04-02',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('AA1245',1,'2004-04-10',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('US1435',1,'2004-04-18',0,0,3); \n+insert into FLIGHTAVAILABILITY values ('US1357',2,'2004-04-18',0,0,3); "},{"sha":"2092f1ab5f208febcef6cb0e8d5a2be77c6f9369","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql","status":"added","additions":274,"deletions":0,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS1.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,274 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into FLIGHTS values ('AA1111',1,'ABQ','09:00:00','LAX','09:19:00','S',1.328,664,'B747'); \n+insert into FLIGHTS values ('AA1112',1,'LAX','09:00:00','ABQ','11:19:00','S',1.328,664,'B747'); \n+insert into FLIGHTS values ('AA1113',1,'ABQ','09:00:00','PHX','09:39:00','S',0.658,329,'B747'); \n+insert into FLIGHTS values ('AA1114',1,'PHX','09:00:00','ABQ','09:39:00','S',0.658,329,'B747'); \n+insert into FLIGHTS values ('AA1115',1,'ABQ','09:00:00','OKC','11:02:00','B',1.034,517,'B747'); \n+insert into FLIGHTS values ('AA1116',1,'OKC','09:00:00','ABQ','09:02:00','B',1.034,517,'B747'); \n+insert into FLIGHTS values ('AA1117',1,'AKL','09:00:00','HNL','18:48:00','L',8.804,4402,'B747'); \n+insert into FLIGHTS values ('AA1118',1,'HNL','13:30:00','AKL','21:18:00','D',8.804,4402,'DC10'); \n+insert into FLIGHTS values ('AA1119',1,'AKL','09:00:00','NRT','15:59:00','L',10.996,5498,'B747'); \n+insert into FLIGHTS values ('AA1120',1,'NRT','09:00:00','AKL','23:59:00','L',10.996,5498,'B747'); \n+insert into FLIGHTS values ('AA1121',1,'AKL','09:00:00','SYD','09:40:00','B',2.682,1341,'B747'); \n+insert into FLIGHTS values ('AA1122',1,'SYD','09:00:00','AKL','13:40:00','L',2.682,1341,'B747'); \n+insert into FLIGHTS values ('AA1123',1,'ALB','09:00:00','JFK','09:16:00','S',0.27,135,'DC10'); \n+insert into FLIGHTS values ('AA1124',1,'JFK','09:00:00','ALB','09:16:00','S',0.27,135,'DC10'); \n+insert into FLIGHTS values ('AA1125',1,'ALB','07:00:00','BOS','07:16:00','S',0.278,139,'B747'); \n+insert into FLIGHTS values ('AA1126',1,'BOS','14:00:00','ALB','14:16:00','S',0.278,139,'B747'); \n+insert into FLIGHTS values ('AA1127',1,'ALB','09:00:00','IAD','09:32:00','S',0.548,274,'B747'); \n+insert into FLIGHTS values ('AA1128',1,'IAD','09:00:00','ALB','09:32:00','S',0.548,274,'B747'); \n+insert into FLIGHTS values ('US1517',1,'AMS','09:00:00','JFK','10:17:00','B',7.296,3648,'B747'); \n+insert into FLIGHTS values ('US1516',2,'JFK','20:59:00','AMS','10:16:00','L',7.296,3648,'B747'); \n+insert into FLIGHTS values ('AA1131',1,'AMS','09:00:00','ATH','12:41:00','L',2.688,1344,'B747'); \n+insert into FLIGHTS values ('AA1132',1,'ATH','09:00:00','AMS','10:41:00','B',2.688,1344,'B747'); \n+insert into FLIGHTS values ('AA1133',1,'AMS','09:00:00','CDG','09:31:00','S',0.532,266,'B747'); \n+insert into FLIGHTS values ('AA1134',1,'CDG','09:00:00','AMS','09:31:00','S',0.532,266,'B747'); \n+insert into FLIGHTS values ('AA1135',1,'ARN','09:00:00','BOS','11:07:00','L',8.126,4063,'B747'); \n+insert into FLIGHTS values ('AA1136',1,'BOS','22:00:00','ARN','12:07:00','L',8.126,4063,'B747'); \n+insert into FLIGHTS values ('AA1137',1,'ARN','09:00:00','SVO','12:51:00','B',1.858,929,'A320'); \n+insert into FLIGHTS values ('AA1138',2,'SVO','16:00:00','ARN','15:51:00','S',1.858,929,'A320'); \n+insert into FLIGHTS values ('AA1139',1,'ARN','09:00:00','CPH','09:59:00','S',0.988,494,'B747'); \n+insert into FLIGHTS values ('AA1140',1,'CPH','09:00:00','ARN','09:59:00','S',0.988,494,'B747'); \n+insert into FLIGHTS values ('AA1141',1,'ATH','09:00:00','LHR','09:58:00','B',2.974,1487,'B747'); \n+insert into FLIGHTS values ('AA1142',1,'LHR','09:00:00','ATH','13:58:00','L',2.974,1487,'B747'); \n+insert into FLIGHTS values ('AA1143',1,'ATH','09:00:00','CAI','10:23:00','B',1.394,697,'B747'); \n+insert into FLIGHTS values ('AA1144',1,'CAI','09:00:00','ATH','10:23:00','B',1.394,697,'B747'); \n+insert into FLIGHTS values ('AA1145',1,'ATH','09:00:00','CDG','10:36:00','B',2.608,1304,'B747'); \n+insert into FLIGHTS values ('AA1146',1,'CDG','09:00:00','ATH','12:36:00','L',2.608,1304,'B747'); \n+insert into FLIGHTS values ('AA1147',1,'ATL','09:00:00','LAX','09:52:00','B',3.87,1935,'B747'); \n+insert into FLIGHTS values ('AA1148',1,'LAX','09:00:00','ATL','15:52:00','L',3.87,1935,'B747'); \n+insert into FLIGHTS values ('AA1149',1,'ATL','09:00:00','DFW','09:26:00','B',1.442,721,'B747'); \n+insert into FLIGHTS values ('AA1150',1,'DFW','09:00:00','ATL','11:26:00','B',1.442,721,'B747'); \n+insert into FLIGHTS values ('AA1151',1,'ATL','09:00:00','SEA','10:21:00','B',4.36,2180,'B747'); \n+insert into FLIGHTS values ('AA1152',1,'SEA','12:00:00','ATL','19:21:00','L',4.36,2180,'B747'); \n+insert into FLIGHTS values ('AA1153',1,'BEY','09:00:00','CAI','09:43:00','S',0.726,363,'B747'); \n+insert into FLIGHTS values ('AA1154',1,'CAI','11:00:00','BEY','11:43:00','S',0.726,363,'B747'); \n+insert into FLIGHTS values ('AA1270',1,'BEY','09:00:00','MAD','12:22:00','L',4.376,2188,'B747'); \n+insert into FLIGHTS values ('AA1269',2,'MAD','12:25:00','BEY','17:47:00','L',4.376,2188,'B747'); \n+insert into FLIGHTS values ('AA1157',1,'BEY','09:00:00','BOM','17:31:00','L',5.026,2513,'B747'); \n+insert into FLIGHTS values ('AA1158',1,'BOM','09:00:00','BEY','10:31:00','L',5.026,2513,'B747'); \n+insert into FLIGHTS values ('AA1159',1,'BNA','09:00:00','MIA','11:37:00','B',1.63,815,'B747'); \n+insert into FLIGHTS values ('AA1160',1,'MIA','09:00:00','BNA','09:37:00','B',1.63,815,'B747'); \n+insert into FLIGHTS values ('AA1161',1,'BNA','09:00:00','JFK','11:31:00','L',1.518,759,'B747'); \n+insert into FLIGHTS values ('AA1162',1,'JFK','09:00:00','BNA','09:31:00','L',1.518,759,'B747'); \n+insert into FLIGHTS values ('AA1163',1,'BNA','09:00:00','CHS','10:54:00','B',0.91,455,'B747'); \n+insert into FLIGHTS values ('AA1164',1,'GIG','09:00:00','BNA','15:57:00','L',9.964,4982,'B747'); \n+insert into FLIGHTS values ('US1591',1,'BOG','09:00:00','MIA','12:02:00','L',3.04,1520,'DC10'); \n+insert into FLIGHTS values ('AA1190',2,'MIA','12:13:00','BOG','15:15:00','L',3.04,1520,'B747'); \n+insert into FLIGHTS values ('AA1167',1,'BOG','09:00:00','LIM','11:20:00','B',2.338,1169,'B747'); \n+insert into FLIGHTS values ('AA1168',1,'LIM','08:00:00','BOG','10:20:00','B',2.338,1169,'B747'); \n+insert into FLIGHTS values ('AA1169',1,'BOG','09:00:00','GIG','16:38:00','L',5.648,2824,'B747'); \n+insert into FLIGHTS values ('AA1170',1,'GIG','09:00:00','BOG','12:38:00','L',5.648,2824,'B747'); \n+insert into FLIGHTS values ('AA1171',1,'BOI','09:00:00','SEA','08:48:00','S',0.808,404,'B747'); \n+insert into FLIGHTS values ('AA1172',1,'SEA','09:00:00','BOI','10:48:00','S',0.808,404,'B747'); \n+insert into FLIGHTS values ('AA1173',1,'BOI','09:00:00','DSM','12:18:00','L',2.31,1155,'A320'); \n+insert into FLIGHTS values ('AA1174',1,'DSM','09:00:00','BOI','10:18:00','B',2.31,1155,'A320'); \n+insert into FLIGHTS values ('AA1175',1,'BOI','09:00:00','HLN','09:34:00','S',0.58,290,'B747'); \n+insert into FLIGHTS values ('AA1176',1,'HLN','09:00:00','BOI','09:34:00','S',0.58,290,'B747'); \n+insert into FLIGHTS values ('AA1177',1,'BOM','09:00:00','CCU','11:03:00','B',2.066,1033,'B747'); \n+insert into FLIGHTS values ('AA1178',1,'CCU','09:00:00','BOM','11:03:00','B',2.066,1033,'B747'); \n+insert into FLIGHTS values ('AA1179',1,'BOM','09:00:00','KHI','09:36:00','B',1.102,551,'B747'); \n+insert into FLIGHTS values ('AA1180',1,'KHI','09:00:00','BOM','10:36:00','B',1.102,551,'B747'); \n+insert into FLIGHTS values ('AA1181',1,'BOM','09:00:00','HKG','16:51:00','L',5.354,2677,'B747'); \n+insert into FLIGHTS values ('AA1182',2,'HKG','11:15:00','BOM','14:06:00','L',5.354,2677,'B747'); \n+insert into FLIGHTS values ('AA1183',1,'BOS','09:00:00','SFO','11:23:00','L',5.39,2695,'B747'); \n+insert into FLIGHTS values ('AA1184',1,'SFO','09:00:00','BOS','17:23:00','L',5.39,2695,'B747'); \n+insert into FLIGHTS values ('AA1185',1,'BOS','09:00:00','MIA','11:31:00','B',2.518,1259,'B747'); \n+insert into FLIGHTS values ('AA1186',2,'MIA','10:40:00','BOS','13:11:00','L',2.518,1259,'B747'); \n+insert into FLIGHTS values ('AA1187',1,'BOS','09:00:00','IAD','09:29:00','S',0.49,245,'B747'); \n+insert into FLIGHTS values ('AA1188',1,'IAD','09:00:00','BOS','09:29:00','S',0.49,245,'B747'); \n+insert into FLIGHTS values ('AA1189',1,'BUD','09:00:00','GVA','10:13:00','B',1.232,616,'B747'); \n+insert into FLIGHTS values ('AA1190',1,'GVA','09:00:00','BUD','10:13:00','B',1.232,616,'B747'); \n+insert into FLIGHTS values ('AA1191',1,'BUD','09:00:00','SVO','12:56:00','L',1.946,973,'B747'); \n+insert into FLIGHTS values ('AA1192',1,'SVO','09:00:00','BUD','08:56:00','B',1.946,973,'B747'); \n+insert into FLIGHTS values ('AA1193',1,'BUD','09:00:00','FCO','10:00:00','B',1.008,504,'B747'); \n+insert into FLIGHTS values ('AA1194',1,'FCO','09:00:00','BUD','10:00:00','B',1.008,504,'B747'); \n+insert into FLIGHTS values ('AA1195',1,'CAI','09:00:00','CAS','11:33:00','B',4.562,2281,'B747'); \n+insert into FLIGHTS values ('AA1196',1,'MIA','09:00:00','CAI','04:59:00','D',12.984,6492,'B747'); \n+insert into FLIGHTS values ('AA1197',1,'CAI','09:00:00','IST','10:32:00','B',1.538,769,'B747'); \n+insert into FLIGHTS values ('AA1198',1,'IST','09:00:00','CAI','10:32:00','B',1.538,769,'B747'); \n+insert into FLIGHTS values ('AA1199',1,'CAI','09:00:00','KBL','16:27:00','L',4.454,2227,'B747'); \n+insert into FLIGHTS values ('AA1200',1,'GIG','09:00:00','CAI','02:18:00','D',12.308,6154,'B747'); \n+insert into FLIGHTS values ('AA1201',1,'CAS','09:00:00','KHI','22:54:00','L',8.9,4450,'B747'); \n+insert into FLIGHTS values ('AA1202',1,'KHI','09:00:00','CAS','12:54:00','L',8.9,4450,'B747'); \n+insert into FLIGHTS values ('AA1203',1,'CAS','09:00:00','LOS','14:00:00','L',4.006,2003,'B747'); \n+insert into FLIGHTS values ('AA1204',1,'LOS','09:00:00','CAS','12:00:00','L',4.006,2003,'B747'); \n+insert into FLIGHTS values ('AA1205',1,'CAS','09:00:00','MAD','11:02:00','B',1.036,518,'B747'); \n+insert into FLIGHTS values ('AA1206',1,'MAD','09:00:00','CAS','09:02:00','B',1.036,518,'B747'); \n+insert into FLIGHTS values ('AA1207',1,'CCS','09:00:00','SCL','16:05:00','L',6.098,3049,'B747'); \n+insert into FLIGHTS values ('AA1208',1,'SCL','09:00:00','CCS','14:05:00','L',6.098,3049,'B747'); \n+insert into FLIGHTS values ('AA1209',1,'CCS','09:00:00','MEX','11:28:00','L',4.47,2235,'B747'); \n+insert into FLIGHTS values ('AA1210',1,'MEX','09:00:00','CCS','15:28:00','L',4.47,2235,'B747'); \n+insert into FLIGHTS values ('AA1211',1,'CCS','09:00:00','BUE','17:20:00','L',6.336,3168,'B747'); \n+insert into FLIGHTS values ('AA1212',1,'BUE','09:00:00','CCS','13:20:00','L',6.336,3168,'B747'); \n+insert into FLIGHTS values ('AA1213',1,'CCU','09:00:00','HKG','14:47:00','L',3.294,1647,'B747'); \n+insert into FLIGHTS values ('AA1214',2,'HKG','10:30:00','CCU','11:17:00','L',3.294,1647,'B747'); \n+insert into FLIGHTS values ('AA1215',1,'CCU','09:00:00','NRT','18:53:00','L',6.396,3198,'B747'); \n+insert into FLIGHTS values ('AA1216',1,'NRT','09:00:00','CCU','11:53:00','L',6.396,3198,'B747'); \n+insert into FLIGHTS values ('AA1217',1,'CCU','09:00:00','SIN','15:06:00','L',3.6,1800,'B747'); \n+insert into FLIGHTS values ('AA1218',1,'SIN','09:00:00','CCU','10:06:00','L',3.6,1800,'B747'); \n+insert into FLIGHTS values ('AA1219',1,'CDG','09:00:00','LHR','08:25:00','S',0.422,211,'B747'); \n+insert into FLIGHTS values ('AA1220',1,'LHR','09:00:00','CDG','10:25:00','S',0.422,211,'B747'); \n+insert into FLIGHTS values ('AA1221',1,'CDG','18:00:00','JFK','19:15:00','D',7.258,3629,'B747'); \n+insert into FLIGHTS values ('AA1222',1,'JFK','09:00:00','CDG','22:15:00','L',7.258,3629,'B747'); \n+insert into FLIGHTS values ('AA1223',2,'CDG','13:40:00','SVO','18:45:00','L',3.09,1545,'B747'); \n+insert into FLIGHTS values ('AA1224',1,'SVO','09:00:00','CDG','10:05:00','B',3.09,1545,'B747'); \n+insert into FLIGHTS values ('AA1225',1,'CHS','09:00:00','ATL','09:31:00','S',0.532,266,'B747'); \n+insert into FLIGHTS values ('AA1226',1,'ATL','09:00:00','CHS','09:31:00','S',0.532,266,'B747'); \n+insert into FLIGHTS values ('AA1227',1,'CHS','11:00:00','MCI','11:51:00','S',1.856,928,'B747'); \n+insert into FLIGHTS values ('AA1228',1,'MCI','09:00:00','CHS','11:51:00','L',1.856,928,'B747'); \n+insert into FLIGHTS values ('AA1229',1,'CHS','09:00:00','MSY','09:15:00','L',1.256,628,'B747'); \n+insert into FLIGHTS values ('AA1230',1,'MSY','09:00:00','CHS','11:15:00','L',1.256,628,'B747'); \n+insert into FLIGHTS values ('AA1231',1,'CLE','09:00:00','LAX','10:05:00','L',4.092,2046,'B747'); \n+insert into FLIGHTS values ('AA1232',1,'LAX','09:00:00','CLE','16:05:00','L',4.092,2046,'B747'); \n+insert into FLIGHTS values ('AA1233',1,'CLE','09:00:00','DFW','10:03:00','L',2.052,1026,'B747'); \n+insert into FLIGHTS values ('AA1234',1,'DFW','09:00:00','CLE','12:03:00','L',2.052,1026,'B747'); \n+insert into FLIGHTS values ('AA1235',1,'CLE','09:00:00','MDW','08:37:00','S',0.618,309,'B747'); \n+insert into FLIGHTS values ('AA1236',1,'MDW','09:00:00','CLE','10:37:00','S',0.618,309,'B747'); \n+insert into FLIGHTS values ('AA1237',1,'CPH','09:00:00','FCO','10:54:00','L',1.904,952,'B747'); \n+insert into FLIGHTS values ('AA1238',1,'FCO','09:00:00','CPH','10:54:00','L',1.904,952,'B747'); \n+insert into FLIGHTS values ('AA1239',1,'CPH','09:00:00','REY','10:37:00','L',2.622,1311,'B747'); \n+insert into FLIGHTS values ('AA1240',1,'REY','09:00:00','CPH','12:37:00','L',2.622,1311,'B747'); \n+insert into FLIGHTS values ('AA1241',1,'CPH','09:00:00','CDG','10:16:00','L',1.276,638,'B747'); \n+insert into FLIGHTS values ('AA1242',1,'CDG','09:00:00','CPH','10:16:00','L',1.276,638,'B747'); \n+insert into FLIGHTS values ('AA1243',1,'CPT','09:00:00','LOS','13:55:00','L',5.92,2960,'B747'); \n+insert into FLIGHTS values ('AA1244',1,'LOS','09:00:00','CPT','15:55:00','L',5.92,2960,'B747'); \n+insert into FLIGHTS values ('AA1245',1,'CPT','09:00:00','NBO','15:06:00','L',5.102,2551,'DC10'); \n+insert into FLIGHTS values ('AA1246',1,'NBO','09:00:00','CPT','13:06:00','L',5.102,2551,'DC10'); \n+insert into FLIGHTS values ('AA1247',1,'CPT','09:00:00','LHR','19:01:00','L',12.026,6013,'B747'); \n+insert into FLIGHTS values ('AA1248',1,'LHR','09:00:00','CPT','23:01:00','L',12.026,6013,'B747'); \n+insert into FLIGHTS values ('AA1249',2,'DEN','10:30:00','SEA','11:32:00','L',2.04,1020,'B747'); \n+insert into FLIGHTS values ('AA1250',1,'SEA','09:00:00','DEN','12:02:00','L',2.04,1020,'B747'); \n+insert into FLIGHTS values ('AA1251',2,'DEN','10:03:00','BOI','11:19:00','L',1.276,638,'B747'); \n+insert into FLIGHTS values ('AA1252',1,'BOI','09:00:00','DEN','10:16:00','L',1.276,638,'B747'); \n+insert into FLIGHTS values ('AA1253',1,'DEN','09:00:00','JFK','14:15:00','L',3.258,1629,'B747'); \n+insert into FLIGHTS values ('AA1254',1,'JFK','09:00:00','DEN','10:15:00','L',3.258,1629,'B747'); \n+insert into FLIGHTS values ('AA1255',1,'DFW','09:00:00','SAT','09:30:00','S',0.506,253,'B747'); \n+insert into FLIGHTS values ('AA1256',1,'SAT','09:00:00','DFW','09:30:00','S',0.506,253,'B747'); \n+insert into FLIGHTS values ('AA1257',1,'DFW','09:00:00','ATL','11:26:00','L',1.442,721,'B747'); \n+insert into FLIGHTS values ('AA1258',2,'ATL','11:05:00','DFW','11:31:00','L',1.442,721,'B747'); \n+insert into FLIGHTS values ('AA1259',1,'DFW','09:00:00','MIA','12:13:00','L',2.218,1109,'B747'); \n+insert into FLIGHTS values ('AA1260',1,'MIA','09:00:00','DFW','10:13:00','L',2.218,1109,'B747'); \n+insert into FLIGHTS values ('AA1261',1,'DSM','09:00:00','MDW','09:36:00','S',0.612,306,'B747'); \n+insert into FLIGHTS values ('AA1262',1,'MDW','09:00:00','DSM','09:36:00','S',0.612,306,'B747'); \n+insert into FLIGHTS values ('AA1263',1,'DSM','09:00:00','SLC','09:53:00','L',1.9,950,'B747'); \n+insert into FLIGHTS values ('AA1264',1,'SLC','09:00:00','DSM','11:53:00','L',1.9,950,'B747'); \n+insert into FLIGHTS values ('AA1265',1,'DSM','09:00:00','OKC','09:56:00','L',0.94,470,'B747'); \n+insert into FLIGHTS values ('AA1266',1,'OKC','09:00:00','DSM','09:56:00','L',0.94,470,'B747'); \n+insert into FLIGHTS values ('AA1267',1,'DUB','09:00:00','LHR','09:34:00','S',0.574,287,'B747'); \n+insert into FLIGHTS values ('AA1268',1,'LHR','09:00:00','DUB','09:34:00','S',0.574,287,'B747'); \n+insert into FLIGHTS values ('AA1269',1,'DUB','09:00:00','MAD','11:48:00','L',1.804,902,'B747'); \n+insert into FLIGHTS values ('AA1270',2,'MAD','13:10:00','DUB','13:58:00','L',1.804,902,'B747'); \n+insert into FLIGHTS values ('AA1271',1,'DUB','09:00:00','CDG','10:57:00','L',0.966,483,'B747'); \n+insert into FLIGHTS values ('AA1272',1,'CDG','09:00:00','DUB','08:57:00','L',0.966,483,'B747'); \n+insert into FLIGHTS values ('AA1273',1,'BUE','09:00:00','SCL','09:24:00','L',1.408,704,'B747'); \n+insert into FLIGHTS values ('AA1274',1,'SCL','09:00:00','BUE','11:24:00','L',1.408,704,'B747'); \n+insert into FLIGHTS values ('AA1275',1,'BUE','09:00:00','GRU','10:05:00','L',2.09,1045,'B747'); \n+insert into FLIGHTS values ('AA1276',1,'GRU','09:00:00','BUE','12:05:00','L',2.09,1045,'B747'); \n+insert into FLIGHTS values ('US1509',1,'BUE','23:00:00','MIA','04:49:00','L',8.826,4413,'B747'); \n+insert into FLIGHTS values ('US1508',2,'MIA','18:30:00','BUE','06:19:00','L',8.826,4413,'B747'); \n+insert into FLIGHTS values ('AA1279',1,'FAI','09:00:00','JNU','10:15:00','L',1.254,627,'B747'); \n+insert into FLIGHTS values ('AA1280',1,'JNU','09:00:00','FAI','10:15:00','L',1.254,627,'B747'); \n+insert into FLIGHTS values ('AA1281',1,'FAI','09:00:00','SEA','13:02:00','L',3.038,1519,'B747'); \n+insert into FLIGHTS values ('AA1282',1,'SEA','09:00:00','FAI','11:02:00','L',3.038,1519,'B747'); \n+insert into FLIGHTS values ('US1443',1,'FAI','09:00:00','NRT','10:01:00','L',7.026,3513,'B747'); \n+insert into FLIGHTS values ('US1444',2,'NRT','14:05:00','FAI','03:06:00','L',7.026,3513,'B747'); \n+insert into FLIGHTS values ('AA1285',1,'FCO','09:00:00','CDG','10:22:00','L',1.376,688,'B747'); \n+insert into FLIGHTS values ('AA1286',1,'CDG','09:00:00','FCO','10:22:00','L',1.376,688,'B747'); \n+insert into FLIGHTS values ('AA1287',1,'FCO','09:00:00','CAI','12:39:00','L',2.654,1327,'B747'); \n+insert into FLIGHTS values ('AA1288',1,'CAI','09:00:00','FCO','10:39:00','L',2.654,1327,'B747'); \n+insert into FLIGHTS values ('AA1289',1,'FCO','13:00:00','JFK','15:34:00','L',8.57,4285,'B747'); \n+insert into FLIGHTS values ('AA1290',1,'JFK','23:00:00','FCO','13:34:00','L',8.57,4285,'B747'); \n+insert into FLIGHTS values ('AA1291',1,'GIG','13:00:00','MIA','19:22:00','L',8.37,4185,'B747'); \n+insert into FLIGHTS values ('AA1292',1,'MIA','13:00:00','GIG','23:22:00','L',8.37,4185,'B747'); \n+insert into FLIGHTS values ('AA1293',1,'GIG','09:00:00','LIM','11:41:00','L',4.694,2347,'B747'); \n+insert into FLIGHTS values ('AA1294',1,'LIM','15:00:00','GIG','21:41:00','L',4.694,2347,'B747'); \n+insert into FLIGHTS values ('AA1295',1,'GIG','09:00:00','BUE','12:26:00','L',2.44,1220,'B747'); \n+insert into FLIGHTS values ('AA1296',1,'BUE','09:00:00','GIG','10:26:00','L',2.44,1220,'B747'); \n+insert into FLIGHTS values ('US1249',1,'GRU','09:00:00','CCS','13:26:00','L',5.448,2724,'B747'); \n+insert into FLIGHTS values ('US1250',1,'CCS','09:00:00','GRU','15:26:00','L',5.448,2724,'B747'); \n+insert into FLIGHTS values ('US1251',1,'GRU','09:00:00','JFK','16:33:00','L',9.556,4778,'B747'); \n+insert into FLIGHTS values ('US1252',1,'JFK','09:00:00','GRU','20:33:00','L',9.556,4778,'B747'); \n+insert into FLIGHTS values ('US1253',1,'GRU','09:00:00','LAX','16:19:00','L',12.322,6161,'B747'); \n+insert into FLIGHTS values ('US1254',1,'LAX','09:00:00','GRU','02:19:00','L',12.322,6161,'B747'); \n+insert into FLIGHTS values ('AA1053',1,'GRU','09:00:00','LIM','11:17:00','L',4.298,2149,'B747'); \n+insert into FLIGHTS values ('AA1054',1,'LIM','14:00:00','GRU','20:17:00','L',4.298,2149,'B747'); \n+insert into FLIGHTS values ('US1255',1,'GVA','09:00:00','CPH','10:25:00','L',1.422,711,'B747'); \n+insert into FLIGHTS values ('US1256',1,'CPH','09:00:00','GVA','10:25:00','L',1.422,711,'B747'); \n+insert into FLIGHTS values ('US1257',1,'GVA','09:00:00','LIS','09:52:00','L',1.868,934,'B747'); \n+insert into FLIGHTS values ('US1258',1,'LIS','09:00:00','GVA','11:52:00','L',1.868,934,'B747'); \n+insert into FLIGHTS values ('US1259',1,'GVA','09:00:00','OSL','10:56:00','L',1.934,967,'B747'); \n+insert into FLIGHTS values ('US1260',1,'OSL','09:00:00','GVA','10:56:00','L',1.934,967,'B747'); \n+insert into FLIGHTS values ('AA1181',2,'HKG','17:15:00','SHA','18:45:00','L',1.514,757,'B747'); \n+insert into FLIGHTS values ('AA1182',1,'SHA','09:00:00','HKG','10:30:00','L',1.514,757,'B747'); \n+insert into FLIGHTS values ('US1266',2,'HKG','11:15:00','SIN','14:27:00','L',3.214,1607,'B747'); \n+insert into FLIGHTS values ('US1264',1,'SIN','09:00:00','HKG','12:12:00','L',3.214,1607,'B747'); \n+insert into FLIGHTS values ('US1264',2,'HKG','13:00:00','SEL','16:36:00','L',2.612,1306,'B747'); \n+insert into FLIGHTS values ('US1266',1,'SEL','09:00:00','HKG','10:36:00','L',2.612,1306,'B747'); \n+insert into FLIGHTS values ('US1267',1,'HLN','09:00:00','SEA','08:58:00','L',0.978,489,'B747'); \n+insert into FLIGHTS values ('US1268',1,'SEA','09:00:00','HLN','10:58:00','L',0.978,489,'B747'); \n+insert into FLIGHTS values ('US1269',1,'HLN','09:00:00','BOI','09:34:00','S',0.58,290,'B747'); \n+insert into FLIGHTS values ('US1270',1,'BOI','09:00:00','HLN','09:34:00','S',0.58,290,'B747'); \n+insert into FLIGHTS values ('US1271',1,'HLN','09:00:00','DEN','10:11:00','L',1.184,592,'B747'); \n+insert into FLIGHTS values ('US1272',1,'DEN','09:00:00','HLN','10:11:00','L',1.184,592,'B747'); \n+insert into FLIGHTS values ('US1276',2,'HNL','12:30:00','NRT','15:12:00','L',7.708,3854,'B747'); \n+insert into FLIGHTS values ('US1274',1,'NRT','09:00:00','HNL','21:42:00','L',7.708,3854,'B747'); \n+insert into FLIGHTS values ('US1274',2,'HNL','22:30:00','SFO','05:17:00','L',4.794,2397,'B747'); \n+insert into FLIGHTS values ('US1276',1,'SFO','09:00:00','HNL','11:47:00','L',4.794,2397,'B747'); \n+insert into FLIGHTS values ('US1277',1,'HNL','13:00:00','SYD','20:09:00','L',10.16,5080,'B747'); \n+insert into FLIGHTS values ('US1278',1,'SYD','09:00:00','HNL','22:09:00','L',10.16,5080,'B747'); \n+insert into FLIGHTS values ('AA1251',1,'HOU','09:00:00','DEN','09:45:00','L',1.756,878,'B747'); \n+insert into FLIGHTS values ('AA1252',2,'DEN','10:55:00','HOU','13:40:00','L',1.756,878,'B747'); \n+insert into FLIGHTS values ('US1281',1,'HOU','09:00:00','SAT','09:22:00','S',0.378,189,'B747'); \n+insert into FLIGHTS values ('US1282',1,'SAT','09:00:00','HOU','09:22:00','S',0.378,189,'B747'); \n+insert into FLIGHTS values ('US1283',1,'HOU','09:00:00','IAD','12:56:00','L',2.936,1468,'B747'); \n+insert into FLIGHTS values ('US1284',1,'IAD','09:00:00','HOU','10:56:00','L',2.936,1468,'B747'); \n+insert into FLIGHTS values ('US1285',1,'IAD','09:00:00','BOS','09:29:00','S',0.49,245,'B747'); \n+insert into FLIGHTS values ('US1286',1,'BOS','09:00:00','IAD','09:29:00','S',0.49,245,'B747'); \n+insert into FLIGHTS values ('US1287',1,'IAD','09:00:00','MSP','09:49:00','L',1.83,915,'B747'); \n+insert into FLIGHTS values ('US1288',1,'MSP','09:00:00','IAD','11:49:00','L',1.83,915,'B747'); \n+insert into FLIGHTS values ('US1289',1,'IAD','09:00:00','MIA','11:02:00','L',2.048,1024,'B747'); \n+insert into FLIGHTS values ('US1290',1,'MIA','09:00:00','IAD','11:02:00','L',2.048,1024,'B747'); \n+insert into FLIGHTS values ('US1291',1,'IST','09:00:00','THR','13:02:00','L',2.538,1269,'B747'); \n+insert into FLIGHTS values ('US1292',1,'THR','09:00:00','IST','10:02:00','L',2.538,1269,'B747'); \n+insert into FLIGHTS values ('US1293',1,'IST','09:00:00','FCO','09:42:00','L',1.71,855,'B747'); \n+insert into FLIGHTS values ('US1294',1,'FCO','09:00:00','IST','11:42:00','L',1.71,855,'B747'); \n+insert into FLIGHTS values ('US1295',1,'IST','09:00:00','ATH','09:41:00','S',0.698,349,'B747'); \n+insert into FLIGHTS values ('US1296',1,'ATH','09:00:00','IST','09:41:00','S',0.698,349,'B747'); \n+insert into FLIGHTS values ('US1381',2,'JFK','12:00:00','CDG','01:15:00','L',7.258,3629,'B747'); \n+insert into FLIGHTS values ('US1382',1,'CDG','09:00:00','JFK','10:15:00','L',7.258,3629,'B747'); \n+insert into FLIGHTS values ('US1349',2,'JFK','13:49:00','LAX','15:42:00','L',4.896,2448,'B747'); \n+insert into FLIGHTS values ('US1300',1,'LAX','09:00:00','JFK','16:53:00','L',4.896,2448,'B747'); \n+insert into FLIGHTS values ('US1301',1,'JFK','09:00:00','GRU','20:33:00','L',9.556,4778,'B747'); \n+insert into FLIGHTS values ('US1302',1,'GRU','09:00:00','JFK','16:33:00','L',9.556,4778,'B747'); \n+insert into FLIGHTS values ('US1303',1,'JKT','09:00:00','HKG','14:03:00','L',4.054,2027,'B747'); \n+insert into FLIGHTS values ('US1304',1,'HKG','09:00:00','JKT','12:03:00','L',4.054,2027,'B747'); \n+insert into FLIGHTS values ('US1308',2,'JKT','13:35:00','SYD','00:25:00','L',6.844,3422,'B747'); \n+insert into FLIGHTS values ('US1307',1,'SYD','09:00:00','JKT','11:50:00','L',6.844,3422,'B747'); \n+insert into FLIGHTS values ('US1307',2,'JKT','12:15:00','TPE','17:59:00','L',4.748,2374,'B747'); \n+insert into FLIGHTS values ('US1308',1,'TPE','09:00:00','JKT','12:44:00','L',4.748,2374,'B747'); \n+insert into FLIGHTS values ('US1309',1,'JNU','09:00:00','SEA','11:46:00','L',1.782,891,'B747'); \n+insert into FLIGHTS values ('US1310',1,'SEA','09:00:00','JNU','09:46:00','L',1.782,891,'B747'); \n+insert into FLIGHTS values ('US1311',1,'JNU','09:00:00','SFO','13:02:00','L',3.034,1517,'B747'); \n+insert into FLIGHTS values ('US1312',1,'SFO','09:00:00','JNU','11:02:00','L',3.034,1517,'B747'); \n+insert into FLIGHTS values ('US1313',1,'JNU','09:00:00','HNL','13:37:00','L',5.626,2813,'B747'); \n+insert into FLIGHTS values ('US1314',1,'HNL','09:00:00','JNU','15:37:00','L',5.626,2813,'B747'); \n+insert into FLIGHTS values ('US1315',1,'KBL','09:00:00','KHI','10:21:00','L',1.358,679,'B747'); \n+insert into FLIGHTS values ('US1316',1,'KHI','09:00:00','KBL','10:21:00','L',1.358,679,'B747'); \n+insert into FLIGHTS values ('US1317',1,'KBL','09:00:00','IST','10:26:00','L',4.448,2224,'B747'); \n+insert into FLIGHTS values ('US1318',1,'IST','09:00:00','KBL','16:26:00','L',4.448,2224,'B747'); \n+"},{"sha":"75dc402c9c66a6944718d639cc96251b4469ff86","filename":"openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql","status":"added","additions":299,"deletions":0,"changes":299,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/reversemapping/schema/loadFLIGHTS2.sql?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,299 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one or more\n+-- contributor license agreements.  See the NOTICE file distributed with\n+-- this work for additional information regarding copyright ownership.\n+-- The ASF licenses this file to You under the Apache License, Version 2.0\n+-- (the \"License\"); you may not use this file except in compliance with\n+-- the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+\n+insert into FLIGHTS values ('AA1137',2,'KBL','13:30:00','SVO','15:41:00','S',4.192,2096,'A320'); \n+insert into FLIGHTS values ('AA1138',1,'SVO','09:00:00','KBL','15:11:00','L',4.192,2096,'A320'); \n+insert into FLIGHTS values ('US1321',1,'KHI','09:00:00','IST','10:54:00','L',4.9,2450,'B747'); \n+insert into FLIGHTS values ('US1322',1,'IST','09:00:00','KHI','16:54:00','L',4.9,2450,'B747'); \n+insert into FLIGHTS values ('US1323',1,'KHI','09:00:00','IST','10:54:00','L',4.9,2450,'B747'); \n+insert into FLIGHTS values ('US1324',1,'IST','09:00:00','KHI','16:54:00','L',4.9,2450,'B747'); \n+insert into FLIGHTS values ('US1325',1,'KHI','09:00:00','THR','09:53:00','L',2.384,1192,'B747'); \n+insert into FLIGHTS values ('US1326',1,'THR','09:00:00','KHI','12:53:00','L',2.384,1192,'B747'); \n+insert into FLIGHTS values ('US1327',1,'LAX','09:00:00','HNL','12:07:00','L',5.124,2562,'B747'); \n+insert into FLIGHTS values ('US1328',1,'HNL','09:00:00','LAX','16:07:00','L',5.124,2562,'B747'); \n+insert into FLIGHTS values ('US1329',1,'LAX','09:00:00','GRU','02:19:00','L',12.322,6161,'B747'); \n+insert into FLIGHTS values ('US1330',1,'GRU','09:00:00','LAX','16:19:00','L',12.322,6161,'B747'); \n+insert into FLIGHTS values ('US1331',1,'LAX','09:00:00','NRT','12:57:00','L',10.956,5478,'B747'); \n+insert into FLIGHTS values ('US1332',1,'NRT','09:00:00','LAX','02:57:00','L',10.956,5478,'B747'); \n+insert into FLIGHTS values ('US1333',1,'LHR','09:00:00','WAW','11:47:00','L',1.798,899,'B747'); \n+insert into FLIGHTS values ('US1334',1,'WAW','09:00:00','LHR','09:47:00','L',1.798,899,'B747'); \n+insert into FLIGHTS values ('US1335',1,'LHR','09:00:00','YYZ','11:06:00','L',7.106,3553,'B747'); \n+insert into FLIGHTS values ('US1336',1,'YYZ','09:00:00','LHR','21:06:00','L',7.106,3553,'B747'); \n+insert into FLIGHTS values ('US1337',1,'LHR','09:00:00','NBO','20:28:00','L',8.48,4240,'B747'); \n+insert into FLIGHTS values ('US1338',1,'NBO','09:00:00','LHR','14:28:00','L',8.48,4240,'B747'); \n+insert into FLIGHTS values ('US1501',2,'LIM','11:00:00','MIA','16:15:00','L',5.25,625,'B747'); \n+insert into FLIGHTS values ('US1340',1,'MIA','09:00:00','LIM','14:15:00','L',5.25,2625,'B747'); \n+insert into FLIGHTS values ('US1338',2,'LIM','20:00:00','MIA','01:15:00','L',5.25,2625,'B747'); \n+insert into FLIGHTS values ('US1339',1,'MIA','18:00:00','LIM','23:15:00','L',5.25,2625,'B747'); \n+insert into FLIGHTS values ('US1344',2,'LIM','12:00:00','BUE','18:53:00','L',3.896,1948,'B747'); \n+insert into FLIGHTS values ('US1342',1,'BUE','09:00:00','LIM','09:53:00','L',3.896,1948,'B747'); \n+insert into FLIGHTS values ('US1342',2,'LIM','10:30:00','BOG','12:50:00','L',2.338,1169,'B747'); \n+insert into FLIGHTS values ('US1344',1,'BOG','09:00:00','LIM','11:20:00','L',2.338,1169,'B747'); \n+insert into FLIGHTS values ('US1345',1,'LIS','09:00:00','CDG','11:48:00','L',1.806,903,'B747'); \n+insert into FLIGHTS values ('US1346',1,'CDG','09:00:00','LIS','09:48:00','L',1.806,903,'B747'); \n+insert into FLIGHTS values ('US1347',1,'LIS','09:00:00','CAS','09:43:00','S',0.73,365,'B747'); \n+insert into FLIGHTS values ('US1348',1,'CAS','09:00:00','LIS','09:43:00','S',0.73,365,'B747'); \n+insert into FLIGHTS values ('US1349',1,'LIS','09:00:00','JFK','10:44:00','L',6.744,3372,'B747'); \n+insert into FLIGHTS values ('US1300',2,'JFK','17:45:00','LIS','05:29:00','L',6.744,3372,'B747'); \n+insert into FLIGHTS values ('AA1223',1,'LOS','09:00:00','CDG','14:52:00','L',5.868,2934,'B747'); \n+insert into FLIGHTS values ('AA1224',2,'CDG','11:00:00','LOS','16:52:00','L',5.868,2934,'B747'); \n+insert into FLIGHTS values ('US1353',1,'LOS','09:00:00','MAD','13:46:00','L',4.776,2388,'B747'); \n+insert into FLIGHTS values ('US1354',1,'MAD','09:00:00','LOS','13:46:00','L',4.776,2388,'B747'); \n+insert into FLIGHTS values ('US1355',1,'LOS','09:00:00','ATH','15:03:00','L',5.054,2527,'B747'); \n+insert into FLIGHTS values ('US1356',1,'ATH','09:00:00','LOS','13:03:00','L',5.054,2527,'B747'); \n+insert into FLIGHTS values ('US1357',2,'MAD','11:45:00','CDG','13:03:00','L',1.31,655,'B747'); \n+insert into FLIGHTS values ('US1358',1,'CDG','09:00:00','MAD','10:18:00','L',1.31,655,'B747'); \n+insert into FLIGHTS values ('US1358',2,'MAD','11:05:00','CAS','11:07:00','L',1.036,518,'B747'); \n+insert into FLIGHTS values ('US1357',1,'CAS','09:00:00','MAD','11:02:00','L',1.036,518,'B747'); \n+insert into FLIGHTS values ('US1361',1,'MAD','09:00:00','JFK','10:10:00','L',7.178,3589,'B747'); \n+insert into FLIGHTS values ('US1362',1,'JFK','09:00:00','MAD','22:10:00','L',7.178,3589,'B747'); \n+insert into FLIGHTS values ('US1363',1,'MCI','09:00:00','LAX','09:42:00','L',2.71,1355,'B747'); \n+insert into FLIGHTS values ('US1364',1,'LAX','09:00:00','MCI','13:42:00','L',2.71,1355,'B747'); \n+insert into FLIGHTS values ('US1365',1,'MCI','09:00:00','DFW','09:54:00','L',0.908,454,'B747'); \n+insert into FLIGHTS values ('US1366',1,'DFW','09:00:00','MCI','09:54:00','L',0.908,454,'B747'); \n+insert into FLIGHTS values ('US1367',1,'MCI','09:00:00','JFK','12:11:00','L',2.19,1095,'B747'); \n+insert into FLIGHTS values ('US1368',1,'JFK','09:00:00','MCI','10:11:00','L',2.19,1095,'B747'); \n+insert into FLIGHTS values ('US1379',2,'MDW','10:03:00','LAX','11:31:00','L',3.482,1741,'B747'); \n+insert into FLIGHTS values ('US1380',1,'LAX','09:00:00','MDW','14:28:00','L',3.482,1741,'B747'); \n+insert into FLIGHTS values ('US1473',2,'MDW','13:30:00','JFK','15:55:00','L',1.428,714,'B747'); \n+insert into FLIGHTS values ('US1474',1,'JFK','11:00:00','MDW','11:25:00','L',1.428,714,'B747'); \n+insert into FLIGHTS values ('US1383',1,'MDW','12:15:00','ATL','14:25:00','L',1.174,587,'B747'); \n+insert into FLIGHTS values ('US1384',1,'ATL','11:30:00','MDW','11:40:00','L',1.174,587,'B747'); \n+insert into FLIGHTS values ('US1385',1,'MEL','09:00:00','SYD','09:52:00','L',0.882,441,'B747'); \n+insert into FLIGHTS values ('US1386',1,'SYD','09:00:00','MEL','09:52:00','L',0.882,441,'B747'); \n+insert into FLIGHTS values ('US1387',1,'MEL','09:00:00','SIN','13:32:00','L',7.536,3768,'B747'); \n+insert into FLIGHTS values ('US1388',2,'SIN','14:15:00','MEL','00:47:00','L',7.536,3768,'B747'); \n+insert into FLIGHTS values ('US1389',1,'MEL','09:00:00','HNL','23:02:00','L',11.044,5522,'B747'); \n+insert into FLIGHTS values ('US1390',1,'HNL','12:45:00','MEL','20:47:00','L',11.044,5522,'B747'); \n+insert into FLIGHTS values ('US1391',1,'MEM','09:00:00','MIA','11:44:00','L',1.742,871,'B747'); \n+insert into FLIGHTS values ('US1392',1,'MIA','09:00:00','MEM','09:44:00','L',1.742,871,'B747'); \n+insert into FLIGHTS values ('US1393',1,'MEM','09:00:00','JFK','11:54:00','L',1.908,954,'B747'); \n+insert into FLIGHTS values ('US1394',1,'JFK','09:00:00','MEM','09:54:00','L',1.908,954,'B747'); \n+insert into FLIGHTS values ('US1395',1,'MEM','09:00:00','LAX','10:12:00','L',3.202,1601,'B747'); \n+insert into FLIGHTS values ('US1396',1,'LAX','09:00:00','MEM','14:12:00','L',3.202,1601,'B747'); \n+insert into FLIGHTS values ('US1397',1,'MEX','09:00:00','SFO','10:46:00','L',3.78,1890,'B747'); \n+insert into FLIGHTS values ('US1398',1,'SFO','09:00:00','MEX','14:46:00','L',3.78,1890,'B747'); \n+insert into FLIGHTS values ('US1399',1,'MEX','15:00:00','LAX','16:06:00','S',3.1,1550,'B747'); \n+insert into FLIGHTS values ('US1400',1,'LAX','09:00:00','MEX','14:06:00','L',3.1,1550,'B747'); \n+insert into FLIGHTS values ('US1401',1,'MEX','09:00:00','BOG','13:57:00','L',3.95,1975,'B747'); \n+insert into FLIGHTS values ('US1402',1,'BOG','09:00:00','MEX','11:57:00','L',3.95,1975,'B747'); \n+insert into FLIGHTS values ('US1403',1,'MIA','18:00:00','GRU','04:10:00','L',8.172,4086,'B747'); \n+insert into FLIGHTS values ('US1404',1,'GRU','23:00:00','MIA','05:10:00','L',8.172,4086,'B747'); \n+insert into FLIGHTS values ('US1405',1,'MIA','17:30:00','LAX','19:10:00','D',4.67,2335,'B747'); \n+insert into FLIGHTS values ('US1406',1,'LAX','08:00:00','MIA','15:40:00','L',4.67,2335,'B747'); \n+insert into FLIGHTS values ('US1407',1,'MIA','09:00:00','JFK','11:11:00','L',2.184,1092,'B747'); \n+insert into FLIGHTS values ('US1408',1,'JFK','09:00:00','MIA','11:11:00','L',2.184,1092,'B747'); \n+insert into FLIGHTS values ('US1409',1,'MKE','09:00:00','JFK','11:27:00','L',1.466,733,'B747'); \n+insert into FLIGHTS values ('US1410',1,'JFK','09:00:00','MKE','09:27:00','L',1.466,733,'B747'); \n+insert into FLIGHTS values ('US1411',1,'MKE','09:00:00','MDW','09:09:00','S',0.166,83,'B747'); \n+insert into FLIGHTS values ('US1412',1,'MDW','09:00:00','MKE','09:09:00','S',0.166,83,'B747'); \n+insert into FLIGHTS values ('US1413',1,'MKE','09:00:00','JFK','11:27:00','L',1.466,733,'B747'); \n+insert into FLIGHTS values ('US1414',1,'JFK','09:00:00','MKE','09:27:00','L',1.466,733,'B747'); \n+insert into FLIGHTS values ('US1415',1,'MNL','09:00:00','SYD','19:47:00','L',7.794,3897,'B747'); \n+insert into FLIGHTS values ('US1416',1,'SYD','09:00:00','MNL','13:47:00','L',7.794,3897,'B747'); \n+insert into FLIGHTS values ('US1417',1,'MNL','09:00:00','TPE','10:26:00','L',1.448,724,'B747'); \n+insert into FLIGHTS values ('US1418',1,'TPE','09:00:00','MNL','10:26:00','L',1.448,724,'B747'); \n+insert into FLIGHTS values ('US1419',1,'MNL','09:00:00','SIN','11:58:00','L',2.978,1489,'B747'); \n+insert into FLIGHTS values ('US1420',2,'SIN','11:53:00','MNL','14:51:00','L',2.978,1489,'B747'); \n+insert into FLIGHTS values ('AA1419',1,'MNL','12:00:00','HKG','13:23:00','L',1.388,694,'B747'); \n+insert into FLIGHTS values ('AA1420',2,'HKG','17:53:00','MNL','19:16:00','D',1.388,694,'B747'); \n+insert into FLIGHTS values ('AA1421',1,'MNL','07:00:00','HNL','23:36:00','B',10.604,5302,'B747'); \n+insert into FLIGHTS values ('US1422',2,'HNL','14:05:00','MNL','18:41:00','L',10.604,5302,'B747'); \n+insert into FLIGHTS values ('AA1249',1,'MSP','09:00:00','DEN','09:52:00','L',1.882,941,'B747'); \n+insert into FLIGHTS values ('AA1250',2,'DEN','12:37:00','MSP','15:29:00','L',1.882,941,'B747'); \n+insert into FLIGHTS values ('US1423',1,'MSP','09:00:00','MDW','09:25:00','S',0.43,215,'B747'); \n+insert into FLIGHTS values ('US1424',1,'MDW','09:00:00','MSP','09:25:00','S',0.43,215,'B747'); \n+insert into FLIGHTS values ('AA1423',1,'MDW','08:00:00','MIA','11:22:00','L',2.376,1188,'B747'); \n+insert into FLIGHTS values ('AA1424',1,'MIA','17:00:00','MDW','18:22:00','L',2.376,1188,'B747'); \n+insert into FLIGHTS values ('US1427',1,'MSY','09:00:00','SFO','10:50:00','L',3.846,1923,'B747'); \n+insert into FLIGHTS values ('US1428',1,'SFO','09:00:00','MSY','14:50:00','L',3.846,1923,'B747'); \n+insert into FLIGHTS values ('US1429',1,'MSY','09:00:00','ATL','10:50:00','L',0.848,424,'B747'); \n+insert into FLIGHTS values ('US1430',1,'ATL','09:00:00','MSY','08:50:00','L',0.848,424,'B747'); \n+insert into FLIGHTS values ('US1431',1,'MSY','09:00:00','JFK','12:20:00','L',2.336,1168,'B747'); \n+insert into FLIGHTS values ('US1432',1,'JFK','09:00:00','MSY','10:20:00','L',2.336,1168,'B747'); \n+insert into FLIGHTS values ('US1433',1,'NBO','09:00:00','FCO','13:42:00','L',6.702,3351,'B747'); \n+insert into FLIGHTS values ('US1434',1,'FCO','09:00:00','NBO','17:42:00','L',6.702,3351,'B747'); \n+insert into FLIGHTS values ('US1435',1,'NBO','06:00:00','MAD','11:41:00','L',7.694,3847,'B747'); \n+insert into FLIGHTS values ('US1436',1,'MAD','13:10:00','NBO','22:51:00','L',7.694,3847,'B747'); \n+insert into FLIGHTS values ('US1437',1,'NBO','09:00:00','CAS','13:31:00','L',7.518,3759,'B747'); \n+insert into FLIGHTS values ('US1438',1,'CAS','09:00:00','NBO','19:31:00','L',7.518,3759,'B747'); \n+insert into FLIGHTS values ('US1439',1,'NRT','09:00:00','SYD','20:44:00','L',9.736,4868,'B747'); \n+insert into FLIGHTS values ('US1440',1,'SYD','09:00:00','NRT','16:44:00','L',9.736,4868,'B747'); \n+insert into FLIGHTS values ('US1441',1,'NRT','09:00:00','LAX','02:57:00','L',10.956,5478,'B747'); \n+insert into FLIGHTS values ('US1442',1,'LAX','09:00:00','NRT','12:57:00','L',10.956,5478,'B747'); \n+insert into FLIGHTS values ('US1443',2,'NRT','14:45:00','HKG','17:20:00','L',3.596,1798,'B747'); \n+insert into FLIGHTS values ('US1444',1,'HKG','09:00:00','NRT','13:35:00','L',3.596,1798,'B747'); \n+insert into FLIGHTS values ('US1445',1,'OKC','09:00:00','SLC','09:43:00','L',1.722,861,'B747'); \n+insert into FLIGHTS values ('US1446',1,'SLC','09:00:00','OKC','11:43:00','L',1.722,861,'B747'); \n+insert into FLIGHTS values ('US1447',1,'OKC','09:00:00','JFK','12:38:00','L',2.648,1324,'B747'); \n+insert into FLIGHTS values ('US1448',1,'JFK','09:00:00','OKC','10:38:00','L',2.648,1324,'B747'); \n+insert into FLIGHTS values ('US1449',1,'OKC','09:00:00','LAX','09:21:00','L',2.36,1180,'B747'); \n+insert into FLIGHTS values ('US1450',1,'LAX','09:00:00','OKC','13:21:00','L',2.36,1180,'B747'); \n+insert into FLIGHTS values ('US1451',1,'OSA','09:00:00','NRT','09:30:00','S',0.502,251,'B747'); \n+insert into FLIGHTS values ('US1452',1,'NRT','09:00:00','OSA','09:30:00','S',0.502,251,'B747'); \n+insert into FLIGHTS values ('US1453',1,'OSA','09:00:00','TPE','10:08:00','L',2.138,1069,'B747'); \n+insert into FLIGHTS values ('US1454',1,'TPE','09:00:00','OSA','12:08:00','L',2.138,1069,'B747'); \n+insert into FLIGHTS values ('US1455',1,'OSA','09:00:00','SVO','12:07:00','L',9.13,4565,'B747'); \n+insert into FLIGHTS values ('US1456',1,'SVO','09:00:00','OSA','00:07:00','L',9.13,4565,'B747'); \n+insert into FLIGHTS values ('US1457',1,'OSL','09:00:00','PRG','10:23:00','L',1.39,695,'B747'); \n+insert into FLIGHTS values ('US1458',1,'PRG','11:00:00','OSL','12:23:00','L',1.39,695,'B747'); \n+insert into FLIGHTS values ('US1459',1,'OSL','09:00:00','ARN','10:34:00','L',1.574,787,'B747'); \n+insert into FLIGHTS values ('US1460',1,'ARN','09:00:00','OSL','10:34:00','L',1.574,787,'B747'); \n+insert into FLIGHTS values ('US1461',1,'OSL','09:00:00','WAW','10:19:00','L',1.318,659,'B747'); \n+insert into FLIGHTS values ('US1462',1,'WAW','09:00:00','OSL','10:19:00','L',1.318,659,'B747'); \n+insert into FLIGHTS values ('AA1462',1,'OSL','07:15:00','CDG','08:55:00','B',1.668,834,'B747'); \n+insert into FLIGHTS values ('AA1463',1,'CDG','11:00:00','OSL','12:40:00','L',1.668,834,'B747'); \n+insert into FLIGHTS values ('US1463',1,'PHL','09:00:00','IAD','09:21:00','S',0.364,182,'B747'); \n+insert into FLIGHTS values ('US1464',1,'IAD','09:00:00','PHL','09:21:00','S',0.364,182,'B747'); \n+insert into FLIGHTS values ('US1465',1,'PHL','09:00:00','MIA','11:02:00','L',2.044,1022,'B747'); \n+insert into FLIGHTS values ('US1466',1,'MIA','09:00:00','PHL','11:02:00','L',2.044,1022,'B747'); \n+insert into FLIGHTS values ('AA1258',1,'PHL','09:00:00','ATL','10:19:00','L',1.33,665,'B747'); \n+insert into FLIGHTS values ('AA1257',2,'ATL','12:10:00','PHL','13:29:00','L',1.33,665,'B747'); \n+insert into FLIGHTS values ('US1469',1,'PHX','09:00:00','LAX','08:42:00','S',0.714,357,'B747'); \n+insert into FLIGHTS values ('US1470',1,'LAX','09:00:00','PHX','10:42:00','S',0.714,357,'B747'); \n+insert into FLIGHTS values ('US1471',1,'PHX','09:00:00','SEA','10:13:00','L',2.23,1115,'B747'); \n+insert into FLIGHTS values ('US1472',1,'SEA','09:00:00','PHX','12:13:00','L',2.23,1115,'B747'); \n+insert into FLIGHTS values ('US1473',1,'PHX','09:00:00','MDW','12:53:00','L',2.898,1449,'B747'); \n+insert into FLIGHTS values ('US1474',2,'MDW','09:55:00','PHX','11:48:00','L',2.898,1449,'B747'); \n+insert into FLIGHTS values ('US1475',1,'PRG','09:00:00','CDG','10:06:00','L',1.102,551,'B747'); \n+insert into FLIGHTS values ('US1476',1,'CDG','09:00:00','PRG','10:06:00','L',1.102,551,'B747'); \n+insert into FLIGHTS values ('US1477',1,'PRG','09:00:00','FCO','10:08:00','L',1.146,573,'B747'); \n+insert into FLIGHTS values ('US1478',1,'FCO','09:00:00','PRG','10:08:00','L',1.146,573,'B747'); \n+insert into FLIGHTS values ('US1479',1,'PRG','09:00:00','REY','11:16:00','B',3.282,1641,'A320'); \n+insert into FLIGHTS values ('US1480',1,'REY','09:00:00','PRG','13:16:00','L',3.282,1641,'A320'); \n+insert into FLIGHTS values ('US1481',1,'REY','09:00:00','SVO','16:06:00','L',4.112,2056,'B747'); \n+insert into FLIGHTS values ('US1482',2,'SVO','13:15:00','REY','14:21:00','L',4.112,2056,'B747'); \n+insert into FLIGHTS values ('US1483',1,'REY','09:00:00','CDG','12:46:00','L',2.776,1388,'B747'); \n+insert into FLIGHTS values ('US1484',1,'CDG','09:00:00','REY','10:46:00','L',2.776,1388,'B747'); \n+insert into FLIGHTS values ('US1485',1,'REY','09:00:00','DUB','10:51:00','L',1.862,931,'B747'); \n+insert into FLIGHTS values ('US1486',1,'DUB','09:00:00','REY','10:51:00','L',1.862,931,'B747'); \n+insert into FLIGHTS values ('US1487',1,'SAN','09:00:00','SFO','09:55:00','L',0.918,459,'B747'); \n+insert into FLIGHTS values ('US1488',1,'SFO','09:00:00','SAN','09:55:00','L',0.918,459,'B747'); \n+insert into FLIGHTS values ('US1489',1,'SAN','09:00:00','DFW','13:21:00','L',2.36,1180,'B747'); \n+insert into FLIGHTS values ('US1490',1,'DFW','09:00:00','SAN','09:21:00','L',2.36,1180,'B747'); \n+insert into FLIGHTS values ('US1491',1,'SAN','09:00:00','MEX','13:53:00','L',2.888,1444,'B747'); \n+insert into FLIGHTS values ('US1492',1,'MEX','09:00:00','SAN','09:53:00','L',2.888,1444,'B747'); \n+insert into FLIGHTS values ('US1493',1,'SAT','09:00:00','ATL','11:45:00','L',1.766,883,'B747'); \n+insert into FLIGHTS values ('US1494',1,'ATL','09:00:00','SAT','09:45:00','L',1.766,883,'B747'); \n+insert into FLIGHTS values ('US1495',1,'SAT','09:00:00','LAX','09:24:00','L',2.404,1202,'B747'); \n+insert into FLIGHTS values ('US1496',1,'LAX','09:00:00','SAT','13:24:00','L',2.404,1202,'B747'); \n+insert into FLIGHTS values ('US1497',1,'SAT','09:00:00','MIA','12:17:00','L',2.292,1146,'B747'); \n+insert into FLIGHTS values ('US1498',1,'MIA','09:00:00','SAT','10:17:00','L',2.292,1146,'B747'); \n+insert into FLIGHTS values ('US1499',1,'SCL','09:00:00','GRU','12:13:00','L',3.218,1609,'B747'); \n+insert into FLIGHTS values ('US1500',1,'GRU','09:00:00','SCL','12:13:00','L',3.218,1609,'B747'); \n+insert into FLIGHTS values ('US1501',1,'SCL','09:00:00','LIM','10:04:00','L',3.068,1534,'B747'); \n+insert into FLIGHTS values ('US1340',2,'LIM','15:00:00','SCL','20:04:00','L',3.068,1534,'B747'); \n+insert into FLIGHTS values ('US1503',1,'SCL','09:00:00','BUE','11:24:00','L',1.408,704,'B747'); \n+insert into FLIGHTS values ('US1504',1,'BUE','09:00:00','SCL','09:24:00','L',1.408,704,'B747'); \n+insert into FLIGHTS values ('US1505',1,'SEA','09:00:00','SFO','10:21:00','L',1.356,678,'B747'); \n+insert into FLIGHTS values ('AA1505',1,'SFO','09:00:00','SEA','10:21:00','L',1.356,678,'B747'); \n+insert into FLIGHTS values ('US1506',1,'SEA','09:00:00','JFK','16:48:00','L',4.81,2405,'B747'); \n+insert into FLIGHTS values ('US1507',1,'JFK','09:00:00','SEA','10:48:00','L',4.81,2405,'B747'); \n+insert into FLIGHTS values ('US1508',1,'SEA','09:00:00','MIA','17:27:00','L',5.462,2731,'B747'); \n+insert into FLIGHTS values ('US1509',2,'MIA','15:15:00','SEA','17:42:00','L',5.462,2731,'B747'); \n+insert into FLIGHTS values ('US1510',1,'SEL','09:00:00','NRT','10:26:00','L',1.438,719,'B747'); \n+insert into FLIGHTS values ('US1511',1,'NRT','09:00:00','SEL','10:26:00','L',1.438,719,'B747'); \n+insert into FLIGHTS values ('US1388',1,'SEL','09:00:00','SIN','13:49:00','L',5.818,2909,'B747'); \n+insert into FLIGHTS values ('US1387',2,'SIN','14:05:00','SEL','20:54:00','L',5.818,2909,'B747'); \n+insert into FLIGHTS values ('US1514',1,'SEL','09:00:00','SHA','09:05:00','L',1.098,549,'B747'); \n+insert into FLIGHTS values ('US1515',1,'SHA','09:00:00','SEL','11:05:00','L',1.098,549,'B747'); \n+insert into FLIGHTS values ('US1516',1,'SFO','12:00:00','JFK','20:08:00','L',5.136,2568,'B747'); \n+insert into FLIGHTS values ('US1517',2,'JFK','11:05:00','SFO','13:13:00','L',5.136,2568,'B747'); \n+insert into FLIGHTS values ('US1518',1,'SFO','09:00:00','MIA','17:10:00','L',5.18,2590,'B747'); \n+insert into FLIGHTS values ('US1518',2,'MIA','18:05:00','SCL','04:22:00','L',8.288,4144,'B747'); \n+insert into FLIGHTS values ('US1519',1,'SCL','09:00:00','MIA','15:17:00','D',8.288,4144,'B747'); \n+insert into FLIGHTS values ('US1519',2,'MIA','16:10:00','SFO','18:20:00','D',5.18,2590,'B747'); \n+insert into FLIGHTS values ('US1529',1,'SFO','09:00:00','HNL','11:47:00','L',4.794,2397,'B747'); \n+insert into FLIGHTS values ('US1521',1,'HNL','09:00:00','SFO','15:47:00','L',4.794,2397,'B747'); \n+insert into FLIGHTS values ('US1522',1,'SHA','09:00:00','SIN','13:43:00','L',4.72,2360,'B747'); \n+insert into FLIGHTS values ('US1523',1,'SIN','09:00:00','SHA','13:43:00','L',4.72,2360,'B747'); \n+insert into FLIGHTS values ('US1524',1,'SHA','09:00:00','HKG','10:30:00','L',1.514,757,'B747'); \n+insert into FLIGHTS values ('US1525',1,'HKG','09:00:00','SHA','10:30:00','L',1.514,757,'B747'); \n+insert into FLIGHTS values ('US1526',1,'SHA','09:00:00','SVO','12:29:00','L',8.486,4243,'B747'); \n+insert into FLIGHTS values ('US1527',1,'SVO','09:00:00','SHA','22:29:00','L',8.486,4243,'B747'); \n+insert into FLIGHTS values ('AA1528',1,'SIN','09:00:00','SYD','19:50:00','L',7.834,3917,'B747'); \n+insert into FLIGHTS values ('AA1529',1,'SYD','09:00:00','SIN','13:50:00','L',7.834,3917,'B747'); \n+insert into FLIGHTS values ('US1419',2,'SIN','12:35:00','JKT','12:41:00','L',1.108,554,'B747'); \n+insert into FLIGHTS values ('US1420',1,'JKT','09:00:00','SIN','11:06:00','L',1.108,554,'B747'); \n+insert into FLIGHTS values ('AA1532',1,'SIN','09:00:00','HKG','12:12:00','L',3.214,1607,'B747'); \n+insert into FLIGHTS values ('AA1533',1,'HKG','09:00:00','SIN','12:12:00','L',3.214,1607,'B747'); \n+insert into FLIGHTS values ('AA1186',1,'SJU','09:00:00','MIA','10:04:00','L',2.07,1035,'B747'); \n+insert into FLIGHTS values ('AA1185',2,'MIA','12:20:00','SJU','15:24:00','L',2.07,1035,'B747'); \n+insert into FLIGHTS values ('US1536',1,'SJU','09:00:00','CCS','10:06:00','L',1.106,553,'B747'); \n+insert into FLIGHTS values ('US1537',1,'CCS','09:00:00','SJU','10:06:00','L',1.106,553,'B747'); \n+insert into FLIGHTS values ('US1538',1,'SJU','09:00:00','MEL','20:17:00','L',20.288,10144,'B747'); \n+insert into FLIGHTS values ('US1539',1,'MEL','09:00:00','SJU','14:17:00','L',20.288,10144,'B747'); \n+insert into FLIGHTS values ('US1540',1,'SLC','09:00:00','DEN','09:44:00','S',0.74,370,'B747'); \n+insert into FLIGHTS values ('US1541',1,'DEN','09:00:00','SLC','09:44:00','S',0.74,370,'B747'); \n+insert into FLIGHTS values ('US1542',1,'SLC','09:00:00','SFO','09:11:00','L',1.198,599,'B747'); \n+insert into FLIGHTS values ('US1543',1,'SFO','09:00:00','SLC','11:11:00','L',1.198,599,'B747'); \n+insert into FLIGHTS values ('US1544',1,'SLC','09:00:00','MDW','12:30:00','L',2.51,1255,'B747'); \n+insert into FLIGHTS values ('US1545',1,'MDW','09:00:00','SLC','10:30:00','L',2.51,1255,'B747'); \n+insert into FLIGHTS values ('US1546',1,'STL','09:00:00','MDW','09:31:00','S',0.518,259,'B747'); \n+insert into FLIGHTS values ('US1547',1,'MDW','09:00:00','STL','09:31:00','S',0.518,259,'B747'); \n+insert into FLIGHTS values ('US1548',1,'STL','09:00:00','JFK','11:44:00','L',1.746,873,'B747'); \n+insert into FLIGHTS values ('US1549',1,'JFK','09:00:00','STL','09:44:00','L',1.746,873,'B747'); \n+insert into FLIGHTS values ('US1550',1,'STL','09:00:00','LAX','10:10:00','L',3.174,1587,'B747'); \n+insert into FLIGHTS values ('US1551',1,'LAX','09:00:00','STL','14:10:00','L',3.174,1587,'B747'); \n+insert into FLIGHTS values ('US1552',1,'SVO','14:00:00','CDG','15:05:00','L',3.09,1545,'B747'); \n+insert into FLIGHTS values ('US1553',1,'CDG','14:00:00','SVO','19:05:00','L',3.09,1545,'B747'); \n+insert into FLIGHTS values ('US1554',1,'SVO','09:00:00','NRT','00:18:00','L',9.308,4654,'B747'); \n+insert into FLIGHTS values ('US1555',1,'NRT','09:00:00','SVO','12:18:00','L',9.308,4654,'B747'); \n+insert into FLIGHTS values ('US1481',2,'SVO','13:45:00','BOM','22:30:00','L',6.266,3133,'B747'); \n+insert into FLIGHTS values ('US1482',1,'BOM','09:00:00','SVO','12:45:00','L',6.266,3133,'B747'); \n+insert into FLIGHTS values ('US1558',1,'SYD','09:00:00','AKL','13:40:00','L',2.682,1341,'B747'); \n+insert into FLIGHTS values ('US1559',1,'AKL','09:00:00','SYD','09:40:00','L',2.682,1341,'B747'); \n+insert into FLIGHTS values ('US1560',1,'SYD','15:00:00','HNL','04:09:00','L',10.16,5080,'B747'); \n+insert into FLIGHTS values ('US1561',1,'HNL','13:00:00','SYD','20:09:00','L',10.16,5080,'B747'); \n+insert into FLIGHTS values ('US1562',1,'SYD','09:00:00','HKG','15:09:00','L',9.166,4583,'B747'); \n+insert into FLIGHTS values ('US1563',1,'HKG','09:00:00','SYD','21:09:00','L',9.166,4583,'B747'); \n+insert into FLIGHTS values ('US1564',1,'THR','09:00:00','KBL','12:30:00','L',2.014,1007,'B747'); \n+insert into FLIGHTS values ('US1565',1,'KBL','09:00:00','THR','09:30:00','L',2.014,1007,'B747'); \n+insert into FLIGHTS values ('US1566',1,'THR','09:00:00','KHI','12:53:00','L',2.384,1192,'B747'); \n+insert into FLIGHTS values ('US1567',1,'KHI','09:00:00','THR','09:53:00','L',2.384,1192,'B747'); \n+insert into FLIGHTS values ('US1568',1,'THR','09:00:00','CAI','09:57:00','L',2.464,1232,'B747'); \n+insert into FLIGHTS values ('US1569',1,'CAI','09:00:00','THR','12:57:00','L',2.464,1232,'B747'); \n+insert into FLIGHTS values ('AA1214',1,'TPE','09:00:00','HKG','10:00:00','L',1.006,503,'B747'); \n+insert into FLIGHTS values ('AA1213',2,'HKG','15:33:00','TPE','16:33:00','L',1.006,503,'B747'); \n+insert into FLIGHTS values ('US1572',1,'TPE','09:00:00','SYD','21:02:00','L',9.036,4518,'B747'); \n+insert into FLIGHTS values ('US1573',1,'SYD','09:00:00','TPE','15:02:00','L',9.036,4518,'B747'); \n+insert into FLIGHTS values ('US1574',1,'TPE','09:00:00','OSA','12:08:00','L',2.138,1069,'B747'); \n+insert into FLIGHTS values ('US1575',1,'OSA','09:00:00','TPE','10:08:00','L',2.138,1069,'B747'); \n+insert into FLIGHTS values ('US1576',1,'WAW','09:00:00','PRG','09:38:00','S',0.64,320,'B747'); \n+insert into FLIGHTS values ('US1577',1,'PRG','09:00:00','WAW','09:38:00','S',0.64,320,'B747'); \n+insert into FLIGHTS values ('US1578',1,'WAW','09:00:00','SVO','12:25:00','L',1.428,714,'B747'); \n+insert into FLIGHTS values ('US1579',1,'SVO','09:00:00','WAW','08:25:00','L',1.428,714,'B747'); \n+insert into FLIGHTS values ('US1580',1,'WAW','09:00:00','ARN','09:28:00','S',0.478,239,'B747'); \n+insert into FLIGHTS values ('US1581',1,'ARN','09:00:00','WAW','09:28:00','S',0.478,239,'B747'); \n+insert into FLIGHTS values ('US1379',1,'YUL','09:00:00','MDW','09:29:00','L',1.494,747,'B747'); \n+insert into FLIGHTS values ('US1380',2,'MDW','13:03:00','YUL','15:32:00','L',1.494,747,'B747'); \n+insert into FLIGHTS values ('US1584',1,'YUL','09:00:00','JFK','09:39:00','S',0.664,332,'B747'); \n+insert into FLIGHTS values ('US1585',1,'JFK','09:00:00','YUL','09:39:00','S',0.664,332,'B747'); \n+insert into FLIGHTS values ('US1586',1,'YUL','09:00:00','SFO','11:04:00','L',5.076,2538,'B747'); \n+insert into FLIGHTS values ('US1587',1,'SFO','09:00:00','YUL','17:04:00','L',5.076,2538,'B747'); \n+insert into FLIGHTS values ('US1588',1,'YYZ','09:00:00','SEA','10:08:00','L',4.134,2067,'B747'); \n+insert into FLIGHTS values ('US1589',1,'SEA','09:00:00','YYZ','16:08:00','L',4.134,2067,'B747'); \n+insert into FLIGHTS values ('US1590',1,'YYZ','09:00:00','MIA','11:28:00','L',2.474,1237,'B747'); \n+insert into FLIGHTS values ('US1591',2,'MIA','12:45:00','YYZ','15:13:00','L',2.474,1237,'DC10'); \n+insert into FLIGHTS values ('US1592',1,'YYZ','09:00:00','LHR','21:06:00','L',7.106,3553,'DC10'); \n+insert into FLIGHTS values ('US1593',1,'LHR','09:00:00','YYZ','11:06:00','L',7.106,3553,'B747'); \n+insert into FLIGHTS values ('AA1600',1,'SFO','07:00:00','LAX','07:41:00','S',0.694,347,'B767'); \n+insert into FLIGHTS values ('AA1601',1,'LAX','07:00:00','SFO','07:41:00','S',0.694,347,'B767'); \n+insert into FLIGHTS values ('AA1602',1,'SFO','14:00:00','LAX','14:41:00','S',0.694,347,'B767'); \n+insert into FLIGHTS values ('AA1603',1,'LAX','14:00:00','SFO','14:41:00','S',0.622,347,'B767'); \n+insert into FLIGHTS values ('US1600',1,'YYZ','09:00:00','YUL','09:37:00','S',0.694,311,'DC10'); \n+insert into FLIGHTS values ('US1600',2,'YUL','10:00:00','SCL','18:55:00','L',10.926,5463,'DC10'); \n+insert into FLIGHTS values ('US1601',1,'SCL','05:00:00','YUL','17:55:00','L',10.926,5463,'DC10'); \n+insert into FLIGHTS values ('US1601',2,'YUL','19:00:00','YYZ','19:37:00','L',0.622,311,'DC10'); "},{"sha":"0a38299aefb31b5a3bf546ec5b98e72b3fd95233","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":20,"deletions":7,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -37,7 +37,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <version>1.0.0</version>\n     </parent>\n \n     <profiles>\n@@ -55,14 +55,27 @@\n                         <tasks>\n                         <echo>Running OpenJPA Examples</echo>\n \n-                        <property name=\"binary.zip\" value=\"../../openjpa-project/target/assembly/openjpa-${version}-binary.zip\"/>\n-\n                         <property name=\"examples.base\"\n                             value=\"${basedir}/target/examples\"/>\n-                        <unzip overwrite=\"false\"\n-                            src=\"${binary.zip}\" dest=\"${examples.base}\"/>\n+                        <mkdir dir=\"${examples.base}\"/>\n+\n+                        <unzip overwrite=\"false\" dest=\"${examples.base}\"\n+                            src=\"../../target/site/downloads/apache-openjpa-${pom.version}-binary.zip\"/>\n+\n+                        <path id=\"assembly.classpath\"> \n+                            <fileset dir=\"${examples.base}\">\n+                                <include name=\"**/*.jar\"/>\n+                            </fileset>\n+                        </path>\n+                        <available\n+                            classname=\"org.apache.openjpa.conf.OpenJPAVersion\"\n+                            classpathref=\"assembly.classpath\"\n+                            property=\"unzip.success\"/>\n+                        <fail unless=\"unzip.success\">\n+                            Could not extract assembly.\n+                        </fail>\n \n-                        <subant inheritAll=\"false\">\n+                        <subant inheritAll=\"false\" failonerror=\"true\">\n                             <fileset dir=\"${examples.base}\"\n                                 includes=\"*/examples/*/build.xml\"/>\n                         </subant>\n@@ -83,7 +96,7 @@\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-all</artifactId>\n+            <artifactId>openjpa</artifactId>\n             <version>${pom.version}</version>\n         </dependency>\n     </dependencies>"},{"sha":"58789ee844967b03a3d92b9f2013b9fa718d1ece","filename":"openjpa-integration/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -27,8 +27,8 @@\n     <name>OpenJPA Integration Tests</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"e3ca8a619c67b6788801206f6deb21f720f5359d","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -55,7 +55,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <version>1.0.0</version>\n     </parent>\n \n     <profiles>\n@@ -174,12 +174,13 @@ database.driver=${db.driver}\n \n                         <path id=\"agent.path\">\n                             <fileset dir=\"../../openjpa-all/target\">\n-                                <include name=\"**/*.jar\"/>\n+                                <include name=\"*.jar\"/>\n                             </fileset>\n                         </path>\n                         <pathconvert dirsep=\"/\" property=\"agent\" \n                             refid=\"agent.path\"/>\n-                        <echo>AGENT: ${agent}</echo>\n+                        <property name=\"agent.properties\" value=\"\"/>\n+                        <echo>AGENT: ${agent}${agent.properties}</echo>\n \n                         <!--\n                             Replace the existing javaagent argument (which\n@@ -189,7 +190,7 @@ database.driver=${db.driver}\n                             persistent classes to work (like the SignatureTest)\n                         -->\n                         <replace file=\"${jpatck.config}\">\n-                            <replacefilter token=\"-javaagent:${jpa.home}/lib/toplink-essentials-agent.jar\" value=\"-javaagent:${agent} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\"/>\n+                            <replacefilter token=\"-javaagent:${jpa.home}/lib/toplink-essentials-agent.jar\" value=\"-javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\"/>\n                         </replace>\n \n                         <!-- make a macro for the TCK harness launcher -->"},{"sha":"e1c6baacabe49fee47c70b17cc315017c52238a1","filename":"openjpa-integration/tck/windows-replacefilter.properties","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/tck/windows-replacefilter.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-integration/tck/windows-replacefilter.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/windows-replacefilter.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -1,3 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n \\\\: /\n Documents\\ and\\ Settings: Docume~1\n Program\\ Files: Progra~1"},{"sha":"6b77f6ab9e1f7722f2b66fe7eb46b67ce5082185","filename":"openjpa-jdbc-5/pom.xml","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,11 +26,11 @@\n     <packaging>jar</packaging>\n     <name>OpenJPA JDBC 1.5</name>\n     <description>OpenJPA JDBC 1.5</description>\n-    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <url>http://openjpa.apache.org</url>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -39,6 +39,11 @@\n             <version>${pom.version}</version>\n             <scope>compile</scope>\n         </dependency>\n+\t    <dependency>\n+\t\t    <groupId>javax.xml.bind</groupId>\n+\t\t    <artifactId>jaxb-api</artifactId>\n+\t\t    <version>2.0</version>\n+\t    </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"7008ec062300ae41a88ab8d1d2b35dea9ff52082","filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.meta.strats;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.util.InternalException;\n+\n+/**\n+ * Base class for xml value handlers.\n+ *\n+ * @author Catalina Wei\n+ * @since 1.0\n+ */\n+public class XMLValueHandler\n+    extends AbstractValueHandler {\n+    private static final String PROXY_SUFFIX = \"$proxy\";\n+\n+    public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        Column col = new Column();\n+        col.setName(name);\n+        col.setJavaType(JavaTypes.STRING);\n+        col.setSize(-1);\n+        col.setTypeName(vm.getMappingRepository().getDBDictionary()\n+            .xmlTypeName);\n+        return new Column[]{ col };\n+    }\n+\n+    public Object toDataStoreValue(ValueMapping vm, Object val,\n+        JDBCStore store) {\n+        // check for null value.\n+        if (val == null) \n+            return null;\n+        try {\n+            JAXBContext jc = JAXBContext.newInstance(\n+                // on update val is a proxy, that can not be marshalled.\n+                // so we get original type if val is a proxy.\n+                (val.getClass().getName().endsWith(PROXY_SUFFIX))\n+                     ? val.getClass().getSuperclass()\n+                     : val.getClass());\n+            Marshaller m = jc.createMarshaller();            \n+            Writer result = new StringWriter();\n+            m.marshal( val, result );\n+            return result.toString();\n+        }\n+        catch (JAXBException je) {\n+            throw new InternalException(je);\n+        }\n+    }\n+\n+    public Object toObjectValue(ValueMapping vm, Object val) {\n+        // check for null value.\n+        if (val == null) \n+            return null;\n+        try {\n+            String packageName = vm.getDeclaredType().getPackage().getName();\n+            JAXBContext jc = JAXBContext.newInstance(packageName);\n+            Unmarshaller u = jc.createUnmarshaller();\n+            return u.unmarshal(new StreamSource(new StringReader\n+                    (val.toString())));\n+        }\n+        catch (JAXBException je) {\n+            throw new InternalException(je);\n+        }\n+    }\n+}"},{"sha":"44de33502811c5b9f05252af64bf56f133a04a33","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":23,"deletions":4,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,12 +26,32 @@\n     <packaging>jar</packaging>\n     <name>OpenJPA JDBC</name>\n     <description>OpenJPA JDBC</description>\n-    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <url>http://openjpa.apache.org</url>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n+    <profiles>\n+        <profile>\n+            <id>java14-validate</id>\n+            <activation><property><name>java14.jar</name></property></activation>\n+            <build>\n+                <pluginManagement>\n+                    <plugins>\n+                        <plugin>\n+                            <artifactId>maven-compiler-plugin</artifactId>\n+                            <configuration>\n+                                <compilerArguments>\n+                                    <bootclasspath>${java14.jar}</bootclasspath>\n+                                </compilerArguments>\n+                            </configuration>\n+                        </plugin>\n+                    </plugins>\n+                </pluginManagement>\n+            </build>\n+        </profile>\n+    </profiles>\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n@@ -49,7 +69,6 @@\n     <build>\n         <plugins>\n             <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n                     <source>1.4</source>"},{"sha":"6706229a59c839b3703266621fa00656953dbe5c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.ant;\n \n+import java.security.AccessController;\n+\n import org.apache.tools.ant.BuildException;\n import org.apache.tools.ant.types.EnumeratedAttribute;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -27,6 +29,7 @@\n import org.apache.openjpa.lib.ant.AbstractTask;\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.MultiLoaderClassResolver;\n \n@@ -183,7 +186,8 @@ protected void executeOn(String[] files)\n \n         MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n         resolver.addClassLoader(loader);\n-        resolver.addClassLoader(MappingTool.class.getClassLoader());\n+        resolver.addClassLoader((ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getClassLoaderAction(MappingTool.class)));\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         conf.setClassResolver(resolver);\n "},{"sha":"176547dfba0d67756397ca943f0a9831fa85769f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"modified","additions":54,"deletions":3,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,9 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Properties;\n \n import org.apache.commons.lang.StringUtils;\n@@ -33,6 +36,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.tools.ant.types.EnumeratedAttribute;\n \n /**\n@@ -122,6 +126,14 @@ public void setBlobAsObject(boolean blobAsObject) {\n         flags.blobAsObject = blobAsObject;\n     }\n \n+    /**\n+     * Set whether to use generic collections on one-to-many and many-to-many\n+     * relations instead of untyped collections.\n+     */\n+    public void setUseGenericCollections(boolean useGenericCollections) {\n+        flags.useGenericCollections = useGenericCollections; \n+    }\n+\n     /**\n      * Set the SQL type map overrides.\n      */\n@@ -201,6 +213,22 @@ public void setMetadata(Level level) {\n         flags.metaDataLevel = level.getValue();\n     }\n \n+    /**\n+     * Whether to generate annotations along with generated code. Defaults\n+     * to false.\n+     */\n+    public void setGenerateAnnotations(boolean genAnnotations) {\n+        flags.generateAnnotations = genAnnotations;\n+    }\n+\n+    /**\n+     * Whether to use field or property-based access on generated code.\n+     * Defaults to field-based access.\n+     */\n+    public void setAccessType(AccessType accessType) {\n+        flags.accessType = accessType.getValue();\n+    }\n+    \n     /**\n      * Set a customizer class to use.\n      */\n@@ -234,14 +262,25 @@ protected void executeOn(String[] files)\n         // load customizer properties\n         Properties customProps = new Properties();\n         File propsFile = Files.getFile(customizerProperties, loader);\n-        if (propsFile != null && propsFile.exists())\n-            customProps.load(new FileInputStream(propsFile));\n+        if (propsFile != null && ((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(propsFile))).booleanValue()) {\n+            FileInputStream fis = null;\n+            try {\n+                fis = (FileInputStream) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newFileInputStreamAction(propsFile));\n+            } catch (PrivilegedActionException pae) {\n+                 throw (FileNotFoundException) pae.getException();\n+            }\n+            customProps.load(fis);\n+        }\n \n         // create and configure customizer\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         flags.customizer = (ReverseCustomizer) Configurations.\n             newInstance(customizerClass, conf, null,\n-                ReverseCustomizer.class.getClassLoader());\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(\n+                        ReverseCustomizer.class)));\n         if (flags.customizer != null)\n             flags.customizer.setConfiguration(customProps);\n \n@@ -255,6 +294,18 @@ protected void executeOn(String[] files)\n             return new String[]{\n                 \"package\",\n                 \"class\",\n+                \"none\"\n+            };\n+        }\n+    }\n+\n+    public static class AccessType\n+        extends EnumeratedAttribute {\n+\n+        public String[] getValues() {\n+            return new String[]{\n+                \"field\",\n+                \"property\"\n             };\n         }\n     }"},{"sha":"ff6768f54869359d9bfd0a5690d13bd65dd9550e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -214,9 +214,11 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         updateManagerPlugin = addPlugin(\"jdbc.UpdateManager\", true);\n         aliases = new String[]{\n             \"default\",\n-            \"org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager\",\n+            \"org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager\",\n             \"operation-order\",\n             \"org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager\",\n+            \"constraint\",\n+            \"org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager\",\n         };\n         updateManagerPlugin.setAliases(aliases);\n         updateManagerPlugin.setDefault(aliases[0]);\n@@ -753,7 +755,8 @@ else if (factory2 && connectionFactory2.get() != ds)\n     public Object getConnectionFactory2() {\n         // override to configure data source\n         if (dataSource2 == null) {\n-            DataSource ds = (DataSource) connectionFactory2.get();\n+            // superclass will lookup from JNDI. \n+            DataSource ds = (DataSource) super.getConnectionFactory2();\n             if (ds == null) {\n                 // the driver name is always required, so if not specified,\n                 // then no connection factory 2"},{"sha":"252b75a16686fea08af9a40052fe742624628336","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,10 +19,13 @@\n package org.apache.openjpa.jdbc.conf;\n \n import java.lang.reflect.InvocationTargetException;\n+import java.security.AccessController;\n \n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n import serp.util.Strings;\n \n /**\n@@ -44,13 +47,15 @@ public Object newInstance(String clsName, Class type,\n         // since the MappingRepository takes a JDBConfiguration constructor,\n         // we need to manually perform the instantiation\n         try {\n-            Class cls = Strings.toClass(clsName, type.getClassLoader());\n+            Class cls = Strings.toClass(clsName,\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(type)));        \n             return cls.getConstructor(new Class[]{ JDBCConfiguration.class }).\n                 newInstance(new Object[]{ conf });\n         } catch (RuntimeException e) {\n             throw e;\n         } catch (InvocationTargetException e) {\n-            if (e.getTargetException()instanceof RuntimeException)\n+            if (e.getTargetException() instanceof RuntimeException)\n                 throw(RuntimeException) e.getTargetException();\n \n             // fall back to default behavior for better error reporting"},{"sha":"1b561423069950dfbe21ab58e5b6ce66a1cd75a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -136,7 +136,7 @@ protected abstract Collection flush(RowManager rowMgr,\n      * @param customs buffer custom mappings\n      * @return the exceptions list\n      */\n-    private Collection populateRowManager(OpenJPAStateManager sm,\n+    protected Collection populateRowManager(OpenJPAStateManager sm,\n         RowManager rowMgr, JDBCStore store, Collection exceps,\n         Collection customs) {\n         try {\n@@ -336,7 +336,7 @@ private boolean bufferCustomUpdate(Strategy strat, OpenJPAStateManager sm,\n     /**\n      * Executes customized mapping updates.\n      */\n-    private static class CustomMapping {\n+    protected static class CustomMapping {\n \n         public static final int INSERT = 0;\n         public static final int UPDATE = 1;"},{"sha":"8fed879bb415e2c1a1e5b4f59cdd983003550d12","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","status":"added","additions":546,"deletions":0,"changes":546,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,546 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.SQLException;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.sql.PrimaryRow;\r\n+import org.apache.openjpa.jdbc.sql.Row;\r\n+import org.apache.openjpa.jdbc.sql.RowImpl;\r\n+import org.apache.openjpa.jdbc.sql.RowManager;\r\n+import org.apache.openjpa.jdbc.sql.RowManagerImpl;\r\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.graph.DepthFirstAnalysis;\r\n+import org.apache.openjpa.lib.graph.Edge;\r\n+import org.apache.openjpa.lib.graph.Graph;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.OpenJPAException;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+/**\r\n+ * <p>Standard update manager, capable of foreign key constraint evaluation.</p>\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class ConstraintUpdateManager\r\n+    extends AbstractUpdateManager {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (ConstraintUpdateManager.class);\r\n+\r\n+    public boolean orderDirty() {\r\n+        return false;\r\n+    }\r\n+\r\n+    protected PreparedStatementManager newPreparedStatementManager\r\n+        (JDBCStore store, Connection conn) {\r\n+        return new PreparedStatementManagerImpl(store, conn);\r\n+    }\r\n+\r\n+    protected RowManager newRowManager() {\r\n+        return new RowManagerImpl(false);\r\n+    }\r\n+\r\n+    protected Collection flush(RowManager rowMgr,\r\n+        PreparedStatementManager psMgr, Collection exceps) {\r\n+        RowManagerImpl rmimpl = (RowManagerImpl) rowMgr;\r\n+\r\n+        // first take care of all secondary table deletes and 'all row' deletes\r\n+        // (which are probably secondary table deletes), since no foreign\r\n+        // keys ever rely on secondary table pks\r\n+        flush(rmimpl.getAllRowDeletes(), psMgr);\r\n+        flush(rmimpl.getSecondaryDeletes(), psMgr);\r\n+\r\n+        // now do any 'all row' updates\r\n+        flush(rmimpl.getAllRowUpdates(), psMgr);\r\n+\r\n+        // analyze foreign keys\r\n+        Collection inserts = rmimpl.getInserts();\r\n+        Collection updates = rmimpl.getUpdates();\r\n+        Collection deletes = rmimpl.getDeletes();\r\n+        Graph[] graphs = new Graph[2];    // insert graph, delete graph\r\n+        analyzeForeignKeys(inserts, updates, deletes, rmimpl, graphs);\r\n+\r\n+        // flush insert graph, if any\r\n+        boolean autoAssign = rmimpl.hasAutoAssignConstraints();\r\n+        try {\r\n+            flushGraph(graphs[0], psMgr, autoAssign);\r\n+        } catch (SQLException se) {\r\n+            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\r\n+        } catch (OpenJPAException ke) {\r\n+            exceps = addException(exceps, ke);\r\n+        }\r\n+\r\n+        // flush the rest of the inserts and updates; inserts before updates\r\n+        // because some update fks might reference pks that have to be inserted\r\n+        flush(inserts, psMgr);\r\n+        flush(updates, psMgr);\r\n+\r\n+        // flush the delete graph, if any\r\n+        try {\r\n+            flushGraph(graphs[1], psMgr, autoAssign);\r\n+        } catch (SQLException se) {\r\n+            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\r\n+        } catch (OpenJPAException ke) {\r\n+            exceps = addException(exceps, ke);\r\n+        }\r\n+\r\n+        // put the remainder of the deletes after updates because some updates\r\n+        // may be nulling fks to rows that are going to be deleted\r\n+        flush(deletes, psMgr);\r\n+\r\n+        // take care of all secondary table inserts and updates last, since\r\n+        // they may rely on previous inserts or updates, but nothing relies\r\n+        // on them\r\n+        flush(rmimpl.getSecondaryUpdates(), psMgr);\r\n+\r\n+        // flush any left over prepared statements\r\n+        psMgr.flush();\r\n+        return exceps;\r\n+    }\r\n+\r\n+    /**\r\n+     * Analyze foreign key dependencies on the given rows\r\n+     * and create an insert and a delete graph to execute.  The insert\r\n+     * graph will be flushed before all other rows, and the delete graph will\r\n+     * be flushed after them.\r\n+     */\r\n+    private void analyzeForeignKeys(Collection inserts, Collection updates,\r\n+        Collection deletes, RowManagerImpl rowMgr, Graph[] graphs) {\r\n+        // if there are any deletes, we have to map the insert objects on their\r\n+        // oids so we'll be able to detect delete-then-insert-same-pk cases\r\n+        Map insertMap = null;\r\n+        OpenJPAStateManager sm;\r\n+        if (!deletes.isEmpty() && !inserts.isEmpty()) {\r\n+            insertMap = new HashMap((int) (inserts.size() * 1.33 + 1));\r\n+            for (Iterator itr = inserts.iterator(); itr.hasNext();) {\r\n+                sm = ((Row) itr.next()).getPrimaryKey();\r\n+                if (sm != null && sm.getObjectId() != null)\r\n+                    insertMap.put(sm.getObjectId(), sm);\r\n+            }\r\n+        }\r\n+\r\n+        // first construct the graph for deletes; this may expand to include\r\n+        // inserts and updates as well if there are any inserts that rely on\r\n+        // deletes (delete-then-insert-same-pk cases)\r\n+        PrimaryRow row;\r\n+        Row row2;\r\n+        ForeignKey[] fks;\r\n+        OpenJPAStateManager fkVal;\r\n+        boolean ignoreUpdates = true;\r\n+        for (Iterator itr = deletes.iterator(); itr.hasNext();) {\r\n+            row = (PrimaryRow) itr.next();\r\n+            if (!row.isValid())\r\n+                continue;\r\n+\r\n+            row2 = getInsertRow(insertMap, rowMgr, row);\r\n+            if (row2 != null) {\r\n+                ignoreUpdates = false;\r\n+                graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row, null);\r\n+            }\r\n+\r\n+            // now check this row's fks against other deletes\r\n+            fks = row.getTable().getForeignKeys();\r\n+            for (int j = 0; j < fks.length; j++) {\r\n+                // when deleting ref fks they'll just set a where value, so\r\n+                // check both for fk updates (relation fks) and wheres (ref fks)\r\n+                fkVal = row.getForeignKeySet(fks[j]);\r\n+                if (fkVal == null)\r\n+                    fkVal = row.getForeignKeyWhere(fks[j]);\r\n+                if (fkVal == null)\r\n+                    continue;\r\n+\r\n+                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\r\n+                    Row.ACTION_DELETE, fkVal, false);\r\n+                if (row2 != null && row2.isValid() && row2 != row)\r\n+                    graphs[1] = addEdge(graphs[1], (PrimaryRow) row2, row,\r\n+                        fks[j]);\r\n+            }\r\n+        }\r\n+\r\n+        if (ignoreUpdates)\r\n+            graphs[0] = analyzeAgainstInserts(inserts, rowMgr, graphs[0]);\r\n+        else {\r\n+            // put inserts *and updates* in the delete graph; they all rely\r\n+            // on each other\r\n+            graphs[1] = analyzeAgainstInserts(updates, rowMgr, graphs[1]);\r\n+            graphs[1] = analyzeAgainstInserts(inserts, rowMgr, graphs[1]);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check to see if there is an insert for for the same table and primary\r\n+     * key values as the given delete row.\r\n+     */\r\n+    private Row getInsertRow(Map insertMap, RowManagerImpl rowMgr, Row row) {\r\n+        if (insertMap == null)\r\n+            return null;\r\n+\r\n+        OpenJPAStateManager sm = row.getPrimaryKey();\r\n+        if (sm == null)\r\n+            return null;\r\n+\r\n+        // look for a new object whose insert id is the same as this delete one\r\n+        Object oid = sm.getObjectId();\r\n+        OpenJPAStateManager nsm = (OpenJPAStateManager) insertMap.get(oid);\r\n+        if (nsm == null)\r\n+            return null;\r\n+\r\n+        // found new object; get its row\r\n+        row = rowMgr.getRow(row.getTable(), Row.ACTION_INSERT, nsm, false);\r\n+        return (row == null || row.isValid()) ? row : null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Analyze the given rows against the inserts, placing dependencies\r\n+     * in the given graph.\r\n+     */\r\n+    private Graph analyzeAgainstInserts(Collection rows, RowManagerImpl rowMgr,\r\n+        Graph graph) {\r\n+        PrimaryRow row;\r\n+        Row row2;\r\n+        ForeignKey[] fks;\r\n+        Column[] cols;\r\n+        for (Iterator itr = rows.iterator(); itr.hasNext();) {\r\n+            row = (PrimaryRow) itr.next();\r\n+            if (!row.isValid())\r\n+                continue;\r\n+\r\n+            // check this row's fks against inserts; a logical fk to an auto-inc\r\n+            // column is treated just as actual database fk because the result\r\n+            // is the same: the pk row has to be inserted before the fk row\r\n+            fks = row.getTable().getForeignKeys();\r\n+            for (int j = 0; j < fks.length; j++) {\r\n+                if (row.getForeignKeySet(fks[j]) == null)\r\n+                    continue;\r\n+\r\n+                // see if this row is dependent on another.  if it's only\r\n+                // depenent on itself, see if the fk is logical or deferred, in\r\n+                // which case it must be an auto-inc because otherwise we\r\n+                // wouldn't have recorded it\r\n+                row2 = rowMgr.getRow(fks[j].getPrimaryKeyTable(),\r\n+                    Row.ACTION_INSERT, row.getForeignKeySet(fks[j]), false);\r\n+                if (row2 != null && row2.isValid() && (row2 != row\r\n+                    || fks[j].isDeferred() || fks[j].isLogical()))\r\n+                    graph = addEdge(graph, row, (PrimaryRow) row2, fks[j]);\r\n+            }\r\n+\r\n+            // see if there are any relation id columns dependent on\r\n+            // auto-inc objects\r\n+            cols = row.getTable().getRelationIdColumns();\r\n+            for (int j = 0; j < cols.length; j++) {\r\n+                OpenJPAStateManager sm = row.getRelationIdSet(cols[j]);\r\n+                if (sm == null)\r\n+                    continue;\r\n+\r\n+                row2 = rowMgr.getRow(getBaseTable(sm), Row.ACTION_INSERT,\r\n+                    sm, false);\r\n+                if (row2 != null && row2.isValid())\r\n+                    graph = addEdge(graph, row, (PrimaryRow) row2, cols[j]);\r\n+            }\r\n+        }\r\n+        return graph;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the base table for the given instance.\r\n+     */\r\n+    private static Table getBaseTable(OpenJPAStateManager sm) {\r\n+        ClassMapping cls = (ClassMapping) sm.getMetaData();\r\n+        while (cls.getJoinablePCSuperclassMapping() != null)\r\n+            cls = cls.getJoinablePCSuperclassMapping();\r\n+        return cls.getTable();\r\n+    }\r\n+\r\n+    /**\r\n+     * Add an edge between the given rows in the given foreign key graph.\r\n+     */\r\n+    private Graph addEdge(Graph graph, PrimaryRow row1, PrimaryRow row2,\r\n+        Object fk) {\r\n+        // delay creation of the graph\r\n+        if (graph == null)\r\n+            graph = new Graph();\r\n+\r\n+        row1.setDependent(true);\r\n+        row2.setDependent(true);\r\n+        graph.addNode(row1);\r\n+        graph.addNode(row2);\r\n+\r\n+        // add an edge from row1 to row2, and set the fk causing the\r\n+        // dependency as the user object so we can retrieve it when resolving\r\n+        // circular constraints\r\n+        Edge edge = new Edge(row1, row2, true);\r\n+        edge.setUserObject(fk);\r\n+        graph.addEdge(edge);\r\n+\r\n+        return graph;\r\n+    }\r\n+\r\n+    /**\r\n+     * Flush the given graph of rows in the proper order.\r\n+     * @param graph The graph of statements to be walked\r\n+     * @param psMgr The prepared statement manager to use to issue the\r\n+     * statements\r\n+     * @param autoAssign Whether any of the rows in the graph have any\r\n+     * auto-assign constraints\r\n+     */\r\n+    protected void flushGraph(Graph graph, PreparedStatementManager psMgr,\r\n+        boolean autoAssign)\r\n+        throws SQLException {\r\n+        if (graph == null)\r\n+            return;\r\n+\r\n+        DepthFirstAnalysis dfa = newDepthFirstAnalysis(graph, autoAssign);\r\n+        Collection insertUpdates = new LinkedList();\r\n+        Collection deleteUpdates = new LinkedList();\r\n+        boolean recalculate;\r\n+\r\n+        // Handle circular constraints:\r\n+        // - if deleted row A has a ciricular fk to deleted row B, \r\n+        //   then use an update statement to null A's fk to B before flushing, \r\n+        //   and then flush\r\n+        // - if inserted row A has a circular fk to updated/inserted row B,\r\n+        //   then null the fk in the B row object, then flush,\r\n+        //   and after flushing, use an update to set the fk back to A\r\n+        // Depending on where circular dependencies are broken, the  \r\n+        // topological order of the graph nodes has to be re-calculated.\r\n+        recalculate = resolveCycles(graph, dfa.getEdges(Edge.TYPE_BACK),\r\n+                deleteUpdates, insertUpdates);\r\n+        recalculate |= resolveCycles(graph, dfa.getEdges(Edge.TYPE_FORWARD),\r\n+                deleteUpdates, insertUpdates);\r\n+\r\n+        if (recalculate) {\r\n+            dfa = recalculateDepthFirstAnalysis(graph, autoAssign);\r\n+        }\r\n+\r\n+        // flush delete updates to null fks, then all rows in order, then\r\n+        // the insert updates to set circular fk values\r\n+        flush(deleteUpdates, psMgr);\r\n+        Collection nodes = dfa.getSortedNodes();\r\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();)\r\n+            psMgr.flush((RowImpl) itr.next());\r\n+        flush(insertUpdates, psMgr);\r\n+    }\r\n+\r\n+    /**\r\n+     * Break a circular dependency caused by delete operations.\r\n+     * If deleted row A has a ciricular fk to deleted row B, then use an update \r\n+     * statement to null A's fk to B before deleting B, then delete A.\r\n+     * @param edge Edge in the dependency graph corresponding to a foreign key\r\n+     * constraint. This dependency is broken by nullifying the foreign key.\r\n+     * @param deleteUpdates Collection of update statements that are executed\r\n+     * before the delete operations are flushed \r\n+     */\r\n+    private void addDeleteUpdate(Edge edge, Collection deleteUpdates)\r\n+        throws SQLException {\r\n+        PrimaryRow row;\r\n+        RowImpl update;\r\n+        ForeignKey fk;\r\n+\r\n+        // copy where conditions into new update that nulls the fk\r\n+        row = (PrimaryRow) edge.getTo();\r\n+        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\r\n+        row.copyInto(update, true);\r\n+        if (edge.getUserObject() instanceof ForeignKey) {\r\n+            fk = (ForeignKey) edge.getUserObject();\r\n+            update.setForeignKey(fk, row.getForeignKeyIO(fk), null);\r\n+        } else\r\n+            update.setNull((Column) edge.getUserObject());\r\n+\r\n+        deleteUpdates.add(update);\r\n+    }\r\n+\r\n+    /**\r\n+     * Break a circular dependency caused by insert operations.\r\n+     * If inserted row A has a circular fk to updated/inserted row B,\r\n+     * then null the fk in the B row object, then flush,\r\n+     * and after flushing, use an update to set the fk back to A.\r\n+     * @param row Row to be flushed\r\n+     * @param edge Edge in the dependency graph corresponding to a foreign key\r\n+     * constraint. This dependency is broken by nullifying the foreign key.\r\n+     * @param insertUpdates Collection of update statements that are executed\r\n+     * after the insert/update operations are flushed \r\n+     */\r\n+    private void addInsertUpdate(PrimaryRow row, Edge edge,\r\n+        Collection insertUpdates) throws SQLException {\r\n+        RowImpl update;\r\n+        ForeignKey fk;\r\n+        Column col;\r\n+\r\n+        // copy where conditions into new update that sets the fk\r\n+        update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\r\n+        if (row.getAction() == Row.ACTION_INSERT) {\r\n+            if (row.getPrimaryKey() == null)\r\n+                throw new InternalException(_loc.get(\"ref-cycle\"));\r\n+            update.wherePrimaryKey(row.getPrimaryKey());\r\n+        } else {\r\n+            // Row.ACTION_UPDATE\r\n+            row.copyInto(update, true);\r\n+        }\r\n+        if (edge.getUserObject() instanceof ForeignKey) {\r\n+            fk = (ForeignKey) edge.getUserObject();\r\n+            update.setForeignKey(fk, row.getForeignKeyIO(fk),\r\n+                row.getForeignKeySet(fk));\r\n+            row.clearForeignKey(fk);\r\n+        } else {\r\n+            col = (Column) edge.getUserObject();\r\n+            update.setRelationId(col, row.getRelationIdSet(col),\r\n+                row.getRelationIdCallback(col));\r\n+            row.clearRelationId(col);\r\n+        }\r\n+\r\n+        insertUpdates.add(update);\r\n+    }\r\n+\r\n+    /**\r\n+     * Finds a nullable foreign key by walking the dependency cycle. \r\n+     * Circular dependencies can be broken at this point.\r\n+     * @param cycle Cycle in the dependency graph.\r\n+     * @return Edge corresponding to a nullable foreign key.\r\n+     */\r\n+    private Edge findBreakableLink(List cycle) {\r\n+        Edge breakableLink = null;\r\n+        for (Iterator iter = cycle.iterator(); iter.hasNext(); ) {\r\n+            Edge edge = (Edge) iter.next();\r\n+            Object userObject = edge.getUserObject();\r\n+            if (userObject instanceof ForeignKey) {\r\n+                 if (!((ForeignKey) userObject).hasNotNullColumns()) {\r\n+                     breakableLink = edge;\r\n+                     break;\r\n+                 }\r\n+            } else if (userObject instanceof Column) {\r\n+                if (!((Column) userObject).isNotNull()) {\r\n+                    breakableLink = edge;\r\n+                    break;\r\n+                }\r\n+            }\r\n+        }\r\n+        return breakableLink;\r\n+    }\r\n+\r\n+    /**\r\n+     * Re-calculates the DepthFirstSearch analysis of the graph \r\n+     * after some of the edges have been removed. Ensures\r\n+     * that the dependency graph is cycle free.\r\n+     * @param graph The graph of statements to be walked\r\n+     * @param autoAssign Whether any of the rows in the graph have any\r\n+     * auto-assign constraints\r\n+     */\r\n+    private DepthFirstAnalysis recalculateDepthFirstAnalysis(Graph graph,\r\n+        boolean autoAssign) {\r\n+        DepthFirstAnalysis dfa;\r\n+        // clear previous traversal data\r\n+        graph.clearTraversal();\r\n+        dfa = newDepthFirstAnalysis(graph, autoAssign);\r\n+        // make sure that the graph is non-cyclic now\r\n+        assert (dfa.hasNoCycles()): _loc.get(\"graph-not-cycle-free\");\r\n+        return dfa;\r\n+    }\r\n+\r\n+    /**\r\n+     * Resolve circular dependencies by identifying and breaking\r\n+     * a nullable foreign key.\r\n+     * @param graph Dependency graph.\r\n+     * @param edges Collection of edges. Each edge indicates a possible \r\n+     * circular dependency\r\n+     * @param deleteUpdates Collection of update operations (nullifying \r\n+     * foreign keys) to be filled. These updates will be executed before \r\n+     * the rows in the dependency graph are flushed\r\n+     * @param insertUpdates CCollection of update operations (nullifying \r\n+     * foreign keys) to be filled. These updates will be executed after \r\n+     * the rows in the dependency graph are flushed\r\n+     * @return Depending on where circular dependencies are broken, the  \r\n+     * topological order of the graph nodes has to be re-calculated.\r\n+     */\r\n+    private boolean resolveCycles(Graph graph, Collection edges,\r\n+        Collection deleteUpdates, Collection insertUpdates)\r\n+        throws SQLException {\r\n+        boolean recalculate = false;\r\n+        for (Iterator itr = edges.iterator(); itr.hasNext();) {\r\n+            Edge edge = (Edge) itr.next();\r\n+            List cycle = edge.getCycle();\r\n+\r\n+            if (cycle != null) {\r\n+                // find a nullable foreign key\r\n+                Edge breakableLink = findBreakableLink(cycle);\r\n+                if (breakableLink == null) {\r\n+                    throw new UserException(_loc.get(\"no-nullable-fk\"));\r\n+                }\r\n+\r\n+                // topologic node order must be re-calculated,  if the\r\n+                // breakable link is different from the edge where\r\n+                // the circular dependency was originally detected\r\n+                if (edge != breakableLink) {\r\n+                    recalculate = true;\r\n+                }\r\n+\r\n+                if (!breakableLink.isRemovedFromGraph()) {\r\n+\r\n+                    // use a primary row update to prevent setting pk and fk values\r\n+                    // until after flush, to get latest auto-increment values\r\n+                    PrimaryRow row = (PrimaryRow) breakableLink.getFrom();\r\n+                    if (row.getAction() == Row.ACTION_DELETE) {\r\n+                        addDeleteUpdate(breakableLink, deleteUpdates);\r\n+                    } else {\r\n+                        addInsertUpdate(row, breakableLink, insertUpdates);\r\n+                    }\r\n+                    graph.removeEdge(breakableLink);\r\n+                }\r\n+            }\r\n+        }\r\n+        return recalculate;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new {@link DepthFirstAnalysis} suitable for the given graph\r\n+     * and auto-assign settings.\r\n+     */\r\n+    protected DepthFirstAnalysis newDepthFirstAnalysis(Graph graph,\r\n+        boolean autoAssign) {\r\n+        return new DepthFirstAnalysis(graph);\r\n+    }\r\n+\r\n+    /**\r\n+     * Flush the given collection of secondary rows.\r\n+     */\r\n+    protected void flush(Collection rows, PreparedStatementManager psMgr) {\r\n+        if (rows.size() == 0)\r\n+            return;\r\n+\r\n+        RowImpl row;\r\n+        for (Iterator itr = rows.iterator(); itr.hasNext(); ) {\r\n+            row = (RowImpl) itr.next();\r\n+            if (row.isValid() && !row.isDependent())\r\n+                psMgr.flush(row);\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"45b3f1b374382b0c533485ce7e81078e742500b5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -318,7 +318,7 @@ public JDBCFetchConfiguration setIsolation(int level) {\n             && level != Connection.TRANSACTION_REPEATABLE_READ\n             && level != Connection.TRANSACTION_SERIALIZABLE)\n             throw new IllegalArgumentException(\n-                _loc.get(\"bad-level\", Integer.valueOf(level)).getMessage());\n+                _loc.get(\"bad-level\", new Integer(level)).getMessage());\n \n         if (level == DEFAULT)\n             _state.isolationLevel = -1;"},{"sha":"6afc604e35ce5700c88c01b5e9dfe864eb3afac0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -252,7 +252,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         FetchConfiguration fetch, Object context) {\n         ConnectionInfo info = (ConnectionInfo) context;\n         try {\n-            return initializeState(sm, state, (JDBCFetchConfiguration)fetch, \n+            return initializeState(sm, state, (JDBCFetchConfiguration) fetch, \n                 info);\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);"},{"sha":"b21290ff40ffd2a50db051b65b8b915c4f280c05","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Iterator;\n \n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n@@ -62,6 +63,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n \n@@ -437,7 +439,11 @@ private Number executeBulkOperation(Executor ex, ClassMetaData base,\n         // we cannot execute a bulk delete statement when have mappings in\n         // multiple tables, so indicate we want to use in-memory with null\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n+\n+        // specification of the \"updates\" map indicates that this is\n+        // an update query; otherwise, this is a delete statement\n         boolean isUpdate = updates != null && updates.size() > 0;\n+\n         for (int i = 0; i < mappings.length; i++) {\n             if (!isSingleTableMapping(mappings[i], subclasses) && !isUpdate)\n                 return null;\n@@ -471,13 +477,11 @@ private Number executeBulkOperation(Executor ex, ClassMetaData base,\n                 subclasses, exps[i], state[i], \n                 JDBCFetchConfiguration.EAGER_NONE);\n \n-            // specification of the \"udpates\" map indicates that this is\n-            // an update query; otherwise, this is a delete statement\n             // The bulk operation will return null to indicate that the database\n             // does not support the request bulk delete operation; in\n             // this case, we need to perform the query in-memory and\n             // manually delete the instances\n-            if (updates == null)\n+            if (!isUpdate)\n                 sql[i] = dict.toDelete(mappings[i], sel, params);\n             else\n                 sql[i] = dict.toUpdate(mappings[i], sel, _store, params,"},{"sha":"a01899ea30c207740dfcec25303716ed18953c6c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -32,26 +32,28 @@\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n  * Basic prepared statement manager implementation.\n  *\n  * @author Abe White\n  */\n-class PreparedStatementManagerImpl \n+public class PreparedStatementManagerImpl \n     implements PreparedStatementManager {\n \n     private final static Localizer _loc = Localizer\n         .forPackage(PreparedStatementManagerImpl.class);\n \n-    private final JDBCStore _store;\n-    private final Connection _conn;\n-    private final DBDictionary _dict;\n+    protected final JDBCStore _store;\n+    protected final Connection _conn;\n+    protected final DBDictionary _dict;\n \n     // track exceptions\n-    private final Collection _exceptions = new LinkedList();\n+    protected final Collection _exceptions = new LinkedList();\n \n     /**\n      * Constructor. Supply connection.\n@@ -79,7 +81,7 @@ public void flush(RowImpl row) {\n     /**\n      * Flush the given row.\n      */\n-    private void flushInternal(RowImpl row) throws SQLException {\n+    protected void flushInternal(RowImpl row) throws SQLException {\n         // can't batch rows with auto-inc columns\n         Column[] autoAssign = null;\n         if (row.getAction() == Row.ACTION_INSERT)\n@@ -119,6 +121,8 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                 mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n                     _store, autoAssign[i], val);\n             }\n+            sm.setObjectId(\n+                ApplicationIds.create(sm.getPersistenceCapable(), mapping));\n         }\n     }\n "},{"sha":"1974aeea2e3d49899f099712baa9fa1559f43f01","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -76,6 +76,7 @@\n     private transient JDBCConfiguration _conf = null;\n     private transient Log _log = null;\n     private int _alloc = 50;\n+    private int _intValue = 1;\n     private final Status _stat = new Status();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n@@ -168,6 +169,24 @@ public int getAllocate() {\n     public void setAllocate(int alloc) {\n         _alloc = alloc;\n     }\n+    \n+    /**\n+     * Return the number as the initial number for the \n+     * GeneratedValue.TABLE strategy to start with. \n+     * @return an initial number\n+     */\n+    public int getInitialValue() {        \n+        return _intValue;\n+    }\n+\n+    /**\n+     * Set the initial number in the table for the GeneratedValue.TABLE\n+     * strategy to use as initial number. \n+     * @param intValue. The initial number\n+     */\n+    public void setInitialValue(int intValue) {\n+        _intValue = intValue;\n+    }\n \n     /**\n      * @deprecated Use {@link #setAllocate}. Retained for backwards\n@@ -378,8 +397,8 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n             append(_pkColumn).append(\", \").append(_seqColumn).\n             append(\") VALUES (\").\n             appendValue(pk, _pkColumn).append(\", \").\n-            appendValue(Numbers.valueOf(1), _seqColumn).append(\")\");\n-\n+            appendValue(_intValue, _seqColumn).append(\")\");\n+        \n         boolean wasAuto = conn.getAutoCommit();\n         if (!wasAuto && !suspendInJTA())\n             conn.setAutoCommit(true);"},{"sha":"7445b99ed2f86de16fa385995a7ef801c377791f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -41,6 +41,10 @@ public boolean isAggregate() {\n         return false;\n     }\n \n+    public boolean isXPath() {\n+        return false;\n+    }\n+\n     public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state, \n         Object val) {\n         return val;"},{"sha":"28b8d2152d27dab1b4b93399a045a462daefe79e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Obtaining the object id of a constant.\n@@ -48,9 +48,11 @@ public void setImplicitType(Class type) {\n \n     public Object getValue(Object[] params) {\n         Object o = _constant.getValue(params);\n-        if (!(o instanceof PersistenceCapable))\n+        if (!(ImplHelper.isManageable(o)))\n             return null;\n-        return ((PersistenceCapable) o).pcFetchObjectId();\n+        return (ImplHelper.toPersistenceCapable(o,\n+            this.getMetaData().getRepository().getConfiguration()))\n+            .pcFetchObjectId();\n     }\n \n     public Object getValue(ExpContext ctx, ExpState state) {"},{"sha":"96049edd0b2facfe808002c52544c519196fb771","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,7 +22,6 @@\n import java.util.LinkedList;\n import java.util.ListIterator;\n \n-import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Broker;\n@@ -31,7 +30,9 @@\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.XMLMetaData;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * A field traversal starting with a constant filter parameter.\n@@ -127,7 +128,8 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n             action = itr.next();\n             if (action instanceof Class) {\n                 try {\n-                    cstate.value = Filters.convert(cstate.value, (Class)action);\n+                    cstate.value = Filters.convert(cstate.value,\n+                        (Class) action);\n                     continue;\n                 } catch (ClassCastException cce) {\n                     failed = true;\n@@ -139,8 +141,10 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n             // be proxyable\n             sm = null;\n             tmpBroker = null;\n-            if (cstate.value instanceof PersistenceCapable)\n-                sm = (OpenJPAStateManager) ((PersistenceCapable) cstate.value).\n+            if (ImplHelper.isManageable(cstate.value))\n+                sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(\n+                    cstate.value,\n+                    this.getMetaData().getRepository().getConfiguration())).\n                     pcGetStateManager();\n             if (sm == null) {\n                 tmpBroker = ctx.store.getContext().getBroker();\n@@ -203,4 +207,14 @@ public ConstPathExpState(ExpState constantState) {\n             this.constantState = constantState;\n         }\n     }\n+    \n+    public void get(FieldMetaData fmd, XMLMetaData meta) {\n+    }\n+\n+    public void get(XMLMetaData meta, String name) {\n+    }\n+\n+    public XMLMetaData getXmlMapping() {\n+        return null;\n+    }\n }"},{"sha":"74d766a85ae78bfa171d7dadf8d795aa0fac9934","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.meta.XMLMetaData;\n \n /**\n  * Test if one string ends with another.\n@@ -194,5 +195,13 @@ public ClassMapping getClassMapping() {\n         public FieldMapping getFieldMapping() {\n             return null;\n         }\n+        \n+        public PCPath getXPath() {\n+            return null;\n+        }\n+        \n+        public XMLMetaData getXmlMapping() {\n+            return null;\n+        }\n     }\n }"},{"sha":"a2a63f4d7956c8b80f0e7da2cffb899ea3b198ca","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.meta.XMLMetaData;\n \n /**\n  * The simplified public view of any non-operator in a query filter,\n@@ -103,4 +104,16 @@\n      * return null.\n      */\n     public FieldMapping getFieldMapping();\n+    \n+    /**\n+     * If this is an XPath, return it,\n+     * else return null;\n+     */\n+    public PCPath getXPath();\n+    \n+    /**\n+     * If this is an XPath, return XML mapping metadata,\n+     * else return null;\n+     */\n+    public XMLMetaData getXmlMapping();\n }"},{"sha":"bfa10db61f0f7dcfc7a39232a695148a8b112cd4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -24,6 +24,7 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.meta.XMLMetaData;\n \n /**\n  * Implementation of {@link FilterValue} that wraps a {@link Val}.\n@@ -98,4 +99,15 @@ public ClassMapping getClassMapping() {\n     public FieldMapping getFieldMapping() {\n         return (isPath()) ? ((PCPath) _val).getFieldMapping(_state) : null;\n     }\n+    \n+    public PCPath getXPath() {\n+        if (isPath() && ((PCPath) _val).isXPath())\n+            return (PCPath) _val;\n+        else\n+            return null;\n+    }\n+    \n+    public XMLMetaData getXmlMapping() {\n+        return (getXPath() == null) ? null : getXPath().getXmlMapping();\n+    }\n }"},{"sha":"5b45fab3923b85b86d5a6b6c3183e13690a53eb2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,7 +28,7 @@\n  *\n  * @author Abe White\n  */\n-class Lit\n+public class Lit\n     extends Const\n     implements Literal {\n "},{"sha":"957b3e46c76a08b35190f1d242bebcd05791a6fb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":86,"deletions":3,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.XMLMetaData;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -55,6 +56,7 @@\n     private static final int BOUND_VAR = 1;\n     private static final int UNBOUND_VAR = 2;\n     private static final int UNACCESSED_VAR = 3;\n+    private static final int XPATH = 4;\n \n     private static final Localizer _loc = Localizer.forPackage(PCPath.class);\n \n@@ -66,6 +68,7 @@\n     private String _varName = null;\n     private Class _cast = null;\n     private boolean _cid = false;\n+    private FieldMetaData _xmlfield = null;\n \n     /**\n      * Return a path starting with the 'this' ptr.\n@@ -168,7 +171,40 @@ public void setMetaData(ClassMetaData meta) {\n     public boolean isKey() {\n         return _key;\n     }\n-\n+    \n+    public boolean isXPath() {\n+        return _type == XPATH;\n+    }\n+    \n+    public String getXPath() {\n+        StringBuffer xpath = new StringBuffer();\n+        Action action;\n+        Iterator itr = _actions.iterator();\n+        \n+        // Skip variable actions since they are not part of the xpath\n+        // until we reach the first xpath action.\n+        // The first xpath action maps to the root of an xml document.\n+        do \n+            action = (Action) itr.next(); \n+        while (action.op != Action.GET_XPATH);\n+        \n+        // Skip XmlRootElement:\n+        // We can't rely on the accuracy of the name of the root element,\n+        // because it could be set to some default by JAXB XML Binding.\n+        // The caller(DBDictionary) should start with \"/*\" or \"/*/\",\n+        // we build the remaining xpath that follows the root element.\n+        while (itr.hasNext()) {\n+            action = (Action) itr.next();\n+            if (((XMLMetaData) action.data).getXmlname() != null)                 \n+                xpath.append(((XMLMetaData) action.data).getXmlname());\n+            else\n+                xpath.append(\"*\");\n+            if (itr.hasNext())\n+                xpath.append(\"/\");\n+        }\n+        return xpath.toString();\n+    }\n+    \n     public String getPath() {\n         if (_actions == null)\n             return (_varName == null) ? \"\" : _varName + \".\";\n@@ -274,6 +310,36 @@ public void get(FieldMetaData field, boolean nullTraversal) {\n         _cast = null;\n         _key = false;\n     }\n+    \n+    public void get(FieldMetaData fmd, XMLMetaData meta) {\n+        if (_actions == null)\n+            _actions = new LinkedList();\n+        Action action = new Action();\n+        action.op = Action.GET_XPATH;\n+        action.data = meta;\n+        _actions.add(action);\n+        _cast = null;\n+        _key = false;;\n+        _type = XPATH;\n+        _xmlfield = fmd;\n+    }\n+    \n+    public void get(XMLMetaData meta, String name) {\n+        Action action = new Action();\n+        action.op = Action.GET_XPATH;\n+        action.data = meta.getFieldMapping(name);\n+        _actions.add(action);\n+        _cast = null;\n+        _key = false;;\n+        _type = XPATH;\n+    }\n+    \n+    public XMLMetaData getXmlMapping() {\n+        Action act = (Action) _actions.getLast();\n+        if (act != null)\n+            return (XMLMetaData) act.data;\n+        return null;\n+    }\n \n     public synchronized void getKey() {\n         if (_cid)\n@@ -288,7 +354,8 @@ public synchronized void getKey() {\n \n     public FieldMetaData last() {\n         Action act = lastFieldAction();\n-        return (act == null) ? null : (FieldMetaData) act.data;\n+        return (act == null) ? null : isXPath() ? _xmlfield :\n+            (FieldMetaData) act.data;\n     }\n \n     /**\n@@ -298,6 +365,9 @@ private Action lastFieldAction() {\n         if (_actions == null)\n             return null;\n \n+        if (isXPath())\n+            return (Action) _actions.getLast();\n+        \n         ListIterator itr = _actions.listIterator(_actions.size());\n         Action prev;\n         while (itr.hasPrevious()) {\n@@ -313,6 +383,9 @@ public Class getType() {\n         if (_cast != null)\n             return _cast;\n         Action act = lastFieldAction();\n+        if (act != null && act.op == Action.GET_XPATH)\n+            return ((XMLMetaData) act.data).getType();\n+        \n         FieldMetaData fld = (act == null) ? null : (FieldMetaData) act.data;\n         boolean key = act != null && act.op == Action.GET_KEY;\n         if (fld != null) {\n@@ -373,7 +446,8 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     rel.getTable());\n             } else {\n                 // move past the previous field, if any\n-                field = (FieldMapping) action.data;\n+                field = (action.op == Action.GET_XPATH) ? (FieldMapping) _xmlfield :\n+                    (FieldMapping) action.data;\n                 if (pstate.field != null) {\n                     // if this is the second-to-last field and the last is\n                     // the related field this field joins to, no need to\n@@ -416,6 +490,9 @@ else if (action.op == Action.UNBOUND_VAR) {\n                         from = from.getJoinablePCSuperclassMapping())\n                         pstate.joins = from.joinSuperclass(pstate.joins, false);\n                 }\n+                // nothing more to do from here on as we encountered an xpath action\n+                if (action.op == Action.GET_XPATH)\n+                    break;\n             }\n         }\n         if (_varName != null)\n@@ -534,6 +611,8 @@ public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state,\n         PathExpState pstate = (PathExpState) state;\n         FieldMapping field = (pstate.cmpfield != null) ? pstate.cmpfield \n             : pstate.field;\n+        if (isXPath())\n+            return val;\n         if (field != null) {\n             if (_key)\n                 return field.toKeyDataStoreValue(val, ctx.store);\n@@ -639,6 +718,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         // (e.g., during a bulk update)\n         if (sel == null)\n             sql.append(col.getName());\n+        else if (_type == XPATH)\n+            // if this is an xpath, append xpath string\n+            sql.append(getXPath());\n         else\n             sql.append(sel.getColumnAlias(col, state.joins));\n     }\n@@ -716,6 +798,7 @@ public boolean equals(Object other) {\n         public static final int SUBQUERY = 4;\n         public static final int UNBOUND_VAR = 5;\n         public static final int CAST = 6;\n+        public static final int GET_XPATH = 7;\n \n         public int op = -1;\n         public Object data = null;"},{"sha":"3e1ef5ed220733cccd71d487d7c70a1266dc46fc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -34,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class Param\n+public class Param\n     extends Const\n     implements Parameter {\n \n@@ -65,7 +64,8 @@ public Class getType() {\n \n     public void setImplicitType(Class type) {\n         _type = type;\n-        _container = (getMetaData() == null || !ImplHelper.isManagedType(type))\n+        _container = (getMetaData() == null || !ImplHelper.isManagedType(\n+            getMetaData().getRepository().getConfiguration(), type))\n             && (Collection.class.isAssignableFrom(type)\n             || Map.class.isAssignableFrom(type));\n     }\n@@ -108,11 +108,11 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n         if (other != null && !_container) {\n             pstate.sqlValue = other.toDataStoreValue(sel, ctx, otherState, val);\n             pstate.otherLength = other.length(sel, ctx, otherState);\n-        } else if (val instanceof PersistenceCapable) {\n+        } else if (ImplHelper.isManageable(val)) {\n             ClassMapping mapping = ctx.store.getConfiguration().\n-                getMappingRepositoryInstance().getMapping(val.getClass(), \n+                getMappingRepositoryInstance().getMapping(val.getClass(),\n                 ctx.store.getContext().getClassLoader(), true);\n-            pstate.sqlValue = mapping.toDataStoreValue(val, \n+            pstate.sqlValue = mapping.toDataStoreValue(val,\n                 mapping.getPrimaryKeyColumns(), ctx.store);\n             pstate.otherLength = mapping.getPrimaryKeyColumns().length;\n         } else"},{"sha":"e7b2c518681e06ea44dd5be27049bea4344efd04","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n+import org.apache.openjpa.meta.XMLMetaData;\n import serp.util.Numbers;\n \n /**\n@@ -184,6 +185,15 @@ public ClassMapping getClassMapping() {\n         public FieldMapping getFieldMapping() {\n             return null;\n         }\n+        \n+        public PCPath getXPath() {\n+            return null;\n+        }\n+        \n+        public XMLMetaData getXmlMapping() {\n+            return null;\n+        }\n+\n     }\n \n     /**\n@@ -260,5 +270,13 @@ public ClassMapping getClassMapping() {\n         public FieldMapping getFieldMapping() {\n             return null;\n         }\n+        \n+        public PCPath getXPath() {\n+            return null;\n+        }\n+        \n+        public XMLMetaData getXmlMapping() {\n+            return null;\n+        }\n     }\n }"},{"sha":"b987495a2687260e9b6f188fd10d3f27ffc666b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -54,7 +54,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.stringLengthFunction;\n         dict.assertSupport(func != null, \"StringLengthFunction\");\n-\n+        func = dict.getCastFunction(getValue(), func);\n+        \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));\n         getValue().appendTo(sel, ctx, state, buf, index);"},{"sha":"95258e52e8a0cb80124359a5ac13f05beec92844","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -43,6 +43,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toLowerCaseFunction;\n         dict.assertSupport(func != null, \"ToLowerCaseFunction\");\n+        func = dict.getCastFunction(getValue(), func);\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"86eef89348c404af29a2ddb206b8ca9e087d1aac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -43,6 +43,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toUpperCaseFunction;\n         dict.assertSupport(func != null, \"ToUpperCaseFunction\");\n+        func = dict.getCastFunction(getValue(), func);\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"3719ef7533b95c022d36024e73730956ca4fde84","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -150,8 +150,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         } else {\n             func = dict.trimTrailingFunction;\n             dict.assertSupport(func != null, \"TrimTrailingFunction\");\n-        }\n-\n+        }        \n+        func = dict.getCastFunction(_val, func);\n+        \n         int fromPart = func.indexOf(\"{0}\");\n         int charPart = func.indexOf(\"{1}\");\n         if (charPart == -1)"},{"sha":"de07222dba428eb0c9139df58a413a537898f536","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -125,6 +125,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         sql.append(getOperator());\n         sql.append(\"(\");\n         _val.appendTo(sel, ctx, state, sql, 0);\n+        sql.addCastForParam(getOperator(), _val);\n         sql.append(\")\");\n     }\n "},{"sha":"38de37923fa1df122e2b2201a1569935858d2460","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":34,"deletions":6,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -30,7 +30,7 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -55,6 +55,7 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Specialization of metadata for relational databases.\n@@ -189,8 +190,34 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n             }\n         }\n         Object oid = ApplicationIds.fromPKValues(vals, cls);\n-        if (!subs && oid instanceof OpenJPAId)\n-            ((OpenJPAId) oid).setManagedInstanceType(cls.getDescribedType());\n+        \n+        /**\n+         * For polymorphic relations,\n+         * the type field in the oid is initially set to base type.\n+         * If the discriminator value is preset in the current result,\n+         * then the type field needs reset based on the discriminator value.\n+         * If the discriminator value is not present or invalid,\n+         * ignore any exceptions being thrown.\n+         */        \n+        if (oid instanceof OpenJPAId) {\n+            Class type = cls.getDescribedType();\n+            if (!subs)\n+                // non-polymorphic relations\n+                ((OpenJPAId) oid).setManagedInstanceType(type);\n+            else if (cls.getDiscriminator() != null\n+                && !StringUtils.equals(\"none\",\n+                    cls.getDiscriminator().getStrategy().getAlias())) {\n+                // polymorphic relations\n+                res.startDataRequest(cls.getDiscriminator());\n+                try {\n+                    type = cls.getDiscriminator().getClass(store, cls, res);\n+                    ((OpenJPAId) oid).setManagedInstanceType(type, true);\n+                } catch (Exception e) {\n+                    // intentionally ignored\n+                }\n+                res.endDataRequest();  \n+            } \n+        }\n         return oid;\n     }\n \n@@ -208,9 +235,10 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         // from other persistence contexts, so try to get sm directly from\n         // instance before asking our context\n         OpenJPAStateManager sm;\n-        if (obj instanceof PersistenceCapable)\n-            sm = (OpenJPAStateManager) ((PersistenceCapable) obj).\n-                pcGetStateManager();\n+        if (ImplHelper.isManageable(obj))\n+            sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(obj,\n+                getRepository().getConfiguration()))\n+                .pcGetStateManager();\n         else\n             sm = store.getContext().getStateManager(obj);\n         if (sm == null)"},{"sha":"2eb4fdf482e38710cdb33dc28ba1009cc82abe30","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -361,7 +361,7 @@ public void addUnique(Unique unique) {\n         Table table = cm.getTable();\n         Collection result = new ArrayList();\n         while (uniqueConstraints.hasNext()) {\n-            Unique template = (Unique)uniqueConstraints.next();\n+            Unique template = (Unique) uniqueConstraints.next();\n             Column[] templateColumns = template.getColumns();\n             Column[] uniqueColumns = new Column[templateColumns.length];\n             boolean missingColumn = true;\n@@ -380,7 +380,7 @@ public void addUnique(Unique unique) {\n             if (unique != null)\n                 result.add(unique);\n         }\n-        return (Unique[])result.toArray(new Unique[result.size()]);\n+        return (Unique[]) result.toArray(new Unique[result.size()]);\n     }   \n     \n     public File getSourceFile() {"},{"sha":"5a41b30ff44c39a00e4523d4e4d89bab657b03db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -64,6 +65,8 @@\n     private Index _idx = null;\n     private boolean _subsLoaded = false;\n     private Object _value = null;\n+    \n+    private int _javaType = -1; \n \n     /**\n      * Constructor. Supply owning mapping.\n@@ -413,4 +416,21 @@ private DiscriminatorStrategy assertStrategy() {\n     public String toString() {\n         return _mapping + \"<discriminator>\";\n     }\n+    \n+    public void setJavaType(int javaType) {\n+        _javaType = javaType;\n+    }\n+    \n+    public int getJavaType() {\n+        if (_javaType == -1) {\n+            ClassMapping superMapping = _mapping.getPCSuperclassMapping();\n+\n+            if (superMapping != null && \n+                superMapping.getDiscriminator() != null) {\n+                _javaType = superMapping.getDiscriminator().getJavaType();\n+            }\n+        }\n+\n+        return _javaType;\n+    }\n }"},{"sha":"2ad836c0d6031865c47f8a60e73171efb4803a4b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","status":"modified","additions":16,"deletions":22,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Modifier;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\n@@ -28,6 +29,7 @@\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n@@ -45,7 +47,7 @@\n         (DiscriminatorMappingInfo.class);\n \n     private String _value = null;\n-\n+    \n     /**\n      * Raw discriminator value string.\n      */\n@@ -66,28 +68,20 @@ public void setValue(String value) {\n     public Object getValue(Discriminator discrim, boolean adapt) {\n         if (discrim.getValue() != null)\n             return discrim.getValue();\n-        if (_value == null)\n+        if (StringUtils.isEmpty(_value)) {\n             return discrim.getMappingRepository().getMappingDefaults().\n                 getDiscriminatorValue(discrim, adapt);\n-\n-        if (_value.length() > 0 && (_value.charAt(0) == '-' \n-            || Character.isDigit(_value.charAt(0)))) {\n-            try {\n-                if (_value.indexOf('.') == -1)\n-                    return new Integer(_value);\n-                return new Double(_value);\n-            } catch (RuntimeException re) {\n-                throw new MetaDataException(_loc.get(\"bad-discrim-value\",\n-                    discrim.getClassMapping(), _value));\n-            }\n         }\n-        if (\"null\".equalsIgnoreCase(_value))\n-            return Discriminator.NULL;\n-\n-        // strip quotes\n-        if (_value.length() > 0 && _value.charAt(0) == '\\'')\n-            return _value.substring(1, _value.length() - 1);\n-        return _value;\n+        \n+        switch(discrim.getJavaType()) { \n+            case JavaTypes.INT:\n+                return Integer.valueOf(_value);\n+            case JavaTypes.CHAR:\n+               return new Character(_value.charAt(_value.indexOf('\\'')+1));\n+            case JavaTypes.STRING:\n+            default: \n+                return _value;\n+        }\n     }\n \n     /**\n@@ -123,15 +117,15 @@ public void syncWith(Discriminator disc) {\n         // set io before syncing cols\n         setColumnIO(disc.getColumnIO());\n         syncColumns(disc, disc.getColumns(), disc.getValue() != null\n-            && !(disc.getValue()instanceof String));\n+            && !(disc.getValue() instanceof String));\n         syncIndex(disc, disc.getIndex());\n         if (disc.getValue() == Discriminator.NULL)\n             _value = \"null\";\n         else if (disc.getValue() != null)\n             _value = disc.getValue().toString();\n \n         if (disc.getStrategy() == null\n-            || disc.getStrategy()instanceof SuperclassDiscriminatorStrategy)\n+            || disc.getStrategy() instanceof SuperclassDiscriminatorStrategy)\n             return;\n \n         // explicit discriminator strategy if:"},{"sha":"07c4c3ed570e556d799b9f935910152621ac3a59","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -483,7 +483,8 @@ private void initializeMapping() {\n         _val.resolve(MODE_MAPPING_INIT);\n         _key.resolve(MODE_MAPPING_INIT);\n         _val.resolve(MODE_MAPPING_INIT);\n-        _strategy.initialize();\n+        if (_strategy != null)\n+            _strategy.initialize();\n     }\n \n     public void copy(FieldMetaData fmd) {\n@@ -918,7 +919,14 @@ public FieldMapping getValueMappedByMapping() {\n     }\n \n     public Column[] getColumns() {\n-        return _val.getColumns();\n+        // pcl: 6 July 2007: this seems a bit hacky, but if the mapping is a\n+        // version, it will have a NoneFieldMapping (since the version strategy\n+        // for the class takes care of it's mapping), and NoneFieldStrategies\n+        // do not have columns.\n+        if (isVersion())\n+            return getDeclaringMapping().getVersion().getColumns();\n+        else\n+            return _val.getColumns();\n     }\n \n     public void setColumns(Column[] cols) {"},{"sha":"decd977b2f8f09164aee00a1bdc322da1e3923e9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":35,"deletions":2,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -455,14 +455,47 @@ public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n         return null;\n     }\n \n+    /**\n+     * Provides a default value for the given Discriminator. \n+     * \n+     * <P>\n+     * The type of the object returned relies on the javaType field being set on \n+     * the Discriminator which is provided.\n+     * <TABLE border=\"2\"> \n+     * <TH>JavaType\n+     * <TH>Default value\n+     * <TBODY>\n+     * <TR><TD>{@link JavaTypes.INT}<TD> The hashcode of the entity name</TR>\n+     * <TR><TD>{@link JavaTypes.CHAR}<TD>The first character of the entity name \n+     * </TR>\n+     * <TR><TD>{@link JavaTypes.STRING}<TD>The entity name</TR>\n+     * </TBODY>\n+     * </TABLE>\n+     * \n+     * @param disc The discriminator that needs a default value\n+     * @param adapt \n+     * \n+     * @return A new object containing the generated Discriminator value.\n+     */\n     public Object getDiscriminatorValue(Discriminator disc, boolean adapt) {\n         if (!adapt && !defaultMissingInfo())\n             return null;\n \n         // WARNING: CHANGING THIS WILL INVALIDATE EXISTING DATA IF DEFAULTING\n         // MISSING MAPPING INFO\n-        return Strings.getClassName(disc.getClassMapping().\n-            getDescribedType());\n+        \n+        String alias = Strings.getClassName(disc.getClassMapping()\n+                .getTypeAlias());\n+        \n+        switch (disc.getJavaType()) {\n+            case JavaTypes.INT:\n+                return new Integer(alias.hashCode());\n+            case JavaTypes.CHAR:\n+                return new Character(alias.charAt(0)); \n+            case JavaTypes.STRING:\n+            default:\n+                return alias;\n+        }\n     }\n \n     public String getTableName(ClassMapping cls, Schema schema) {"},{"sha":"195f8b40ed275e235787b15182c1fc0535e7555b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":50,"deletions":14,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Types;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -70,6 +72,7 @@\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -446,12 +449,18 @@ else if (VerticalClassStrategy.ALIAS.equals(name))\n         try {\n             if (strat == null)\n                 strat = JavaTypes.classForName(name, cls,\n-                    ClassStrategy.class.getClassLoader());\n-            ClassStrategy strategy = (ClassStrategy) strat.newInstance();\n+                    (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            ClassStrategy.class)));\n+            ClassStrategy strategy = \n+                (ClassStrategy) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-cls-strategy\",\n                 cls, name), e);\n         }\n@@ -474,23 +483,29 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, field,\n-                FieldStrategy.class.getClassLoader());\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             if (FieldStrategy.class.isAssignableFrom(c)) {\n-                FieldStrategy strat = (FieldStrategy) c.newInstance();\n+                FieldStrategy strat = (FieldStrategy)\n+                    AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(strat, getConfiguration(),\n                     props);\n                 return strat;\n             }\n \n             // must be named handler\n             if (installHandlers) {\n-                ValueHandler vh = (ValueHandler) c.newInstance();\n+                ValueHandler vh = (ValueHandler) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(vh, getConfiguration(),\n                     props);\n                 field.setHandler(vh);\n             }\n             return new HandlerFieldStrategy();\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-field-strategy\",\n                 field, name), e);\n         }\n@@ -541,13 +556,18 @@ else if (SubclassJoinDiscriminatorStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     discrim.getClassMapping(),\n-                    DiscriminatorStrategy.class.getClassLoader());\n+                    (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            DiscriminatorStrategy.class)));\n             DiscriminatorStrategy strategy = (DiscriminatorStrategy)\n-                strat.newInstance();\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-discrim-strategy\",\n                 discrim.getClassMapping(), name), e);\n         }\n@@ -598,7 +618,9 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     version.getClassMapping(),\n-                    VersionStrategy.class.getClassLoader());\n+                    (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            VersionStrategy.class)));\n         } catch (Exception e) {\n             throw new MetaDataException(_loc.get(\"bad-version-strategy\",\n                 version.getClassMapping(), name), e);\n@@ -613,11 +635,15 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n     protected VersionStrategy instantiateVersionStrategy(Class strat,\n         Version version, String props) {\n         try {\n-            VersionStrategy strategy = (VersionStrategy) strat.newInstance();\n+            VersionStrategy strategy = (VersionStrategy)\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-version-strategy\",\n                 version.getClassMapping(), strat + \"\"), e);\n         }\n@@ -914,11 +940,16 @@ private Object mappedStrategy(ValueMapping val, Class type,\n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n         try {\n-            Object o = JavaTypes.classForName(name, val,\n-                FieldStrategy.class.getClassLoader()).newInstance();\n+            Class c = JavaTypes.classForName(name, val,\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n+            Object o = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(c));\n             Configurations.configureInstance(o, getConfiguration(), props);\n             return o;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-mapped-strategy\",\n                 val, name), e);\n         }\n@@ -937,15 +968,19 @@ protected ValueHandler namedHandler(ValueMapping val) {\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, val,\n-                ValueHandler.class.getClassLoader());\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(ValueHandler.class)));\n             if (ValueHandler.class.isAssignableFrom(c)) {\n-                ValueHandler vh = (ValueHandler) c.newInstance();\n+                ValueHandler vh = (ValueHandler) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(vh, getConfiguration(),\n                     props);\n                 return vh;\n             }\n             return null; // named field strategy\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-value-handler\",\n                 val, name), e);\n         }\n@@ -974,7 +1009,8 @@ protected ValueHandler defaultHandler(ValueMapping val, boolean adapting) {\n         if (handler instanceof ValueHandler)\n             return (ValueHandler) handler;\n \n-        if (val.getType() == byte[].class) {\n+        if (val.getType() == byte[].class \n+            || val.getType() == Byte[].class) {\n             if (_dict.maxEmbeddedBlobSize != -1)\n                 warnMaxEmbedded(val, _dict.maxEmbeddedBlobSize);\n             return ByteArrayValueHandler.getInstance();"},{"sha":"84af12c020fea0f7a9cea36162a3850748a585ae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,6 +22,8 @@\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.SQLException;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -51,6 +53,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n@@ -388,13 +391,13 @@ public void setRepository(MappingRepository repos) {\n      */\n     public SchemaGroup getSchemaGroup() {\n         if (_schema == null) {\n-            if (_action.contains(ACTION_BUILD_SCHEMA)) {\n+            if (_action.indexOf(ACTION_BUILD_SCHEMA) != -1) {\n                 DynamicSchemaFactory factory = new DynamicSchemaFactory();\n                 factory.setConfiguration(_conf);\n                 _schema = factory;\n             } else if (_readSchema \n-                || _schemaActions.contains(SchemaTool.ACTION_RETAIN)\n-                || _schemaActions.contains(SchemaTool.ACTION_REFRESH)) {\n+                || contains(_schemaActions,SchemaTool.ACTION_RETAIN)\n+                || contains(_schemaActions,SchemaTool.ACTION_REFRESH)) {\n                 _schema = (SchemaGroup) newSchemaTool(null).getDBSchemaGroup().\n                     clone();\n             } else {\n@@ -726,8 +729,8 @@ private void validate(Class cls) {\n         MappingRepository repos = getRepository();\n         repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n         if (getMapping(repos, cls, true) != null)\n-            _flushSchema = !_schemaActions.contains(SCHEMA_ACTION_NONE)\n-                && !_schemaActions.contains(SchemaTool.ACTION_ADD);\n+            _flushSchema = !contains(_schemaActions,SCHEMA_ACTION_NONE)\n+                && !contains(_schemaActions,SchemaTool.ACTION_ADD);\n     }\n \n     /**\n@@ -771,7 +774,7 @@ private void drop(Class cls) {\n         if (_dropCls == null)\n             _dropCls = new HashSet();\n         _dropCls.add(cls);\n-        if (!_schemaActions.contains(SchemaTool.ACTION_DROP))\n+        if (!contains(_schemaActions,SchemaTool.ACTION_DROP))\n             return;\n \n         MappingRepository repos = getRepository();\n@@ -1075,12 +1078,19 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             Class[] types = Services.getImplementorClasses(ImportExport.class);\n             ImportExport[] instances = new ImportExport[types.length];\n             for (int i = 0; i < types.length; i++)\n-                instances[i] = (ImportExport) types[i].newInstance();\n+                instances[i] = (ImportExport) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(types[i]));\n             return instances;\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException) t).getException();\n             throw new InternalException(_loc.get(\"importexport-instantiate\"),t);\n         }\n     }\n+    \n+    private static boolean contains(String list, String key) {\n+    \treturn (list == null) ? false : list.indexOf(key) != -1;\n+    }\n \n     /**\n      * Run flags."},{"sha":"3c07fc2fb88ca91d59f0e21103d11e897cf79dd4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -413,8 +413,6 @@ private void resolveMapping(String path, Object id) {\n                     throw new MetaDataException(_loc.get(\"untraversable-path\",\n                         QueryResultMapping.this, _candidate, path));\n                 Column[] cols = last.getColumns();\n-                if (last.isVersion())\n-                    cols = candidate.getVersion().getColumns();\n                 assertSingleColumn(cols, path);\n                 Column col = cols[0];\n                 "},{"sha":"1db9dad62df55cdd9e6b88a2e8b58fa7efc60b01","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":176,"deletions":12,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -21,10 +21,13 @@\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.StringWriter;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.ArrayList;\n@@ -77,6 +80,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -136,9 +140,16 @@\n      */\n     public static final int TABLE_SUBCLASS = 5;\n \n+    public static final String LEVEL_NONE = \"none\";\n     public static final String LEVEL_PACKAGE = \"package\";\n     public static final String LEVEL_CLASS = \"class\";\n \n+    /**\n+     * Access type for generated source, defaults to field-based access.\n+     */\n+    public static final String ACCESS_TYPE_FIELD = \"field\";\n+    public static final String ACCESS_TYPE_PROPERTY = \"property\";\n+\n     private static Localizer _loc = Localizer.forPackage\n         (ReverseMappingTool.class);\n \n@@ -168,14 +179,16 @@\n     private final Log _log;\n     private final Map _tables = new HashMap();\n     private final Project _project = new Project();\n-    private final BCClassLoader _loader = new BCClassLoader(_project);\n+    private final BCClassLoader _loader = (BCClassLoader) AccessController\n+        .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project));\n     private StrategyInstaller _strat = null;\n     private String _package = null;\n     private File _dir = null;\n     private MappingRepository _repos = null;\n     private SchemaGroup _schema = null;\n     private boolean _nullAsObj = false;\n     private boolean _blobAsObj = false;\n+    private boolean _useGenericColl = false;\n     private Properties _typeMap = null;\n     private boolean _useFK = false;\n     private boolean _useSchema = false;\n@@ -186,6 +199,8 @@\n     private String _idSuffix = \"Id\";\n     private boolean _inverse = true;\n     private boolean _detachable = false;\n+    private boolean _genAnnotations = false;\n+    private String _accessType = ACCESS_TYPE_FIELD;\n     private CodeFormat _format = null;\n     private ReverseCustomizer _custom = null;\n     private String _discStrat = null;\n@@ -196,6 +211,9 @@\n     // mess up certain customizers (bug 881)\n     private Set _abandonedFieldNames = null;\n \n+    // generated annotations, key = metadata, val = list of annotations\n+    private Map _annos = null;\n+\n     /**\n      * Constructor. Supply configuration.\n      */\n@@ -326,6 +344,22 @@ public void setBlobAsObject(boolean blobAsObj) {\n         _blobAsObj = blobAsObj;\n     }\n \n+    /**\n+     * Whether to use generic collections on one-to-many and many-to-many\n+     * relations instead of untyped collections.\n+     */\n+    public boolean getUseGenericCollections() {\n+        return _useGenericColl;\n+    }\n+\n+    /**\n+     * Whether to use generic collections on one-to-many and many-to-many\n+     * relations instead of untyped collections.\n+     */\n+    public void setUseGenericCollections(boolean useGenericCollections) {\n+        _useGenericColl = useGenericCollections; \n+    }\n+\n     /**\n      * Map of JDBC-name to Java-type-name entries that allows customization\n      * of reverse mapping columns to field types.\n@@ -478,6 +512,39 @@ public void setVersionStrategy(String versionStrat) {\n         _versStrat = versionStrat;\n     }\n \n+    /**\n+     * Whether to generate annotations along with generated code. Defaults\n+     * to false.\n+     */\n+    public boolean getGenerateAnnotations() {\n+        return _genAnnotations;\n+    }\n+\n+    /**\n+     * Whether to generate annotations along with generated code. Defaults\n+     * to false.\n+     */\n+    public void setGenerateAnnotations(boolean genAnnotations) {\n+        _genAnnotations = genAnnotations;\n+    }\n+\n+    /**\n+     * Whether to use field or property-based access on generated code.\n+     * Defaults to field-based access.\n+     */\n+    public String getAccessType() {\n+        return _accessType;\n+    }\n+\n+    /**\n+     * Whether to use field or property-based access on generated code.\n+     * Defaults to field-based access.\n+     */\n+    public void setAccessType(String accessType) {\n+        this._accessType = ACCESS_TYPE_PROPERTY.equalsIgnoreCase(accessType) ?\n+            ACCESS_TYPE_PROPERTY : ACCESS_TYPE_FIELD;\n+    }\n+\n     /**\n      * The code formatter for the generated Java code.\n      */\n@@ -784,7 +851,11 @@ public List recordCode(Map output)\n                 _log.info(_loc.get(\"class-code\", mappings[i]));\n \n             ApplicationIdTool aid = newApplicationIdTool(mappings[i]);\n-            gen = new ReverseCodeGenerator(mappings[i], aid);\n+            if (getGenerateAnnotations())\n+                gen = new AnnotatedCodeGenerator(mappings[i], aid);\n+            else\n+                gen = new ReverseCodeGenerator(mappings[i], aid);\n+\n             gen.generateCode();\n \n             if (output == null) {\n@@ -852,6 +923,31 @@ public Collection recordMetaData(boolean perClass, Map output)\n         return files;\n     }\n \n+    public void buildAnnotations() {\n+        Map output = new HashMap();\n+        // pretend mappings are all resolved\n+        ClassMapping[] mappings = getMappings();\n+        for (int i = 0; i < mappings.length; i++)\n+            mappings[i].setResolve(MODE_META | MODE_MAPPING, true);\n+\n+        // store in user's configured IO\n+        MetaDataFactory mdf = _conf.newMetaDataFactoryInstance();\n+        mdf.setRepository(getRepository());\n+        mdf.setStoreDirectory(_dir);\n+        mdf.store(mappings, new QueryMetaData[0], new SequenceMetaData[0],\n+            MODE_META | MODE_MAPPING | MODE_ANN_MAPPING, output);\n+        _annos = output;\n+    }\n+\n+    /**\n+     * Returns a list of stringified annotations for specified meta.\n+     */\n+    protected List getAnnotationsForMeta(Object meta) {\n+        if (null == _annos)\n+            return null;\n+        return (List) _annos.get(meta);\n+    }\n+\n     /**\n      * Generate and write the application identity code.\n      */\n@@ -1619,13 +1715,15 @@ public Object clone() {\n         tool.setUseForeignKeyName(getUseForeignKeyName());\n         tool.setNullableAsObject(getNullableAsObject());\n         tool.setBlobAsObject(getBlobAsObject());\n+        tool.setUseGenericCollections(getUseGenericCollections());\n         tool.setPrimaryKeyOnJoin(getPrimaryKeyOnJoin());\n         tool.setUseDataStoreIdentity(getUseDataStoreIdentity());\n         tool.setUseBuiltinIdentityClass(getUseBuiltinIdentityClass());\n         tool.setInnerIdentityClasses(getInnerIdentityClasses());\n         tool.setIdentityClassSuffix(getIdentityClassSuffix());\n         tool.setInverseRelations(getInverseRelations());\n         tool.setDetachable(getDetachable());\n+        tool.setGenerateAnnotations(getGenerateAnnotations());\n         tool.setCustomizer(getCustomizer());\n         tool.setCodeFormat(getCodeFormat());\n         return tool;\n@@ -1667,6 +1765,9 @@ public Object clone() {\n      * type instead.</li>\n      * <li><i>-blobAsObject/-bo &lt;true/t | false/f&gt;</i>: Set to true\n      * to make all binary columns map to Object rather than byte[].</li>\n+     * <li><i>-useGenericCollections/-gc &lt;true/t | false/f&gt;</i>: Set to\n+     * true to use generic collections on OneToMany and ManyToMany relations\n+     * (requires JDK 1.5 or higher).</li>\n      * <li><i>-typeMap/-typ &lt;types&gt;</i>: Default mapping of SQL type\n      * names to Java classes.</li>\n      * <li><i>-primaryKeyOnJoin/-pkj &lt;true/t | false/f&gt;</i>: Set to true\n@@ -1690,9 +1791,13 @@ public Object clone() {\n      * discriminator strategy to place on base classes.</li>\n      * <li><i>-versionStrategy/-vs &lt;strategy&gt;</i>: The default\n      * version strategy to place on base classes.</li>\n-     * <li><i>-metadata/-md &lt;class | package&gt;</i>: Specify the level the\n-     * metadata should be generated at. Defaults to generating a\n+     * <li><i>-metadata/-md &lt;class | package | none&gt;</i>: Specify the\n+     * level the metadata should be generated at. Defaults to generating a\n      * single package-level metadata file.</li>\n+     * <li><i>-annotations/-ann &lt;true/t | false/f&gt;</i>: Set to true to\n+     * generate JPA annotations in generated code.</li>\n+     * <li><i>-accessType/-access &lt;field | property&gt;</i>: Change access\n+     * type for generated annotations. Defaults to field access.</li>\n      * <li><i>-customizerClass/-cc &lt;class name&gt;</i>: The full class\n      * name of a {@link ReverseCustomizer} implementation to use to\n      * customize the reverse mapping process. Optional.</li>\n@@ -1749,6 +1854,8 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             (\"nullableAsObject\", \"no\", flags.nullableAsObject);\n         flags.blobAsObject = opts.removeBooleanProperty\n             (\"blobAsObject\", \"bo\", flags.blobAsObject);\n+        flags.useGenericCollections = opts.removeBooleanProperty\n+            (\"useGenericCollections\", \"gc\", flags.useGenericCollections);\n         flags.primaryKeyOnJoin = opts.removeBooleanProperty\n             (\"primaryKeyOnJoin\", \"pkj\", flags.primaryKeyOnJoin);\n         flags.useDataStoreIdentity = opts.removeBooleanProperty\n@@ -1768,7 +1875,11 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         flags.versionStrategy = opts.removeProperty\n             (\"versionStrategy\", \"vs\", flags.versionStrategy);\n         flags.metaDataLevel = opts.removeProperty\n-            (\"metadata\", \"md\", flags.metaDataLevel);\n+            (\"metadata\", \"md\", flags.metaDataLevel);        \n+        flags.generateAnnotations = opts.removeBooleanProperty\n+            (\"annotations\", \"ann\", flags.generateAnnotations);\n+        flags.accessType = opts.removeProperty\n+            (\"accessType\", \"access\", flags.accessType);\n \n         String typeMap = opts.removeProperty(\"typeMap\", \"typ\", null);\n         if (typeMap != null)\n@@ -1785,9 +1896,18 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         File customFile = Files.getFile\n             (opts.removeProperty(\"customizerProperties\", \"cp\", null), null);\n         Properties customProps = new Properties();\n-        if (customFile != null && customFile.exists())\n-            customProps.load(new FileInputStream(customFile));\n-\n+        if (customFile != null && ((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(customFile))).booleanValue()) {\n+            FileInputStream fis = null;\n+            try {\n+                fis = (FileInputStream) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newFileInputStreamAction(customFile));\n+            } catch (PrivilegedActionException pae) {\n+                 throw (FileNotFoundException) pae.getException();\n+            }\n+            customProps.load(fis);\n+        }\n+        \n         // separate the properties for the customizer and code format\n         Options customOpts = new Options();\n         Options formatOpts = new Options();\n@@ -1869,6 +1989,7 @@ public static void run(JDBCConfiguration conf, String[] args,\n         tool.setUseForeignKeyName(flags.useForeignKeyName);\n         tool.setNullableAsObject(flags.nullableAsObject);\n         tool.setBlobAsObject(flags.blobAsObject);\n+        tool.setUseGenericCollections(flags.useGenericCollections);\n         tool.setTypeMap(flags.typeMap);\n         tool.setPrimaryKeyOnJoin(flags.primaryKeyOnJoin);\n         tool.setUseDataStoreIdentity(flags.useDataStoreIdentity);\n@@ -1877,16 +1998,24 @@ public static void run(JDBCConfiguration conf, String[] args,\n         tool.setIdentityClassSuffix(flags.identityClassSuffix);\n         tool.setInverseRelations(flags.inverseRelations);\n         tool.setDetachable(flags.detachable);\n+        tool.setGenerateAnnotations(flags.generateAnnotations);\n+        tool.setAccessType(flags.accessType);\n         tool.setCustomizer(flags.customizer);\n         tool.setCodeFormat(flags.format);\n \n         // run\n         log.info(_loc.get(\"revtool-map\"));\n         tool.run();\n+        if (flags.generateAnnotations) {\n+            log.info(_loc.get(\"revtool-gen-annos\"));\n+            tool.buildAnnotations();\n+        }\n         log.info(_loc.get(\"revtool-write-code\"));\n         tool.recordCode();\n-        log.info(_loc.get(\"revtool-write-metadata\"));\n-        tool.recordMetaData(LEVEL_CLASS.equals(flags.metaDataLevel));\n+        if (!LEVEL_NONE.equals(flags.metaDataLevel)) {\n+            log.info(_loc.get(\"revtool-write-metadata\"));\n+            tool.recordMetaData(LEVEL_CLASS.equals(flags.metaDataLevel));\n+        }\n     }\n \n     /**\n@@ -1900,6 +2029,7 @@ public static void run(JDBCConfiguration conf, String[] args,\n         public boolean useForeignKeyName = false;\n         public boolean nullableAsObject = false;\n         public boolean blobAsObject = false;\n+        public boolean useGenericCollections = false;\n         public Properties typeMap = null;\n         public boolean primaryKeyOnJoin = false;\n         public boolean useDataStoreIdentity = false;\n@@ -1908,6 +2038,8 @@ public static void run(JDBCConfiguration conf, String[] args,\n         public String identityClassSuffix = \"Id\";\n         public boolean inverseRelations = true;\n         public boolean detachable = false;\n+        public boolean generateAnnotations = false;\n+        public String accessType = ACCESS_TYPE_FIELD;\n         public String metaDataLevel = LEVEL_PACKAGE;\n         public String discriminatorStrategy = null;\n         public String versionStrategy = null;\n@@ -1983,8 +2115,8 @@ private boolean hasSubclasses(ClassMapping cls) {\n     private class ReverseCodeGenerator\n         extends CodeGenerator {\n \n-        private final ClassMapping _mapping;\n-        private final ApplicationIdTool _appid;\n+        protected final ClassMapping _mapping;\n+        protected final ApplicationIdTool _appid;\n \n         public ReverseCodeGenerator(ClassMapping mapping,\n             ApplicationIdTool aid) {\n@@ -2046,5 +2178,37 @@ protected String getFieldCode(FieldMetaData field) {\n                 return null;\n             return _custom.getFieldCode((FieldMapping) field);\n         }\n+\n+        protected boolean useGenericCollections() {\n+            return _useGenericColl;\n+        }\n+    }\n+\n+    private class AnnotatedCodeGenerator\n+        extends ReverseCodeGenerator {\n+\n+        public AnnotatedCodeGenerator (ClassMapping mapping,\n+            ApplicationIdTool aid) {\n+            super (mapping, aid);\n+        }\n+\n+        public Set getImportPackages() {\n+            Set pkgs = super.getImportPackages();\n+            pkgs.add(\"javax.persistence\");\n+            return pkgs;\n+        }\n+\n+        protected List getClassAnnotations() {\n+            return getAnnotationsForMeta(_mapping);\n+        }\n+\n+        protected List getFieldAnnotations(FieldMetaData field) {\n+            return getAnnotationsForMeta(field);\n+        }\n+\n+        protected boolean usePropertyBasedAccess () {\n+            return ACCESS_TYPE_PROPERTY.equals(_accessType);\n+        }\n+\n     }\n }"},{"sha":"3086daa5a678dd034a5c95b2c662eb6e95999774","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -365,4 +366,14 @@ private VersionStrategy assertStrategy() {\n     public String toString() {\n         return _mapping + \"<version>\";\n     }\n+\n+    /**\n+     * @return a Map<Column,String> specifying how to update each version\n+     * column in this instance during a bulk update.\n+     *\n+     * @since 1.0.0\n+     */\n+    public Map getBulkUpdateValues() {\n+        return _strategy.getBulkUpdateValues();\n+    }\n }"},{"sha":"709f07ab1527eedbe3ee7e4aa54d9a7221fbe016","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -73,7 +73,7 @@ public void syncWith(Version version) {\n         syncIndex(version, version.getIndex());\n \n         if (version.getStrategy() == null\n-            || version.getStrategy()instanceof SuperclassVersionStrategy)\n+            || version.getStrategy() instanceof SuperclassVersionStrategy)\n             return;\n \n         // explicit version strategy if:"},{"sha":"60c80c2f151c6b378cbe2134f4f6c2132895527d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,10 +19,12 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n \n@@ -74,4 +76,12 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n      * @see StoreManager#compareVersion\n      */\n     public int compareVersion(Object v1, Object v2);\n+\n+    /**\n+     * @return a Map<Column,String> specifying how to update each version\n+     * column during a bulk update.\n+     *\n+     * @since 1.0.0\n+     */\n+    public Map getBulkUpdateValues();\n }"},{"sha":"58bf9ad75f4750617c3c9ffd7bd0fcea930ea9a0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.Collections;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -67,4 +69,8 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n     public int compareVersion(Object v1, Object v2) {\n         return StoreManager.VERSION_SAME;\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        return Collections.EMPTY_MAP;\n+    }\n }"},{"sha":"261e9c60bb609d3354ade1a6a0c0dd391151e590","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -101,6 +101,7 @@ public void map(boolean adapt) {\n         tmplate.setName(\"versn\");\n \n         Column[] cols = info.getColumns(vers, new Column[]{ tmplate }, adapt);\n+        cols[0].setVersionStrategy(this);\n         vers.setColumns(cols);\n         vers.setColumnIO(info.getColumnIO());\n "},{"sha":"60cfbb54bed4a0eee8fd34718a7218f97f0c9d3b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -60,7 +60,7 @@ protected void map(ValueMapping vm, String name, ColumnIO io,\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\n                 continue;\n-            if (!(fms[i].getStrategy()instanceof Embeddable))\n+            if (!(fms[i].getStrategy() instanceof Embeddable))\n                 throw new MetaDataException(_loc.get(\"not-embeddable\",\n                     vm, fms[i]));\n "},{"sha":"2f2d8e22448c00003eb3a22259e6a63eb3a834d0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import java.util.Map;\n+import java.util.HashMap;\n+\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.jdbc.schema.Column;\n import serp.util.Numbers;\n \n /**\n@@ -60,4 +64,12 @@ protected Object nextVersion(Object version) {\n             return _initial;\n         return Numbers.valueOf(((Number) version).intValue() + 1);\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        Column[] cols = vers.getColumns();\n+        Map map = new HashMap(cols.length);\n+        for (int i = 0; i < cols.length; i++)\n+            map.put(cols[i], cols[i].getName() + \" + 1\");\n+        return map;\n+    }\n }"},{"sha":"b73e77bb81217f7c4012f38ddf31576c7313ba64","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -48,4 +49,9 @@ public int compareVersion(Object v1, Object v2) {\n         return vers.getClassMapping().getPCSuperclassMapping().getVersion().\n             compareVersion(v1, v2);\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        return vers.getClassMapping().getPCSuperclassMapping().getVersion()\n+            .getBulkUpdateValues();\n+    }\n }"},{"sha":"ed91d13a68a7a4456c393aa41dcb25059e989248","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,8 +19,12 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.Timestamp;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.Date;\n \n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.schema.Column;\n \n /**\n  * Uses a timestamp for optimistic versioning.\n@@ -43,4 +47,13 @@ protected int getJavaType() {\n     protected Object nextVersion(Object version) {\n         return new Timestamp(System.currentTimeMillis());\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        Column[] cols = vers.getColumns();\n+        Map map = new HashMap(cols.length);\n+        Date d = new Date();\n+        for (int i = 0; i < cols.length; i++)\n+            map.put(cols[i], d);\n+        return map;\n+    }\n }"},{"sha":"4ae7cdaa5740e2359c64f007204d845b0d8bec7a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -32,6 +32,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.StoreException;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Handler for unknown persistence-capable object fields that stores\n@@ -77,8 +78,9 @@ public Object toDataStoreValue(ValueMapping vm, Object val,\n         // in the past we've been lenient about being able to translate objects\n         // from other persistence contexts, so try to get sm directly from\n         // instance before asking our context\n-        if (val instanceof PersistenceCapable) {\n-            PersistenceCapable pc = (PersistenceCapable) val;\n+        if (ImplHelper.isManageable(val)) {\n+            PersistenceCapable pc = ImplHelper.toPersistenceCapable(val,\n+                store.getConfiguration());\n             if (pc.pcGetStateManager() != null)\n                 return pc.pcGetStateManager();\n         }"},{"sha":"77f0133bac87892821e2fe6dc4e40602a2f0a06f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.meta.VersionStrategy;\n import org.apache.openjpa.meta.JavaTypes;\n import serp.util.Numbers;\n \n@@ -70,7 +71,8 @@\n \n     private int _index = 0;\n     private boolean _pk = false;\n-\n+    private VersionStrategy _versionStrategy = null;\n+    \n     /**\n      * Default constructor.\n      */\n@@ -708,4 +710,19 @@ public void copy(Column from) {\n         if (_flags == 0)\n             _flags = from._flags;\n     }\n+    \n+    /**\n+     * Whether this column is an XML type.\n+     */\n+    public boolean isXML() {\n+        return _typeName != null && _typeName.startsWith(\"XML\");\n+    }\n+\n+    public VersionStrategy getVersionStrategy() {\n+        return _versionStrategy;\n+    }\n+\n+    public void setVersionStrategy(VersionStrategy strategy) {\n+        this._versionStrategy = strategy;\n+    }\n }"},{"sha":"8db4751036eac4c58ee40eb86d2987ce828e47bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import java.security.AccessController;\n import java.sql.Connection;\n import java.sql.Driver;\n import java.sql.SQLException;\n@@ -39,6 +40,7 @@\n import org.apache.openjpa.lib.jdbc.JDBCListener;\n import org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.ImplHelper;\n@@ -110,7 +112,9 @@ public static DataSource newDataSource(JDBCConfiguration conf,\n             // see if their driver name is actually a data source\n             if (DataSource.class.isAssignableFrom(driverClass)) {\n                 return (DataSource) Configurations.newInstance(driver,\n-                    conf, props, DataSource.class.getClassLoader());\n+                    conf, props, (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            DataSource.class))); \n             }\n         }\n         catch (OpenJPAException ke) {\n@@ -152,7 +156,8 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n \n             // ask the DriverDataSource to provide any additional decorators\n             if (ds instanceof DriverDataSource) {\n-                List decs = ((DriverDataSource)ds).createConnectionDecorators();\n+                List decs = ((DriverDataSource) ds).\n+                    createConnectionDecorators();\n                 if (decs != null)\n                     decorators.addAll(decs);\n             }"},{"sha":"88fae0ba52427678f9e6bba0226f2ffe7fb95bcb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -21,11 +21,13 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.security.AccessController;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.util.GeneralException;\n \n /**\n@@ -77,7 +79,8 @@ public void endConfiguration() {\n     }\n \n     public SchemaGroup readSchema() {\n-        URL url = _loader.getResource(_fileName);\n+        URL url = (URL) AccessController.doPrivileged(\n+            J2DoPrivHelper.getResourceAction(_loader, _fileName)); \n         if (url == null)\n             return new SchemaGroup();\n "},{"sha":"40df305eadc2f9951ba53d02b66afaed44acc9cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -701,6 +701,19 @@ public boolean columnsMatch(Column[] fkCols, Column[] fkPKCols) {\n             && match(getPrimaryKeyColumns(), fkPKCols);\n     }\n \n+    /**\n+     * Checks for non-nullable local columns.\n+     */\n+    public boolean hasNotNullColumns() {\n+      Column[] columns = getColumns();\n+      for (int j = 0; j < columns.length; j++) {\n+          if (columns[j].isNotNull()) {\n+              return true;\n+          }\n+      }\n+      return false;\n+    }\n+    \n     private static boolean match(Column[] cols, Column[] fkCols) {\n         if (cols.length != fkCols.length)\n             return false;"},{"sha":"5a6395914146914c15335c536dbe9d2489749b55","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.jdbc.schema;\n \n import java.io.PrintWriter;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Connection;\n import java.sql.Driver;\n import java.sql.DriverManager;\n@@ -27,6 +29,7 @@\n import java.util.Properties;\n \n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.util.StoreException;\n \n /**\n@@ -166,12 +169,16 @@ private Driver getDriver() {\n         }\n \n         try {\n-            _driver = (Driver) Class.forName(_connectionDriverName,\n-                true, _classLoader).newInstance();\n+            Class c = Class.forName(_connectionDriverName,\n+                true, _classLoader);\n+            _driver = (Driver) AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(c));\n             return _driver;\n         } catch (Exception e) {\n             if (e instanceof RuntimeException)\n                 throw(RuntimeException) e;\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new StoreException(e);\n         }\n     }"},{"sha":"3eebf3e5debf3419fbd8b593eed190caca94844e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -38,7 +38,7 @@ public AbstractDB2Dictionary() {\n         // in string functions\n         toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(1000)))\";\n         toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(1000)))\";\n-        stringLengthFunction = \"LENGTH(CAST({0} AS VARCHAR(1000)))\";\n+        stringLengthFunction = \"LENGTH({0})\";\n         concatenateFunction = \"(CAST({0} AS VARCHAR(1000)))||\"\n             + \"(CAST({1} AS VARCHAR(1000)))\";\n "},{"sha":"d3a088d93a1be84c40f5b88978442a2b1c185ef0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":393,"deletions":111,"changes":504,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,26 +22,39 @@\n import java.sql.Connection;\r\n import java.sql.DatabaseMetaData;\r\n import java.sql.SQLException;\r\n+import java.sql.Types;\r\n import java.util.Arrays;\r\n import java.util.StringTokenizer;\r\n+\r\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\r\n+import org.apache.openjpa.jdbc.kernel.exps.Lit;\r\n+import org.apache.openjpa.jdbc.kernel.exps.Param;\r\n+import org.apache.openjpa.jdbc.kernel.exps.Val;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Filters;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n+import org.apache.openjpa.util.UnsupportedException;\r\n+import serp.util.Strings;\r\n \r\n /**\r\n  * Dictionary for IBM DB2 database.\r\n  */\r\n public class DB2Dictionary\r\n     extends AbstractDB2Dictionary {\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (DB2Dictionary.class);\r\n \r\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n-    private int db2ServerType = 0;\r\n-    private static final int db2ISeriesV5R3AndEarlier = 1;\r\n-    private static final int db2UDBV81OrEarlier = 2;\r\n-    private static final int db2ZOSV8x = 3;\r\n-    private static final int db2UDBV82AndLater = 4;\r\n-    private static final int db2ISeriesV5R4AndLater = 5;\r\n+    protected int db2ServerType = 0;\r\n+    protected static final int db2ISeriesV5R3OrEarlier = 1;\r\n+    protected static final int db2UDBV81OrEarlier = 2;\r\n+    protected static final int db2ZOSV8xOrLater = 3;\r\n+    protected static final int db2UDBV82OrLater = 4;\r\n+    protected static final int db2ISeriesV5R4OrLater = 5;\r\n \tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n     private static final String withRSClause = \"WITH RS\";\r\n     private static final String withRRClause = \"WITH RR\";\r\n@@ -50,6 +63,10 @@\n     private static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     private static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n+    protected String databaseProductName = null;\r\n+    protected String databaseProductVersion = null;\r\n+    protected int maj = 0;\r\n+    protected int min = 0;\r\n \r\n     public DB2Dictionary() {\r\n         platform = \"DB2\";\r\n@@ -70,11 +87,14 @@ public DB2Dictionary() {\n         varbinaryTypeName = \"BLOB(1M)\";\r\n         clobTypeName = \"CLOB(1M)\";\r\n         longVarcharTypeName = \"LONG VARCHAR\";\r\n+        datePrecision = MICRO;\r\n+        storeCharsAsNumbers = false;\r\n \r\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\r\n             \"LONG VARCHAR FOR BIT DATA\", \"LONG VARCHAR\", \"LONG VARGRAPHIC\",\r\n         }));\r\n-\r\n+        systemSchemas = new String(\r\n+                \"SYSCAT, SYSIBM, SYSSTAT, SYSIBMADM, SYSTOOLS\");\r\n         maxConstraintNameLength = 18;\r\n         maxIndexNameLength = 18;\r\n         maxColumnNameLength = 30;\r\n@@ -186,46 +206,78 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-    \tif (isJDBC3(metaData)) {\r\n-\t\t\tint maj = metaData.getDatabaseMajorVersion();\r\n-\t    \tint min = metaData.getDatabaseMinorVersion();\r\n-\r\n-\t    \t// Determine the type of DB2 database\r\n-\t    \tif (isDB2ISeriesV5R3AndEarlier(metaData))\r\n-\t    \t    db2ServerType = db2ISeriesV5R3AndEarlier;\r\n-\t    \telse if (isDB2UDBV81OrEarlier(metaData,maj,min))\r\n-\t    \t    db2ServerType = db2UDBV81OrEarlier;\r\n-\t    \telse if (isDB2ZOSV8x(metaData,maj))\r\n-\t    \t    db2ServerType = db2ZOSV8x;\r\n-\t    \telse if (isDB2UDBV82AndLater(metaData,maj,min))\r\n-\t    \t    db2ServerType = db2UDBV82AndLater;\r\n-\t    \telse if (isDB2ISeriesV5R4AndLater(metaData))\r\n-\t    \t    db2ServerType = db2ISeriesV5R4AndLater;\r\n-\r\n-\t    \tif (maj >= 9 || (maj == 8 && min >= 2)) {\r\n-\t    \t\tsupportsLockingWithMultipleTables = true;\r\n-\t    \t\tsupportsLockingWithInnerJoin = true;\r\n-\t    \t\tsupportsLockingWithOuterJoin = true;\r\n-\t    \t\tforUpdateClause = \"WITH RR USE AND KEEP UPDATE LOCKS\";\r\n-\t    \t}\r\n-\r\n-            if (metaData.getDatabaseProductVersion().indexOf(\"DSN\") != -1) {\r\n-                // DB2 Z/OS\r\n-                characterColumnSize = 255;\r\n-                lastGeneratedKeyQuery = \"SELECT IDENTITY_VAL_LOCAL() FROM \"\r\n-                    + \"SYSIBM.SYSDUMMY1\";\r\n-                nextSequenceQuery = \"SELECT NEXTVAL FOR {0} FROM \"\r\n-                    + \"SYSIBM.SYSDUMMY1\";\r\n-                sequenceSQL = \"SELECT SCHEMA AS SEQUENCE_SCHEMA, \"\r\n-                    + \"NAME AS SEQUENCE_NAME FROM SYSIBM.SYSSEQUENCES\";\r\n-                sequenceSchemaSQL = \"SCHEMA = ?\";\r\n-                sequenceNameSQL = \"NAME = ?\";\r\n-                if (maj == 8) {\r\n-                    // DB2 Z/OS Version 8: no bigint support, hence map Java\r\n-                    // long to decimal\r\n-                    bigintTypeName = \"DECIMAL(31,0)\";\r\n-                }\r\n-            }\r\n+        databaseProductName = metaData.getDatabaseProductName();\r\n+        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        \r\n+        // Determine the type of DB2 database\r\n+        // First check for AS/400\r\n+        getProductVersionMajorMinorForISeries();\r\n+\r\n+        if (maj > 0) {\r\n+            if (isDB2ISeriesV5R3OrEarlier())\r\n+                db2ServerType = db2ISeriesV5R3OrEarlier;\r\n+            else if (isDB2ISeriesV5R4OrLater())\r\n+                db2ServerType = db2ISeriesV5R4OrLater;\r\n+        }\r\n+        \r\n+    \tif (db2ServerType == 0) {\r\n+    \t    if (isJDBC3(metaData)) {\r\n+    \t        maj = metaData.getDatabaseMajorVersion();\r\n+    \t        min = metaData.getDatabaseMinorVersion();\r\n+    \t    }\r\n+    \t    else\r\n+    \t        getProductVersionMajorMinor();\r\n+\r\n+    \t    // Determine the type of DB2 database for ZOS & UDB\r\n+    \t    if (isDB2UDBV81OrEarlier())\r\n+    \t        db2ServerType = db2UDBV81OrEarlier;\r\n+    \t    else if (isDB2ZOSV8xOrLater())\r\n+    \t        db2ServerType = db2ZOSV8xOrLater;\r\n+    \t    else if (isDB2UDBV82OrLater())\r\n+    \t        db2ServerType = db2UDBV82OrLater;\r\n+        }\r\n+\r\n+        // verify that databae product is supported\r\n+        if (db2ServerType == 0 || maj == 0)\r\n+            throw new UnsupportedException(_loc.get(\"db-not-supported\",\r\n+                new Object[] {databaseProductName, databaseProductVersion }));                    \r\n+\r\n+    \tif (maj >= 9 || (maj == 8 && min >= 2)) {\r\n+    \t    supportsLockingWithMultipleTables = true;\r\n+    \t    supportsLockingWithInnerJoin = true;\r\n+    \t    supportsLockingWithOuterJoin = true;\r\n+    \t    forUpdateClause = \"WITH RR USE AND KEEP UPDATE LOCKS\";\r\n+    \t    if (maj >=9)\r\n+    \t        supportsXMLColumn = true;\r\n+    \t}\r\n+\r\n+        // platform specific settings\r\n+        switch (db2ServerType) {\r\n+        case  db2ZOSV8xOrLater:\r\n+            // DB2 Z/OS \r\n+            characterColumnSize = 255;\r\n+            lastGeneratedKeyQuery = \"SELECT IDENTITY_VAL_LOCAL() FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n+            nextSequenceQuery = \"SELECT NEXTVAL FOR {0} FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n+            sequenceSQL = \"SELECT SCHEMA AS SEQUENCE_SCHEMA, \"\r\n+                + \"NAME AS SEQUENCE_NAME FROM SYSIBM.SYSSEQUENCES\";\r\n+            sequenceSchemaSQL = \"SCHEMA = ?\";\r\n+            sequenceNameSQL = \"NAME = ?\";\r\n+            if (maj == 8)\r\n+                // DB2 Z/OS Version 8: no bigint support, hence map Java\r\n+                // long to decimal\r\n+                bigintTypeName = \"DECIMAL(31,0)\";\r\n+            break;\r\n+        case db2ISeriesV5R3OrEarlier:\r\n+        case db2ISeriesV5R4OrLater:\r\n+            validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n+                + \"QSYS2.SYSTABLES\";\r\n+            sequenceSQL = \"SELECT SEQUENCE_SCHEMA, \"\r\n+                + \"SEQUENCE_NAME FROM QSYS2.SYSSEQUENCES\";\r\n+            sequenceSchemaSQL = \"SEQUENCE_SCHEMA = ?\";\r\n+            sequenceNameSQL = \"SEQUENCE_NAME = ?\";\r\n+            break;\r\n         }\r\n     }\r\n \r\n@@ -245,45 +297,38 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n             else\r\n                 isolationLevel = conf.getTransactionIsolationConstant();\r\n \r\n-            if (!forUpdate) {\r\n-                // This sql is not for update so add FOR Read Only clause\r\n-                forUpdateString.append(\" \").append(forReadOnlyClause)\r\n-                    .append(\" \");\r\n-            } else {\r\n-\r\n+            if (forUpdate) {\r\n                 switch(db2ServerType) {\r\n-                case db2ISeriesV5R3AndEarlier:\r\n+                case db2ISeriesV5R3OrEarlier:\r\n                 case db2UDBV81OrEarlier:\r\n                     if (isolationLevel ==\r\n                         Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n                         forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(forUpdateOfClause).append(\" \");\r\n-                    } else {\r\n-                        forUpdateString.append(\" \").append(forUpdateOfClause)\r\n-                           .append(\" \");\r\n-                    }\r\n+                            .append(\" \").append(forUpdateOfClause);\r\n+                    } else\r\n+                        forUpdateString.append(\" \").append(forUpdateOfClause);\r\n                     break;\r\n-                case db2ZOSV8x:\r\n-                case db2UDBV82AndLater:\r\n+                case db2ZOSV8xOrLater:\r\n+                case db2UDBV82OrLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n-                        forUpdateString.append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRRClause)\r\n+                            .append(\" \").append(useKeepUpdateLockClause);   \r\n                     } else {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRSClause)\r\n+                            .append(\" \").append(useKeepUpdateLockClause);                            \r\n                     }\r\n                     break;\r\n-                case db2ISeriesV5R4AndLater:\r\n+                case db2ISeriesV5R4OrLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n-                        forUpdateString.append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRRClause)\r\n+                            .append(\" \").append(useKeepExclusiveLockClause);       \r\n                     } else {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause)\r\n-                            .append(\" \");\r\n+                        forUpdateString.append(\" \").append(forReadOnlyClause)\r\n+                            .append(\" \").append(withRSClause)\r\n+                            .append(\" \").append(useKeepExclusiveLockClause);\r\n                     }\r\n                     break;\r\n                 }\r\n@@ -296,68 +341,101 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         return forUpdateString.toString();\r\n     }\r\n \r\n-    public boolean isDB2UDBV82AndLater(DatabaseMetaData metadata, int maj,\r\n-        int min) throws SQLException {\r\n+    public boolean isDB2UDBV82OrLater() throws SQLException {\r\n         boolean match = false;\r\n-        if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1\r\n-            && ((maj == 8 && min >= 2) ||(maj >= 8)))\r\n+        if ((databaseProductVersion.indexOf(\"SQL\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n             match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8x(DatabaseMetaData metadata, int maj)\r\n+    public boolean isDB2ZOSV8xOrLater()\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"DSN\") != -1\r\n-           && maj == 8)\r\n+       if ((databaseProductVersion.indexOf(\"DSN\") != -1\r\n+           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+           && maj >= 8)\r\n            match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R3AndEarlier(DatabaseMetaData metadata)\r\n+    public boolean isDB2ISeriesV5R3OrEarlier()\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n-           && generateVersionNumber(metadata.getDatabaseProductVersion())\r\n-           <= 530)\r\n+       if (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5))\r\n            match = true;\r\n        return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R4AndLater(DatabaseMetaData metadata)\r\n+    public boolean isDB2ISeriesV5R4OrLater()\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n-           && generateVersionNumber(metadata.getDatabaseProductVersion())\r\n-           >= 540)\r\n+       if (databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4)))\r\n            match = true;\r\n       return match;\r\n     }\r\n \r\n-    public boolean isDB2UDBV81OrEarlier(DatabaseMetaData metadata, int maj,\r\n-        int min) throws SQLException {\r\n+    public boolean isDB2UDBV81OrEarlier() throws SQLException {\r\n         boolean match = false;\r\n-        if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1 &&\r\n-           ((maj == 8 && min <= 1)|| maj < 8))\r\n+        if ((databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+           || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n+           ((maj == 8 && min <= 1) || maj < 8))\r\n             match = true;\r\n         return match;\r\n     }\r\n \r\n-    /** Get the version number for the ISeries\r\n+    /** Get the version Major/Minor for the ISeries\r\n      */\r\n-    protected  int generateVersionNumber(String versionString) {\r\n-        String s = versionString.substring(versionString.indexOf('V'));\r\n-        s = s.toUpperCase();\r\n-        int i = -1;\r\n-        StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\", false);\r\n-        if (stringtokenizer.countTokens() == 3)\r\n-        {\r\n-            String s1 = stringtokenizer.nextToken();\r\n-            s1 = s1 + stringtokenizer.nextToken();\r\n-            s1 = s1 + stringtokenizer.nextToken();\r\n-            i = Integer.parseInt(s1);\r\n+    private void getProductVersionMajorMinorForISeries() {\r\n+        // ISeries    DBProdName                 DB2 UDB for AS/400\r\n+        //   (Toolbox)DBProdVersion              05.04.0000 V5R4m0\r\n+        // ISeries                               DB2 UDB for AS/400\r\n+        //   (Native)                            V5R4M0\r\n+        if (databaseProductName.indexOf(\"AS\") != -1) {\r\n+            String s = databaseProductVersion.substring(databaseProductVersion\r\n+                .indexOf('V'));\r\n+            s = s.toUpperCase();\r\n+\r\n+            StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\"\r\n+                , false);\r\n+            if (stringtokenizer.countTokens() == 3) {\r\n+                String s1 = stringtokenizer.nextToken();\r\n+                maj = Integer.parseInt(s1);\r\n+                String s2 =  stringtokenizer.nextToken();\r\n+                min = Integer.parseInt(s2);\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    private void getProductVersionMajorMinor() {\r\n+        // Incase JDBC driver version is lower than 3\r\n+        // use following info to determine Major and Minor \r\n+        //                        CLI    vs      JCC\r\n+        // ZDBV8 DBProdName       DB2            DB2\r\n+        //       DBProdVersion    08.01.0005     DSN08015\r\n+        // ZDBV9                  DB2            DB2\r\n+        //                        09.01.0005     DSN09015\r\n+        // WinV9                  DB2/NT         DB2/NT\r\n+        //                        09.01.0000     SQL09010\r\n+        // SolarisV9                             DB2/SUN64\r\n+        //                                       SQL0901\r\n+        // Linux                  DB2/LINUX      DB2/LINUX\r\n+        //                        09.01.0000     SQL0901\r\n+        if (databaseProductVersion.indexOf(\"09\") != -1) {\r\n+            maj = 9;\r\n+            if (databaseProductVersion.indexOf(\"01\") != -1) {\r\n+                min = 1;\r\n+            }\r\n+        } else if (databaseProductVersion.indexOf(\"08\") != -1) {\r\n+            maj = 8;\r\n+            min = 2;\r\n+            if (databaseProductVersion.indexOf(\"01\") != -1) {\r\n+                min = 1;\r\n+            }\r\n         }\r\n-        return i;\r\n     }\r\n \r\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n@@ -398,11 +476,17 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             getMethod(\"getSqlWarn\", null);\r\n             Method  getSqlErrdMethd = sqlca.getClass().\r\n             getMethod(\"getSqlErrd\", null);\r\n+            StringBuffer errdStr = new StringBuffer();\r\n+\r\n+            int[] errds = (int[]) getSqlErrdMethd.invoke(sqlca, new Object[]{});\r\n+            for (int i = 0; i < errds.length; i++)\r\n+                errdStr.append(errdStr.length() > 0 ? \", \" : \"\").\r\n+                    append(errds[i]);\r\n             exceptionMsg = exceptionMsg.concat( \"SQLCA OUTPUT\" +\r\n-                    \"[Errp=\" +getSqlErrpMethd.invoke(sqlca,new Object[]{})\r\n-                    + \", Errd=\" + Arrays.toString((int[])\r\n-                            (getSqlErrdMethd.invoke(sqlca, new Object[]{}))));\r\n-            String Warn = new String((char[])getSqlWarnMethd.\r\n+                    \"[Errp=\" + getSqlErrpMethd.invoke(sqlca, new Object[]{})\r\n+                    + \", Errd=\" + errdStr);\r\n+\r\n+            String Warn = new String((char[]) getSqlWarnMethd.\r\n                     invoke(sqlca, new Object[]{}));\r\n             if(Warn.trim().length() != 0)\r\n                 exceptionMsg = exceptionMsg.concat(\", Warn=\" +Warn + \"]\" );\r\n@@ -414,4 +498,202 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             return sqle.getMessage();\r\n         }\r\n     }\r\n-   }\r\n+\r\n+    public int getDb2ServerType() {\r\n+        return db2ServerType;\r\n+    }\r\n+    \r\n+    protected void appendLength(SQLBuffer buf, int type) {\r\n+        if (type == Types.VARCHAR)\r\n+            buf.append(\"(\").append(Integer.toString(characterColumnSize)).\r\n+                append(\")\");\r\n+    }\r\n+\r\n+    /**\r\n+     * If this dictionary supports XML type,\r\n+     * use this method to append xml predicate.\r\n+     * \r\n+     * @param buf the SQL buffer to write the comparison\r\n+     * @param op the comparison operation to perform\r\n+     * @param lhs the left hand side of the comparison\r\n+     * @param rhs the right hand side of the comparison\r\n+     * @param lhsxml indicates whether the left operand maps to xml\r\n+     * @param rhsxml indicates whether the right operand maps to xml\r\n+     */\r\n+    public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\r\n+        FilterValue rhs, boolean lhsxml, boolean rhsxml) {\r\n+        super.appendXmlComparison(buf, op, lhs, rhs, lhsxml, rhsxml);\r\n+        if (lhsxml && rhsxml)\r\n+            appendXmlComparison2(buf, op, lhs, rhs);\r\n+        else if (lhsxml)\r\n+            appendXmlComparison1(buf, op, lhs, rhs);\r\n+        else \r\n+            appendXmlComparison1(buf, op, rhs, lhs);\r\n+    }\r\n+\r\n+    /**\r\n+     * Append an xml comparison predicate.\r\n+     *\r\n+     * @param buf the SQL buffer to write the comparison\r\n+     * @param op the comparison operation to perform\r\n+     * @param lhs the left hand side of the comparison (maps to xml column)\r\n+     * @param rhs the right hand side of the comparison\r\n+     */\r\n+    private void appendXmlComparison1(SQLBuffer buf, String op, \r\n+            FilterValue lhs, FilterValue rhs) {\r\n+        boolean castrhs = false;\r\n+        Class rc = Filters.wrap(rhs.getType());\r\n+        int type = 0;\r\n+        if (rhs.isConstant()) {\r\n+            type = getJDBCType(JavaTypes.getTypeCode(rc), false);\r\n+            castrhs = true;\r\n+        }\r\n+        \r\n+        appendXmlExists(buf, lhs);\r\n+\r\n+        buf.append(\" \").append(op).append(\" \");\r\n+        \r\n+        buf.append(\"$\");\r\n+        if (castrhs)\r\n+            buf.append(\"Parm\");\r\n+        else\r\n+            rhs.appendTo(buf);\r\n+        \r\n+        buf.append(\"]' PASSING \");\r\n+        appendXmlVar(buf, lhs);\r\n+        buf.append(\", \");\r\n+        \r\n+        if (castrhs)\r\n+            appendCast(buf, rhs, type);\r\n+        else\r\n+            rhs.appendTo(buf);\r\n+        \r\n+        buf.append(\" AS \\\"\");\r\n+        if (castrhs)\r\n+            buf.append(\"Parm\");\r\n+        else\r\n+            rhs.appendTo(buf);\r\n+        buf.append(\"\\\")\");\r\n+    }\r\n+    \r\n+    /**\r\n+     * Append an xml comparison predicate. (both operands map to xml column)\r\n+     *\r\n+     * @param buf the SQL buffer to write the comparison\r\n+     * @param op the comparison operation to perform\r\n+     * @param lhs the left hand side of the comparison (maps to xml column)\r\n+     * @param rhs the right hand side of the comparison (maps to xml column)\r\n+     */\r\n+    private void appendXmlComparison2(SQLBuffer buf, String op, \r\n+            FilterValue lhs, FilterValue rhs) {\r\n+        appendXmlExists(buf, lhs);\r\n+        \r\n+        buf.append(\" \").append(op).append(\" \");\r\n+        \r\n+        buf.append(\"$\").append(rhs.getColumnAlias(\r\n+            rhs.getFieldMapping().getColumns()[0])).\r\n+            append(\"/*/\");\r\n+        rhs.appendTo(buf);\r\n+        \r\n+        buf.append(\"]' PASSING \");\r\n+        appendXmlVar(buf, lhs);\r\n+        buf.append(\", \");\r\n+        appendXmlVar(buf, rhs);\r\n+        buf.append(\")\");\r\n+    }\r\n+    \r\n+    private void appendXmlVar(SQLBuffer buf, FilterValue val) {\r\n+        buf.append(val.getColumnAlias(\r\n+            val.getFieldMapping().getColumns()[0])).\r\n+            append(\" AS \").\r\n+            append(\"\\\"\").append(val.getColumnAlias(\r\n+            val.getFieldMapping().getColumns()[0])).\r\n+            append(\"\\\"\");        \r\n+    }\r\n+    \r\n+    private void appendXmlExists(SQLBuffer buf, FilterValue val) {\r\n+        buf.append(\"XMLEXISTS('\");\r\n+        buf.append(\"$\").append(val.getColumnAlias(\r\n+            val.getFieldMapping().getColumns()[0])).\r\n+            append(\"/*[\");\r\n+        val.appendTo(buf);        \r\n+    }\r\n+    \r\n+    /**\r\n+     * add CAST for a scalar function where operand is a param\r\n+     * \r\n+     * @param func original string\r\n+     * @param target substring to look for\r\n+     * @param asString \r\n+     * @return updated string (func)\r\n+     */\r\n+    private String addCastAsString(String func, String target, \r\n+            String asString) {\r\n+        String fstring = func;\r\n+        if (func.indexOf(target) != -1)\r\n+            fstring = Strings.replace(\r\n+                func, target, \"CAST(\" + target + asString + \")\");\r\n+        return fstring;\r\n+    }\r\n+\r\n+    /**\r\n+     * add CAST for a function operator where operand is a param\r\n+     * \r\n+     * @param func function name\r\n+     * @param val type\r\n+     * @return updated string (func)\r\n+     */\r\n+    public String addCastAsType(String func, Val val) {\r\n+        String fstring = null;\r\n+        String type = getTypeName(getJDBCType(JavaTypes.getTypeCode(val\r\n+                .getType()), false));\r\n+        fstring = \"CAST(? AS \" + type + \")\";\r\n+        return fstring;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the correct CAST function syntax\r\n+     * \r\n+     * @param val operand of cast\r\n+     * @param func original string\r\n+     * @return a String with the correct CAST function syntax\r\n+     */\r\n+    public String getCastFunction(Val val, String func) {\r\n+        if (val instanceof Lit || val instanceof Param)\r\n+            if (func.indexOf(\"VARCHAR\") == -1)\r\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(1000)\");\r\n+        return func;\r\n+    }\r\n+\r\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\r\n+            FilterValue start) {\r\n+        if (find.getValue() != null) { // non constants\r\n+            buf.append(\"(LOCATE(CAST((\");\r\n+            find.appendTo(buf);\r\n+            buf.append(\") AS VARCHAR(1000)), \");\r\n+        } else {\r\n+            // this is a constant\r\n+            buf.append(\"(LOCATE(\");\r\n+            find.appendTo(buf);\r\n+            buf.append(\", \");\r\n+        }\r\n+        if (str.getValue() != null) {\r\n+            buf.append(\"CAST((\");\r\n+            str.appendTo(buf);\r\n+            buf.append(\") AS VARCHAR(1000))\");\r\n+        } else {\r\n+            str.appendTo(buf);\r\n+        }\r\n+        if (start != null) {\r\n+            if (start.getValue() == null) {\r\n+                buf.append(\", CAST((\");\r\n+                start.appendTo(buf);\r\n+                buf.append(\") AS INTEGER) + 1\");\r\n+            } else {\r\n+                buf.append(\", \");\r\n+                start.appendTo(buf);\r\n+            }\r\n+        }\r\n+        buf.append(\") - 1)\");\r\n+    }\r\n+}\r"},{"sha":"e458af6d47821374d7b2168b57c6ccddee4d96dc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":90,"deletions":3,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -58,6 +58,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import java.util.HashMap;\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -67,6 +68,8 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.kernel.exps.Lit;\n+import org.apache.openjpa.jdbc.kernel.exps.Param;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -83,14 +86,14 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n import org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Localizer.Message;\n-import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -212,6 +215,7 @@\n     public boolean requiresCastForMathFunctions = false;\n     public boolean requiresCastForComparisons = false;\n     public boolean supportsModOperator = false;\n+    public boolean supportsXMLColumn = false;\n \n     // functions\n     public String castFunction = \"CAST({0} AS {1})\";\n@@ -273,6 +277,8 @@\n     public String tinyintTypeName = \"TINYINT\";\n     public String varbinaryTypeName = \"VARBINARY\";\n     public String varcharTypeName = \"VARCHAR\";\n+    public String xmlTypeName = \"XML\";\n+    public String getStringVal = \"\";\n \n     // schema metadata\n     public boolean useSchemaName = true;\n@@ -886,6 +892,8 @@ public void setDate(PreparedStatement stmnt, int idx, Date val, Column col)\n             setDate(stmnt, idx, new java.sql.Date(val.getTime()), null, col);\n         else if (col != null && col.getType() == Types.TIME)\n             setTime(stmnt, idx, new Time(val.getTime()), null, col);\n+        else if (val instanceof Timestamp)\n+            setTimestamp(stmnt, idx,(Timestamp) val, null, col);   \n         else\n             setTimestamp(stmnt, idx, new Timestamp(val.getTime()), null, col);\n     }\n@@ -1878,12 +1886,23 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         sql.append(\" SET \");\n         ExpContext ctx = new ExpContext(store, params, \n             store.getFetchConfiguration());\n+\n+        // If the updates map contains any version fields, assume that the\n+        // optimistic lock version data is being handled properly by the\n+        // caller. Otherwise, give the version indicator an opportunity to\n+        // add more update clauses as needed.\n+        boolean augmentUpdates = true;\n+\n         for (Iterator i = updateParams.entrySet().iterator(); i.hasNext();) {\n             Map.Entry next = (Map.Entry) i.next();\n-            FieldMetaData fmd = (FieldMetaData) next.getKey();\n+            FieldMapping fmd = (FieldMapping) next.getKey();\n+\n+            if (fmd.isVersion())\n+                augmentUpdates = false;\n+\n             Val val = (Val) next.getValue();\n \n-            Column col = ((FieldMapping) fmd).getColumns()[0];\n+            Column col = fmd.getColumns()[0];\n             sql.append(col.getName());\n             sql.append(\" = \");\n \n@@ -1899,6 +1918,21 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             if (i.hasNext())\n                 sql.append(\", \");\n         }\n+\n+        if (augmentUpdates) {\n+            ClassMapping meta =\n+                ((FieldMapping) updateParams.keySet().iterator().next())\n+                    .getDeclaringMapping();\n+            Map updates = meta.getVersion().getBulkUpdateValues();\n+            for (Iterator iter = updates.entrySet().iterator();\n+                iter.hasNext(); ) {\n+                Map.Entry e = (Map.Entry) iter.next();\n+                Column col = (Column) e.getKey();\n+                String val = (String) e.getValue();\n+                sql.append(\", \").append(col.getName())\n+                    .append(\" = \").append(val);\n+            }\n+        }\n     }\n     \n     /**\n@@ -2424,6 +2458,12 @@ public void mathFunction(SQLBuffer buf, String op, FilterValue lhs,\n      */\n     public void comparison(SQLBuffer buf, String op, FilterValue lhs,\n         FilterValue rhs) {\n+        boolean lhsxml = lhs.getXPath() != null;\n+        boolean rhsxml = rhs.getXPath() != null;\n+        if (lhsxml || rhsxml) {\n+            appendXmlComparison(buf, op, lhs, rhs, lhsxml, rhsxml);\n+            return;\n+        }\n         boolean castlhs = false;\n         boolean castrhs = false;\n         Class lc = Filters.wrap(lhs.getType());\n@@ -2452,6 +2492,15 @@ public void comparison(SQLBuffer buf, String op, FilterValue lhs,\n             rhs.appendTo(buf);\n     }\n \n+    /**\n+     * If this dictionary supports XML type,\n+     * use this method to append xml predicate.\n+     */\n+    public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n+        FilterValue rhs, boolean lhsxml, boolean rhsxml) {\n+        assertSupport(supportsXMLColumn, \"SupportsXMLColumn\");\n+    }\n+\n     /**\n      * Append SQL for the given numeric value to the buffer, casting as needed.\n      */\n@@ -2486,9 +2535,25 @@ public void appendCast(SQLBuffer buf, FilterValue val, int type) {\n         val.appendTo(buf);\n         buf.append(mid);\n         buf.append(getTypeName(type));\n+        appendLength(buf, type);\n         buf.append(post);\n     }\n     \n+    protected void appendLength(SQLBuffer buf, int type) {        \n+    }\n+\n+    \n+    /**\n+     * add CAST for a function operator where operand is a param\n+     * @param func  function name\n+     * @param val \n+     * @return updated func\n+     */\n+    public String addCastAsType(String func, Val val) {\n+        return null;\n+    }    \n+\n+\n     ///////////\n     // DDL SQL\n     ///////////\n@@ -3807,4 +3872,26 @@ public SerializedData(byte[] bytes) {\n             this.bytes = bytes;\n         }\n     }\n+    \n+    /**\n+     * Return version column name\n+     * @param column\n+     * @param tableAlias : this is needed for platform specific version column\n+     * @return\n+     */\n+    public String getVersionColumn(Column column, String tableAlias) {\n+        return column.toString();\n+    }\n+    \n+    /**\n+     * Attach CAST to the current function if necessary\n+     * \n+     * @param val operand value\n+     * @parma func the sql function statement\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func) {\n+        return func;\n+    }\n+   \n }"},{"sha":"0c1f3ca0f322a1af83319615e15236956e84ec81","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":42,"deletions":29,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,15 +18,20 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.SQLException;\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n@@ -50,12 +55,6 @@\n  */\n public class DBDictionaryFactory {\n \n-    // pcl: can't use these classes directly because they rely on native libs\n-    private static final String ORACLE_DICT_NAME =\n-        \"org.apache.openjpa.jdbc.sql.OracleDictionary\";\n-    private static final String HSQL_DICT_NAME =\n-        \"org.apache.openjpa.jdbc.sql.HSQLDictionary\";\n-\n     private static final Localizer _loc = Localizer.forPackage\n         (DBDictionaryFactory.class);\n \n@@ -74,9 +73,9 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n      */\n     public static DBDictionary calculateDBDictionary(JDBCConfiguration conf,\n         String url, String driver, String props) {\n-        String dclass = dictionaryClassForString(url);\n+        String dclass = dictionaryClassForString(url, conf);\n         if (dclass == null)\n-            dclass = dictionaryClassForString(driver);\n+            dclass = dictionaryClassForString(driver, conf);\n         if (dclass == null)\n             return null;\n         return newDBDictionary(conf, dclass, props);\n@@ -91,10 +90,10 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         try {\n             conn = ds.getConnection();\n             DatabaseMetaData meta = conn.getMetaData();\n-            String dclass = dictionaryClassForString(meta.getURL());\n+            String dclass = dictionaryClassForString(meta.getURL(), conf);\n             if (dclass == null)\n                 dclass = dictionaryClassForString\n-                    (meta.getDatabaseProductName());\n+                    (meta.getDatabaseProductName(), conf);\n             if (dclass == null)\n                 dclass = DBDictionary.class.getName();\n             return newDBDictionary(conf, dclass, props, conn);\n@@ -117,9 +116,15 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         String dclass, String props, Connection conn) {\n         DBDictionary dict = null;\n         try {\n-            dict = (DBDictionary) Class.forName(dclass, true,\n-                DBDictionary.class.getClassLoader()).newInstance();\n+            Class c = Class.forName(dclass, true,\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(\n+                        DBDictionary.class)));\n+            dict = (DBDictionary) AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(c));\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new UserException(e).setFatal(true);\n         }\n \n@@ -161,49 +166,53 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n     /**\n      * Guess the dictionary class name to use based on the product string.\n      */\n-    private static String dictionaryClassForString(String prod) {\n+    private static String dictionaryClassForString(String prod\n+        , JDBCConfiguration conf) {\n         if (StringUtils.isEmpty(prod))\n             return null;\n         prod = prod.toLowerCase();\n \n+        PluginValue dbdictionaryPlugin = ((JDBCConfigurationImpl) conf)\n+            .dbdictionaryPlugin;\n+\n         if (prod.indexOf(\"oracle\") != -1)\n-            return ORACLE_DICT_NAME;\n+            return dbdictionaryPlugin.unalias(\"oracle\");\n         if (prod.indexOf(\"sqlserver\") != -1)\n-            return SQLServerDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sqlserver\");\n         if (prod.indexOf(\"jsqlconnect\") != -1)\n-            return SQLServerDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sqlserver\");\n         if (prod.indexOf(\"mysql\") != -1)\n-            return MySQLDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"mysql\");\n         if (prod.indexOf(\"postgres\") != -1)\n-            return PostgresDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"postgres\");\n         if (prod.indexOf(\"sybase\") != -1)\n-            return SybaseDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sybase\");\n         if (prod.indexOf(\"adaptive server\") != -1)\n-            return SybaseDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sybase\");\n         if (prod.indexOf(\"informix\") != -1)\n-            return InformixDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"informix\");\n         if (prod.indexOf(\"hsql\") != -1)\n-            return HSQL_DICT_NAME;\n+            return dbdictionaryPlugin.unalias(\"hsql\");\n         if (prod.indexOf(\"foxpro\") != -1)\n-            return FoxProDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"foxpro\");\n         if (prod.indexOf(\"interbase\") != -1)\n             return InterbaseDictionary.class.getName();\n         if (prod.indexOf(\"jdatastore\") != -1)\n             return JDataStoreDictionary.class.getName();\n         if (prod.indexOf(\"borland\") != -1)\n             return JDataStoreDictionary.class.getName();\n         if (prod.indexOf(\"access\") != -1)\n-            return AccessDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"access\");\n         if (prod.indexOf(\"pointbase\") != -1)\n-            return PointbaseDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"pointbase\");\n         if (prod.indexOf(\"empress\") != -1)\n-            return EmpressDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"empress\");\n         if (prod.indexOf(\"firebird\") != -1)\n             return FirebirdDictionary.class.getName();\n         if (prod.indexOf(\"cache\") != -1)\n             return CacheDictionary.class.getName();\n         if (prod.indexOf(\"derby\") != -1)\n-            return DerbyDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"derby\");\n         // test h2 in a special way, because there's a decent chance the string \n         // h2 could appear in the URL of another database\n         if (prod.indexOf(\"jdbc:h2:\") != -1)\n@@ -214,7 +223,7 @@ private static String dictionaryClassForString(String prod) {\n         // appear in the URL of another database (like if the db is named\n         // \"testdb2\" or something)\n         if (prod.indexOf(\"db2\") != -1 || prod.indexOf(\"as400\") != -1)\n-            return DB2Dictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"db2\");\n \n         // known dbs that we don't support\n         if (prod.indexOf(\"cloudscape\") != -1)\n@@ -226,6 +235,10 @@ private static String dictionaryClassForString(String prod) {\n         if (prod.indexOf(\"idb\") != -1) // instantdb\n             return DBDictionary.class.getName();\n \n+        String prodClassName = dbdictionaryPlugin.unalias(prod);\n+        if (!StringUtils.equals(prod, prodClassName))\n+            return prodClassName;\n+        \n         // give up\n         return null;\n     }\n@@ -236,7 +249,7 @@ private static String dictionaryClassForString(String prod) {\n      */\n     public static String toString(DatabaseMetaData meta)\n         throws SQLException {\n-        String lineSep = System.getProperty(\"line.separator\");\n+        String lineSep = J2DoPrivHelper.getLineSeparator();\n         StringBuffer buf = new StringBuffer();\n         try {\n             buf.append(\"catalogSeparator: \")"},{"sha":"96e354af44bdbfe2c725f43c69222dc50c963629","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -223,7 +223,7 @@ public void setDouble(PreparedStatement stmnt, int idx, double val,\n         // HSQL has a bug where it cannot store a double if it is\n         // exactly the same as Long.MAX_VALUE or MIN_VALUE\n         if (val == Long.MAX_VALUE || val == Long.MIN_VALUE) {\n-            stmnt.setLong(idx, (long)val);\n+            stmnt.setLong(idx, (long) val);\n         } else  {\n             super.setDouble(stmnt, idx, val, col);\n         }"},{"sha":"b7b56c51cf23321bb06382f9c6330a6864d32061","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -131,6 +131,11 @@ public InformixDictionary() {\n         // schema name in reflection on columns and tables\n         supportsSchemaForGetColumns = false;\n         supportsSchemaForGetTables = false;\n+\n+        // Informix doesn't support aliases in deletes if the table has an index\n+        allowsAliasInBulkClause = false;\n+        \n+        supportsSubselect = false;\n     }\n \n     public void connectedConfiguration(Connection conn)"},{"sha":"aa8ed1793b6917b7d8a3beb4b080fb92f7d9322f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":76,"deletions":6,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -130,6 +130,8 @@ public OracleDictionary() {\n             \"CTXSYS\", \"MDSYS\", \"SYS\", \"SYSTEM\", \"WKSYS\", \"WMSYS\", \"XDB\",\n         }));\n \n+        supportsXMLColumn = true;\n+        xmlTypeName = \"XMLType\";\n         bigintTypeName = \"NUMBER{0}\";\n         bitTypeName = \"NUMBER{0}\";\n         decimalTypeName = \"NUMBER{0}\";\n@@ -182,15 +184,23 @@ public void connectedConfiguration(Connection conn)\n                 driverVendor = VENDOR_ORACLE + meta.getDriverMajorVersion()\n                     + meta.getDriverMinorVersion();\n \n+                String productVersion = meta.getDatabaseProductVersion()\n+                    .split(\"Release \",0)[1].split(\"\\\\.\",0)[0];\n+                int release = Integer.parseInt(productVersion);\n+                \n                 // warn sql92\n-                if (meta.getDatabaseProductVersion().indexOf(\"Release 8.\") > 0)\n-                {\n+                if (release == 8) {\n                     if (joinSyntax == SYNTAX_SQL92 && log.isWarnEnabled())\n                         log.warn(_loc.get(\"oracle-syntax\"));\n                     joinSyntax = SYNTAX_DATABASE;\n                     dateTypeName = \"DATE\"; // added oracle 9\n                     timestampTypeName = \"DATE\"; // added oracle 9\n+                    supportsXMLColumn = false;\n                 }\n+                else \n+                    // select of an xml column requires \".getStringVal()\"\n+                    // suffix. eg. t0.xmlcol.getStringVal()\n+                    getStringVal = \".getStringVal()\";\n             } else if (metadataClassName.startsWith(\"com.ddtek.\")\n                 || url.indexOf(\"jdbc:datadirect:oracle:\") != -1\n                 || \"Oracle\".equals(driverName)) {\n@@ -499,7 +509,8 @@ public void setNull(PreparedStatement stmnt, int idx, int colType,\n         throws SQLException {\n         if (colType == Types.BLOB && _driverBehavior == BEHAVE_ORACLE)\n             stmnt.setBlob(idx, getEmptyBlob());\n-        else if (colType == Types.CLOB && _driverBehavior == BEHAVE_ORACLE)\n+        else if (colType == Types.CLOB && _driverBehavior == BEHAVE_ORACLE\n+            && !col.isXML())\n             stmnt.setClob(idx, getEmptyClob());\n         else if ((colType == Types.STRUCT || colType == Types.OTHER)\n             && col != null && col.getTypeName() != null)\n@@ -509,7 +520,7 @@ else if ((colType == Types.STRUCT || colType == Types.OTHER)\n         else if (colType == Types.DATE)\n             super.setNull(stmnt, idx, Types.TIMESTAMP, col);\n         // the Oracle driver does not support Types.OTHER with setNull\n-        else if (colType == Types.OTHER)\n+        else if (colType == Types.OTHER || col.isXML())\n             super.setNull(stmnt, idx, Types.NULL, col);\n         else\n             super.setNull(stmnt, idx, colType, col);\n@@ -901,7 +912,7 @@ protected String getGeneratedKeyTriggerName(Column col) {\n     /**\n      * Returns a OpenJPA 3-compatible name for an auto-assign sequence.\n      */\n-    private String getOpenJPA3GeneratedKeySequenceName(Column col) {\n+    protected String getOpenJPA3GeneratedKeySequenceName(Column col) {\n         Table table = col.getTable();\n         return makeNameValid(\"SEQ_\" + table.getName(), table.getSchema().\n             getSchemaGroup(), maxTableNameLength, NAME_ANY);\n@@ -910,7 +921,7 @@ private String getOpenJPA3GeneratedKeySequenceName(Column col) {\n     /**\n      * Returns a OpenJPA 3-compatible name for an auto-assign trigger.\n      */\n-    private String getOpenJPA3GeneratedKeyTriggerName(Column col) {\n+    protected String getOpenJPA3GeneratedKeyTriggerName(Column col) {\n         Table table = col.getTable();\n         return makeNameValid(\"TRIG_\" + table.getName(), table.getSchema().\n             getSchemaGroup(), maxTableNameLength, NAME_ANY);\n@@ -1027,4 +1038,63 @@ private static boolean isOraclePreparedStatement(Statement stmnt) {\n             return false;\n         }\n     }\n+    \n+    /**\n+     * If this dictionary supports XML type,\n+     * use this method to append xml predicate.\n+     * \n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison\n+     * @param rhs the right hand side of the comparison\n+     */\n+    public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n+        FilterValue rhs, boolean lhsxml, boolean rhsxml) {\n+        super.appendXmlComparison(buf, op, lhs, rhs, lhsxml, rhsxml);\n+        if (lhsxml && rhsxml)\n+            appendXmlComparison2(buf, op, lhs, rhs);\n+        else if (lhsxml)\n+            appendXmlComparison1(buf, op, lhs, rhs);\n+        else \n+            appendXmlComparison1(buf, op, rhs, lhs);\n+    }\n+    \n+    /**\n+     * Append an xml comparison predicate\n+     *\n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison (maps to xml column)\n+     * @param rhs the right hand side of the comparison\n+     */\n+    private void appendXmlComparison1(SQLBuffer buf, String op,\n+        FilterValue lhs, FilterValue rhs) {\n+        appendXmlExtractValue(buf, lhs);\n+        buf.append(\" \").append(op).append(\" \");\n+        rhs.appendTo(buf);\n+    }\n+    \n+    /**\n+     * Append an xml comparison predicate (both operands map to xml column)\n+     *\n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison (maps to xml column)\n+     * @param rhs the right hand side of the comparison (maps to xml column)\n+     */\n+    private void appendXmlComparison2(SQLBuffer buf, String op, \n+        FilterValue lhs, FilterValue rhs) {\n+        appendXmlExtractValue(buf, lhs);\n+        buf.append(\" \").append(op).append(\" \");\n+        appendXmlExtractValue(buf, rhs);\n+    }\n+    \n+    private void appendXmlExtractValue(SQLBuffer buf, FilterValue val) {\n+        buf.append(\"extractValue(\").\n+            append(val.getColumnAlias(\n+            val.getFieldMapping().getColumns()[0])).\n+            append(\",'/*/\");\n+        val.appendTo(buf);\n+        buf.append(\"')\");\n+    }\n }"},{"sha":"9dcc4b36289a5664c8556ee5c1e4bc7935987b24","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,6 +23,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.sql.Types;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n@@ -230,6 +231,15 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n         stmnt.setBoolean(idx, val);\n     }\n \n+    public void setNull(PreparedStatement stmnt, int idx, int colType,\n+        Column col)\n+        throws SQLException {\n+        // OPENJPA-\n+        if (colType == Types.BLOB)\n+            colType = Types.BINARY;\n+        stmnt.setNull(idx, colType);\n+    }\n+\n     protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);"},{"sha":"2db1537f4e5fb90558e0d3e421ab5bc327f92bfc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -422,8 +422,7 @@ protected Object getObjectInternal(Object obj, int metaTypeCode,\n                     if (col.getType() == Types.BLOB\n                         || col.getType() == Types.VARBINARY) {\n                         return _dict\n-                            .getBlobObject(_rs, ((Number) obj).intValue(),\n-                                _store);\n+                            .getBlobObject(_rs, col.getIndex(), _store);\n                     }\n                 }\n                 return _dict.getObject(_rs, ((Number) obj).intValue(), null);\n@@ -449,7 +448,7 @@ protected short getShortInternal(Object obj, Joins joins)\n     protected String getStringInternal(Object obj, Joins joins)\n         throws SQLException {\n         if (obj instanceof Column && ((Column) obj).getType() == Types.CLOB)\n-            return _dict.getClobString(_rs, ((Number) obj).intValue());\n+            return _dict.getClobString(_rs, ((Column) obj).getIndex());\n         return _dict.getString(_rs, ((Number) obj).intValue());\n     }\n "},{"sha":"a4f4a5f2ada23253ca68be9ea3702d1cff7561bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n+import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Array;\n@@ -756,7 +757,7 @@ private String getUpdateSQL(DBDictionary dict) {\n             hasVal = true;\n         }\n \n-        appendWhere(buf);\n+        appendWhere(buf, dict);\n         return buf.toString();\n     }\n \n@@ -797,14 +798,14 @@ private String getDeleteSQL(DBDictionary dict) {\n         StringBuffer buf = new StringBuffer();\n         buf.append(\"DELETE FROM \").\n             append(dict.getFullName(getTable(), false));\n-        appendWhere(buf);\n+        appendWhere(buf, dict);\n         return buf.toString();\n     }\n \n     /**\n      * Appends the where clause onto the given sql buffer.\n      */\n-    private void appendWhere(StringBuffer buf) {\n+    private void appendWhere(StringBuffer buf, DBDictionary dict) {\n         boolean hasWhere = false;\n         for (int i = 0; i < _cols.length; i++) {\n             if (_vals[getWhereIndex(_cols[i])] == null)\n@@ -815,9 +816,13 @@ private void appendWhere(StringBuffer buf) {\n             else\n                 buf.append(\" AND \");\n \n+            // Get platform specific version column name\n+            if (_cols[i].getVersionStrategy() != null)\n+               buf.append(dict.getVersionColumn(_cols[i], _cols[i]\n+                   .getTableName())).append(\" = ?\");\n             // sqlserver seems to have problems using null parameters in the\n             // where clause\n-            if (_vals[getWhereIndex(_cols[i])] == NULL)\n+            else if (_vals[getWhereIndex(_cols[i])] == NULL)\n                 buf.append(_cols[i]).append(\" IS NULL\");\n             else if (_types[i] == RAW)\n                 buf.append(_cols[i]).append(\" = \").append(_vals[i]);"},{"sha":"ff067271ba34479d649a2e42949e399929e824a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -31,6 +31,7 @@\n \n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -592,6 +593,19 @@ public boolean equals(Object other) {\n             && ObjectUtils.equals(_params, buf._params);\n     }\n \n+    /**\n+     * Replace SQL '?' with CAST string if required by DB platform\n+     * @param oper\n+     * @param val\n+     */\n+    public void addCastForParam(String oper, Val val) {\n+        if (_sql.charAt(_sql.length() - 1) == '?') {\n+            String castString = _dict.addCastAsType(oper, val);\n+            if (castString != null)\n+                _sql.replace(_sql.length() - 1, _sql.length(), castString);\n+        }\n+    }\n+\n     /**\n      * Represents a subselect.\n      */"},{"sha":"baa0ee2e97f8bd5f6e830d2bd0edc3e9b934c791","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,8 +23,11 @@\n import java.sql.SQLException;\n import java.sql.Types;\n \n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n \n /**\n  * Dictionary for MS SQLServer.\n@@ -79,6 +82,16 @@ else if (url != null\n                     driverVendor = VENDOR_OTHER;\n             } else\n                 driverVendor = VENDOR_OTHER;\n+            if (driverName.indexOf(platform) != -1) {\n+                String versionString = driverName.\n+                    substring(platform.length() + 1);\n+                if (versionString.indexOf(\" \") != -1)\n+                    versionString = versionString.substring(0,\n+                        versionString.indexOf(\" \"));\n+                int version = Integer.parseInt(versionString);\n+                if (version >= 2005)\n+                    supportsXMLColumn = true;\n+            }\n         }\n \n         // warn about using cursors\n@@ -124,4 +137,97 @@ else if (\"NTEXT\".equals(typeName))\n         }\n         return cols;\n     }\n+    \n+    protected void appendLength(SQLBuffer buf, int type) {\n+        if (type == Types.VARCHAR)\n+            buf.append(\"(\").append(Integer.toString(characterColumnSize)).append(\")\");\n+    }\n+\n+    /**\n+     * If this dictionary supports XML type,\n+     * use this method to append xml predicate.\n+     * \n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison\n+     * @param rhs the right hand side of the comparison\n+     * @param lhsxml indicates whether the left operand maps to xml\n+     * @param rhsxml indicates whether the right operand maps to xml\n+     */\n+    public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n+        FilterValue rhs, boolean lhsxml, boolean rhsxml) {\n+        super.appendXmlComparison(buf, op, lhs, rhs, lhsxml, rhsxml);\n+        if (lhsxml && rhsxml)\n+            appendXmlComparison2(buf, op, lhs, rhs);\n+        else if (lhsxml)\n+            appendXmlComparison1(buf, op, lhs, rhs);\n+        else \n+            appendXmlComparison1(buf, op, rhs, lhs);\n+    }\n+    /**\n+     * Append an xml comparison predicate\n+     *\n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison (maps to xml column)\n+     * @param rhs the right hand side of the comparison\n+     */\n+    private void appendXmlComparison1(SQLBuffer buf, String op,\n+        FilterValue lhs, FilterValue rhs) {\n+        boolean castrhs = rhs.isConstant();\n+        if (castrhs)\n+            appendXmlValue(buf, lhs);\n+        else\n+            appendXmlExist(buf, lhs);\n+        buf.append(\" \").append(op).append(\" \");\n+        if (castrhs)\n+            rhs.appendTo(buf);\n+        else {\n+            buf.append(\"sql:column(\\\"\");\n+            rhs.appendTo(buf);\n+            buf.append(\"\\\")\").\n+                append(\"]') = 1\");\n+        }\n+    }\n+    \n+    private void appendXmlExist(SQLBuffer buf, FilterValue lhs) {\n+        buf.append(lhs.getColumnAlias(\n+            lhs.getFieldMapping().getColumns()[0])).\n+            append(\".exist('\").\n+            append(\"/*[\");\n+        lhs.appendTo(buf);    \n+    }\n+    \n+    /**\n+     * Append an xml comparison predicate (both operands map to xml column)\n+     *\n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison (maps to xml column)\n+     * @param rhs the right hand side of the comparison (maps to xml column)\n+     */\n+    private void appendXmlComparison2(SQLBuffer buf, String op, \n+        FilterValue lhs, FilterValue rhs) {\n+        appendXmlValue(buf, lhs);\n+        buf.append(\" \").append(op).append(\" \");\n+        appendXmlValue(buf, rhs);\n+    }\n+    \n+    private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n+        Class rc = Filters.wrap(val.getType());\n+        int type = getJDBCType(JavaTypes.getTypeCode(rc), false);\n+        boolean isXmlAttribute = (val.getXmlMapping() == null) ? false\n+                : val.getXmlMapping().isXmlAttribute();\n+        buf.append(val.getColumnAlias(\n+            val.getFieldMapping().getColumns()[0])).\n+            append(\".value(\").\n+            append(\"'(/*/\");\n+        val.appendTo(buf);\n+        if (!isXmlAttribute)\n+            buf.append(\"/text()\");\n+        buf.append(\")[1]','\").\n+            append(getTypeName(type));\n+        appendLength(buf, type);\n+        buf.append(\"')\");\n+    }\n }"},{"sha":"b55b6f7c67b5904768f1a65579037947edf4999a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":62,"deletions":38,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,6 +26,7 @@\n import java.sql.Types;\n import java.util.AbstractList;\n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -121,8 +122,9 @@\n     private SortedMap _tables = null;\n \n     // combined list of selected ids and map of each id to its alias\n-    private final Selects _selects = new Selects();\n+    protected final Selects _selects = newSelects();\n     private List _ordered = null;\n+    private List _grouped = null;\n \n     // flags\n     private int _flags = 0;\n@@ -157,7 +159,14 @@\n \n     // from select if this select selects from a tmp table created by another\n     private SelectImpl _from = null;\n-    private SelectImpl _outer = null;\n+    protected SelectImpl _outer = null;\n+    \n+    // bitSet indicating if an alias is removed from parent select\n+    // bit 0 : correspond to alias 0\n+    // bit 1 : correspond to alias 1, etc.\n+    // if the bit is set, the corresponding alias has been removed from parent\n+    // and recorded under subselect.\n+    private BitSet _removedAliasFromParent = new BitSet(16);\n      \n     /**\n      * Helper method to return the proper table alias for the given alias index.\n@@ -189,6 +198,7 @@ public SelectImpl(JDBCConfiguration conf) {\n         _conf = conf;\n         _dict = _conf.getDBDictionaryInstance();\n         _joinSyntax = _dict.joinSyntax;\n+        _selects._dict = _dict;\n     }\n \n     /////////////////////////////////\n@@ -1204,7 +1214,7 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n         int count = 0;\n         for (int i = 0; i < toCols.length; i++, count++) {\n             if (pks == null)\n-                val = (oid == null) ? null : Numbers.valueOf(((Id)oid).getId());\n+                val = (oid == null) ? null : Numbers.valueOf(((Id) oid).getId());\n             else {\n                 // must be app identity; use pk index to get correct pk value\n                 join = mapping.assertJoinable(toCols[i]);\n@@ -1362,11 +1372,7 @@ public void groupBy(SQLBuffer sql) {\n \n     public void groupBy(SQLBuffer sql, Joins joins) {\n         getJoins(joins, true);\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-        _grouping.append(sql);\n+        groupByAppend(sql.getSQL());\n     }\n \n     public void groupBy(String sql) {\n@@ -1375,42 +1381,39 @@ public void groupBy(String sql) {\n \n     public void groupBy(String sql, Joins joins) {\n         getJoins(joins, true);\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-        _grouping.append(sql);\n+        groupByAppend(sql);\n     }\n \n     public void groupBy(Column col) {\n         groupBy(col, null);\n     }\n \n     public void groupBy(Column col, Joins joins) {\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-\n         PathJoins pj = getJoins(joins, true);\n-        _grouping.append(getColumnAlias(col, pj));\n+        groupByAppend(getColumnAlias(col, pj));\n     }\n \n     public void groupBy(Column[] cols) {\n         groupBy(cols, null);\n     }\n \n     public void groupBy(Column[] cols, Joins joins) {\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-\n         PathJoins pj = getJoins(joins, true);\n         for (int i = 0; i < cols.length; i++) {\n-            if (i > 0)\n+            groupByAppend(getColumnAlias(cols[i], pj));\n+        }\n+    }\n+    \n+    private void groupByAppend(String sql) {\n+        if (_grouped == null || !_grouped.contains(sql)) {\n+            if (_grouping == null) {\n+                _grouping = new SQLBuffer(_dict);\n+                _grouped = new ArrayList();\n+            } else\n                 _grouping.append(\", \");\n-            _grouping.append(getColumnAlias(cols[i], pj));\n+\n+            _grouping.append(sql);\n+            _grouped.add(sql);\n         }\n     }\n \n@@ -1487,8 +1490,13 @@ else if (!pre) {\n     private void removeParentJoins(PathJoins pj) {\n         if (_parent == null)\n             return;\n-        if (_parent._joins != null && !_parent._joins.isEmpty())\n-            pj.joins().removeAll(_parent._joins.joins());\n+        if (_parent._joins != null && !_parent._joins.isEmpty()) {\n+            boolean removed = false;\n+            if (!_removedAliasFromParent.isEmpty())\n+                removed = _parent._joins.joins().removeAll(pj.joins());\n+            if (!removed)\n+                pj.joins().removeAll(_parent._joins.joins());\n+        }\n         if (!pj.isEmpty())\n             _parent.removeParentJoins(pj);\n     }\n@@ -1897,9 +1905,15 @@ private Integer findAlias(Table table, Object key, boolean fromParent,\n             }\n         }\n         if (!fromParent && _parent != null) {\n-            alias = _parent.findAlias(table, key, false, this);\n-            if (alias != null)\n+            boolean removeAliasFromParent = key.toString().indexOf(\":\") != -1;\n+            alias = _parent.findAlias(table, key, removeAliasFromParent, this);\n+            if (alias != null) {\n+                if (removeAliasFromParent) {\n+                    recordTableAlias(table, key, alias);\n+                    _removedAliasFromParent.set(alias.intValue());\n+                }\n                 return alias;\n+            }\n         }\n         if (_subsels != null) {\n             SelectImpl sub;\n@@ -1913,9 +1927,11 @@ private Integer findAlias(Table table, Object key, boolean fromParent,\n                     if (sub._tables != null)\n                         sub._tables.remove(alias);\n                 } else {\n-                    alias = sub.findAlias(table, key, true, null);\n-                    if (!fromParent && alias != null)\n-                        recordTableAlias(table, key, alias);\n+                    if (key instanceof String) {\n+                        alias = sub.findAlias(table, key, true, null);\n+                        if (!fromParent && alias != null)\n+                            recordTableAlias(table, key, alias);\n+                    }\n                 }\n             }\n         }\n@@ -2648,19 +2664,24 @@ public String toString() {\n             return super.toString() + \" (\" + _outer + \"): \" + _joins;\n         }\n     }\n+    \n+    protected Selects newSelects() {\n+        return new Selects();\n+    }\n \n     /**\n      * Helper class to track selected columns, with fast contains method.\n      * Acts as a list of select ids, with additional methods to manipulate\n      * the alias of each selected id.\n      */\n-    private static class Selects\n+    protected static class Selects\n         extends AbstractList {\n \n-        private List _ids = null;\n-        private List _idents = null;\n-        private Map _aliases = null;\n-        private Map _selectAs = null;\n+        protected List _ids = null;\n+        protected List _idents = null;\n+        protected Map _aliases = null;\n+        protected Map _selectAs = null;\n+        protected DBDictionary _dict = null;\n \n         /**\n          * Add all aliases from another instance.\n@@ -2769,6 +2790,9 @@ public Object get(int i) {\n                     Object id = (ident && _idents != null) ? _idents.get(i)\n                         : _ids.get(i);\n                     Object alias = _aliases.get(id);\n+                    if (id instanceof Column && ((Column) id).isXML())\n+                        alias = alias + _dict.getStringVal;\n+                        \n                     String as = null;\n                     if (inner)\n                         as = ((String) alias).replace('.', '_');"},{"sha":"26be53c72d6c4213ceccb449166e3de3b60fd97c","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -165,8 +165,8 @@ SQLFactory-interface: org.apache.openjpa.jdbc.sql.SQLFactory\n MappingFactory-name: Mapping factory\n MappingFactory-desc: The org.apache.openjpa.meta.MetaDataFactory that will \\\n     provide the object-relational mapping information needed to map each \\\n-    persistent class to the database, if it isn't provided by current metadata \\\n-    MetaDataFactory.\n+    persistent class to the database, if it is not provided by current \\\n+    metadata MetaDataFactory.\n MappingFactory-type: General\n MappingFactory-cat: Mappings\n MappingFactory-displayorder: 50"},{"sha":"dd0f87b759caf8845ad75942649c4d9bcab7f214","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -75,7 +75,7 @@ no-seq-sql: Error instantiating named sequence \"{0}\": Your database dictionary \\\n \tdoes not support native sequences.  To tell the dictionary how to select \\\n \tsequence values, use:\\n\\\n \topenjpa.jdbc.DBDictionary: NextSequenceQuery=\"SELECT NEXT VALUE \\\n-    FOR \\{0\\}\"\\n\\\n+    FOR '{0}\"\\n\\\n \tWhere the above string is replaced with the proper SQL for your database.\n invalid-seq-sql: No rows returned for sql \"{0}\".  Check your configuration.\n insert-seq: Inserting row for this mapping into sequence table.\n@@ -98,7 +98,15 @@ native-seq-usage: Usage: java org.apache.openjpa.jdbc.kernel.NativeJDBCSeq\\n\\\n \t\\t[-properties/-p <properties file or resource>]\\n\\\n \t\\t[-<property name> <property value>]*\n bad-level: Invalid isolation level. Valid levels are -1, \\\n-    Connection.TRANSACTION_NONE, Connection.TRANSACTION_READ_UNCOMMITTED, \\ \n+    Connection.TRANSACTION_NONE, Connection.TRANSACTION_READ_UNCOMMITTED, \\\n     Connection.TRANSACTION_READ_COMMITTED, \\\n     Connection.TRANSACTION_REPEATABLE_READ, or \\\n     Connection.TRANSACTION_SERIALIZABLE. Specified value: {0}.\n+no-nullable-fk: No nullable foreign key found to resolve circular flush\\n\\\n+\tdependency. During flush processing, changes to instances, new\\n\\\n+\tinstances, and deleted instances must be processed in a specific sequence\\n\\\n+\tto avoid foreign key constraint violations. The changes required in this\\n\\\n+\ttransaction cannot be reordered because none of the foreign key constraints\\n\\\n+\tis nullable (optional).\n+graph-not-cycle-free: A circular flush dependency has been found after all \\\n+    circular dependencies should have been resolved."},{"sha":"8addfff9b70cb491de48485e1de7361f71ba788e","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -359,6 +359,7 @@ revtool-map: Calculating reverse mappings.\n revtool-write-code: Writing generated class source code.\n revtool-write-appid: Writing generated application identity classes.\n revtool-write-metadata: Writing generated metadata.\n+revtool-gen-annos: Generating annotations.\n revtool-usage: Usage: java org.apache.openjpa.jdbc.meta.ReverseMappingTool\\n\\\n \t\\t[-properties/-p <properties file or resource>]\\n\\\n \t\\t[-<property name> <property value>]*\\n\\\n@@ -369,6 +370,7 @@ revtool-usage: Usage: java org.apache.openjpa.jdbc.meta.ReverseMappingTool\\n\\\n \t\\t[-useForeignKeyName/-fkn <true/t | false/f>]\\n\\\n \t\\t[-nullableAsObject/-no <true/t | false/f>]\\n\\\n \t\\t[-blobAsObject/-bo <true/t | false/f>]\\n\\\n+\t\\t[-useGenericCollections/-gc <true/t | false/f>]\\n\\\n \t\\t[-typeMap/-type <types>]\\n\\\n \t\\t[-primaryKeyOnJoin/-pkj <true/t | false/f>]\\n\\\n \t\\t[-useDatastoreIdentity/-ds <true/t | false/f>]\\n\\\n@@ -379,7 +381,9 @@ revtool-usage: Usage: java org.apache.openjpa.jdbc.meta.ReverseMappingTool\\n\\\n \t\\t[-detachable/-det <true/t | false/f>]\\n\\\n \t\\t[-discriminatorStrategy/-ds <strategy>]\\n\\\n \t\\t[-versionStrategy/-vs <strategy>]\\n\\\n-\t\\t[-metadata/-md <package | class>]\\n\\\n+\t\\t[-metadata/-md <package | class | none>]\\n\\\n+\t\\t[-annotations/-ann <true/t | false/f>]\\n\\\n+\t\\t[-accessType/-access <field | property>]\\n\\\n \t\\t[-customizerClass/-cc <full class name>]\\n\\\n \t\\t[-customizerProperties/-cp <properties file or resource>]\\n\\\n \t\\t[-customizer/-c.<property name> <property value>]*\\n\\"},{"sha":"115918d4d37cd4b892b6d9577848bf81a51957b6","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -59,8 +59,6 @@ not-embed: \"{0}\" specifies an embedded mapping strategy, but it is not \\\n \tembedded.\n not-oid: \"{0}\" species an object id mapping strategy, but it is not \\\n \tan object id field.\n-oid-not-joinable: Field \"{0}\" embedded within object id field \"{1}\" cannot be \\\n-\ta primary key value.  Its mapping does not it to be a join target.\n flat-table: Type \"{0}\" uses a flat inheritance mapping, but declares a table \\\n \tname of \"{1}\", which does not match the superclass table \"{2}\".\n not-string: Field \"{0}\" declares a string field mapping strategy, but is not \\\n@@ -95,7 +93,7 @@ class-crit-owner: Field \"{0}\" declares that it uses class criteria for joins, \\\n \timpossible to correctly null the inverse foreign keys when the field is \\\n \tdeleted.  OpenJPA may leave orphan key values in the database if you do \\\n     not provide an owning inverse relation using the \"mapped-by\" attribute.\n-not-map: Field \"{0}\" declares a map mapping strategy, but is not a map type.\n+not-map: Field \"{0}\" declares a Map mapping strategy, but it is not a Map type.\n mapped-by-key: Map field \"{0}\" is attempting to use a map table, but its key \\\n \tis mapped by another field.  Use an inverse key or join table mapping.\n not-mapped-by-key: Map field \"{0}\" is attempting to use an inverse key or join \\"},{"sha":"b640c2d4d8610cb8be3171381131768fa38ea9fc","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -30,11 +30,11 @@ incompat-ordering: This query cannot be completed.  The SQL SELECTs needed \\\n \tto complete the query have incompatible ordering.  Their results cannot \\\n \tbe merged.\n unpadded-char-cols: You are using CHAR columns with a data source or driver \\\n-\tthat doesn't implement OraclePreparedStatement.setFixedCHAR(). \\\n+\tthat does not implement OraclePreparedStatement.setFixedCHAR(). \\\n \tComparisons on unpadded string values may fail.\n unconfigured-nchar-cols: You are using NCHAR or NCLOB columns with a \\\n \tdata source or driver \\\n-\tthat doesn't implement OraclePreparedStatement.setFormOfUse(). \\\n+\tthat does not implement OraclePreparedStatement.setFormOfUse(). \\\n \tStoring unicode values may fail or be corrupted.\n diff-values: Attempt to set column \"{0}\" to two different values: \\\n \t({1})\"{2}\", ({3})\"{4}\" \\\n@@ -167,3 +167,5 @@ isolation-level-config-not-supported: This DBDictionary does not support \\\n     customization of isolation levels on a per-query basis. DBDictionary: {0}.\n millis-query-timeout: JDBC locking does not support millisecond-granularity \\\n     timeouts.  Use timeouts that are multiples of 1000 for even second values.\n+db-not-supported: The database product \"{0}\", version \"{1}\" is not officially supported.\n+    \n\\ No newline at end of file"},{"sha":"7abd8f2ab406e8183296c9922519a07eb48d7896","filename":"openjpa-kernel-5/pom.xml","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,11 +26,11 @@\n     <packaging>jar</packaging>\n     <name>OpenJPA Kernel 1.5</name>\n     <description>OpenJPA Kernel 1.5</description>\n-    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <url>http://openjpa.apache.org</url>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -58,7 +58,9 @@\n                     <archive>\n                         <manifestEntries>\n                             <Premain-Class>\n-                                org.apache.openjpa.enhance.PCEnhancerAgent</Premain-Class>\n+                                org.apache.openjpa.enhance.InstrumentationFactory\n+                            </Premain-Class>\n+                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                         </manifestEntries>\n                     </archive>\n                 </configuration>"},{"sha":"ac6d782dc52a6a212e455ebe613a47424c406adc","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,151 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.lang.instrument.Instrumentation;\r\n+import java.lang.instrument.ClassFileTransformer;\r\n+import java.lang.instrument.ClassDefinition;\r\n+import java.lang.instrument.UnmodifiableClassException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.security.ProtectionDomain;\r\n+import java.util.Map;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.ArrayList;\r\n+import java.io.IOException;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.util.JavaVersions;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+/**\r\n+ * Redefines the method bodies of existing classes. Supports Java 5 VMs that\r\n+ * have a javaagent installed on the command line as well as newer VMs without\r\n+ * any javaagent flag.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class ClassRedefiner {\r\n+\r\n+    private static final Localizer _loc = \r\n+        Localizer.forPackage(ClassRedefiner.class);\r\n+\r\n+    private static Boolean _canRedefine = null;\r\n+\r\n+    /**\r\n+     * For each element in <code>classes</code>, this method will redefine\r\n+     * all the element's methods such that field accesses are intercepted\r\n+     * in-line.\r\n+     */\r\n+    public static void redefineClasses(OpenJPAConfiguration conf,\r\n+        final Map<Class,byte[]> classes) {\r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n+        if (classes == null || classes.size() == 0)\r\n+            return;\r\n+\r\n+        Instrumentation inst = null;\r\n+        ClassFileTransformer t = null;\r\n+        try {\r\n+            inst = InstrumentationFactory.getInstrumentation();\r\n+\r\n+            Class[] array = classes.keySet().toArray(new Class[classes.size()]);\r\n+            if (JavaVersions.VERSION >= 6) {\r\n+                log.trace(_loc.get(\"retransform-types\", classes.keySet()));\r\n+\r\n+                t = new ClassFileTransformer() {\r\n+                    public byte[] transform(ClassLoader loader, String clsName,\r\n+                        Class<?> classBeingRedefined, ProtectionDomain pd,\r\n+                        byte[] classfileBuffer) {\r\n+                        return classes.get(classBeingRedefined);\r\n+                    }\r\n+                };\r\n+                \r\n+                // these are Java 6 methods, and we don't have a Java 6 build\r\n+                // module yet. The cost of reflection here is negligible\r\n+                // compared to the redefinition / enhancement costs in total,\r\n+                // so this should not be a big problem.\r\n+                Method meth = inst.getClass().getMethod(\"addTransformer\",\r\n+                    new Class[] { ClassFileTransformer.class, boolean.class });\r\n+                meth.invoke(inst, new Object[] { t, true });\r\n+                meth = inst.getClass().getMethod(\"retransformClasses\",\r\n+                    new Class[] { array.getClass() });\r\n+                meth.invoke(inst, new Object[] { array });\r\n+            } else {\r\n+                log.trace(_loc.get(\"redefine-types\", classes.keySet()));\r\n+                // in a Java 5 context, we can use class redefinition instead\r\n+                ClassDefinition[] defs = new ClassDefinition[array.length];\r\n+                for (int i = 0; i < defs.length; i++)\r\n+                    defs[i] = new ClassDefinition(array[i],\r\n+                        classes.get(array[i]));\r\n+                inst.redefineClasses(defs);\r\n+            }\r\n+        } catch (NoSuchMethodException e) {\r\n+            throw new InternalException(e);\r\n+        } catch (IllegalAccessException e) {\r\n+            throw new InternalException(e);\r\n+        } catch (InvocationTargetException e) {\r\n+            throw new UserException(e.getCause());\r\n+        } catch (IOException e) {\r\n+            throw new InternalException(e);\r\n+        } catch (ClassNotFoundException e) {\r\n+            throw new InternalException(e);\r\n+        } catch (UnmodifiableClassException e) {\r\n+            throw new InternalException(e);\r\n+        } finally {\r\n+            if (inst != null && t != null)\r\n+                inst.removeTransformer(t);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @return whether or not this VM has an instrumentation installed that\r\n+     * permits redefinition of classes. This assumes that all the arguments\r\n+     * will be modifiable classes according to\r\n+     * {@link java.lang.instrument.Instrumentation#isModifiableClass}, and\r\n+     * only checks whether or not an instrumentation is available and\r\n+     * if retransformation is possible.\r\n+     */\r\n+    public static boolean canRedefineClasses() {\r\n+        if (_canRedefine == null) {\r\n+            try {\r\n+                Instrumentation inst = InstrumentationFactory\r\n+                    .getInstrumentation();\r\n+                if (inst == null) {\r\n+                    _canRedefine = Boolean.FALSE;\r\n+                } else if (JavaVersions.VERSION == 5) {\r\n+                    // if inst is non-null and we're using Java 5,\r\n+                    // isRetransformClassesSupported isn't available,\r\n+                    // so we use the more basic class redefinition\r\n+                    // instead.\r\n+                    _canRedefine = Boolean.TRUE;\r\n+                } else {\r\n+                    _canRedefine = (Boolean) Instrumentation.class.getMethod(\r\n+                        \"isRetransformClassesSupported\").invoke(inst);\r\n+                }\r\n+            } catch (Exception e) {\r\n+                _canRedefine = Boolean.FALSE;\r\n+            }\r\n+        }\r\n+        return _canRedefine.booleanValue();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"505b5ff25e5777465e8ebc1530798393c94295d2","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.enhance;\n+\n+import java.io.*;\n+import java.lang.instrument.*;\n+import java.lang.management.*;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.zip.*;\n+import org.apache.openjpa.lib.util.*;\n+\n+\n+/**\n+ * Factory for obtaining an {@link Instrumentation} instance.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @since 1.0.0\n+ */\n+public class InstrumentationFactory {\n+    private static Instrumentation _inst;\n+    private static boolean _dynamicallyInstall = true;\n+\n+    public static void setInstrumentation(Instrumentation inst) {\n+        _inst = inst;\n+    }\n+\n+    /**\n+     * Configures whether or not this instance should attempt to dynamically\n+     * install an agent in the VM. Defaults to <code>true</code>.\n+     */\n+    public static synchronized void setDynamicallyInstallAgent(boolean val) {\n+        _dynamicallyInstall = val;\n+    }\n+\n+    public static synchronized Instrumentation getInstrumentation()\n+        throws IOException, NoSuchMethodException, IllegalAccessException,\n+        InvocationTargetException, ClassNotFoundException {\n+        if (_inst != null || !_dynamicallyInstall)\n+            return _inst;\n+\n+        // dynamic loading of the agent is only available in JDK 1.6+\n+        if (JavaVersions.VERSION < 6)\n+            return null;\n+\n+        String agentPath = getAgentJar();\n+\n+        // first obtain the PID of the currently-running process\n+        // ### this relies on the undocumented convention of the RuntimeMXBean's\n+        // ### name starting with the PID, but there appears to be no other\n+        // ### way to obtain the current process' id, which we need for\n+        // ### the attach process\n+        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+        String pid = runtime.getName();\n+        if (pid.indexOf(\"@\") != -1)\n+            pid = pid.substring(0, pid.indexOf(\"@\"));\n+\n+        // JDK1.6: now attach to the current VM so we can deploy a new agent\n+        // ### this is a Sun JVM specific feature; other JVMs may offer\n+        // ### this feature, but in an implementation-dependent way\n+        Class vmClass = Class.forName(\"com.sun.tools.attach.VirtualMachine\");\n+        Object vm = vmClass.getMethod(\"attach\", new Class[] { String.class }).\n+            invoke(null, new String[] { pid });\n+\n+        // now deploy the actual agent, which will wind up calling agentmain()\n+        vm.getClass().getMethod(\"loadAgent\", new Class[] { String.class }).\n+            invoke(vm, new Object[] { agentPath });\n+\n+        if (_inst != null)\n+            return _inst;\n+\n+        return null;\n+    }\n+\n+    /** \n+     *  Create a new jar file for the sole purpose of specifying an\n+     *  Agent-Class to load into the JVM.\n+     */\n+    private static String getAgentJar() throws IOException {\n+        File file = File.createTempFile(\n+            InstrumentationFactory.class.getName(), \".jar\");\n+        file.deleteOnExit();\n+\n+        ZipOutputStream zout = new ZipOutputStream(new FileOutputStream(file));\n+        zout.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n+\n+        PrintWriter writer = new PrintWriter\n+            (new OutputStreamWriter(zout));\n+\n+        writer.println(\"Agent-Class: \"\n+            + InstrumentationFactory.class.getName());\n+        writer.println(\"Can-Redefine-Classes: true\");\n+        writer.println(\"Can-Retransform-Classes: true\");\n+\n+        writer.close();\n+\n+        return file.getAbsolutePath();\n+    }\n+\n+    /**\n+     *  The method that is called when a jar is added as an agent at runtime.\n+     *  All this method does is store the {@link Instrumentation} for\n+     *  later use.\n+     */\n+    public static void agentmain(String agentArgs, Instrumentation inst) {\n+        InstrumentationFactory.setInstrumentation(inst);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"6d6305e91d88ed180544c0ff888deed5d7923aa1","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"added","additions":278,"deletions":0,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,278 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.BytecodeWriter;\r\n+import org.apache.openjpa.lib.util.JavaVersions;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.Localizer.Message;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.util.GeneratedClasses;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.UserException;\r\n+import serp.bytecode.BCClass;\r\n+\r\n+/**\r\n+ * Redefines the method bodies of existing unenhanced classes to make them\r\n+ * notify state managers of mutations.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class ManagedClassSubclasser {\r\n+    private static final Localizer _loc = Localizer.forPackage(\r\n+        ManagedClassSubclasser.class);\r\n+\r\n+    /**\r\n+     * For each element in <code>classes</code>, creates and registers a\r\n+     * new subclass that implements {@link PersistenceCapable}, and prepares\r\n+     * OpenJPA to handle new instances of the unenhanced type. If this is\r\n+     * invoked in a Java 6 environment, this method will redefine the methods\r\n+     * for each class in the argument list such that field accesses are\r\n+     * intercepted in-line. If invoked in a Java 5 environment, this\r\n+     * redefinition is not possible; in these contexts, when using field\r\n+     * access, OpenJPA will need to do state comparisons to detect any change\r\n+     * to any instance at any time, and when using property access, OpenJPA\r\n+     * will need to do state comparisons to detect changes to newly inserted\r\n+     * instances after a flush has been called.\r\n+     *\r\n+     * @return the new subclasses, or <code>null</code> if <code>classes</code>\r\n+     * is <code>null</code>.\r\n+     * @throws UserException if <code>conf</code> requires build-time\r\n+     * enhancement and <code>classes</code> includes unenhanced types.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public static List<Class> prepareUnenhancedClasses(\r\n+        final OpenJPAConfiguration conf,\r\n+        final Collection<? extends Class> classes,\r\n+        final ClassLoader envLoader) {\r\n+        if (classes == null)\r\n+            return null;\r\n+        if (classes.size() == 0)\r\n+            return Collections.EMPTY_LIST;\r\n+\r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n+        if (conf.getRuntimeUnenhancedClassesConstant()\r\n+            != RuntimeUnenhancedClasssesModes.SUPPORTED) {\r\n+            Collection unenhanced = new ArrayList();\r\n+            for (Class cls : classes)\r\n+                if (!PersistenceCapable.class.isAssignableFrom(cls))\r\n+                    unenhanced.add(cls);\r\n+            if (unenhanced.size() > 0) {\r\n+                Message msg = _loc.get(\"runtime-optimization-disabled\",\r\n+                    unenhanced);\r\n+                if (conf.getRuntimeUnenhancedClassesConstant()\r\n+                    == RuntimeUnenhancedClasssesModes.WARN)\r\n+                    log.warn(msg);\r\n+                else\r\n+                    throw new UserException(msg);\r\n+            }\r\n+            return null;\r\n+        }\r\n+\r\n+        boolean redefine = ClassRedefiner.canRedefineClasses();\r\n+        if (redefine)\r\n+            log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r\n+                classes));\r\n+        else\r\n+            log.info(_loc.get(\"enhance-and-subclass-and-redef-start\",\r\n+                classes));\r\n+\r\n+        final Map<Class, byte[]> map = new HashMap<Class, byte[]>();\r\n+        final List subs = new ArrayList(classes.size());\r\n+        final List ints = new ArrayList(classes.size());\r\n+        Set<Class> unspecified = null;\r\n+        for (Iterator iter = classes.iterator(); iter.hasNext(); ) {\r\n+            final Class cls = (Class) iter.next();\r\n+            final PCEnhancer enhancer = new PCEnhancer(conf, cls);\r\n+\r\n+            enhancer.setBytecodeWriter(new BytecodeWriter() {\r\n+                public void write(BCClass bc) throws IOException {\r\n+                    ManagedClassSubclasser.write(bc, enhancer, map,\r\n+                        cls, subs, ints);\r\n+                }\r\n+            });\r\n+            if (redefine)\r\n+                enhancer.setRedefine(true);\r\n+            enhancer.setCreateSubclass(true);\r\n+            enhancer.setAddDefaultConstructor(true);\r\n+\r\n+            // set this before enhancement as well as after since enhancement\r\n+            // uses a different metadata repository, and the metadata config\r\n+            // matters in the enhancement contract. Don't do any warning here,\r\n+            // since we'll issue warnings when we do the final metadata\r\n+            // reconfiguration at the end of this method.\r\n+            configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n+\r\n+            unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n+                classes, unspecified);\r\n+\r\n+            enhancer.run();\r\n+            try {\r\n+                enhancer.record();\r\n+            } catch (IOException e) {\r\n+                // our impl of BytecodeWriter doesn't throw IOException\r\n+                throw new InternalException(e);\r\n+            }\r\n+        }\r\n+\r\n+        if (unspecified != null && !unspecified.isEmpty())\r\n+            throw new UserException(_loc.get(\"unspecified-unenhanced-types\",\r\n+                classes, unspecified));\r\n+\r\n+        ClassRedefiner.redefineClasses(conf, map);\r\n+        for (Class cls : map.keySet()) {\r\n+            setIntercepting(conf, envLoader, cls);\r\n+            configureMetaData(conf, envLoader, cls, redefine);\r\n+        }\r\n+        for (Class cls : (Collection<Class>) subs)\r\n+            configureMetaData(conf, envLoader, cls, redefine);\r\n+        for (Class cls : (Collection<Class>) ints)\r\n+            setIntercepting(conf, envLoader, cls);\r\n+\r\n+        return subs;\r\n+    }\r\n+\r\n+    private static Set<Class> collectRelatedUnspecifiedTypes(ClassMetaData meta,\r\n+        Collection<? extends Class> classes, Set<Class> unspecified) {\r\n+        unspecified = collectUnspecifiedType(meta.getPCSuperclass(), classes,\r\n+            unspecified);\r\n+\r\n+        for (FieldMetaData fmd : meta.getFields()) {\r\n+            if (fmd.isTransient())\r\n+                continue;\r\n+            if (fmd.isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getType(), classes,\r\n+                    unspecified);\r\n+            if (fmd.getElement() != null && fmd.getElement().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getElement().getType(),\r\n+                    classes, unspecified);\r\n+            if (fmd.getKey() != null && fmd.getKey().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getKey().getType(),\r\n+                    classes, unspecified);\r\n+            if (fmd.getValue() != null && fmd.getValue().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getValue().getType(),\r\n+                    classes, unspecified);\r\n+        }\r\n+        return unspecified;\r\n+    }\r\n+\r\n+    private static Set<Class> collectUnspecifiedType(Class cls,\r\n+        Collection<? extends Class> classes, Set<Class> unspecified) {\r\n+        if (cls != null && !classes.contains(cls)\r\n+            && !ImplHelper.isManagedType(null, cls)) {\r\n+            if (unspecified == null)\r\n+                unspecified = new HashSet<Class>();\r\n+            unspecified.add(cls);\r\n+        }\r\n+        return unspecified;\r\n+    }\r\n+\r\n+    private static void configureMetaData(OpenJPAConfiguration conf,\r\n+        ClassLoader envLoader, Class cls, boolean redefineAvailable) {\r\n+        ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r\n+            .getMetaData(cls, envLoader, true);\r\n+        configureMetaData(meta, conf, redefineAvailable, true);\r\n+    }\r\n+\r\n+    private static void configureMetaData(ClassMetaData meta,\r\n+        OpenJPAConfiguration conf, boolean redefineAvailable, boolean warn) {\r\n+\r\n+        setDetachedState(meta);\r\n+\r\n+        if (warn && meta.getAccessType() == ClassMetaData.ACCESS_FIELD\r\n+            && !redefineAvailable) {\r\n+            // only warn about declared fields; superclass fields will be\r\n+            // warned about when the superclass is handled\r\n+            for (FieldMetaData fmd : meta.getDeclaredFields()) {\r\n+                switch (fmd.getTypeCode()) {\r\n+                    case JavaTypes.COLLECTION:\r\n+                    case JavaTypes.MAP:\r\n+                        // we can lazily load these, since we own the\r\n+                        // relationship container\r\n+                        break;\r\n+                    default:\r\n+                        if (!fmd.isInDefaultFetchGroup()\r\n+                            && !(fmd.isVersion() || fmd.isPrimaryKey())) {\r\n+                            Log log = conf.getLog(\r\n+                                OpenJPAConfiguration.LOG_ENHANCE);\r\n+                            log.warn(_loc.get(\"subclasser-fetch-group-override\",\r\n+                                meta.getDescribedType().getName(),\r\n+                                fmd.getName()));\r\n+                            fmd.setInDefaultFetchGroup(true);\r\n+                        }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void write(BCClass bc, PCEnhancer enhancer,\r\n+        Map<Class, byte[]> map, Class cls, List subs, List ints)\r\n+        throws IOException {\r\n+\r\n+        if (bc == enhancer.getManagedTypeBytecode()) {\r\n+            // if it was already defined, don't put it in the map,\r\n+            // but do set the metadata accordingly.\r\n+            if (enhancer.isAlreadyRedefined())\r\n+                ints.add(bc.getType());\r\n+            else if (JavaVersions.VERSION >= 5)\r\n+                map.put(bc.getType(), bc.toByteArray());\r\n+        } else {\r\n+            if (!enhancer.isAlreadySubclassed()) {\r\n+                // this is the new subclass\r\n+                ClassLoader loader = GeneratedClasses.getMostDerivedLoader(\r\n+                    cls, PersistenceCapable.class);\r\n+                subs.add(GeneratedClasses.loadBCClass(bc, loader));\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void setIntercepting(OpenJPAConfiguration conf,\r\n+        ClassLoader envLoader, Class cls) {\r\n+        ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r\n+            .getMetaData(cls, envLoader, true);\r\n+        meta.setIntercepting(true);\r\n+    }\r\n+\r\n+    /**\r\n+     * If the metadata is configured to use a synthetic\r\n+     * detached state, reset it to not use a detached\r\n+     * state field, since we can't add fields when redefining.\r\n+     */\r\n+    private static void setDetachedState(ClassMetaData meta) {\r\n+        if (ClassMetaData.SYNTHETIC.equals(meta.getDetachedState()))\r\n+            meta.setDetachedState(null);\r\n+    }\r\n+}\r"},{"sha":"b3a06960dab257da7a872ae8ef0ec35ad9e2451e","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -133,7 +133,7 @@ public PCClassFileTransformer(MetaDataRepository repos,\n \n             if (enhancer.run() == PCEnhancer.ENHANCE_NONE)\n                 return null;\n-            return enhancer.getBytecode().toByteArray();\n+            return enhancer.getPCBytecode().toByteArray();\n         } catch (Throwable t) {\n             _log.warn(_loc.get(\"cft-exception-thrown\", className), t);\n             if (t instanceof RuntimeException)"},{"sha":"52b6418d4c46bffed5e93d739dc11e607ecf71d0","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":49,"deletions":12,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,33 +19,67 @@\n package org.apache.openjpa.enhance;\n \n import java.lang.instrument.Instrumentation;\n+import java.security.AccessController;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.util.ClassResolver;\n \n /**\n- * Java agent that makes persistent classes implement the\n- * {@link PersistenceCapable} interface at runtime. The agent is launched\n- * at JVM startup from the command line:\n- * \n- * <code>java -javaagent:openjpa.jar[=&lt;options&gt;]</code>\n+ * <p>Java agent that makes persistent classes work with OpenJPA at runtime.\n+ * This is achieved by either running the enhancer on the classes as they\n+ * are loaded, or by redefining the classes on the fly.\n+ * The agent is launched at JVM startup from the command line:</p>\n+ *\n+ * <p><code>java -javaagent:openjpa.jar[=&lt;options&gt;]</code>\n  *  The options string should be formatted as a OpenJPA plugin, and may\n  * contain any properties understood by the OpenJPA enhancer or any\n- * configuration properties. For example:\n- * \n- * <code>java -javaagent:openjpa.jar</code>\n+ * configuration properties. For example:</p>\n+ *\n+ * <p><code>java -javaagent:openjpa.jar</code></p>\n+ *\n+ * <p>By default, if specified, the agent runs the OpenJPA enhancer on\n+ * all classes listed in the first persistence unit as they are loaded,\n+ * and redefines all other persistent classes when they are encountered.\n+ * To disable enhancement at class-load time and rely solely on the\n+ * redefinition logic, set the ClassLoadEnhancement flag to false. To\n+ * disable redefinition and rely solely on pre-deployment or class-load\n+ * enhancement, set the RuntimeRedefinition flag to false.\n+ * </p>\n+ *\n+ * <p><code>java -javaagent:openjpa.jar=ClassLoadEnhancement=false</code></p>\n  *\n  * @author Abe White\n+ * @author Patrick Linskey\n  */\n public class PCEnhancerAgent {\n \n     public static void premain(String args, Instrumentation inst) {\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n         Options opts = Configurations.parseProperties(args);\n+\n+        if (opts.getBooleanProperty(\n+            \"ClassLoadEnhancement\", \"classLoadEnhancement\", true))\n+            registerClassLoadEnhancer(inst, opts);\n+\n+        // Deprecated property setting\n+        if (opts.getBooleanProperty(\n+            \"RuntimeEnhancement\", \"runtimeEnhancement\", true))\n+            registerClassLoadEnhancer(inst, opts);\n+\n+        if (opts.getBooleanProperty(\n+            \"RuntimeRedefinition\", \"runtimeRedefinition\", true)) {\n+            InstrumentationFactory.setInstrumentation(inst);\n+        } else {\n+            InstrumentationFactory.setDynamicallyInstallAgent(false);\n+        }\n+    }\n+\n+    private static void registerClassLoadEnhancer(Instrumentation inst,\n+        Options opts) {\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n         Configurations.populateConfiguration(conf, opts);\n         // don't allow connections\n         conf.setConnectionUserName(null);\n@@ -54,8 +88,11 @@ public static void premain(String args, Instrumentation inst) {\n         conf.setConnectionDriverName(null);\n         conf.setConnectionFactoryName(null);\n         // set single class resolver\n-        final ClassLoader tmpLoader = new TemporaryClassLoader(Thread.\n-            currentThread().getContextClassLoader());\n+        final ClassLoader tmpLoader = (ClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper\n+                .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+                    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n+                    ));\n         conf.setClassResolver(new ClassResolver() {\n             public ClassLoader getClassLoader(Class context, ClassLoader env) {\n                 return tmpLoader;"},{"sha":"d29a297432561f76e91489d7adb242d3e6c4dee8","filename":"openjpa-kernel/pom.xml","status":"modified","additions":25,"deletions":12,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,12 +26,32 @@\n     <packaging>jar</packaging>\r\n     <name>OpenJPA Kernel</name>\r\n     <description>OpenJPA Kernel</description>\r\n-    <url>http://incubator.apache.org/projects/openjpa</url>\r\n+    <url>http://openjpa.apache.org</url>\r\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n-        <artifactId>openjpa</artifactId>\r\n-        <version>0.9.8-incubating-SNAPSHOT</version>\r\n+        <artifactId>openjpa-parent</artifactId>\r\n+        <version>1.0.0</version>\r\n     </parent>\r\n+    <profiles>\r\n+        <profile>\r\n+            <id>java14-validate</id>\r\n+            <activation><property><name>java14.jar</name></property></activation>\r\n+            <build>\r\n+                <pluginManagement>\r\n+                    <plugins>\r\n+                        <plugin>\r\n+                            <artifactId>maven-compiler-plugin</artifactId>\r\n+                            <configuration>\r\n+                                <compilerArguments>\r\n+                                    <bootclasspath>${java14.jar}</bootclasspath>\r\n+                                </compilerArguments>\r\n+                            </configuration>\r\n+                        </plugin>\r\n+                    </plugins>\r\n+                </pluginManagement>\r\n+            </build>\r\n+        </profile>\r\n+    </profiles>\r\n     <dependencies>\r\n         <dependency>\r\n             <groupId>org.apache.openjpa</groupId>\r\n@@ -47,14 +67,8 @@\n         </dependency>\r\n         <dependency>\r\n             <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-j2ee-connector_1.5_spec</artifactId>\r\n-            <version>1.0.1</version>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-jta_1.0.1B_spec</artifactId>\r\n-            <version>1.0.1</version>\r\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\r\n+            <version>1.1</version>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n         <dependency>\r\n@@ -67,7 +81,6 @@\n     <build>\r\n         <plugins>\r\n             <plugin>\r\n-                <groupId>org.apache.maven.plugins</groupId>\r\n                 <artifactId>maven-compiler-plugin</artifactId>\r\n                 <configuration>\r\n                     <source>1.4</source>\r"},{"sha":"13aee36350b301ce32bc565d0918bab25467a9c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.abstractstore;\n \n+import java.security.AccessController;\n import java.util.Map;\n import java.util.Properties;\n \n@@ -29,6 +30,7 @@\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -131,7 +133,9 @@ protected StoreManager newStoreManager() {\n     private static AbstractStoreManager createStoreManager(String cls,\n         String props) {\n         AbstractStoreManager store = (AbstractStoreManager) Configurations.\n-            newInstance(cls, AbstractStoreManager.class.getClassLoader());\n+            newInstance(cls, (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(\n+                    AbstractStoreManager.class))); \n         Configurations.configureInstance(store, null, props,\n             PROP_ABSTRACT_STORE);\n         if (store == null)"},{"sha":"751773f6950bfba8b823db49dfe9416819f0b66f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":71,"deletions":9,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.kernel.RestoreState;\n import org.apache.openjpa.kernel.SavepointManager;\n import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.event.BrokerFactoryEventManager;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -1336,24 +1337,24 @@\n \t *\n \t * @since 0.3.2.3\n \t */\n-\tpublic void setRetryClassRegistration (boolean warn);\n+\tpublic void setRetryClassRegistration(boolean warn);\n \n-\t/**\n-\t * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n-\t *\n-\t * @since 0.3.2.3\n-\t */\n-\tpublic void setRetryClassRegistration (Boolean warn);\n+    /**\n+     * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n+     *\n+     * @since 0.3.2.3\n+     */\n+\tpublic void setRetryClassRegistration(Boolean warn);\n \n \t/**\n \t * Backwards compatibility options.\n \t */\n-\tpublic String getCompatibility ();\n+\tpublic String getCompatibility();\n \n \t/**\n \t * Backwards compatibility options.\n \t */\n-\tpublic void setCompatibility (String compatibility);\n+\tpublic void setCompatibility(String compatibility);\n \n \t/**\n \t * Backwards compatibility options.\n@@ -1386,4 +1387,65 @@\n      * configuration.\n      */\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry();\n+\n+    /**\n+     * Return the {@link org.apache.openjpa.event.BrokerFactoryEventManager}\n+     * associated with this configuration.\n+     *\n+     * @since 1.0.0\n+     */\n+    public BrokerFactoryEventManager getBrokerFactoryEventManager();\n+\n+    /**\n+     * Specifies how OpenJPA handles unenhanced types. Possible values are:\n+     * <ul>\n+     * <li><code>enabled</code>: Runtime optimization of persistent types\n+     * is available. This is the default</li>\n+     * <li><code>disabled</code>: Runtime optimization of persistent types\n+     * is not available. An exception will be thrown if the system loads with\n+     * persistent types that are not enhanced.</li>\n+     * <li><code>warn</code>: Runtime optimization of persistent types is\n+     * not available, but no exception will be thrown initially. A warning will\n+     * be logged instead. It is likely that the system will fail at a later\n+     * point. This might be suitable for environments with complex classloader\n+     * configurations.</li>\n+     * </ul>\n+     *\n+     * @since 1.0.0\n+     */\n+    public String getRuntimeUnenhancedClasses();\n+\n+    /**\n+     * Specifies how OpenJPA handles unenhanced types.\n+     *\n+     * @see {@link #getRuntimeUnenhancedClasses()}\n+     * @since 1.0.0\n+     */\n+    public void setRuntimeUnenhancedClasses(String mode);\n+\n+    /**\n+     * Return the runtime class optimization setting as one of the\n+     * following symbolic constants:\n+     * <ul>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_ENABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_DISABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_WARN}</li>\n+     * </ul>\n+     *\n+     * @since 1.0.0\n+     */\n+    public int getRuntimeUnenhancedClassesConstant();\n+\n+    /**\n+     * Set the runtime class optimization setting as one of the\n+     * following symbolic constants:\n+     * <ul>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_ENABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_DISABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_WARN}</li>\n+     * </ul>\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setRuntimeUnenhancedClasses(int mode);\n }"},{"sha":"9d88de3f5ed3b1b5ce95f34b71d9a159c07be676","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":65,"deletions":13,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n import org.apache.openjpa.event.RemoteCommitProvider;\n+import org.apache.openjpa.event.BrokerFactoryEventManager;\n import org.apache.openjpa.kernel.AutoClear;\n import org.apache.openjpa.kernel.BrokerImpl;\n import org.apache.openjpa.kernel.ConnectionRetainModes;\n@@ -52,6 +53,7 @@\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n+import org.apache.openjpa.enhance.RuntimeUnenhancedClasssesModes;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n@@ -130,6 +132,7 @@\n     public ObjectValue orphanedKeyPlugin;\n     public ObjectValue compatibilityPlugin;\n     public QueryCompilationCacheValue queryCompilationCachePlugin;\n+    public IntValue runtimeUnenhancedClasses;\n \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -140,6 +143,8 @@\n     private String spec = null;\n     private final StoreFacadeTypeRegistry _storeFacadeRegistry =\n         new StoreFacadeTypeRegistry();\n+    private BrokerFactoryEventManager _brokerFactoryEventManager =\n+        new BrokerFactoryEventManager(this);\n \n     /**\n      * Default constructor. Attempts to load global properties.\n@@ -360,10 +365,12 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         addValue(autoDetach);\n \n         detachStatePlugin = addPlugin(\"DetachState\", true);\n-        aliases =\n-            new String[] { \"loaded\", DetachOptions.Loaded.class.getName(),\n-                \"fgs\", DetachOptions.FetchGroups.class.getName(), \"all\",\n-                DetachOptions.All.class.getName(), };\n+        aliases = new String[] {\n+            \"loaded\", DetachOptions.Loaded.class.getName(),\n+            \"fgs\", DetachOptions.FetchGroups.class.getName(),\n+            \"fetch-groups\", DetachOptions.FetchGroups.class.getName(), \n+            \"all\", DetachOptions.All.class.getName(),\n+        };\n         detachStatePlugin.setAliases(aliases);\n         detachStatePlugin.setDefault(aliases[0]);\n         detachStatePlugin.setString(aliases[0]);\n@@ -407,19 +414,23 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n \n         readLockLevel = addInt(\"ReadLockLevel\");\n         aliases =\n-            new String[] { \"read\", String.valueOf(LockLevels.LOCK_READ),\n-                \"write\", String.valueOf(LockLevels.LOCK_WRITE), \"none\",\n-                String.valueOf(LockLevels.LOCK_NONE), };\n+            new String[] {\n+                \"read\", String.valueOf(LockLevels.LOCK_READ),\n+                \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n+                \"none\", String.valueOf(LockLevels.LOCK_NONE),\n+            };\n         readLockLevel.setAliases(aliases);\n         readLockLevel.setDefault(aliases[0]);\n         readLockLevel.set(LockLevels.LOCK_READ);\n         readLockLevel.setAliasListComprehensive(true);\n \n         writeLockLevel = addInt(\"WriteLockLevel\");\n         aliases =\n-            new String[] { \"read\", String.valueOf(LockLevels.LOCK_READ),\n-                \"write\", String.valueOf(LockLevels.LOCK_WRITE), \"none\",\n-                String.valueOf(LockLevels.LOCK_NONE), };\n+            new String[] {\n+                \"read\", String.valueOf(LockLevels.LOCK_READ),\n+                \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n+                \"none\", String.valueOf(LockLevels.LOCK_NONE),\n+            };\n         writeLockLevel.setAliases(aliases);\n         writeLockLevel.setDefault(aliases[1]);\n         writeLockLevel.set(LockLevels.LOCK_WRITE);\n@@ -431,15 +442,17 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n \n         connectionRetainMode = addInt(\"ConnectionRetainMode\");\n         aliases =\n-            new String[] { \"on-demand\",\n+            new String[] {\n+                \"on-demand\",\n                 String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n                 \"transaction\",\n                 String.valueOf(ConnectionRetainModes.CONN_RETAIN_TRANS),\n                 \"always\",\n                 String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n                 // deprecated\n                 \"persistence-manager\",\n-                String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS), };\n+                String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n+            };\n         connectionRetainMode.setAliases(aliases);\n         connectionRetainMode.setDefault(aliases[0]);\n         connectionRetainMode.setAliasListComprehensive(true);\n@@ -468,6 +481,19 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"getQueryCompilationCacheInstance\");\n         addValue(queryCompilationCachePlugin);\n         \n+        runtimeUnenhancedClasses = addInt(\"RuntimeUnenhancedClasses\");\n+        runtimeUnenhancedClasses.setAliases(new String[] {\n+            \"supported\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.SUPPORTED),\n+            \"unsupported\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.UNSUPPORTED),\n+            \"warn\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.WARN),\n+        });\n+        runtimeUnenhancedClasses.setDefault(\"supported\");\n+        runtimeUnenhancedClasses.setString(\"supported\");\n+        runtimeUnenhancedClasses.setAliasListComprehensive(true);\n+\n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n         supportedOptions.add(OPTION_OPTIMISTIC);\n@@ -1406,7 +1432,29 @@ public Map getQueryCompilationCacheInstance() {\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry() {\n         return _storeFacadeRegistry;\n     }\n-    \n+\n+    public BrokerFactoryEventManager getBrokerFactoryEventManager() {\n+        return _brokerFactoryEventManager;\n+    }\n+\n+    public String getRuntimeUnenhancedClasses() {\n+        return runtimeUnenhancedClasses.getString();\n+    }\n+\n+    public int getRuntimeUnenhancedClassesConstant() {\n+        return runtimeUnenhancedClasses.get();\n+    }\n+\n+    public void setRuntimeUnenhancedClasses(int mode) {\n+        assertNotReadOnly();\n+        runtimeUnenhancedClasses.set(mode);\n+    }\n+\n+    public void setRuntimeUnenhancedClasses(String mode) {\n+        assertNotReadOnly();\n+        runtimeUnenhancedClasses.setString(mode);\n+    }\n+\n     public void instantiateAll() {\n         super.instantiateAll();\n         getMetaDataRepositoryInstance();\n@@ -1422,4 +1470,8 @@ protected void preClose() {\n     public Log getConfigurationLog() {\n         return getLog(LOG_RUNTIME);\n     }\n+    \n+    public Value[] getDynamicValues() {\n+    \treturn new Value[] { dataCacheTimeout, fetchBatchSize, lockTimeout };\n+    }\n }"},{"sha":"264f22f72d989ab9f3b452719cfda1dc3707019e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,9 +20,12 @@\n \n import java.io.File;\n import java.io.InputStream;\n+import java.security.AccessController;\n import java.util.Properties;\n import java.util.StringTokenizer;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /**\n  * This class contains version information for OpenJPA. It uses\n  * Ant's filter tokens to convert the template into a java\n@@ -110,7 +113,9 @@ public String toString() {\n \n         buf.append(\"java.class.path:\\n\");\n         StringTokenizer tok = new StringTokenizer\n-            (System.getProperty(\"java.class.path\"), File.pathSeparator);\n+            ((String) AccessController.doPrivileged(\n+                J2DoPrivHelper.getPropertyAction(\"java.class.path\")),\n+            File.pathSeparator);\n         while (tok.hasMoreTokens()) {\n             buf.append(\"\\t\").append(tok.nextToken());\n             buf.append(\"\\n\");\n@@ -132,6 +137,8 @@ public void appendOpenJPABanner(StringBuffer buf) {\n     }\n \n     private StringBuffer appendProperty(String prop, StringBuffer buf) {\n-        return buf.append(prop).append(\": \").append(System.getProperty(prop));\n+        return buf.append(prop).append(\": \")\n+            .append((String) AccessController.doPrivileged(\n+                J2DoPrivHelper.getPropertyAction(prop)));\n     }\n }"},{"sha":"093a81065af959036cb5b963128a993181e6acff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.lib.conf.PluginValue;\r\n import org.apache.openjpa.lib.util.concurrent.ConcurrentMap;\r\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.lib.util.ParseException;\r\n import org.apache.openjpa.util.CacheMap;\r\n \r\n /**\r\n@@ -54,7 +55,36 @@ public QueryCompilationCacheValue(String prop) {\n     public Object newInstance(String clsName, Class type,\r\n         Configuration conf, boolean fatal) {\r\n         // make sure map handles concurrency\r\n-        Map map = (Map) super.newInstance(clsName, type, conf, fatal);\r\n+        Map map;\r\n+        \r\n+        try {\r\n+            map = (Map) super.newInstance(clsName, type, conf, fatal);\r\n+        } catch (ParseException pe) {\r\n+            // OPENJPA256: this class differs from most plugins in that\r\n+            // the plugin type is the standard java interface Map.class (rather\r\n+            // than an openjpa-specific interface), which means that the\r\n+            // ClassLoader used to load the implementation will be the system\r\n+            // class loader; this presents a problem if OpenJPA is not in the\r\n+            // system classpath, so work around the problem by catching\r\n+            // the ParseException (which is what we wrap the\r\n+            // ClassNotFoundException in) and try again, this time using\r\n+            // this class' ClassLoader.\r\n+            map = (Map) super.newInstance(clsName,\r\n+                QueryCompilationCacheValue.class, conf, fatal);\r\n+        } catch (IllegalArgumentException iae) {\r\n+            // OPENJPA256: this class differs from most plugins in that\r\n+            // the plugin type is the standard java interface Map.class (rather\r\n+            // than an openjpa-specific interface), which means that the\r\n+            // ClassLoader used to load the implementation will be the system\r\n+            // class loader; this presents a problem if OpenJPA is not in the\r\n+            // system classpath, so work around the problem by catching\r\n+            // the IllegalArgumentException (which is what we wrap the\r\n+            // ClassNotFoundException in) and try again, this time using\r\n+            // this class' ClassLoader.\r\n+            map = (Map) super.newInstance(clsName,\r\n+                QueryCompilationCacheValue.class, conf, fatal);\r\n+        }\r\n+\r\n         if (map != null && !(map instanceof Hashtable)\r\n             && !(map instanceof CacheMap)\r\n             && !(map instanceof ConcurrentMap))\r"},{"sha":"82a10701a88de2cf5a5986d90be182c173c65797","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -21,7 +21,10 @@\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.event.RemoteCommitEvent;\n@@ -439,4 +442,14 @@ protected void fireEvent(Object event, Object listener) {\n                 log.warn(s_loc.get(\"exp-listener-ex\"), e);\n \t\t}\n \t}\n+\n+    /**\n+     * Returns the objects for the given key List.\n+     */\n+    public Map getAll(List keys) {\n+        Map resultMap = new HashMap(keys.size());\n+        for(int i=0; i<keys.size(); i++)\n+            resultMap.put(keys.get(i), get(keys.get(i)));\n+        return resultMap;\n+    }\n }"},{"sha":"3208e640c7bfb985fbb4d4240c88910df3998f98","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -89,7 +89,7 @@ public int getSoftReferenceSize() {\n \n     public void initialize(DataCacheManager mgr) {\n         super.initialize(mgr);\n-        conf.getRemoteCommitEventManager().addListener(this);\n+        conf.getRemoteCommitEventManager().addInternalListener(this);\n     }\n \n     public void unpinAll(Class cls, boolean subs) {"},{"sha":"fd1a44f641c41fb2f51e70e69f3433d90fb85154","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -90,7 +90,7 @@ public void setSoftReferenceSize(int size) {\n \n     public void initialize(DataCacheManager mgr) {\n         super.initialize(mgr);\n-        conf.getRemoteCommitEventManager().addListener(this);\n+        conf.getRemoteCommitEventManager().addInternalListener(this);\n     }\n \n     public void writeLock() {"},{"sha":"cb3d09c62a10700e7a0c0399a7606bce54ac99c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,7 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.openjpa.lib.util.Closeable;\n@@ -258,4 +259,9 @@ public void commit(Collection additions, Collection newUpdates,\n      * Free the resources used by this cache.\n \t */\n \tpublic void close ();\n+    \n+    /**\n+\t * returns objects from the caches for a given list of keys\n+     */\n+    public Map getAll(List keys);\n }"},{"sha":"034bec13200463fd56b6f95f78580be5b60ed2a5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -73,5 +73,5 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\n     /**\n      * Close all caches.\n      */\n-    public void close ();\n+    public void close();\n }"},{"sha":"99de5c9bdc9f1e3b18b922fd68af0bdd802b9aba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -50,8 +50,6 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (DataCacheScheduler.class);\n \n-    private static final DateFormat _fom = new SimpleDateFormat(\"E HH:mm:ss\");\n-\n     private Map _caches = new ConcurrentHashMap();\n     private boolean _stop = false;\n     private int _interval = 2;\n@@ -121,6 +119,7 @@ public void run() {\n             _log.trace(_loc.get(\"scheduler-interval\", _interval + \"\"));\n \n         Date lastRun = new Date();\n+        DateFormat fom = new SimpleDateFormat(\"E HH:mm:ss\");\n         while (!isStopped()) {\n             try {\n                 Thread.sleep(_interval * 60 * 1000);\n@@ -136,7 +135,7 @@ public void run() {\n                     if (schedule.matches(lastRun, now)) {\n                         if (_log.isTraceEnabled())\n                             _log.trace(_loc.get(\"scheduler-clear\",\n-                                cache.getName(), _fom.format(now)));\n+                                cache.getName(), fom.format(now)));\n                         evict(cache);\n                     }\n                 }"},{"sha":"dab3e4d24bde5691db561b77fc10b0db726d9778","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":75,"deletions":31,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -41,6 +41,7 @@\n import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.OptimisticException;\n \n /**\n@@ -230,7 +231,7 @@ private void updateCaches() {\n         // if we were in largeTransaction mode, then we have recorded\n         // the classes of updated/deleted objects and these now need to be\n         // evicted\n-        if (_ctx.isLargeTransaction()) {\n+        if (_ctx.isTrackChangesByType()) {\n             evictTypes(_ctx.getDeletedTypes());\n             evictTypes(_ctx.getUpdatedTypes());\n         }\n@@ -379,6 +380,9 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             return false;\n         if (!_ctx.getPopulateDataCache())\n             return true;\n+        // Do not load changes into cache if the instance has been flushed\n+        if (sm.isFlushed())\n+            return true;\n \n         // make sure that we're not trying to cache an old version\n         cache.writeLock();\n@@ -409,6 +413,8 @@ public Collection loadAll(Collection sms, PCState state, int load,\n             return super.loadAll(sms, state, load, fetch, edata);\n \n         Map unloaded = null;\n+        List smList = null;\n+        Map caches = new HashMap();\n         OpenJPAStateManager sm;\n         DataCache cache;\n         DataCachePCData data;\n@@ -422,29 +428,58 @@ public Collection loadAll(Collection sms, PCState state, int load,\n                 continue;\n             }\n \n-            if (sm.getManagedInstance() == null) {\n-                data = cache.get(sm.getObjectId());\n-                if (data != null) {\n-                    //### the 'data.type' access here probably needs\n-                    //### to be addressed for bug 511\n-                    sm.initialize(data.getType(), state);\n-                    data.load(sm, fetch, edata);\n-                } else\n-                    unloaded = addUnloaded(sm, null, unloaded);\n-            } else if (load != FORCE_LOAD_NONE\n+            if (sm.getManagedInstance() == null\n+                || load != FORCE_LOAD_NONE\n                 || sm.getPCState() == PCState.HOLLOW) {\n-                data = cache.get(sm.getObjectId());\n-                if (data != null) {\n-                    // load unloaded fields\n-                    fields = sm.getUnloaded(fetch);\n-                    data.load(sm, fields, fetch, edata);\n-                    if (fields.length() > 0)\n-                        unloaded = addUnloaded(sm, fields, unloaded);\n-                } else\n-                    unloaded = addUnloaded(sm, null, unloaded);\n+                smList = (List) caches.get(cache);\n+                if (smList == null) {\n+                    smList = new ArrayList();\n+                    caches.put(cache, smList);\n+                }\n+                smList.add(sm);\n             } else if (!cache.contains(sm.getObjectId()))\n                 unloaded = addUnloaded(sm, null, unloaded);\n         }\n+        \n+        for (Iterator itr = caches.keySet().iterator(); itr.hasNext();) {\n+            cache = (DataCache) itr.next();\n+            smList = (List) caches.get(cache);\n+            List oidList = new ArrayList(smList.size());\n+\n+            for (itr=smList.iterator();itr.hasNext();) {\n+                sm = (OpenJPAStateManager) itr.next();\n+                oidList.add((OpenJPAId) sm.getObjectId());\n+            }\n+            \n+            Map dataMap = cache.getAll(oidList);\n+\n+            for (itr=smList.iterator();itr.hasNext();) {\n+                sm = (OpenJPAStateManager) itr.next();\n+                data = (DataCachePCData) dataMap.get(\n+                        (OpenJPAId) sm.getObjectId());\n+\n+                if (sm.getManagedInstance() == null) {\n+                    if (data != null) {\n+                        //### the 'data.type' access here probably needs\n+                        //### to be addressed for bug 511\n+                        sm.initialize(data.getType(), state);\n+                        data.load(sm, fetch, edata);\n+                    } else\n+                        unloaded = addUnloaded(sm, null, unloaded);\n+                } else if (load != FORCE_LOAD_NONE\n+                        || sm.getPCState() == PCState.HOLLOW) {\n+                    data = cache.get(sm.getObjectId());\n+                    if (data != null) {\n+                        // load unloaded fields\n+                        fields = sm.getUnloaded(fetch);\n+                        data.load(sm, fields, fetch, edata);\n+                        if (fields.length() > 0)\n+                            unloaded = addUnloaded(sm, fields, unloaded);\n+                    } else\n+                        unloaded = addUnloaded(sm, null, unloaded);\n+                }\n+            }\n+        }\n \n         if (unloaded == null)\n             return Collections.EMPTY_LIST;\n@@ -513,13 +548,13 @@ public Collection flush(Collection states) {\n             for (Iterator iter = exceps.iterator(); iter.hasNext(); ) {\n                 Exception e = (Exception) iter.next();\n                 if (e instanceof OptimisticException)\n-                    evictOptimisticLockFailure((OptimisticException) e);\n+                    notifyOptimisticLockFailure((OptimisticException) e);\n             }\n             return exceps;\n         }\n \n         // if large transaction mode don't record individual changes\n-        if (_ctx.isLargeTransaction())\n+        if (_ctx.isTrackChangesByType())\n             return exceps;\n \n         OpenJPAStateManager sm;\n@@ -552,22 +587,25 @@ else if (sm.getPCState() == PCState.PDIRTY) {\n     }\n \n     /**\n-     * Evict from the cache the OID (if available) that resulted in an\n-     * optimistic lock exception iff the version information in the cache \n-     * matches the version information in the state manager for the failed\n-     * instance. This means that we will evict data from the cache for records \n-     * that should have successfully committed according to the data cache but \n+     * Fire local staleness detection events from the cache the OID (if\n+     * available) that resulted in an optimistic lock exception iff the\n+     * version information in the cache matches the version information\n+     * in the state manager for the failed instance. This means that we\n+     * will evict data from the cache for records that should have\n+     * successfully committed according to the data cache but\n      * did not. The only predictable reason that could cause this behavior\n      * is a concurrent out-of-band modification to the database that was not \n      * communicated to the cache. This logic makes OpenJPA's data cache \n      * somewhat tolerant of such behavior, in that the cache will be cleaned \n      * up as failures occur.\n      */\n-    private void evictOptimisticLockFailure(OptimisticException e) {\n-        Object o = ((OptimisticException) e).getFailedObject();\n+    private void notifyOptimisticLockFailure(OptimisticException e) {\n+        Object o = e.getFailedObject();\n         OpenJPAStateManager sm = _ctx.getStateManager(o);\n         if (sm == null)\n             return;\n+        Object oid = sm.getId();\n+        boolean remove;\n \n         // this logic could be more efficient -- we could aggregate\n         // all the cache->oid changes, and then use DataCache.removeAll() \n@@ -579,11 +617,10 @@ private void evictOptimisticLockFailure(OptimisticException e) {\n \n         cache.writeLock();\n         try {\n-            DataCachePCData data = cache.get(sm.getId());\n+            DataCachePCData data = cache.get(oid);\n             if (data == null)\n                 return;\n \n-            boolean remove;\n             switch (compareVersion(sm, sm.getVersion(), data.getVersion())) {\n                 case StoreManager.VERSION_LATER:\n                 case StoreManager.VERSION_SAME:\n@@ -614,10 +651,17 @@ private void evictOptimisticLockFailure(OptimisticException e) {\n                     break;\n             }\n             if (remove)\n+                // remove directly instead of via the RemoteCommitListener\n+                // since we have a write lock here already, so this is more\n+                // efficient than read-locking and then write-locking later.\n                 cache.remove(sm.getId());\n         } finally {\n             cache.writeUnlock();\n         }\n+\n+        // fire off a remote commit stalenesss detection event.\n+        _ctx.getConfiguration().getRemoteCommitEventManager()\n+            .fireLocalStaleNotification(oid);\n     }\n \n     public StoreQuery newQuery(String language) {"},{"sha":"8db30d3a95514238157f751d250be97eb8cc8d3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,8 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n@@ -333,4 +335,14 @@ public void close() {\n             throw translate(re);\n \t\t}\n \t}\n+\n+    public Map getAll(List keys) {\n+        if (_cache == null)\n+            return null;\n+        try {\n+            return _cache.getAll(keys);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"271c3c1059657d09f95705cf1f675ef96018a0f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -109,7 +109,7 @@ private List checkCache(QueryKey qk) {\n         if (qk == null)\n             return null;\n         FetchConfiguration fetch = getContext().getFetchConfiguration();\n-        if (!fetch.getQueryCache())\n+        if (!fetch.getQueryCacheEnabled())\n             return null;\n         if (fetch.getReadLockLevel() > LockLevels.LOCK_NONE)\n             return null;"},{"sha":"43f962ebaf33b09171be6fc083da7b4e5d32df49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -181,7 +181,8 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n                 case JavaTypes.COLLECTION:\n                 case JavaTypes.MAP:\n                 case JavaTypes.OBJECT:\n-                    if (!ImplHelper.isManagedType(types[i]))\n+                    if (!ImplHelper.isManagedType(\n+                        q.getStoreContext().getConfiguration(), types[i]))\n                         return null;\n                     break;\n             }"},{"sha":"16a8b37fce92b06419718ff39d431be7c74d8de6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.openjpa.ee;\n+\n+import javax.transaction.SystemException;\n+\n+/*\n+ * AbstractManagedRuntime.java\n+ *\n+ * Created on August 2, 2007, 2:38 PM\n+ *\n+ */\n+public abstract class AbstractManagedRuntime implements ManagedRuntime {\n+    \n+    /**\n+     * Returns a transaction key that can be used to associate transactions\n+     * and Brokers.\n+     * The default implementation returns the Transaction associated \n+     * with the current thread's transaction.\n+     * @return the transaction key\n+     */\n+    public Object getTransactionKey() throws Exception, SystemException {\n+        return getTransactionManager().getTransaction();\n+    }\n+\n+}"},{"sha":"c9e210e503ff65680ef41ded0c80a3e945d4a207","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":259,"deletions":218,"changes":477,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -1,218 +1,259 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.ee;\r\n-\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import javax.transaction.TransactionManager;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configurable;\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.InvalidStateException;\r\n-\r\n-/**\r\n- * Implementation of the {@link ManagedRuntime} interface that searches\r\n- * through a set of known JNDI locations and method invocations to locate the\r\n- * appropriate mechanism for obtaining a TransactionManager.\r\n- *  Built in support is provided for the following Application Servers:\r\n- * <ul>\r\n- * <li>Bluestone</li>\r\n- * <li>HP Application Server</li>\r\n- * <li>JBoss</li>\r\n- * <li>JRun</li>\r\n- * <li>OpenEJB</li>\r\n- * <li>Oracle Application Server</li>\r\n- * <li>Orion</li>\r\n- * <li>SunONE</li>\r\n- * <li>Weblogic</li>\r\n- * <li>Websphere</li>\r\n- * </ul>\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- */\r\n-public class AutomaticManagedRuntime\r\n-    implements ManagedRuntime, Configurable {\r\n-\r\n-    private static final String [] JNDI_LOCS = new String []{\r\n-        \"javax.transaction.TransactionManager\", // weblogic\r\n-        \"java:/TransactionManager\", // jboss & jrun\r\n-        \"java:/DefaultDomain/TransactionManager\", // jrun too\r\n-        \"java:comp/pm/TransactionManager\", // orion & oracle\r\n-        \"java:comp/TransactionManager\", // generic\r\n-        \"java:pm/TransactionManager\", // borland\r\n-    };\r\n-    private static final String [] METHODS = new String[]{\r\n-        \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\r\n-        \"com.bluestone.jta.SaTransactionManagerFactory.SaGetTransactionManager\",\r\n-        \"org.openejb.OpenEJB.getTransactionManager\",\r\n-        \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\r\n-        \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\r\n-            + \"getTransactionManagerImpl\", // borland\r\n-    };\r\n-    private static final WLSManagedRuntime WLS;\r\n-    private static final SunOneManagedRuntime SUNONE;\r\n-    private static final WASManagedRuntime WAS;\r\n-\r\n-    private static Localizer _loc = Localizer.forPackage\r\n-        (AutomaticManagedRuntime.class);\r\n-\r\n-    static {\r\n-        ManagedRuntime mr = null;\r\n-        try {\r\n-            mr = new WLSManagedRuntime();\r\n-        } catch (Throwable t) {\r\n-        }\r\n-        WLS = (WLSManagedRuntime) mr;\r\n-\r\n-        mr = null;\r\n-        try {\r\n-            mr = new SunOneManagedRuntime();\r\n-        } catch (Throwable t) {\r\n-        }\r\n-        SUNONE = (SunOneManagedRuntime) mr;\r\n-\r\n-        mr = null;\r\n-        try {\r\n-            mr = new WASManagedRuntime();\r\n-        }\r\n-        catch(Throwable t) {\r\n-        }\r\n-        WAS= (WASManagedRuntime) mr;\r\n-    }\r\n-\r\n-    private Configuration _conf = null;\r\n-    private ManagedRuntime _runtime = null;\r\n-\r\n-    public TransactionManager getTransactionManager()\r\n-        throws Exception {\r\n-        if (_runtime != null)\r\n-            return _runtime.getTransactionManager();\r\n-\r\n-        List errors = new LinkedList();\r\n-        TransactionManager tm = null;\r\n-\r\n-        if (WLS != null) {\r\n-            try {\r\n-                tm = WLS.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = WLS;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        if (WAS != null) {\r\n-            try {\r\n-                WAS.setConfiguration(_conf);\r\n-                WAS.startConfiguration();\r\n-                WAS.endConfiguration();\r\n-                tm = WAS.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = WAS;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        // try to find a jndi runtime\r\n-        JNDIManagedRuntime jmr = new JNDIManagedRuntime();\r\n-        for (int i = 0; i < JNDI_LOCS.length; i++) {\r\n-            jmr.setTransactionManagerName(JNDI_LOCS[i]);\r\n-            try {\r\n-                tm = jmr.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = jmr;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        // look for a method runtime\r\n-        InvocationManagedRuntime imr = new InvocationManagedRuntime();\r\n-        for (int i = 0; i < METHODS.length; i++) {\r\n-            imr.setConfiguration(_conf);\r\n-            imr.setTransactionManagerMethod(METHODS[i]);\r\n-            try {\r\n-                tm = imr.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = imr;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        if (SUNONE != null) {\r\n-            try {\r\n-                tm = SUNONE.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = SUNONE;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        Throwable[] t = (Throwable []) errors.toArray(\r\n-            new Throwable [errors.size()]);\r\n-        throw new InvalidStateException(_loc.get(\"tm-not-found\")).\r\n-            setFatal(true).setNestedThrowables(t);\r\n-    }\r\n-\r\n-    public void setConfiguration(Configuration conf) {\r\n-        _conf = conf;\r\n-    }\r\n-\r\n-    public void startConfiguration() {\r\n-    }\r\n-\r\n-    public void endConfiguration() {\r\n-    }\r\n-\r\n-    public void setRollbackOnly(Throwable cause)\r\n-        throws Exception {\r\n-        // check to see if the runtime is cached\r\n-        if (_runtime == null)\r\n-            getTransactionManager();\r\n-\r\n-        if (_runtime != null)\r\n-            _runtime.setRollbackOnly(cause);\r\n-    }\r\n-\r\n-    public Throwable getRollbackCause()\r\n-        throws Exception {\r\n-        // check to see if the runtime is cached\r\n-        if (_runtime == null)\r\n-            getTransactionManager();\r\n-\r\n-        if (_runtime != null)\r\n-            return _runtime.getRollbackCause();\r\n-\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.apache.openjpa.lib.conf.Configurable;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InvalidStateException;\n+\n+/**\n+ * Implementation of the {@link ManagedRuntime} interface that searches\n+ * through a set of known JNDI locations and method invocations to locate the\n+ * appropriate mechanism for obtaining a TransactionManager.\n+ *  Built in support is provided for the following Application Servers:\n+ * <ul>\n+ * <li>Bluestone</li>\n+ * <li>HP Application Server</li>\n+ * <li>JBoss</li>\n+ * <li>JRun</li>\n+ * <li>OpenEJB</li>\n+ * <li>Oracle Application Server</li>\n+ * <li>Orion</li>\n+ * <li>SunONE</li>\n+ * <li>Weblogic</li>\n+ * <li>Websphere</li>\n+ * </ul>\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class AutomaticManagedRuntime extends AbstractManagedRuntime\n+    implements ManagedRuntime, Configurable {\n+\n+    private static final String [] JNDI_LOCS = new String []{\n+        \"javax.transaction.TransactionManager\", // weblogic\n+        \"java:/TransactionManager\", // jboss & jrun\n+        \"java:/DefaultDomain/TransactionManager\", // jrun too\n+        \"java:comp/pm/TransactionManager\", // orion & oracle\n+        \"java:comp/TransactionManager\", // generic\n+        \"java:pm/TransactionManager\", // borland\n+    };\n+    private static final String [] METHODS = new String[]{\n+        \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\n+        \"com.bluestone.jta.SaTransactionManagerFactory.SaGetTransactionManager\",\n+        \"org.openejb.OpenEJB.getTransactionManager\",\n+        \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\n+        \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\n+            + \"getTransactionManagerImpl\", // borland\n+    };\n+\n+    private static final ManagedRuntime REGISTRY;\n+    private static final WLSManagedRuntime WLS;\n+    private static final SunOneManagedRuntime SUNONE;\n+    private static final WASManagedRuntime WAS;\n+\n+    private static Localizer _loc = Localizer.forPackage\n+        (AutomaticManagedRuntime.class);\n+\n+    static {\n+        ManagedRuntime mr = null;\n+\n+        mr = null;\n+        try {\n+            mr = (ManagedRuntime) Class.\n+                forName(\"org.apache.openjpa.ee.RegistryManagedRuntime\").\n+                    newInstance();\n+        } catch (Throwable t) {\n+            // might be JTA version lower than 1.1, which doesn't have \n+            // TransactionSynchronizationRegistry\n+        }\n+        REGISTRY = mr;\n+\n+        mr = null;\n+        try {\n+            mr = new WLSManagedRuntime();\n+        } catch (Throwable t) {\n+        }\n+        WLS = (WLSManagedRuntime) mr;\n+\n+        mr = null;\n+        try {\n+            mr = new SunOneManagedRuntime();\n+        } catch (Throwable t) {\n+        }\n+        SUNONE = (SunOneManagedRuntime) mr;\n+\n+        mr = null;\n+        try {\n+            mr = new WASManagedRuntime();\n+        }\n+        catch (Throwable t) {\n+        }\n+        WAS= (WASManagedRuntime) mr;\n+    }\n+\n+    private Configuration _conf = null;\n+    private ManagedRuntime _runtime = null;\n+\n+    public TransactionManager getTransactionManager()\n+        throws Exception {\n+        if (_runtime != null)\n+            return _runtime.getTransactionManager();\n+\n+        List errors = new LinkedList();\n+        TransactionManager tm = null;\n+\n+        // first try the registry, which is the official way to obtain\n+        // transaction synchronication in JTA 1.1\n+        if (REGISTRY != null) {\n+            try {\n+                tm = REGISTRY.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = REGISTRY;\n+                return tm;\n+            }\n+        }\n+\n+        if (WLS != null) {\n+            try {\n+                tm = WLS.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = WLS;\n+                return tm;\n+            }\n+        }\n+\n+        if (WAS != null) {\n+            try {\n+                WAS.setConfiguration(_conf);\n+                WAS.startConfiguration();\n+                WAS.endConfiguration();\n+                tm = WAS.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = WAS;\n+                return tm;\n+            }\n+        }\n+\n+        // try to find a jndi runtime\n+        JNDIManagedRuntime jmr = new JNDIManagedRuntime();\n+        for (int i = 0; i < JNDI_LOCS.length; i++) {\n+            jmr.setTransactionManagerName(JNDI_LOCS[i]);\n+            try {\n+                tm = jmr.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = jmr;\n+                return tm;\n+            }\n+        }\n+\n+        // look for a method runtime\n+        InvocationManagedRuntime imr = new InvocationManagedRuntime();\n+        for (int i = 0; i < METHODS.length; i++) {\n+            imr.setConfiguration(_conf);\n+            imr.setTransactionManagerMethod(METHODS[i]);\n+            try {\n+                tm = imr.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = imr;\n+                return tm;\n+            }\n+        }\n+\n+        if (SUNONE != null) {\n+            try {\n+                tm = SUNONE.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = SUNONE;\n+                return tm;\n+            }\n+        }\n+\n+        Throwable[] t = (Throwable []) errors.toArray(\n+            new Throwable [errors.size()]);\n+        throw new InvalidStateException(_loc.get(\"tm-not-found\")).\n+            setFatal(true).setNestedThrowables(t);\n+    }\n+\n+    public void setConfiguration(Configuration conf) {\n+        _conf = conf;\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+\n+    public void endConfiguration() {\n+    }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // check to see if the runtime is cached\n+        if (_runtime == null)\n+            getTransactionManager();\n+\n+        if (_runtime != null)\n+            _runtime.setRollbackOnly(cause);\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // check to see if the runtime is cached\n+        if (_runtime == null)\n+            getTransactionManager();\n+\n+        if (_runtime != null)\n+            return _runtime.getRollbackCause();\n+\n+        return null;\n+    }\n+    \n+    public Object getTransactionKey() throws Exception, SystemException {\n+        if(_runtime == null) \n+            getTransactionManager();\n+        \n+        if(_runtime != null )\n+            return _runtime.getTransactionKey();\n+        \n+        return null;\n+    }\n+}"},{"sha":"9324439ef3bb54b3084446ce8afda67db5997209","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -34,7 +34,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public class InvocationManagedRuntime\n+public class InvocationManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime, Configurable {\n \n     private String _methodName = null;"},{"sha":"39159fbfd217b1c7ca52ba501c169c036872500d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,7 +28,7 @@\n  *\n  * @author Abe White\n  */\n-public class JNDIManagedRuntime\n+public class JNDIManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime {\n \n     private String _tmLoc = \"java:/TransactionManager\";"},{"sha":"f9cfb582c16ce48b02864b7e82e15c83ca023032","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.ee;\n \n+import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n /**\n@@ -56,4 +57,13 @@ public void setRollbackOnly(Throwable cause)\n      */\n     public Throwable getRollbackCause()\n         throws Exception;\n+\n+    /**\n+     * Returns a transaction key that can be used to associate transactions\n+     * and Brokers.\n+     * @return the transaction key\n+     */\n+    public Object getTransactionKey()\n+        throws Exception, SystemException;\n+    \n }"},{"sha":"b5b47dd8b19ccd5d1356442700ece66b694fbc5c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","status":"added","additions":192,"deletions":0,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.InvalidTransactionException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+import javax.transaction.TransactionManager;\n+import javax.transaction.TransactionSynchronizationRegistry;\n+import javax.transaction.xa.XAResource;\n+\n+/**\n+ * Implementation of the {@link ManagedRuntime} interface that uses \n+ * the {@link TransactionSynchronizationRegistry} interface (new in JTA 1.1)\n+ * to create a {@link TransactionManager} facade for controlling transactions.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @since 1.0.0\n+ */\n+public class RegistryManagedRuntime\n+    implements ManagedRuntime {\n+\n+    private String _registryName =\n+        \"java:comp/TransactionSynchronizationRegistry\";\n+    private TransactionManagerRegistryFacade _tm = null;\n+\n+    /**\n+     * Return the cached TransactionManager instance.\n+     */\n+    public TransactionManager getTransactionManager() throws Exception {\n+        if (_tm == null) {\n+            Context ctx = new InitialContext();\n+            try {\n+                _tm = new TransactionManagerRegistryFacade\n+                    ((TransactionSynchronizationRegistry) ctx.\n+                        lookup(_registryName));\n+            } finally {\n+                ctx.close();\n+            }\n+        }\n+        return _tm;\n+    }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        getTransactionManager().getTransaction().setRollbackOnly();\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        return null;\n+    }\n+\n+    public void setRegistryName(String registryName) {\n+        _registryName = registryName;\n+    }\n+\n+    public String getRegistryName() {\n+        return _registryName;\n+    }\n+\n+    public Object getTransactionKey() throws Exception, SystemException {\n+        return _tm.getTransactionKey();\n+    }\n+\n+    /** \n+     *  A {@link TransactionManager} and {@link Transaction} facade\n+     *  that delegates the appropriate methods to the internally-held\n+     *  {@link TransactionSynchronizationRegistry}. Since the\n+     *  registry is not able to start or end transactions, all transaction\n+     *  control methods will just throw a {@link SystemException}.\n+     *  \n+     *  @author  Marc Prud'hommeaux\n+     */\n+    public static class TransactionManagerRegistryFacade\n+        implements TransactionManager, Transaction {\n+        private final TransactionSynchronizationRegistry _registry;\n+\n+        public TransactionManagerRegistryFacade\n+            (TransactionSynchronizationRegistry registry) {\n+            _registry = registry;\n+        }\n+\n+\n+        public Transaction getTransaction()\n+            throws SystemException {\n+            return TransactionManagerRegistryFacade.this;\n+        }\n+\n+\n+        public void registerSynchronization(Synchronization sync)\n+            throws RollbackException, IllegalStateException, SystemException {\n+            _registry.registerInterposedSynchronization(sync);\n+        }\n+\n+\n+        public void setRollbackOnly()\n+            throws IllegalStateException, SystemException {\n+            _registry.setRollbackOnly();\n+        }\n+\n+\n+        public int getStatus()\n+            throws SystemException {\n+            return _registry.getTransactionStatus();\n+        }\n+\n+        public Object getTransactionKey() {\n+            return _registry.getTransactionKey();\n+        }\n+\n+        //////////////////////////////\n+        // Unsupported methods follow\n+        //////////////////////////////\n+\n+        public void begin()\n+            throws NotSupportedException, SystemException {\n+            throw new NotSupportedException();\n+        }\n+\n+\n+        public void commit()\n+            throws RollbackException, HeuristicMixedException, SystemException,\n+                HeuristicRollbackException, SecurityException,\n+                IllegalStateException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public void resume(Transaction tobj)\n+            throws InvalidTransactionException, IllegalStateException,\n+                SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public void rollback()\n+            throws IllegalStateException, SecurityException, SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public void setTransactionTimeout(int seconds)\n+            throws SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public Transaction suspend()\n+            throws SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public boolean delistResource(XAResource xaRes, int flag)\n+            throws IllegalStateException, SystemException {\n+            throw new SystemException();\n+        }\n+\n+\n+        public boolean enlistResource(XAResource xaRes)\n+            throws RollbackException, IllegalStateException, SystemException {\n+            throw new SystemException();\n+        }\n+    }\n+}\n+"},{"sha":"c4c3a4eca5480ace14ddb605739f531a803ac927","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,7 +26,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public class SunOneManagedRuntime\n+public class SunOneManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime {\n \n     private Method _switchMeth;"},{"sha":"81a63b3dafeb55eeac82972a5f38081a75474b50","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -59,11 +59,12 @@\n  * WASManagedRuntime provides the wrapper classes needed to interact with the\n  * WAS proprietary interface and the OpenJPA kernel.\n  *\n- * @author Michael Dick, Kevin Sutter\n+ * @author Kevin Sutter\n  */\n-public class WASManagedRuntime implements ManagedRuntime, Configurable {\n+public class WASManagedRuntime extends AbstractManagedRuntime\n+        implements ManagedRuntime, Configurable {\n \n-    private static Localizer _loc =\n+    private static final Localizer _loc =\n         Localizer.forPackage(WASManagedRuntime.class);\n \n     private Object _extendedTransaction = null;\n@@ -98,7 +99,7 @@\n         javax.transaction.Transaction {\n \n         public int getStatus() throws SystemException {\n-            int rval = Status.STATUS_UNKNOWN;\n+            int rval;\n             try {\n                 if (getGlobalId() != null) {\n                     rval = Status.STATUS_ACTIVE;\n@@ -150,14 +151,12 @@ public void registerSynchronization(Synchronization arg0)\n          *         occurs. byte[] id if a global transaction is active.\n          */\n         private byte[] getGlobalId() {\n-            byte[] rval = null;\n             try {\n-                rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\n+                return (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\n             } catch (Exception e) {\n                 throw new InvalidStateException(_loc\n                     .get(\"was-reflection-exception\")).setCause(e);\n             }\n-            return rval;\n         }\n \n         /**"},{"sha":"e3faf06ad7b9f44908245a9410f71bddc0ba44c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,7 +28,7 @@\n  *\n  * @author Arunabh Hazarika, Patrick Linskey\n  */\n-public class WLSManagedRuntime\n+public class WLSManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime {\n \n     private final Method _txHelperMeth;"},{"sha":"6e437883a245ec3fee291dfca1923c9c1e7cde0b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -24,6 +24,7 @@\n import java.io.PrintWriter;\n import java.io.Writer;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -44,6 +45,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -438,8 +440,8 @@ public boolean run() {\n             // indent the entire code block one level to make it\n             // a propertly indented innder class\n             _code = code.getTab() + Strings.replace(_code,\n-                System.getProperty(\"line.separator\"),\n-                System.getProperty(\"line.separator\") + code.getTab());\n+                J2DoPrivHelper.getLineSeparator(),\n+                J2DoPrivHelper.getLineSeparator() + code.getTab());\n         }\n \n         return true;\n@@ -1364,7 +1366,8 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         ApplicationIdTool tool;\n         Class cls;\n         ClassMetaData meta;\n-        BCClassLoader bc = new BCClassLoader(new Project());\n+        BCClassLoader bc = (BCClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(new Project()));\n         for (Iterator itr = classes.iterator(); itr.hasNext();) {\n             cls = (Class) itr.next();\n             log.info(_loc.get(\"appid-running\", cls));\n@@ -1417,9 +1420,11 @@ private static Class loadClass(Class context, String name,\n             name = Strings.getPackageName(context) + \".\" + name;\n \n         // first try with regular class loader\n-        ClassLoader loader = context.getClassLoader();\n+        ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getClassLoaderAction(context)); \n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction()); \n         try {\n             return Class.forName(name, false, loader);\n         } catch (Throwable t) {"},{"sha":"f3be4a540ad4c9739e7306f99cd18ee6afe215e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/AttributeTranslator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Instances of this interface can convert a positional index for a\r\n+ * {@link FieldMetaData} that uses property access into the underlying\r\n+ * field name. Instances of {@link DynamicPersistenceCapable} for types\r\n+ * that use property access will implement this interface.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface AttributeTranslator {\r\n+    public String pcAttributeIndexToFieldName(int i);\r\n+}\r"},{"sha":"981937aa634ab3e581be80d2067968ba47b0eac5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","status":"modified","additions":101,"deletions":13,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -24,8 +24,10 @@\n import java.util.Iterator;\n import java.util.Set;\n import java.util.TreeSet;\n+import java.util.List;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n@@ -307,27 +309,47 @@ private void appendFieldCode(FieldMetaData fmd, CodeFormat decs,\n             propertyName = propertyName.substring(1);\n         String fieldType = Strings.getClassName(fmd.getDeclaredType());\n \n+        String keyType = null;\n+        String elementType = null;\n+        String paramType = \"\";\n+        if (useGenericCollections()) {\n+            if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION) {\n+                Class elmCls = fmd.getElement().getDeclaredType();\n+                elementType = Strings.getClassName(elmCls);\n+                paramType = decs.getParametrizedType(\n+                    new String[] {elementType});\n+            } else if (fmd.getDeclaredTypeCode() == JavaTypes.MAP) {\n+                Class keyCls = fmd.getKey().getDeclaredType();\n+                Class elmCls = fmd.getElement().getDeclaredType();\n+                keyType = Strings.getClassName(keyCls);\n+                elementType = Strings.getClassName(elmCls);\n+                paramType = decs.getParametrizedType(\n+                    new String[] {keyType, elementType});\n+            }\n+        }\n+\n         String fieldValue = getInitialValue(fmd);\n         if (fieldValue == null) {\n             if (\"Set\".equals(fieldType))\n-                fieldValue = \"new HashSet\" + decs.getParens();\n+                fieldValue = \"new HashSet\" + paramType + decs.getParens();\n             else if (\"TreeSet\".equals(fieldType))\n-                fieldValue = \"new TreeSet\" + decs.getParens();\n+                fieldValue = \"new TreeSet\" + paramType + decs.getParens();\n             else if (\"Collection\".equals(fieldType))\n-                fieldValue = \"new ArrayList\" + decs.getParens();\n+                fieldValue = \"new ArrayList\" + paramType + decs.getParens();\n             else if (\"Map\".equals(fieldType))\n-                fieldValue = \"new HashMap\" + decs.getParens();\n+                fieldValue = \"new HashMap\" + paramType + decs.getParens();\n             else if (\"TreeMap\".equals(fieldType))\n-                fieldValue = \"new TreeMap\" + decs.getParens();\n-            else if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION\n-                || fmd.getDeclaredTypeCode() == JavaTypes.MAP)\n-                fieldValue = \"new \" + fieldType + decs.getParens();\n+                fieldValue = \"new TreeMap\" + paramType + decs.getParens();\n+            else if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION ||\n+                fmd.getDeclaredTypeCode() == JavaTypes.MAP)\n+                fieldValue = \"new \" + fieldType + paramType + decs.getParens();\n             else\n                 fieldValue = \"\";\n         }\n         if (fieldValue.length() > 0)\n             fieldValue = \" = \" + fieldValue;\n \n+        boolean fieldAccess = !usePropertyBasedAccess();\n         String custom = getDeclaration(fmd);\n         if (decs.length() > 0)\n             decs.endl();\n@@ -339,12 +361,18 @@ else if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION\n             templ.setParameter(\"capFieldName\", capFieldName);\n             templ.setParameter(\"propertyName\", propertyName);\n             templ.setParameter(\"fieldType\", fieldType);\n+            templ.setParameter(\"keyType\", keyType);\n+            templ.setParameter(\"elementType\", elementType);\n             templ.setParameter(\"fieldValue\", fieldValue);\n             decs.append(templ.toString());\n         } else {\n+            if (fieldAccess)\n+                writeAnnotations(decs, getFieldAnnotations(fmd), 1);\n             decs.tab().append(\"private \").append(fieldType).\n-                append(\" \").append(fieldName).append(fieldValue).\n-                append(\";\");\n+                append(paramType).append(\" \").append(fieldName).\n+                append(fieldValue).append(\";\");\n+            if (fieldAccess)\n+                decs.endl();\n         }\n \n         custom = getFieldCode(fmd);\n@@ -357,11 +385,16 @@ else if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION\n             templ.setParameter(\"capFieldName\", capFieldName);\n             templ.setParameter(\"propertyName\", propertyName);\n             templ.setParameter(\"fieldType\", fieldType);\n+            templ.setParameter(\"keyType\", keyType);\n+            templ.setParameter(\"elementType\", elementType);\n             templ.setParameter(\"fieldValue\", fieldValue);\n             code.append(templ.toString());\n         } else {\n             // getter\n-            code.tab().append(\"public \").append(fieldType).append(\" \");\n+            if (!fieldAccess)\n+                writeAnnotations(code, getFieldAnnotations(fmd), 1);\n+            code.tab().append(\"public \").append(fieldType).append(paramType).\n+                 append(\" \");\n             if (\"boolean\".equalsIgnoreCase(fieldType))\n                 code.append(\"is\");\n             else\n@@ -374,8 +407,8 @@ else if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION\n \n             // setter\n             code.tab().append(\"public void set\").append(capFieldName);\n-            code.openParen(true).append(fieldType).append(\" \").\n-                append(propertyName).closeParen();\n+            code.openParen(true).append(fieldType).append(paramType).\n+                append(\" \").append(propertyName).closeParen();\n             code.openBrace(2).endl();\n             code.tab(2);\n             if (propertyName.equals(fieldName))\n@@ -403,6 +436,7 @@ private String getClassCode(String packageDec, String imports,\n             append(\" * \").append(getClass().getName()).endl().\n             append(\" */\").endl();\n \n+        writeAnnotations(code, getClassAnnotations(), 0);\n         code.append(\"public class \").append(className);\n         if (extendsName.length() > 0)\n             code.extendsDec(1).append(\" \").append(extendsName);\n@@ -426,6 +460,21 @@ private String getClassCode(String packageDec, String imports,\n         return code.toString();\n     }\n \n+    /**\n+     * Appends the given list of annotations to code buffer.\n+     */\n+    private void writeAnnotations (CodeFormat code, List ann,\n+        int tabLevel) {\n+        if (ann == null || ann.size() == 0)\n+            return;\n+        for (Iterator i = ann.iterator(); i.hasNext();) {\n+            if (tabLevel > 0)\n+                code.tab(tabLevel);\n+            String s = (String) i.next();\n+            code.append(s).endl();\n+        }\n+    }\n+\n     /**\n      * Append the opening code-level brace to the code; this can be\n      * overridden to add code to the top of the class.\n@@ -503,6 +552,9 @@ protected String getInitialValue(FieldMetaData field) {\n      * <li>${capFieldName}: The capitalized field name.</li>\n      * <li>${propertyName}: The field name without leading '_', if any.</li>\n      * <li>${fieldType}: The field's type name.</li>\n+     * <li>${keyType}: Key type name for maps, null otherwise.</li>\n+     * <li>${elementType}: Element type name for collections, null otherwise.\n+     * </li>\n      * <li>${fieldValue}: The field's initial value, in the form\n      * \" = &lt;value&gt;\", or empty string if none.</li>\n      * </ul> Returns null by default.\n@@ -521,6 +573,9 @@ protected String getDeclaration(FieldMetaData field) {\n      * <li>${capFieldName}: The capitalized field name.</li>\n      * <li>${propertyName}: The field name without leading '_', if any.</li>\n      * <li>${fieldType}: The field's type name.</li>\n+     * <li>${keyType}: Key type name for maps, null otherwise.</li>\n+     * <li>${elementType}: Element type name for collections, null otherwise.\n+     * </li>\n      * <li>${fieldValue}: The field's initial value, in the form\n      * \"= &lt;value&gt;\", or empty string if none.</li>\n      * </ul>\n@@ -529,4 +584,37 @@ protected String getFieldCode (FieldMetaData field)\n \t{\n \t\treturn null;\n \t}\n+\n+    /**\n+     * Whether to use property-based access on generated code.\n+     * Defaults to false (field-based).\n+     */    \n+    protected boolean usePropertyBasedAccess () {\n+        return false;\n+    }\n+\n+    /**\n+     * Return class-level annotations. Returns null by default.\n+     */\n+    protected List getClassAnnotations() {\n+        return null;\n+    }\n+\n+    /**\n+     * Return field-level annotations. Returns null by default.\n+     */\n+    protected List getFieldAnnotations(FieldMetaData field) {\n+        return null;\n+    }\n+\n+    /**\n+     * Whether to use generic collections on one-to-many and many-to-many\n+     * relations instead of untyped collections.\n+     *\n+     * Override in descendants to change default behavior.\n+     */\n+    protected boolean useGenericCollections() {\n+        return false;\n+    }\n+\n }"},{"sha":"ed413dcd29460a6923992b6cc315b9be15270f14","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPCHelper.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPCHelper.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPCHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPCHelper.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Helper methods for dynamically-redefined managed types.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class DynamicPCHelper {\r\n+    public static boolean isDetached(Object o) {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+}\r"},{"sha":"04516f04797c67347c12a9b0644c4d412f566cf1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicPersistenceCapable.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Instances that implement this marker interface are dynamically-generated\r\n+ * subtypes of managed types that were loaded before being enhanced.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface DynamicPersistenceCapable {\r\n+}\r"},{"sha":"a7a7a573abd258df4cf7791cdb2ffd6fa432fff1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,8 +19,10 @@\n package org.apache.openjpa.enhance;\n \n import java.lang.reflect.Constructor;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n import serp.bytecode.BCClass;\n@@ -94,8 +96,10 @@\n \n     // the project/classloader for the classes.\n     private final Project _project = new Project();\n-    private final BCClassLoader _loader = new BCClassLoader(_project,\n-        DynamicStorage.class.getClassLoader());\n+    private final BCClassLoader _loader = (BCClassLoader) AccessController\n+        .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project,\n+            (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                .getClassLoaderAction(DynamicStorage.class))));\n \n     /**\n      * Generate a generic {@link DynamicStorage} instance with the given"},{"sha":"1934f15390de20ac7b0d8f4ece8a99f3465dee02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedInstanceProvider.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Instances of this interface can provide an underlying instance.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface ManagedInstanceProvider {\r\n+    public Object getManagedInstance();\r\n+}\r"},{"sha":"648a6304258182ed3d77c85b53e009888e70d4ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -555,7 +555,7 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n                 addLoadIntermediate(code, i, objectCount, jumps2, inter);\n             jumps2.add(code.go2());\n \n-            // if (fetch.requiresFetch(fmds[i]))\n+            // if (fetch.requiresFetch(fmds[i])!=FetchConfiguration.FETCH_NONE)\n             setTarget(code.aload().setParam(1), jumps);\n             code.aload().setParam(0);\n             code.invokeinterface().setMethod(OpenJPAStateManager.class,\n@@ -564,9 +564,9 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n             code.invokevirtual().setMethod(ClassMetaData.class,\n                 \"getField\", FieldMetaData.class, new Class[]{int.class});\n             code.invokeinterface().setMethod (FetchConfiguration.class, \n-                \"requiresFetch\", boolean.class, \n-                new Class[]{FieldMetaData.class});\n-            jumps2.add(code.ifeq());\n+                \"requiresFetch\", int.class, new Class[]{FieldMetaData.class});\n+            code.constant().setValue(FetchConfiguration.FETCH_NONE);\n+            jumps2.add(code.ificmpeq());\n             addLoad(bc, code, fmds[i], objectCount, local, false);\n \n             jumps = jumps2;"},{"sha":"be891577c38b688e150acc77e487b5cc8834459d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":953,"deletions":252,"changes":1205,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -27,9 +27,12 @@\n import java.io.ObjectOutputStream;\n import java.io.ObjectStreamClass;\n import java.io.Serializable;\n+import java.io.ObjectStreamException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -50,10 +53,10 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.BytecodeWriter;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n-import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -75,6 +78,7 @@\n import org.apache.openjpa.util.StringId;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.bytecode.BCClass;\n import serp.bytecode.BCField;\n import serp.bytecode.BCMethod;\n@@ -90,7 +94,9 @@\n import serp.bytecode.MethodInstruction;\n import serp.bytecode.Project;\n import serp.bytecode.TableSwitchInstruction;\n+import serp.bytecode.ClassInstruction;\n import serp.util.Numbers;\n+import serp.util.Strings;\n \n /**\n  * Bytecode enhancer used to enhance persistent classes from metadata. The\n@@ -126,15 +132,20 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (PCEnhancer.class);\n+    private static final String REDEFINED_ATTRIBUTE\n+        = PCEnhancer.class.getName() + \"#redefined-type\";\n+    \n     private static final AuxiliaryEnhancer[] _auxEnhancers;\n     static {\n         Class[] classes = Services.getImplementorClasses(\n-            AuxiliaryEnhancer.class, \n-            AuxiliaryEnhancer.class.getClassLoader());\n+            AuxiliaryEnhancer.class,\n+            (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(AuxiliaryEnhancer.class)));\n         List auxEnhancers = new ArrayList(classes.length);\n         for (int i = 0; i < classes.length; i++) {\n             try {\n-                auxEnhancers.add(classes[i].newInstance());\n+                auxEnhancers.add(AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(classes[i])));\n \t\t    } catch (Throwable t) {\n                 // aux enhancer may rely on non-existant spec classes, etc\n \t\t    }\n@@ -143,30 +154,41 @@\n             (new AuxiliaryEnhancer[auxEnhancers.size()]);\n     }\n \n-    private final BCClass _pc;\n+    private BCClass _pc;\n+    private final BCClass _managedType;\n     private final MetaDataRepository _repos;\n     private final ClassMetaData _meta;\n     private final Log _log;\n     private Collection _oids = null;\n     private boolean _defCons = true;\n+    private boolean _redefine = false;\n+    private boolean _subclass = false;\n     private boolean _fail = false;\n+    private Set _violations = null;\n     private File _dir = null;\n     private BytecodeWriter _writer = null;\n-    private Map _backingFields = null;\n-    private Set _violations = null;\n+    private Map _backingFields = null; // map of set / get names => field names\n+    private Map _attrsToFields = null; // map of attr names => field names\n+    private Map _fieldsToAttrs = null; // map of field names => attr names\n+    private boolean _isAlreadyRedefined = false;\n+    private boolean _isAlreadySubclassed = false;\n+    private boolean _bcsConfigured = false;\n \n     /**\n      * Constructor. Supply configuration and type to enhance.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n-        this(conf, new Project().loadClass(type), (MetaDataRepository) null);\n+        this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(new Project(), type)),\n+            (MetaDataRepository) null);\n     }\n \n     /**\n      * Constructor. Supply configuration and type to enhance.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n-        this(conf, new Project().loadClass(type.getDescribedType()),\n+        this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(new Project(), type.getDescribedType())),\n             type.getRepository());\n     }\n \n@@ -181,38 +203,74 @@ public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n      * because the configuration might be an\n      * implementation-specific subclass whose metadata\n      * required more than just base metadata files\n+     * @deprecated use {@link #PCEnhancer(OpenJPAConfiguration, BCClass,\n+        MetaDataRepository, ClassLoader)} instead. \n      */\n     public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n         MetaDataRepository repos) {\n+        this(conf, type, repos, null);\n+    }\n+\n+    /**\n+     * Constructor. Supply configuration.\n+     *\n+     * @param type the bytecode representation fo the type to\n+     * enhance; this can be created from any stream or file\n+     * @param repos a metadata repository to use for metadata access,\n+     * or null to create a new reporitory; the repository\n+     * from the given configuration isn't used by default\n+     * because the configuration might be an\n+     * implementation-specific subclass whose metadata\n+     * required more than just base metadata files\n+     * @param loader the environment classloader to use for loading\n+     * classes and resources.\n+     */\n+    public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n+        MetaDataRepository repos, ClassLoader loader) {\n+        _managedType = type;\n         _pc = type;\n+\n         _log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\n \n         if (repos == null) {\n             _repos = conf.newMetaDataRepositoryInstance();\n             _repos.setSourceMode(MetaDataRepository.MODE_META);\n         } else\n             _repos = repos;\n-        _meta = _repos.getMetaData(type.getType(), null, false);\n+        _meta = _repos.getMetaData(type.getType(), loader, false);\n+    }\n+\n+    static String toPCSubclassName(Class cls) {\n+        return Strings.getPackageName(PCEnhancer.class) + \".\"\n+            + cls.getName().replace('.', '$') + \"$pcsubclass\";\n     }\n \n     /**\n      * Constructor. Supply configuration, type, and metadata.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n         ClassMetaData meta) {\n-        _pc = type;\n-        _log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\n-        _repos = meta.getRepository();\n-        _meta = meta;\n+        this(conf, type, meta.getRepository());\n     }\n \n     /**\n-     * Return the bytecode representation of the class being manipulated.\n+     * Return the bytecode representation of the persistence-capable class\n+     * being manipulated.\n      */\n-    public BCClass getBytecode() {\n+    public BCClass getPCBytecode() {\n         return _pc;\n     }\n \n+    /**\n+     * Return the bytecode representation of the managed class being\n+     * manipulated. This is usually the same as {@link #getPCBytecode},\n+     * except when running the enhancer to redefine and subclass\n+     * existing persistent types.\n+     */\n+    public BCClass getManagedTypeBytecode() {\n+        return _managedType;\n+    }\n+\n     /**\n      * Return the metadata for the class being manipulated, or null if not\n      * a persistent type.\n@@ -241,6 +299,68 @@ public void setAddDefaultConstructor(boolean addDefaultConstructor) {\n         _defCons = addDefaultConstructor;\n     }\n \n+    /**\n+     * Whether the enhancer should mutate its arguments, or just run validation\n+     * and optional subclassing logic on them. Usually used in conjunction with\n+     * <code>setCreateSubclass(true)</code>.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean getRedefine() {\n+        return _redefine;\n+    }\n+\n+    /**\n+     * Whether the enhancer should mutate its arguments, or just run validation\n+     * and optional subclassing logic on them. Usually used in conjunction with\n+     * <code>setCreateSubclass(true)</code>.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setRedefine(boolean redefine) {\n+        _redefine = redefine;\n+    }\n+\n+    /**\n+     * Whether the type that this instance is enhancing has already been\n+     * redefined.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean isAlreadyRedefined() {\n+        return _isAlreadyRedefined;\n+    }\n+\n+    /**\n+     * Whether the type that this instance is enhancing has already been\n+     * subclassed in this instance's environment classloader.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean isAlreadySubclassed() {\n+        return _isAlreadySubclassed;\n+    }\n+\n+    /**\n+     * Whether the enhancer should make its arguments persistence-capable,\n+     * or generate a persistence-capable subclass.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean getCreateSubclass() {\n+        return _subclass;\n+    }\n+\n+    /**\n+     * Whether the enhancer should make its arguments persistence-capable,\n+     * or generate a persistence-capable subclass.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setCreateSubclass(boolean subclass) {\n+        _subclass = subclass;\n+    }\n+\n     /**\n      * Whether to fail if the persistent type uses property access and\n      * bytecode analysis shows that it may be violating OpenJPA's property\n@@ -298,33 +418,37 @@ public void setBytecodeWriter(BytecodeWriter writer) {\n      */\n     public int run() {\n         if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"enhance-start\", _pc.getType()));\n+            _log.trace(_loc.get(\"enhance-start\", _managedType.getType()));\n \n         try {\n             // if managed interface, skip\n-            if (_pc.isInterface())\n+            if (_managedType.isInterface())\n                 return ENHANCE_INTERFACE;\n \n             // check if already enhanced\n-            Class[] interfaces = _pc.getDeclaredInterfaceTypes();\n+            Class[] interfaces = _managedType.getDeclaredInterfaceTypes();\n             for (int i = 0; i < interfaces.length; i++) {\n                 if (interfaces[i].getName().equals(PCTYPE.getName())) {\n                     if (_log.isTraceEnabled())\n-                        _log.trace(_loc.get(\"pc-type\", _pc.getType()));\n+                        _log.trace(_loc.get(\"pc-type\", _managedType.getType()));\n                     return ENHANCE_NONE;\n                 }\n             }\n \n+            configureBCs();\n+\n             // validate properties before replacing field access so that\n             // we build up a record of backing fields, etc\n             if (_meta != null\n-                && _meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY)\n+                && _meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY) {\n                 validateProperties();\n+                if (getCreateSubclass())\n+                    addAttributeTranslation();\n+            }\n             replaceAndValidateFieldAccess();\n             processViolations();\n \n             if (_meta != null) {\n-                int ret = ENHANCE_PC;\n                 enhanceClass();\n                 addFields();\n                 addStaticInitializer();\n@@ -334,16 +458,48 @@ public int run() {\n                 addSerializationCode();\n                 addCloningCode();\n                 runAuxiliaryEnhancers();\n-                return ret;\n+                return ENHANCE_PC;\n             }\n \n             if (_log.isWarnEnabled())\n-                _log.warn(_loc.get(\"pers-aware\", _pc.getType()));\n+                _log.warn(_loc.get(\"pers-aware\", _managedType.getType()));\n             return ENHANCE_AWARE;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n-            throw new GeneralException(e);\n+            throw new GeneralException(_loc.get(\"enhance-error\",\n+                _managedType.getType().getName(), e.getMessage()), e);\n+        }\n+    }\n+\n+    private void configureBCs() {\n+        if (!_bcsConfigured) {\n+            if (getRedefine()) {\n+                if (_managedType.getAttribute(REDEFINED_ATTRIBUTE) == null)\n+                    _managedType.addAttribute(REDEFINED_ATTRIBUTE);\n+                else\n+                    _isAlreadyRedefined = true;\n+            }\n+\n+            if (getCreateSubclass()) {\n+                PCSubclassValidator val = new PCSubclassValidator(\n+                    _meta, _managedType, _log, _fail);\n+                val.assertCanSubclass();\n+\n+                _pc = _managedType.getProject().loadClass(\n+                    toPCSubclassName(_managedType.getType()));\n+                if (_pc.getSuperclassBC() != _managedType) {\n+                    _pc.setSuperclass(_managedType);\n+                    _pc.setAbstract(_managedType.isAbstract());\n+                    _pc.declareInterface(DynamicPersistenceCapable.class);\n+                } else {\n+                    _isAlreadySubclassed = true;\n+                }\n+            } else {\n+                _pc = _managedType;\n+            }\n+\n+            _bcsConfigured = true;\n         }\n     }\n \n@@ -352,6 +508,8 @@ public int run() {\n      */\n     public void record()\n         throws IOException {\n+        if (_managedType != _pc && getRedefine())\n+            record(_managedType);\n         record(_pc);\n         if (_oids != null)\n             for (Iterator itr = _oids.iterator(); itr.hasNext();)\n@@ -379,9 +537,13 @@ else if (_dir == null)\n      * property's backing field.\n      */\n     private void validateProperties() {\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds;\n+        if (getCreateSubclass())\n+            fmds = _meta.getFields();\n+        else\n+            fmds = _meta.getDeclaredFields();\n         Method meth;\n-        BCMethod getter, setter = null;\n+        BCMethod getter, setter;\n         BCField returned, assigned = null;\n         for (int i = 0; i < fmds.length; i++) {\n             if (!(fmds[i].getBackingMember() instanceof Method)) {\n@@ -392,30 +554,30 @@ private void validateProperties() {\n             }\n \n             meth = (Method) fmds[i].getBackingMember();\n-            getter = _pc.getDeclaredMethod(meth.getName(),\n+            // ##### this will fail if we override and don't call super.\n+            BCClass declaringType = _managedType.getProject()\n+                .loadClass(fmds[i].getDeclaringType());\n+            getter = declaringType.getDeclaredMethod(meth.getName(),\n                 meth.getParameterTypes());\n             if (getter == null) {\n                 addViolation(\"property-no-getter\", new Object[]{ fmds[i] },\n                     true);\n                 continue;\n             }\n             returned = getReturnedField(getter);\n-            if (returned != null) {\n-                if (_backingFields == null)\n-                    _backingFields = new HashMap();\n-                _backingFields.put(getter.getName(), returned.getName());\n-            }\n+            if (returned != null)\n+                registerBackingFieldInfo(fmds[i], getter, returned);\n \n-            setter = _pc.getDeclaredMethod(getSetterName(fmds[i]),\n+            setter = declaringType.getDeclaredMethod(getSetterName(fmds[i]),\n                 new Class[]{ fmds[i].getDeclaredType() });\n             if (setter == null) {\n                 if (returned == null) {\n                     addViolation(\"property-no-setter\",\n                         new Object[]{ fmds[i] }, true);\n                     continue;\n-                } else {\n+                } else if (!getRedefine()) {\n                     // create synthetic setter\n-                    setter = _pc.declareMethod(getSetterName(fmds[i]),\n+                    setter = _managedType.declareMethod(getSetterName(fmds[i]),\n                         void.class, new Class[]{ fmds[i].getDeclaredType() });\n                     setter.makePrivate();\n                     Code code = setter.getCode(true);\n@@ -432,11 +594,8 @@ private void validateProperties() {\n                 assigned = getAssignedField(setter);\n \n             if (assigned != null) {\n-                if (_backingFields == null)\n-                    _backingFields = new HashMap();\n-\n                 if (setter != null)\n-                    _backingFields.put(setter.getName(), assigned.getName());\n+                    registerBackingFieldInfo(fmds[i], setter, assigned);\n \n                 if (assigned != returned)\n                     addViolation(\"property-setter-getter-mismatch\", new Object[]\n@@ -446,6 +605,52 @@ private void validateProperties() {\n         }\n     }\n \n+    private void registerBackingFieldInfo(FieldMetaData fmd, BCMethod method,\n+        BCField field) {\n+        if (_backingFields == null)\n+            _backingFields = new HashMap();\n+        _backingFields.put(method.getName(), field.getName());\n+\n+        if (_attrsToFields == null)\n+            _attrsToFields = new HashMap();\n+        _attrsToFields.put(fmd.getName(), field.getName());\n+\n+        if (_fieldsToAttrs == null)\n+            _fieldsToAttrs = new HashMap();\n+        _fieldsToAttrs.put(field.getName(), fmd.getName());\n+    }\n+\n+    private void addAttributeTranslation() {\n+        _pc.declareInterface(AttributeTranslator.class);\n+        BCMethod method = _pc.declareMethod(PRE + \"AttributeIndexToFieldName\",\n+            String.class, new Class[] { int.class });\n+        method.makePublic();\n+        Code code = method.getCode(true);\n+\n+        FieldMetaData[] fmds = _meta.getFields();\n+\n+        // switch (val)\n+        code.iload().setParam(0);\n+        TableSwitchInstruction tabins = code.tableswitch();\n+        tabins.setLow(0);\n+        tabins.setHigh(fmds.length - 1);\n+\n+        // case i:\n+        //     return <_attrsToFields.get(fmds[i].getName())>\n+        for (int i = 0; i < fmds.length; i++) {\n+            tabins.addTarget(code.constant().setValue(\n+                _attrsToFields.get(fmds[i].getName())));\n+            code.areturn();\n+        }\n+\n+        // default: throw new IllegalArgumentException ()\n+        tabins.setDefaultTarget(throwException\n+            (code, IllegalArgumentException.class));\n+\n+        code.calculateMaxLocals();\n+        code.calculateMaxStack();\n+    }\n+\n     /**\n      * Return the name of the setter method for the given field.\n      */\n@@ -458,16 +663,18 @@ private static String getSetterName(FieldMetaData fmd) {\n      * Package-protected and static for testing.\n      */\n     static BCField getReturnedField(BCMethod meth) {\n-        return findField(meth, new Code().xreturn().setType\n-            (meth.getReturnType()), false);\n+        return findField(meth, ((Code) AccessController.doPrivileged(\n+            J2DoPrivHelper.newCodeAction())).xreturn()\n+            .setType(meth.getReturnType()), false);\n     }\n \n     /**\n      * Return the field assigned in the given method, or null if none.\n      * Package-protected and static for testing.\n      */\n     static BCField getAssignedField(BCMethod meth) {\n-        return findField(meth, new Code().putfield(), true);\n+        return findField(meth, ((Code) AccessController.doPrivileged(\n+            J2DoPrivHelper.newCodeAction())).putfield(), true);\n     }\n \n     /**\n@@ -477,8 +684,8 @@ static BCField getAssignedField(BCMethod meth) {\n      */\n     private static BCField findField(BCMethod meth, Instruction template,\n         boolean findAccessed) {\n-        // ignore any static methods. OpenJPA only currently supports non-static\n-        // setters and getters\n+        // ignore any static methods. OpenJPA only currently supports\n+        // non-static setters and getters\n         if (meth.isStatic())\n             return null;\n \n@@ -488,43 +695,57 @@ private static BCField findField(BCMethod meth, Instruction template,\n         code.beforeFirst();\n \n         BCField field = null, cur;\n-        Instruction templateIns, prevIns, twoPrevIns;\n+        Instruction templateIns, prevIns, earlierIns;\n+        int backupCount = 3;\n         while (code.searchForward(template)) {\n             templateIns = code.previous();\n             if (!code.hasPrevious())\n                 return null;\n             prevIns = code.previous();\n+\n+            if (prevIns instanceof ClassInstruction\n+                && code.hasPrevious()) {\n+                prevIns = code.previous();\n+                backupCount++;\n+            }\n+\n             if (!code.hasPrevious())\n                 return null;\n-            twoPrevIns = code.previous();\n+            earlierIns = code.previous();\n \n             // if the opcode two before the template was an aload_0, check\n             // against the middle instruction based on what type of find\n             // we're doing\n-            if (!(twoPrevIns instanceof LoadInstruction)\n-                || !((LoadInstruction) twoPrevIns).isThis())\n+            if (!(earlierIns instanceof LoadInstruction)\n+                || !((LoadInstruction) earlierIns).isThis())\n                 return null;\n \n             // if the middle instruction was a getfield, then it's the\n             // field that's being accessed\n-            if (!findAccessed && prevIns instanceof GetFieldInstruction)\n-                cur = ((FieldInstruction) prevIns).getField();\n+            if (!findAccessed && prevIns instanceof GetFieldInstruction) {\n+                final FieldInstruction fPrevIns = (FieldInstruction) prevIns;\n+                cur = (BCField) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getFieldInstructionFieldAction(fPrevIns));\n                 // if the middle instruction was an xload_1, then the\n                 // matched instruction is the field that's being set.\n-            else if (findAccessed && prevIns instanceof LoadInstruction\n-                && ((LoadInstruction) prevIns).getParam() == 0)\n-                cur = ((FieldInstruction) templateIns).getField();\n-            else\n+            } else if (findAccessed && prevIns instanceof LoadInstruction\n+                && ((LoadInstruction) prevIns).getParam() == 0) {\n+                final FieldInstruction fTemplateIns =\n+                    (FieldInstruction) templateIns;\n+                cur = (BCField) AccessController.doPrivileged(J2DoPrivHelper\n+                    .getFieldInstructionFieldAction(fTemplateIns));\n+            } else\n                 return null;\n \n             if (field != null && cur != field)\n                 return null;\n             field = cur;\n \n             // ready for next search iteration\n-            code.next();\n-            code.next();\n-            code.next();\n+            while (backupCount > 0) {\n+                code.next();\n+                backupCount--;\n+            }\n         }\n         return field;\n     }\n@@ -546,7 +767,7 @@ private void processViolations() {\n         if (_violations == null)\n             return;\n \n-        String sep = System.getProperty(\"line.separator\");\n+        String sep = J2DoPrivHelper.getLineSeparator();\n         StringBuffer buf = new StringBuffer();\n         for (Iterator itr = _violations.iterator(); itr.hasNext();) {\n             buf.append(itr.next());\n@@ -566,16 +787,17 @@ private void processViolations() {\n      * pcGet/pcSet method. Note that this includes access to fields\n      * owned by PersistenceCapable classes other than this one.\n      */\n-    private void replaceAndValidateFieldAccess() {\n+    private void replaceAndValidateFieldAccess() throws NoSuchMethodException {\n         // create template putfield/getfield instructions to search for\n-        Code template = new Code();\n+        Code template = (Code) AccessController.doPrivileged(\n+            J2DoPrivHelper.newCodeAction());\n         Instruction put = template.putfield();\n         Instruction get = template.getfield();\n         Instruction stat = template.invokestatic();\n \n         // look through all methods; this is done before any methods are added\n         // so we don't need to worry about excluding synthetic methods.\n-        BCMethod[] methods = _pc.getDeclaredMethods();\n+        BCMethod[] methods = _managedType.getDeclaredMethods();\n         Code code;\n         for (int i = 0; i < methods.length; i++) {\n             code = methods[i].getCode(false);\n@@ -601,7 +823,7 @@ private void replaceAndValidateFieldAccess() {\n      * @param stat template invokestatic instruction to replace with\n      */\n     private void replaceAndValidateFieldAccess(Code code, Instruction ins,\n-        boolean get, Instruction stat) {\n+        boolean get, Instruction stat) throws NoSuchMethodException {\n         code.beforeFirst();\n \n         FieldInstruction fi;\n@@ -613,16 +835,15 @@ private void replaceAndValidateFieldAccess(Code code, Instruction ins,\n             fi = (FieldInstruction) code.previous();\n             name = fi.getFieldName();\n             typeName = fi.getFieldTypeName();\n-            owner = getPersistenceCapableOwner(name,\n-                fi.getFieldDeclarerType());\n+            owner = getPersistenceCapableOwner(name, fi.getFieldDeclarerType());\n \n             if (owner != null\n                 && owner.getAccessType() == ClassMetaData.ACCESS_PROPERTY) {\n                 // if we're directly accessing a field in another class\n                 // hierarchy that uses property access, something is wrong\n                 if (owner != _meta && owner.getDeclaredField(name) != null &&\n-                    _meta != null && !owner.getDescribedType().\n-                    isAssignableFrom(_meta.getDescribedType()))\n+                    _meta != null && !owner.getDescribedType()\n+                        .isAssignableFrom(_meta.getDescribedType()))\n                     throw new UserException(_loc.get(\"property-field-access\",\n                         new Object[]{ _meta, owner, name,\n                             code.getMethod().getName() }));\n@@ -632,34 +853,102 @@ private void replaceAndValidateFieldAccess(Code code, Instruction ins,\n                 if (isBackingFieldOfAnotherProperty(name, code))\n                     addViolation(\"property-field-access\", new Object[]{ _meta,\n                         owner, name, code.getMethod().getName() }, false);\n-\n-                code.next();\n-                continue;\n             }\n \n-            // not persistent field?\n-            if (owner == null || owner.getDeclaredField(name) == null) {\n+            if (owner == null ||\n+                owner.getDeclaredField(fromBackingFieldName(name)) == null) {\n+                // not persistent field?\n                 code.next();\n                 continue;\n-            }\n-\n-            // replace the instruction with a call to the generated access\n-            // method\n-            mi = (MethodInstruction) code.set(stat);\n-\n-            // invoke the proper access method, whether getter or setter\n-            String prefix = (get) ? PRE + \"Get\" : PRE + \"Set\";\n-            methodName = prefix + name;\n-            if (get) {\n-                mi.setMethod(getType(owner).getName(),\n-                    methodName, typeName, new String[]\n-                    { getType(owner).getName() });\n+            } else if (!getRedefine() && !getCreateSubclass()\n+                && owner.getAccessType() == ClassMetaData.ACCESS_FIELD) {\n+                // replace the instruction with a call to the generated access\n+                // method\n+                mi = (MethodInstruction) code.set(stat);\n+\n+                // invoke the proper access method, whether getter or setter\n+                String prefix = (get) ? PRE + \"Get\" : PRE + \"Set\";\n+                methodName = prefix + name;\n+                if (get) {\n+                    mi.setMethod(getType(owner).getName(),\n+                        methodName, typeName, new String[]\n+                        { getType(owner).getName() });\n+                } else {\n+                    mi.setMethod(getType(owner).getName(),\n+                        methodName, \"void\", new String[]\n+                        { getType(owner).getName(), typeName });\n+                }\n+                code.next();\n+            } else if (getRedefine()) {\n+                name = fromBackingFieldName(name);\n+                if (get) {\n+                    addNotifyAccess(code, owner.getField(name));\n+                    code.next();\n+                } else {\n+                    // insert the set operations after the field mutation, but\n+                    // first load the old value for use in the\n+                    // StateManager.settingXXX method.\n+                    loadManagedInstance(code, false);\n+                    final FieldInstruction fFi = fi;\n+                    code.getfield().setField(\n+                        (BCField) AccessController.doPrivileged(J2DoPrivHelper\n+                            .getFieldInstructionFieldAction(fFi)));\n+                    int val = code.getNextLocalsIndex();\n+                    code.xstore().setLocal(val).setType(fi.getFieldType());\n+\n+                    // move past the putfield\n+                    code.next();\n+                    addNotifyMutation(code, owner.getField(name), val, -1);\n+                }\n             } else {\n-                mi.setMethod(getType(owner).getName(),\n-                    methodName, \"void\", new String[]\n-                    { getType(owner).getName(), typeName });\n+                code.next();\n             }\n+            code.calculateMaxLocals();\n+            code.calculateMaxStack();\n+        }\n+    }\n+\n+    private void addNotifyAccess(Code code, FieldMetaData fmd) {\n+        // PCHelper.accessingField(this, <absolute-index>);\n+        code.aload().setThis();\n+        code.constant().setValue(fmd.getIndex());\n+        code.invokestatic().setMethod(RedefinitionHelper.class,\n+            \"accessingField\", void.class,\n+            new Class[] { Object.class, int.class });\n+    }\n+\n+    /**\n+     * This must be called after setting the value in the object.\n+     * \n+     * @param code\n+     * @param val the position in the local variable table where the\n+     * old value is stored\n+     * @param param the parameter position containing the new value, or\n+     * -1 if the new value is unavailable and should therefore be looked\n+     * up.\n+     * @throws NoSuchMethodException\n+     */\n+    private void addNotifyMutation(Code code, FieldMetaData fmd, int val,\n+        int param)\n+        throws NoSuchMethodException {\n+        // PCHelper.settingField(this, <absolute-index>, old, new);\n+        code.aload().setThis();\n+        code.constant().setValue(fmd.getIndex());\n+        Class type = fmd.getDeclaredType();\n+        // we only have special signatures for primitives and Strings\n+        if (!type.isPrimitive() && type != String.class)\n+            type = Object.class;\n+        code.xload().setLocal(val).setType(type);\n+        if (param == -1) {\n+            loadManagedInstance(code, false);\n+            addGetManagedValueCode(code, fmd);\n+        } else {\n+            code.xload().setParam(param).setType(type);\n         }\n+        code.invokestatic().setMethod(RedefinitionHelper.class, \"settingField\",\n+            void.class, new Class[] {\n+                Object.class, int.class, type, type\n+        });\n     }\n \n     /**\n@@ -687,22 +976,15 @@ private ClassMetaData getPersistenceCapableOwner(String fieldName,\n         Class owner) {\n         // find the actual ancestor class that declares the field, then\n         // check if the class is persistent, and if the field is managed\n-        for (; !owner.getName().equals(Object.class.getName());\n-            owner = owner.getSuperclass()) {\n-            try {\n-                owner.getDeclaredField(fieldName);\n-                break;\n-            } catch (Exception e) {\n-            }\n-        }\n-        if (owner.getName().equals(Object.class.getName()))\n+        Field f = Reflection.findField(owner, fieldName, false);\n+        if (f == null)\n             return null;\n \n         // managed interface\n         if (_meta != null && _meta.getDescribedType().isInterface())\n             return _meta;\n \n-        return _repos.getMetaData(owner, null, false);\n+        return _repos.getMetaData(f.getDeclaringClass(), null, false);\n     }\n \n     /**\n@@ -723,7 +1005,7 @@ private void addPCMethods()\n         addProvideFieldsMethods();\n         addCopyFieldsMethod();\n \n-        if (_meta.getPCSuperclass() == null) {\n+        if (_meta.getPCSuperclass() == null || getCreateSubclass()) {\n             addStockMethods();\n             addGetVersionMethod();\n             addReplaceStateManagerMethod();\n@@ -737,8 +1019,9 @@ private void addPCMethods()\n         // a subclass with an app id hierarchy that matches the\n         // persistent class inheritance hierarchy\n         if (_meta.getIdentityType() == ClassMetaData.ID_APPLICATION\n-            && (_meta.getPCSuperclass() == null || _meta.getObjectIdType()\n-            != _meta.getPCSuperclassMetaData().getObjectIdType())) {\n+            && (_meta.getPCSuperclass() == null || getCreateSubclass() ||\n+                _meta.getObjectIdType() !=\n+                    _meta.getPCSuperclassMetaData().getObjectIdType())) {\n             addCopyKeyFieldsToObjectIdMethod(true);\n             addCopyKeyFieldsToObjectIdMethod(false);\n             addCopyKeyFieldsFromObjectIdMethod(true);\n@@ -762,10 +1045,10 @@ private void addClearFieldsMethod()\n         Code code = method.getCode(true);\n \n         // super.pcClearFields ()\n-        if (_meta.getPCSuperclass() != null) {\n+        if (_meta.getPCSuperclass() != null && !getCreateSubclass()) {\n             code.aload().setThis();\n             code.invokespecial().setMethod(getType(_meta.\n-                getPCSuperclassMetaData()), PRE + \"ClearFields\", void.class, \n+                getPCSuperclassMetaData()), PRE + \"ClearFields\", void.class,\n                 null);\n         }\n \n@@ -887,8 +1170,11 @@ private void addManagedFieldCountMethod() {\n         // return <fields> + <superclass>.pcGetManagedFieldCount ()\n         code.constant().setValue(_meta.getDeclaredFields().length);\n         if (_meta.getPCSuperclass() != null) {\n-            code.invokestatic().setMethod(getType(_meta.\n-                getPCSuperclassMetaData()).getName(),\n+            Class superClass = getType(_meta.getPCSuperclassMetaData());\n+            String superName = getCreateSubclass() ?\n+                PCEnhancer.toPCSubclassName(superClass) :\n+                superClass.getName();\n+            code.invokestatic().setMethod(superName,\n                 PRE + \"GetManagedFieldCount\", int.class.getName(), null);\n             code.iadd();\n         }\n@@ -911,7 +1197,8 @@ private void addProvideFieldsMethods()\n         int relLocal = beginSwitchMethod(PRE + \"ProvideField\", code);\n \n         // if no fields in this inst, just throw exception\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds = getCreateSubclass() ? _meta.getFields()\n+            : _meta.getDeclaredFields();\n         if (fmds.length == 0)\n             throwException(code, IllegalArgumentException.class);\n         else {\n@@ -961,7 +1248,8 @@ private void addReplaceFieldsMethods()\n         int relLocal = beginSwitchMethod(PRE + \"ReplaceField\", code);\n \n         // if no fields in this inst, just throw exception\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds = getCreateSubclass() ? _meta.getFields()\n+            : _meta.getDeclaredFields();\n         if (fmds.length == 0)\n             throwException(code, IllegalArgumentException.class);\n         else {\n@@ -1009,15 +1297,16 @@ private void addCopyFieldsMethod()\n         // public void pcCopyField (Object pc, int field)\n         BCMethod method = _pc.declareMethod(PRE + \"CopyField\",\n             void.class.getName(),\n-            new String[]{ _pc.getName(), int.class.getName() });\n+            new String[]{ _managedType.getName(), int.class.getName() });\n         method.makeProtected();\n         Code code = method.getCode(true);\n \n         // adds everything through the switch ()\n         int relLocal = beginSwitchMethod(PRE + \"CopyField\", code);\n \n         // if no fields in this inst, just throw exception\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds = getCreateSubclass() ? _meta.getFields()\n+            : _meta.getDeclaredFields();\n         if (fmds.length == 0)\n             throwException(code, IllegalArgumentException.class);\n         else {\n@@ -1032,7 +1321,7 @@ private void addCopyFieldsMethod()\n                 // or set<field> (other.get<field>);\n                 tabins.addTarget(loadManagedInstance(code, false));\n                 code.aload().setParam(0);\n-                addGetManagedValueCode(code, fmds[i]);\n+                addGetManagedValueCode(code, fmds[i], false);\n                 addSetManagedValueCode(code, fmds[i]);\n \n                 // break;\n@@ -1063,8 +1352,14 @@ private int beginSwitchMethod(String name, Code code) {\n         boolean copy = (PRE + \"CopyField\").equals(name);\n         int fieldNumber = (copy) ? 1 : 0;\n \n-        // int rel = fieldNumber - pcInheritedFieldCount\n         int relLocal = code.getNextLocalsIndex();\n+        if (getCreateSubclass()) {\n+            code.iload().setParam(fieldNumber);\n+            code.istore().setLocal(relLocal);\n+            return relLocal;\n+        }\n+\n+        // int rel = fieldNumber - pcInheritedFieldCount\n         code.iload().setParam(fieldNumber);\n         code.getstatic().setField(INHERIT, int.class);\n         code.isub();\n@@ -1118,16 +1413,41 @@ private void addMultipleFieldsMethodVersion(BCMethod single) {\n         if (copy) {\n             fieldNumbers = 1;\n \n-            // XXX other = (XXX) pc;\n-            code.aload().setParam(0);\n-            code.checkcast().setType(_pc);\n-            inst = code.getNextLocalsIndex();\n-            code.astore().setLocal(inst);\n+            if (getCreateSubclass()) {\n+                // get the managed instance into the local variable table\n+                code.aload().setParam(0);\n+                code.invokestatic().setMethod(ImplHelper.class,\n+                    \"getManagedInstance\", Object.class,\n+                    new Class[] { Object.class });\n+                code.checkcast().setType(_managedType);\n+                inst = code.getNextLocalsIndex();\n+                code.astore().setLocal(inst);\n+\n+                // there might be a difference between the classes of 'this'\n+                // vs 'other' in this context; use the PC methods to get the SM\n+                code.aload().setParam(0);\n+                code.aload().setThis();\n+                code.getfield().setField(SM, SMTYPE);\n+                code.invokestatic().setMethod(ImplHelper.class,\n+                    \"toPersistenceCapable\", PersistenceCapable.class,\n+                    new Class[] { Object.class, Object.class });\n+                code.invokeinterface().setMethod(PersistenceCapable.class,\n+                    \"pcGetStateManager\", StateManager.class, null);\n+            } else {\n+                // XXX other = (XXX) pc;\n+                code.aload().setParam(0);\n+                code.checkcast().setType(_pc);\n+                inst = code.getNextLocalsIndex();\n+                code.astore().setLocal(inst);\n+\n+                // access the other's sm field directly\n+                code.aload().setLocal(inst);\n+                code.getfield().setField(SM, SMTYPE);\n+            }\n \n             // if (other.pcStateManager != pcStateManager)\n             //\tthrow new IllegalArgumentException\n-            code.aload().setLocal(inst);\n-            code.getfield().setField(SM, SMTYPE);\n+\n             loadManagedInstance(code, false);\n             code.getfield().setField(SM, SMTYPE);\n             JumpInstruction ifins = code.ifacmpeq();\n@@ -1179,51 +1499,73 @@ private void addMultipleFieldsMethodVersion(BCMethod single) {\n      */\n     private void addStockMethods()\n         throws NoSuchMethodException {\n-        // pcGetGenericContext\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"get\" + CONTEXTNAME, (Class[]) null));\n-\n-        // pcFetchObjectId\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"fetchObjectId\", (Class[]) null));\n-\n-        // pcIsDeleted\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isDeleted\", (Class[]) null));\n-\n-        // pcIsDirty\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isDirty\", (Class[]) null));\n-\n-        // pcIsNew\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isNew\", (Class[]) null));\n-\n-        // pcIsPersistent\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isPersistent\", (Class[]) null));\n-\n-        // pcIsTransactional\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isTransactional\", (Class[]) null));\n-\n-        // pcSerializing\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"serializing\", (Class[]) null));\n-\n-        // pcDirty\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod(\"dirty\",\n-            new Class[]{ String.class }));\n-\n-        // pcGetStateManager\n-        BCMethod meth = _pc.declareMethod(PRE + \"GetStateManager\",\n-            StateManager.class, null);\n-        Code code = meth.getCode(true);\n-        loadManagedInstance(code, false);\n-        code.getfield().setField(SM, StateManager.class);\n-        code.areturn();\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n+        try {\n+            // pcGetGenericContext\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"get\" + CONTEXTNAME, (Class[]) null)), false);\n+    \n+            // pcFetchObjectId\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"fetchObjectId\", (Class[]) null)), false);\n+    \n+            // pcIsDeleted\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isDeleted\", (Class[]) null)), false);\n+    \n+            // pcIsDirty\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isDirty\", (Class[]) null)), true);\n+    \n+            // pcIsNew\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isNew\", (Class[]) null)), false);\n+    \n+            // pcIsPersistent\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isPersistent\", (Class[]) null)), false);\n+    \n+            // pcIsTransactional\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isTransactional\", (Class[]) null)), false);\n+    \n+            // pcSerializing\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"serializing\", (Class[]) null)), false);\n+    \n+            // pcDirty\n+            translateFromStateManagerMethod(\n+                (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"dirty\", new Class[]{ String.class })), false);\n+    \n+            // pcGetStateManager\n+            BCMethod meth = _pc.declareMethod(PRE + \"GetStateManager\",\n+                StateManager.class, null);\n+            Code code = meth.getCode(true);\n+            loadManagedInstance(code, false);\n+            code.getfield().setField(SM, StateManager.class);\n+            code.areturn();\n+            code.calculateMaxStack();\n+            code.calculateMaxLocals();\n+        } catch (PrivilegedActionException pae) {\n+             throw (NoSuchMethodException) pae.getException();\n+        }\n     }\n \n     /**\n@@ -1232,7 +1574,8 @@ private void addStockMethods()\n      * Given the StateManager method, then, this function translates it into\n      * the wrapper method that should be added to the bytecode.\n      */\n-    private void translateFromStateManagerMethod(Method m) {\n+    private void translateFromStateManagerMethod(Method m,\n+        boolean isDirtyCheckMethod) {\n         // form the name of the method by prepending 'pc' to the sm method\n         String name = PRE + StringUtils.capitalize(m.getName());\n         Class[] params = m.getParameterTypes();\n@@ -1252,9 +1595,22 @@ else if (!returnType.equals(void.class))\n             code.constant().setNull();\n         code.xreturn().setType(returnType);\n \n+        // if this is the dirty-check method and we're subclassing but not\n+        // redefining, hook into PCHelper to do the dirty check\n+        if (isDirtyCheckMethod && !getRedefine()) {\n+            // RedefinitionHelper.dirtyCheck(sm);\n+            ifins.setTarget(loadManagedInstance(code, false));\n+            code.getfield().setField(SM, SMTYPE);\n+            code.dup(); // for the return statement below\n+            code.invokestatic().setMethod(RedefinitionHelper.class, \n+                \"dirtyCheck\", void.class, new Class[] { SMTYPE });\n+        } else {\n+            ifins.setTarget(loadManagedInstance(code, false));\n+            code.getfield().setField(SM, SMTYPE);\n+        }\n+        \n         // return pcStateManager.<method> (<args>);\n-        ifins.setTarget(loadManagedInstance(code, false));\n-        code.getfield().setField(SM, SMTYPE);\n+        // managed instance loaded above in if-else block\n         for (int i = 0; i < params.length; i++)\n             code.xload().setParam(i);\n         code.invokeinterface().setMethod(m);\n@@ -1455,7 +1811,7 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n         }\n \n         // call superclass method\n-        if (_meta.getPCSuperclass() != null) {\n+        if (_meta.getPCSuperclass() != null && !getCreateSubclass()) {\n             loadManagedInstance(code, false);\n             for (int i = 0; i < args.length; i++)\n                 code.aload().setParam(i);\n@@ -1493,7 +1849,8 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n \n         // id.<field> = fs.fetch<type>Field (<index>); or...\n         // id.<field> = pc.<field>;\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds = getCreateSubclass() ? _meta.getFields()\n+            : _meta.getDeclaredFields();\n         Class type;\n         String name;\n         Field field;\n@@ -1779,7 +2136,7 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n         Code code = method.getCode(true);\n \n         // call superclass method\n-        if (_meta.getPCSuperclass() != null) {\n+        if (_meta.getPCSuperclass() != null && !getCreateSubclass()) {\n             loadManagedInstance(code, false);\n             for (int i = 0; i < args.length; i++)\n                 code.aload().setParam(i);\n@@ -1809,7 +2166,8 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n         // fs.store<type>Field (<index>, id.<field>); or...\n         // this.<field> = id.<field>\n         // or for single field identity: id.getId ()\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds = getCreateSubclass() ? _meta.getFields()\n+            : _meta.getDeclaredFields();\n         String name;\n         Class type;\n         Class unwrapped;\n@@ -1896,7 +2254,7 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n                         code.constant().setValue(name);\n                         code.constant().setValue(true);\n                         code.invokestatic().setMethod(Reflection.class,\n-                            \"findGetter\", Method.class, new Class[] { \n+                            \"findGetter\", Method.class, new Class[] {\n                             Class.class, String.class, boolean.class });\n                         code.invokestatic().setMethod\n                             (getReflectionGetterMethod(type, Method.class));\n@@ -2146,7 +2504,13 @@ else if (type.equals(String.class))\n         // use reflection to return the right method\n         String name = prefix + typeName + \"Field\";\n         Class[] params = (Class[]) plist.toArray(new Class[plist.size()]);\n-        return owner.getDeclaredMethod(name, params);\n+        \n+        try {\n+            return (Method) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodAction(owner, name, params));\n+        } catch (PrivilegedActionException pae) {\n+             throw (NoSuchMethodException) pae.getException();\n+        }\n     }\n \n     /**\n@@ -2162,8 +2526,9 @@ private Instruction throwException(Code code, Class type) {\n     }\n \n     /**\n-     * Adds the PersistenceCapable interface to the class being enhanced, and\n-     * adds a default constructor for use by OpenJPA if it is not already present.\n+     * Adds the PersistenceCapable interface to the class being\n+     * enhanced, and adds a default constructor for use by OpenJPA\n+     * if it is not already present.\n      */\n     private void enhanceClass() {\n         // make the class implement PersistenceCapable\n@@ -2177,10 +2542,9 @@ private void enhanceClass() {\n \n         // a default constructor is required\n         if (method == null) {\n-            Class type = _pc.getType();\n+            String name = _pc.getName();\n             if (!_defCons)\n-                throw new UserException(_loc.get(\"enhance-defaultconst\",\n-                    type));\n+                throw new UserException(_loc.get(\"enhance-defaultconst\", name));\n \n             method = _pc.addDefaultConstructor();\n             String access;\n@@ -2196,8 +2560,9 @@ private void enhanceClass() {\n                 method.makeProtected();\n                 access = \"protected\";\n             }\n-            if (!_meta.getDescribedType().isInterface() && _log.isWarnEnabled())\n-                _log.warn(_loc.get(\"enhance-adddefaultconst\", type, access));\n+            if (!(_meta.getDescribedType().isInterface() || getCreateSubclass())\n+                && _log.isWarnEnabled())\n+                _log.warn(_loc.get(\"enhance-adddefaultconst\", name, access));\n         }\n     }\n \n@@ -2221,7 +2586,7 @@ private void addFields() {\n         _pc.declareField(PRE + \"FieldFlags\", byte[].class).setStatic(true);\n         _pc.declareField(SUPER, Class.class).setStatic(true);\n \n-        if (_meta.getPCSuperclass() == null) {\n+        if (_meta.getPCSuperclass() == null || getCreateSubclass()) {\n             BCField field = _pc.declareField(SM, SMTYPE);\n             field.makeProtected();\n             field.setTransient(true);\n@@ -2236,11 +2601,16 @@ private void addFields() {\n     private void addStaticInitializer() {\n         Code code = getOrCreateClassInitCode(true);\n         if (_meta.getPCSuperclass() != null) {\n-            // pcInheritedFieldCount = <superClass>.pcGetManagedFieldCount()\n-            code.invokestatic().setMethod(getType(_meta.\n-                getPCSuperclassMetaData()).getName(), \n-                PRE + \"GetManagedFieldCount\", int.class.getName(), null);\n-            code.putstatic().setField(INHERIT, int.class);\n+            if (getCreateSubclass()) {\n+                code.constant().setValue(0);\n+                code.putstatic().setField(INHERIT, int.class);\n+            } else {\n+                // pcInheritedFieldCount = <superClass>.pcGetManagedFieldCount()\n+                code.invokestatic().setMethod(getType(_meta.\n+                    getPCSuperclassMetaData()).getName(),\n+                    PRE + \"GetManagedFieldCount\", int.class.getName(), null);\n+                code.putstatic().setField(INHERIT, int.class);\n+            }\n \n             // pcPCSuperclass = <superClass>;\n             code.classconstant().setClass(getType(_meta.\n@@ -2285,12 +2655,17 @@ private void addStaticInitializer() {\n         // PCRegistry.register (cls,\n         //\tpcFieldNames, pcFieldTypes, pcFieldFlags,\n         //  pcPCSuperclass, alias, new XXX ());\n-        code.classconstant().setClass(_pc);\n+        code.classconstant().setClass(_managedType);\n         code.getstatic().setField(PRE + \"FieldNames\", String[].class);\n         code.getstatic().setField(PRE + \"FieldTypes\", Class[].class);\n         code.getstatic().setField(PRE + \"FieldFlags\", byte[].class);\n         code.getstatic().setField(SUPER, Class.class);\n-        code.constant().setValue(_meta.getTypeAlias());\n+        \n+        if (_meta.isMapped())\n+            code.constant().setValue(_meta.getTypeAlias());\n+        else\n+            code.constant().setNull();\n+\n         if (_pc.isAbstract())\n             code.constant().setNull();\n         else {\n@@ -2342,6 +2717,13 @@ private void addSerializationCode() {\n             || !Serializable.class.isAssignableFrom(_meta.getDescribedType()))\n             return;\n \n+        if (getCreateSubclass()) {\n+            if (!Externalizable.class.isAssignableFrom(\n+                _meta.getDescribedType()))\n+                addSubclassSerializationCode();\n+            return;\n+        }\n+\n         // if not already present, add a serialVersionUID field; if the instance\n         // is detachable and uses detached state without a declared field,\n         // can't add a serial version UID because we'll be adding extra fields\n@@ -2355,7 +2737,10 @@ private void addSerializationCode() {\n             } catch (Throwable t) {\n                 // last-chance catch for bug #283 (which can happen\n                 // in a variety of ClassLoading environments)\n-                _log.warn(_loc.get(\"enhance-uid-access\", _meta), t);\n+                if (_log.isTraceEnabled())\n+                    _log.warn(_loc.get(\"enhance-uid-access\", _meta), t);\n+                else\n+                    _log.warn(_loc.get(\"enhance-uid-access\", _meta));\n             }\n \n             // if we couldn't access the serialVersionUID, we will have to\n@@ -2405,6 +2790,43 @@ private void addSerializationCode() {\n         modifyReadObjectMethod(read, full);\n     }\n \n+    private void addSubclassSerializationCode() {\n+        // for generated subclasses, serialization must write an instance of\n+        // the superclass instead of the subclass, so that the client VM can\n+        // deserialize successfully.\n+\n+        // private Object writeReplace() throws ObjectStreamException\n+        BCMethod method = _pc.declareMethod(\"writeReplace\", Object.class, null);\n+        method.getExceptions(true).addException(ObjectStreamException.class);\n+        Code code = method.getCode(true);\n+\n+        // Object o = new <managed-type>()\n+        code.anew().setType(_managedType); // for return\n+        code.dup(); // for post-<init> work\n+        code.dup(); // for <init>\n+        code.invokespecial().setMethod(_managedType.getType(), \"<init>\",\n+            void.class, null);\n+\n+        // copy all the fields.\n+        // ##### limiting to JPA @Transient limitations\n+        FieldMetaData[] fmds = _meta.getFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (fmds[i].isTransient())\n+                continue;\n+            // o.<field> = this.<field> (or reflective analog)\n+            code.dup(); // for putfield\n+            code.aload().setThis(); // for getfield\n+            getfield(code, _managedType, fmds[i].getName());\n+            putfield(code, _managedType, fmds[i].getName(),\n+                fmds[i].getDeclaredType());\n+        }\n+\n+        code.areturn().setType(Object.class);\n+\n+        code.calculateMaxLocals();\n+        code.calculateMaxStack();\n+    }\n+\n     /**\n      * Whether the class being enhanced should externalize to a detached\n      * instance rather than serialize.\n@@ -2440,7 +2862,8 @@ private void modifyWriteObjectMethod(BCMethod method, boolean full) {\n             code.vreturn();\n         }\n \n-        Instruction tmplate = new Code().vreturn();\n+        Instruction tmplate = ((Code) AccessController.doPrivileged(\n+            J2DoPrivHelper.newCodeAction())).vreturn();\n         JumpInstruction toret;\n         Instruction ret;\n         code.beforeFirst();\n@@ -2708,7 +3131,8 @@ private Code getOrCreateClassInitCode(boolean replaceLast) {\n         if (clinit != null) {\n             code = clinit.getCode(true);\n             if (replaceLast) {\n-                Code template = new Code();\n+                Code template = (Code) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newCodeAction());\n                 code.searchForward(template.vreturn());\n                 code.previous();\n                 code.set(template.nop());\n@@ -2736,38 +3160,47 @@ private Code getOrCreateClassInitCode(boolean replaceLast) {\n      * enhanced to correctly replace the <code>pcStateManager</code> \n      * instance fields of any clone created with their default values. \n      * Also, if this class is the base PC type and does not declared \n-     * a clone method, one will be added.\n+     * a clone method, one will be added. Also, if _pc is a synthetic\n+     * subclass, create the clone() method that clears the state manager\n+     * that may have been initialized in a super's clone() method.\n      */\n     private void addCloningCode() {\n-        if (_meta.getPCSuperclass() != null)\n+        if (_meta.getPCSuperclass() != null && !getCreateSubclass())\n             return;\n \n         // add the clone method if necessary\n-        BCMethod clone = _pc.getDeclaredMethod(\"clone\", (String[]) null);\n-        String superName = _pc.getSuperclassName();\n+        BCMethod clone = _pc.getDeclaredMethod(\"clone\", \n+            (String[]) null);\n+        String superName = _managedType.getSuperclassName();\n         Code code = null;\n         if (clone == null) {\n             // add clone support for base classes\n             // which also implement cloneable\n-            if (!_pc.isInstanceOf(Cloneable.class)\n-                || !superName.equals(Object.class.getName()))\n+            boolean isCloneable = Cloneable.class.isAssignableFrom(\n+                _managedType.getType());\n+            boolean extendsObject =\n+                superName.equals(Object.class.getName());\n+            if (!isCloneable || (!extendsObject && !getCreateSubclass()))\n                 return;\n \n-            if (_log.isTraceEnabled())\n-                _log.trace(_loc.get(\"enhance-cloneable\", _pc.getType()));\n+            if (!getCreateSubclass())\n+                if (_log.isTraceEnabled())\n+                    _log.trace(\n+                        _loc.get(\"enhance-cloneable\", _managedType.getName()));\n \n             // add clone method\n             // protected Object clone () throws CloneNotSupportedException\n             clone = _pc.declareMethod(\"clone\", Object.class, null);\n-            clone.makeProtected();\n+            if (!setVisibilityToSuperMethod(clone))\n+                clone.makeProtected();\n             clone.getExceptions(true).addException\n                 (CloneNotSupportedException.class);\n             code = clone.getCode(true);\n \n             // return super.clone ();\n             loadManagedInstance(code, false);\n-            code.invokespecial().setMethod(_pc.getSuperclassName(),\n-                \"clone\", Object.class.getName(), null);\n+            code.invokespecial().setMethod(superName, \"clone\",\n+                Object.class.getName(), null);\n             code.areturn();\n         } else {\n             // get the clone method code\n@@ -2777,8 +3210,9 @@ private void addCloningCode() {\n         }\n \n         // create template super.clone () instruction to match against\n-        Instruction template = new Code().invokespecial().setMethod\n-            (superName, \"clone\", Object.class.getName(), null);\n+        Instruction template = ((Code) AccessController.doPrivileged(\n+            J2DoPrivHelper.newCodeAction())).invokespecial()\n+            .setMethod(superName, \"clone\", Object.class.getName(), null);\n \n         // find calls to the template instruction; on match\n         // clone will be on stack\n@@ -2815,13 +3249,18 @@ private void runAuxiliaryEnhancers() {\n      * Affirms if the given method be skipped.\n      * \n      * @param method method to be skipped or not\n-     * @return true if any of the auxiliary enhancers skips the given method\n+     * @return true if any of the auxiliary enhancers skips the given method,\n+     * or if the method is a constructor\n      */\n     private boolean skipEnhance(BCMethod method) {\n-    \tfor (int i = 0; i < _auxEnhancers.length; i++)\n+        if (\"<init>\".equals(method.getName()))\n+            return true;\n+        \n+        for (int i = 0; i < _auxEnhancers.length; i++)\n     \t\tif (_auxEnhancers[i].skipEnhance(method))\n     \t\t\treturn true;\n-    \treturn false;\n+        \n+        return false;\n     }\n \n     /**\n@@ -2830,13 +3269,109 @@ private boolean skipEnhance(BCMethod method) {\n      */\n     private void addAccessors()\n         throws NoSuchMethodException {\n-        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        FieldMetaData[] fmds = getCreateSubclass() ? _meta.getFields()\n+            : _meta.getDeclaredFields();\n         for (int i = 0; i < fmds.length; i++) {\n-            addGetMethod(i, fmds[i]);\n-            addSetMethod(i, fmds[i]);\n+            if (getCreateSubclass()) {\n+                if (!getRedefine()\n+                    && _meta.getAccessType() != ClassMetaData.ACCESS_FIELD) {\n+                    addSubclassSetMethod(fmds[i]);\n+                    addSubclassGetMethod(fmds[i]);\n+                }\n+            } else {\n+                addGetMethod(i, fmds[i]);\n+                addSetMethod(i, fmds[i]);\n+            }\n         }\n     }\n \n+    /**\n+     * Adds a non-static setter that delegates to the super methods, and\n+     * performs any necessary field tracking.\n+     */\n+    private void addSubclassSetMethod(FieldMetaData fmd)\n+        throws NoSuchMethodException {\n+        Class propType = fmd.getDeclaredType();\n+        String setterName = getSetterName(fmd);\n+        BCMethod setter = _pc.declareMethod(setterName, void.class,\n+            new Class[] { propType });\n+        setVisibilityToSuperMethod(setter);\n+        Code code = setter.getCode(true);\n+\n+        // not necessary if we're already tracking access via redefinition\n+        if (!getRedefine()) {\n+            // get the orig value onto stack\n+            code.aload().setThis();\n+            addGetManagedValueCode(code, fmd);\n+            int val = code.getNextLocalsIndex();\n+            code.xstore().setLocal(val).setType(fmd.getDeclaredType());\n+            addNotifyMutation(code, fmd, val, 0);\n+        }\n+\n+        // ##### test case: B extends A. Methods defined in A. What\n+        // ##### happens?\n+        // super.setXXX(...)\n+        code.aload().setThis();\n+        code.xload().setParam(0).setType(propType);\n+        code.invokespecial().setMethod(_managedType.getType(),\n+            setterName, void.class, new Class[] { propType });\n+\n+        code.vreturn();\n+        code.calculateMaxLocals();\n+        code.calculateMaxStack();\n+    }\n+\n+    private boolean setVisibilityToSuperMethod(BCMethod method) {\n+        BCMethod[] methods = _managedType.getMethods(method.getName(),\n+            method.getParamTypes());\n+        if (methods.length == 0)\n+            throw new UserException(_loc.get(\"no-accessor\",\n+                _managedType.getName(), method.getName()));\n+        BCMethod superMeth = methods[0];\n+        if (superMeth.isPrivate()) {\n+            method.makePrivate();\n+            return true;\n+        } else if (superMeth.isPackage()) {\n+            method.makePackage();\n+            return true;\n+        } else if (superMeth.isProtected()) {\n+            method.makeProtected();\n+            return true;\n+        } else if (superMeth.isPublic()) {\n+            method.makePublic();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Adds a non-static getter that delegates to the super methods, and\n+     * performs any necessary field tracking.\n+     */\n+    private void addSubclassGetMethod(FieldMetaData fmd) {\n+        String methName = \"get\" + StringUtils.capitalize(fmd.getName());\n+        if (_managedType.getMethods(methName, new Class[0]).length == 0)\n+            methName = \"is\" + StringUtils.capitalize(fmd.getName());\n+        BCMethod getter = _pc.declareMethod(methName, fmd.getDeclaredType(),\n+            null);\n+        setVisibilityToSuperMethod(getter);\n+        getter.makePublic();\n+        Code code = getter.getCode(true);\n+\n+        // if we're not already tracking field access via reflection, then we\n+        // must make the getter hook in lazy loading before accessing the super\n+        // method.\n+        if (!getRedefine())\n+            addNotifyAccess(code, fmd);\n+\n+        code.aload().setThis();\n+        code.invokespecial().setMethod(_managedType.getType(), methName,\n+            fmd.getDeclaredType(), null);\n+        code.xreturn().setType(fmd.getDeclaredType());\n+        code.calculateMaxLocals();\n+        code.calculateMaxStack();\n+    }\n+\n     /**\n      * Adds a static getter method for the given field.\n      * The generated method interacts with the instance state and the\n@@ -2919,7 +3454,7 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         code.vreturn();\n \n         // inst.pcStateManager.setting<fieldType>Field (inst,\n-        //\tpcInheritedFieldCount + <index>, inst.<field>, value, 0);\n+        //     pcInheritedFieldCount + <index>, inst.<field>, value, 0);\n         ifins.setTarget(loadManagedInstance(code, true));\n         code.getfield().setField(SM, SMTYPE);\n         loadManagedInstance(code, true);\n@@ -2955,7 +3490,7 @@ private void addAttachDetachCode()\n \n         // if parent not detachable, we need to add the detach state fields and\n         // accessor methods\n-        if (_meta.getPCSuperclass() == null\n+        if (_meta.getPCSuperclass() == null || getCreateSubclass()\n             || parentDetachable != _meta.isDetachable()) {\n             addIsDetachedMethod();\n             addDetachedStateMethods(_meta.usesDetachedState()\n@@ -3006,7 +3541,8 @@ private void addDetachedStateMethods(boolean impl) {\n         if (impl) {\n             // return pcDetachedState;\n             loadManagedInstance(code, false);\n-            code.getfield().setField(declarer, name, Object.class.getName());\n+            getfield(code, _managedType.getProject().loadClass(declarer),\n+                name);\n         } else\n             code.constant().setNull();\n         code.areturn();\n@@ -3022,14 +3558,133 @@ private void addDetachedStateMethods(boolean impl) {\n             // pcDetachedState = state;\n             loadManagedInstance(code, false);\n             code.aload().setParam(0);\n-            code.putfield().setField(declarer, name,\n-                Object.class.getName());\n+            putfield(code, _managedType.getProject().loadClass(declarer),\n+                name, Object.class);\n         }\n         code.vreturn();\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n     }\n \n+    /**\n+     * Adds to <code>code</code> the instructions to get field\n+     * <code>attrName</code> declared in type <code>declarer</code>\n+     * onto the top of the stack.\n+     *\n+     * The instance to access must already be on the top of the\n+     * stack when this is invoked.\n+     */\n+    private void getfield(Code code, BCClass declarer, String attrName) {\n+        if (declarer == null)\n+            declarer = _managedType;\n+\n+        // first, see if we can convert the attribute name to a field name\n+        String fieldName = toBackingFieldName(attrName);\n+\n+        // next, find the field in the managed type.\n+        BCField[] fields = (BCField[]) AccessController\n+            .doPrivileged(J2DoPrivHelper.getBCClassFieldsAction(_managedType,\n+                fieldName)); \n+        BCField field = null;\n+        for (int i = 0; i < fields.length; i++) {\n+            field = fields[i];\n+            // if we reach a field declared in this type, then this is the\n+            // most-masking field, and is the one that we want.\n+            // ##### probably should walk up the hierarchy, or check that\n+            // ##### serp does that.\n+            if (fields[i].getDeclarer() == declarer) {\n+                break;\n+            }\n+        }\n+\n+        if (getCreateSubclass() && code.getMethod().getDeclarer() == _pc\n+            && (field == null || !field.isPublic())) {\n+            // we're creating the subclass, not redefining the user type.\n+\n+            // Reflection.getXXX(this, Reflection.findField(...));\n+            code.classconstant().setClass(declarer);\n+            code.constant().setValue(fieldName);\n+            code.constant().setValue(true);\n+            code.invokestatic().setMethod(Reflection.class,\n+                \"findField\", Field.class, new Class[] {\n+                Class.class, String.class, boolean.class });\n+            Class type = _meta.getField(attrName).getDeclaredType();\n+            try {\n+                code.invokestatic().setMethod(\n+                    getReflectionGetterMethod(type, Field.class));\n+            } catch (NoSuchMethodException e) {\n+                // should never happen\n+                throw new InternalException(e);\n+            }\n+            if (!type.isPrimitive() && type != Object.class)\n+                code.checkcast().setType(type);\n+        } else {\n+            code.getfield().setField(declarer.getName(), fieldName,\n+                field.getType().getName());\n+        }\n+    }\n+\n+    /**\n+     * Adds to <code>code</code> the instructions to set field\n+     * <code>attrName</code> declared in type <code>declarer</code>\n+     * to the value of type <code>fieldType</code> on the top of the stack.\n+     *\n+     * When this method is invoked, the value to load must\n+     * already be on the top of the stack in <code>code</code>,\n+     * and the instance to load into must be second.\n+     */\n+    private void putfield(Code code, BCClass declarer, String attrName,\n+        Class fieldType) {\n+        if (declarer == null)\n+            declarer = _managedType;\n+\n+        String fieldName = toBackingFieldName(attrName);\n+\n+        if (getRedefine() || getCreateSubclass()) {\n+            // Reflection.set(this, Reflection.findField(...), value);\n+            code.classconstant().setClass(declarer);\n+            code.constant().setValue(fieldName);\n+            code.constant().setValue(true);\n+            code.invokestatic().setMethod(Reflection.class,\n+                \"findField\", Field.class, new Class[] {\n+                Class.class, String.class, boolean.class });\n+            code.invokestatic().setMethod(Reflection.class, \"set\",\n+                void.class,\n+                new Class[] {\n+                    Object.class,\n+                    fieldType.isPrimitive() ? fieldType : Object.class, \n+                    Field.class });\n+        } else {\n+            code.putfield()\n+                .setField(declarer.getName(), fieldName, fieldType.getName());\n+        }\n+    }\n+\n+    /**\n+     * If using property access, see if there is a different backing field\n+     * name for the persistent attribute <code>name</code>.\n+     */\n+    private String toBackingFieldName(String name) {\n+        if (_meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n+            && _attrsToFields.containsKey(name))\n+            name = (String) _attrsToFields.get(name);\n+        return name;\n+    }\n+\n+    /**\n+     * If using property access, see if there is a different persistent\n+     * attribute name for the backing field <code>name</code>.\n+     */\n+    private String fromBackingFieldName(String name) {\n+        // meta is null when doing persistence-aware enhancement\n+        if (_meta != null\n+            && _meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n+            && _fieldsToAttrs.containsKey(name))\n+            return (String) _fieldsToAttrs.get(name);\n+        else\n+            return name;\n+    }\n+\n     /**\n      * Implement the externalizable interface to detach on serialize.\n      */\n@@ -3053,17 +3708,17 @@ private void addDetachExternalize(boolean parentDetachable,\n         // serialization methods\n         Class[] input = new Class[]{ ObjectInputStream.class };\n         Class[] output = new Class[]{ ObjectOutputStream.class };\n-        if (_pc.getDeclaredMethod(\"readObject\", input) != null\n-            || _pc.getDeclaredMethod(\"writeObject\", output) != null)\n+        if (_managedType.getDeclaredMethod(\"readObject\", input) != null\n+            || _managedType.getDeclaredMethod(\"writeObject\", output) != null)\n             throw new UserException(_loc.get(\"detach-custom-ser\", _meta));\n         input[0] = ObjectInput.class;\n         output[0] = ObjectOutput.class;\n-        if (_pc.getDeclaredMethod(\"readExternal\", input) != null\n-            || _pc.getDeclaredMethod(\"writeExternal\", output) != null)\n+        if (_managedType.getDeclaredMethod(\"readExternal\", input) != null\n+            || _managedType.getDeclaredMethod(\"writeExternal\", output) != null)\n             throw new UserException(_loc.get(\"detach-custom-extern\", _meta));\n \n         // create list of all unmanaged serializable fields\n-        BCField[] fields = _pc.getDeclaredFields();\n+        BCField[] fields = _managedType.getDeclaredFields();\n         Collection unmgd = new ArrayList(fields.length);\n         for (int i = 0; i < fields.length; i++) {\n             if (!fields[i].isTransient() && !fields[i].isStatic()\n@@ -3196,7 +3851,7 @@ private void readExternal(Code code, String fieldName, Class type,\n         if (!type.isPrimitive() && type != Object.class)\n             code.checkcast().setType(type);\n         if (fmd == null)\n-            code.putfield().setField(fieldName, type);\n+            putfield(code, null, fieldName, type);\n         else {\n             addSetManagedValueCode(code, fmd);\n             switch (fmd.getDeclaredTypeCode()) {\n@@ -3348,7 +4003,7 @@ private void writeExternal(Code code, String fieldName, Class type,\n         code.aload().setParam(0);\n         loadManagedInstance(code, false);\n         if (fmd == null)\n-            code.getfield().setField(fieldName, type);\n+            getfield(code, null, fieldName);\n         else\n             addGetManagedValueCode(code, fmd);\n         Class[] args = new Class[]{ type };\n@@ -3360,17 +4015,47 @@ else if (!type.isPrimitive())\n             void.class, args);\n     }\n \n+    private void addGetManagedValueCode(Code code, FieldMetaData fmd)\n+        throws NoSuchMethodException {\n+        addGetManagedValueCode(code, fmd, true);\n+    }\n+\n     /**\n      * Load the field value specified by <code>fmd</code> onto the stack.\n      * Before this method is called, the object that the data should be loaded\n      * from will be on the top of the stack.\n+     *\n+     * @param fromSameClass if <code>true</code>, then <code>fmd</code> is\n+     * being loaded from an instance of the same class as the current execution\n+     * context. If <code>false</code>, then the instance on the top of the stack\n+     * might be a superclass of the current execution context's 'this' instance.\n      */\n-    private void addGetManagedValueCode(Code code, FieldMetaData fmd)\n+    private void addGetManagedValueCode(Code code, FieldMetaData fmd,\n+        boolean fromSameClass)\n         throws NoSuchMethodException {\n-        if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-            code.getfield().setField(fmd.getName(), fmd.getDeclaredType());\n-        else // property\n-        {\n+        // if redefining, then we must always reflect (or access the field\n+        // directly if accessible), since the redefined methods will always\n+        // trigger method calls to StateManager, even from internal direct-\n+        // access usage. We could work around this by not redefining, and\n+        // just do a subclass approach instead. But this is not a good option,\n+        // since it would sacrifice lazy loading and efficient dirty tracking.\n+\n+        if (getRedefine()\n+            || _meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\n+            getfield(code, null, fmd.getName());\n+        } else if (getCreateSubclass()) {\n+            // property access, and we're not redefining. If we're operating\n+            // on an instance that is definitely the same type as 'this', then\n+            // call superclass method to bypass tracking. Otherwise, reflect\n+            // to both bypass tracking and avoid class verification errors.\n+            if (fromSameClass) {\n+                Method meth = (Method) fmd.getBackingMember();\n+                code.invokespecial().setMethod(meth);\n+            } else {\n+                getfield(code, null, fmd.getName());\n+            }\n+        } else {\n+            // regular enhancement + property access\n             Method meth = (Method) fmd.getBackingMember();\n             code.invokevirtual().setMethod(PRE + meth.getName(),\n                 meth.getReturnType(), meth.getParameterTypes());\n@@ -3385,11 +4070,27 @@ private void addGetManagedValueCode(Code code, FieldMetaData fmd)\n      */\n     private void addSetManagedValueCode(Code code, FieldMetaData fmd)\n         throws NoSuchMethodException {\n-        if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-            code.putfield().setField(fmd.getName(), fmd.getDeclaredType());\n-        else // property\n+        // if redefining, then we must always reflect (or access the field\n+        // directly if accessible), since the redefined methods will always\n+        // trigger method calls to StateManager, even from internal direct-\n+        // access usage. We could work around this by not redefining, and\n+        // just do a subclass approach instead. But this is not a good option,\n+        // since it would sacrifice lazy loading and efficient dirty tracking.\n+\n+        if (getRedefine()\n+            || _meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\n+            putfield(code, null, fmd.getName(), fmd.getDeclaredType());\n+        } else if (getCreateSubclass()) {\n+            // property access, and we're not redefining. invoke the\n+            // superclass method to bypass tracking.\n+            code.invokespecial().setMethod(_managedType.getType(),\n+                getSetterName(fmd), void.class,\n+                new Class[] { fmd.getDeclaredType() });\n+        } else {\n+            // regular enhancement + property access\n             code.invokevirtual().setMethod(PRE + getSetterName(fmd),\n-                void.class, new Class[]{ fmd.getDeclaredType() });\n+                void.class, new Class[] { fmd.getDeclaredType() });\n+        }\n     }\n \n     /**\n@@ -3401,20 +4102,14 @@ private int getAccessorParameterOffset() {\n \n     /**\n      * Add the {@link Instruction}s to load the instance to modify onto the\n-     * stack, and return it. If <code>userObject</code> is set,\n-     * then <code>code</code> will be accessing data in the user-visible\n-     * object (which might not be 'this' in proxying contexts),\n-     * and the load code should behave accordingly. Otherwise,\n-     * <code>code</code> will be accessing PC-contract data, which must always\n-     * be in 'this'. If <code>forAccesor</code> is set, then <code>code</code>\n-     * is in an accessor method; otherwise, it is in one of the PC-specified\n-     * methods.\n+     * stack, and return it. If <code>forStatic</code> is set, then\n+     * <code>code</code> is in an accessor method or another static method;\n+     * otherwise, it is in one of the PC-specified methods.\n      *\n      * @return the first instruction added to <code>code</code>.\n      */\n-    private Instruction loadManagedInstance(Code code,\n-        boolean forAccessor) {\n-        if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD && forAccessor)\n+    private Instruction loadManagedInstance(Code code, boolean forStatic) {\n+        if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD && forStatic)\n             return code.aload().setParam(0);\n         return code.aload().setThis();\n     }\n@@ -3446,7 +4141,7 @@ private BCMethod createGetMethod(FieldMetaData fmd) {\n         BCMethod newgetter = _pc.declareMethod(PRE + meth.getName(),\n             meth.getReturnType(), meth.getParameterTypes());\n         newgetter.setAccessFlags(getter.getAccessFlags());\n-        newgetter.makePrivate();\n+        newgetter.makeProtected(); \n         transferCodeAttributes(getter, newgetter);\n         return getter;\n     }\n@@ -3477,7 +4172,7 @@ private BCMethod createSetMethod(FieldMetaData fmd) {\n         BCMethod newsetter = _pc.declareMethod(PRE + setter.getName(),\n             setter.getReturnName(), setter.getParamNames());\n         newsetter.setAccessFlags(setter.getAccessFlags());\n-        newsetter.makePrivate();\n+        newsetter.makeProtected();\n         transferCodeAttributes(setter, newsetter);\n         return setter;\n     }\n@@ -3492,7 +4187,6 @@ private void addGetEnhancementContractVersionMethod() {\n         code.ireturn();\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n-        return;\n     }\n \n     /**\n@@ -3608,7 +4302,8 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             loader = conf.getClassResolverInstance().\n                 getClassLoader(PCEnhancer.class, null);\n         if (flags.tmpClassLoader)\n-            loader = new TemporaryClassLoader(loader);\n+            loader = (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                .newTemporaryClassLoaderAction(loader));\n \n         if (repos == null) {\n             repos = conf.newMetaDataRepositoryInstance();\n@@ -3619,7 +4314,11 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Collection classes;\n         if (args.length == 0) {\n             log.info(_loc.get(\"running-all-classes\"));\n-            classes = repos.loadPersistentTypes(true, loader);\n+            classes = repos.getPersistentTypeNames(true, loader);\n+            if (classes == null) {\n+            \tlog.warn(_loc.get(\"no-class-to-enhance\"));\n+            \treturn false;\n+            }\n         } else {\n             ClassArgParser cap = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n@@ -3628,19 +4327,21 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             for (int i = 0; i < args.length; i++)\n                 classes.addAll(Arrays.asList(cap.parseTypes(args[i])));\n         }\n-\n+        \n         Project project = new Project();\n         BCClass bc;\n         PCEnhancer enhancer;\n         int status;\n-        Class cls;\n         for (Iterator itr = classes.iterator(); itr.hasNext();) {\n-            cls = (Class) itr.next();\n+            Object o = itr.next();\n             if (log.isTraceEnabled())\n-                log.trace(_loc.get(\"enhance-running\", cls));\n+                log.trace(_loc.get(\"enhance-running\", o));\n \n-            bc = project.loadClass(cls);\n-            enhancer = new PCEnhancer(conf, bc, repos);\n+            if (o instanceof String)\n+                bc = project.loadClass((String) o);\n+            else\n+                bc = project.loadClass((Class) o);\n+            enhancer = new PCEnhancer(conf, bc, repos, loader);\n             if (writer != null)\n                 enhancer.setBytecodeWriter(writer);\n             enhancer.setDirectory(flags.directory);"},{"sha":"308669890dc4158a46495c3152720ed4a0bf9ab1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -202,6 +202,23 @@ public static void register(Class pcClass, String[] fieldNames,\n         }\n     }\n \n+    /**\n+     * De-Register all metadata associated with the given ClassLoader. \n+     * Allows ClassLoaders to be garbage collected.\n+     *\n+     * @param cl the ClassLoader\n+     */\n+    public static void deRegister(ClassLoader cl) {\n+        synchronized (_metas) {\n+            for (Iterator i = _metas.keySet().iterator(); i.hasNext();) {\n+                Class pcClass = (Class) i.next();\n+                if (pcClass.getClassLoader() == cl) {\n+                    _metas.remove(pcClass);\n+                }\n+            }\n+        }\n+    }\n+    \n     /**\n      * Returns a collection of class objects of the registered\n      * persistence-capable classes."},{"sha":"fa825746fd4de9ca83cdea430105cccf24e4c8ab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java","status":"added","additions":272,"deletions":0,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCSubclassValidator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,272 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.lang.reflect.Modifier;\r\n+import java.lang.reflect.Constructor;\r\n+import java.lang.reflect.Method;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.util.UserException;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.Localizer.Message;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import serp.bytecode.BCField;\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.BCMethod;\r\n+\r\n+/**\r\n+ *\t<p>Validates that a given type meets the JPA contract, plus a few\r\n+ *  OpenJPA-specific additions for subclassing / redefinition:\r\n+ *\r\n+ *\t<ul>\r\n+ * \t\t<li>must have an accessible no-args constructor</li>\r\n+ * \t\t<li>must be a public or protected class</li>\r\n+ * \t\t<li>must not be final</li>\r\n+ * \t\t<li>must not extend an enhanced class</li>\r\n+ *\t\t<li>all persistent data represented by accessible setter/getter\r\n+ * \t\t\tmethods (persistent properties)</li>\r\n+ * \t\t<li>if versioning is to be used, exactly one persistent property for\r\n+ * \t\t\tthe numeric version data</li> <!-- ##### is this true? -->\r\n+ *\r\n+ * \t\t<li>When using property access, the backing field for a persistent\r\n+ *          property must be:\r\n+ * \t\t\t<ul>\r\n+ * \t\t\t\t<!-- ##### JPA validation of these needs to be tested -->\r\n+ * \t\t\t\t<li>private</li>\r\n+ * \t\t\t\t<li>set only in the designated setter,\r\n+ * \t\t\t\t\tin the constructor, or in {@link Object#clone()},\r\n+ * \t\t\t\t\t<code>readObject(ObjectInputStream)</code>, or\r\n+ * \t\t\t\t\t{@link Externalizable#readExternal(ObjectInput)}.</li>\r\n+ * \t\t\t\t<li>read only in the designated getter and the\r\n+ * \t\t\t\t\tconstructor.</li>\r\n+ *\t\t\t</ul>\r\n+ * \t\t</li>\r\n+ * \t</ul>\r\n+ *\r\n+ * \t<p>If you use this technique and use the <code>new</code> keyword instead of\r\n+ * \ta OpenJPA-supplied construction routine, OpenJPA will need to do extra work\r\n+ *  with persistent-new-flushed instances, since OpenJPA cannot in this case\r\n+ *  track what happens to such an instance.</p>\r\n+ *\r\n+ * \t@since 1.0.0\r\n+ */\r\n+public class PCSubclassValidator {\r\n+\r\n+    private static final Localizer loc =\r\n+        Localizer.forPackage(PCSubclassValidator.class);\r\n+\r\n+    private final ClassMetaData meta;\r\n+    private final BCClass pc;\r\n+    private final Log log;\r\n+    private final boolean failOnContractViolations;\r\n+\r\n+    private Collection errors;\r\n+    private Collection contractViolations;\r\n+\r\n+    public PCSubclassValidator(ClassMetaData meta, BCClass bc, Log log,\r\n+        boolean enforceContractViolations) {\r\n+        this.meta = meta;\r\n+        this.pc = bc;\r\n+        this.log = log;\r\n+        this.failOnContractViolations = enforceContractViolations;\r\n+    }\r\n+\r\n+    public void assertCanSubclass() {\r\n+        Class superclass = meta.getDescribedType();\r\n+        String name = superclass.getName();\r\n+        if (superclass.isInterface())\r\n+            addError(loc.get(\"subclasser-no-ifaces\", name), meta);\r\n+        if (Modifier.isFinal(superclass.getModifiers()))\r\n+            addError(loc.get(\"subclasser-no-final-classes\", name), meta);\r\n+        if (Modifier.isPrivate(superclass.getModifiers()))\r\n+            addError(loc.get(\"subclasser-no-private-classes\", name), meta);\r\n+        if (PersistenceCapable.class.isAssignableFrom(superclass))\r\n+            addError(loc.get(\"subclasser-super-already-pc\", name), meta);\r\n+\r\n+        try {\r\n+            Constructor c = superclass.getDeclaredConstructor(new Class[0]);\r\n+            if (!(Modifier.isProtected(c.getModifiers())\r\n+                || Modifier.isPublic(c.getModifiers())))\r\n+                addError(loc.get(\"subclasser-private-ctor\", name), meta);\r\n+        }\r\n+        catch (NoSuchMethodException e) {\r\n+            addError(loc.get(\"subclasser-no-void-ctor\", name),\r\n+                meta);\r\n+        }\r\n+\r\n+        // if the BCClass we loaded is already pc and the superclass is not,\r\n+        // then we should never get here, so let's make sure that the\r\n+        // calling context is caching correctly by throwing an exception.\r\n+        if (pc.isInstanceOf(PersistenceCapable.class) &&\r\n+            !PersistenceCapable.class.isAssignableFrom(superclass))\r\n+            throw new InternalException(\r\n+                loc.get(\"subclasser-class-already-pc\", name));\r\n+\r\n+        if (meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY)\r\n+            checkPropertiesAreInterceptable();\r\n+\r\n+        if (errors != null && !errors.isEmpty())\r\n+            throw new UserException(errors.toString());\r\n+        else if (contractViolations != null &&\r\n+            !contractViolations.isEmpty() && log.isWarnEnabled())\r\n+            log.warn(contractViolations.toString());\r\n+    }\r\n+\r\n+    private void checkPropertiesAreInterceptable() {\r\n+        // just considers accessor methods for now.\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            Method getter = (Method) fmds[i].getBackingMember();\r\n+            if (getter == null) {\r\n+                addError(loc.get(\"subclasser-no-getter\",\r\n+                    fmds[i].getName()), fmds[i]);\r\n+                continue;\r\n+            }\r\n+            BCField returnedField = checkGetterIsSubclassable(getter, fmds[i]);\r\n+\r\n+            Method setter = setterForField(fmds[i]);\r\n+            if (setter == null) {\r\n+                addError(loc.get(\"subclasser-no-setter\", fmds[i].getName()),\r\n+                    fmds[i]);\r\n+                continue;\r\n+            }\r\n+            BCField assignedField = checkSetterIsSubclassable(setter, fmds[i]);\r\n+            if (assignedField == null)\r\n+                continue;\r\n+\r\n+            if (assignedField != returnedField)\r\n+                addContractViolation(loc.get\r\n+                    (\"subclasser-setter-getter-field-mismatch\",\r\n+                        fmds[i].getName(), returnedField,assignedField),\r\n+                    fmds[i]);\r\n+\r\n+            // ### scan through all the rest of the class to make sure it\r\n+            // ### doesn't use the field.\r\n+        }\r\n+    }\r\n+\r\n+    private Method setterForField(FieldMetaData fmd) {\r\n+        try {\r\n+            return fmd.getDeclaringType().getDeclaredMethod(\r\n+                \"set\" + StringUtils.capitalize(fmd.getName()),\r\n+                new Class[]{ fmd.getDeclaredType() });\r\n+        }\r\n+        catch (NoSuchMethodException e) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name of the field that is returned by <code>meth</code>, or\r\n+     *         <code>null</code> if something other than a single field is\r\n+     *         returned, or if it cannot be determined what is returned.\r\n+     */\r\n+    private BCField checkGetterIsSubclassable(Method meth, FieldMetaData fmd) {\r\n+        checkMethodIsSubclassable(meth, fmd);\r\n+        BCField field = PCEnhancer.getReturnedField(getBCMethod(meth));\r\n+        if (field == null) {\r\n+            addContractViolation(loc.get(\"subclasser-invalid-getter\",\r\n+                fmd.getName()), fmd);\r\n+            return null;\r\n+        } else {\r\n+            return field;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the field that is set in <code>meth</code>, or\r\n+     *         <code>null</code> if something other than a single field is\r\n+     *         set, or if it cannot be determined what is set.\r\n+     */\r\n+    private BCField checkSetterIsSubclassable(Method meth, FieldMetaData fmd) {\r\n+        checkMethodIsSubclassable(meth, fmd);\r\n+        BCField field = PCEnhancer.getAssignedField(getBCMethod(meth));\r\n+        if (field == null) {\r\n+            addContractViolation(loc.get(\"subclasser-invalid-setter\",\r\n+                fmd.getName()), fmd);\r\n+            return null;\r\n+        } else {\r\n+            return field;\r\n+        }\r\n+    }\r\n+\r\n+    private BCMethod getBCMethod(Method meth) {\r\n+        BCClass bc = pc.getProject().loadClass(meth.getDeclaringClass());\r\n+        return bc.getDeclaredMethod(meth.getName(), meth.getParameterTypes());\r\n+    }\r\n+\r\n+    private void checkMethodIsSubclassable(Method meth, FieldMetaData fmd) {\r\n+        String className = fmd.getDefiningMetaData().\r\n+            getDescribedType().getName();\r\n+        if (!(Modifier.isProtected(meth.getModifiers())\r\n+            || Modifier.isPublic(meth.getModifiers())))\r\n+            addError(loc.get(\"subclasser-private-accessors-unsupported\",\r\n+                className, meth.getName()), fmd);\r\n+        if (Modifier.isFinal(meth.getModifiers()))\r\n+            addError(loc.get(\"subclasser-final-methods-not-allowed\",\r\n+                className, meth.getName()), fmd);\r\n+        if (Modifier.isNative(meth.getModifiers()))\r\n+            addContractViolation(loc.get\r\n+                (\"subclasser-native-methods-not-allowed\", className,\r\n+                    meth.getName()),\r\n+                fmd);\r\n+        if (Modifier.isStatic(meth.getModifiers()))\r\n+            addError(loc.get(\"subclasser-static-methods-not-supported\",\r\n+                className, meth.getName()), fmd);\r\n+    }\r\n+\r\n+    private void addError(Message s, ClassMetaData cls) {\r\n+        if (errors == null)\r\n+            errors = new ArrayList();\r\n+\r\n+        errors.add(loc.get(\"subclasser-error-meta\", s,\r\n+            cls.getDescribedType().getName(),\r\n+            cls.getSourceFile()));\r\n+    }\r\n+\r\n+    private void addError(Message s, FieldMetaData fmd) {\r\n+        if (errors == null)\r\n+            errors = new ArrayList();\r\n+\r\n+        errors.add(loc.get(\"subclasser-error-field\", s,\r\n+            fmd.getFullName(),\r\n+            fmd.getDeclaringMetaData().getSourceFile()));\r\n+    }\r\n+\r\n+    private void addContractViolation(Message m, FieldMetaData fmd) {\r\n+        // add the violation as an error in case we're processing violations\r\n+        // as errors; this keeps them in the order that they were found rather\r\n+        // than just adding the violations to the end of the list.\r\n+        if (failOnContractViolations)\r\n+            addError(m, fmd);\r\n+\r\n+        if (contractViolations == null)\r\n+            contractViolations = new ArrayList();\r\n+\r\n+        contractViolations.add(loc.get\r\n+            (\"subclasser-contract-violation-field\", m.getMessage(),\r\n+                fmd.getFullName(), fmd.getDeclaringMetaData().getSourceFile()));\r\n+    }\r\n+}\r"},{"sha":"ecf91ea3c37b5cc2231b92253488e7cc5726d757","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","status":"added","additions":188,"deletions":0,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,188 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.StateManagerImpl;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+\r\n+/**\r\n+ * Helper methods for managed types that use method redefinition for field\r\n+ * tracking.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class RedefinitionHelper {\r\n+\r\n+    /**\r\n+     * Call {@link StateManagerImpl#dirtyCheck} if the argument is a\r\n+     * {@link StateManagerImpl}.\r\n+     */\r\n+    public static void dirtyCheck(StateManager sm) {\r\n+        if (sm instanceof StateManagerImpl)\r\n+            ((StateManagerImpl) sm).dirtyCheck();\r\n+    }\r\n+\r\n+    /**\r\n+     * Notify the state manager for <code>o</code> (if any) that a field\r\n+     * is about to be accessed.\r\n+     */\r\n+    public static void accessingField(Object o, int absoluteIndex) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.accessingField(absoluteIndex);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, boolean cur,\r\n+        boolean next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingBooleanField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, char cur, char next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingCharField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, byte cur, byte next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingByteField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, short cur, short next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingShortField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, int cur, int next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingIntField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, long cur, long next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingLongField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, float cur, float next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingFloatField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, double cur,\r\n+        double next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingDoubleField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, String cur,\r\n+        String next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingStringField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+\r\n+    /**\r\n+     * Setting state callback.\r\n+     */\r\n+    public static void settingField(Object o, int idx, Object cur,\r\n+        Object next) {\r\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\r\n+        if (pc == null)\r\n+            return;\r\n+        StateManager sm = pc.pcGetStateManager();\r\n+        if (sm != null)\r\n+            sm.settingObjectField(pc, idx, cur, next,\r\n+                OpenJPAStateManager.SET_USER);\r\n+    }\r\n+}\r"},{"sha":"cb75b61732b794bfc3425b5dbd9933ad4abd3585","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","status":"added","additions":353,"deletions":0,"changes":353,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,353 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.lang.reflect.Field;\r\n+import java.lang.reflect.Method;\r\n+\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.util.ApplicationIds;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.ObjectId;\r\n+import org.apache.openjpa.kernel.StateManagerImpl;\r\n+\r\n+/**\r\n+ * Implementation of the {@link PersistenceCapable} interface that can handle\r\n+ * the persistence-capable contract for instances that were not enhanced\r\n+ * before class load time.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class ReflectingPersistenceCapable\r\n+    implements PersistenceCapable, ManagedInstanceProvider {\r\n+\r\n+    private Object o;\r\n+    private StateManager sm;\r\n+    private PersistenceCapable pcSubclassInstance;\r\n+    private ClassMetaData meta;\r\n+\r\n+    public ReflectingPersistenceCapable(Object o, OpenJPAConfiguration conf) {\r\n+        this.o = o;\r\n+        Class type = o.getClass();\r\n+        pcSubclassInstance = PCRegistry.newInstance(type, null, false);\r\n+        meta = conf.getMetaDataRepositoryInstance()\r\n+            .getMetaData(type, null, true);\r\n+    }\r\n+\r\n+    public int pcGetEnhancementContractVersion() {\r\n+        return PCEnhancer.ENHANCER_VERSION;\r\n+    }\r\n+\r\n+    public Object pcGetGenericContext() {\r\n+        if (sm == null)\r\n+            return null;\r\n+        else\r\n+            return sm.getGenericContext();\r\n+    }\r\n+\r\n+    public StateManager pcGetStateManager() {\r\n+        return sm;\r\n+    }\r\n+\r\n+    public void pcReplaceStateManager(StateManager sm) {\r\n+        this.sm = sm;\r\n+    }\r\n+\r\n+    public void pcProvideField(int i) {\r\n+        switch (meta.getField(i).getTypeCode()) {\r\n+            case JavaTypes.BOOLEAN:\r\n+                sm.providedBooleanField(this, i,\r\n+                    ((Boolean) getValue(i, o)).booleanValue());\r\n+                break;\r\n+            case JavaTypes.BYTE:\r\n+                sm.providedByteField(this, i,\r\n+                    ((Byte) getValue(i, o)).byteValue());\r\n+                break;\r\n+            case JavaTypes.CHAR:\r\n+                sm.providedCharField(this, i,\r\n+                    ((Character) getValue(i, o)).charValue());\r\n+                break;\r\n+            case JavaTypes.DOUBLE:\r\n+                sm.providedDoubleField(this, i,\r\n+                    ((Double) getValue(i, o)).doubleValue());\r\n+                break;\r\n+            case JavaTypes.FLOAT:\r\n+                sm.providedFloatField(this, i,\r\n+                    ((Float) getValue(i, o)).floatValue());\r\n+                break;\r\n+            case JavaTypes.INT:\r\n+                sm.providedIntField(this, i,\r\n+                    ((Integer) getValue(i, o)).intValue());\r\n+                break;\r\n+            case JavaTypes.LONG:\r\n+                sm.providedLongField(this, i,\r\n+                    ((Long) getValue(i, o)).longValue());\r\n+                break;\r\n+            case JavaTypes.SHORT:\r\n+                sm.providedShortField(this, i,\r\n+                    ((Short) getValue(i, o)).shortValue());\r\n+                break;\r\n+            case JavaTypes.STRING:\r\n+                sm.providedStringField(this, i,\r\n+                    (String) getValue(i, o));\r\n+                break;\r\n+            default:\r\n+                sm.providedObjectField(this, i, getValue(i, o));\r\n+                break;\r\n+        }\r\n+    }\r\n+\r\n+    public void pcProvideFields(int[] fieldIndices) {\r\n+        for(int i = 0; i < fieldIndices.length; i++)\r\n+            pcProvideField(fieldIndices[i]);\r\n+    }\r\n+\r\n+    public void pcReplaceField(int i) {\r\n+        switch(meta.getField(i).getTypeCode()) {\r\n+            case JavaTypes.BOOLEAN:\r\n+                setValue(i, o, Boolean.valueOf(\r\n+                    sm.replaceBooleanField(this, i)));\r\n+                break;\r\n+            case JavaTypes.BYTE:\r\n+                setValue(i, o, new Byte(sm.replaceByteField(this, i)));\r\n+                break;\r\n+            case JavaTypes.CHAR:\r\n+                setValue(i, o, new Character(sm.replaceCharField(this, i)));\r\n+                break;\r\n+            case JavaTypes.DOUBLE:\r\n+                setValue(i, o, new Double(sm.replaceDoubleField(this, i)));\r\n+                break;\r\n+            case JavaTypes.FLOAT:\r\n+                setValue(i, o, new Float(sm.replaceFloatField(this, i)));\r\n+                break;\r\n+            case JavaTypes.INT:\r\n+                setValue(i, o, new Integer(sm.replaceIntField(this, i)));\r\n+                break;\r\n+            case JavaTypes.LONG:\r\n+                setValue(i, o, new Long(sm.replaceLongField(this, i)));\r\n+                break;\r\n+            case JavaTypes.SHORT:\r\n+                setValue(i, o, new Short(sm.replaceShortField(this, i)));\r\n+                break;\r\n+            case JavaTypes.STRING:\r\n+                setValue(i, o, sm.replaceStringField(this, i));\r\n+                break;\r\n+            default:\r\n+                setValue(i, o, sm.replaceObjectField(this, i));\r\n+                break;\r\n+        }\r\n+    }\r\n+\r\n+    public void pcReplaceFields(int[] fieldIndices) {\r\n+        for(int i = 0; i < fieldIndices.length; i++)\r\n+            pcReplaceField(fieldIndices[i]);\r\n+    }\r\n+\r\n+    public void pcCopyField(Object fromObject, int i) {\r\n+        // this doesn't need switch treatment because we're just\r\n+        // reflecting on both sides, bypassing field managers.\r\n+        setValue(i, o, getValue(i, fromObject));\r\n+    }\r\n+\r\n+    public void pcCopyFields(Object fromObject, int[] fieldIndices) {\r\n+        for(int i = 0; i < fieldIndices.length; i++)\r\n+            pcCopyField(fromObject, fieldIndices[i]);\r\n+    }\r\n+\r\n+    public void pcDirty(String fieldName) {\r\n+        if (sm != null)\r\n+            sm.dirty(fieldName);\r\n+    }\r\n+\r\n+    public Object pcFetchObjectId() {\r\n+        if (sm != null)\r\n+            return sm.fetchObjectId();\r\n+        else\r\n+            return null;\r\n+    }\r\n+\r\n+    public Object pcGetVersion() {\r\n+        if (sm == null)\r\n+            return null;\r\n+        else\r\n+            return sm.getVersion();\r\n+    }\r\n+\r\n+    public boolean pcIsDirty() {\r\n+        if (sm == null)\r\n+            return false;\r\n+        else {\r\n+            if (sm instanceof StateManagerImpl)\r\n+                ((StateManagerImpl) sm).dirtyCheck();\r\n+            return sm.isDirty();\r\n+        }\r\n+    }\r\n+\r\n+    public boolean pcIsTransactional() {\r\n+        if (sm == null)\r\n+            return false;\r\n+        else\r\n+            return sm.isTransactional();\r\n+    }\r\n+\r\n+    public boolean pcIsPersistent() {\r\n+        if (sm == null)\r\n+            return false;\r\n+        else\r\n+            return sm.isPersistent();\r\n+    }\r\n+\r\n+    public boolean pcIsNew() {\r\n+        if (sm == null)\r\n+            return false;\r\n+        else\r\n+            return sm.isNew();\r\n+    }\r\n+\r\n+    public boolean pcIsDeleted() {\r\n+        if (sm == null)\r\n+            return false;\r\n+        else\r\n+            return sm.isDeleted();\r\n+    }\r\n+\r\n+    // null == unknown\r\n+    public Boolean pcIsDetached() {\r\n+        if (sm != null)\r\n+            return Boolean.valueOf(sm.isDetached());\r\n+\r\n+        // ##### we could do a lot more here if a detached state field\r\n+        // ##### was specified.\r\n+        return null;\r\n+    }\r\n+\r\n+    public PersistenceCapable pcNewInstance(StateManager sm, boolean clear) {\r\n+        return pcSubclassInstance.pcNewInstance(sm, clear);\r\n+    }\r\n+\r\n+    public PersistenceCapable pcNewInstance(StateManager sm, Object oid,\r\n+        boolean clear) {\r\n+        return pcSubclassInstance.pcNewInstance(sm, oid, clear);\r\n+    }\r\n+\r\n+    public Object pcNewObjectIdInstance() {\r\n+        FieldMetaData[] pkFields = meta.getPrimaryKeyFields();\r\n+        Object[] pks = new Object[pkFields.length];\r\n+        for (int i = 0; i < pkFields.length; i++)\r\n+            pks[i] = getValue(pkFields[i].getIndex(), o);\r\n+        return ApplicationIds.fromPKValues(pks, meta);\r\n+    }\r\n+    \r\n+    public Object pcNewObjectIdInstance(Object oid) {\r\n+        return pcSubclassInstance.pcNewObjectIdInstance(oid);\r\n+    }\r\n+\r\n+    public void pcCopyKeyFieldsToObjectId(Object oid) {\r\n+        Object target;\r\n+        if (oid instanceof ObjectId)\r\n+            target = ((ObjectId) oid).getId();\r\n+        else\r\n+            target = oid;\r\n+\r\n+        FieldMetaData[] pks = meta.getPrimaryKeyFields();\r\n+        for (int i = 0; i < pks.length; i++) {\r\n+            Object val = getValue(pks[i].getIndex(), o);\r\n+            Field f = Reflection.findField(target.getClass(), pks[i].getName(),\r\n+                true);\r\n+            Reflection.set(target, f, val);\r\n+        }\r\n+    }\r\n+\r\n+    public void pcCopyKeyFieldsToObjectId(FieldSupplier supplier, Object obj) {\r\n+        // This is only ever invoked against PCs in the PCRegistry. Such PCs\r\n+        // will always be enhanced types or subtypes of user types, and will\r\n+        // never be a ReflectingPersistenceCapable.\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void pcCopyKeyFieldsFromObjectId(FieldConsumer consumer,\r\n+        Object obj) {\r\n+        // This is only ever invoked against PCs in the PCRegistry. Such PCs\r\n+        // will always be enhanced types or subtypes of user types, and will\r\n+        // never be a ReflectingPersistenceCapable.\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public Object pcGetDetachedState() {\r\n+        // ##### we can implement this if a state field has been set\r\n+        return null;\r\n+    }\r\n+\r\n+    public void pcSetDetachedState(Object state) {\r\n+        // StateManagerImpl will invoke this with null during instance\r\n+        // initialization\r\n+        if (state != null)\r\n+            throw new UnsupportedOperationException();\r\n+        // ##### we can implement this if a state field has been set\r\n+    }\r\n+\r\n+    public Object getManagedInstance() {\r\n+        return o;\r\n+    }\r\n+\r\n+    private Object getValue(int i, Object o) {\r\n+        if (meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY) {\r\n+            if (!meta.isIntercepting()) {\r\n+                Method meth = Reflection.findGetter(meta.getDescribedType(),\r\n+                    meta.getField(i).getName(), true);\r\n+                return Reflection.get(o, meth);\r\n+            } else {\r\n+                Field field = Reflection.findField(meta.getDescribedType(),\r\n+                    toFieldName(i), true);\r\n+                return Reflection.get(o, field);\r\n+            }\r\n+        } else {\r\n+            Field field = (Field) meta.getField(i).getBackingMember();\r\n+            return Reflection.get(o, field);\r\n+        }\r\n+    }\r\n+\r\n+    private String toFieldName(int i) {\r\n+        if (pcSubclassInstance instanceof AttributeTranslator)\r\n+            return ((AttributeTranslator) pcSubclassInstance)\r\n+                .pcAttributeIndexToFieldName(i);\r\n+        else\r\n+            return meta.getField(i).getName();\r\n+    }\r\n+\r\n+    private void setValue(int i, Object o, Object val) {\r\n+        if (meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY) {\r\n+            if (!meta.isIntercepting()) {\r\n+                Method meth = Reflection.findSetter(meta.getDescribedType(),\r\n+                    meta.getField(i).getName(), true);\r\n+                Reflection.set(o, meth, val);\r\n+            } else {\r\n+                Field field = Reflection.findField(meta.getDescribedType(),\r\n+                    toFieldName(i), true);\r\n+                Reflection.set(o, field, val);\r\n+            }\r\n+        } else {\r\n+            Field field = (Field) meta.getField(i).getBackingMember();\r\n+            Reflection.set(o, field, val);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"7393bd1ce5a49a7ffe8d2253d8cf5c667dbfa422","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":168,"deletions":25,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,8 +23,10 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException; \n import org.apache.openjpa.util.UserException; \n@@ -47,20 +49,20 @@\n     public static Method findGetter(Class cls, String prop, boolean mustExist) {\n         prop = StringUtils.capitalize(prop);\n         String name = \"get\" + prop;\n+        Method m;\n         try {\n-            for (Class c = cls; c != null && c != Object.class; \n+            // this algorithm searches for a get<prop> or is<prop> method in\n+            // a breadth-first manner.\n+            for (Class c = cls; c != null && c != Object.class;\n                 c = c.getSuperclass()) {\n-                try {\n-                    return c.getDeclaredMethod(name, (Class[]) null);\n-                } catch (NoSuchMethodException nsme) {\n-                    try {\n-                        Method m = c.getDeclaredMethod(\"is\" + prop, \n-                            (Class[]) null);\n-                        if (m != null && (m.getReturnType() == boolean.class\n-                            || m.getReturnType() == Boolean.class))\n-                            return m;\n-                    } catch (NoSuchMethodException nsme2) {\n-                    }\n+                m = getDeclaredMethod(c, name, null);\n+                if (m != null) {\n+                    return m;\n+                } else {\n+                    m = getDeclaredMethod(c, \"is\" + prop, null);\n+                    if (m != null && (m.getReturnType() == boolean.class\n+                        || m.getReturnType() == Boolean.class))\n+                        return m;\n                 }\n             }\n         } catch (Exception e) {\n@@ -89,14 +91,13 @@ public static Method findSetter(Class cls, String prop, boolean mustExist) {\n     public static Method findSetter(Class cls, String prop, Class param,\n         boolean mustExist) {\n         String name = \"set\" + StringUtils.capitalize(prop);\n-        Class[] params = new Class[] { param };\n+        Method m;\n         try {\n-            for (Class c = cls; c != null && c != Object.class; \n+            for (Class c = cls; c != null && c != Object.class;\n                 c = c.getSuperclass()) {\n-                try {\n-                    return c.getDeclaredMethod(name, params);\n-                } catch (NoSuchMethodException nsme) {\n-                }\n+                m = getDeclaredMethod(c, name, param);\n+                if (m != null)\n+                    return m;\n             }\n         } catch (Exception e) {\n             throw new GeneralException(e);\n@@ -108,17 +109,42 @@ public static Method findSetter(Class cls, String prop, Class param,\n     }\n \n     /**\n-     * Return the field with the given name, optionally throwing an exception \n+     * Invokes <code>cls.getDeclaredMethods()</code>, and returns the method\n+     * that matches the <code>name</code> and <code>param</code> arguments.\n+     * Avoids the exception thrown by <code>Class.getDeclaredMethod()</code>\n+     * for performance reasons. <code>param</code> may be null.\n+     *\n+     * @since 0.9.8\n+     */\n+    private static Method getDeclaredMethod(Class cls, String name,\n+        Class param) {\n+        Method[] methods = (Method[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredMethodsAction(cls));\n+        for (int i = 0 ; i < methods.length; i++) {\n+    \t    if (name.equals(methods[i].getName())) {\n+                Class[] methodParams = methods[i].getParameterTypes();\n+                if (param == null && methodParams.length == 0)\n+                    return methods[i];\n+                if (param != null && methodParams.length == 1\n+                    && param.equals(methodParams[0]))\n+                    return methods[i];\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    /**\n+     * Return the field with the given name, optionally throwing an exception\n      * if none.\n      */\n     public static Field findField(Class cls, String name, boolean mustExist) {\n         try {\n-            for (Class c = cls; c != null && c != Object.class; \n+            Field f;\n+            for (Class c = cls; c != null && c != Object.class;\n                 c = c.getSuperclass()) {\n-                try {\n-                    return c.getDeclaredField(name);\n-                } catch (NoSuchFieldException nsfe) {\n-                }\n+                f = getDeclaredField(c, name);\n+                if (f != null)\n+                    return f;\n             }\n         } catch (Exception e) {\n             throw new GeneralException(e);\n@@ -129,6 +155,23 @@ public static Field findField(Class cls, String name, boolean mustExist) {\n         return null;\n     }\n \n+    /**\n+     * Invokes <code>cls.getDeclaredFields()</code>, and returns the field\n+     * that matches the <code>name</code> argument.  Avoids the exception\n+     * thrown by <code>Class.getDeclaredField()</code> for performance reasons.\n+     *\n+     * @since 0.9.8\n+     */\n+    private static Field getDeclaredField(Class cls, String name) {\n+        Field[] fields = (Field[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredFieldsAction(cls));\n+        for (int i = 0 ; i < fields.length; i++) {\n+    \t    if (name.equals(fields[i].getName()))\n+\t\t        return fields[i];\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Return the value of the given field in the given object.\n      */\n@@ -149,7 +192,8 @@ public static Object get(Object target, Field field) {\n     private static void makeAccessible(AccessibleObject ao, int mods) {\n         try {\n             if (!Modifier.isPublic(mods) && !ao.isAccessible())\n-                ao.setAccessible(true);\n+                AccessController.doPrivileged(J2DoPrivHelper\n+                    .setAccessibleAction(ao, true));\n         } catch (SecurityException se) {\n             throw new UserException(_loc.get(\"reflect-security\", ao)).\n                 setFatal(true);\n@@ -483,6 +527,105 @@ public static void set(Object target, Field field, short value) {\n         }\n     }\n \n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, Object value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, boolean value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, byte value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, char value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, double value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, float value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, int value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, long value, Field field) {\n+        set(target, field, value);\n+    }\n+\n+    /**\n+     * Set the value of the given field in the given object.\n+     * Same behavior as above methods, but parameter ordering is rearranged\n+     * to simplify usage from generated bytecodes.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static void set(Object target, short value, Field field) {\n+        set(target, field, value);\n+    }\n+\n     /**\n      * Invoke the given setter on the given object.\n      */"},{"sha":"8066b3791db6a0b7ed68f73e22039c47e49b6dca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Possible values for the <code>openjpa.RuntimeUnenhancedClasses</code>\r\n+ * configuration setting.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface RuntimeUnenhancedClasssesModes {\r\n+    public final static int SUPPORTED = 0;\r\n+    public final static int UNSUPPORTED = 1;\r\n+    public final static int WARN = 2;\r\n+}\r"},{"sha":"87778962ad87a8e495c57f70f173ebc021533fa3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -34,6 +34,10 @@\n     protected void eventOccurred(LifecycleEvent event) {\n     }\n \n+    public void beforePersist(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n     public void afterPersist(LifecycleEvent event) {\n         eventOccurred(event);\n     }\n@@ -81,4 +85,24 @@ public void beforeDirtyFlushed(LifecycleEvent event) {\n     public void afterDirtyFlushed(LifecycleEvent event) {\n         eventOccurred(event);\n     }\n+\n+    public void afterRefresh(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void beforeDetach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void afterDetach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void beforeAttach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void afterAttach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n }"},{"sha":"2f7ffecf94568f4bce117064f081b38af4182159","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,7 +22,10 @@\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -60,8 +63,11 @@ public BeanLifecycleCallbacks(Class cls, Method method, boolean arg) {\n     \n     private Object newListener(Class cls) {\n         try {\n-            return cls.newInstance();\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(cls));\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException) t).getException();            \n             throw new UserException(_loc.get(\"bean-constructor\",\n                 cls.getName()), t);\n         }\n@@ -71,7 +77,8 @@ public void makeCallback(Object obj, Object rel, int eventType)\n         throws Exception {\n         Method callback = getCallbackMethod();\n         if (!callback.isAccessible())\n-            callback.setAccessible(true);\n+            AccessController.doPrivileged(J2DoPrivHelper.setAccessibleAction(\n+                callback, true));\n         if (requiresArgument())\n             callback.invoke(_listener, new Object[]{ obj, rel });\n         else"},{"sha":"3786a551c44162f7a8638237aee81e68d958e4d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import java.util.EventObject;\r\n+\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+\r\n+/**\r\n+ * Event fired when a {@link BrokerFactory} is created.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class BrokerFactoryEvent\r\n+    extends EventObject {\r\n+\r\n+    /**\r\n+     * Fired after a {@link BrokerFactory} has been fully created.\r\n+     * This happens after the factory has been made read-only.\r\n+     */\r\n+    public static final int BROKER_FACTORY_CREATED = 0;\r\n+\r\n+    private int eventType;\r\n+\r\n+    public BrokerFactoryEvent(BrokerFactory brokerFactory, int eventType) {\r\n+        super(brokerFactory);\r\n+        this.eventType = eventType;\r\n+    }\r\n+\r\n+    public BrokerFactory getBrokerFactory() {\r\n+        return (BrokerFactory) getSource();\r\n+    }\r\n+\r\n+    /**\r\n+     * @return one of the event type codes defined in this event class.\r\n+     */\r\n+    public int getEventType() {\r\n+        return eventType;\r\n+    }\r\n+}\r"},{"sha":"925d079398a3a31ba16ab24455c722632c04f555","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * {@link EventManager} responsible for notifying listeners of\r\n+ * {@link BrokerFactoryEvent}s.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class BrokerFactoryEventManager\r\n+    extends AbstractConcurrentEventManager {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage(\r\n+        BrokerFactoryEventManager.class);\r\n+\r\n+    private final Configuration _conf;\r\n+\r\n+    public BrokerFactoryEventManager(Configuration conf) {\r\n+        _conf = conf;\r\n+    }\r\n+\r\n+    protected void fireEvent(Object event, Object listener) {\r\n+        try {\r\n+            BrokerFactoryEvent e = (BrokerFactoryEvent) event;\r\n+            ((BrokerFactoryListener) listener).eventFired(e);\r\n+        } catch (Exception e) {\r\n+            _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME).warn(\r\n+                _loc.get(\"broker-factory-listener-exception\"), e);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"12ba15dc639e0da141570874ce330641bb505ab6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * Interface for listening to {@link BrokerFactoryEvent} objects. Should be\r\n+ * registered with a {@link OpenJPAConfiguration}'s\r\n+ * {@link BrokerFactoryEventManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface BrokerFactoryListener {\r\n+\r\n+    /**\r\n+     * Invoked after a {@link BrokerFactory} has been fully created.\r\n+     * This happens after the factory has been made read-only.\r\n+     */\r\n+    public void eventFired(BrokerFactoryEvent event);\r\n+}\r"},{"sha":"674ad7e40fe0d2f04ed84c32b5e70da23ebeb9ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -131,75 +131,68 @@ public synchronized void removeListener(Object listener) {\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasPersistListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_PERSIST)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_PERSIST)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_PERSIST);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_PERSIST)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_PERSIST);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDeleteListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_DELETE)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DELETE)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_DELETE);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_DELETE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasClearListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_CLEAR)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_CLEAR)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_CLEAR);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_CLEAR)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_CLEAR);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasLoadListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.AFTER_LOAD)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_LOAD);\n+        return hasHandlers(source, meta, LifecycleEvent.AFTER_LOAD);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasStoreListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_STORE)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_STORE)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_STORE);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_STORE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_STORE);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDirtyListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_DIRTY)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DIRTY)\n-            || hasCallbacks(source, meta, LifecycleEvent.BEFORE_DIRTY_FLUSHED)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DIRTY_FLUSHED)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_DIRTY);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_DIRTY)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DIRTY);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDetachListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_DETACH)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DETACH)\n-            || hasListeners(source, meta, LifecycleEvent.BEFORE_DETACH)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_DETACH);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_DETACH)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DETACH);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasAttachListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_ATTACH)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_ATTACH)\n-            || hasListeners(source, meta, LifecycleEvent.BEFORE_ATTACH)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_ATTACH);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_ATTACH)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_ATTACH);\n+    }\n+\n+    private boolean hasHandlers(Object source, ClassMetaData meta, int type) {\n+        return hasCallbacks(source, meta, type)\n+            || hasListeners(source, meta, type);\n     }\n \n     /**\n@@ -557,8 +550,10 @@ private static int getEventTypes(Object listener) {\n                 return types;\n             }\n \n-            if (listener instanceof PersistListener)\n+            if (listener instanceof PersistListener) {\n+                types |= 2 << LifecycleEvent.BEFORE_PERSIST;\n                 types |= 2 << LifecycleEvent.AFTER_PERSIST;\n+            }\n             if (listener instanceof ClearListener) {\n                 types |= 2 << LifecycleEvent.BEFORE_CLEAR;\n                 types |= 2 << LifecycleEvent.AFTER_CLEAR;"},{"sha":"77be27c91d97d60f8bded7c1d1599f846e10050b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,8 +23,10 @@\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n import java.util.Arrays;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -82,7 +84,8 @@ public boolean hasCallback(Object obj, int eventType) {\n     public void makeCallback(Object obj, Object arg, int eventType)\n         throws Exception {\n         if (!_callback.isAccessible())\n-            _callback.setAccessible(true);\n+            AccessController.doPrivileged(J2DoPrivHelper.setAccessibleAction(\n+                _callback, true));\n \n         if (_arg)\n             _callback.invoke(obj, new Object[]{ arg });\n@@ -101,7 +104,8 @@ public String toString() {\n     protected static Method getMethod(Class cls, String method, Class[] args) {\n         Class currentClass = cls;\n         do {\n-            Method[] methods = currentClass.getDeclaredMethods();\n+            Method[] methods = (Method[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodsAction(currentClass)); \n             for (int i = 0; i < methods.length; i++) {\n                 if (!method.equals(methods[i].getName()))\n                     continue;"},{"sha":"5036e44f836f259ed629e10402443c4ca90586dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -40,12 +40,12 @@\n     implements Externalizable {\n \n     /**\n-     * Names of added classes, upated and deleted Object IDs.\n+     * Names of added classes, updated and deleted Object IDs.\n      */\n     public static final int PAYLOAD_OIDS = 0;\n \n     /**\n-     * Names of added classes, added, upated and deleted Object IDs.\n+     * Names of added classes, added, updated and deleted Object IDs.\n      */\n     public static final int PAYLOAD_OIDS_WITH_ADDS = 1;\n \n@@ -54,6 +54,16 @@\n      */\n     public static final int PAYLOAD_EXTENTS = 2;\n \n+    /**\n+     * The local {@link BrokerFactory} detected that local data is out of date\n+     * with the data store. Stale object IDs will be in t he updated set,\n+     * although it is possible that records were actually deleted, rather than\n+     * updated.\n+     *\n+     * @since 1.0.0\n+     */\n+    public static final int PAYLOAD_LOCAL_STALE_DETECTION = 3;\n+\n     private static final Localizer s_loc = Localizer.forPackage\n         (RemoteCommitEvent.class);\n \n@@ -114,7 +124,9 @@ public Collection getPersistedObjectIds() {\n \n     /**\n      * When the event type is not PAYLOAD_EXTENTS, return the set of\n-     * object IDs for updated objects.\n+     * object IDs for updated objects. When the event type is\n+     * PAYLOAD_LOCAL_STALE_DETECTION, items in this list may actually have\n+     * been deleted from the database.\n      */\n     public Collection getUpdatedObjectIds() {\n         if (_payload == PAYLOAD_EXTENTS)"},{"sha":"3168a6b6aa71e54c4b4400dfbb1b1a75c2efe179","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","status":"modified","additions":30,"deletions":1,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,6 +23,7 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Collections;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.Broker;\n@@ -92,6 +93,21 @@ public void setTransmitPersistedObjectIds(boolean transmit) {\n         _transmitPersIds = transmit;\n     }\n \n+    /**\n+     * Adds an OpenJPA-internal listener to this RemoteCommitEventManager.\n+     * Listeners so registered will be fired before any that are registered\n+     * via {@link #addListener}. This means that the external listeners can\n+     * rely on internal caches and data structures being up-to-date by the\n+     * time that they are invoked.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void addInternalListener(RemoteCommitListener listen) {\n+        if (_provider == null)\n+            throw new UserException(_loc.get(\"no-provider\"));\n+        ((List) _listeners).add(0, listen);\n+    }\n+\n     public void addListener(RemoteCommitListener listen) {\n         if (_provider == null)\n             throw new UserException(_loc.get(\"no-provider\"));\n@@ -116,6 +132,19 @@ protected void fireEvent(Object event, Object listener) {\n         listen.afterCommit(ev);\n     }\n \n+    /**\n+     * Fire an event to local listeners only notifying them of a detected\n+     * stale record.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void fireLocalStaleNotification(Object oid) {\n+        RemoteCommitEvent ev = new RemoteCommitEvent(\n+            RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION,\n+            null, null, Collections.singleton(oid), null);\n+        fireEvent(ev);\n+    }\n+\n     //////////////////////////////////////\n     // TransactionListener implementation\n     //////////////////////////////////////\n@@ -139,7 +168,7 @@ private RemoteCommitEvent createRemoteCommitEvent(TransactionEvent event) {\n         Collection updates = null;\n         Collection deletes = null;\n \n-        if (broker.isLargeTransaction()) {\n+        if (broker.isTrackChangesByType()) {\n             payload = RemoteCommitEvent.PAYLOAD_EXTENTS;\n             addClassNames = toClassNames(event.getPersistedTypes());\n             updates = toClassNames(event.getUpdatedTypes());"},{"sha":"25cf716b9aba4100bf149f4159dae32da25535a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","status":"modified","additions":104,"deletions":49,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -25,13 +25,14 @@\n import java.io.InputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.io.OptionalDataException;\n import java.io.OutputStream;\n import java.net.InetAddress;\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.net.SocketException;\n import java.net.UnknownHostException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n@@ -40,11 +41,14 @@\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.Set;\n+import java.util.List;\n+import java.util.Collections;\n \n import org.apache.commons.pool.PoolableObjectFactory;\n import org.apache.commons.pool.impl.GenericObjectPool;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n@@ -68,14 +72,14 @@\n \n     private static final int DEFAULT_PORT = 5636;\n \n-    private static Localizer s_loc = Localizer.forPackage\n+    private static final Localizer s_loc = Localizer.forPackage\n         (TCPRemoteCommitProvider.class);\n     private static long s_idSequence = System.currentTimeMillis();\n \n     //\tA map of listen ports to listeners in this JVM. We might\n     //\twant to look into allowing same port, different interface --\n     //\tthat is not currently possible in a single JVM.\n-    private static Map s_portListenerMap = new HashMap();\n+    private static final Map s_portListenerMap = new HashMap();\n \n     private long _id;\n     private byte[] _localhost;\n@@ -85,7 +89,8 @@\n     private int _recoveryTimeMillis = 15000;\n     private TCPPortListener _listener;\n     private BroadcastQueue _broadcastQueue = new BroadcastQueue();\n-    private LinkedList _broadcastThreads = new LinkedList();\n+    private final List _broadcastThreads = Collections.synchronizedList(\n+        new LinkedList());\n \n     private ArrayList _addresses = new ArrayList();\n     private ReentrantLock _addressesLock;\n@@ -177,7 +182,7 @@ public void setNumBroadcastThreads(int numBroadcastThreads) {\n                 // Threads will not end until they send another pk.\n                 for (int i = numBroadcastThreads; i < cur; i++) {\n                     BroadcastWorkerThread worker = (BroadcastWorkerThread)\n-                        _broadcastThreads.removeFirst();\n+                        _broadcastThreads.remove(0);\n                     worker.setRunning(false);\n                 }\n             } else if (cur < numBroadcastThreads) {\n@@ -186,7 +191,7 @@ public void setNumBroadcastThreads(int numBroadcastThreads) {\n                     BroadcastWorkerThread wt = new BroadcastWorkerThread();\n                     wt.setDaemon(true);\n                     wt.start();\n-                    _broadcastThreads.addLast(wt);\n+                    _broadcastThreads.add(wt);\n                 }\n             }\n         }\n@@ -233,7 +238,8 @@ public void setAddresses(String names)\n                     hostname = host;\n                     tmpPort = DEFAULT_PORT;\n                 }\n-                InetAddress tmpAddress = InetAddress.getByName(hostname);\n+                InetAddress tmpAddress = (InetAddress) AccessController\n+                    .doPrivileged(J2DoPrivHelper.getByNameAction(hostname)); \n \n                 // bleair: For each address we would rather make use of\n                 // the jdk1.4 isLinkLocalAddress () || isLoopbackAddress ().\n@@ -258,8 +264,9 @@ public void setAddresses(String names)\n                     }\n                 }\n             }\n-        }\n-        finally {\n+        } catch (PrivilegedActionException pae) {\n+            throw (UnknownHostException) pae.getException();\n+        } finally {\n             _addressesLock.unlock();\n         }\n     }\n@@ -364,23 +371,25 @@ public void close() {\n         if (_listener != null)\n             _listener.removeProvider(this);\n \n+        // Remove Broadcast Threads then close sockets.\n+        _broadcastQueue.close();\n+\n+        // Wait for _broadcastThreads to get cleaned up.\n+        while(!_broadcastThreads.isEmpty()) {\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException ie) {\n+                // Ignore.\n+            }\n+        }\n+        \n         _addressesLock.lock();\n         try {\n             for (Iterator iter = _addresses.iterator(); iter.hasNext();)\n                 ((HostAddress) iter.next()).close();\n         } finally {\n             _addressesLock.unlock();\n         }\n-\n-        // We are done transmitting. Interrupt any worker threads.\n-        synchronized (_broadcastThreads) {\n-            Thread worker;\n-            for (Iterator iter = _broadcastThreads.iterator();\n-                iter.hasNext();) {\n-                worker = (Thread) iter.next();\n-                worker.interrupt();\n-            }\n-        }\n     }\n \n     /**\n@@ -390,18 +399,38 @@ public void close() {\n      */\n     private static class BroadcastQueue {\n \n-        LinkedList _packetQueue = new LinkedList();\n+        private LinkedList _packetQueue = new LinkedList();\n+        private boolean _closed = false;\n+\n+        public synchronized void close() {\n+            _closed = true;\n+            notifyAll();\n+        }\n+\n+        public synchronized boolean isClosed() {\n+            return _closed;\n+        }\n \n         public synchronized void addPacket(byte[] bytes) {\n             _packetQueue.addLast(bytes);\n             notify();\n         }\n \n+        /**\n+         * @return the bytes defining the packet to process, or\n+         * <code>null</code> if the queue is empty.\n+         */\n         public synchronized byte[] removePacket()\n             throws InterruptedException {\n-            while (_packetQueue.isEmpty())\n+            // only wait if the queue is still open. This allows processing\n+            // of events in the queue to continue, while avoiding sleeping\n+            // during shutdown.\n+            while (!_closed && _packetQueue.isEmpty())\n                 wait();\n-            return (byte[]) _packetQueue.removeFirst();\n+            if (_packetQueue.isEmpty())\n+                return null;\n+            else\n+                return (byte[]) _packetQueue.removeFirst();\n         }\n     }\n \n@@ -416,19 +445,28 @@ public synchronized void addPacket(byte[] bytes) {\n         public void run() {\n             while (_keepRunning) {\n                 try {\n-                    // This will block until there is a packet to send.\n+                    // This will block until there is a packet to send, or\n+                    // until the queue is closed.\n                     byte[] bytes = _broadcastQueue.removePacket();\n-                    sendUpdatePacket(bytes);\n+                    if (bytes != null)\n+                        sendUpdatePacket(bytes);\n+                    else if (_broadcastQueue.isClosed())\n+                        _keepRunning = false;\n                 } catch (InterruptedException e) {\n                     // End the thread.\n                     break;\n                 }\n             }\n+            remove();\n         }\n \n         public void setRunning(boolean keepRunning) {\n             _keepRunning = keepRunning;\n         }\n+        \n+        private void remove() {\n+            _broadcastThreads.remove(this);\n+        }\n     }\n \n     /**\n@@ -437,14 +475,11 @@ public void setRunning(boolean keepRunning) {\n     private static class TCPPortListener\n         implements Runnable {\n \n-        private static Localizer s_loc = Localizer.forPackage\n-            (TCPPortListener.class);\n-\n         private final Log _log;\n         private ServerSocket _receiveSocket;\n         private Thread _acceptThread;\n         private Set _receiverThreads = new HashSet();\n-        private Set _providers = new HashSet();\n+        private final Set _providers = new HashSet();\n \n         /**\n          * Cache the local IP address\n@@ -466,10 +501,15 @@ public void setRunning(boolean keepRunning) {\n          * Construct a new TCPPortListener configured to use the specified port.\n          */\n         private TCPPortListener(int port, Log log)\n-            throws UnknownHostException, IOException {\n+            throws IOException {\n             _port = port;\n             _log = log;\n-            _receiveSocket = new ServerSocket(_port);\n+            try {\n+                _receiveSocket = (ServerSocket) AccessController\n+                    .doPrivileged(J2DoPrivHelper.newServerSocketAction(_port));\n+            } catch (PrivilegedActionException pae) {\n+                throw (IOException) pae.getException();\n+            }\n             _localhost = InetAddress.getLocalHost().getAddress();\n \n             if (_log.isTraceEnabled())\n@@ -536,7 +576,8 @@ public void run() {\n                 try {\n                     s = null;\n                     // Block, waiting to accept new connection from a peer\n-                    s = _receiveSocket.accept();\n+                    s = (Socket) AccessController.doPrivileged(J2DoPrivHelper\n+                        .acceptAction(_receiveSocket));\n                     if (_log.isTraceEnabled()) {\n                         _log.trace(s_loc.get(\"tcp-received-connection\",\n                             s.getInetAddress().getHostAddress()\n@@ -548,6 +589,8 @@ public void run() {\n                     receiverThread.start();\n                     _receiverThreads.add(receiverThread);\n                 } catch (Exception e) {\n+                    if (e instanceof PrivilegedActionException)\n+                        e = ((PrivilegedActionException) e).getException();\n                     if (!(e instanceof SocketException) || _isRunning)\n                         if (_log.isWarnEnabled())\n                             _log.warn(s_loc.get(\"tcp-accept-error\"), e);\n@@ -637,19 +680,19 @@ public void run() {\n                                     + \":\" + _s.getPort()));\n                         }\n                         break;\n-                    } catch (Exception e) {\n+                    } catch (Throwable e) {\n                         if (_log.isWarnEnabled())\n                             _log.warn(s_loc.get(\"tcp-receive-error\"), e);\n                         break;\n-                    } catch (Throwable t) {\n                     }\n                 }\n                 // We are done receiving on this socket and this worker\n                 // thread is terminating.\n                 try {\n                     _in.close();\n-                    _s.close();\n-                } catch (Exception e) {\n+                    if (_s != null)\n+                        _s.close();\n+                } catch (IOException e) {\n                     _log.warn(s_loc.get(\"tcp-close-socket-error\",\n                         _s.getInetAddress().getHostAddress() + \":\"\n                             + _s.getPort()), e);\n@@ -658,11 +701,10 @@ public void run() {\n \n             /**\n              * Process an {@link InputStream} containing objects written\n-             * by {@link TCPRemoteCommitProvider#broadcastCommitInfo}.\n+             * by {@link TCPRemoteCommitProvider#broadcast(RemoteCommitEvent)}.\n              */\n             private void handle(InputStream in)\n-                throws IOException, ClassNotFoundException,\n-                OptionalDataException {\n+                throws IOException, ClassNotFoundException {\n                 // This will block waiting for the next\n                 ObjectInputStream ois = \n                     new Serialization.ClassResolvingObjectInputStream(in);\n@@ -726,12 +768,19 @@ private void handle(InputStream in)\n         private HostAddress(String host)\n             throws UnknownHostException {\n             int colon = host.indexOf(':');\n-            if (colon != -1) {\n-                _address = InetAddress.getByName(host.substring(0, colon));\n-                _port = Integer.parseInt(host.substring(colon + 1));\n-            } else {\n-                _address = InetAddress.getByName(host);\n-                _port = DEFAULT_PORT;\n+            try {\n+                if (colon != -1) {\n+                    _address = (InetAddress) AccessController\n+                        .doPrivileged(J2DoPrivHelper.getByNameAction(host\n+                            .substring(0, colon)));\n+                    _port = Integer.parseInt(host.substring(colon + 1));\n+                } else {\n+                    _address = (InetAddress) AccessController\n+                        .doPrivileged(J2DoPrivHelper.getByNameAction(host));\n+                    _port = DEFAULT_PORT;\n+                }\n+            } catch (PrivilegedActionException pae) {\n+                throw (UnknownHostException) pae.getException();\n             }\n             // -1 max wait == as long as it takes\n             _socketPool = new GenericObjectPool\n@@ -855,12 +904,18 @@ private void closeSocket(Socket s) {\n \n             public Object makeObject()\n                 throws IOException {\n-                Socket s = new Socket(_address, _port);\n-                if (log.isTraceEnabled()) {\n-                    log.trace(s_loc.get(\"tcp-open-connection\",\n-                        _address + \":\" + _port, \"\" + s.getLocalPort()));\n+                try {\n+                    Socket s = (Socket) AccessController\n+                        .doPrivileged(J2DoPrivHelper.newSocketAction(_address,\n+                            _port));\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(s_loc.get(\"tcp-open-connection\", _address\n+                            + \":\" + _port, \"\" + s.getLocalPort()));\n+                    }\n+                    return s;\n+                } catch (PrivilegedActionException pae) {\n+                    throw (IOException) pae.getException();\n                 }\n-                return s;\n             }\n \n             public void destroyObject(Object obj) {"},{"sha":"af5e1732824a0e201c3fcfd5b7dd08fdca1a14e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":132,"deletions":35,"changes":167,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,6 +26,9 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.lang.reflect.InvocationTargetException;\n import javax.transaction.Status;\n import javax.transaction.Synchronization;\n import javax.transaction.Transaction;\n@@ -35,11 +38,16 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAVersion;\n import org.apache.openjpa.datacache.DataCacheStoreManager;\n+import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.PCRegistry;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n+import org.apache.openjpa.event.BrokerFactoryEvent;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n+import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n import org.apache.openjpa.lib.util.concurrent.ReentrantLock;\n@@ -48,6 +56,7 @@\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.InternalException;\n \n /**\n  * Abstract implementation of the {@link BrokerFactory}\n@@ -90,6 +99,9 @@\n     // lifecycle listeners to pass to each broker\n     private transient Map _lifecycleListeners = null;\n \n+    // transaction listeners to pass to each broker\n+    private transient List _transactionListeners = null;\n+\n     /**\n      * Return the pooled factory matching the given configuration, or null\n      * if none.\n@@ -173,7 +185,7 @@ public Broker newBroker(String user, String pass, boolean managed,\n \n                 broker = newBrokerImpl(user, pass);\n                 broker.initialize(this, dsm, managed, connRetainMode);\n-                addLifecycleListeners(broker);\n+                addListeners(broker);\n \n                 // if we're using remote events, register the event manager so\n                 // that it can broadcast commit notifications from the broker\n@@ -197,16 +209,22 @@ public Broker newBroker(String user, String pass, boolean managed,\n     /**\n      * Add factory-registered lifecycle listeners to the broker.\n      */\n-    protected void addLifecycleListeners(BrokerImpl broker) {\n-        if (_lifecycleListeners == null || _lifecycleListeners.isEmpty())\n-            return;\n+    protected void addListeners(BrokerImpl broker) {\n+        if (_lifecycleListeners != null && !_lifecycleListeners.isEmpty()) {\n+            Map.Entry entry;\n+            for (Iterator itr = _lifecycleListeners.entrySet().iterator();\n+                itr.hasNext();) {\n+                entry = (Map.Entry) itr.next();\n+                broker.addLifecycleListener(entry.getKey(), (Class[])\n+                    entry.getValue());\n+            }\n+        }\n \n-        Map.Entry entry;\n-        for (Iterator itr = _lifecycleListeners.entrySet().iterator();\n-            itr.hasNext();) {\n-            entry = (Map.Entry) itr.next();\n-            broker.addLifecycleListener(entry.getKey(), (Class[])\n-                entry.getValue());\n+        if (_transactionListeners != null && !_transactionListeners.isEmpty()) {\n+            for (Iterator itr = _transactionListeners.iterator();\n+                itr.hasNext(); ) {\n+                broker.addTransactionListener(itr.next());\n+            }\n         }\n     }\n \n@@ -222,34 +240,79 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n         // cache persistent type names if not already\n         ClassLoader loader = _conf.getClassResolverInstance().\n             getClassLoader(getClass(), envLoader);\n+        Collection toRedefine = new ArrayList();\n         if (_pcClassNames == null) {\n             Collection clss = _conf.getMetaDataRepositoryInstance().\n                 loadPersistentTypes(false, loader);\n             if (clss.isEmpty())\n                 _pcClassNames = Collections.EMPTY_SET;\n             else {\n                 _pcClassNames = new ArrayList(clss.size());\n-                for (Iterator itr = clss.iterator(); itr.hasNext();)\n-                    _pcClassNames.add(((Class) itr.next()).getName());\n+                for (Iterator itr = clss.iterator(); itr.hasNext();) {\n+                    Class cls = (Class) itr.next();\n+                    _pcClassNames.add(cls.getName());\n+                    if (needsSub(cls))\n+                        toRedefine.add(cls);\n+                }\n                 _pcClassLoaders = new ReferenceHashSet(ReferenceHashSet.WEAK);\n                 _pcClassLoaders.add(loader);\n             }\n-            return;\n+        } else {\n+            // reload with this loader\n+            if (_pcClassLoaders.add(loader)) {\n+                for (Iterator itr = _pcClassNames.iterator(); itr.hasNext();) {\n+                    try {\n+                        Class cls =\n+                            Class.forName((String) itr.next(), true, loader);\n+                        if (needsSub(cls))\n+                            toRedefine.add(cls);\n+                    } catch (Throwable t) {\n+                        _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME)\n+                            .warn(null, t);\n+                    }\n+                }\n+            }\n         }\n \n-        // reload with this loader\n-        if (_pcClassLoaders.add(loader)) {\n-            for (Iterator itr = _pcClassNames.iterator(); itr.hasNext();) {\n-                try {\n-                    Class.forName((String) itr.next(), true, loader);\n-                } catch (Throwable t) {\n-                    _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME)\n-                        .warn(null, t);\n-                }\n+        if (JavaVersions.VERSION >= 5) {\n+            try {\n+                // This is Java 5 / 6 code. There might be a more elegant\n+                // way to bootstrap this into the system, but reflection\n+                // will get things working for now. We could potentially\n+                // do this by creating a new BrokerFactoryEvent type for\n+                // Broker creation, at which point we have an appropriate\n+                // classloader to use.\n+                Class cls = Class.forName(\n+                    \"org.apache.openjpa.enhance.ManagedClassSubclasser\");\n+                cls.getMethod(\"prepareUnenhancedClasses\", new Class[] {\n+                        OpenJPAConfiguration.class, Collection.class,\n+                        ClassLoader.class\n+                    })\n+                    .invoke(null, new Object[]{ _conf, toRedefine, envLoader });\n+            } catch (NoSuchMethodException e) {\n+                // should never happen in a properly-built installation\n+                throw new InternalException(e);\n+            } catch (IllegalAccessException e) {\n+                // should never happen in a properly-built installation\n+                throw new InternalException(e);\n+            } catch (InvocationTargetException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof OpenJPAException)\n+                    throw (OpenJPAException) cause;\n+                else\n+                    throw new InternalException(cause);\n+            } catch (ClassNotFoundException e) {\n+                // should never happen in a properly-built installation\n+                throw new InternalException(e);\n             }\n         }\n     }\n \n+    private boolean needsSub(Class cls) {\n+        return !cls.isInterface()\n+            && !PersistenceCapable.class.isAssignableFrom(cls);\n+    }\n+\n     public void addLifecycleListener(Object listener, Class[] classes) {\n         lock();\n         try {\n@@ -273,6 +336,29 @@ public void removeLifecycleListener(Object listener) {\n         }\n     }\n \n+    public void addTransactionListener(Object listener) {\n+        lock();\n+        try {\n+            assertOpen();\n+            if (_transactionListeners == null)\n+                _transactionListeners = new LinkedList();\n+            _transactionListeners.add(listener);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        lock();\n+        try {\n+            assertOpen();\n+            if (_transactionListeners != null)\n+                _transactionListeners.remove(listener);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n     /**\n      * Returns true if this broker factory is closed.\n      */\n@@ -440,10 +526,13 @@ protected void setup() {\n      * current transaction, or returns null if none.\n      */\n     protected BrokerImpl findTransactionalBroker(String user, String pass) {\n-        Transaction trans = null;\n+        Transaction trans;\n+        ManagedRuntime mr = _conf.getManagedRuntimeInstance();\n+        Object txKey;\n         try {\n-            trans = _conf.getManagedRuntimeInstance().getTransactionManager().\n+            trans = mr.getTransactionManager().\n                 getTransaction();\n+            txKey = mr.getTransactionKey();\n \n             if (trans == null\n                 || trans.getStatus() == Status.STATUS_NO_TRANSACTION\n@@ -455,7 +544,7 @@ protected BrokerImpl findTransactionalBroker(String user, String pass) {\n             throw new GeneralException(e);\n         }\n \n-        Collection brokers = (Collection) _transactional.get(trans);\n+        Collection brokers = (Collection) _transactional.get(txKey);\n         if (brokers != null) {\n             // we don't need to synchronize on brokers since one JTA transaction\n             // can never be active on multiple concurrent threads.\n@@ -517,7 +606,7 @@ public void makeReadOnly() {\n                 log.info(getFactoryInitializationBanner());\n             if (log.isTraceEnabled()) {\n                 Map props = _conf.toProperties(true);\n-                String lineSep = System.getProperty(\"line.separator\");\n+                String lineSep = J2DoPrivHelper.getLineSeparator();\n                 StringBuffer buf = new StringBuffer();\n                 Map.Entry entry;\n                 for (Iterator itr = props.entrySet().iterator();\n@@ -545,6 +634,12 @@ public void makeReadOnly() {\n             // avoid synchronization\n             _conf.setReadOnly(true);\n             _conf.instantiateAll();\n+\n+            // fire an event for all the broker factory listeners\n+            // registered on the configuration.\n+            _conf.getBrokerFactoryEventManager().fireEvent(\n+                new BrokerFactoryEvent(this,\n+                    BrokerFactoryEvent.BROKER_FACTORY_CREATED));\n         } finally {\n             unlock();\n         }\n@@ -583,7 +678,7 @@ private void assertOpen() {\n      * failed objects in the nested exceptions.\n      */\n     private void assertNoActiveTransaction() {\n-        Collection excs = null;\n+        Collection excs;\n         if (_transactional.isEmpty())\n             return;\n \n@@ -610,10 +705,10 @@ private void assertNoActiveTransaction() {\n      * @return true if synched with transaction, false otherwise\n      */\n     boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n-        Transaction trans = null;\n+        Transaction trans;\n         try {\n-            TransactionManager tm = broker.getManagedRuntime().\n-                getTransactionManager();\n+            ManagedRuntime mr = broker.getManagedRuntime();\n+            TransactionManager tm = mr.getTransactionManager();\n             trans = tm.getTransaction();\n             if (trans != null\n                 && (trans.getStatus() == Status.STATUS_NO_TRANSACTION\n@@ -632,11 +727,13 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n             // we don't need to synchronize on brokers or guard against multiple\n             // threads using the same trans since one JTA transaction can never\n             // be active on multiple concurrent threads.\n-            Collection brokers = (Collection) _transactional.get(trans);\n+            Object txKey = mr.getTransactionKey();\n+            Collection brokers = (Collection) _transactional.get(txKey);\n+            \n             if (brokers == null) {\n                 brokers = new ArrayList(2);\n-                _transactional.put(trans, brokers);\n-                trans.registerSynchronization(new RemoveTransactionSync(trans));\n+                _transactional.put(txKey, brokers);\n+                trans.registerSynchronization(new RemoveTransactionSync(txKey));\n             }\n             brokers.add(broker);\n             \n@@ -663,9 +760,9 @@ public Collection getOpenBrokers() {\n     private class RemoveTransactionSync\n         implements Synchronization {\n \n-        private final Transaction _trans;\n+        private final Object _trans;\n \n-        public RemoveTransactionSync(Transaction trans) {\n+        public RemoveTransactionSync(Object trans) {\n             _trans = trans;\n         }\n "},{"sha":"6bf11e427db04f10173d18d8a292375a7ae31ff8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":68,"deletions":14,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -75,9 +75,8 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n             case JavaTypes.COLLECTION:\n                 ProxyDataList c = (ProxyDataList) data;\n                 Collection c2 = (Collection) sm.newFieldProxy(fmd.getIndex());\n-                for (int i = 0; i < c.size(); i++)\n-                    c2.add(toNestedField(sm, fmd.getElement(), c.get(i),\n-                        fetch, context));\n+                c2 = toNestedFields(sm, fmd.getElement(), (Collection) data,\n+                    fetch, context);\n                 if (c2 instanceof Proxy) {\n                     ChangeTracker ct = ((Proxy) c2).getChangeTracker();\n                     if (ct != null)\n@@ -87,17 +86,18 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n             case JavaTypes.MAP:\n                 Map m = (Map) data;\n                 Map m2 = (Map) sm.newFieldProxy(fmd.getIndex());\n-                Map.Entry e;\n-                Object key;\n-                Object value;\n-                for (Iterator mi = m.entrySet().iterator(); mi.hasNext();) {\n-                    e = (Map.Entry) mi.next();\n-                    key = toNestedField(sm, fmd.getKey(), e.getKey(),\n-                        fetch, context);\n-                    value = toNestedField(sm, fmd.getElement(), e.getValue(),\n-                        fetch, context);\n-                    m2.put(key, value);\n-                }\n+                Collection keys = new ArrayList (m.size());\n+\n+                for (Iterator mi = m.entrySet().iterator(); mi.hasNext();)\n+                    keys.add(mi.next());\n+\n+                Object[] keyArray = keys.toArray();\n+                Object[] values = toNestedFields(sm, fmd.getElement(),\n+                    keys, fetch, context).toArray();\n+                int idx = 0;\n+                for (Iterator mi = m.entrySet().iterator(); mi.hasNext(); idx++)\n+                    m2.put(keyArray[idx], values[idx]);\n+\n                 return m2;\n             case JavaTypes.ARRAY:\n                 int length = Array.getLength(data);\n@@ -151,6 +151,51 @@ protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n         }\n     }\n \n+    /**\n+     * Transform the given data value to its field value. The data value\n+     * may be a key, value, or element of a map or collection.\n+     */\n+    protected Collection toNestedFields(OpenJPAStateManager sm, \n+        ValueMetaData vmd, Collection data, FetchConfiguration fetch,\n+        Object context) {\n+        if (data == null)\n+            return null;\n+\n+        Collection ret = new ArrayList(data.size());\n+        switch (vmd.getDeclaredTypeCode()) {\n+            case JavaTypes.DATE:\n+                for (Iterator itr=data.iterator(); itr.hasNext();)\n+                    ret.add(((Date)itr.next()).clone());\n+                return ret;\n+            case JavaTypes.LOCALE:\n+                for (Iterator itr=data.iterator(); itr.hasNext();)\n+                    ret.add((Locale) itr.next());\n+                return ret;\n+            case JavaTypes.PC:\n+                if (vmd.isEmbedded())\n+                    for (Iterator itr=data.iterator(); itr.hasNext();)\n+                        ret.add(toEmbeddedField(sm, vmd, itr.next(), fetch\n+                            , context));\n+                // no break\n+            case JavaTypes.PC_UNTYPED:\n+                Object[] r = toRelationFields(sm, data, fetch);\n+                if (r != null) {\n+                    for (int i = 0; i < r.length; i++)\n+                        if (r[i] != null)\n+                            ret.add(r[i]);\n+                        else {\n+                           ret.add(sm.getContext().getConfiguration().\n+                               getOrphanedKeyActionInstance().\n+                               orphan(data, sm, vmd));\n+                        }\n+                    return ret;\n+                }\n+            default:\n+                return data;\n+        }\n+    }\n+\n+    \n     /**\n      * Transform the given data into a relation field value. Default\n      * implementation assumes the data is an oid.\n@@ -160,6 +205,15 @@ protected Object toRelationField(OpenJPAStateManager sm, ValueMetaData vmd,\n         return sm.getContext().find(data, fetch, null, null, 0);\n     }\n \n+    /**\n+     * Transform the given data into relation field values. Default\n+     * implementation assumes the data is an oid.\n+     */\n+    protected Object[] toRelationFields(OpenJPAStateManager sm,\n+        Object data, FetchConfiguration fetch) {\n+        return sm.getContext().findAll((Collection) data, fetch, null, null, 0);\n+    }\n+\n     /**\n      * Transform the given data into an embedded PC field value. Default\n      * implementation assumes the data is an {@link AbstractPCData}."},{"sha":"a1e7b873c17cedb6d1352fc219e4ee43f9f81cbd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.util.OptimisticException;\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Handles attaching instances.\n@@ -234,8 +235,9 @@ Object attach(Object toAttach, PersistenceCapable into,\n \n         //### need to handle ACT_RUN without also ACT_CASCADE\n         ClassMetaData meta = _broker.getConfiguration().\n-            getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n-            _broker.getClassLoader(), true);\n+            getMetaDataRepositoryInstance().getMetaData(\n+                ImplHelper.getManagedInstance(toAttach).getClass(),\n+                _broker.getClassLoader(), true);\n         return getStrategy(toAttach).attach(this, toAttach, meta, into,\n             owner, ownerMeta, explicit);\n     }\n@@ -254,7 +256,8 @@ private int processArgument(Object obj) {\n      * Calculate proper attach strategy for instance.\n      */\n     private AttachStrategy getStrategy(Object toAttach) {\n-        PersistenceCapable pc = (PersistenceCapable) toAttach;\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n+            getBroker().getConfiguration());\n         if (pc.pcGetStateManager() instanceof AttachStrategy)\n             return (AttachStrategy) pc.pcGetStateManager();\n \n@@ -293,7 +296,8 @@ ProxyManager getProxyManager() {\n      * the (cached) attached copy.\n      */\n     PersistenceCapable getAttachedCopy(Object pc) {\n-        return (PersistenceCapable) _attached.get(pc);\n+        return ImplHelper.toPersistenceCapable(_attached.get(pc),\n+            getBroker().getConfiguration());\n     }\n \n     /**"},{"sha":"4af5d2a8c8c9e874a7ef8f3d29e892f8c26bec9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,11 +20,13 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n \n import org.apache.openjpa.conf.BrokerFactoryValue;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -113,7 +115,9 @@ private static BrokerFactory invokeFactory(ConfigurationProvider conf,\n         } catch (NoSuchMethodException nsme) {\n             // handle cases where there is a mismatch between loaders by falling\n             // back to the configuration's class loader for broker resolution\n-            cls = getFactoryClass(conf, conf.getClass().getClassLoader());\n+            cls = getFactoryClass(conf,\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(conf.getClass()))); \n             meth = cls.getMethod(methodName, FACTORY_ARGS); \n         }\n \n@@ -135,7 +139,8 @@ private static String getFactoryClassName(ConfigurationProvider conf,\n     private static Class getFactoryClass(ConfigurationProvider conf,\n         ClassLoader loader) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction()); \n \n         Object cls = BrokerFactoryValue.get(conf);\n         if (cls instanceof Class)"},{"sha":"33922086357cfe86e1fe79401136c2988b6afd73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,8 +19,6 @@\n package org.apache.openjpa.kernel;\n \n import java.util.Collection;\n-import javax.resource.cci.Connection;\n-import javax.resource.cci.LocalTransaction;\n import javax.transaction.Synchronization;\n \n import org.apache.openjpa.ee.ManagedRuntime;\n@@ -41,8 +39,7 @@\n  * @author Abe White\n  */\n public interface Broker\n-    extends Synchronization, Connection, LocalTransaction,\n-    javax.resource.spi.LocalTransaction, Closeable, StoreContext,\n+    extends Synchronization, Closeable, StoreContext,\n     ConnectionRetainModes, DetachState, LockLevels,\n     RestoreState, AutoClear, AutoDetach, CallbackModes {\n "},{"sha":"0592d73f1846b6789170645d01594da933242d35","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -82,6 +82,23 @@ public Broker newBroker(String user, String pass, boolean managed,\n      */\n     public void removeLifecycleListener(Object listener);\n \n+    /**\n+     * Register a listener for transaction-related events on the specified\n+     * classes. It will be registered with all {@link Broker}s created\n+     * from this instance moving forward.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events. It will no longer\n+     * be registered with new {@link Broker}s created from this instance.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void removeTransactionListener(Object listener);\n+\n     /**\n      * Close the factory.\n      */"},{"sha":"f81f6609526a647e36a38b8f5a02006165f1ce29","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":107,"deletions":183,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.AbstractCollection;\n import java.util.ArrayList;\n import java.util.BitSet;\n@@ -32,16 +33,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.resource.NotSupportedException;\n-import javax.resource.ResourceException;\n-import javax.resource.cci.Connection;\n-import javax.resource.cci.ConnectionMetaData;\n-import javax.resource.cci.Interaction;\n-import javax.resource.cci.InteractionSpec;\n-import javax.resource.cci.LocalTransaction;\n-import javax.resource.cci.Record;\n-import javax.resource.cci.ResourceWarning;\n-import javax.resource.cci.ResultSetInfo;\n import javax.transaction.Status;\n import javax.transaction.Synchronization;\n \n@@ -62,6 +53,7 @@\n import org.apache.openjpa.event.TransactionEventManager;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashMap;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n@@ -158,7 +150,6 @@\n     private ManagedRuntime _runtime = null;\n     private LockManager _lm = null;\n     private InverseManager _im = null;\n-    private JCAHelper _jca = null;\n     private ReentrantLock _lock = null;\n     private OpCallbacks _call = null;\n     private RuntimeExceptionTranslator _extrans = null;\n@@ -182,6 +173,7 @@\n     private Set _updatedClss = null;\n     private Set _deletedClss = null;\n     private Set _pending = null;\n+    private int findAllDepth = 0;\n \n     // track instances that become transactional after the first savepoint\n     // (the first uses the transactional cache)\n@@ -228,7 +220,8 @@\n     private int _lifeCallbackMode = 0;\n \n     private boolean _initializeWasInvoked = false;\n-    \n+    private static final Object[] EMPTY_OBJECTS = new Object[0];\n+\n     /**\n      * Set the persistence manager's authentication. This is the first\n      * method called after construction.\n@@ -256,8 +249,8 @@ public void setAuthentication(String user, String pass) {\n     public void initialize(AbstractBrokerFactory factory,\n         DelegatingStoreManager sm, boolean managed, int connMode) {\n         _initializeWasInvoked = true;\n-        _loader = Thread.currentThread().getContextClassLoader();\n-        _jca = new JCAHelper();\n+        _loader = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getContextClassLoaderAction());\n         _conf = factory.getConfiguration();\n         _compat = _conf.getCompatibilityInstance();\n         _factory = factory;\n@@ -320,30 +313,6 @@ protected Map newManagedObjectCache() {\n         return new ReferenceHashMap(ReferenceMap.HARD, ReferenceMap.SOFT);\n     }\n \n-    //////////////////////////////////////////\n-    // Implementation of Connection interface\n-    //////////////////////////////////////////\n-\n-    public ConnectionMetaData getMetaData()\n-        throws ResourceException {\n-        return _jca;\n-    }\n-\n-    public Interaction createInteraction()\n-        throws ResourceException {\n-        return _jca;\n-    }\n-\n-    public LocalTransaction getLocalTransaction()\n-        throws ResourceException {\n-        return this;\n-    }\n-\n-    public ResultSetInfo getResultSetInfo()\n-        throws ResourceException {\n-        return _jca;\n-    }\n-\n     //////////////////////////////////\n     // Implementation of StoreContext\n     //////////////////////////////////\n@@ -581,11 +550,11 @@ public void setPopulateDataCache(boolean cache) {\n         _populateDataCache = cache;\n     }\n \n-    public boolean isLargeTransaction() {\n+    public boolean isTrackChangesByType() {\n         return _largeTransaction;\n     }\n \n-    public void setLargeTransaction(boolean largeTransaction) {\n+    public void setTrackChangesByType(boolean largeTransaction) {\n         assertOpen();\n         _largeTransaction = largeTransaction;\n     }\n@@ -731,8 +700,6 @@ public void setTransactionListenerCallbackMode(int mode) {\n \n     /**\n      * Fire given transaction event, handling any exceptions appropriately.\n-     *\n-     * @return whether events are being processed at this time\n      */\n     private void fireTransactionEvent(TransactionEvent trans) {\n         if (_transEventManager != null)\n@@ -788,7 +755,7 @@ protected Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n                     // after making instance transactional for locking\n                     if (!sm.isTransactional() && useTransactionalState(fetch))\n                         sm.transactional();\n-                    boolean loaded = false;\n+                    boolean loaded;\n                     try {\n                         loaded = sm.load(fetch, StateManagerImpl.LOAD_FGS, \n                             exclude, edata, false);\n@@ -900,6 +867,8 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n      */\n     protected Object[] findAll(Collection oids, FetchConfiguration fetch,\n         BitSet exclude, Object edata, int flags, FindCallbacks call) {\n+        findAllDepth ++;\n+\n         // throw any exceptions for null oids up immediately\n         if (oids == null)\n             throw new NullPointerException(\"oids == null\");\n@@ -909,7 +878,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         // we have to use a map of oid->sm rather than a simple\n         // array, so that we make sure not to create multiple sms for equivalent\n         // oids if the user has duplicates in the given array\n-        _loading = new HashMap((int) (oids.size() * 1.33 + 1));\n+        if (_loading == null)\n+            _loading = new HashMap((int) (oids.size() * 1.33 + 1));\n+\n         if (call == null)\n             call = this;\n         if (fetch == null)\n@@ -1004,7 +975,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         } catch (RuntimeException re) {\n             throw new GeneralException(re);\n         } finally {\n-            _loading = null;\n+            findAllDepth--;\n+            if (findAllDepth == 0)\n+                _loading = null;\n             endOperation();\n         }\n     }\n@@ -1100,6 +1073,14 @@ public Object newObjectId(Class cls, Object val) {\n                         return new ObjectId(cls, val);\n                     return val;\n                 }\n+\n+                // stringified app id?\n+                if (val instanceof String \n+                    && !_conf.getCompatibilityInstance().\n+                        getStrictIdentityValues()\n+                    && !Modifier.isAbstract(cls.getModifiers()))\n+                    return PCRegistry.newObjectId(cls, (String) val);\n+\n                 Object[] arr = (val instanceof Object[]) ? (Object[]) val\n                     : new Object[]{ val };\n                 return ApplicationIds.fromPKValues(arr, meta);\n@@ -1568,7 +1549,7 @@ public void rollbackToSavepoint(String savepoint) {\n             Collection saved = save.rollback(_savepoints.values());\n             if (_savepointCache != null)\n                 _savepointCache.clear();\n-            if (_transCache != null) {\n+            if (hasTransactionalObjects()) {\n                 // build up a new collection of states\n                 TransactionalCache oldTransCache = _transCache;\n                 TransactionalCache newTransCache = new TransactionalCache\n@@ -2140,8 +2121,10 @@ protected void endTransaction(int status) {\n         _fc.setWriteLockLevel(LOCK_NONE);\n         _fc.setLockTimeout(-1);\n \n-        Collection transStates = _transCache;\n-        if (transStates == null)\n+        Collection transStates;\n+        if (hasTransactionalObjects())\n+            transStates = _transCache;\n+        else\n             transStates = Collections.EMPTY_LIST;\n \n         // fire after rollback/commit event\n@@ -3098,7 +3081,7 @@ public Object detach(Object obj, OpCallbacks call) {\n         if (objs == null)\n             return null;\n         if (objs.isEmpty())\n-            return new Object[0];\n+            return EMPTY_OBJECTS;\n         if (call == null)\n             call = _call;\n \n@@ -3185,7 +3168,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         if (objs == null)\n             return null;\n         if (objs.isEmpty())\n-            return new Object[0];\n+            return EMPTY_OBJECTS;\n \n         beginOperation(true);\n         try {\n@@ -3734,16 +3717,26 @@ protected Collection getManagedStates() {\n      * Return a copy of all transactional state managers.\n      */\n     protected Collection getTransactionalStates() {\n-        if (_transCache == null)\n+        if (!hasTransactionalObjects())\n             return Collections.EMPTY_LIST;\n         return _transCache.copy();\n     }\n \n+    /**\n+     * Whether or not there are any transactional objects in the current\n+     * persistence context. If there are any instances with untracked state,\n+     * this method will cause those instances to be scanned.\n+     */\n+    private boolean hasTransactionalObjects() {\n+        _cache.dirtyCheck();\n+        return _transCache != null;\n+    }\n+\n     /**\n      * Return a copy of all dirty state managers.\n      */\n     protected Collection getDirtyStates() {\n-        if (_transCache == null)\n+        if (!hasTransactionalObjects())\n             return Collections.EMPTY_LIST;\n \n         return _transCache.copyDirty();\n@@ -3807,7 +3800,7 @@ void addToTransaction(StateManagerImpl sm) {\n \n         lock();\n         try {\n-            if (_transCache == null)\n+            if (!hasTransactionalObjects())\n                 _transCache = new TransactionalCache(_orderDirty);\n             _transCache.addClean(sm);\n         } finally {\n@@ -3823,6 +3816,8 @@ void removeFromTransaction(StateManagerImpl sm) {\n         lock();\n         try {\n             if (_transCache != null)\n+                // intentional direct access; we don't want to recompute\n+                // dirtiness while removing instances from the transaction\n                 _transCache.remove(sm);\n             if (_derefCache != null && !sm.isPersistent())\n                 _derefCache.remove(sm);\n@@ -3850,7 +3845,7 @@ void setDirty(StateManagerImpl sm, boolean firstDirty) {\n             lock();\n             try {\n                 // cache dirty instance\n-                if (_transCache == null)\n+                if (!hasTransactionalObjects())\n                     _transCache = new TransactionalCache(_orderDirty);\n                 _transCache.addDirty(sm);\n \n@@ -4123,7 +4118,9 @@ public Object newInstance(Class cls) {\n         // 1.5 doesn't initialize classes without a true Class.forName\n         if (!PCRegistry.isRegistered(cls)) {\n             try {\n-                Class.forName(cls.getName(), true, cls.getClassLoader());\n+                Class.forName(cls.getName(), true, \n+                    (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(cls)));\n             } catch (Throwable t) {\n             }\n         }\n@@ -4132,8 +4129,9 @@ public Object newInstance(Class cls) {\n \n     public Object getObjectId(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcFetchObjectId();\n+        if (ImplHelper.isManageable(obj))\n+            return (ImplHelper.toPersistenceCapable(obj, _conf))\n+                .pcFetchObjectId();\n         return null;\n     }\n \n@@ -4150,58 +4148,62 @@ public int getLockLevel(Object o) {\n \n     public Object getVersion(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcGetVersion();\n+        if (ImplHelper.isManageable(obj))\n+            return (ImplHelper.toPersistenceCapable(obj, _conf)).pcGetVersion();\n         return null;\n     }\n \n     public boolean isDirty(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcIsDirty();\n+        if (ImplHelper.isManageable(obj)) {\n+            PersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, _conf);\n+            return pc.pcIsDirty();\n+        }\n         return false;\n     }\n \n     public boolean isTransactional(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcIsTransactional();\n+        if (ImplHelper.isManageable(obj))\n+            return (ImplHelper.toPersistenceCapable(obj, _conf))\n+                .pcIsTransactional();\n         return false;\n     }\n \n     public boolean isPersistent(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcIsPersistent();\n+        if (ImplHelper.isManageable(obj))\n+            return (ImplHelper.toPersistenceCapable(obj, _conf)).pcIsPersistent();\n         return false;\n     }\n \n     public boolean isNew(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcIsNew();\n+        if (ImplHelper.isManageable(obj))\n+            return (ImplHelper.toPersistenceCapable(obj, _conf)).pcIsNew();\n         return false;\n     }\n \n     public boolean isDeleted(Object obj) {\n         assertOpen();\n-        if (obj instanceof PersistenceCapable)\n-            return ((PersistenceCapable) obj).pcIsDeleted();\n+        if (ImplHelper.isManageable(obj))\n+            return (ImplHelper.toPersistenceCapable(obj, _conf)).pcIsDeleted();\n         return false;\n     }\n \n     public boolean isDetached(Object obj) {\n-        if (!(obj instanceof PersistenceCapable))\n+        if (!(ImplHelper.isManageable(obj)))\n             return false;\n \n-        PersistenceCapable pc = (PersistenceCapable) obj;\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, _conf);\n         Boolean detached = pc.pcIsDetached();\n         if (detached != null)\n             return detached.booleanValue();\n \n         // last resort: instance is detached if it has a store record\n         ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n-            getMetaData(pc.getClass(), _loader, true);\n+            getMetaData(ImplHelper.getManagedInstance(pc).getClass(),\n+                _loader, true);\n         Object oid = ApplicationIds.create(pc, meta);\n         if (oid == null)\n             return false;\n@@ -4221,8 +4223,8 @@ public OpenJPAStateManager getStateManager(Object obj) {\n      */\n     protected StateManagerImpl getStateManagerImpl(Object obj,\n         boolean assertThisContext) {\n-        if (obj instanceof PersistenceCapable) {\n-            PersistenceCapable pc = (PersistenceCapable) obj;\n+        if (ImplHelper.isManageable(obj)) {\n+            PersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, _conf);\n             if (pc.pcGetGenericContext() == this)\n                 return (StateManagerImpl) pc.pcGetStateManager();\n             if (assertThisContext && pc.pcGetGenericContext() != null)\n@@ -4252,18 +4254,22 @@ protected StateManagerImpl getStateManagerImplById(Object oid,\n     protected PersistenceCapable assertPersistenceCapable(Object obj) {\n         if (obj == null)\n             return null;\n-        if (obj instanceof PersistenceCapable)\n-            return (PersistenceCapable) obj;\n+        if (ImplHelper.isManageable(obj))\n+            return ImplHelper.toPersistenceCapable(obj, _conf);\n \n-        // check for difference instances of the PersistenceCapable interface\n+        // check for different instances of the PersistenceCapable interface\n         // and throw a better error that mentions the class loaders\n         Class[] intfs = obj.getClass().getInterfaces();\n         for (int i = 0; intfs != null && i < intfs.length; i++) {\n             if (intfs[i].getName().equals(PersistenceCapable.class.getName())) {\n                 throw new UserException(_loc.get(\"pc-loader-different\",\n                     Exceptions.toString(obj),\n-                    PersistenceCapable.class.getClassLoader(),\n-                    intfs[i].getClassLoader())).setFailedObject(obj);\n+                    (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            PersistenceCapable.class)),\n+                    (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(intfs[i]))))\n+                    .setFailedObject(obj);\n             }\n         }\n \n@@ -4349,6 +4355,7 @@ public Object processReturn(Object oid, OpenJPAStateManager sm) {\n         private Map _conflicts = null; // conflict oid -> new sm\n         private Map _news = null; // tmp id -> new sm\n         private Collection _embeds = null; // embedded/non-persistent sms\n+        private Collection _untracked = null; // hard refs to untracked sms\n \n         /**\n          * Constructor; supply primary cache map.\n@@ -4399,6 +4406,12 @@ public StateManagerImpl getById(Object oid, boolean allowNew) {\n          * Call this method when a new state manager initializes itself.\n          */\n         public void add(StateManagerImpl sm) {\n+            if (!sm.isIntercepting()) {\n+                if (_untracked == null)\n+                    _untracked = new HashSet();\n+                _untracked.add(sm);\n+            }\n+\n             if (!sm.isPersistent() || sm.isEmbedded()) {\n                 if (_embeds == null)\n                     _embeds = new ReferenceHashSet(ReferenceHashSet.WEAK);\n@@ -4447,12 +4460,15 @@ public void remove(Object id, StateManagerImpl sm) {\n                             _conflicts.put(id, orig); // put back\n                     }\n                 }\n-            } else\n-            if ((_embeds == null || !_embeds.remove(sm)) && _news != null) {\n+            } else if ((_embeds == null || !_embeds.remove(sm))\n+                && _news != null) {\n                 orig = _news.remove(id);\n                 if (orig != null && orig != sm)\n                     _news.put(id, orig); // put back\n             }\n+\n+            if (_untracked != null)\n+                _untracked.remove(sm);\n         }\n \n         /**\n@@ -4576,6 +4592,8 @@ public void clear() {\n                 _news.clear();\n             if (_embeds != null)\n                 _embeds.clear();\n+            if (_untracked != null)\n+                _untracked.clear();\n         }\n \n         /**\n@@ -4585,6 +4603,14 @@ public void clearNew() {\n             if (_news != null)\n                 _news.clear();\n         }\n+\n+        private void dirtyCheck() {\n+            if (_untracked == null)\n+                return;\n+\n+            for (Iterator iter = _untracked.iterator(); iter.hasNext(); )\n+                ((StateManagerImpl) iter.next()).dirtyCheck();\n+        }\n     }\n \n     /**\n@@ -4837,106 +4863,4 @@ public void remove() {\n             };\n         }\n     }\n-\n-    /**\n-     * Helper class to implement JCA interfaces. This is placed in a\n-     * separate class so that its methods do not interfere with the\n-     * persistence manager APIs.\n-     */\n-    private class JCAHelper\n-        implements Interaction, ResultSetInfo, ConnectionMetaData {\n-        ///////////////////////////////////////////\n-        // Implementation of Interaction interface\n-        ///////////////////////////////////////////\n-\n-        public void clearWarnings() {\n-        }\n-\n-        public Record execute(InteractionSpec spec, Record input)\n-            throws ResourceException {\n-            throw new NotSupportedException(\"execute\");\n-        }\n-\n-        public boolean execute(InteractionSpec spec, Record input,\n-            Record output)\n-            throws ResourceException {\n-            throw new NotSupportedException(\"execute\");\n-        }\n-\n-        public Connection getConnection() {\n-            return BrokerImpl.this;\n-        }\n-\n-        public ResourceWarning getWarnings() {\n-            return null;\n-        }\n-\n-        public void close() {\n-        }\n-\n-        /////////////////////////////////////////////\n-        // Implementation of ResultSetInfo interface\n-        /////////////////////////////////////////////\n-\n-        public boolean deletesAreDetected(int type) {\n-            return true;\n-        }\n-\n-        public boolean insertsAreDetected(int type) {\n-            return true;\n-        }\n-\n-        public boolean othersDeletesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean othersInsertsAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean othersUpdatesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean ownDeletesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean ownInsertsAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean ownUpdatesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean supportsResultSetType(int type) {\n-            return true;\n-        }\n-\n-        public boolean supportsResultTypeConcurrency(int type,\n-            int concurrency) {\n-            return true;\n-        }\n-\n-        public boolean updatesAreDetected(int type) {\n-            return true;\n-        }\n-\n-        ///////////////////////////////////////////////////\n-        // Implementation of ConnectionMetaData interface\n-        ///////////////////////////////////////////////////\n-\n-        public String getEISProductName() {\n-            return _conf.getConnectionDriverName();\n-        }\n-\n-        public String getEISProductVersion() {\n-            return \"\";\n-        }\n-\n-        public String getUserName() {\n-            return _user;\n-        }\n-    }\n }"},{"sha":"4142670916b9834835468a44bcef88977eae1a5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":4,"deletions":45,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -21,11 +21,6 @@\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n-import javax.resource.ResourceException;\n-import javax.resource.cci.ConnectionMetaData;\n-import javax.resource.cci.Interaction;\n-import javax.resource.cci.LocalTransaction;\n-import javax.resource.cci.ResultSetInfo;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.ee.ManagedRuntime;\n@@ -749,17 +744,17 @@ public void setPopulateDataCache(boolean cache) {\n         }\n     }\n \n-    public boolean isLargeTransaction() {\n+    public boolean isTrackChangesByType() {\n         try {\n-            return _broker.isLargeTransaction();\n+            return _broker.isTrackChangesByType();\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public void setLargeTransaction(boolean largeTransaction) {\n+    public void setTrackChangesByType(boolean largeTransaction) {\n         try {\n-            _broker.setLargeTransaction(largeTransaction);\n+            _broker.setTrackChangesByType(largeTransaction);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n@@ -1358,42 +1353,6 @@ public void afterCompletion(int status) {\n         }\n     }\n \n-    //////////////////////////////////////////\n-    // Implementation of Connection interface\n-    //////////////////////////////////////////\n-\n-    public ConnectionMetaData getMetaData()\n-        throws ResourceException {\n-        try {\n-            return _broker.getMetaData();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public Interaction createInteraction()\n-        throws ResourceException {\n-        try {\n-            return _broker.createInteraction();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public LocalTransaction getLocalTransaction()\n-        throws ResourceException {\n-        return this;\n-    }\n-\n-    public ResultSetInfo getResultSetInfo()\n-        throws ResourceException {\n-        try {\n-            return _broker.getResultSetInfo();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n     public Object newInstance(Class cls) {\n         try {\n             return _broker.newInstance(cls);"},{"sha":"bcf88c7338ebaa10cf132e5a1c2a0eaf67dbd710","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -162,6 +162,22 @@ public void removeLifecycleListener(Object listener) {\n         }\n     }\n \n+    public void addTransactionListener(Object listener) {\n+        try {\n+            _factory.addTransactionListener(listener);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        try {\n+            _factory.removeTransactionListener(listener);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public void close() {\n         try {\n             _factory.close();"},{"sha":"dcbe31ecc42fece127fa3bc9e56aba9391459d43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -183,17 +183,17 @@ public FetchConfiguration setRootClasses(Collection roots) {\n         }\n     }\n \n-    public boolean getQueryCache() {\n+    public boolean getQueryCacheEnabled() {\n         try {\n-            return _fetch.getQueryCache();\n+            return _fetch.getQueryCacheEnabled();\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public FetchConfiguration setQueryCache(boolean cache) {\n+    public FetchConfiguration setQueryCacheEnabled(boolean cache) {\n         try {\n-            _fetch.setQueryCache(cache);\n+            _fetch.setQueryCacheEnabled(cache);\n             return this;\n         } catch (RuntimeException re) {\n             throw translate(re);"},{"sha":"8ef8bdc01a1289a42a45590d84c75873d86f9856","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -162,7 +162,7 @@ else if (detachMode == DETACH_ALL)\n         // create bitset of fields to detach; if mode is all we can use\n         // currently loaded bitset clone, since we know all fields are loaded\n         if (idxs != null) {\n-            if (detachMode == DETACH_FGS)\n+            if (detachMode == DETACH_FETCH_GROUPS)\n                 setFetchGroupFields(broker, sm, idxs);\n             else\n                 idxs.or(sm.getLoaded());"},{"sha":"18fd09b0e2dc420cb014ca472f3a63d1eed8ab94","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,13 @@\n \n     /**\n      * Mode to detach all fields in the current fetch groups.\n+     * \n+     * @since 0.9.8\n+     */\n+    public static final int DETACH_FETCH_GROUPS = 0;\n+\n+    /**\n+     * @deprecated\n      */\n     public static final int DETACH_FGS = 0;\n "},{"sha":"ce3f238451a0561aa9932695ad59d2dd70cc80c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Handles attaching instances with detached state.\n@@ -46,19 +47,21 @@ protected Object getDetachedObjectId(AttachManager manager,\n         if (toAttach == null)\n             return null;\n \n-        PersistenceCapable pc = (PersistenceCapable) toAttach;\n         Broker broker = manager.getBroker();\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n+            broker.getConfiguration());\n         ClassMetaData meta = broker.getConfiguration().\n-            getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n-            broker.getClassLoader(), true);\n+            getMetaDataRepositoryInstance().getMetaData(\n+                ImplHelper.getManagedInstance(toAttach).getClass(),\n+                broker.getClassLoader(), true);\n \n         switch (meta.getIdentityType()) {\n             case ClassMetaData.ID_DATASTORE:\n                 Object[] state = (Object[]) pc.pcGetDetachedState();\n                 if (state == null)\n                     return null;\n                 return broker\n-                    .newObjectId(toAttach.getClass(), (String) state[0]);\n+                    .newObjectId(toAttach.getClass(), state[0]);\n             case ClassMetaData.ID_APPLICATION:\n                 return ApplicationIds.create(pc, meta);\n             default:\n@@ -68,14 +71,16 @@ protected Object getDetachedObjectId(AttachManager manager,\n \n     protected void provideField(Object toAttach, StateManagerImpl sm,\n         int field) {\n-        sm.provideField((PersistenceCapable) toAttach, this, field);\n+        sm.provideField(ImplHelper.toPersistenceCapable(toAttach,\n+            sm.getContext().getConfiguration()), this, field);\n     }\n \n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n         ValueMetaData ownerMeta, boolean explicit) {\n         BrokerImpl broker = manager.getBroker();\n-        PersistenceCapable pc = (PersistenceCapable) toAttach;\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n+            manager.getBroker().getConfiguration());\n \n         Object[] state = (Object[]) pc.pcGetDetachedState();\n         boolean embedded = ownerMeta != null && ownerMeta.isEmbeddedPC();\n@@ -103,7 +108,9 @@ public Object attach(AttachManager manager, Object toAttach,\n         } else if (!embedded && into == null) {\n             Object id = getDetachedObjectId(manager, pc);\n             if (id != null)\n-                into = (PersistenceCapable) broker.find(id, true, null);\n+                into =\n+                    ImplHelper.toPersistenceCapable(broker.find(id, true, null),\n+                        manager.getBroker().getConfiguration());\n             if (into == null) {\n                 // we mark objects that were new on detach by putting an empty\n                 // extra element in their detached state array\n@@ -114,7 +121,8 @@ public Object attach(AttachManager manager, Object toAttach,\n                 // will throw an OVE if it was not PNEW when it was detached\n                 if (!isNew)\n                     throw new OptimisticException(_loc.get(\"attach-deleted\",\n-                        pc.getClass(), id)).setFailedObject(id);\n+                        ImplHelper.getManagedInstance(pc).getClass(), id))\n+                        .setFailedObject(id);\n \n                 // if the instance does not exist, we assume that it was\n                 // made persistent in a new transaction, detached, and then\n@@ -185,6 +193,6 @@ public Object attach(AttachManager manager, Object toAttach,\n                     break;\n             }\n         }\n-        return into;\n+        return ImplHelper.getManagedInstance(into);\n     }\n }"},{"sha":"d91b30ef56824ce285f7e887f3bd909caf25eda1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -36,6 +36,7 @@\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Internal state manager for detached instances. Does not fully\n@@ -93,12 +94,13 @@ public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n         ValueMetaData ownerMeta, boolean explicit) {\n         BrokerImpl broker = manager.getBroker();\n-        StateManagerImpl sm = null;\n+        StateManagerImpl sm;\n         if (_embedded) {\n             if (_dirty.length () > 0)\n                 owner.dirty(ownerMeta.getFieldMetaData().getIndex());\n             sm = (StateManagerImpl) broker.embed(_pc, _oid, owner, ownerMeta);\n-            ((PersistenceCapable) toAttach).pcReplaceStateManager(this);\n+            ImplHelper.toPersistenceCapable(toAttach, broker.getConfiguration())\n+                .pcReplaceStateManager(this);\n         } else {\n             PCState state = (_dirty.length() > 0) ? PCState.PDIRTY\n                 : PCState.PCLEAN;\n@@ -161,8 +163,9 @@ public Object attach(AttachManager manager, Object toAttach,\n             switch (fields[i].getDeclaredTypeCode()) {\n                 case JavaTypes.BOOLEAN:\n                     if (_dirty.get(i))\n-                        sm.settingBooleanField(pc, i, (!loaded.get(i)) ? false\n-                            : sm.fetchBooleanField(i), longval == 1, set);\n+                        sm.settingBooleanField(pc, i,\n+                            (loaded.get(i)) && sm.fetchBooleanField(i),\n+                            longval == 1, set);\n                     else\n                         sm.storeBooleanField(i, longval == 1);\n                     break;\n@@ -231,7 +234,8 @@ public Object attach(AttachManager manager, Object toAttach,\n                     else {\n                         PersistenceCapable toPC = null;\n                         if (objval != null && fields[i].isEmbeddedPC())\n-                            toPC = (PersistenceCapable) objval;\n+                            toPC = ImplHelper.toPersistenceCapable(objval,\n+                                broker.getConfiguration());\n                         objval = manager.attach(objval, toPC, sm, fields[i],\n                             false);\n                     }"},{"sha":"28b4097752f92f110f192dea8f31ca5b3763d764","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Numbers;\n \n /**\n@@ -50,14 +51,15 @@\n     private ClassMetaData _meta;\n \n     public DetachedValueStateManager(Object pc, StoreContext ctx) {\n-        this((PersistenceCapable) pc, ctx.getConfiguration().\n-            getMetaDataRepositoryInstance().getMetaData(pc.getClass(),\n+        this(ImplHelper.toPersistenceCapable(pc, ctx.getConfiguration()),\n+            ctx.getConfiguration().getMetaDataRepositoryInstance()\n+                .getMetaData(ImplHelper.getManagedInstance(pc).getClass(),\n             ctx.getClassLoader(), true), ctx);\n     }\n \n     public DetachedValueStateManager(PersistenceCapable pc, ClassMetaData meta,\n         StoreContext ctx) {\n-        _pc = (PersistenceCapable) pc;\n+        _pc = ImplHelper.toPersistenceCapable(pc, ctx.getConfiguration());\n         _meta = meta;\n         _ctx = ctx;\n     }"},{"sha":"c683ba3902e030c4d8aca1f959b64b254c34e237","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -237,7 +237,6 @@ protected Number executeUpdate(Executor ex, ClassMetaData base,\n      * Return the commands that will be sent to the datastore in order\n      * to execute the query, typically in the database's native language.\n      *\n-     * @param ex current executor\n      * @param base the base type the query should match\n      * @param types the independent candidate types\n      * @param subclasses true if subclasses should be included in the results\n@@ -248,7 +247,7 @@ protected Number executeUpdate(Executor ex, ClassMetaData base,\n      * @param range result range\n      * @return a textual description of the query to execute\n      */\n-    protected String[] getDataStoreActions(Executor ex, ClassMetaData base,\n+    protected String[] getDataStoreActions(ClassMetaData base,\n         ClassMetaData[] types, boolean subclasses, ExpressionFactory[] facts,\n         QueryExpressions[] parsed, Object[] params, Range range) {\n         return StoreQuery.EMPTY_STRINGS;\n@@ -696,7 +695,7 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n \n         public String[] getDataStoreActions(StoreQuery q, Object[] params,\n             Range range) {\n-            return ((ExpressionStoreQuery) q).getDataStoreActions(this, _meta,\n+            return ((ExpressionStoreQuery) q).getDataStoreActions(_meta,\n                 _metas, _subs, _facts, _exps, params, range);\n         }\n "},{"sha":"1fdfce43adec63d620615ed4121a271c03a48723","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -129,14 +129,14 @@\n      * returns <code>false</code>, query caching will not be used\n      * even if the datacache plugin is installed.\n      */\n-    public boolean getQueryCache();\n+    public boolean getQueryCacheEnabled();\n \n     /**\n      * Control whether or not query caching is enabled. This has no effect\n      * if the datacache plugin is not installed, or if the query cache size\n      * is set to zero.\n      */\n-    public FetchConfiguration setQueryCache(boolean cache);\n+    public FetchConfiguration setQueryCacheEnabled(boolean cache);\n \n     /**\n      * The query automatic flush configuration."},{"sha":"f8e662b4cb1620f97d337d98cd73b99da0de427b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -150,7 +150,7 @@ protected FetchConfigurationImpl newInstance(ConfigurationState state) {\n     public void copy(FetchConfiguration fetch) {\n         setFetchBatchSize(fetch.getFetchBatchSize());\n         setMaxFetchDepth(fetch.getMaxFetchDepth());\n-        setQueryCache(fetch.getQueryCache());\n+        setQueryCacheEnabled(fetch.getQueryCacheEnabled());\n         setFlushBeforeQueries(fetch.getFlushBeforeQueries());\n         setLockTimeout(fetch.getLockTimeout());\n         clearFetchGroups();\n@@ -191,11 +191,11 @@ public FetchConfiguration setMaxFetchDepth(int depth) {\n         return this;\n     }\n \n-    public boolean getQueryCache() {\n+    public boolean getQueryCacheEnabled() {\n         return _state.queryCache;\n     }\n \n-    public FetchConfiguration setQueryCache(boolean cache) {\n+    public FetchConfiguration setQueryCacheEnabled(boolean cache) {\n         _state.queryCache = cache;\n         return this;\n     }"},{"sha":"e056934155b142c30d7d84c649b1d6b291a88e1e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":23,"deletions":10,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.openjpa.kernel;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -31,10 +32,10 @@\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n@@ -746,9 +747,12 @@ public static AggregateListener hintToAggregateListener(Object hint,\n         Exception cause = null;\n         if (hint instanceof String) {\n             try {\n-                return (AggregateListener) Class.forName((String) hint, true,\n-                    loader).newInstance();\n+                return (AggregateListener) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(\n+                        Class.forName((String) hint, true, loader)));\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }\n@@ -781,10 +785,13 @@ public static AggregateListener hintToAggregateListener(Object hint,\n             AggregateListener[] aggs = new AggregateListener[clss.length];\n             try {\n                 for (int i = 0; i < clss.length; i++)\n-                    aggs[i] = (AggregateListener) Class.forName(clss[i], true,\n-                        loader).newInstance();\n+                    aggs[i] = (AggregateListener) AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(\n+                            Class.forName(clss[i], true, loader))); \n                 return aggs;\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }\n@@ -806,9 +813,12 @@ public static FilterListener hintToFilterListener(Object hint,\n         Exception cause = null;\n         if (hint instanceof String) {\n             try {\n-                return (FilterListener) Class.forName((String) hint, true,\n-                    loader).newInstance();\n+                return (FilterListener) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(\n+                        Class.forName((String) hint, true, loader))); \n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }\n@@ -840,10 +850,13 @@ public static FilterListener hintToFilterListener(Object hint,\n             FilterListener[] filts = new FilterListener[clss.length];\n             try {\n                 for (int i = 0; i < clss.length; i++)\n-                    filts[i] = (FilterListener) Class.forName(clss[i], true,\n-                        loader).newInstance();\n+                    filts[i] = (FilterListener) AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(\n+                            Class.forName(clss[i], true, loader)));\n                 return filts;\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }"},{"sha":"ab422de8849817747a624bb20b7c57026b461268","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,6 +26,7 @@\n import javax.transaction.TransactionManager;\n import javax.transaction.xa.XAResource;\n \n+import org.apache.openjpa.ee.AbstractManagedRuntime;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n@@ -40,7 +41,7 @@\n  *\n  * @author Abe White\n  */\n-class LocalManagedRuntime\n+class LocalManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime, TransactionManager, Transaction {\n \n     private static final Localizer _loc = Localizer.forPackage"},{"sha":"141ac7850f6333b284f7ee67e34c17004b37a7ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -248,6 +248,10 @@ public void validate(StoreQuery q) {\n             }\n             if (!Modifier.isStatic(meth.getModifiers()))\n                 throw new UserException(_loc.get(\"method-not-static\", meth));\n+            if (!ResultObjectProvider.class.isAssignableFrom(\n+                meth.getReturnType()))\n+                throw new UserException(_loc.get(\"method-return-type-invalid\",\n+                    meth, meth.getReturnType()));\n             _meth = meth;\n         }\n "},{"sha":"88f713aca5719c511f2e721edb3120648c2cbba2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,17 +22,20 @@\n import java.io.ObjectOutput;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.BitSet;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Numbers;\n \n /**\n@@ -294,7 +297,8 @@ public Object getManagedInstance() {\n     }\n \n     public PersistenceCapable getPersistenceCapable() {\n-        return (PersistenceCapable) _oid;\n+        return ImplHelper.toPersistenceCapable(_oid,\n+            _vmd.getRepository().getConfiguration());\n     }\n \n     public ClassMetaData getMetaData() {\n@@ -710,8 +714,12 @@ private Object getValue(int field) {\n     private void setValue(int field, Object val, boolean forceInst) {\n         if (_oid == null && forceInst) {\n             try {\n-                _oid = getMetaData().getDescribedType().newInstance();\n+                _oid = AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(\n+                        getMetaData().getDescribedType()));\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n                 throw new GeneralException(e);\n             }\n         } else if (_oid == null)"},{"sha":"7b3233a7e5335b6227aecd3ad8aabca795a3647c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -136,6 +136,7 @@ public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n         loadImplData(sm);\n \n         FieldMetaData[] fmds = sm.getMetaData().getFields();\n+        ((StateManagerImpl)sm).setLoading(true);\n         for (int i = 0; i < fmds.length; i++) {\n             // load intermediate data for all unloaded fields and data for\n             // fields in configured fetch groups"},{"sha":"2b38f661cf4b1a1352d78064dd076f9305691244","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel;\n \n import java.io.Serializable;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -45,6 +46,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n import org.apache.openjpa.lib.util.concurrent.ReentrantLock;\n@@ -59,6 +61,7 @@\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -1081,7 +1084,8 @@ private void updateInMemory(Object ob, Object[] params) {\n \n             OpenJPAStateManager sm = _broker.getStateManager(ob);\n             int i = fmd.getIndex();\n-            PersistenceCapable into = (PersistenceCapable) ob;\n+            PersistenceCapable into = ImplHelper.toPersistenceCapable(ob,\n+                _broker.getConfiguration());\n \n             // set the actual field in the instance\n             int set = OpenJPAStateManager.SET_USER;\n@@ -1555,7 +1559,8 @@ public Class classForName(String name, String[] imports) {\n \n         // first check the aliases map in the MetaDataRepository\n         ClassLoader loader = (_class == null) ? _loader\n-            : _class.getClassLoader();\n+            : (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(_class)); \n         ClassMetaData meta = _broker.getConfiguration().\n             getMetaDataRepositoryInstance().getMetaData(name, loader, false);\n         if (meta != null)"},{"sha":"ea7dc696eb4b6aac1f312833d3b66e0f16a666c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.openjpa.kernel.exps.ExpressionParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Services;\n import org.apache.openjpa.util.InternalException;\n \n@@ -37,11 +40,16 @@\n     static {\n         // Load and cache all the query languages available in the system.\n         Class[] classes = Services.getImplementorClasses(\n-            ExpressionParser.class, ExpressionParser.class.getClassLoader());\n+            ExpressionParser.class,\n+            (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(ExpressionParser.class)));\n         for (int i = 0; i < classes.length; i++) {\n             ExpressionParser ep;\n             try {\n-                ep = (ExpressionParser) classes[i].newInstance();\n+                ep = (ExpressionParser) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(classes[i]));\n+            } catch (PrivilegedActionException pae) {\n+                throw new InternalException(pae.getException());\n             } catch (InstantiationException e) {\n                 throw new InternalException(e);\n             } catch (IllegalAccessException e) {"},{"sha":"28f2abee3f625913fda5d9e5b569c0109b1b02f3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -24,6 +24,8 @@\n import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n@@ -34,6 +36,7 @@\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n@@ -231,7 +234,8 @@ private Object packUserType(Object[] result) {\n             if (_constructor != null)\n                 return _constructor.newInstance(result);\n \n-            Object user = _resultClass.newInstance();\n+            Object user = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(_resultClass));\n             for (int i = 0; i < _aliases.length; i++) {\n                 if (_sets[i] instanceof Method) {\n                     Method meth = (Method) _sets[i];\n@@ -248,6 +252,9 @@ private Object packUserType(Object[] result) {\n             return user;\n         } catch (OpenJPAException ke) {\n             throw ke;\n+        } catch (PrivilegedActionException pae) {\n+            throw new UserException(_loc.get(\"pack-instantiation-err\",\n+                _resultClass), pae.getException());\n         } catch (InstantiationException ie) {\n             throw new UserException(_loc.get(\"pack-instantiation-err\",\n                 _resultClass), ie);"},{"sha":"cea42eb950bc58635673733e487da50e4ea6a028","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ProxyManager;\n@@ -33,7 +34,7 @@\n  *\n  * @author Abe White\n  */\n-class SaveFieldManager\n+public class SaveFieldManager\n     extends ClearFieldManager {\n \n     private final StateManagerImpl _sm;\n@@ -88,7 +89,7 @@ public BitSet getUnloaded() {\n      */\n     public boolean saveField(int field) {\n         // if not loaded we can't save orig value; mark as unloaded on rollback\n-        if (!_sm.getLoaded().get(field)) {\n+        if (_sm.getLoaded() != null && !_sm.getLoaded().get(field)) {\n             _unloaded.set(field);\n             return false;\n         }\n@@ -167,6 +168,25 @@ public boolean restoreField(int field) {\n         return false;\n     }\n \n+    /**\n+     * Compare the given field.\n+     * @return <code>true</code> if the field is the same in the current\n+     * state and in the saved state; otherwise, <code>false</code>.\n+     */\n+    public boolean isFieldEqual(int field, Object current) {\n+        // if the field is not available, assume that it has changed.\n+        if (_saved == null || !_saved.get(field))\n+            return false;\n+        if (!(_state.pcGetStateManager() instanceof StateManagerImpl))\n+            return false;\n+\n+        StateManagerImpl sm = (StateManagerImpl) _state.pcGetStateManager();\n+        SingleFieldManager single = new SingleFieldManager(sm, sm.getBroker());\n+        sm.provideField(_state, single, field);\n+        Object old = single.fetchObjectField(field);\n+        return current == old || current != null && current.equals(old);\n+    }\n+\n     public Object fetchObjectField(int field) {\n         // return the copied field during save, or a null value during restore\n         Object val = _field;"},{"sha":"d32c0737ee763b658ca51af1b79e41cc4d11ac06","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -92,7 +92,10 @@ public boolean proxy(boolean reset, boolean replaceNull) {\n                 proxy = checkProxy();\n                 if (proxy == null) {\n                     proxy = (Proxy) _sm.newFieldProxy(field);\n-                    ((Calendar) proxy).setTime(((Calendar) objval).getTime());\n+                    Calendar pcal = (Calendar) proxy;\n+                    Calendar ocal = (Calendar) objval;\n+                    pcal.setTime (ocal.getTime ());\n+                    pcal.setTimeZone (ocal.getTimeZone ());\n                     ret = true;\n                 }\n                 break;"},{"sha":"6d7486bb250f5c2fcf177f2ddf8fa7b811f85c49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":110,"deletions":11,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -29,6 +29,8 @@\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n+import org.apache.openjpa.enhance.ManagedInstanceProvider;\n+import org.apache.openjpa.enhance.DynamicPersistenceCapable;\n import org.apache.openjpa.event.LifecycleEvent;\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -48,6 +50,7 @@\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Numbers;\n \n /**\n@@ -89,7 +92,7 @@\n     private static final int FLAG_VERSION_UPDATE = 2 << 15;\n     private static final int FLAG_DETACHING = 2 << 16;\n \n-    private static Localizer _loc = Localizer.forPackage\n+    private static final Localizer _loc = Localizer.forPackage\n         (StateManagerImpl.class);\n \n     // information about the instance\n@@ -300,6 +303,27 @@ protected void initialize(PersistenceCapable pc, PCState state) {\n         _broker.setStateManager(_id, this, BrokerImpl.STATUS_INIT);\n         if (state == PCState.PNEW)\n             fireLifecycleEvent(LifecycleEvent.AFTER_PERSIST);\n+\n+        // if this is a non-tracking PC, add a hard ref to the appropriate data\n+        // sets and give it an opportunity to make a state snapshot.\n+        if (!isIntercepting())\n+            saveFields(true);\n+    }\n+\n+    /**\n+     * Whether or not data access in this instance is intercepted. This differs\n+     * from {@link ClassMetaData#isIntercepting()} in that it checks for\n+     * property access + subclassing in addition to the redefinition /\n+     * enhancement checks.\n+     */\n+    public boolean isIntercepting() {\n+        if (getMetaData().isIntercepting())\n+            return true;\n+        if (getMetaData().getAccessType() != ClassMetaData.ACCESS_FIELD\n+            && _pc instanceof DynamicPersistenceCapable)\n+            return true;\n+\n+        return false;\n     }\n \n     /**\n@@ -339,7 +363,10 @@ protected boolean load(FetchConfiguration fetch, int loadMode,\n     }\n \n     public Object getManagedInstance() {\n-        return _pc;\n+        if (_pc instanceof ManagedInstanceProvider)\n+            return ((ManagedInstanceProvider) _pc).getManagedInstance();\n+        else\n+            return _pc;\n     }\n \n     public PersistenceCapable getPersistenceCapable() {\n@@ -547,19 +574,26 @@ private boolean assignField(int field, boolean preFlushing) {\n             return assign && assignObjectId(!preFlushing, preFlushing);\n         }\n \n-        // don't assign values to fields with non-default values already\n-        if (fmd.getValueStrategy() == ValueStrategies.NONE\n-            || !isDefaultValue(field))\n+        // Just return if there's no value generation strategy\n+        if (fmd.getValueStrategy() == ValueStrategies.NONE)\n             return false;\n+        \n+        // Throw exception if field already has a value assigned.\n+        // @GeneratedValue overrides POJO initial values and setter methods\n+        if (!isDefaultValue(field) && !fmd.isValueGenerated())\n+            throw new InvalidStateException(_loc.get(\n+                    \"existing-value-override-excep\", fmd.getFullName(false)));\n \n         // for primary key fields, assign the object id and recache so that\n         // to the user, so it looks like the oid always matches the pk fields\n         if (fmd.isPrimaryKey() && !isEmbedded())\n             return assignObjectId(!preFlushing, preFlushing);\n \n         // for other fields just assign the field or flush if needed\n-        if (_broker.getStoreManager().assignField(this, field, preFlushing))\n+        if (_broker.getStoreManager().assignField(this, field, preFlushing)) {\n+            fmd.setValueGenerated(true);\n             return true;\n+        }\n         if (!preFlushing)\n             _broker.flush();\n         return !preFlushing;\n@@ -735,6 +769,58 @@ public void storeField(int field, Object val) {\n         storeField(field, val, this);\n     }\n \n+    /**\n+     * <p>Checks whether or not <code>_pc</code> is dirty. In the cases where\n+     * field tracking is not happening (see below), this method will do a\n+     * state comparison to find whether <code>_pc</code> is dirty, and will\n+     * update this instance with this information. In the cases where field\n+     * tracking is happening, this method is a no-op.</p>\n+     *\n+     * <p>Fields are tracked for all classes that are run through the OpenJPA\n+     * enhancer prior to or during deployment, and all classes (enhanced or\n+     * unenhanced) in a Java 6 environment or newer.</p>\n+     *\n+     * <p>In a Java 5 VM or older:\n+     * <br>- instances of unenhanced classes that use\n+     * property access and obey the property access limitations are tracked\n+     * when the instances are loaded from the database by OpenJPA, and are\n+     * not tracked when the instances are created by application code.\n+     * <br>- instances of unenhanced classes that use field access are\n+     * never tracked.</p>\n+     *\n+     * @since 1.0.0\n+     */\n+    public void dirtyCheck() {\n+        if (!needsDirtyCheck())\n+            return;\n+\n+        SaveFieldManager saved = getSaveFieldManager();\n+        if (saved == null)\n+            throw new InternalException(_loc.get(\"no-saved-fields\"));\n+\n+        FieldMetaData[] fmds = getMetaData().getFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            // pk and version fields cannot be mutated; don't mark them\n+            // as such. ##### validate?\n+            if (!fmds[i].isPrimaryKey() && !fmds[i].isVersion()\n+                && _loaded.get(i)) {\n+                if (!saved.isFieldEqual(i, fetch(i))) {\n+                    dirty(i);\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean needsDirtyCheck() {\n+        if (isIntercepting())\n+            return false;\n+        if (isDeleted())\n+            return false;\n+        if (isNew() && !isFlushed())\n+            return false;\n+        return true;\n+    }\n+\n     public Object fetchInitialField(int field) {\n         FieldMetaData fmd = _meta.getField(field);\n         if (_broker.getRestoreState() == RestoreState.RESTORE_NONE\n@@ -1375,7 +1461,8 @@ public void dirty(String field) {\n         FieldMetaData fmd = _meta.getField(field);\n         if (fmd == null)\n             throw translate(new UserException(_loc.get(\"no-field\", field,\n-                _pc.getClass())).setFailedObject(getManagedInstance()));\n+                ImplHelper.getManagedInstance(_pc).getClass()))\n+                .setFailedObject(getManagedInstance()));\n \n         dirty(fmd.getIndex(), null, true);\n     }\n@@ -1505,7 +1592,7 @@ private Boolean dirty(int field, Boolean mutate, boolean loadFetchGroup) {\n     /**\n      * Fire post-dirty events after field value changes.\n      *\n-     * @param status return value from {@link #dirty(int,boolean,boolean)}\n+     * @param status return value from {@link #dirty(int, Boolean, boolean)}\n      */\n     private void postDirty(Boolean status) {\n         if (Boolean.TRUE.equals(status))\n@@ -1836,7 +1923,8 @@ private void assertNoPrimaryKeyChange(int field) {\n      */\n     void assertNotManagedObjectId(Object val) {\n         if (val != null\n-            && ((PersistenceCapable) val).pcGetGenericContext() != null)\n+            && (ImplHelper.toPersistenceCapable(val,\n+                 getContext().getConfiguration())).pcGetGenericContext()!= null)\n             throw translate(new InvalidStateException(_loc.get\n                 (\"managed-oid\", Exceptions.toString(val),\n                     Exceptions.toString(getManagedInstance()))).\n@@ -2486,6 +2574,9 @@ else if (!val) {\n      * are not cleared.\n      */\n     void clearFields() {\n+        if (!isIntercepting())\n+            return;\n+\n         fireLifecycleEvent(LifecycleEvent.BEFORE_CLEAR);\n \n         // unproxy all fields\n@@ -2569,8 +2660,14 @@ private void saveField(int field) {\n      * to that of the last call to {@link #saveFields}.\n      */\n     void clearSavedFields() {\n-        _flags &= ~FLAG_SAVE;\n-        _saved = null;\n+        if (isIntercepting()) {\n+            _flags &= ~FLAG_SAVE;\n+            _saved = null;\n+        }\n+    }\n+\n+    public SaveFieldManager getSaveFieldManager() {\n+        return _saved;\n     }\n \n     /**\n@@ -2681,6 +2778,8 @@ void preFlush(boolean logical, OpCallbacks call) {\n                         _single.clear();\n                 }\n             }\n+\n+            dirtyCheck();\n         } finally {\n             unlock();\n         }"},{"sha":"05353b4b9371793bc566effa4b66f79a03a7ea02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -120,7 +120,7 @@\n      * @param oids the oids of the objects to return\n      * @return the objects that were looked up, in the same order as the oids\n      * parameter\n-     * @see #find(Object,boolean)\n+     * @see #find(Object,boolean,FindCallbacks)\n      */\n     public Object[] findAll(Collection oids, boolean validate,\n         FindCallbacks call);\n@@ -373,25 +373,28 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n \n     /**\n      * Whether memory usage is reduced during this transaction at the expense\n-     * of possibly more aggressive data cache evictions.\n+     * of tracking changes at the type level instead of the instance level,\n+     * resulting in more aggressive cache invalidation.\n      *\n-     * @since 0.3.4\n+     * @since 1.0.0\n      */\n-    public boolean isLargeTransaction();\n+    public boolean isTrackChangesByType();\n \n     /**\n      * If a large number of objects will be created, modified, or deleted\n      * during this transaction setting this option to true will reduce memory\n-     * usage if you perform periodic flushes. Upon transaction commit the\n-     * data cache will have to more aggressively flush objects. The store cache\n-     * will have to flush instances of objects for each class of object\n-     * modified during the transaction. A side benefit of large transaction\n-     * mode is that smaller update messages can be used for\n+     * usage if you perform periodic flushes by tracking changes at the type\n+     * level instead of the instance level, resulting in more aggressive cache\n+     * invalidation. Upon transaction commit the data cache will have to\n+     * more aggressively flush objects. The store cache will have to flush\n+     * instances of objects for each class of object modified during the\n+     * transaction. A side benefit of large transaction mode is that smaller\n+     * update messages can be used for\n      * {@link org.apache.openjpa.event.RemoteCommitEvent}s. Defaults to false.\n      *\n-     * @since 0.3.4\n+     * @since 1.0.0\n      */\n-    public void setLargeTransaction(boolean largeTransaction);\n+    public void setTrackChangesByType(boolean largeTransaction);\n \n     /**\n      * Whether this context is using managed transactions."},{"sha":"16374e1a0bce7aad621ee395a379b04f4ea688cb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -177,7 +177,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n      * several objects. Each of the given state managers will be in one of\n      * three states, each requiring a different action:\n      * <ul>\n-     * <li><code>stateManager.getManagedInstance () == null</code>: An\n+     * <li><code>stateManager.getO () == null</code>: An\n      * uninitialized state manager. Perform the same actions as in\n      * {@link #initialize}.\n      * <li><code>load != FORCE_LOAD_NONE || stateManager.getPCState ()"},{"sha":"5813f78d0a17c16883f54c161890ca5b435d31c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -32,6 +32,7 @@\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Handles attaching instances using version and primary key fields.\n@@ -50,26 +51,31 @@ protected Object getDetachedObjectId(AttachManager manager,\n         Object toAttach) {\n         Broker broker = manager.getBroker();\n         ClassMetaData meta = broker.getConfiguration().\n-            getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n-            broker.getClassLoader(), true);\n-        return ApplicationIds.create((PersistenceCapable) toAttach, meta);\n+            getMetaDataRepositoryInstance().getMetaData(\n+                ImplHelper.getManagedInstance(toAttach).getClass(),\n+                broker.getClassLoader(), true);\n+        return ApplicationIds.create(ImplHelper.toPersistenceCapable(toAttach,\n+            broker.getConfiguration()),\n+            meta);\n     }\n \n     protected void provideField(Object toAttach, StateManagerImpl sm,\n         int field) {\n-        sm.provideField((PersistenceCapable) toAttach, this, field);\n+        sm.provideField(ImplHelper.toPersistenceCapable(toAttach,\n+            sm.getContext().getConfiguration()), this, field);\n     }\n \n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n         ValueMetaData ownerMeta, boolean explicit) {\n         BrokerImpl broker = manager.getBroker();\n-        PersistenceCapable pc = (PersistenceCapable) toAttach;\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n+            meta.getRepository().getConfiguration());\n \n         boolean embedded = ownerMeta != null && ownerMeta.isEmbeddedPC();\n         boolean isNew = !broker.isDetached(pc);\n         Object version = null;\n-        StateManagerImpl sm = null;\n+        StateManagerImpl sm;\n \n         // if the state manager for the embedded instance is null, then\n         // it should be treated as a new instance (since the\n@@ -91,10 +97,13 @@ public Object attach(AttachManager manager, Object toAttach,\n         } else if (!embedded && into == null) {\n             Object id = getDetachedObjectId(manager, toAttach);\n             if (id != null)\n-                into = (PersistenceCapable) broker.find(id, true, null);\n+                into =\n+                    ImplHelper.toPersistenceCapable(broker.find(id, true, null),\n+                        broker.getConfiguration());\n             if (into == null)\n                 throw new OptimisticException(_loc.get(\"attach-version-del\",\n-                    pc.getClass(), id, version)).setFailedObject(toAttach);\n+                    ImplHelper.getManagedInstance(pc).getClass(), id, version))\n+                    .setFailedObject(toAttach);\n \n             sm = manager.assertManaged(into);\n             if (meta.getDescribedType()\n@@ -133,7 +142,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                     case DETACH_ALL:\n                         attachField(manager, toAttach, sm, fmds[i], true);\n                         break;\n-                    case DETACH_FGS:\n+                    case DETACH_FETCH_GROUPS:\n                         if (fetch.requiresFetch(fmds[i]) \n                             != FetchConfiguration.FETCH_NONE)\n                             attachField(manager, toAttach, sm, fmds[i], true);\n@@ -148,7 +157,7 @@ public Object attach(AttachManager manager, Object toAttach,\n         }\n         if (!embedded && !isNew)\n             compareVersion(sm, pc);\n-        return into;\n+        return ImplHelper.getManagedInstance(into);\n     }\n \n     /**"},{"sha":"4e0571350f75b0855f76caf731b2b997a3a7c0d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":33,"deletions":2,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -30,6 +30,8 @@\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.XMLMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -243,6 +245,27 @@ protected ClassMetaData getMetaData(Class c, boolean required,\n     protected Value traversePath(Path path, String field) {\n         return traversePath(path, field, false, false);\n     }\n+    \n+    protected Value traverseXPath(Path path, String field) {\n+        XMLMetaData meta = path.getXmlMapping();\n+        if (meta.getFieldMapping(field) == null) {\n+            throw parseException(EX_USER, \"no-field\",\n+                    new Object[]{ meta.getType(), field }, null);\n+        }\n+        else {\n+            // collection-valued xpath is not allowed\n+            int type = meta.getFieldMapping(field).getTypeCode();\n+            switch (type) {\n+                case JavaTypes.ARRAY:\n+                case JavaTypes.COLLECTION:\n+                case JavaTypes.MAP:\n+                    throw new UserException(_loc.get(\"collection-valued-path\",\n+                            field));\n+            }\n+        }\n+        path.get(meta, field);\n+        return path;\n+    }\n \n     /**\n      * Traverse the given field in the given path.\n@@ -272,6 +295,14 @@ protected Value traversePath(Path path, String field, boolean pcOnly,\n             addAccessPath(meta);\n             path.setMetaData(meta);\n         }\n+        else {\n+            // xmlsupport xpath\n+            XMLMetaData xmlmeta = fmd.getRepository().getXMLMetaData(fmd);\n+            if (xmlmeta != null) {\n+                path.get(fmd, xmlmeta);\n+                return path;\n+            }\n+        }\n \n         if (meta != null || !pcOnly)\n             path.get(fmd, allowNull);\n@@ -309,11 +340,11 @@ protected void setImplicitTypes(Value val1, Value val2,\n \n         if (o1 && !o2) {\n             val1.setImplicitType(c2);\n-            if (val1.getMetaData() == null)\n+            if (val1.getMetaData() == null && !val1.isXPath())\n                 val1.setMetaData(val2.getMetaData());\n         } else if (!o1 && o2) {\n             val2.setImplicitType(c1);\n-            if (val2.getMetaData() == null)\n+            if (val2.getMetaData() == null && !val1.isXPath())\n                 val2.setMetaData(val1.getMetaData());\n         } else if (o1 && o2 && expected != null) {\n             // we never expect a pc type, so don't bother with metadata"},{"sha":"8d89e01e52f9fc0dd374f75b38b3031de96d0ff0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,13 +23,14 @@\n import java.util.ListIterator;\n \n import org.apache.commons.lang.ObjectUtils;\n-import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.XMLMetaData;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * A path represents a traversal into fields of a candidate object.\n@@ -125,8 +126,9 @@ protected Object eval(Object candidate, Object orig,\n             // be proxyable\n             sm = null;\n             tmpBroker = null;\n-            if (candidate instanceof PersistenceCapable)\n-                sm = (OpenJPAStateManager) ((PersistenceCapable) candidate).\n+            if (ImplHelper.isManageable(candidate))\n+                sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(\n+                    candidate, ctx.getConfiguration())).\n                     pcGetStateManager();\n             if (sm == null) {\n                 tmpBroker = ctx.getBroker();\n@@ -184,4 +186,14 @@ public boolean equals(Object other) {\n             return ((Traversal) other).field.equals(field);\n         }\n \t}\n+\n+    public void get(FieldMetaData fmd, XMLMetaData meta) {\n+    }\n+    \n+    public void get(XMLMetaData meta, String name) {\n+    }\n+    \n+    public XMLMetaData getXmlMapping() {\n+        return null;\n+    }\n }"},{"sha":"71b41a2c614e7a3f20e02cb0d8137cbba049e804","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.XMLMetaData;\n \n /**\n  * A path represents a traversal into fields of a candidate object.\n@@ -42,4 +43,28 @@\n      * not contain a final field.\n      */\n     public FieldMetaData last();\n+\n+    /**\n+     * Traverse into the given field that maps to xml column, and update\n+     * the current object to that field value.\n+     * \n+     * @param fmd field maps to xml column\n+     * @param meta associated xml mapping\n+     */\n+    public void get(FieldMetaData fmd, XMLMetaData meta);\n+    \n+    /**\n+     * Traverse into the gevin xpath name of the current object, and update\n+     * the current object to that xpath field.\n+     * \n+     * @param meta\n+     * @param name\n+     */\n+    public void get(XMLMetaData meta, String name);\n+    \n+    /**\n+     * Return the current XPath's xmlmapping metadata.\n+     * @return Return xmlmapping\n+     */\n+    public XMLMetaData getXmlMapping();\n }"},{"sha":"da054c7d722a178d3f04274d3eefe1eb1e6997a8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -109,6 +109,10 @@ public boolean isVariable() {\n     public boolean isAggregate() {\n         return false;\n     }\n+    \n+    public boolean isXPath() {\n+        return false;\n+    }\n \n     public void acceptVisit(ExpressionVisitor visitor) {\n         visitor.enter(this);"},{"sha":"b9135a1f0bc214b0139bf72a5d90423d286b487f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -51,6 +51,11 @@\n      */\n     public boolean isAggregate();\n \n+    /**\n+     * Return true if this value is an XML Path.\n+     */\n+    public boolean isXPath();\n+    \n     /**\n      * Return any associated persistent type.\n      */"},{"sha":"06df6348c0825fd41b7f963cf705f11adb6e7d17","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,6 +22,7 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.math.BigDecimal;\n+import java.security.AccessController;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -43,6 +44,7 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -1086,7 +1088,7 @@ protected void setImplicitTypes(Value val1, Value val2, Class expected) {\n         if (fmd == null)\n             return;\n \n-        Class type = fmd.getType();\n+        Class type = path.isXPath() ? path.getType() : fmd.getType();\n         if (type == null)\n             return;\n \n@@ -1296,6 +1298,11 @@ else if (val.getMetaData() != null)\n         // walk through the children and assemble the path\n         boolean allowNull = !inner;\n         for (int i = 1; i < node.children.length; i++) {\n+            if (path.isXPath()) {\n+                for (int j = i; j <node.children.length; j++)\n+                    path = (Path) traverseXPath(path, node.children[j].text);\n+                return path;\n+            }\n             path = (Path) traversePath(path, node.children[i].text, pcOnly,\n                 allowNull);\n "},{"sha":"ff35d3a25a067538838c52d92745e1567a7f75f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":91,"deletions":26,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,8 +20,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -47,6 +50,7 @@\n import org.apache.openjpa.lib.meta.ZipFileMetaDataIterator;\n import org.apache.openjpa.lib.meta.ZipStreamMetaDataIterator;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.UserException;\n@@ -93,7 +97,8 @@ public void setFiles(String files) {\n             File file;\n             for (int i = 0; i < strs.length; i++) {\n                 file = new File(strs[i]);\n-                if (file.exists())\n+                if (((Boolean) AccessController.doPrivileged(\n+                    J2DoPrivHelper.existsAction(file))).booleanValue())\n                     this.files.add(file);\n             }\n         }\n@@ -192,7 +197,10 @@ public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\n         Parser parser;\n         if (mode != MODE_QUERY) {\n             int sermode = (isMappingOnlyFactory()) ? mode : mode | MODE_META;\n-            ser = newSerializer();\n+            if ((mode & MODE_ANN_MAPPING) != 0)\n+                ser = newAnnotationSerializer();\n+            else\n+                ser = newSerializer();\n             ser.setMode(sermode);\n             if (metaFiles != null) {\n                 parser = newParser(false);\n@@ -231,7 +239,10 @@ public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\n             for (int i = 0; !qFiles && i < queries.length; i++)\n                 qFiles = queries[i].getSourceMode() == MODE_QUERY;\n             if (qFiles) {\n-                ser = newSerializer();\n+                if ((mode & MODE_ANN_MAPPING) != 0)\n+                    ser = newAnnotationSerializer();\n+                else\n+                    ser = newSerializer();\n                 ser.setMode(MODE_QUERY);\n                 if (queryFiles != null) {\n                     parser = newParser(false);\n@@ -352,7 +363,8 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n         for (int i = 0; i < metas.length; i++) {\n             if (getSourceFile(metas[i]) == null)\n                 setSourceFile(metas[i], defaultSourceFile(metas[i]));\n-            if (getSourceFile(metas[i]).exists()) {\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .existsAction(getSourceFile(metas[i])))).booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n                 files.add(getSourceFile(metas[i]));\n@@ -366,7 +378,9 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n                 queries[i].setSource(defaultSourceFile(queries[i],\n                     clsNames), queries[i].getSourceScope(),\n                     queries[i].getSourceType());\n-            if (queries[i].getSourceFile().exists()) {\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(queries[i].getSourceFile())))\n+                .booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n                 files.add(queries[i].getSourceFile());\n@@ -377,7 +391,9 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n                 if (getSourceFile(seqs[i]) == null)\n                     setSourceFile(seqs[i], defaultSourceFile(seqs[i],\n                         clsNames));\n-                if (getSourceFile(seqs[i]).exists()) {\n+                if (((Boolean) AccessController.doPrivileged(\n+                    J2DoPrivHelper.existsAction(getSourceFile(seqs[i]))))\n+                    .booleanValue()) {\n                     if (files == null)\n                         files = new HashSet();\n                     files.add(getSourceFile(seqs[i]));\n@@ -403,7 +419,9 @@ private Set assignDefaultQueryFiles(QueryMetaData[] queries,\n             if (queries[i].getSourceFile() == null)\n                 queries[i].setSource(defaultSourceFile(queries[i], clsNames),\n                     queries[i].getSourceScope(), queries[i].getSourceType());\n-            if (queries[i].getSourceFile().exists()) {\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(queries[i].getSourceFile())))\n+                .booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n                 files.add(queries[i].getSourceFile());\n@@ -473,7 +491,8 @@ protected void backupAndDelete(Collection files) {\n         for (Iterator itr = files.iterator(); itr.hasNext();) {\n             file = (File) itr.next();\n             if (Files.backup(file, false) != null)\n-                file.delete();\n+                AccessController\n+                    .doPrivileged(J2DoPrivHelper.deleteAction(file));\n         }\n     }\n \n@@ -543,6 +562,11 @@ protected abstract File defaultSourceFile(SequenceMetaData seq,\n      */\n     protected abstract Serializer newSerializer();\n \n+    /**\n+     * Create a new annotation metadata serializer.\n+     */\n+    protected abstract Serializer newAnnotationSerializer();\n+\n     /**\n      * Return the metadata that defines the given query, if any.\n      *\n@@ -606,16 +630,24 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             File file;\n             for (Iterator itr = files.iterator(); itr.hasNext();) {\n                 file = (File) itr.next();\n-                if (file.isDirectory()) {\n+                if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isDirectoryAction(file))).booleanValue()) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-directory\", file));\n-                    scan(new FileMetaDataIterator(dir, newMetaDataFilter()),\n+                    scan(new FileMetaDataIterator(file, newMetaDataFilter()),\n                         cparser, names, true, file);\n                 } else if (file.getName().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar\", file));\n-                    scan(new ZipFileMetaDataIterator(new ZipFile(file),\n-                        newMetaDataFilter()), cparser, names, true, file);\n+                    try {\n+                        ZipFile zFile = (ZipFile) AccessController\n+                            .doPrivileged(J2DoPrivHelper\n+                                .newZipFileAction(file));\n+                        scan(new ZipFileMetaDataIterator(zFile,\n+                            newMetaDataFilter()), cparser, names, true, file);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (IOException) pae.getException();\n+                    }\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-file\", file));\n@@ -624,15 +656,33 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scan-found-names\", clss, file));\n                     names.addAll(Arrays.asList(clss));\n-                    mapPersistentTypeNames(file.getAbsoluteFile().toURL(),\n-                        clss);\n+                    mapPersistentTypeNames(((File) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .getAbsoluteFileAction(file))).toURL(), clss);\n                 }\n             }\n         }\n         URL url;\n         if (urls != null) {\n             for (Iterator itr = urls.iterator(); itr.hasNext();) {\n                 url = (URL) itr.next();\n+                if (\"file\".equals(url.getProtocol())) {\n+                    File file = (File) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .getAbsoluteFileAction(new File(url.getFile()))); \n+                    if (files != null && files.contains(file)) {\n+                        continue;\n+                    } else if (((Boolean) AccessController\n+                        .doPrivileged(J2DoPrivHelper.isDirectoryAction(file)))\n+                        .booleanValue()) {\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"scanning-directory\", file));\n+                        scan(\n+                            new FileMetaDataIterator(file, newMetaDataFilter()),\n+                            cparser, names, true, file);\n+                        continue;\n+                    }\n+                }\n                 if (\"jar\".equals(url.getProtocol())\n                     && url.getPath().endsWith(\"!/\")) {\n                     if (log.isTraceEnabled())\n@@ -642,9 +692,16 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                 } else if (url.getPath().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar-at-url\", url));\n-                    scan(new ZipStreamMetaDataIterator(\n-                        new ZipInputStream(url.openStream()),\n-                        newMetaDataFilter()), cparser, names, true, url);\n+                    try {\n+                        InputStream is = (InputStream)\n+                            AccessController.doPrivileged(\n+                                J2DoPrivHelper.openStreamAction(url));\n+                        scan(new ZipStreamMetaDataIterator(\n+                            new ZipInputStream(is),\n+                            newMetaDataFilter()), cparser, names, true, url);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (IOException) pae.getException();\n+                    }\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-url\", url));\n@@ -662,14 +719,22 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             for (Iterator itr = rsrcs.iterator(); itr.hasNext();) {\n                 rsrc = (String) itr.next();\n                 if (rsrc.endsWith(\".jar\")) {\n-                    url = loader.getResource(rsrc);\n+                    url = (URL) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getResourceAction(loader, rsrc)); \n                     if (url != null) {\n                         if (log.isTraceEnabled())\n                             log.trace(_loc.get(\"scanning-jar-stream-url\", url));\n-                        scan(new ZipStreamMetaDataIterator\n-                            (new ZipInputStream(url.openStream()),\n-                                newMetaDataFilter()), cparser, names, true, \n+                        try {\n+                            InputStream is = (InputStream)\n+                                AccessController.doPrivileged(\n+                                    J2DoPrivHelper.openStreamAction(url));\n+                            scan(new ZipStreamMetaDataIterator\n+                                (new ZipInputStream(is),\n+                                newMetaDataFilter()), cparser, names, true,\n                                 url);\n+                        } catch (PrivilegedActionException pae) {\n+                            throw (IOException) pae.getException();\n+                        }\n                     }\n                 } else {\n                     if (log.isTraceEnabled())\n@@ -695,7 +760,7 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n         }\n         if (types != null)\n             names.addAll(types);\n-        \n+\n         if (log.isTraceEnabled())\n             log.trace(_loc.get(\"parse-found-names\", names));\n         \n@@ -799,8 +864,8 @@ public void clear() {\n \n         /**\n          * Add all components in the given repository to the set to be\n-\t\t * serialized.\n-\t\t */\n-\t\tpublic void addAll (MetaDataRepository repos);\n-\t}\n+         * serialized.\n+         */\n+        public void addAll (MetaDataRepository repos);\n+    }\n }"},{"sha":"22396bde158e640f6b68c41bf8ddfb35db16a0fb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,11 +22,13 @@\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -185,7 +187,9 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n             FieldMetaData fmd;\n             for (int i = 0; i < fieldNames.length; i ++) {\n                 if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-                    member = cls.getDeclaredField(fieldNames[i]);\n+                    member = (Field) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredFieldAction(\n+                            cls,fieldNames[i])); \n                 else\n                     member = Reflection.findGetter(meta.getDescribedType(),\n                         fieldNames[i], true);\n@@ -200,6 +204,8 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new UserException(e);\n         }\n     }\n@@ -211,9 +217,13 @@ private void populateFromReflection(ClassMetaData meta) {\n         Member[] members;\n         boolean iface = meta.getDescribedType().isInterface();\n         if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD && !iface)\n-            members = meta.getDescribedType().getDeclaredFields();\n+            members = (Field[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredFieldsAction(\n+                    meta.getDescribedType())); \n         else\n-            members = meta.getDescribedType().getDeclaredMethods();\n+            members = (Method[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodsAction(\n+                    meta.getDescribedType())); \n \n         int mods;\n         String name;\n@@ -313,12 +323,16 @@ public Member getBackingMember(FieldMetaData fmd) {\n             //### where the superclass uses a different access type\n             if (fmd.getDefiningMetaData().getAccessType() ==\n                 ClassMetaData.ACCESS_FIELD)\n-                return fmd.getDeclaringType().getDeclaredField(fmd.getName());\n+                return (Field) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredFieldAction(\n+                        fmd.getDeclaringType(), fmd.getName())); \n             return Reflection.findGetter(fmd.getDeclaringType(), fmd.getName(),\n                 true);\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new InternalException(e);\n         }\n     }"},{"sha":"ed9cbaf74769ab8c6fede6a9b04973362992dbb9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":51,"deletions":26,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,6 +22,7 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -38,10 +39,11 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.enhance.PCRegistry;\n-import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.util.ByteId;\n@@ -55,11 +57,11 @@\n import org.apache.openjpa.util.LongId;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.ObjectId;\n-import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.ShortId;\n import org.apache.openjpa.util.StringId;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Strings;\n \n /**\n@@ -117,6 +119,10 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (ClassMetaData.class);\n \n+    private static final FetchGroup[] EMPTY_FETCH_GROUP_ARRAY\n+        = new FetchGroup[0];\n+    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+\n     private MetaDataRepository _repos;\n     private transient ClassLoader _loader = null;\n \n@@ -179,6 +185,7 @@\n     private FieldMetaData[] _allListingFields = null;\n     private FetchGroup[] _fgs = null;\n     private FetchGroup[] _customFGs = null;\n+    private boolean _intercepting = false;\n \n     /**\n      * Constructor. Supply described type and repository.\n@@ -229,6 +236,8 @@ protected void setDescribedType(Class type) {\n             (type.getSuperclass().getName()))\n             throw new MetaDataException(_loc.get(\"enum\", type));\n         _type = type;\n+        if (PersistenceCapable.class.isAssignableFrom(type))\n+            setIntercepting(true);\n     }\n \n     /**\n@@ -683,6 +692,22 @@ public void setEmbeddedOnly(boolean embed) {\n         _embedded = (embed) ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n+    /**\n+     * Whether the type's fields are actively intercepted, either by\n+     * redefinition or enhancement.\n+     */\n+    public boolean isIntercepting() {\n+        return _intercepting;\n+    }\n+\n+    /**\n+     * Whether the type's fields are actively intercepted, either by\n+     * redefinition or enhancement.\n+     */\n+    public void setIntercepting(boolean intercepting) {\n+        _intercepting = intercepting;\n+    }\n+\n     /**\n      * Whether the type is a managed interface.\n      */\n@@ -784,8 +809,9 @@ public String getInterfacePropertyAlias(Class iface, String orig) {\n         synchronized (_ifaceMap) {\n             Map fields = (Map) _ifaceMap.get(iface);\n             if (fields == null)\n-                return new String[0];\n-            return (String[]) fields.keySet().toArray(new String[0]);\n+                return EMPTY_STRING_ARRAY;\n+            return (String[]) fields.keySet().toArray(\n+                new String[fields.size()]);\n         }\n     }\n     \n@@ -839,7 +865,8 @@ public boolean isAccessibleField(String field) {\n         if (getDeclaredField(field) != null)\n             return true;\n         if (_staticFields == null) {\n-            Field[] fields = _type.getDeclaredFields();\n+            Field[] fields = (Field[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredFieldsAction(_type)); \n             Set names = new HashSet((int) (fields.length * 1.33 + 1));\n             for (int i = 0; i < fields.length; i++)\n                 if (Modifier.isStatic(fields[i].getModifiers()))\n@@ -1397,15 +1424,12 @@ public Field getDetachedStateField() {\n         if (fieldName == null || SYNTHETIC.equals(fieldName))\n             return null;\n \n-        for (Class type = _type; type != null && type != Object.class;\n-            type = type.getSuperclass()) {\n-            try {\n-                return type.getDeclaredField(fieldName);\n-            } catch (Exception e) {\n-            }\n-        }\n-        throw new MetaDataException(_loc.get(\"no-detach-state\", fieldName,\n-            _type));\n+        Field f = Reflection.findField(_type, fieldName, false);\n+        if (f != null)\n+            return f;\n+        else\n+            throw new MetaDataException(\n+                _loc.get(\"no-detach-state\", fieldName, _type));\n     }\n \n     /**\n@@ -1572,7 +1596,8 @@ public boolean resolve(int mode) {\n \n         int val = _repos.getValidate();\n         boolean runtime = (val & _repos.VALIDATE_RUNTIME) != 0;\n-        boolean validate = !PersistenceCapable.class.isAssignableFrom(_type)\n+        boolean validate =\n+            !ImplHelper.isManagedType(getRepository().getConfiguration(), _type)\n             || (val & MetaDataRepository.VALIDATE_UNENHANCED) == 0;\n \n         // we only do any actions for metadata mode\n@@ -1601,8 +1626,8 @@ protected void resolveMeta(boolean runtime) {\n             log.trace(_loc.get((embed) ? \"resolve-embed-meta\" : \"resolve-meta\",\n                 this + \"@\" + System.identityHashCode(this)));\n \n-        if (runtime && !_type.isInterface() && \n-            !PersistenceCapable.class.isAssignableFrom(_type))\n+        if (runtime && !_type.isInterface() &&\n+            !ImplHelper.isManagedType(getRepository().getConfiguration(),_type))\n             throw new MetaDataException(_loc.get(\"not-enhanced\", _type));\n \n         // are we the target of an embedded value?\n@@ -1706,7 +1731,7 @@ protected void validateMeta(boolean runtime) {\n         validateDataCache();\n         validateDetachable();\n         validateExtensionKeys();\n-        validateIdentity(runtime);\n+        validateIdentity();\n         validateAccessType();\n     }\n \n@@ -1765,7 +1790,7 @@ private void validateDataCache() {\n     /**\n      * Assert that the identity handling for this class is valid.\n      */\n-    private void validateIdentity(boolean runtime) {\n+    private void validateIdentity() {\n         // make sure identity types are consistent\n         ClassMetaData sup = getPCSuperclassMetaData();\n         int id = getIdentityType();\n@@ -1789,7 +1814,7 @@ private void validateIdentity(boolean runtime) {\n         if (id == ID_APPLICATION) {\n             if (_idStrategy != ValueStrategies.NONE)\n                 throw new MetaDataException(_loc.get(\"appid-strategy\", _type));\n-            validateAppIdClass(runtime);\n+            validateAppIdClass();\n         } else if (id != ID_UNKNOWN)\n             validateNoPKFields();\n \n@@ -1805,7 +1830,7 @@ private void validateIdentity(boolean runtime) {\n     /**\n      * Make sure the application identity class is valid.\n      */\n-    private void validateAppIdClass(boolean runtime) {\n+    private void validateAppIdClass() {\n         // base types must declare an oid class if not single-field identity\n         FieldMetaData[] pks = getPrimaryKeyFields();\n         if (getObjectIdType() == null) {\n@@ -1823,7 +1848,7 @@ private void validateAppIdClass(boolean runtime) {\n                 ClassMetaData embed = pks[0].getEmbeddedMetaData();\n                 validateAppIdClassMethods(embed.getDescribedType());\n                 validateAppIdClassPKs(embed, embed.getFields(),\n-                    embed.getDescribedType(), runtime);\n+                    embed.getDescribedType());\n             }\n             return;\n         }\n@@ -1850,7 +1875,7 @@ private void validateAppIdClass(boolean runtime) {\n                 validateAppIdClassMethods(_objectId);\n \n             // make sure the app id class has all pk fields\n-            validateAppIdClassPKs(this, pks, _objectId, runtime);\n+            validateAppIdClassPKs(this, pks, _objectId);\n         }\n     }\n \n@@ -1904,7 +1929,7 @@ private void validateAppIdClassMethods(Class oid) {\n      * Validate that the primary key class has all pk fields.\n      */\n     private void validateAppIdClassPKs(ClassMetaData meta,\n-        FieldMetaData[] fmds, Class oid, boolean runtime) {\n+        FieldMetaData[] fmds, Class oid) {\n         if (fmds.length == 0 && !Modifier.isAbstract(meta.getDescribedType().\n             getModifiers()))\n             throw new MetaDataException(_loc.get(\"no-pk\", _type));\n@@ -1944,7 +1969,7 @@ private void validateAppIdClassPKs(ClassMetaData meta,\n                     throw new MetaDataException(_loc.get(\"invalid-id\",\n                         _type, fmds[i].getName()));\n                 m = Reflection.findSetter(oid, fmds[i].getName(),\n-                    fmds[i].getDeclaredType(), false);\n+                    fmds[i].getObjectIdFieldType(), false);\n                 if (m == null || m.getReturnType() != void.class)\n                     throw new MetaDataException(_loc.get(\"invalid-id\",\n                         _type, fmds[i].getName()));\n@@ -2012,7 +2037,7 @@ private void validateDetachable() {\n      */\n     public FetchGroup[] getDeclaredFetchGroups() {\n         if (_fgs == null)\n-            _fgs = (_fgMap == null) ? new FetchGroup[0] : (FetchGroup[])\n+            _fgs = (_fgMap == null) ? EMPTY_FETCH_GROUP_ARRAY : (FetchGroup[])\n                 _fgMap.values().toArray(new FetchGroup[_fgMap.size()]); \n         return _fgs;\n     }"},{"sha":"308d022b9f12678cd57b5fda4911edff538b5eb3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -122,4 +122,8 @@ public void addClassExtensionKeys(Collection exts) {\n     public void addFieldExtensionKeys(Collection exts) {\n         _delegate.addFieldExtensionKeys(exts);\n     }\n+\n+    public void loadXMLMetaData(FieldMetaData fmd) {\n+        _delegate.loadXMLMetaData(fmd);\n+    }\n }"},{"sha":"dca02966bb3102ab71a7ca46ff30fbeeb4ff262b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":87,"deletions":15,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,12 +22,15 @@\n import java.io.IOException;\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n+import java.io.Serializable;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -45,11 +48,11 @@\n import org.apache.commons.collections.comparators.ComparatorChain;\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -59,6 +62,7 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Strings;\n \n /**\n@@ -167,12 +171,17 @@\n     private String _extString = null;\n     private Map _extValues = Collections.EMPTY_MAP;\n     private Map _fieldValues = Collections.EMPTY_MAP;\n+    private Boolean _enumField = null;\n+    private Boolean _lobField = null;\n+    private Boolean _serializableField = null;\n+    private boolean _generated = false;\n \n     // Members aren't serializable. Use a proxy that can provide a Member\n     // to avoid writing the full Externalizable implementation.\n     private transient MemberProvider _backingMember = null;\n+    private String _backingFieldName = null;\n     \n-    // Members aren't serializable. Initializing _extMethod and _factMethod to \n+    // Members aren't serializable. Initializing _extMethod and _factMethod to\n     // DEFAULT_METHOD is sufficient to trigger lazy population of these fields.\n     private transient Method _extMethod = DEFAULT_METHOD;\n     private transient Member _factMethod = DEFAULT_METHOD;\n@@ -586,7 +595,17 @@ public boolean isInDefaultFetchGroup() {\n                 switch (getTypeCode()) {\n                     case JavaTypes.OBJECT:\n                     case JavaTypes.PC:\n+                        if (isSerializable() || isEnum())\n+                            _dfg = DFG_TRUE;\n+                        else\n+                            _dfg = DFG_FALSE;\n+                        break;\n                     case JavaTypes.ARRAY:\n+                        if (isLobArray())\n+                            _dfg = DFG_TRUE;\n+                        else\n+                            _dfg = DFG_FALSE;\n+                        break;\n                     case JavaTypes.COLLECTION:\n                     case JavaTypes.MAP:\n                     case JavaTypes.PC_UNTYPED:\n@@ -600,6 +619,39 @@ public boolean isInDefaultFetchGroup() {\n         return (_dfg & DFG_TRUE) > 0;\n     }\n \n+    private boolean isEnum() {\n+        if (_enumField == null) {\n+            Class dt = getDeclaredType();\n+            _enumField = JavaVersions.isEnumeration(dt)\n+                ? Boolean.TRUE : Boolean.FALSE;\n+        }\n+        return _enumField.booleanValue();\n+    }\n+\n+    private boolean isSerializable() {\n+        if (_serializableField == null) {\n+            Class dt = getDeclaredType();\n+            if (Serializable.class.isAssignableFrom(dt))\n+                _serializableField = Boolean.TRUE;\n+            else\n+                _serializableField = Boolean.FALSE;\n+        }\n+        return _serializableField.booleanValue();\n+    }\n+\n+    private boolean isLobArray() {\n+        // check for byte[], Byte[], char[], Character[]\n+        if (_lobField == null) {\n+            Class dt = getDeclaredType();\n+            if (dt == byte[].class || dt == Byte[].class ||\n+                dt == char[].class || dt == Character[].class)\n+                _lobField = Boolean.TRUE;\n+            else\n+                _lobField = Boolean.FALSE;\n+        }\n+        return _lobField.booleanValue();\n+    }\n+\n     /**\n      * Whether this field is in the default fetch group.\n      */\n@@ -1213,7 +1265,8 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n \n         try {\n             if (val == null && getNullValue() == NULL_DEFAULT)\n-                return getDeclaredType().newInstance();\n+                return AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(getDeclaredType())); \n \n             // invoke either the constructor for the field type,\n             // or the static type.toField(val[, ctx]) method\n@@ -1246,6 +1299,8 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n \n             if (e instanceof OpenJPAException)\n                 throw (OpenJPAException) e;\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"factory-err\", this,\n                 Exceptions.toString(val), e.toString())).setCause(e);\n         }\n@@ -1509,6 +1564,10 @@ public boolean equals(Object other) {\n             getFullName(true));\n     }\n \n+    public int hashCode() {\n+        return getFullName(true).hashCode();\n+    }\n+\n     public int compareTo(Object other) {\n         if (other == null)\n             return 1;\n@@ -1581,8 +1640,8 @@ public boolean resolve(int mode) {\n         MetaDataRepository repos = getRepository();\n         int validate = repos.getValidate();\n         if ((validate & MetaDataRepository.VALIDATE_META) != 0\n-            && (!PersistenceCapable.class.isAssignableFrom\n-            (_owner.getDescribedType())\n+            && (!ImplHelper.isManagedType(repos.getConfiguration(),\n+                _owner.getDescribedType())\n             || (validate & MetaDataRepository.VALIDATE_UNENHANCED) == 0)) {\n             validateLRS();\n             if ((validate & repos.VALIDATE_RUNTIME) == 0)\n@@ -1723,6 +1782,10 @@ public void copy(FieldMetaData field) {\n         _fieldValues = Collections.EMPTY_MAP;\n         _primKey = field.isPrimaryKey();\n         _backingMember = field._backingMember;\n+        _enumField = field._enumField;\n+        _lobField = field._lobField;\n+        _serializableField = field._serializableField;\n+        _generated = field._generated;\n \n         // embedded fields can't be versions\n         if (_owner.getEmbeddingMetaData() == null && _version == null)\n@@ -1939,7 +2002,7 @@ public void copy (ValueMetaData vmd)\n         private transient Member _member;\n         \n         private MemberProvider(Member member) {\n-            if (_member instanceof Constructor)\n+            if (member instanceof Constructor)\n                 throw new IllegalArgumentException();\n \n             _member = member;\n@@ -1956,22 +2019,23 @@ public void readExternal(ObjectInput in)\n             String memberName = (String) in.readObject();\n             try {\n                 if (isField)\n-                    _member = cls.getDeclaredField(memberName);\n+                    _member = (Field) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredFieldAction(\n+                            cls,memberName)); \n                 else {\n                     Class[] parameterTypes = (Class[]) in.readObject();\n-                    _member = cls.getDeclaredMethod(memberName, parameterTypes);\n+                    _member = (Method) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredMethodAction(\n+                            cls, memberName, parameterTypes));\n                 }\n             } catch (SecurityException e) {\n                 IOException ioe = new IOException(e.getMessage());\n                 ioe.initCause(e);\n                 throw ioe;\n-            } catch (NoSuchFieldException e) {\n-                IOException ioe = new IOException(e.getMessage());\n-                ioe.initCause(e);\n-                throw ioe;\n-            } catch (NoSuchMethodException e) {\n-                IOException ioe = new IOException(e.getMessage());\n-                ioe.initCause(e);\n+            } catch (PrivilegedActionException pae) {\n+                IOException ioe = new IOException(\n+                    pae.getException().getMessage());\n+                ioe.initCause(pae);\n                 throw ioe;\n             }\n         }\n@@ -1986,4 +2050,12 @@ public void writeExternal(ObjectOutput out)\n                 out.writeObject(((Method) _member).getParameterTypes());\n         }\n     }\n+\n+    public boolean isValueGenerated() {\n+        return _generated;\n+    }\n+\n+    public void setValueGenerated(boolean generated) {\n+        this._generated = generated;\n+    }\n }"},{"sha":"532dcb10b2e69e42d5cbeadf1a86725a8d12bf7a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -22,6 +22,8 @@\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Order by a field in the related type in memory.\n@@ -33,10 +35,13 @@\n \n     private final FieldMetaData _rel;\n     private final boolean _asc;\n+    private final OpenJPAConfiguration _conf;\n \n-    public InMemoryRelatedFieldOrder(FieldMetaData rel, boolean asc) {\n+    public InMemoryRelatedFieldOrder(FieldMetaData rel, boolean asc,\n+        OpenJPAConfiguration conf) {\n         _rel = rel;\n         _asc = asc;\n+        _conf = conf;\n     }\n \n     public String getName() {\n@@ -54,12 +59,12 @@ public Comparator getComparator() {\n     public int compare(Object o1, Object o2) {\n         if (o1 == o2)\n             return 0;\n-        if (!(o1 instanceof PersistenceCapable)\n-            || !(o2 instanceof PersistenceCapable))\n+        if (!(ImplHelper.isManageable(o1))\n+            || !(ImplHelper.isManageable(o2)))\n             return 0;\n \n-        PersistenceCapable pc1 = (PersistenceCapable) o1;\n-        PersistenceCapable pc2 = (PersistenceCapable) o2;\n+        PersistenceCapable pc1 = ImplHelper.toPersistenceCapable(o1, _conf);\n+        PersistenceCapable pc2 = ImplHelper.toPersistenceCapable(o2, _conf);\n         OpenJPAStateManager sm1 = (OpenJPAStateManager) pc1.pcGetStateManager();\n         OpenJPAStateManager sm2 = (OpenJPAStateManager) pc2.pcGetStateManager();\n         if (sm1 == null || sm2 == null)"},{"sha":"a06e5a9acc3387401e722419ed1dc0c3a1201945","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -23,6 +23,8 @@\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.util.ApplicationIds;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n /**\n  * Order by the field value in memory. If the field contains\n@@ -36,9 +38,11 @@\n     implements Order, Comparator {\n \n     private final boolean _asc;\n+    private final OpenJPAConfiguration _conf;\n \n-    public InMemoryValueOrder(boolean asc) {\n+    public InMemoryValueOrder(boolean asc, OpenJPAConfiguration conf) {\n         _asc = asc;\n+        _conf = conf;\n     }\n \n     public String getName() {\n@@ -63,15 +67,15 @@ public int compare(Object o1, Object o2) {\n \n         // non-pc values must be comparable\n         int cmp;\n-        if (!(o1 instanceof PersistenceCapable)\n-            || !(o2 instanceof PersistenceCapable)) {\n+        if (!(ImplHelper.isManageable(o1))\n+            || !(ImplHelper.isManageable(o2))) {\n             cmp = ((Comparable) o1).compareTo(o2);\n             return (_asc) ? cmp : -cmp;\n         }\n \n         // order on primary key values\n-        PersistenceCapable pc1 = (PersistenceCapable) o1;\n-        PersistenceCapable pc2 = (PersistenceCapable) o2;\n+        PersistenceCapable pc1 = ImplHelper.toPersistenceCapable(o1, _conf);\n+        PersistenceCapable pc2 = ImplHelper.toPersistenceCapable(o2, _conf);\n         OpenJPAStateManager sm1 = (OpenJPAStateManager) pc1.pcGetStateManager();\n         OpenJPAStateManager sm2 = (OpenJPAStateManager) pc2.pcGetStateManager();\n         if (sm1 == null || sm2 == null)"},{"sha":"e67ef031b62931e5aa9bb6e1ea410772e91eca8e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":26,"deletions":12,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.reflect.Method;\n import java.io.ByteArrayInputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Set;\n import java.util.HashSet;\n import java.util.Map;\n@@ -28,6 +30,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PCEnhancer;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import serp.bytecode.BCClass;\n import serp.bytecode.BCClassLoader;\n@@ -74,16 +77,24 @@ public synchronized Class createImpl(ClassMetaData meta) {\n         if (impl != null)\n             return impl;\n \n-        ClassLoader parentLoader = iface.getClassLoader();\n-        BCClassLoader loader = new BCClassLoader(_project, parentLoader);\n-        BCClassLoader enhLoader = new BCClassLoader(_enhProject, parentLoader);\n+        ClassLoader parentLoader = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getClassLoaderAction(iface)); \n+        BCClassLoader loader = (BCClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project,\n+                parentLoader));\n+        BCClassLoader enhLoader = (BCClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_enhProject,\n+                parentLoader));\n         BCClass bc = _project.loadClass(getClassName(meta));\n         bc.declareInterface(iface);\n         ClassMetaData sup = meta.getPCSuperclassMetaData();\n         if (sup != null) {\n             bc.setSuperclass(sup.getInterfaceImpl());\n-            enhLoader = new BCClassLoader(_enhProject, \n-            \t\tsup.getInterfaceImpl().getClassLoader());\n+            enhLoader = (BCClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(\n+                    _enhProject, (ClassLoader) AccessController\n+                        .doPrivileged(J2DoPrivHelper.getClassLoaderAction(sup\n+                            .getInterfaceImpl()))));\n         }\n \n         FieldMetaData[] fields = meta.getDeclaredFields();\n@@ -164,7 +175,8 @@ private void addField (BCClass bc, Class iface, FieldMetaData fmd,\n      */\n     private void invalidateNonBeanMethods(BCClass bc, Class iface, \n         Set methods) {\n-        Method[] meths = iface.getDeclaredMethods();\n+        Method[] meths = (Method[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredMethodsAction(iface)); \n         BCMethod meth;\n         Code code;\n         Class type = _repos.getMetaDataFactory().getDefaults().\n@@ -198,9 +210,10 @@ protected final String getClassName(ClassMetaData meta) {\n      */\n     private static Method getMethodSafe(Class iface, String name, Class arg) {\n         try {\n-            return iface.getDeclaredMethod(name, arg == null ? null :\n-                new Class[]{arg});\n-        } catch (NoSuchMethodException e) {\n+            return (Method) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodAction(\n+                    iface, name, arg == null ? null : new Class[]{arg}));\n+        } catch (PrivilegedActionException pae) {\n             throw new InternalException (_loc.get (\"interface-mismatch\", name));\n         }\n     }\n@@ -209,10 +222,11 @@ private static boolean isGetter(Class iface, FieldMetaData fmd) {\n         if (fmd.getType() != boolean.class && fmd.getType() != Boolean.class)\n             return true;\n         try {\n-            Method meth = iface.getDeclaredMethod(\"is\" + StringUtils.capitalize\n-                (fmd.getName()), (Class[]) null);\n+            Method meth = (Method) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodAction(iface, \"is\" +\n+                    StringUtils.capitalize(fmd.getName()), (Class[]) null));\n             return meth == null;\n-        } catch (NoSuchMethodException e) {}\n+        } catch (PrivilegedActionException pae) {}\n         return true;\n     }\n }"},{"sha":"cc14ca852ac44589e4b9726fca13dbc7d18ca23c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -144,4 +144,10 @@ public Class getResultSetMappingScope(String resultSetMappingName,\n      * Add any extension keys used by this instance to the given set.\n      */\n     public void addFieldExtensionKeys (Collection exts);\n+\n+    /**\n+     * Load XMLClassMetadata for the given class. Loaded\n+     * metadata should be added directly to the repository.\n+     */\n+    public void loadXMLMetaData(FieldMetaData fmd);\n }"},{"sha":"743d903a7018558bffa8270ec76409f8765d5b4d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -32,4 +32,5 @@\n     public static final int MODE_MAPPING = 2;\n     public static final int MODE_QUERY = 4;\n     public static final int MODE_MAPPING_INIT = 8;\n+    public static final int MODE_ANN_MAPPING = 16;\n }"},{"sha":"0d879a67257d5d740f393bbc375927722f368c77","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":123,"deletions":16,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.meta;\n \n import java.io.Serializable;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -37,15 +38,18 @@\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PCRegistry.RegisterClassListener;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.DynamicPersistenceCapable;\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.ImplHelper;\n import serp.util.Strings;\n \n /**\n@@ -113,6 +117,10 @@\n     // map of classes to lists of their subclasses\n     private final Map _subs = Collections.synchronizedMap(new HashMap());\n \n+    // xml mapping\n+    protected final XMLMetaData[] EMPTY_XMLMETAS;\n+    private final Map _xmlmetas = new HashMap();\n+\n     private transient OpenJPAConfiguration _conf = null;\n     private transient Log _log = null;\n     private transient InterfaceImplGenerator _implGen = null;\n@@ -144,6 +152,7 @@ public MetaDataRepository() {\n         EMPTY_METAS = newClassMetaDataArray(0);\n         EMPTY_FIELDS = newFieldMetaDataArray(0);\n         EMPTY_ORDERS = newOrderArray(0);\n+        EMPTY_XMLMETAS = newXMLClassMetaDataArray(0);\n     }\n \n     /**\n@@ -272,9 +281,14 @@ else if (on)\n      */\n     public synchronized ClassMetaData getMetaData(Class cls,\n         ClassLoader envLoader, boolean mustExist) {\n+        if (cls != null &&\n+            DynamicPersistenceCapable.class.isAssignableFrom(cls))\n+            cls = cls.getSuperclass();\n+\n         ClassMetaData meta = getMetaDataInternal(cls, envLoader);\n         if (meta == null && mustExist) {\n-            if (cls != null && !PersistenceCapable.class.isAssignableFrom(cls))\n+            if (cls != null &&\n+                !ImplHelper.isManagedType(_conf, cls))\n                 throw new MetaDataException(_loc.get(\"no-meta-notpc\", cls)).\n                     setFatal(false);\n \n@@ -312,7 +326,7 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n \n         // multiple classes may have been defined with the same alias: we\n         // will filter by checking against the current list of the\n-        // persistent types and filted based on which classes are loadable\n+        // persistent types and filter based on which classes are loadable\n         // via the current environment's ClassLoader\n         Set pcNames = getPersistentTypeNames(false, envLoader);\n         Class cls = null;\n@@ -346,7 +360,7 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n         if (_aliases.containsKey(alias)) {\n             if (mustExist)\n                 throw new MetaDataException(_loc.get(\"no-alias-meta\", alias,\n-                    _aliases));\n+                    _aliases.toString()));\n             return null;\n         }\n \n@@ -398,7 +412,9 @@ private ClassMetaData getMetaDataInternal(Class cls,\n             // class never registers itself with the system\n             if ((_validate & VALIDATE_RUNTIME) != 0) {\n                 try {\n-                    Class.forName(cls.getName(), true, cls.getClassLoader());\n+                    Class.forName(cls.getName(), true,\n+                        (ClassLoader) AccessController.doPrivileged(\n+                            J2DoPrivHelper.getClassLoaderAction(cls)));\n                 } catch (Throwable t) {\n                 }\n             }\n@@ -774,6 +790,13 @@ protected FieldMetaData newFieldMetaData(String name, Class type,\n         return new FieldMetaData[length];\n     }\n \n+    /**\n+     * Create a new array of the proper xml class metadata subclass.\n+     */\n+    protected XMLMetaData[] newXMLClassMetaDataArray(int length) {\n+        return new XMLClassMetaData[length];\n+    }\n+\n     /**\n      * Create a new embedded class metadata instance.\n      */\n@@ -820,15 +843,15 @@ protected Order newOrder(FieldMetaData owner, String name, boolean asc) {\n      * Order by the field value.\n      */\n     protected Order newValueOrder(FieldMetaData owner, boolean asc) {\n-        return new InMemoryValueOrder(asc);\n+        return new InMemoryValueOrder(asc, getConfiguration());\n     }\n \n     /**\n      * Order by a field of the related type.\n      */\n     protected Order newRelatedFieldOrder(FieldMetaData owner,\n         FieldMetaData rel, boolean asc) {\n-        return new InMemoryRelatedFieldOrder(rel, asc);\n+        return new InMemoryRelatedFieldOrder(rel, asc, getConfiguration());\n     }\n \n     /**\n@@ -923,7 +946,7 @@ public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\n         boolean mustExist) {\n         if (oid == null && mustExist)\n             throw new MetaDataException(_loc.get(\"no-oid-meta\", oid, \"?\",\n-                _oids));\n+                _oids.toString()));\n         if (oid == null)\n             return null;\n \n@@ -961,7 +984,7 @@ public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\n         if (!mustExist)\n             return null;\n         throw new MetaDataException(_loc.get(\"no-oid-meta\", oid,\n-            oid.getClass(), _oids), oid);\n+            oid.getClass(), _oids)).setFailedObject(oid);\n     }\n \n     /**\n@@ -976,7 +999,8 @@ private void resolveIdentityClass(Object oid) {\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"resolve-identity\", oidClass));\n \n-        ClassLoader cl = oidClass.getClassLoader();\n+        ClassLoader cl = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getClassLoaderAction(oidClass)); \n         String className;\n         while (oidClass != null && oidClass != Object.class) {\n             className = oidClass.getName();\n@@ -1235,6 +1259,20 @@ private Class classForName(String name, ClassLoader loader) {\n                 _log.info(_loc.get(\"bad-discover-class\", name));\n             if (_log.isTraceEnabled())\n                 _log.trace(e);\n+        } catch (NoSuchMethodError nsme) {\n+            if (nsme.getMessage().indexOf(\".pc\") == -1)\n+                throw nsme;\n+\n+            // if the error is about a method that uses the PersistenceCapable\n+            // 'pc' method prefix, perform some logging and continue. This\n+            // probably just means that the class is not yet enhanced.\n+            if ((_validate & VALIDATE_RUNTIME) != 0) {\n+                if (_log.isWarnEnabled())\n+                    _log.warn(_loc.get(\"bad-discover-class\", name));\n+            } else if (_log.isInfoEnabled())\n+                _log.info(_loc.get(\"bad-discover-class\", name));\n+            if (_log.isTraceEnabled())\n+                _log.trace(nsme);\n         }\n         return null;\n     }\n@@ -1382,14 +1420,16 @@ private void processRegisteredClass(Class cls) {\n \n         // set alias for class\n         String alias = PCRegistry.getTypeAlias(cls);\n-        synchronized (_aliases) {\n-            List classList = (List) _aliases.get(alias);\n-            if (classList == null) {\n-                classList = new ArrayList(3);\n-                _aliases.put(alias, classList);\n+        if (alias != null) {\n+            synchronized (_aliases) {\n+                List classList = (List) _aliases.get(alias);\n+                if (classList == null) {\n+                    classList = new ArrayList(3);\n+                    _aliases.put(alias, classList);\n+                }\n+                if (!classList.contains(cls))\n+                    classList.add(cls);\n             }\n-            if (!classList.contains(cls))\n-                classList.add(cls);\n         }\n     }\n \n@@ -1829,4 +1869,71 @@ public boolean equals(Object obj)\n \t\t\t\t&& StringUtils.equals (name, qk.name);\t\n \t\t}\n \t}\n+    \n+    /**\n+     * Return XML metadata for a given field metadata\n+     * @param fmd\n+     * @return XML metadata\n+     */\n+    public synchronized XMLMetaData getXMLMetaData(FieldMetaData fmd) {\n+        Class cls = fmd.getDeclaredType();\n+        // check if cached before\n+        XMLMetaData xmlmeta = (XMLClassMetaData) _xmlmetas.get(cls);\n+        if (xmlmeta != null)\n+            return xmlmeta;\n+        \n+        // load JAXB XML metadata\n+        _factory.loadXMLMetaData(fmd);\n+        \n+        xmlmeta = (XMLClassMetaData) _xmlmetas.get(cls);\n+\n+        return xmlmeta;\n+    }\n+\n+    /**\n+     * Create a new metadata, populate it with default information, add it to\n+     * the repository, and return it.\n+     *\n+     * @param access the access type to use in populating metadata\n+     */\n+    public XMLClassMetaData addXMLMetaData(Class type, String name) {\n+        XMLClassMetaData meta = newXMLClassMetaData(type, name);\n+        \n+        // synchronize on this rather than the map, because all other methods\n+        // that access _xmlmetas are synchronized on this\n+        synchronized (this) {\n+            _xmlmetas.put(type, meta);\n+        }\n+        return meta;\n+    }\n+\n+    /**\n+     * Return the cached XMLClassMetaData for the given class\n+     * Return null if none.\n+     */\n+    public XMLMetaData getCachedXMLMetaData(Class cls) {\n+        return (XMLMetaData) _xmlmetas.get(cls);\n+    }\n+    \n+    /**\n+     * Create a new xml class metadata\n+     * @param type\n+     * @param name\n+     * @return a XMLClassMetaData\n+     */\n+    protected XMLClassMetaData newXMLClassMetaData(Class type, String name) {\n+        return new XMLClassMetaData(type, name);\n+    }\n+    \n+    /**\n+     * Create a new xml field meta, add it to the fieldMap in the given \n+     *     xml class metadata\n+     * @param type\n+     * @param name\n+     * @param meta\n+     * @return a XMLFieldMetaData\n+     */\n+    public XMLFieldMetaData newXMLFieldMetaData(Class type, String name) {\n+        return new XMLFieldMetaData(type, name);\n+    }\n }"},{"sha":"2aa78483341c27ba44152e97dd26e04335e75f16","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -134,4 +134,7 @@ public Member getBackingMember(FieldMetaData fmd) {\n     public Class getUnimplementedExceptionType() {\n         return null;\n     }\n+    \n+    public void loadXMLMetaData(FieldMetaData fmd) {\n+    }\n }"},{"sha":"73f99cb47639911eb837583469e851cba7ddf33b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,6 +20,8 @@\n \n import java.io.File;\n import java.io.Serializable;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.SeqValue;\n@@ -28,6 +30,7 @@\n import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.util.MetaDataException;\n@@ -252,7 +255,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n             String clsName = plugin.getClassName();\n \n             Class cls = Class.forName(clsName, true,\n-                Seq.class.getClassLoader());\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(Seq.class)));\n             StringBuffer props = new StringBuffer();\n             if (plugin.getProperties() != null)\n                 props.append(plugin.getProperties());\n@@ -262,7 +266,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n             // interface or a factory class\n             Seq seq;\n             if (Seq.class.isAssignableFrom(cls)) {\n-                seq = (Seq) cls.newInstance();\n+                seq = (Seq) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(cls));\n                 Configurations.configureInstance(seq,\n                     _repos.getConfiguration(), props.toString());\n                 seq.setType(_type);\n@@ -275,6 +280,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"cant-init-seq\", _name)).\n                 setCause(e);\n         }"},{"sha":"61a3c79828bbf75ab96047262702e6ba685e405d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.util.HashMap;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+public class XMLClassMetaData implements XMLMetaData     \n+{\n+    private Class _type;\n+    private int _code = JavaTypes.OBJECT;\n+    private int _xmltype = XMLTYPE;\n+    private String _name = null;\n+    private String _xmlname = null;\n+    private String _xmlnamespace = null;\n+    private boolean _isXMLRootElement = false;\n+    private HashMap _fieldMap = new HashMap();\n+    \n+    /**\n+     * Constructor.\n+     * \n+     * @param type the class that contains XmlType annotation.\n+     * @name  the persistent field name that maps to xml column\n+     */\n+    public XMLClassMetaData(Class type, String name) {\n+        _type = type;\n+        _name = name;\n+    }\n+    \n+    /**\n+     * Constructor.\n+     * \n+     * @param type the class that contains XmlType annotation.\n+     */\n+    public XMLClassMetaData(Class type) {\n+        _type = type;\n+    }\n+\n+    public void setName(String name) {\n+        _name = name;\n+    }\n+    \n+    public String getName() {\n+        return _name;\n+    }    \n+    \n+    public void setXmlname(String name) {\n+        _xmlname = name;\n+    }\n+    \n+    public String getXmlname() {\n+        return _isXMLRootElement ? null : _xmlname;\n+    }\n+\n+    public void setXmlnamespace(String name) {\n+        // avoid JAXB XML bind default name\n+        if (!StringUtils.equals(defaultName, name))\n+            _xmlnamespace = name;\n+    }\n+    \n+    public String getXmlnamespace() {\n+        return _xmlnamespace;\n+    }\n+\n+    public void setXmlRootElement(boolean isXMLRootElement) {\n+        _isXMLRootElement = isXMLRootElement;        \n+    }\n+\n+    public boolean isXmlRootElement() {\n+        return _isXMLRootElement;\n+    }\n+    \n+    public boolean isXmlElement() {\n+        return false;\n+    }\n+    \n+    public boolean isXmlAttribute() {\n+        return false;\n+    }\n+    \n+    public XMLMetaData getFieldMapping(String name) {\n+        return (XMLMetaData) _fieldMap.get(name);\n+    }\n+    \n+    public void setType(Class type) {\n+        _type = type;\n+    }\n+    \n+    public Class getType() {\n+        return _type;\n+    }\n+    \n+    public int getTypeCode() {\n+        return _code;\n+    }\n+\n+    public void setXmltype(int type) {\n+        _xmltype = type;\n+    }\n+\n+    public int getXmltype() {\n+        return _xmltype;\n+    }\n+    \n+    public void addField(String name, XMLMetaData field) {\n+        _fieldMap.put(name, field);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"179fbd602f30a8c59703ab258d8f59055cfe92ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+/**\n+ * Contains metadata about an xml element or attribute\n+ *\n+ * @author Catalina Wei\n+ * @since 1.0.0\n+ */\n+public class XMLFieldMetaData implements XMLMetaData {\n+\n+    private String _name;\n+    private String _xmlname = null;\n+    private String _xmlnamespace = null;\n+    private Class _decType = Object.class;\n+    private int _decCode = JavaTypes.OBJECT;\n+    private Class _type = Object.class;\n+    private int _code = JavaTypes.OBJECT;\n+    private int _xmltype;    \n+\n+    public XMLFieldMetaData() {        \n+    }\n+    \n+    public XMLFieldMetaData(Class type, String name) {\n+        setType(type);\n+        _name = name;\n+    }\n+    \n+    public Class getType() {\n+        return (_type == null) ? _decType : _type;\n+    }\n+\n+    public void setType(Class type) {\n+        _type = type;\n+        if (type != null)\n+            setTypeCode(JavaTypes.getTypeCode(type));\n+    }\n+\n+    public int getTypeCode() {\n+        return (_type == null) ? _decCode : _code;\n+    }\n+\n+    // set JavaTypes code\n+    public void setTypeCode(int code) {\n+        _code = code;\n+    }\n+    \n+    public void setName(String name) {\n+        _name = name;\n+    }\n+    \n+    public String getName() {\n+        return _name;\n+    }\n+    \n+    public void setXmlname(String name) {\n+        _xmlname = name;\n+    }\n+    \n+    public String getXmlname() {\n+        return _xmlname;\n+    }\n+    \n+    public void setXmlnamespace(String name) {\n+        // avoid JAXB XML bind default name\n+        if (!StringUtils.equals(defaultName, name))\n+            _xmlnamespace = name;\n+    }\n+    \n+    public String getXmlnamespace() {\n+        return _xmlnamespace;\n+    }\n+    \n+    public void setXmltype(int type) {\n+        _xmltype = type;\n+    }\n+    \n+    public int getXmltype() {\n+        return _xmltype;\n+    }\n+    \n+    public boolean isXmlRootElement() {\n+        return false;\n+    }\n+    \n+    public boolean isXmlElement() {\n+        return _xmltype == ELEMENT;\n+    }\n+    \n+    public boolean isXmlAttribute() {\n+        return _xmltype == ATTRIBUTE;\n+    }\n+    \n+    public XMLMetaData getFieldMapping(String name) {\n+        return null;\n+    }\n+    \n+    public void setXmlRootElement(boolean isXmlRootElement) {\n+    }\n+\n+    public void addField(String name, XMLMetaData field) {\n+    }\n+}"},{"sha":"f315012120fbdb96d291cdf75e1812cf6982c39f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Describe metadata about an xml type.\n+ * \n+ * @author Catalina Wei\n+ * @since 1.0.0\n+ */\n+public interface XMLMetaData extends Serializable {\n+    /**\n+     * JAXB XML binding default name\n+     */\n+    public static final String defaultName = \"##default\";\n+    public static final int XMLTYPE = 0;\n+    public static final int ELEMENT = 1;\n+    public static final int ATTRIBUTE = 2;\n+\n+    /**\n+     * Return true if mapping on an XmlRootElement.\n+     */\n+    public boolean isXmlRootElement();\n+\n+    /**\n+     * Return true if mapping on an XmlElement.\n+     */\n+    public boolean isXmlElement();\n+\n+    /**\n+     * Return true if mapping on an XmlAttribute.\n+     */\n+    public boolean isXmlAttribute();\n+    \n+    /**\n+     * Return XMLMapping for a given field.\n+     * @param name the field name.\n+     * @return XMLMapping.\n+     */\n+    public XMLMetaData getFieldMapping(String name); \n+    \n+    /**\n+     * Set type.\n+     */\n+    public void setType(Class type);\n+\n+    /**\n+     * Return type.\n+     */\n+    public Class getType();\n+\n+    /**\n+     * Return type code.\n+     */\n+    public int getTypeCode();\n+\n+    /**\n+     * Return the mapping name.\n+     */\n+    public String getName();\n+\n+    /**\n+     * Return xml element tag name or xml attribute name.\n+     */\n+    public String getXmlname();\n+\n+    /**\n+     * Return xml namespace.\n+     */\n+    public String getXmlnamespace();\n+\n+    /**\n+     * Set field name.\n+     * @param name the field name.\n+     */\n+    public void setName(String name);\n+\n+    /**\n+     * Set xml element or attribute name.\n+     * @param name the element name or attribute name\n+     */\n+    public void setXmlname(String name);\n+\n+    /**\n+     * Set namespace.\n+     * @param namespace\n+     */\n+    public void setXmlnamespace(String namespace);\n+\n+    /**\n+     * Set xmltype\n+     * @param type XMLTYPE, ELEMENT, or ATTRIBUTE\n+     */\n+    public void setXmltype(int type);\n+\n+    /**\n+     * Return xmltype\n+     * @return xmltype\n+     */\n+    public int getXmltype();\n+    \n+    public void setXmlRootElement(boolean isXmlRootElement);\n+    \n+    public void addField(String name, XMLMetaData field);\n+}"},{"sha":"d7ec2d10fc3e2f8d5dddf66dd260936046c72ff8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -201,7 +201,7 @@ private void setIdentity(Object val) {\n         if (val == null || _identity != null)\n             return;\n \n-        if (ImplHelper.isManagedType(val.getClass()))\n+        if (ImplHelper.isManagedType(null, val.getClass()))\n             _identity = Boolean.TRUE;\n         else\n             _identity = Boolean.FALSE;"},{"sha":"f0776424f2cadc98c40914d01f811c4dc2d59f72","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":36,"deletions":15,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,16 +20,19 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Date;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.FieldManager;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -47,6 +50,8 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ApplicationIds.class);\n+    private static final Localizer _loc2 = Localizer.forPackage\n+        (StateManagerImpl.class);\n \n     /**\n      * Return the primary key values for the given object id. The values\n@@ -123,41 +128,41 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                     if (!convert && !(val instanceof Byte))\n                         throw new ClassCastException(\"!(x instanceof Byte)\");\n                     return new ByteId(meta.getDescribedType(),\n-                        ((Number) val).byteValue());\n+                        val == null ? 0 : ((Number) val).byteValue());\n                 case JavaTypes.CHAR:\n                 case JavaTypes.CHAR_OBJ:\n                     return new CharId(meta.getDescribedType(),\n-                        ((Character) val).charValue());\n+                        val == null ? 0 : ((Character) val).charValue());\n                 case JavaTypes.DOUBLE:\n                 case JavaTypes.DOUBLE_OBJ:\n                     if (!convert && !(val instanceof Double))\n                         throw new ClassCastException(\"!(x instanceof Double)\");\n                     return new DoubleId(meta.getDescribedType(),\n-                        ((Number) val).doubleValue());\n+                        val == null ? 0 : ((Number) val).doubleValue());\n                 case JavaTypes.FLOAT:\n                 case JavaTypes.FLOAT_OBJ:\n                     if (!convert && !(val instanceof Float))\n                         throw new ClassCastException(\"!(x instanceof Float)\");\n                     return new FloatId(meta.getDescribedType(),\n-                        ((Number) val).floatValue());\n+                        val == null ? 0 : ((Number) val).floatValue());\n                 case JavaTypes.INT:\n                 case JavaTypes.INT_OBJ:\n                     if (!convert && !(val instanceof Integer))\n                         throw new ClassCastException(\"!(x instanceof Integer)\");\n                     return new IntId(meta.getDescribedType(),\n-                        ((Number) val).intValue());\n+                        val == null ? 0 : ((Number) val).intValue());\n                 case JavaTypes.LONG:\n                 case JavaTypes.LONG_OBJ:\n                     if (!convert && !(val instanceof Long))\n                         throw new ClassCastException(\"!(x instanceof Long)\");\n                     return new LongId(meta.getDescribedType(),\n-                        ((Number) val).longValue());\n+                        val == null ? 0 : ((Number) val).longValue());\n                 case JavaTypes.SHORT:\n                 case JavaTypes.SHORT_OBJ:\n                     if (!convert && !(val instanceof Short))\n                         throw new ClassCastException(\"!(x instanceof Short)\");\n                     return new ShortId(meta.getDescribedType(),\n-                        ((Number) val).shortValue());\n+                        val == null ? 0 : ((Number) val).shortValue());\n                 case JavaTypes.STRING:\n                     return new StringId(meta.getDescribedType(), (String) val);\n                 case JavaTypes.DATE:\n@@ -188,8 +193,11 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n             throw new UserException(_loc.get(\"objectid-abstract\", meta));\n         Object copy = null;\n         try {\n-            copy = oidType.newInstance();\n+            copy = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(oidType));\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException) t).getException();\n             throw new GeneralException(t);\n         }\n \n@@ -319,8 +327,11 @@ private static Object copy(Object oid, ClassMetaData meta,\n         Class oidType = oid.getClass();\n         Object copy = null;\n         try {\n-            copy = oidType.newInstance();\n+            copy = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(oidType));\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException) t).getException();\n             throw new GeneralException(t);\n         }\n \n@@ -422,15 +433,25 @@ public static boolean assign(OpenJPAStateManager sm, StoreManager store,\n     }\n \n     /**\n-     * Assign generated values to given fields.\n+     * Assign generated values to given primary key fields.\n      */\n     private static boolean assign(OpenJPAStateManager sm, StoreManager store,\n         FieldMetaData[] pks, boolean preFlush) {\n         for (int i = 0; i < pks.length; i++)\n-            if (pks[i].getValueStrategy() != ValueStrategies.NONE\n-                && sm.isDefaultValue(pks[i].getIndex())\n-                && !store.assignField(sm, pks[i].getIndex(), preFlush))\n-                return false;\n+            // If we are generating values...\n+            if (pks[i].getValueStrategy() != ValueStrategies.NONE) {\n+                // If a value already exists on this field, throw exception.\n+                // This is considered an application coding error.\n+                if (!sm.isDefaultValue(pks[i].getIndex()))\n+                    throw new InvalidStateException(_loc2.get(\n+                            \"existing-value-override-excep\", pks[i]\n+                                    .getFullName(false)));\n+                // Assign the generated value\n+                if (store.assignField(sm, pks[i].getIndex(), preFlush))\n+                    pks[i].setValueGenerated(true);\n+                else\n+                    return false;\n+            }\n         return true;\n     }\n "},{"sha":"a325a69ea4c8bfe8854d73df5e1eb86a6e0fcc03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.util;\n \n+import java.security.AccessController;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n@@ -37,21 +40,24 @@ public ClassLoader getClassLoader(Class contextClass,\n         // class (the bootstrap loader is the parent of the system loader)\n         ClassLoader contextLoader = null;\n         if (contextClass != null) {\n-            contextLoader = contextClass.getClassLoader();\n+            contextLoader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(contextClass)); \n             if (contextLoader == null)\n-                contextLoader = ClassLoader.getSystemClassLoader();\n+                contextLoader = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getSystemClassLoaderAction()); \n         }\n \n         // if there is only one unique loader, just return it\n-        ClassLoader threadLoader = Thread.currentThread().\n-            getContextClassLoader();\n+        ClassLoader threadLoader = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getContextClassLoaderAction());\n         if ((contextLoader == null || contextLoader == threadLoader)\n             && (envLoader == null || envLoader == threadLoader))\n             return threadLoader;\n \n         // construct a multi class loader that will delegate in the order\n         // described in section 12.5 of the spec\n-        MultiClassLoader loader = new MultiClassLoader();\n+        MultiClassLoader loader = (MultiClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n         if (contextLoader != null)\n             loader.addClassLoader(contextLoader);\n         loader.addClassLoader(threadLoader);"},{"sha":"d67ceb649ebc3b29b326f31e2ba8bf914420ee81","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.openjpa.conf.OpenJPAVersion;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n \n /**\n@@ -41,7 +42,7 @@\n \n     public static final Throwable[] EMPTY_THROWABLES = new Throwable[0];\n \n-    static final String SEP = System.getProperty(\"line.separator\");\n+    static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     private static final OutputStream DEV_NULL = new OutputStream() {\n         public void write(int b) {\n@@ -63,7 +64,7 @@ private static boolean isSerializable(Object ob) {\n \n         // don't serialize persistent objects exceptions to prevent\n         // reading in all the state\n-        if (!ImplHelper.isManagedType(ob.getClass()))\n+        if (!ImplHelper.isManagedType(null, ob.getClass()))\n             return false;\n \n         // now do an actual test to see if we will be\n@@ -93,7 +94,7 @@ public static String toString(Object ob) {\n             return ob.getClass().getName() + \"-\" + oid.toString();\n         }\n \n-        if (ImplHelper.isManagedType(ob.getClass())) {\n+        if (ImplHelper.isManagedType(null, ob.getClass())) {\n             // never call toString() on a PersistenceCapable, since\n             // it may access persistent fields; fall-back to using\n             // the standard object stringification mechanism. New\n@@ -138,7 +139,8 @@ public static String toString(ExceptionInfo e) {\n         int type = e.getType();\n         StringBuffer buf = new StringBuffer();\n         buf.append(\"<\").\n-            append(OpenJPAVersion.VERSION_NUMBER).append(' ').\n+            append(OpenJPAVersion.VERSION_ID).\n+            append(' ').\n             append(e.isFatal() ? \"fatal \" : \"nonfatal \").\n             append (type == ExceptionInfo.GENERAL ? \"general error\" :\n                 type == ExceptionInfo.INTERNAL ? \"internal error\" :\n@@ -247,10 +249,13 @@ public static Object replaceFailedObject(Object ob) {\n      * <code>null</code> otherwise.\n      */\n     private static Object getObjectId(Object ob) {\n-        if (ob instanceof PersistenceCapable\n-            && !((PersistenceCapable) ob).pcIsNew())\n-            return ((PersistenceCapable) ob).pcFetchObjectId();\n+        if (!ImplHelper.isManageable(ob))\n+            return null;\n+\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(ob, null);\n+        if (pc == null || pc.pcIsNew())\n+            return null;\n         else\n-\t\t\treturn null;\n+            return pc.pcFetchObjectId();\n \t}\n }"},{"sha":"4dd235aa638ebe8f7a721162e9ebdfea5a2e6438","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.security.AccessController;\r\n+import java.security.PrivilegedActionException;\r\n+import java.lang.reflect.Constructor;\r\n+\r\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.BCClassLoader;\r\n+\r\n+/**\r\n+ * Utility methods when generating classes, including at runtime.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class GeneratedClasses {\r\n+\r\n+    /**\r\n+     * Return the more derived loader of the class laoders for the given \r\n+     * classes.\r\n+     */\r\n+    public static ClassLoader getMostDerivedLoader(Class c1, Class c2) {\r\n+        ClassLoader l1 = (ClassLoader) AccessController.doPrivileged(\r\n+            J2DoPrivHelper.getClassLoaderAction(c1));\r\n+        ClassLoader l2 = (ClassLoader) AccessController.doPrivileged(\r\n+            J2DoPrivHelper.getClassLoaderAction(c2));\r\n+        if (l1 == l2)\r\n+            return l1;\r\n+        if (l1 == null)\r\n+            return l2;\r\n+        if (l2 == null)\r\n+            return l1;\r\n+\r\n+        if(canLoad(l1, c2)) {\r\n+            return l1;\r\n+        }\r\n+        return l2;\r\n+    }\r\n+\r\n+    /**\r\n+     * Load the class represented by the given bytecode.\r\n+     */\r\n+    public static Class loadBCClass(BCClass bc, ClassLoader loader) {\r\n+        BCClassLoader bcloader = (BCClassLoader) AccessController\r\n+                .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(bc\r\n+                        .getProject(), loader));\r\n+        try {\r\n+            Class c = Class.forName(bc.getName(), true, bcloader);\r\n+            bc.getProject().clear();\r\n+            return c;\r\n+        } catch (Throwable t) {\r\n+            throw new GeneralException(bc.getName()).setCause(t);\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Return true if the given loader will load the same version of a given \r\n+     * class.  \r\n+     * \r\n+     * @param loader Classloader to use.\r\n+     * @param clazz  Expected class. \r\n+     * @return true if loader.load(clazz.getName()) == clazz. Otherwise false.\r\n+     */\r\n+    private static boolean canLoad(ClassLoader loader, Class clazz) {\r\n+        Class loaded = null;\r\n+        try {\r\n+            loaded = loader.loadClass(clazz.getName());\r\n+        } catch (ClassNotFoundException e) {\r\n+            // Rely on caller to handle return value = false.\r\n+        }\r\n+        return clazz == loaded;\r\n+    }\r\n+}\r"},{"sha":"f13b8bad1a54cf155723df8693bd9a5e52f49c21","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.util;\n \n+import java.security.AccessController;\n+\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import serp.util.Numbers;\n \n@@ -75,7 +78,8 @@ public Id(String str, OpenJPAConfiguration conf, ClassLoader brokerLoader) {\n      */\n     public Id(String str, ClassLoader loader) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n \n         if (str == null)\n             _id = 0L;"},{"sha":"3a416da3df129bab4ae7991af0a8c8f4620ec690","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":93,"deletions":6,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,6 +26,11 @@\n import java.util.Map;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.PCRegistry;\n+import org.apache.openjpa.enhance.StateManager;\n+import org.apache.openjpa.enhance.ManagedInstanceProvider;\n+import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n+import org.apache.openjpa.enhance.RuntimeUnenhancedClasssesModes;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -35,13 +40,13 @@\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.UUIDGenerator;\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n /**\n  * Helper for OpenJPA back-ends.\n@@ -53,9 +58,32 @@\n public class ImplHelper {\n \n     // Cache for from/to type assignments\n-    private static ConcurrentReferenceHashMap _assignableTypes =\n+    private static final Map _assignableTypes =\n         new ConcurrentReferenceHashMap(ReferenceMap.WEAK, ReferenceMap.HARD);\n \n+    // map of all new unenhanced instances active in this classloader\n+    public static final Map _unenhancedInstanceMap =\n+        new ConcurrentReferenceHashMap(ReferenceMap.WEAK, ReferenceMap.HARD) {\n+\n+            protected boolean eq(Object x, Object y) {\n+                // the Entries in ConcurrentReferenceHashMap delegate back to\n+                // eq() in their equals() impls\n+                if (x instanceof Map.Entry)\n+                    return super.eq(x, y);\n+                else\n+                    return x == y;\n+            }\n+\n+            protected int hc(Object o) {\n+                // the Entries in ConcurrentReferenceHashMap delegate back to\n+                // hc() in their hashCode() impls\n+                if (o instanceof Map.Entry)\n+                    return super.hc(o);\n+                else\n+                    return System.identityHashCode(o);\n+            }\n+        };\n+\n     /**\n      * Helper for store manager implementations. This method simply delegates\n      * to the proper singular method for each state manager.\n@@ -183,9 +211,15 @@ public static void close(Object o) {\n      *\n      * @param type the class to test\n      * @return true if the class is manageable.\n+     *\n+     * @since 1.0.0\n      */\n-    public static boolean isManagedType(Class type) {\n-        return PersistenceCapable.class.isAssignableFrom(type);\n+    public static boolean isManagedType(OpenJPAConfiguration conf, Class type) {\n+        return (PersistenceCapable.class.isAssignableFrom(type)\n+            || (type != null\n+                && (conf == null || conf.getRuntimeUnenhancedClassesConstant()\n+                    == RuntimeUnenhancedClasssesModes.SUPPORTED)\n+                && PCRegistry.isRegistered(type)));\n     }\n \n     /**\n@@ -195,7 +229,8 @@ public static boolean isManagedType(Class type) {\n      * @return true if the instance is a persistent type, false otherwise\n      */\n     public static boolean isManageable(Object instance) {\n-        return instance instanceof PersistenceCapable;\n+        return instance instanceof PersistenceCapable\n+            || instance != null && PCRegistry.isRegistered(instance.getClass());\n     }\n \n     /**\n@@ -214,7 +249,8 @@ public static boolean isAssignable(Class from, Class to) {\n         Boolean isAssignable = null;\n         Map assignableTo = (Map) _assignableTypes.get(from);\n         if (assignableTo == null) { // \"to\" cache doesn't exist, so create it...\n-            assignableTo = new ConcurrentHashMap();\n+            assignableTo = new ConcurrentReferenceHashMap(ReferenceMap.WEAK,\n+                    ReferenceMap.HARD);\n             _assignableTypes.put(from, assignableTo);\n         } else { // \"to\" cache exists...\n             isAssignable = (Boolean) assignableTo.get(to);\n@@ -227,4 +263,55 @@ public static boolean isAssignable(Class from, Class to) {\n \n         return isAssignable.booleanValue();\n     }\n+\n+    /**\n+     * @return the persistence-capable instance responsible for managing\n+     * <code>o</code>, or <code>null</code> if <code>o</code> is not manageable.\n+     * @since 1.0.0\n+     */\n+    public static PersistenceCapable toPersistenceCapable(Object o, Object ctx){\n+        if (o instanceof PersistenceCapable)\n+            return (PersistenceCapable) o;\n+\n+        OpenJPAConfiguration conf = null;\n+        if (ctx instanceof OpenJPAConfiguration)\n+            conf = (OpenJPAConfiguration) ctx;\n+        else if (ctx instanceof StateManager\n+            && ((StateManager) ctx).getGenericContext() instanceof StoreContext)\n+            conf = ((StoreContext) ((StateManager) ctx).getGenericContext())\n+                .getConfiguration();\n+\n+        if (!isManageable(o))\n+            return null;\n+\n+        // if we had a putIfAbsent() method, we wouldn't need to sync here\n+        synchronized (o) {\n+            PersistenceCapable pc = (PersistenceCapable)\n+                _unenhancedInstanceMap.get(o);\n+\n+            if (pc != null)\n+                return pc;\n+\n+            // if we don't have a conf passed in, then we can't create a new\n+            // ReflectingPC; this will only be the case when invoked from a\n+            // context outside of OpenJPA.\n+            if (conf == null)\n+                return null;\n+\n+            pc = new ReflectingPersistenceCapable(o, conf);\n+            _unenhancedInstanceMap.put(o, pc);\n+            return pc;\n+        }\n+    }\n+\n+    /**\n+     * @return the user-visible representation of <code>o</code>.\n+     * @since 1.0.0\n+     */\n+    public static Object getManagedInstance(Object o) {\n+        if (o instanceof ManagedInstanceProvider)\n+            return ((ManagedInstanceProvider) o).getManagedInstance();\n+        else\n+            return o;\n+    }\n }"},{"sha":"884646ecfe2dab48a19c731f72ac1259c2a7324a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -43,10 +43,9 @@ public MetaDataException(Message msg) {\n         setFatal(true);\n     }\n \n-    public MetaDataException(Message msg, Object failed) {\n-        super(msg);\n+    public MetaDataException(Message msg, Throwable nested) {\n+        super(msg, nested);\n         setFatal(true);\n-        setFailedObject(failed);\n     }\n \n     public int getSubtype() {"},{"sha":"473bdaa36b13545d7ad7b628503d777a5f73660f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.util;\n \n+import java.security.AccessController;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n@@ -28,7 +31,8 @@\n  */\n public class MultiLoaderClassResolver implements ClassResolver {\n \n-    final private MultiClassLoader _loader = new MultiClassLoader();\n+    final private MultiClassLoader _loader = (MultiClassLoader) AccessController\n+        .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n \n     public MultiLoaderClassResolver() {\n     }"},{"sha":"2b64a4e35f7b1ea20e71bbd98c1edd4c5750e9d5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -77,6 +77,14 @@ public void setManagedInstanceType(Class type) {\n         this.subs = false;\n     }\n \n+    /**\n+     * Set the exact type of the described instance once it is known.\n+     */\n+    public void setManagedInstanceType(Class type, boolean subs) {\n+        this.type = type;\n+        this.subs = subs;\n+    }\n+\n     /**\n      * Return the identity value as an object.\n      */"},{"sha":"bd2fd656ffeb5230f1040db63c28ff13d5c5a5b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,14 +18,10 @@\n  */\n package org.apache.openjpa.util;\n \n-import java.io.ObjectStreamException;\n-import java.util.AbstractSet;\n-import java.util.Iterator;\n-import java.util.ListIterator;\n-import java.util.Map;\n-import java.util.Set;\n+import java.security.AccessController;\n \n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -52,9 +48,11 @@ public static boolean isOwner(Proxy proxy, OpenJPAStateManager sm,\n     public static void assertAllowedType(Object value, Class allowed) {\n         if (value != null && allowed != null && !allowed.isInstance(value)) {\n             throw new UserException(_loc.get(\"bad-elem-type\", new Object[]{\n-                allowed.getClassLoader(),\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(allowed)),\n                 allowed,\n-                value.getClass().getClassLoader(),\n+                (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(value.getClass())),\n                 value.getClass()\n             }));\n         }"},{"sha":"b5f54cb251ee37b598e57d4f2c6118dff2655df7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -287,7 +287,7 @@ public static void beforeRemove(ProxyCollection coll, int index) {\n     public static Object afterRemove(ProxyCollection coll, int index, \n         Object removed) {\n         if (coll.getChangeTracker() != null)\n-            ((CollectionChangeTracker)coll.getChangeTracker()).removed(removed);\n+            ((CollectionChangeTracker) coll.getChangeTracker()).removed(removed);\n         removed(coll, removed, false);\n         return removed;\n     }"},{"sha":"9e325dab52b4f967b4cbd5b5640cb435c52ab5c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":56,"deletions":62,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -25,6 +25,8 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -48,12 +50,12 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import serp.bytecode.BCClass;\n-import serp.bytecode.BCClassLoader;\n import serp.bytecode.BCField;\n import serp.bytecode.BCMethod;\n import serp.bytecode.Code;\n@@ -84,8 +86,12 @@\n         _stdCollections.put(List.class, ArrayList.class);\n         if (JavaVersions.VERSION >= 5) {\n             try {\n-                Class queue = Class.forName(\"java.util.Queue\", false, \n-                    Collection.class.getClassLoader());\n+                Class queue = (Class) AccessController\n+                    .doPrivileged(J2DoPrivHelper.getForNameAction(\n+                        \"java.util.Queue\", false,\n+                        (ClassLoader) AccessController\n+                            .doPrivileged(J2DoPrivHelper\n+                                .getClassLoaderAction(Collection.class))));\n                 _stdCollections.put(queue, LinkedList.class);\n             } catch (Throwable t) {\n                 // not really java 5 after all?\n@@ -359,10 +365,12 @@ private ProxyCollection getFactoryProxyCollection(Class type) {\n         // we don't lock here; ok if two proxies get generated for same type\n         ProxyCollection proxy = (ProxyCollection) _proxies.get(type);\n         if (proxy == null) {\n-            ClassLoader l = getMostDerivedLoader(type, ProxyCollection.class);\n+            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type,\n+                ProxyCollection.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null)\n-                pcls = loadProxy(generateProxyCollectionBytecode(type, true),l);\n+                pcls = GeneratedClasses.loadBCClass(\n+                    generateProxyCollectionBytecode(type, true), l);\n             proxy = (ProxyCollection) instantiateProxy(pcls, null, null);\n             _proxies.put(type, proxy);\n         }\n@@ -376,10 +384,12 @@ private ProxyMap getFactoryProxyMap(Class type) {\n         // we don't lock here; ok if two proxies get generated for same type\n         ProxyMap proxy = (ProxyMap) _proxies.get(type);\n         if (proxy == null) {\n-            ClassLoader l = getMostDerivedLoader(type, ProxyMap.class);\n+            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type,\n+                ProxyMap.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null)\n-                pcls = loadProxy(generateProxyMapBytecode(type, true), l);\n+                pcls = GeneratedClasses.loadBCClass(\n+                    generateProxyMapBytecode(type, true), l);\n             proxy = (ProxyMap) instantiateProxy(pcls, null, null);\n             _proxies.put(type, proxy);\n         }\n@@ -393,10 +403,12 @@ private ProxyDate getFactoryProxyDate(Class type) {\n         // we don't lock here; ok if two proxies get generated for same type\n         ProxyDate proxy = (ProxyDate) _proxies.get(type);\n         if (proxy == null) {\n-            ClassLoader l = getMostDerivedLoader(type, ProxyDate.class);\n+            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type,\n+                ProxyDate.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null)\n-                pcls = loadProxy(generateProxyDateBytecode(type, true), l);\n+                pcls = GeneratedClasses.loadBCClass(\n+                    generateProxyDateBytecode(type, true), l);\n             proxy = (ProxyDate) instantiateProxy(pcls, null, null);\n             _proxies.put(type, proxy);\n         }\n@@ -410,10 +422,12 @@ private ProxyCalendar getFactoryProxyCalendar(Class type) {\n         // we don't lock here; ok if two proxies get generated for same type\n         ProxyCalendar proxy = (ProxyCalendar) _proxies.get(type);\n         if (proxy == null) {\n-            ClassLoader l = getMostDerivedLoader(type, ProxyCalendar.class);\n+            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type,\n+                ProxyCalendar.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null)\n-                pcls = loadProxy(generateProxyCalendarBytecode(type, true), l);\n+                pcls = GeneratedClasses.loadBCClass(\n+                    generateProxyCalendarBytecode(type, true), l);\n             proxy = (ProxyCalendar) instantiateProxy(pcls, null, null);\n             _proxies.put(type, proxy);\n         }\n@@ -431,15 +445,16 @@ private ProxyBean getFactoryProxyBean(Object orig) {\n         // we don't lock here; ok if two proxies get generated for same type\n         ProxyBean proxy = (ProxyBean) _proxies.get(type);\n         if (proxy == null && !_proxies.containsKey(type)) {\n-            ClassLoader l = getMostDerivedLoader(type, ProxyBean.class);\n+            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type,\n+                ProxyBean.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null) {\n                 BCClass bc = generateProxyBeanBytecode(type, true);\n                 if (bc != null)\n-                    pcls = loadProxy(bc, l);\n+                    pcls = GeneratedClasses.loadBCClass(bc, l);\n             }\n             if (pcls != null)\n-                proxy = (ProxyBean) instantiateProxy(pcls, \n+                proxy = (ProxyBean) instantiateProxy(pcls,\n                     findCopyConstructor(type), new Object[] {orig});\n             _proxies.put(type, proxy);\n         }\n@@ -470,20 +485,6 @@ protected Class loadBuildTimeProxy(Class type, ClassLoader loader) {\n         }\n     }\n \n-    /**\n-     * Load the proxy class represented by the given bytecode.\n-     */\n-    private Class loadProxy(BCClass bc, ClassLoader loader) {\n-        BCClassLoader bcloader = new BCClassLoader(bc.getProject(), loader);\n-        try {\n-            Class c = Class.forName(bc.getName(), true, bcloader);\n-            bc.getProject().clear();\n-            return c;\n-        } catch (Throwable t) {\n-            throw new GeneralException(bc.getName()).setCause(t);\n-        }\n-    }\n-\n     /**\n      * Instantiate the given proxy class.\n      */\n@@ -492,35 +493,23 @@ private Proxy instantiateProxy(Class cls, Constructor cons, Object[] args) {\n             if (cons != null)\n                 return (Proxy) cls.getConstructor(cons.getParameterTypes()).\n                     newInstance(args);\n-            return (Proxy) cls.newInstance();\n+            return (Proxy) AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(cls));\n         } catch (InstantiationException ie) {\n-            throw new UnsupportedException(_loc.get(\"cant-newinstance\", \n+            throw new UnsupportedException(_loc.get(\"cant-newinstance\",\n                 cls.getSuperclass().getName()));\n+        } catch (PrivilegedActionException pae) {\n+            Exception e = pae.getException();\n+            if (e instanceof InstantiationException)\n+                throw new UnsupportedException(_loc.get(\"cant-newinstance\",\n+                    cls.getSuperclass().getName()));\n+            else\n+                throw new GeneralException(cls.getName()).setCause(e);\n         } catch (Throwable t) {\n             throw new GeneralException(cls.getName()).setCause(t);\n         }\n     }\n \n-    /**\n-     * Return the more derived loader of the class laoders for the given \n-     * classes.\n-     */\n-    private static ClassLoader getMostDerivedLoader(Class c1, Class c2) {\n-        ClassLoader l1 = c1.getClassLoader();\n-        ClassLoader l2 = c2.getClassLoader();\n-        if (l1 == l2)\n-            return l1;\n-        if (l1 == null)\n-            return l2;\n-        if (l2 == null)\n-            return l1;\n-        \n-        for (ClassLoader p = l1.getParent(); p != null; p = p.getParent())\n-            if (p == l2)\n-                return l1;\n-        return l2;\n-    }\n-\n     /**\n      * Generate the bytecode for a collection proxy for the given type.\n      */\n@@ -533,7 +522,7 @@ protected BCClass generateProxyCollectionBytecode(Class type,\n         bc.declareInterface(ProxyCollection.class);\n  \n         delegateConstructors(bc, type);\n-        addProxyMethods(bc, type, false);\n+        addProxyMethods(bc, false);\n         addProxyCollectionMethods(bc, type);\n         proxyRecognizedMethods(bc, type, ProxyCollections.class, \n             ProxyCollection.class);\n@@ -570,7 +559,7 @@ protected BCClass generateProxyMapBytecode(Class type, boolean runtime) {\n         bc.declareInterface(ProxyMap.class);\n  \n         delegateConstructors(bc, type);\n-        addProxyMethods(bc, type, false);\n+        addProxyMethods(bc, false);\n         addProxyMapMethods(bc, type);\n         proxyRecognizedMethods(bc, type, ProxyMaps.class, ProxyMap.class);\n         proxySetters(bc, type);\n@@ -589,7 +578,7 @@ protected BCClass generateProxyDateBytecode(Class type, boolean runtime) {\n         bc.declareInterface(ProxyDate.class);\n  \n         delegateConstructors(bc, type);\n-        addProxyMethods(bc, type, true);\n+        addProxyMethods(bc, true);\n         addProxyDateMethods(bc, type);\n         proxySetters(bc, type);\n         addWriteReplaceMethod(bc, runtime);\n@@ -608,7 +597,7 @@ protected BCClass generateProxyCalendarBytecode(Class type,\n         bc.declareInterface(ProxyCalendar.class);\n  \n         delegateConstructors(bc, type);\n-        addProxyMethods(bc, type, true);\n+        addProxyMethods(bc, true);\n         addProxyCalendarMethods(bc, type);\n         proxySetters(bc, type);\n         addWriteReplaceMethod(bc, runtime);\n@@ -621,7 +610,7 @@ protected BCClass generateProxyCalendarBytecode(Class type,\n     protected BCClass generateProxyBeanBytecode(Class type, boolean runtime) {\n         if (Modifier.isFinal(type.getModifiers()))\n             return null;\n-        if (ImplHelper.isManagedType(type))\n+        if (ImplHelper.isManagedType(null, type))\n             return null;\n \n         // we can only generate a valid proxy if there is a copy constructor\n@@ -642,7 +631,7 @@ protected BCClass generateProxyBeanBytecode(Class type, boolean runtime) {\n         bc.declareInterface(ProxyBean.class);\n  \n         delegateConstructors(bc, type);\n-        addProxyMethods(bc, type, true);\n+        addProxyMethods(bc, true);\n         addProxyBeanMethods(bc, type, cons);\n         if (!proxySetters(bc, type))\n             return null;\n@@ -681,8 +670,7 @@ private void delegateConstructors(BCClass bc, Class type) {\n      * @param changeTracker whether to implement a null change tracker; if false\n      * the change tracker method is left unimplemented\n      */\n-    private void addProxyMethods(BCClass bc, Class type, \n-        boolean changeTracker) {\n+    private void addProxyMethods(BCClass bc, boolean changeTracker) {\n         BCField sm = bc.declareField(\"sm\", OpenJPAStateManager.class);\n         sm.setTransient(true);\n         BCField field = bc.declareField(\"field\", int.class);\n@@ -1570,7 +1558,8 @@ private static Constructor findComparatorConstructor(Class cls) {\n     public static void main(String[] args) \n         throws ClassNotFoundException, IOException {\n         File dir = Files.getClassFile(ProxyManagerImpl.class);\n-        dir = (dir == null) ? new File(System.getProperty(\"user.dir\"))\n+        dir = (dir == null) ? new File((String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getPropertyAction(\"user.dir\")))\n             : dir.getParentFile();\n \n         Options opts = new Options();\n@@ -1612,9 +1601,14 @@ public static void main(String[] args)\n         BCClass bc;\n         for (int i = 0; i < types.size(); i++) {\n             cls = Class.forName((String) types.get(i));\n-            if (mgr.loadBuildTimeProxy(cls, getMostDerivedLoader(cls, \n-                Proxy.class)) != null)\n-                continue;\n+            try {\n+                if (Class.forName(getProxyClassName(cls, false), true,\n+                    GeneratedClasses.getMostDerivedLoader(cls, Proxy.class))\n+                    != null)\n+                    continue;\n+            } catch (Throwable t) {\n+                // expected if the class hasn't been generated\n+            }\n \n             if (Collection.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyCollectionBytecode(cls, false);         "},{"sha":"b39db70677d92db1af1bdf3d0de4c45902f6a7ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -27,10 +27,13 @@\n import java.io.ObjectStreamClass;\n import java.io.OutputStream;\n import java.io.Serializable;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n@@ -102,7 +105,12 @@ public PersistentObjectOutputStream(OutputStream delegate,\n             throws IOException {\n             super(delegate);\n             _ctx = ctx;\n-            enableReplaceObject(true);\n+            AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    enableReplaceObject(true);\n+                    return null;\n+                }\n+            });\n         }\n \n         protected Object replaceObject(Object obj) {\n@@ -121,16 +129,17 @@ public ClassResolvingObjectInputStream(InputStream delegate)\n \n         protected Class resolveClass(ObjectStreamClass desc) \n             throws IOException, ClassNotFoundException {\n-            MultiClassLoader loader = new MultiClassLoader();\n+            MultiClassLoader loader = (MultiClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n             addContextClassLoaders(loader);\n             loader.addClassLoader(getClass().getClassLoader());\n             loader.addClassLoader(MultiClassLoader.SYSTEM_LOADER);\n             return Class.forName(desc.getName(), true, loader);\n         }\n \n         protected void addContextClassLoaders(MultiClassLoader loader) {\n-            loader.addClassLoader(Thread.currentThread().\n-                getContextClassLoader());\n+            loader.addClassLoader((ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction()));\n         }\n     }\n \n@@ -151,7 +160,12 @@ public PersistentObjectInputStream(InputStream delegate,\n             throws IOException {\n             super(delegate);\n             _ctx = ctx;\n-            enableResolveObject(true);\n+            AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    enableResolveObject(true);\n+                    return null;\n+                }\n+            });\n         }\n \n         protected void addContextClassLoaders(MultiClassLoader loader) {"},{"sha":"62e6959db271f50163182383dd092fb205e46bbd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -42,7 +42,7 @@\n      */\r\n     public void registerImplementation(Class facadeType, Class storeType, \r\n         Class implType) {\r\n-        Object key = (storeType == null) ? (Object)facadeType \r\n+        Object key = (storeType == null) ? (Object) facadeType \r\n             : new Key(facadeType, storeType);\r\n         _impls.put(key, implType);\r\n     }\r"},{"sha":"431eb3c2f24afa2d05c56d5019d2852190721c9c","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -117,6 +117,7 @@ PARSER_END(JPQL)\n SKIP :\n {\n  \t\" \"\n+    | \"\\n\"\n \t| \"\\r\"\n \t| \"\\t\"\n }\n@@ -450,14 +451,7 @@ void set_clause() : { }\n \n void update_item() #UPDATEITEM : { }\n {\n-\tupdate_field() EQ() new_value()\n-}\n-\n-\n-void update_field() #UPDATEFIELD : { }\n-{\n-\t// identification_variable() (<DOT> path_component())+\n-\t[LOOKAHEAD(1) identification_variable() <DOT>] path_component()\n+\tpath() EQ() new_value()\n }\n \n "},{"sha":"b3602d747550389adfc986d0db35e5202ceff45f","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -353,7 +353,7 @@ AutoDetach-expert: true\n DetachState-name: Detach states\n DetachState-desc: Plugin describing the set of field values which will be \\\n \tincluded in the default detach and related options.  These states are \\\n-\t\"loaded\", \"all\", and \"fgs\".\n+\t\"loaded\", \"all\", and \"fetch-groups\".\n DetachState-type: General\n DetachState-cat: Optimization\n DetachState-displayorder: 50\n@@ -541,16 +541,12 @@ Compatibility-displayorder: 50\n Compatibility-expert: true\n Compatibility-interface: org.apache.openjpa.conf.Compatibility\n \n-QueryCompilationCache-name: Query compilation cache\n-QueryCompilationCache-desc: Plugin used to cache query compilation data. \\\n-    Must implement java.util.Map. Does not need to be thread-safe -- it will \\\n-    be wrapped via the Collections.synchronizedMap() method if it does not \\\n-    extend org.apache.openjpa.util.CacheMap.\n-QueryCompilationCache-type: General\n-QueryCompilationCache-cat: Cache.Queries\n-QueryCompilationCache-displayorder: 50\n-QueryCompilationCache-expert: true\n-QueryCompilationCache-interface: java.util.Map\n+RuntimeUnenhancedClasses-name: Runtime unenhanced classes\n+RuntimeUnenhancedClasses-desc: Either \"supported\", \"unsupported\", or \"warn\". \\\n+    Defaults to \"supported\".\n+RuntimeUnenhancedClasses-type: General\n+RuntimeUnenhancedClasses-cat: Optimization\n+RuntimeUnenhancedClasses-displayorder: 50\n \n no-named-cf: use a DataSource bound to JNDI\n diff-specs: Attempt to configure for multiple specifications.  Was configured \\"},{"sha":"39f2e353993aa6446a781f3d8a0f7c80716b6993","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":81,"deletions":2,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -30,13 +30,28 @@ running-all-classes: No targets were given.  Running on all classes in your \\\n     persistent classes list, or all metadata files in classpath directories if \\\n \tyou have not listed your persistent classes.  Use -help to display tool \\\n     usage information.\n+no-class-to-enhance: Found no class to enhance.\n detach-custom-ser: Type \"{0}\" is set to detach on serialize, but implements \\\n \ta custom readObject and/or writeObject method.  You cannot use custom \\\n \tserialization with detachment. \n detach-custom-extern: Type \"{0}\" is set to detach on serialize, but implements \\\n \ta custom readExternal and/or writeExternal method.  You cannot use custom \\\n \tserialization with detachment. \n enhance-start: Enhancing type \"{0}\".\n+runtime-optimization-disabled: This configuration disallows runtime \\\n+    optimization, but the following listed types were not enhanced at build \\\n+    time or at class load time with a javaagent: \"{0}\".\n+enhance-and-subclass-and-redef-start: Creating subclass and redefining methods \\\n+    for \"{0}\". This means that your application will be less efficient \\\n+    than it would if you ran the OpenJPA enhancer.\n+enhance-and-subclass-no-redef-start: Creating subclass for \"{0}\". \\\n+    This means that your application will be less efficient and will consume \\\n+    more memory than it would if you ran the OpenJPA enhancer. Additionally, \\\n+    lazy loading will not be available for one-to-one and many-to-one \\\n+    persistent attributes in types using field access; they will be loaded \\\n+    eagerly instead.\n+redefine-types: Redefining {0} using Java 5 type redefinition.\n+retransform-types: Redefining {0} using Java 6 type retransformation.\n pc-type: Type \"{0}\" is already persistence capable; skipping.\n pers-aware: Type \"{0}\" has no metadata; enhancing as persistence aware. \\\n \tIf you intended for \"{0}\" to be persistence-capable, then this means that \\\n@@ -76,8 +91,8 @@ pcdata-created: Dynamic PCData created: name=\"{0}\", for type=\"{1}\"\n factory-not-oidloader: Attempt to run the application id tool under metadata \\\n \tconfiguration that does not support it.  The application id tool can only \\\n \trun under certain metadata factory settings.\n-str-cons: The id type \"{0}\" specfied by persistent type \"{1}\" does not have a \\\n-\tpublic string or class + string constructor.\n+str-cons: The id type \"{0}\" specfied by persistent type \"{1}\" \\  \n+\tdoes not have a public {0}(String) or {0}(Class, String) constructor.\n appid-start: Generating an application id for type \"{0}\".\n appid-invalid: Type \"{0}\" does not have metadata, does not use application \\\n \tidentity, uses a built-in identity type, or inherits the identity class \\\n@@ -120,3 +135,67 @@ property-setter-getter-mismatch: Bytecode analysis of the setter and getter \\\n \tfield \"{1}\", while the getter method returns field \"{2}\".\n cft-exception-thrown: An exception was thrown while attempting to perform \\\n \tclass file transformation on \"{0}\":\n+subclasser-error-field: Error while processing persistent field {1}, declared \\\n+\tin {2}. Error details: {0}\n+subclasser-error-meta: Error while processing persistent type {1}, declared \\\n+\tin {2}. Error details: {0}\n+subclasser-contract-violation-field: Possible violation of subclassing contract\\\n+\tdetected while processing persistent field {1}, declared in {2}. Are you \\\n+\tsure you are obeying the OpenJPA requirements? Details: {0}\n+subclasser-setter-getter-field-mismatch: Mismatch between getter and setter.\n+subclasser-no-ifaces: OpenJPA does not currently support automatic handling of \\\n+    interface types. Failed type: {0}\n+subclasser-no-final-classes: OpenJPA cannot dynamically subclass final types. \\\n+    To use final types, you must run the OpenJPA enhancer after compilation, \\\n+    or deploy to an environment that supports deploy-time enhancement, such as \\\n+    a Java EE 5 application server. Failed type: {0}\n+subclasser-no-private-classes: OpenJPA cannot dynamically subclass final types.\\\n+    To use final types, you must run the OpenJPA enhancer after compilation, \\\n+    or deploy to an environment that supports deploy-time enhancement, such as \\\n+    a Java EE 5 application server. Failed type: {0}\n+subclasser-super-already-pc: The superclass for type {0} implements \\\n+    org.apache.openjpa.enhance.PersistenceCapable, which means that it was \\\n+    processed by the OpenJPA enhancer. If you are enhancing some of your \\\n+    persistent types, you must enhance all of them.\n+subclasser-private-ctor: Unenhanced classes must have a public or protected \\\n+    no-args constructor. Type {0}'s no-args constructor is private or \\\n+    package-visible. If you do not want to add such a constructor, you must\\\n+    run the OpenJPA enhancer after compilation, \\\n+    or deploy to an environment that supports deploy-time enhancement, such as \\\n+    a Java EE 5 application server.\n+subclasser-no-void-ctor: Unenhanced classes must have a public or protected \\\n+    no-args constructor. Type {0} does not have any no-args constructors. \\\n+    If you do not want to add such a constructor, you must \\\n+    run the OpenJPA enhancer after compilation, \\\n+    or deploy to an environment that supports deploy-time enhancement, such as \\\n+    a Java EE 5 application server.\n+subclasser-class-already-pc: Type {0} is already persistence-capable. Please \\\n+    report this problem to the OpenJPA team at dev@openjpa.apache.org.\n+subclasser-no-getter: No getter exists for field {0}.\n+subclasser-no-setter: No setter exists for field {0}.\n+subclasser-invalid-getter: The getter for field {0} does not obey OpenJPA's \\\n+    subclassing restrictions. Getters must return a single non-computed field.\n+subclasser-invalid-setter: The setter for field {0} does not obey OpenJPA's \\\n+    subclassing restrictions. Setters must assign the passed-in parameter to a \\\n+    single field in the object.\n+subclasser-private-accessors-unsupported: The accessor for field {1} in type \\\n+    {0} is private or package-visible. OpenJPA requires accessors in \\\n+    unenhanced instances to be public or protected. \\\n+    If you do not want to add such an accessor, you must run the OpenJPA \\\n+    enhancer after compilation, or deploy to an environment that supports \\\n+    deploy-time enhancement, such as a Java EE 5 application server.\n+subclasser-final-methods-not-allowed: The method {1} in type {0} is final. \\\n+    OpenJPA requires methods in unenhanced instances to be non-final.\n+subclasser-native-methods-not-allowed: The method {1} in type {0} is native. \\\n+    OpenJPA requires methods in unenhanced instances to be non-native.\n+subclasser-static-methods-not-supported: The method {1} in type {0} is static. \\\n+    OpenJPA requires methods in unenhanced instances to be non-static.\n+subclasser-fetch-group-override: The field {1} in type {0} is configured to be \\\n+    lazily loaded, but lazy loading is not available for classes that use field\\\n+    access when not running the OpenJPA enhancer or when dynamic class \\\n+    redefinition is not available.\n+no-accessor: Could not find method called {0} in type {1}.\n+unspecified-unenhanced-types: One or more of the types in {0} have relations \\\n+    to other unenhanced types that were not specified. These unspecified types \\\n+    are: {1}\n+enhance-error: An error occurred while enhancing {0}. Exception message: {1}\n\\ No newline at end of file"},{"sha":"7ad4522a7f1c663df46afdfc93c4d2ad07bfaccc","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -20,7 +20,7 @@ orphaned-key-owner: Detected possible orphaned reference to deleted object \\\n orphaned-key: Detected possible orphaned reference to deleted object \"{0}\" \\\n \tin \"{1}\".\n no-added-oids: You have attempted to access the added object Ids for \\\n-\tthis event, however the RemoteCommitProvider isn't configured to send \\\n+\tthis event, however the RemoteCommitProvider is not configured to send \\\n \tthem. You need to either update your RemoteCommitEventListerner, \\\n \tor change your org.apache.openjpa.RemoteCommitProvider property so that it includes \\\n \tthe option TransmitAddedObjectIds.\n@@ -95,3 +95,5 @@ bean-constructor: Could not instantiate class {0}.  Make sure it has an \\\n     accessible no-args constructor.\n method-notfound: Method \"{1}\" with arguments of type: {2} \\\n     not found in class \"{0}\".\n+broker-factory-listener-exception: Exception thrown while calling a \\\n+    BrokerFactoryListener. This exception will be ignored.\n\\ No newline at end of file"},{"sha":"ddfcd7ec0621b4d035c5de09a290b2694f27ca98","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -55,3 +55,5 @@ unknown-identifier: Undeclared identifier \"{0}\".\n update-constant-value: Update expression \"{0}\" may only use literals \\\n \tor parameters as update values.\n bad-parse: Encountered \"{0}\" at character {1}, but expected: {2}.\n+no-saved-fields: No state snapshot is available for \"{0}\", but this instance \\\n+    uses state-comparison for dirty detection."},{"sha":"fce4adb4f0bce6f5020070859ac3b35de8b8053e","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -109,7 +109,7 @@ non-trans-read: To perform reads on persistent data outside of a transaction, \\\n \tthe \"NontransactionalRead\" property must be set on the Transaction.\n non-trans-write: To perform writes on persistent data outside of a \\\n \ttransaction, the \"NontransactionalWrite\" property must be set to true.\n-write-operation: To perform this operation, you must be withing a transaction, \\\n+write-operation: To perform this operation, it must be written within a transaction, \\\n \tor your settings must allow nontransactional writes and must not detach \\\n \tall nontransactional reads.\n not-managed: The given instance \"{0}\" is not managed by this context.\n@@ -300,6 +300,9 @@ bad-method-class: You set the method name of this openjpa.MethodQL query to \\\n \tqualify the class name or to import its package into this query if the \\\n \tclass is not in the query candidate class'' package. \n method-not-static: Method \"{0}\" named in the MethodQL query must be static.\n+method-return-type-invalid: Method \"{0}\" named in the MethodQL query must \\\n+    have a return type that is assignable from ResultObjectProvider. Return \\\n+    type is: {1}.\n no-method: You must set the query filter to the name of the method to execute \\\n \tfor this MethodQL query instance.\n method-error: There was an error invoking method \"{0}\" with arguments \"{1}\".\n@@ -365,3 +368,8 @@ null-fg: Attempt to add null/empty fetch group name to fetch configuration.\n null-field: Attempt to add null/empty field name to fetch configuration.\n container-projection: Query projections cannot include array, collection, or \\\n     map fields.  Invalid query: \"{0}\"\n+existing-value-override-excep: The generated value processing detected an \\\n+existing value assigned to this field: {0}.  This existing value was either \\\n+provided via an initializer or by calling the setter method.  You either need \\\n+to remove the @GeneratedValue annotation or modify the code to remove the \\\n+initializer processing."},{"sha":"19f11a95ab3dfd50f6519f746e0f2874dd32bb4b","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -142,8 +142,9 @@ no-meta: No metadata was found for type \"{0}\".  Ensure that the class is \\\n \tif you list your persistent classes, the class is included in your list.\n no-oid-meta: Could not locate metadata for the class using oid \"{0}\" of \\\n \ttype \"{1}\".  Registered oid type mappings: \"{2}\"\n-no-alias-meta: Could not locate metadata for the class using alias \"{0}\". \\\n-\tRegistered alias mappings: \"{1}\"\n+no-alias-meta: Could not locate metadata for the class using alias \"{0}\". This \\\n+\tcould mean that the OpenJPA enhancer or load-time weaver was not run on \\\n+    the type whose alias is \"{0}\". Registered alias mappings: \"{1}\"\n error-registered: An error occurred while processing registered class \"{0}\".\n failed-registered: A potentially serious error occurred while processing \\\n \tregistered class \"{0}\".  Deferring processing of this class until next \\\n@@ -168,7 +169,8 @@ no-pk: Concrete type \"{0}\" with application identity does not declare any \\\n \tprimary key fields.\n invalid-id: The id class specified by type \"{0}\" does not match the \\\n \tprimary key fields of the class.  Make sure your identity class has the \\\n-\tsame primary keys as your persistent type.  Mismatched property: \"{1}\"\n+\tsame primary keys as your persistent type, including pk field types. \\\n+    Mismatched property: \"{1}\"\n null-cons: The id class specified by type \"{0}\" does not have public a \\\n \tno-args constructor.\n hc-method: The identity class specified by type \"{0}\" is not valid, as the \\\n@@ -199,8 +201,8 @@ bad-update-strategy: \"{0}\" declares a read only value of \"{1}\". \\\n bad-update-strategy-hint: \"{0}\" declares a read only value of \\\n \t\"{1}\".  This is not a recognized strategy, though it closely resembles \\\n \tthe standard strategy \"{2}\".  Available strategies are: {3}\n-not-interface: Can't set type \"{0}\" to be a managed interface as it is not \\\n-    and interface.\n+not-interface: Cannot set type \"{0}\" to be a managed interface as it is not \\\n+    an interface.\n interface: The type \"{0}\" is an unmanaged interface and therefore cannot be \\\n     made persistent.\n enum: Type \"{0}\" is an enumeration and therefore cannot be made persistent.\n@@ -236,7 +238,7 @@ bad-access-type: The ClassMetaData access type must be set to either \\\n \tset it to \"{0}\" failed.\n val-not-pc: The map value type of field \"{0}\" with a derived key must be a \\\n \tpersistent class.\n-val-not-one-pk: The map value type of field \"{0}\" a derived key must be a \\\n+val-not-one-pk: The map value type of field \"{0}\" with a derived key must be a \\\n \tpersistent class with exactly one primary key field.\n # this is a comma-separated set of prefixes that we want to\n # exclude from top-level validation, so that extensions that"},{"sha":"af931c822f3597d83d9d562be1d96953088bb7e9","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -52,6 +52,6 @@ public void testInterfaceAdded() throws ClassNotFoundException {\n             getClassName(WASManagedRuntime.INTERFACE);\r\n         assertTrue(\"message should have contained \"\r\n             + interfaceName + \", but was '\" + msg + \"'\",\r\n-            msg.contains(interfaceName));\r\n+            msg.indexOf(interfaceName) != -1);\r\n     }\r\n }\r"},{"sha":"ac9d66c21efb9ae96ae23b078a4cdd44ab8b4dc8","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -971,4 +971,3 @@ public NonproxyableBean(long x) {\n         extends GregorianCalendar {\n     }\n }\n-"},{"sha":"5af431194dd2b230285b9d62484bd8e193aceb89","filename":"openjpa-lib/pom.xml","status":"modified","additions":24,"deletions":5,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -26,12 +26,32 @@\n     <packaging>jar</packaging>\n     <name>OpenJPA Utilities</name>\n     <description>OpenJPA Utilities</description>\n-    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <url>http://openjpa.apache.org</url>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.8-incubating-SNAPSHOT</version>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.0.0</version>\n     </parent>\n+    <profiles>\n+        <profile>\n+            <id>java14-validate</id>\n+            <activation><property><name>java14.jar</name></property></activation>\n+            <build>\n+                <pluginManagement>\n+                    <plugins>\n+                        <plugin>\n+                            <artifactId>maven-compiler-plugin</artifactId>\n+                            <configuration>\n+                                <compilerArguments>\n+                                    <bootclasspath>${java14.jar}</bootclasspath>\n+                                </compilerArguments>\n+                            </configuration>\n+                        </plugin>\n+                    </plugins>\n+                </pluginManagement>\n+            </build>\n+        </profile>\n+    </profiles>\n     <dependencies>\n         <dependency>\n             <groupId>jakarta-regexp</groupId>\n@@ -72,14 +92,13 @@\n         <dependency>\n             <groupId>net.sourceforge.serp</groupId>\n             <artifactId>serp</artifactId>\n-            <version>1.11.0</version>\n+            <version>1.13.1</version>\n             <scope>compile</scope>\n         </dependency>\n     </dependencies>\n     <build>\n         <plugins>\n             <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n                     <source>1.4</source>"},{"sha":"0fb9221eefdb3dc2b00a3c9f543a50b515f87771","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -14,11 +14,12 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.lib.ant;\n \n import java.io.File;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -33,17 +34,18 @@\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Ant tasks all have a nested <code>&lt;config&rt;</code> tag, which uses\n  * the configuration as a bean-like task. E.g., you can do:\n- * \n- * <code> \n+ *\n+ * <code>\n  * &lt;mytask&rt;<br />\n- * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br /> \n+ * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br />\n  * &lt;/mytask&rt;\n- * </code> \n+ * </code>\n  *\n  * The default configuration for the system will be used if the\n  * <code>&lt;config&rt;</code> subtask is excluded.\n@@ -159,7 +161,8 @@ public void execute() throws BuildException {\n             _conf = newConfiguration();\n         if (_conf.getPropertiesResource() == null) {\n             ConfigurationProvider cp = ProductDerivations.loadDefaults\n-                (_conf.getClass().getClassLoader());\n+                ((ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(_conf.getClass())));\n             if (cp != null)\n                 cp.setInto(_conf);\n         }\n@@ -186,9 +189,11 @@ public void execute() throws BuildException {\n             String[] dsFiles = ds.getIncludedFiles();\n             for (int j = 0; j < dsFiles.length; j++) {\n                 File f = new File(dsFiles[j]);\n-                if (!f.isFile())\n+                if (!((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isFileAction(f))).booleanValue())\n                     f = new File(ds.getBasedir(), dsFiles[j]);\n-                files.add(f.getAbsolutePath());\n+                files.add((String) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getAbsolutePathAction(f)));\n             }\n         }\n         return (String[]) files.toArray(new String[files.size()]);"},{"sha":"b58b0cf2c325d86d34cbdc99885484d86176bf5b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BootstrapException.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BootstrapException.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BootstrapException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BootstrapException.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.conf;\r\n+/**\r\n+ * Exception recognized by {@link ProductDerivations bootstrap} framework.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * @since 0.4.1.4\r\n+ *\r\n+ */\r\n+public class BootstrapException extends RuntimeException {\r\n+\r\n+\tprivate boolean _fatal = false;\r\n+\t\r\n+\tpublic BootstrapException() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic BootstrapException(String message) {\r\n+\t\tsuper(message);\r\n+\t}\r\n+\r\n+\tpublic BootstrapException(Throwable cause) {\r\n+\t\tsuper(cause);\r\n+\t}\r\n+\r\n+\tpublic BootstrapException(String message, Throwable cause) {\r\n+\t\tsuper(message, cause);\r\n+\t}\r\n+\t\r\n+\tpublic BootstrapException setFatal(boolean fatal) {\r\n+\t\t_fatal = fatal;\r\n+\t\treturn this;\r\n+\t}\r\n+\t\r\n+\tpublic boolean isFatal() {\r\n+\t\treturn _fatal;\r\n+\t}\r\n+}\r"},{"sha":"4bba8156e6d4890a03b19d36876cbebb354fca9a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -223,4 +223,28 @@\n      * Return a copy of this configuration.\n      */\n     public Object clone();\n+    \n+    /**\n+     * Modifies a <em>dynamic</em> property of this receiver even when \n+     * {@link #setReadOnly(boolean) frozen}. \n+     *\n+     * @since 1.0.0\n+     */\n+    public void modifyDynamic(String property, Object newValue);\n+    \n+    /**\n+     * Affirms if the given property can be modified <em>dynamically</em> i.e.\n+     * even after the receiver is {@link #setReadOnly(boolean) frozen}. \n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean isDynamic(String property);\n+    \n+    /**\n+     * Gets the values that can be modified <em>dynamically</em> i.e.\n+     * even after the receiver is {@link #setReadOnly(boolean) frozen}. \n+     *\n+     * @since 1.0.0\n+     */\n+    public Value[] getDynamicValues();\n }"},{"sha":"bbf651e8bf65de1f1ded5b8965467c76ac6c0e25","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":46,"deletions":9,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -39,6 +39,8 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -57,6 +59,7 @@\n import org.apache.openjpa.lib.log.LogFactoryImpl;\n import org.apache.openjpa.lib.log.NoneLogFactory;\n import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n import org.apache.openjpa.lib.util.ParseException;\n@@ -99,7 +102,7 @@\n public class ConfigurationImpl\n     implements Configuration, Externalizable, ValueListener {\n \n-    private static final String SEP = System.getProperty(\"line.separator\");\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ConfigurationImpl.class);\n@@ -162,16 +165,20 @@ public ConfigurationImpl(boolean loadGlobals) {\n      * {@link ProductDerivation}s, and from System properties.\n      */\n     public boolean loadGlobals() {\n-        MultiClassLoader loader = new MultiClassLoader();\n-        loader.addClassLoader(Thread.currentThread().getContextClassLoader());\n+        MultiClassLoader loader = (MultiClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction()); \n+        loader.addClassLoader((ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getContextClassLoaderAction()));\n         loader.addClassLoader(getClass().getClassLoader());\n         ConfigurationProvider provider = ProductDerivations.loadGlobals(loader);\n         if (provider != null)\n             provider.setInto(this);\n \n         // let system properties override other globals\n         try {\n-            fromProperties(new HashMap(System.getProperties()));\n+            fromProperties(new HashMap(\n+                (Properties) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getPropertiesAction())));\n         } catch (SecurityException se) {\n             // security manager might disallow\n         }\n@@ -413,7 +420,7 @@ public Image getIcon(int kind) {\n                 descs.add(new MethodDescriptor(read));\n             }\n         }\n-        _mds = (MethodDescriptor[])descs.\n+        _mds = (MethodDescriptor[]) descs.\n             toArray(new MethodDescriptor[descs.size()]);\n         return _mds;\n     }\n@@ -796,17 +803,16 @@ public boolean equals(Object other) {\n         ConfigurationImpl conf = (ConfigurationImpl) other;\n         Map p1 = (_props == null) ? toProperties(false) : _props;\n         Map p2 = (conf._props == null) ? conf.toProperties(false) : conf._props;\n-        return p1.equals(p2);\n+        return excludeDynamic(p1).equals(excludeDynamic(p2));\n     }\n \n     /**\n      * Computes hash code based on the properties returned from\n      * {@link #toProperties}.\n      */\n     public int hashCode() {\n-        if (_props != null)\n-            return _props.hashCode();\n-        return toProperties(false).hashCode();\n+    \tMap copy = (_props == null) ? toProperties(false) : _props;\n+    \treturn excludeDynamic(copy).hashCode();\n     }\n \n     /**\n@@ -982,4 +988,35 @@ public PluginListValue addPluginList(String property) {\n         addValue(val);\n         return val;\n     }\n+    \n+    public void modifyDynamic(String property, Object newValue) {\n+    \tif (!isDynamic(property)) \n+    \t\tthrow new RuntimeException(_loc.get(\"not-dynamic\", property)\n+    \t\t\t.toString());\n+    \tValue value = getValue(property);\n+    \tvalue.setObject(newValue);\n+    }\n+    \n+    public boolean isDynamic(String property) {\n+    \tValue[] dynamicValues = getDynamicValues();\n+    \tfor (int i=0; i<dynamicValues.length; i++) \n+    \t\tif (dynamicValues[i].getProperty().equals(property))\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    public Value[] getDynamicValues() {\n+    \treturn new Value[0];\n+    }\n+    \n+    Map excludeDynamic(Map map) {\n+    \tif (map == null)\n+    \t\treturn null;\n+    \tMap copy = new HashMap(map);\n+    \tValue[] dynamicValues = getDynamicValues();\n+    \tfor (int i=0; i<dynamicValues.length; i++) {\n+    \t\tConfigurations.removeProperty(dynamicValues[i].getProperty(), copy);\n+    \t}\n+    \treturn copy;\n+    }\n }"},{"sha":"22f07d8876fd9e5e52079f40a59e04fa7dc2e39e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":26,"deletions":9,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -34,6 +36,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.ParseException;\n@@ -206,8 +209,12 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n         }\n \n         try {\n-            return cls.newInstance();\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(cls));\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException) {\n+                e = ((PrivilegedActionException) e).getException();   \n+            }\n             RuntimeException re = new NestableRuntimeException(_loc.get\n                 (\"obj-create\", cls).getMessage(), e);\n             if (fatal)\n@@ -229,25 +236,33 @@ private static ClassLoader findDerivedLoader(Configuration conf,\n         // we always prefer the thread loader, because it's the only thing we\n         // can access that isn't bound to the OpenJPA classloader, unless\n         // the conf object is of a custom class\n-        ClassLoader ctxLoader = Thread.currentThread().getContextClassLoader();\n+        ClassLoader ctxLoader = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getContextClassLoaderAction());\n         if (loader == null) {\n             if (ctxLoader != null)\n                 return ctxLoader;\n             if (conf != null)\n-                return conf.getClass().getClassLoader();\n+                return (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n             return Configurations.class.getClassLoader();\n         }\n \n         for (ClassLoader parent = ctxLoader; parent != null; \n-            parent = parent.getParent()) {\n+            parent = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getParentAction(parent))) {\n             if (parent == loader)\n                 return ctxLoader;\n         }\n         if (conf != null) {\n-            for (ClassLoader parent = conf.getClass().getClassLoader(); \n-                parent != null; parent = parent.getParent()) {\n+            for (ClassLoader parent = (ClassLoader)\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n+                parent != null; \n+                parent = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getParentAction(parent))) {\n                 if (parent == loader)\n-                    return conf.getClass().getClassLoader();\n+                    return (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n             }\n         }\n         return loader;\n@@ -279,11 +294,13 @@ public static void populateConfiguration(Configuration conf, Options opts) {\n             }\n \n             File file = new File(path);\n-            if (file.isFile())\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isFileAction(file))).booleanValue())\n                 provider = ProductDerivations.load(file, anchor, null);\n             else {\n                 file = new File(\"META-INF\" + File.separatorChar + path);\n-                if (file.isFile())\n+                if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isFileAction(file))).booleanValue())\n                     provider = ProductDerivations.load(file, anchor, null);\n                 else\n                     provider = ProductDerivations.load(path, anchor, null);"},{"sha":"0d4bd073f0205ec5e57e631a5d9702606b5c8e0e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,8 +19,10 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.ObjectUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n \n /**\n  * A {@link File} {@link Value}.\n@@ -57,7 +59,8 @@ public File get() {\n     }\n \n     protected String getInternalString() {\n-        return (value == null) ? null : value.getAbsolutePath();\n+        return (value == null) ? null : (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(value));\n     }\n \n     protected void setInternalString(String val) {"},{"sha":"629c0a3c0b959f22afd25b88423ea6580cceca34","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.security.AccessController;\n+\n import org.apache.commons.lang.ObjectUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n@@ -94,9 +97,11 @@ public Object newInstance(String clsName, Class type, Configuration conf,\n             boolean fatal) {\n         ClassLoader cl = (ClassLoader) _classloaderCache.get(type);\n         if (cl == null) {\n-            cl = type.getClassLoader();\n+            cl = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getClassLoaderAction(type));\n             if (cl == null) {  // System classloader is returned as null\n-                cl = ClassLoader.getSystemClassLoader();\n+                cl = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getSystemClassLoaderAction()); \n             }\n             _classloaderCache.put(type, cl);\n         }"},{"sha":"13869b506a338e4e809276a4cd73b6fa1e42294f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":37,"deletions":12,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -27,6 +29,7 @@\n import java.util.MissingResourceException;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Services;\n \n@@ -46,17 +49,22 @@\n     private static final Throwable[] _derivationErrors;\n     private static String[] _prefixes;\n     static {\n-        ClassLoader l = ProductDerivation.class.getClassLoader();\n+        ClassLoader l = (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getClassLoaderAction(ProductDerivation.class)); \n         _derivationNames = Services.getImplementors(ProductDerivation.class, l);\n         _derivationErrors = new Throwable[_derivationNames.length];\n         List derivations = new ArrayList(_derivationNames.length);\n         for (int i = 0; i < _derivationNames.length; i++) {\n             try {\n-                ProductDerivation d = (ProductDerivation) Class.\n-                    forName(_derivationNames[i], true, l).newInstance();\n+                ProductDerivation d = (ProductDerivation)\n+                    AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(\n+                            Class.forName(_derivationNames[i], true, l)));\n                 d.validate();\n                 derivations.add(d);\n             } catch (Throwable t) {\n+                if (t instanceof PrivilegedActionException)\n+                    t = ((PrivilegedActionException) t).getException();\n                 _derivationErrors[i] = t;\n             }\n         }\n@@ -156,12 +164,16 @@ public static String getConfigurationKey(String partialKey, Map map) {\n \n     /**\n      * Apply {@link ProductDerivation#beforeConfigurationConstruct} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n+     * to the the given instance. Exceptions other than fatal\n+     * {@link BootstrapException} are swallowed.\n      */\n     public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n         for (int i = 0; i < _derivations.length; i++) {\n             try {\n                 _derivations[i].beforeConfigurationConstruct(cp);\n+            } catch (BootstrapException be) {\n+            \tif (be.isFatal())\n+            \t\tthrow be;\n             } catch (Exception e) {\n                 // can't log; no configuration yet\n                 e.printStackTrace();\n@@ -171,12 +183,16 @@ public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n \n     /**\n      * Apply {@link ProductDerivation#beforeConfigurationLoad} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n+     * to the the given instance. Exceptions other than fatal\n+     * {@link BootstrapException} are swallowed.\n      */\n     public static void beforeConfigurationLoad(Configuration conf) {\n         for (int i = 0; i < _derivations.length; i++) {\n             try {\n                 _derivations[i].beforeConfigurationLoad(conf);\n+            } catch (BootstrapException be) {\n+            \tif (be.isFatal())\n+            \t\tthrow be;\n             } catch (Exception e) {\n                 // logging not configured yet\n                 e.printStackTrace();\n@@ -186,12 +202,16 @@ public static void beforeConfigurationLoad(Configuration conf) {\n \n     /**\n      * Apply {@link ProductDerivation#afterSpecificationSet} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n+     * to the the given instance. Exceptions other than fatal\n+     * {@link BootstrapException} are swallowed.\n      */\n     public static void afterSpecificationSet(Configuration conf) {\n         for (int i = 0; i < _derivations.length; i++) {\n             try {\n                 _derivations[i].afterSpecificationSet(conf);\n+            } catch (BootstrapException be) {\n+            \tif (be.isFatal())\n+            \t\tthrow be;\n             } catch (Exception e) {\n                 // logging not configured yet\n                 e.printStackTrace();\n@@ -227,7 +247,8 @@ public static ConfigurationProvider load(String resource, String anchor,\n         if (StringUtils.isEmpty(resource))\n             return null;\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         // most specific to least\n@@ -257,7 +278,8 @@ public static ConfigurationProvider load(File file, String anchor,\n         if (file == null)\n             return null;\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         // most specific to least\n@@ -271,9 +293,11 @@ public static ConfigurationProvider load(File file, String anchor,\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportErrors(errs, file.getAbsolutePath());\n-        throw new MissingResourceException(file.getAbsolutePath(), \n-            ProductDerivations.class.getName(), file.getAbsolutePath());\n+        String aPath = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(file));\n+        reportErrors(errs, aPath);\n+        throw new MissingResourceException(aPath, \n+            ProductDerivations.class.getName(), aPath);\n     }\n    \n     /**\n@@ -296,7 +320,8 @@ public static ConfigurationProvider loadGlobals(ClassLoader loader) {\n     private static ConfigurationProvider load(ClassLoader loader, \n        boolean globals) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n         \n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;"},{"sha":"f78dd98624499adc052789ed1002fdcaa8985abd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -100,9 +100,13 @@ public void setLoadKey(String loadKey) {\n     /**\n      * Aliases for the value in the form key1, value1, key2, value2, ...\n      * All alias values must be in string form.\n+     * <p>\n+     * To avoid potential side-effects, this method copies the array passed in.\n      */\n     public void setAliases(String[] aliases) {\n-        this.aliases = aliases;\n+        String [] aStrings = new String[aliases.length];\n+        System.arraycopy(aliases, 0, aStrings, 0, aStrings.length);\n+        this.aliases = aStrings;\n     }\n \n     /**"},{"sha":"16f643ad2b1305b6104bbddd19689607aa71df01","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/BreadthFirstWalk.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/BreadthFirstWalk.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/BreadthFirstWalk.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/BreadthFirstWalk.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,145 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.graph;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+/**\r\n+ * <p>Performs a breadth-first walk of a given {@link Graph},\r\n+ * notifying visitors as it sees each node.  See the BFS algorithm\r\n+ * in the book 'Introduction to Algorithms' by Cormen, Leiserson, and\r\n+ * Rivest.</p>\r\n+ * <p/>\r\n+ * <p>Each {@link GraphVisitor} will be notified when a node\r\n+ * is colored black (nodeVisited), edge seen (edgeVisited),\r\n+ * and a node is seen for the first time, i.e. colored gray (nodeSeen).</p>\r\n+ *\r\n+ * @author Steve Kim\r\n+ * @since 1.0.0\r\n+ * @nojavadoc\r\n+ */\r\n+public class BreadthFirstWalk {\r\n+\r\n+    private final Graph _graph;\r\n+    private final Set _visitors = new HashSet();\r\n+    private final List _queue = new LinkedList();\r\n+    private final Map _nodeInfo = new HashMap();\r\n+\r\n+    public BreadthFirstWalk(Graph graph) {\r\n+        _graph = graph;\r\n+    }\r\n+\r\n+    /**\r\n+     * Begins the breadth first traversal.\r\n+     */\r\n+    public void walk() {\r\n+        _queue.clear();\r\n+        _nodeInfo.clear();\r\n+\r\n+        Collection nodes = _graph.getNodes();\r\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();)\r\n+            _nodeInfo.put(itr.next(), new NodeInfo());\r\n+\r\n+        Object node;\r\n+        NodeInfo info;\r\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();) {\r\n+            node = itr.next();\r\n+            info = (NodeInfo) _nodeInfo.get(node);\r\n+            if (info.color == NodeInfo.COLOR_WHITE)\r\n+                enqueue(node, info);\r\n+            processQueue();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Process the queue to see what data needs to be obtained.\r\n+     */\r\n+    private void processQueue() {\r\n+        Object node;\r\n+        Object other;\r\n+        NodeInfo info;\r\n+        NodeInfo otherInfo;\r\n+        Collection edges;\r\n+        Edge edge;\r\n+        while (_queue.size() > 0) {\r\n+            node = _queue.remove(0);\r\n+            info = (NodeInfo) _nodeInfo.get(node);\r\n+            visit(node, info);\r\n+\r\n+            edges = _graph.getEdgesFrom(node);\r\n+            for (Iterator itr = edges.iterator(); itr.hasNext();) {\r\n+                edge = (Edge) itr.next();\r\n+                edgeVisited(edge);\r\n+                other = edge.getOther(node);\r\n+                otherInfo = (NodeInfo) _nodeInfo.get(other);\r\n+                if (otherInfo.color == NodeInfo.COLOR_WHITE)\r\n+                    enqueue(other, otherInfo);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Push the given node onto the queue to be processed.\r\n+     * Notify visitors.\r\n+     */\r\n+    protected void enqueue(Object node, NodeInfo info) {\r\n+        _queue.add(node);\r\n+        info.color = NodeInfo.COLOR_GRAY;\r\n+        for (Iterator i = _visitors.iterator(); i.hasNext();)\r\n+            ((GraphVisitor) i.next()).nodeSeen(node);\r\n+    }\r\n+\r\n+    /**\r\n+     * Visit the node.  Mark the node black and notify visitors.\r\n+     */\r\n+    protected void visit(Object node, NodeInfo info) {\r\n+        info.color = NodeInfo.COLOR_BLACK;\r\n+        for (Iterator i = _visitors.iterator(); i.hasNext();)\r\n+            ((GraphVisitor) i.next()).nodeVisited(node);\r\n+    }\r\n+\r\n+    /**\r\n+     * An edge is seen.  Notify visitors.\r\n+     */\r\n+    protected void edgeVisited(Edge edge) {\r\n+        for (Iterator i = _visitors.iterator(); i.hasNext();)\r\n+            ((GraphVisitor) i.next()).edgeVisited(edge);\r\n+    }\r\n+\r\n+    /**\r\n+     * add a {@link GraphVisitor} to be notified during breadth first search.\r\n+     */\r\n+    public void addGraphVisitor(GraphVisitor visitor) {\r\n+        _visitors.add(visitor);\r\n+    }\r\n+\r\n+    /**\r\n+     * remove a given {@link GraphVisitor} from the listener set.\r\n+     */\r\n+    public void removeGraphVisitor(GraphVisitor visitor) {\r\n+        _visitors.remove(visitor);\r\n+    }\r\n+}\r"},{"sha":"0f4693b7da474ddff4439c1213684c4f5d23afac","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java","status":"added","additions":358,"deletions":0,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,358 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.graph;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+import java.util.AbstractList;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Comparator;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * <p>Performs a depth-first analysis of a given {@link Graph}, caching\r\n+ * information about the graph's nodes and edges.  See the DFS algorithm\r\n+ * in the book 'Introduction to Algorithms' by Cormen, Leiserson, and\r\n+ * Rivest.  The algorithm has been modified to group sibling nodes without\r\n+ * connections together during the topological sort.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 1.0.0\r\n+ * @nojavadoc\r\n+ */\r\n+public class DepthFirstAnalysis {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (DepthFirstAnalysis.class);\r\n+\r\n+    private final Graph _graph;\r\n+    private final Map _nodeInfo = new HashMap();\r\n+    private Comparator _comp;\r\n+\r\n+    /**\r\n+     * Constructor.  Performs the analysis on the given graph and caches\r\n+     * the resulting information.\r\n+     */\r\n+    public DepthFirstAnalysis(Graph graph) {\r\n+        _graph = graph;\r\n+\r\n+        // initialize node infos\r\n+        Collection nodes = graph.getNodes();\r\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();)\r\n+            _nodeInfo.put(itr.next(), new NodeInfo());\r\n+\r\n+        // visit all nodes -- see intro to algo's book\r\n+        NodeInfo info;\r\n+        Object node;\r\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();) {\r\n+            node = itr.next();\r\n+            info = (NodeInfo) _nodeInfo.get(node);\r\n+            if (info.color == NodeInfo.COLOR_WHITE)\r\n+                visit(graph, node, info, 0, new LinkedList());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Visit a node.  See Introduction to Algorithms book for details.\r\n+     */\r\n+    private int visit(Graph graph, Object node, NodeInfo info, int time, \r\n+        List path) {\r\n+        // discover node\r\n+        info.color = NodeInfo.COLOR_GRAY;\r\n+\r\n+        // explore all vertices from that node depth first\r\n+        Collection edges = graph.getEdgesFrom(node);\r\n+        Edge edge;\r\n+        Object other;\r\n+        NodeInfo otherInfo;\r\n+        int maxChildTime = time - 1;\r\n+        int childTime;\r\n+        for (Iterator itr = edges.iterator(); itr.hasNext();) {\r\n+            edge = (Edge) itr.next();\r\n+            other = edge.getOther(node);\r\n+            otherInfo = (NodeInfo) _nodeInfo.get(other);\r\n+            if (otherInfo.color == NodeInfo.COLOR_WHITE) {\r\n+                // undiscovered node; recurse into it\r\n+                path.add(edge);\r\n+                childTime = visit(graph, other, otherInfo, time, path);\r\n+                path.remove(edge);\r\n+                edge.setType(Edge.TYPE_TREE);\r\n+            } else if (otherInfo.color == NodeInfo.COLOR_GRAY) {\r\n+                childTime = -1;\r\n+                edge.setType(Edge.TYPE_BACK);\r\n+                // calculate the cycle including this edge\r\n+                edge.setCycle(cycleForBackEdge(edge, path));\r\n+            } else {\r\n+                childTime = otherInfo.finished;\r\n+                edge.setType(Edge.TYPE_FORWARD);\r\n+                // find the cycle including this edge\r\n+                List cycle = new LinkedList();\r\n+                cycle.add(edge);\r\n+                if (cycleForForwardEdge(graph, other, node, cycle)) {\r\n+                    edge.setCycle(cycle);\r\n+                }\r\n+            }\r\n+            maxChildTime = Math.max(maxChildTime, childTime);\r\n+        }\r\n+\r\n+        // finished with node\r\n+        info.color = NodeInfo.COLOR_BLACK;\r\n+        info.finished = maxChildTime + 1;\r\n+        return info.finished;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the comparator that should be used for ordering groups of nodes\r\n+     * with the same dependencies.\r\n+     */\r\n+    public void setNodeComparator(Comparator comp) {\r\n+        _comp = comp;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the nodes in topologically-sorted order.  This is often used\r\n+     * to order dependencies.  If each graph edge (u, v) represents a\r\n+     * dependency of v on u, then this method will return the nodes in the\r\n+     * order that they should be evaluated to satisfy all dependencies.  Of\r\n+     * course, if the graph is cyclic (has back edges), then no such ordering\r\n+     * is possible, though this method will still return the correct order\r\n+     * as if edges creating the cycles did not exist.\r\n+     */\r\n+    public List getSortedNodes() {\r\n+        Map.Entry[] entries = (Map.Entry[]) _nodeInfo.entrySet().\r\n+            toArray(new Map.Entry[_nodeInfo.size()]);\r\n+        Arrays.sort(entries, new NodeInfoComparator(_comp));\r\n+        return new NodeList(entries);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return all edges of the given type.  This method can be used to\r\n+     * discover all edges that cause cycles in the graph by passing it\r\n+     * the {@link Edge#TYPE_BACK} or {@link Edge#TYPE_FORWARD} edge type.\r\n+     */\r\n+    public Collection getEdges(int type) {\r\n+        Collection typed = null;\r\n+        Edge edge;\r\n+        Object node;\r\n+        for (Iterator nodes = _graph.getNodes().iterator(); nodes.hasNext();) {\r\n+            node = nodes.next();\r\n+            for (Iterator itr = _graph.getEdgesFrom(node).iterator();\r\n+                itr.hasNext();) {\r\n+                edge = (Edge) itr.next();\r\n+                if (edge.getType() == type) {\r\n+                    if (typed == null)\r\n+                        typed = new ArrayList();\r\n+                    typed.add(edge);\r\n+                }\r\n+            }\r\n+        }\r\n+        return (typed == null) ? Collections.EMPTY_LIST : typed;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the logical time that the given node was finished in\r\n+     * the graph walk, or -1 if the node is not part of the graph.\r\n+     */\r\n+    public int getFinishedTime(Object node) {\r\n+        NodeInfo info = (NodeInfo) _nodeInfo.get(node);\r\n+        if (info == null)\r\n+            return -1;\r\n+        return info.finished;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a list of graph edges forming a cycle. The cycle begins \r\n+     * with a type {@link Edge#TYPE_BACK} edge.\r\n+     * @param backEdge \"Starting\" edge of the cycle\r\n+     * @param path Continuous list of graph edges, may be null\r\n+     * @param pos Index of the first edge in path continuing the cycle\r\n+     * @return Cycle starting with a type {@link Edge#TYPE_BACK} edge\r\n+     */\r\n+    private List buildCycle(Edge backEdge, List path, int pos) {\r\n+        int length = path != null ? path.size() - pos : 0;\r\n+        List cycle = new ArrayList(length + 1);\r\n+        cycle.add(0, backEdge);\r\n+        for (int i = 0; i < length; i++) {\r\n+            cycle.add(i + 1, path.get(pos + i));\r\n+        }\r\n+        return cycle;\r\n+    }\r\n+\r\n+    /**\r\n+     * Computes the list of edges forming a cycle. The cycle always exists for\r\n+     * a type {@link Edge#TYPE_BACK} edge. This method should only be called \r\n+     * for type {@link Edge#TYPE_BACK} edges. \r\n+     * @param edge Edge where the cycle was detected\r\n+     * @param path Path consisting of edges to the edge's starting node\r\n+     * @return Cycle starting with a type {@link Edge#TYPE_BACK} edge\r\n+     */\r\n+    private List cycleForBackEdge(Edge edge, List path) {\r\n+        if (edge.getType() != Edge.TYPE_BACK) {\r\n+            return null;\r\n+        }\r\n+        \r\n+        List cycle;\r\n+        int pos = 0;\r\n+        if (path != null && !edge.getFrom().equals(edge.getTo())) {\r\n+            // Not a single edge loop\r\n+            pos = findNodeInPath(edge.getTo(), path);\r\n+            assert (pos >= 0): _loc.get(\"node-not-on-path\", edge, edge.getTo()); \r\n+        } else {\r\n+            assert (edge.getFrom().equals(edge.getTo())): \r\n+                _loc.get(\"edge-no-loop\", edge).getMessage();\r\n+            path = null;\r\n+        }\r\n+        cycle = buildCycle(edge, path, pos); \r\n+        assert (cycle != null): _loc.get(\"cycle-null\", edge).getMessage();\r\n+        return cycle;\r\n+    }\r\n+\r\n+    /**\r\n+     * Computes the cycle of edges including node cycleTo. The cycle must not \r\n+     * necessarily exist. This method should only be called for type \r\n+     * {@link Edge#TYPE_FORWARD} edges.\r\n+     * @param graph Graph\r\n+     * @param node Current node\r\n+     * @param cycleTo End node for loop\r\n+     * @param path Path from loop end node to current node\r\n+     * @return True if a cycle has been found. The cycle will be contained in\r\n+     * the <code>path</code> parameter.\r\n+     */\r\n+    private boolean cycleForForwardEdge(Graph graph, Object node,\r\n+        Object cycleTo, List path) {                   \r\n+        boolean found = false;\r\n+        Collection edges = graph.getEdgesFrom(node);\r\n+        for (Iterator itr = edges.iterator(); !found && itr.hasNext();) {\r\n+            Edge edge = (Edge) itr.next();\r\n+            Object other = edge.getOther(node);\r\n+            // Single edge loops are ignored\r\n+            if (!node.equals(other)) {\r\n+                if (other.equals(cycleTo)) {\r\n+                    // Cycle complete\r\n+                    path.add(edge);\r\n+                    found = true;\r\n+                } else if (!path.contains(edge)){\r\n+                    // Walk this edge\r\n+                    path.add(edge);\r\n+                    found = cycleForForwardEdge(graph, other, cycleTo, path);\r\n+                    if (!found) {\r\n+                        // Remove edge again\r\n+                        path.remove(edge);                    \r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        return found;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Finds the position of the edge starting from a particular node in the \r\n+     * continuous list of edges.\r\n+     * @param node Node on the cycle.\r\n+     * @param path Continuous list of graph edges.\r\n+     * @return Edge index if found, -1 otherwise.\r\n+     */\r\n+    private int findNodeInPath(Object node, List path) {\r\n+        int pos = -1;\r\n+        if (path != null) {\r\n+            for (int i = 0; i < path.size(); i++) {\r\n+                if (((Edge)path.get(i)).getFrom().equals(node)) {\r\n+                    pos = i;\r\n+                }\r\n+            }\r\n+        }\r\n+        return pos;\r\n+    }\r\n+\r\n+    /**\r\n+     * Test, if the analysis didn't find cycles.\r\n+     */\r\n+    public boolean hasNoCycles() {\r\n+        // a) there must not be any back edges\r\n+        if (!getEdges(Edge.TYPE_BACK).isEmpty()) {\r\n+            return false;\r\n+        }\r\n+        // b) there might be forward edges\r\n+        // make sure these don't indicate cycles\r\n+        Collection edges = getEdges(Edge.TYPE_FORWARD);\r\n+        if (!edges.isEmpty()) {\r\n+            for (Iterator itr = edges.iterator(); itr.hasNext();) {\r\n+                Edge edge = (Edge) itr.next();\r\n+                if (edge.getCycle() != null)  {\r\n+                    return false;\r\n+                }\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Comparator for toplogically sorting entries in the node info map.\r\n+     */\r\n+    private static class NodeInfoComparator\r\n+        implements Comparator {\r\n+\r\n+        private final Comparator _subComp;\r\n+\r\n+        public NodeInfoComparator(Comparator subComp) {\r\n+            _subComp = subComp;\r\n+        }\r\n+\r\n+        public int compare(Object o1, Object o2) {\r\n+            Map.Entry e1 = (Map.Entry) o1;\r\n+            Map.Entry e2 = (Map.Entry) o2;\r\n+            NodeInfo n1 = (NodeInfo) e1.getValue();\r\n+            NodeInfo n2 = (NodeInfo) e2.getValue();\r\n+\r\n+            // sort by finished order\r\n+            int ret = n1.finished - n2.finished;\r\n+            if (ret == 0 && _subComp != null)\r\n+                ret = _subComp.compare(e1.getKey(), e2.getKey());\r\n+            return ret;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     *\tList of node-to-nodeinfo entries that exposes just the nodes.\r\n+     */\r\n+    private static class NodeList\r\n+        extends AbstractList {\r\n+\r\n+        private final Map.Entry[] _entries;\r\n+\r\n+        public NodeList(Map.Entry[] entries) {\r\n+            _entries = entries;\r\n+        }\r\n+\r\n+        public Object get(int idx) {\r\n+            return _entries[idx].getKey();\r\n+        }\r\n+\r\n+        public int size() {\r\n+            return _entries.length;\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"94522a8ca25d73cce881aa59cdb0f6bfce7faf14","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java","status":"added","additions":222,"deletions":0,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56","patch":"@@ -0,0 +1,222 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.graph;\r\n+\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * <p>A graph edge.  Includes the from and to nodes, an arbitrary user object,\r\n+ * and a weight.  Edges can be either directed or undirected.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 1.0.0\r\n+ * @nojavadoc\r\n+ */\r\n+public class Edge {\r\n+\r\n+    /**\r\n+     * An edge (u, v) is a tree edge if node v was first discovered by\r\n+     * traversing the edge.\r\n+     */\r\n+    public static final int TYPE_TREE = 1;\r\n+\r\n+    /**\r\n+     * An edge (u, v) is a back edge if it creates a cycle back to an\r\n+     * ancestor in the graph.\r\n+     */\r\n+    public static final int TYPE_BACK = 2;\r\n+\r\n+    /**\r\n+     * An edge (u, v) is a forward edge if it is not a tree or back edge.\r\n+     */\r\n+    public static final int TYPE_FORWARD = 3;\r\n+\r\n+    private final Object _from;\r\n+    private final Object _to;\r\n+    private final boolean _directed;\r\n+\r\n+    private int _type = 0;\r\n+    private double _weight = 0;\r\n+    private Object _userObj = null;\r\n+    private List _cycle = null;\r\n+    private boolean _removedFromGraph = false;\r\n+\r\n+    /**\r\n+     * Constructor.\r\n+     *\r\n+     * @param    from        the node the edge comes from\r\n+     * @param    to            the node the edge goes to\r\n+     * @param    directed    whether the edge is directed\r\n+     */\r\n+    public Edge(Object from, Object to, boolean directed) {\r\n+        if (from == null)\r\n+            throw new NullPointerException(\"from == null\");\r\n+        if (to == null)\r\n+            throw new NullPointerException(\"to == null\");\r\n+        _from = from;\r\n+        _to = to;\r\n+        _directed = directed;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor.\r\n+     *\r\n+     * @param    from        the node the edge comes from\r\n+     * @param    to            the node the edge goes to\r\n+     * @param    directed    whether the edge is directed\r\n+     * @param    userObject    an associated object\r\n+     */\r\n+    public Edge(Object from, Object to, boolean directed, Object userObject) {\r\n+        this(from, to, directed);\r\n+        _userObj = userObject;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the node the edge links from.\r\n+     */\r\n+    public Object getFrom() {\r\n+        return _from;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the node the edge links to.\r\n+     */\r\n+    public Object getTo() {\r\n+        return _to;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the node on the opposite end of the given one, or null if the\r\n+     * given node is not part of this edge.\r\n+     */\r\n+    public Object getOther(Object node) {\r\n+        if (_to.equals(node))\r\n+            return _from;\r\n+        if (_from.equals(node))\r\n+            return _to;\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if this edge links to the given node.  For undirected edges,\r\n+     * this method returns true if either side is equal to the given node.\r\n+     */\r\n+    public boolean isTo(Object node) {\r\n+        return _to.equals(node) || (!_directed && _from.equals(node));\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if this edge links from the given node.  For undirected\r\n+     * edges, this method returns true if either side is equal to the given\r\n+     * node.\r\n+     */\r\n+    public boolean isFrom(Object node) {\r\n+        return _from.equals(node) || (!_directed && _to.equals(node));\r\n+    }\r\n+\r\n+    /**\r\n+     * Return whether the edge is directed.\r\n+     */\r\n+    public boolean isDirected() {\r\n+        return _directed;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the weight of the edge.\r\n+     */\r\n+    public double getWeight() {\r\n+        return _weight;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the weight of the edge.\r\n+     */\r\n+    public void setWeight(double weight) {\r\n+        _weight = weight;\r\n+    }\r\n+\r\n+    /**\r\n+     * Arbitrary user object associated with the edge.\r\n+     */\r\n+    public Object getUserObject() {\r\n+        return _userObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * Arbitrary user object associated with the edge.\r\n+     */\r\n+    public void setUserObject(Object obj) {\r\n+        _userObj = obj;\r\n+    }\r\n+\r\n+    /**\r\n+     * Traversal bookkeeping info.\r\n+     */\r\n+    public int getType() {\r\n+        return _type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Traversal bookkeeping info.\r\n+     */\r\n+    public void setType(int type) {\r\n+        _type = type;\r\n+    }\r\n+\r\n+    /**\r\n+     * List of edges forming a cycle. Only set for TYPE_BACK and TYPE_FORWARD edges.\r\n+     */\r\n+    public List getCycle() {\r\n+        return _cycle;\r\n+    }\r\n+    \r\n+    /**\r\n+     * List of edges forming a cycle. Only set for TYPE_BACK and TYPE_FORWARD edges.\r\n+     */\r\n+    public void setCycle(List cycle) {\r\n+        _cycle = cycle;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns if this edge is (still) part of the graph.\r\n+     */\r\n+    public boolean isRemovedFromGraph() {\r\n+        return _removedFromGraph;\r\n+    }\r\n+\r\n+    /**\r\n+     * Mark this edge as removed from the graph.\r\n+     */\r\n+    public void setRemovedFromGraph() {\r\n+        this._removedFromGraph = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Clear traversal info.\r\n+     */\r\n+    public void clearTraversal() {\r\n+        _type = 0;\r\n+        _cycle = null;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return super.toString() + \"[from=\" + getFrom() + \";to=\" + getTo()\r\n+            + \";directed=\" + isDirected () + \";weight=\" + getWeight () + \"]\";\r\n+\t}\r\n+}\r"},{"sha":"6077e6d0b29b7f41f723f9850d2db5de53b251e1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"852602d7d7859bf0a5d35106bcce513f50e45f10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/GraphVisitor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/GraphVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/GraphVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/GraphVisitor.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"c3dbe01d55b35af8fba1608e9a113645d56565fc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/NodeInfo.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/NodeInfo.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/NodeInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/NodeInfo.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"9095a4ec0368bfd122f7c762215689b7185b19fc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/package.html","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/package.html","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/package.html?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"9b37a3ea5d549ecf246ca17de9f160757ba47088","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"8eb5fa98c9a9b4d0134ce49340cc736b0f553d98","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"bd0a2a4d0c8e849016bf07b71dabc07c9d415db3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"baa7402037e69f05607539ed00378022c6dbc479","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"a0a3f8e297c2b3e2b70be8f26642416f88709615","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"4c9526c6822a0bbd41fadc2605ed2fe672871fed","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"789e89905c2f6ebc7dc7bc37d2a79e926548bb37","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"f787488ca974a7e2b1e7bcdc56dbe1a60c928faa","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"a2d69da6eefc2aa068b42e54f00542c006464b16","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"af8d01f827f119e1e71916e89821ae78c61640d2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"611b685436fe043e68de9fd91522cb158296b826","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"423313c139b43a0d56e7556130b5d29c8536e337","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"131dce98fb9ee5113075147c0a4658a3901af484","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"92376405ae591922a8c14916213aaa4258b7700e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"acc4d737685fe730777026bf5430315071120570","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"db073f1ae73f18dd6c4b120a571c50d920ee1fe6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/aec27a30bf9d8d4e7fe1cde6a1830d10eb064119/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/aec27a30bf9d8d4e7fe1cde6a1830d10eb064119/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java?ref=aec27a30bf9d8d4e7fe1cde6a1830d10eb064119"},{"sha":"1584679be84a10d3ce7c584b9c7d718e8e3740a1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"74c592d78eb160cc765cfae6d2e5142d1a5b87d5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"901408cbd3f48a5755cb41fd530adbd6e49e8351","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"838759865a08f24f35ef0d87568cf690e070d030","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"40999a7595029b95e8117e2175adedbc882d2e91","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"7d8210a54cd26c943f8c2a00d78518b0b2397780","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"e78e865ab3e0e37238143023292e520bc4e7a5b0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"722fbf78615508207265c86a3abebafd45fc4a0d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"b814cfcf83cb8984209a699a5450ede44b645028","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"7dabf83784262dc41c3b00cb0885904bd1f6f5e0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"43fe7bc5d57c172194f87feb9662a2043ecc3a65","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"ca469a18e5a09ac80685a23d5ad3908fc72a210d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"91647556c606996250cefd5b8ec3ecb8e27f2c7e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"dfedda2aba36cc8156b79c80cef7a2ec08c664e2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"9e807cb486cf26ab6dd7f4b3c095fa215af057fa","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"0c6a8ddac5d1e560ba5762cbc23d75281f94d8c2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"06bf5f3f95105b174a94279cf1f1824603c43826","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"5f345645b9e87bdefef3067ee5c5d2b3dfd31624","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"36b4a153926fc5a18c96d7cc4b20f626b45c0e72","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"ed10c2082d841ab91a64409464a70c8b50fdf57a","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"98b42fe62853e85c93eec9e43fbfd1edc7f908ba","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"40c663cb1ef0c527685f2bf1af0195368c6496b2","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"2c93755c672336c8a98e0fd46a867e687939b7b7","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"bfb6538f3d8c2517b0663ab7572f2292ed3a82f8","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"7ae6a33c752a1ad3445d880e07e3cc1c5deb5f1a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"1deddb4dbe269f08ffee8049aa7c36e982b0421a","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"8c29b2c2111dbe9f4bb99bdf3430a9747ebe63f6","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"594f4faecba1578959fa2b6319f70876500769e3","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"302e4bd0327faf80c68e6c5ba514b2fb998a55a8","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"b00a2edb0ec6ccfc2ab82b5e224a75482752b190","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"de329a2132804a42caf28f573b1e87b10e797ec1","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"7967b9196f2bf6fd544142437582ec2e1c174a77","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"54e1dc7542ca2aa07421135faadf84e2075f6c4f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"5ccb2809b99c0e8286d211d8d0395eb5bcb03f8a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"},{"sha":"8ff92b8d769b04756b8507ee532e517039ab8a91","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/849f746573e5dcce0ab89ca7f3021d495d43ee56/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java?ref=849f746573e5dcce0ab89ca7f3021d495d43ee56"}]}

