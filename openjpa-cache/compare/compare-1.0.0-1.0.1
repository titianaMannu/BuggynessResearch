{"url":"https://api.github.com/repos/apache/openjpa/compare/1.0.0...1.0.1","html_url":"https://github.com/apache/openjpa/compare/1.0.0...1.0.1","permalink_url":"https://github.com/apache/openjpa/compare/apache:849f746...apache:093c9c3","diff_url":"https://github.com/apache/openjpa/compare/1.0.0...1.0.1.diff","patch_url":"https://github.com/apache/openjpa/compare/1.0.0...1.0.1.patch","base_commit":{"sha":"849f746573e5dcce0ab89ca7f3021d495d43ee56","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0OWY3NDY1NzNlNWRjY2UwYWI4OWNhN2YzMDIxZDQ5NWQ0M2VlNTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-24T05:27:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-24T05:27:43Z"},"message":"Minor logging / exception handling improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@569253 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","html_url":"https://github.com/apache/openjpa/commit/849f746573e5dcce0ab89ca7f3021d495d43ee56","comments_url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56/comments","author":null,"committer":null,"parents":[{"sha":"cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","url":"https://api.github.com/repos/apache/openjpa/commits/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","html_url":"https://github.com/apache/openjpa/commit/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0"}]},"merge_base_commit":{"sha":"849f746573e5dcce0ab89ca7f3021d495d43ee56","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0OWY3NDY1NzNlNWRjY2UwYWI4OWNhN2YzMDIxZDQ5NWQ0M2VlNTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-24T05:27:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-24T05:27:43Z"},"message":"Minor logging / exception handling improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@569253 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","html_url":"https://github.com/apache/openjpa/commit/849f746573e5dcce0ab89ca7f3021d495d43ee56","comments_url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56/comments","author":null,"committer":null,"parents":[{"sha":"cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","url":"https://api.github.com/repos/apache/openjpa/commits/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0","html_url":"https://github.com/apache/openjpa/commit/cfbc21313479df8f1cbbfb69dc8ab22ce4d8cba0"}]},"status":"ahead","ahead_by":72,"behind_by":0,"total_commits":72,"commits":[{"sha":"3c61b777f5e6023df583d77bfa79aeceea0ebf4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjNjFiNzc3ZjVlNjAyM2RmNTgzZDc3YmZhNzlhZWNlZWEwZWJmNGE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-28T17:11:30Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-28T17:11:30Z"},"message":"OpenJPA branch 1.0.x for maintenance work on 1.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@570489 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8d6a5d8bf7fc5cf38f0f530d955a989e2442e5c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3c61b777f5e6023df583d77bfa79aeceea0ebf4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3c61b777f5e6023df583d77bfa79aeceea0ebf4a","html_url":"https://github.com/apache/openjpa/commit/3c61b777f5e6023df583d77bfa79aeceea0ebf4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3c61b777f5e6023df583d77bfa79aeceea0ebf4a/comments","author":null,"committer":null,"parents":[{"sha":"849f746573e5dcce0ab89ca7f3021d495d43ee56","url":"https://api.github.com/repos/apache/openjpa/commits/849f746573e5dcce0ab89ca7f3021d495d43ee56","html_url":"https://github.com/apache/openjpa/commit/849f746573e5dcce0ab89ca7f3021d495d43ee56"}]},{"sha":"9cc19220d5fa7c16e979cc95e92489b7019b55e4","node_id":"MDY6Q29tbWl0MjA2MzY0OjljYzE5MjIwZDVmYTdjMTZlOTc5Y2M5NWU5MjQ4OWI3MDE5YjU1ZTQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-28T17:16:08Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-28T17:16:08Z"},"message":"Changed maintenance branch version to be 1.0.1-SNAPSHOT\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@570490 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d601f692d17d765e237c19d3494bcfa7d4a37df","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d601f692d17d765e237c19d3494bcfa7d4a37df"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9cc19220d5fa7c16e979cc95e92489b7019b55e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9cc19220d5fa7c16e979cc95e92489b7019b55e4","html_url":"https://github.com/apache/openjpa/commit/9cc19220d5fa7c16e979cc95e92489b7019b55e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9cc19220d5fa7c16e979cc95e92489b7019b55e4/comments","author":null,"committer":null,"parents":[{"sha":"3c61b777f5e6023df583d77bfa79aeceea0ebf4a","url":"https://api.github.com/repos/apache/openjpa/commits/3c61b777f5e6023df583d77bfa79aeceea0ebf4a","html_url":"https://github.com/apache/openjpa/commit/3c61b777f5e6023df583d77bfa79aeceea0ebf4a"}]},{"sha":"5678f5d365cc86de0bc626ec01d820a5eb2e3a4e","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2NzhmNWQzNjVjYzg2ZGUwYmM2MjZlYzAxZDgyMGE1ZWIyZTNhNGU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-28T18:13:58Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-28T18:13:58Z"},"message":"Updated scm connection information to point to the current 1.0.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@570512 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"960fc1ca69c0d1e67866767611b4cc274c2987f2","url":"https://api.github.com/repos/apache/openjpa/git/trees/960fc1ca69c0d1e67866767611b4cc274c2987f2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5678f5d365cc86de0bc626ec01d820a5eb2e3a4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5678f5d365cc86de0bc626ec01d820a5eb2e3a4e","html_url":"https://github.com/apache/openjpa/commit/5678f5d365cc86de0bc626ec01d820a5eb2e3a4e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5678f5d365cc86de0bc626ec01d820a5eb2e3a4e/comments","author":null,"committer":null,"parents":[{"sha":"9cc19220d5fa7c16e979cc95e92489b7019b55e4","url":"https://api.github.com/repos/apache/openjpa/commits/9cc19220d5fa7c16e979cc95e92489b7019b55e4","html_url":"https://github.com/apache/openjpa/commit/9cc19220d5fa7c16e979cc95e92489b7019b55e4"}]},{"sha":"ea70a121d43888600d35e6575fa241b4897e7513","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhNzBhMTIxZDQzODg4NjAwZDM1ZTY1NzVmYTI0MWI0ODk3ZTc1MTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-30T18:47:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-30T18:47:50Z"},"message":"OPENJPA-346. 'svn merge -c 571269 ../../trunk'\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@571274 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"212e0cb9dbc998181ca99652ef00b065e0e4344d","url":"https://api.github.com/repos/apache/openjpa/git/trees/212e0cb9dbc998181ca99652ef00b065e0e4344d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea70a121d43888600d35e6575fa241b4897e7513","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea70a121d43888600d35e6575fa241b4897e7513","html_url":"https://github.com/apache/openjpa/commit/ea70a121d43888600d35e6575fa241b4897e7513","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea70a121d43888600d35e6575fa241b4897e7513/comments","author":null,"committer":null,"parents":[{"sha":"5678f5d365cc86de0bc626ec01d820a5eb2e3a4e","url":"https://api.github.com/repos/apache/openjpa/commits/5678f5d365cc86de0bc626ec01d820a5eb2e3a4e","html_url":"https://github.com/apache/openjpa/commit/5678f5d365cc86de0bc626ec01d820a5eb2e3a4e"}]},{"sha":"f1c4c68d90c5425ea1e31f9446d99e22ef79122f","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxYzRjNjhkOTBjNTQyNWVhMWUzMWY5NDQ2ZDk5ZTIyZWY3OTEyMmY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-31T18:35:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-31T18:35:44Z"},"message":"OPENJPA-347.  Committing this performance regression update to the 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@571535 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ede512c0ac28e89f8377a3bca442feaf7853b07","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ede512c0ac28e89f8377a3bca442feaf7853b07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1c4c68d90c5425ea1e31f9446d99e22ef79122f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1c4c68d90c5425ea1e31f9446d99e22ef79122f","html_url":"https://github.com/apache/openjpa/commit/f1c4c68d90c5425ea1e31f9446d99e22ef79122f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1c4c68d90c5425ea1e31f9446d99e22ef79122f/comments","author":null,"committer":null,"parents":[{"sha":"ea70a121d43888600d35e6575fa241b4897e7513","url":"https://api.github.com/repos/apache/openjpa/commits/ea70a121d43888600d35e6575fa241b4897e7513","html_url":"https://github.com/apache/openjpa/commit/ea70a121d43888600d35e6575fa241b4897e7513"}]},{"sha":"8265bac2b20bce3d1c9e0040ad6114c30b13d42f","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyNjViYWMyYjIwYmNlM2QxYzllMDA0MGFkNjExNGMzMGIxM2Q0MmY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-31T21:46:59Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-31T21:46:59Z"},"message":"Minor logging correction; flow control correction. 'svn merge -c 571599 ../../trunk'\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@571608 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2794af917254763ee5eb8ac27b48a473619cd35","url":"https://api.github.com/repos/apache/openjpa/git/trees/f2794af917254763ee5eb8ac27b48a473619cd35"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8265bac2b20bce3d1c9e0040ad6114c30b13d42f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8265bac2b20bce3d1c9e0040ad6114c30b13d42f","html_url":"https://github.com/apache/openjpa/commit/8265bac2b20bce3d1c9e0040ad6114c30b13d42f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8265bac2b20bce3d1c9e0040ad6114c30b13d42f/comments","author":null,"committer":null,"parents":[{"sha":"f1c4c68d90c5425ea1e31f9446d99e22ef79122f","url":"https://api.github.com/repos/apache/openjpa/commits/f1c4c68d90c5425ea1e31f9446d99e22ef79122f","html_url":"https://github.com/apache/openjpa/commit/f1c4c68d90c5425ea1e31f9446d99e22ef79122f"}]},{"sha":"4e670637e1e0763276b9e212d29852235fce2432","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlNjcwNjM3ZTFlMDc2MzI3NmI5ZTIxMmQyOTg1MjIzNWZjZTI0MzI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-07T19:23:29Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-07T19:23:29Z"},"message":"OPENJPA-355: applying log4j mixup fix to 1.0.x branch. svn merge -c 573653 ../../trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@573675 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6bdca048ffd28e2e5273fc3a4f2684d9fc8e4735","url":"https://api.github.com/repos/apache/openjpa/git/trees/6bdca048ffd28e2e5273fc3a4f2684d9fc8e4735"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e670637e1e0763276b9e212d29852235fce2432","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e670637e1e0763276b9e212d29852235fce2432","html_url":"https://github.com/apache/openjpa/commit/4e670637e1e0763276b9e212d29852235fce2432","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e670637e1e0763276b9e212d29852235fce2432/comments","author":null,"committer":null,"parents":[{"sha":"8265bac2b20bce3d1c9e0040ad6114c30b13d42f","url":"https://api.github.com/repos/apache/openjpa/commits/8265bac2b20bce3d1c9e0040ad6114c30b13d42f","html_url":"https://github.com/apache/openjpa/commit/8265bac2b20bce3d1c9e0040ad6114c30b13d42f"}]},{"sha":"25c94598d7fc8e8164020564d002a6ce98b22675","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1Yzk0NTk4ZDdmYzhlODE2NDAyMDU2NGQwMDJhNmNlOThiMjI2NzU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-10T19:15:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-10T19:15:05Z"},"message":"release note clarification. svn merge -c 574337 ../../trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@574338 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3eae35fc91b192441d621b6eaad7011587146bbb","url":"https://api.github.com/repos/apache/openjpa/git/trees/3eae35fc91b192441d621b6eaad7011587146bbb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/25c94598d7fc8e8164020564d002a6ce98b22675","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/25c94598d7fc8e8164020564d002a6ce98b22675","html_url":"https://github.com/apache/openjpa/commit/25c94598d7fc8e8164020564d002a6ce98b22675","comments_url":"https://api.github.com/repos/apache/openjpa/commits/25c94598d7fc8e8164020564d002a6ce98b22675/comments","author":null,"committer":null,"parents":[{"sha":"4e670637e1e0763276b9e212d29852235fce2432","url":"https://api.github.com/repos/apache/openjpa/commits/4e670637e1e0763276b9e212d29852235fce2432","html_url":"https://github.com/apache/openjpa/commit/4e670637e1e0763276b9e212d29852235fce2432"}]},{"sha":"25936c82e851d834cb34ebd227f34f15577b2cf1","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1OTM2YzgyZTg1MWQ4MzRjYjM0ZWJkMjI3ZjM0ZjE1NTc3YjJjZjE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-11T13:28:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-11T13:28:45Z"},"message":"OPENJPA-361.  Committing Albert's patch for the incorrect GREG_OFFSET (Gregorian Offset) for the 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@574594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a65b5ecc913a75320fc0f1aeae5505fbc395eb19","url":"https://api.github.com/repos/apache/openjpa/git/trees/a65b5ecc913a75320fc0f1aeae5505fbc395eb19"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/25936c82e851d834cb34ebd227f34f15577b2cf1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/25936c82e851d834cb34ebd227f34f15577b2cf1","html_url":"https://github.com/apache/openjpa/commit/25936c82e851d834cb34ebd227f34f15577b2cf1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/25936c82e851d834cb34ebd227f34f15577b2cf1/comments","author":null,"committer":null,"parents":[{"sha":"25c94598d7fc8e8164020564d002a6ce98b22675","url":"https://api.github.com/repos/apache/openjpa/commits/25c94598d7fc8e8164020564d002a6ce98b22675","html_url":"https://github.com/apache/openjpa/commit/25c94598d7fc8e8164020564d002a6ce98b22675"}]},{"sha":"04b3212698e68c04b2c61aa7d5845c86b05bfea2","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0YjMyMTI2OThlNjhjMDRiMmM2MWFhN2Q1ODQ1Yzg2YjA1YmZlYTI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-11T17:59:38Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-11T17:59:38Z"},"message":"OPENJPA-360 SQL FOR UPDATE OF incorrectly generated for DB2 UDB version8.1 or earlier and DB2 ISeries V5R3 or earlier.\nThese  DB2 version also require the \"optimize for <n> row\" clause appear before FOR UPDATE clause.\nDue to this requirement, the OPTIMIZE clause will  appear before FOR UPDATE clause for all DB2 versions.\nAlso fixed the affected testcases.\nSame fix retrofit to OpenJPA 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@574653 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e1c1186d5c097e4415b92fb0b08355426c93ec0","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e1c1186d5c097e4415b92fb0b08355426c93ec0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2","html_url":"https://github.com/apache/openjpa/commit/04b3212698e68c04b2c61aa7d5845c86b05bfea2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2/comments","author":null,"committer":null,"parents":[{"sha":"25936c82e851d834cb34ebd227f34f15577b2cf1","url":"https://api.github.com/repos/apache/openjpa/commits/25936c82e851d834cb34ebd227f34f15577b2cf1","html_url":"https://github.com/apache/openjpa/commit/25936c82e851d834cb34ebd227f34f15577b2cf1"}]},{"sha":"73513a2af5c5733ce1d87ae737e68f97a56e108e","node_id":"MDY6Q29tbWl0MjA2MzY0OjczNTEzYTJhZjVjNTczM2NlMWQ4N2FlNzM3ZTY4Zjk3YTU2ZTEwOGU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-12T16:45:59Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-12T16:45:59Z"},"message":"OPENJPA-360.  Remove code dependencies on DB2 libraries from unit tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@575008 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55a8f714abf9268da98d93d1e1c89466e5406744","url":"https://api.github.com/repos/apache/openjpa/git/trees/55a8f714abf9268da98d93d1e1c89466e5406744"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/73513a2af5c5733ce1d87ae737e68f97a56e108e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/73513a2af5c5733ce1d87ae737e68f97a56e108e","html_url":"https://github.com/apache/openjpa/commit/73513a2af5c5733ce1d87ae737e68f97a56e108e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/73513a2af5c5733ce1d87ae737e68f97a56e108e/comments","author":null,"committer":null,"parents":[{"sha":"04b3212698e68c04b2c61aa7d5845c86b05bfea2","url":"https://api.github.com/repos/apache/openjpa/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2","html_url":"https://github.com/apache/openjpa/commit/04b3212698e68c04b2c61aa7d5845c86b05bfea2"}]},{"sha":"2c748d1aea58c480a558efcfe1bf38f7f8787bfb","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjNzQ4ZDFhZWE1OGM0ODBhNTU4ZWZjZmUxYmYzOGY3Zjg3ODdiZmI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-12T21:11:56Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-12T21:11:56Z"},"message":"OPENJPA-360 FOR UPDATE clause incorrectly generated, remove transient variable declaration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@575080 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"976be31cd0eb8ca4e125832c32e7a0451d9fcf63","url":"https://api.github.com/repos/apache/openjpa/git/trees/976be31cd0eb8ca4e125832c32e7a0451d9fcf63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","html_url":"https://github.com/apache/openjpa/commit/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb/comments","author":null,"committer":null,"parents":[{"sha":"73513a2af5c5733ce1d87ae737e68f97a56e108e","url":"https://api.github.com/repos/apache/openjpa/commits/73513a2af5c5733ce1d87ae737e68f97a56e108e","html_url":"https://github.com/apache/openjpa/commit/73513a2af5c5733ce1d87ae737e68f97a56e108e"}]},{"sha":"da603826e0467e02951e2ac40d490189cfc117e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhNjAzODI2ZTA0NjdlMDI5NTFlMmFjNDBkNDkwMTg5Y2ZjMTE3ZTQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-13T23:19:13Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-09-13T23:19:13Z"},"message":"OPENJPA-335\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@575492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e90fb12f112e203a87af0500ccfb75fe4b62ccb0","url":"https://api.github.com/repos/apache/openjpa/git/trees/e90fb12f112e203a87af0500ccfb75fe4b62ccb0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/da603826e0467e02951e2ac40d490189cfc117e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/da603826e0467e02951e2ac40d490189cfc117e4","html_url":"https://github.com/apache/openjpa/commit/da603826e0467e02951e2ac40d490189cfc117e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/da603826e0467e02951e2ac40d490189cfc117e4/comments","author":null,"committer":null,"parents":[{"sha":"2c748d1aea58c480a558efcfe1bf38f7f8787bfb","url":"https://api.github.com/repos/apache/openjpa/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","html_url":"https://github.com/apache/openjpa/commit/2c748d1aea58c480a558efcfe1bf38f7f8787bfb"}]},{"sha":"3f5fd69c0694099e8617c3735a846ac1e6105169","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmNWZkNjljMDY5NDA5OWU4NjE3YzM3MzVhODQ2YWMxZTYxMDUxNjk=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-17T19:26:51Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-17T19:26:51Z"},"message":"OPENJPA-367.  Committing Albert's patch (since he doesn't have his committer karma quite yet...).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@576564 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c28962efc9d105f863a824d3e59f84772c760343","url":"https://api.github.com/repos/apache/openjpa/git/trees/c28962efc9d105f863a824d3e59f84772c760343"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f5fd69c0694099e8617c3735a846ac1e6105169","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f5fd69c0694099e8617c3735a846ac1e6105169","html_url":"https://github.com/apache/openjpa/commit/3f5fd69c0694099e8617c3735a846ac1e6105169","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f5fd69c0694099e8617c3735a846ac1e6105169/comments","author":null,"committer":null,"parents":[{"sha":"da603826e0467e02951e2ac40d490189cfc117e4","url":"https://api.github.com/repos/apache/openjpa/commits/da603826e0467e02951e2ac40d490189cfc117e4","html_url":"https://github.com/apache/openjpa/commit/da603826e0467e02951e2ac40d490189cfc117e4"}]},{"sha":"05fb97ded7565c74d30832cad4b2aeb78c1e9272","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1ZmI5N2RlZDc1NjVjNzRkMzA4MzJjYWQ0YjJhZWI3OGMxZTkyNzI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T15:25:14Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T15:25:14Z"},"message":"OPENJPA-353 for 1.0.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@576948 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61cec05117909de784f091fcb83d916ebe54b5ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/61cec05117909de784f091fcb83d916ebe54b5ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/05fb97ded7565c74d30832cad4b2aeb78c1e9272","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/05fb97ded7565c74d30832cad4b2aeb78c1e9272","html_url":"https://github.com/apache/openjpa/commit/05fb97ded7565c74d30832cad4b2aeb78c1e9272","comments_url":"https://api.github.com/repos/apache/openjpa/commits/05fb97ded7565c74d30832cad4b2aeb78c1e9272/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3f5fd69c0694099e8617c3735a846ac1e6105169","url":"https://api.github.com/repos/apache/openjpa/commits/3f5fd69c0694099e8617c3735a846ac1e6105169","html_url":"https://github.com/apache/openjpa/commit/3f5fd69c0694099e8617c3735a846ac1e6105169"}]},{"sha":"2663cb3e32a116f3be0681d603923680bd0267d6","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2NjNjYjNlMzJhMTE2ZjNiZTA2ODFkNjAzOTIzNjgwYmQwMjY3ZDY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-18T18:49:05Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-18T18:49:05Z"},"message":"OPENJPA-375  DB2 autoCommit(true) causes Result Set prematurely closed in WebContainer JEE environment.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577014 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd62d2f824141f3e8065cdd6b032d61b8fcc72a5","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd62d2f824141f3e8065cdd6b032d61b8fcc72a5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2663cb3e32a116f3be0681d603923680bd0267d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2663cb3e32a116f3be0681d603923680bd0267d6","html_url":"https://github.com/apache/openjpa/commit/2663cb3e32a116f3be0681d603923680bd0267d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2663cb3e32a116f3be0681d603923680bd0267d6/comments","author":null,"committer":null,"parents":[{"sha":"05fb97ded7565c74d30832cad4b2aeb78c1e9272","url":"https://api.github.com/repos/apache/openjpa/commits/05fb97ded7565c74d30832cad4b2aeb78c1e9272","html_url":"https://github.com/apache/openjpa/commit/05fb97ded7565c74d30832cad4b2aeb78c1e9272"}]},{"sha":"e90c610dff5a58ff299131e346298d9e8f454de3","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5MGM2MTBkZmY1YTU4ZmYyOTkxMzFlMzQ2Mjk4ZDllOGY0NTRkZTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T20:10:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T20:10:39Z"},"message":"OPENJPA-338 for 1.0.x. Committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd59508e71f90b4a2f2752aed14e79205df26914","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd59508e71f90b4a2f2752aed14e79205df26914"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e90c610dff5a58ff299131e346298d9e8f454de3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e90c610dff5a58ff299131e346298d9e8f454de3","html_url":"https://github.com/apache/openjpa/commit/e90c610dff5a58ff299131e346298d9e8f454de3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e90c610dff5a58ff299131e346298d9e8f454de3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2663cb3e32a116f3be0681d603923680bd0267d6","url":"https://api.github.com/repos/apache/openjpa/commits/2663cb3e32a116f3be0681d603923680bd0267d6","html_url":"https://github.com/apache/openjpa/commit/2663cb3e32a116f3be0681d603923680bd0267d6"}]},{"sha":"1e726bdbfcb48fc3d2e805ee78841ebd3e236756","node_id":"MDY6Q29tbWl0MjA2MzY0OjFlNzI2YmRiZmNiNDhmYzNkMmU4MDVlZTc4ODQxZWJkM2UyMzY3NTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T21:05:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T21:05:00Z"},"message":"OPENJPA-356 in 1.0.x committing Patrick's changes originally done in rev 573676\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577066 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fceeede7d92c7f103e21f483927823de53e6a556","url":"https://api.github.com/repos/apache/openjpa/git/trees/fceeede7d92c7f103e21f483927823de53e6a556"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1e726bdbfcb48fc3d2e805ee78841ebd3e236756","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1e726bdbfcb48fc3d2e805ee78841ebd3e236756","html_url":"https://github.com/apache/openjpa/commit/1e726bdbfcb48fc3d2e805ee78841ebd3e236756","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1e726bdbfcb48fc3d2e805ee78841ebd3e236756/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e90c610dff5a58ff299131e346298d9e8f454de3","url":"https://api.github.com/repos/apache/openjpa/commits/e90c610dff5a58ff299131e346298d9e8f454de3","html_url":"https://github.com/apache/openjpa/commit/e90c610dff5a58ff299131e346298d9e8f454de3"}]},{"sha":"aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlY2UzMzFkOGFjN2FiNGE0OTc4YzcwY2M4NmZiNDM0ZmM2YjkwYTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T21:47:53Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T21:47:53Z"},"message":"OPENJPA-343 merging to 1.0.x. Original changes under rev 571523\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577077 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"954a6fb585b3854f1e9dcf17612f5efab0d55982","url":"https://api.github.com/repos/apache/openjpa/git/trees/954a6fb585b3854f1e9dcf17612f5efab0d55982"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","html_url":"https://github.com/apache/openjpa/commit/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1e726bdbfcb48fc3d2e805ee78841ebd3e236756","url":"https://api.github.com/repos/apache/openjpa/commits/1e726bdbfcb48fc3d2e805ee78841ebd3e236756","html_url":"https://github.com/apache/openjpa/commit/1e726bdbfcb48fc3d2e805ee78841ebd3e236756"}]},{"sha":"972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3MmU3MWY5NzBjMWRiZTJmN2M0ZDZlYTZlMjFjNmEwZTllOTczZDY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T22:35:52Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T22:35:52Z"},"message":"OPENJPA-282 merging to 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577090 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"30d9fe8dc3de026f84bca98f545c96dbf03cc815","url":"https://api.github.com/repos/apache/openjpa/git/trees/30d9fe8dc3de026f84bca98f545c96dbf03cc815"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","html_url":"https://github.com/apache/openjpa/commit/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","url":"https://api.github.com/repos/apache/openjpa/commits/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","html_url":"https://github.com/apache/openjpa/commit/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4"}]},{"sha":"bd40a0cea5bf96f036f9af9d93756c04df7530e4","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkNDBhMGNlYTViZjk2ZjAzNmY5YWY5ZDkzNzU2YzA0ZGY3NTMwZTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T03:29:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T03:29:06Z"},"message":"Undo OPENJPA_356 in 1.0.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577522 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"571c32997f9bbe68c2c98373e4d3f9e0376a44b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/571c32997f9bbe68c2c98373e4d3f9e0376a44b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd40a0cea5bf96f036f9af9d93756c04df7530e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd40a0cea5bf96f036f9af9d93756c04df7530e4","html_url":"https://github.com/apache/openjpa/commit/bd40a0cea5bf96f036f9af9d93756c04df7530e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd40a0cea5bf96f036f9af9d93756c04df7530e4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","url":"https://api.github.com/repos/apache/openjpa/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","html_url":"https://github.com/apache/openjpa/commit/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6"}]},{"sha":"2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhNjg4N2Q0YzBhODM5ZTlhZWIxZDFkZDQ1YThkOGNhMTU1ZmE5ODM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:12:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:12:18Z"},"message":"OPENJPA-357 OPENJPA-358\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09b89f6f1d345379c24fda33f2196ef53de6e02d","url":"https://api.github.com/repos/apache/openjpa/git/trees/09b89f6f1d345379c24fda33f2196ef53de6e02d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","html_url":"https://github.com/apache/openjpa/commit/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd40a0cea5bf96f036f9af9d93756c04df7530e4","url":"https://api.github.com/repos/apache/openjpa/commits/bd40a0cea5bf96f036f9af9d93756c04df7530e4","html_url":"https://github.com/apache/openjpa/commit/bd40a0cea5bf96f036f9af9d93756c04df7530e4"}]},{"sha":"b6af06b64f9126fdcfb5afae95cd05bbf89bc421","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2YWYwNmI2NGY5MTI2ZmRjZmI1YWZhZTk1Y2QwNWJiZjg5YmM0MjE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:39:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:39:00Z"},"message":"OPENJPA-339\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577863 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a27f1961a5e8c5f55020cac01f28d029a7bd82f","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a27f1961a5e8c5f55020cac01f28d029a7bd82f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","html_url":"https://github.com/apache/openjpa/commit/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","url":"https://api.github.com/repos/apache/openjpa/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","html_url":"https://github.com/apache/openjpa/commit/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983"}]},{"sha":"134fcf10ccf6e5feeac95825da45d7fc745bf1b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzNGZjZjEwY2NmNmU1ZmVlYWM5NTgyNWRhNDVkN2ZjNzQ1YmYxYjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:57:05Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:57:05Z"},"message":"OPENJPA-369\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577877 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c1184648e62637cd9b7842a6153f9004c62e11ce","url":"https://api.github.com/repos/apache/openjpa/git/trees/c1184648e62637cd9b7842a6153f9004c62e11ce"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","html_url":"https://github.com/apache/openjpa/commit/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b6af06b64f9126fdcfb5afae95cd05bbf89bc421","url":"https://api.github.com/repos/apache/openjpa/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","html_url":"https://github.com/apache/openjpa/commit/b6af06b64f9126fdcfb5afae95cd05bbf89bc421"}]},{"sha":"f42bfb718eac77ed53f592636d71fc537dc11d01","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0MmJmYjcxOGVhYzc3ZWQ1M2Y1OTI2MzZkNzFmYzUzN2RjMTFkMDE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-21T03:29:38Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-21T03:29:38Z"},"message":"OPENJPA-378 DB2 \"FETCH FIRST <n> ROWS ONLY\" clause should not be generated in subselect for SELECT COUNT(*) from (subselect ...) s\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a30fec275575a1974a1a5e0a175b6763821ad69","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a30fec275575a1974a1a5e0a175b6763821ad69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f42bfb718eac77ed53f592636d71fc537dc11d01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f42bfb718eac77ed53f592636d71fc537dc11d01","html_url":"https://github.com/apache/openjpa/commit/f42bfb718eac77ed53f592636d71fc537dc11d01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f42bfb718eac77ed53f592636d71fc537dc11d01/comments","author":null,"committer":null,"parents":[{"sha":"134fcf10ccf6e5feeac95825da45d7fc745bf1b8","url":"https://api.github.com/repos/apache/openjpa/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","html_url":"https://github.com/apache/openjpa/commit/134fcf10ccf6e5feeac95825da45d7fc745bf1b8"}]},{"sha":"62e56cd91089175e66a52552cd9ec2c101ad9670","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyZTU2Y2Q5MTA4OTE3NWU2NmE1MjU1MmNkOWVjMmMxMDFhZDk2NzA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-21T20:56:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-21T20:56:55Z"},"message":"OPENJPA-380\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@578271 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab5fdaf837a1e55dea9cb9f52d4c10059d7f3101","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab5fdaf837a1e55dea9cb9f52d4c10059d7f3101"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62e56cd91089175e66a52552cd9ec2c101ad9670","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62e56cd91089175e66a52552cd9ec2c101ad9670","html_url":"https://github.com/apache/openjpa/commit/62e56cd91089175e66a52552cd9ec2c101ad9670","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62e56cd91089175e66a52552cd9ec2c101ad9670/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f42bfb718eac77ed53f592636d71fc537dc11d01","url":"https://api.github.com/repos/apache/openjpa/commits/f42bfb718eac77ed53f592636d71fc537dc11d01","html_url":"https://github.com/apache/openjpa/commit/f42bfb718eac77ed53f592636d71fc537dc11d01"}]},{"sha":"44355583354a9cdc7d32c400f61e35687df17c9e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0MzU1NTgzMzU0YTljZGM3ZDMyYzQwMGY2MWUzNTY4N2RmMTdjOWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-24T16:25:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-24T16:25:12Z"},"message":"OPENJPA-382\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@578870 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b8d7a21c937726a945af66e9538f483a7316ff77","url":"https://api.github.com/repos/apache/openjpa/git/trees/b8d7a21c937726a945af66e9538f483a7316ff77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/44355583354a9cdc7d32c400f61e35687df17c9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/44355583354a9cdc7d32c400f61e35687df17c9e","html_url":"https://github.com/apache/openjpa/commit/44355583354a9cdc7d32c400f61e35687df17c9e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/44355583354a9cdc7d32c400f61e35687df17c9e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"62e56cd91089175e66a52552cd9ec2c101ad9670","url":"https://api.github.com/repos/apache/openjpa/commits/62e56cd91089175e66a52552cd9ec2c101ad9670","html_url":"https://github.com/apache/openjpa/commit/62e56cd91089175e66a52552cd9ec2c101ad9670"}]},{"sha":"ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmYWYxZDIxOTZiYWNmNWI3ZWJiZjE2MmRlNWUzY2Q5MzlmOWQxYmI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-27T16:36:48Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-09-27T16:36:48Z"},"message":"OPENJPA-385.  Committing changes for both 1.0.x and 1.1.0 to properly skip and optionally log malformed .class files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@580087 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd0dc0e73b82eeed76772c95c97fd20b2d24c364","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd0dc0e73b82eeed76772c95c97fd20b2d24c364"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","html_url":"https://github.com/apache/openjpa/commit/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb/comments","author":null,"committer":null,"parents":[{"sha":"44355583354a9cdc7d32c400f61e35687df17c9e","url":"https://api.github.com/repos/apache/openjpa/commits/44355583354a9cdc7d32c400f61e35687df17c9e","html_url":"https://github.com/apache/openjpa/commit/44355583354a9cdc7d32c400f61e35687df17c9e"}]},{"sha":"e75c7cb44654d329001a381f0ce96497e47406c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3NWM3Y2I0NDY1NGQzMjkwMDFhMzgxZjBjZTk2NDk3ZTQ3NDA2YzM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-28T17:13:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-28T17:13:35Z"},"message":"OPENJPA-388\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@580425 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75ddd9a01a51f4494b6c3fcbff2d10e78b9e4c4b","url":"https://api.github.com/repos/apache/openjpa/git/trees/75ddd9a01a51f4494b6c3fcbff2d10e78b9e4c4b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e75c7cb44654d329001a381f0ce96497e47406c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e75c7cb44654d329001a381f0ce96497e47406c3","html_url":"https://github.com/apache/openjpa/commit/e75c7cb44654d329001a381f0ce96497e47406c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e75c7cb44654d329001a381f0ce96497e47406c3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","url":"https://api.github.com/repos/apache/openjpa/commits/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb","html_url":"https://github.com/apache/openjpa/commit/ffaf1d2196bacf5b7ebbf162de5e3cd939f9d1bb"}]},{"sha":"6692d0e490c438ede5bd80fd7ae29c63dc599ded","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2OTJkMGU0OTBjNDM4ZWRlNWJkODBmZDdhZTI5YzYzZGM1OTlkZWQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T15:47:09Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T15:47:09Z"},"message":"OPENJPA-370.  Committing Teresa's patch with a few minor updates (per my JIRA Issue remarks).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@580995 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8a77a5c0284a9fd19e5390d84bfdbda9f3f9091","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8a77a5c0284a9fd19e5390d84bfdbda9f3f9091"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded","html_url":"https://github.com/apache/openjpa/commit/6692d0e490c438ede5bd80fd7ae29c63dc599ded","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded/comments","author":null,"committer":null,"parents":[{"sha":"e75c7cb44654d329001a381f0ce96497e47406c3","url":"https://api.github.com/repos/apache/openjpa/commits/e75c7cb44654d329001a381f0ce96497e47406c3","html_url":"https://github.com/apache/openjpa/commit/e75c7cb44654d329001a381f0ce96497e47406c3"}]},{"sha":"b045de88c007da74d82bab160683f2a8db18db7b","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwNDVkZTg4YzAwN2RhNzRkODJiYWIxNjA2ODNmMmE4ZGIxOGRiN2I=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T19:08:19Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T19:08:19Z"},"message":"OPENJPA-370.  Committing Teresa's patch with a few minor updates (per my JIRA Issue remarks).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581039 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb45acb88af0fbee5c745ea0a877b145c1efd661","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb45acb88af0fbee5c745ea0a877b145c1efd661"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b045de88c007da74d82bab160683f2a8db18db7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b045de88c007da74d82bab160683f2a8db18db7b","html_url":"https://github.com/apache/openjpa/commit/b045de88c007da74d82bab160683f2a8db18db7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b045de88c007da74d82bab160683f2a8db18db7b/comments","author":null,"committer":null,"parents":[{"sha":"6692d0e490c438ede5bd80fd7ae29c63dc599ded","url":"https://api.github.com/repos/apache/openjpa/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded","html_url":"https://github.com/apache/openjpa/commit/6692d0e490c438ede5bd80fd7ae29c63dc599ded"}]},{"sha":"3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhODAyMTU0YWM2NmMyOGU1YzdjYTg2YTE3Y2JjZGQwOWE2Y2ZiYWU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T21:42:40Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T21:42:40Z"},"message":"OPENJPA-387.  Committing the latest patch from Daniel (with slight modifications by me).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581080 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83cda50e030d87a3fd28529f4ce31c8d2708f657","url":"https://api.github.com/repos/apache/openjpa/git/trees/83cda50e030d87a3fd28529f4ce31c8d2708f657"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae","html_url":"https://github.com/apache/openjpa/commit/3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae/comments","author":null,"committer":null,"parents":[{"sha":"b045de88c007da74d82bab160683f2a8db18db7b","url":"https://api.github.com/repos/apache/openjpa/commits/b045de88c007da74d82bab160683f2a8db18db7b","html_url":"https://github.com/apache/openjpa/commit/b045de88c007da74d82bab160683f2a8db18db7b"}]},{"sha":"cbf296df724b074ab2b2eacbbc7912f4b7143d69","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiZjI5NmRmNzI0YjA3NGFiMmIyZWFjYmJjNzkxMmY0YjcxNDNkNjk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-10-01T21:44:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-10-01T21:44:59Z"},"message":"OPENJPA-389 et.commit() not issuing database commit for Native queries involving updates.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"617a659bee3fb7babf1f7f547e7f741b9002d095","url":"https://api.github.com/repos/apache/openjpa/git/trees/617a659bee3fb7babf1f7f547e7f741b9002d095"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cbf296df724b074ab2b2eacbbc7912f4b7143d69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cbf296df724b074ab2b2eacbbc7912f4b7143d69","html_url":"https://github.com/apache/openjpa/commit/cbf296df724b074ab2b2eacbbc7912f4b7143d69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cbf296df724b074ab2b2eacbbc7912f4b7143d69/comments","author":null,"committer":null,"parents":[{"sha":"3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae","url":"https://api.github.com/repos/apache/openjpa/commits/3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae","html_url":"https://github.com/apache/openjpa/commit/3a802154ac66c28e5c7ca86a17cbcdd09a6cfbae"}]},{"sha":"4cc061e5dc19c60f76468f43aed7436026a73c01","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjYzA2MWU1ZGMxOWM2MGY3NjQ2OGY0M2FlZDc0MzYwMjZhNzNjMDE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-02T19:21:50Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-02T19:21:50Z"},"message":"OPENJPA-369, apply same changes in trunk to the 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581356 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86bc97b157035a772ead27a7abf05ae31d87409f","url":"https://api.github.com/repos/apache/openjpa/git/trees/86bc97b157035a772ead27a7abf05ae31d87409f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4cc061e5dc19c60f76468f43aed7436026a73c01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4cc061e5dc19c60f76468f43aed7436026a73c01","html_url":"https://github.com/apache/openjpa/commit/4cc061e5dc19c60f76468f43aed7436026a73c01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4cc061e5dc19c60f76468f43aed7436026a73c01/comments","author":null,"committer":null,"parents":[{"sha":"cbf296df724b074ab2b2eacbbc7912f4b7143d69","url":"https://api.github.com/repos/apache/openjpa/commits/cbf296df724b074ab2b2eacbbc7912f4b7143d69","html_url":"https://github.com/apache/openjpa/commit/cbf296df724b074ab2b2eacbbc7912f4b7143d69"}]},{"sha":"cc2b03222370e1ac714a2ba603d2d042a1b417e0","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjMmIwMzIyMjM3MGUxYWM3MTRhMmJhNjAzZDJkMDQyYTFiNDE3ZTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-10-03T00:18:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-10-03T00:18:37Z"},"message":"OPENJPA-368 -- putting Vikram's patch in 1.0.x. 'svn merge -c 581443 ../../trunk'\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581444 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b65a9f6b78cd764ede3982dc8c0e5bb411add2db","url":"https://api.github.com/repos/apache/openjpa/git/trees/b65a9f6b78cd764ede3982dc8c0e5bb411add2db"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cc2b03222370e1ac714a2ba603d2d042a1b417e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cc2b03222370e1ac714a2ba603d2d042a1b417e0","html_url":"https://github.com/apache/openjpa/commit/cc2b03222370e1ac714a2ba603d2d042a1b417e0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cc2b03222370e1ac714a2ba603d2d042a1b417e0/comments","author":null,"committer":null,"parents":[{"sha":"4cc061e5dc19c60f76468f43aed7436026a73c01","url":"https://api.github.com/repos/apache/openjpa/commits/4cc061e5dc19c60f76468f43aed7436026a73c01","html_url":"https://github.com/apache/openjpa/commit/4cc061e5dc19c60f76468f43aed7436026a73c01"}]},{"sha":"89744de0b9a3218dd01c12b12388274b5f779cab","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5NzQ0ZGUwYjlhMzIxOGRkMDFjMTJiMTIzODgyNzRiNWY3NzljYWI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-03T14:11:27Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-03T14:11:27Z"},"message":"OPENJPA-366 - Add message text to InternalException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581609 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c6235b2091f96aa4b8e4de5aae341458ae9bcfc4","url":"https://api.github.com/repos/apache/openjpa/git/trees/c6235b2091f96aa4b8e4de5aae341458ae9bcfc4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89744de0b9a3218dd01c12b12388274b5f779cab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89744de0b9a3218dd01c12b12388274b5f779cab","html_url":"https://github.com/apache/openjpa/commit/89744de0b9a3218dd01c12b12388274b5f779cab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89744de0b9a3218dd01c12b12388274b5f779cab/comments","author":null,"committer":null,"parents":[{"sha":"cc2b03222370e1ac714a2ba603d2d042a1b417e0","url":"https://api.github.com/repos/apache/openjpa/commits/cc2b03222370e1ac714a2ba603d2d042a1b417e0","html_url":"https://github.com/apache/openjpa/commit/cc2b03222370e1ac714a2ba603d2d042a1b417e0"}]},{"sha":"cf0c81a09a6de694d8c31503c000248a5c83e236","node_id":"MDY6Q29tbWl0MjA2MzY0OmNmMGM4MWEwOWE2ZGU2OTRkOGMzMTUwM2MwMDAyNDhhNWM4M2UyMzY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-03T17:00:53Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-03T17:00:53Z"},"message":"OPENJPA-366 Trivial typo in new message\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@581658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b955341841ca4bdd30fc935b057667888aae2f70","url":"https://api.github.com/repos/apache/openjpa/git/trees/b955341841ca4bdd30fc935b057667888aae2f70"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cf0c81a09a6de694d8c31503c000248a5c83e236","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cf0c81a09a6de694d8c31503c000248a5c83e236","html_url":"https://github.com/apache/openjpa/commit/cf0c81a09a6de694d8c31503c000248a5c83e236","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cf0c81a09a6de694d8c31503c000248a5c83e236/comments","author":null,"committer":null,"parents":[{"sha":"89744de0b9a3218dd01c12b12388274b5f779cab","url":"https://api.github.com/repos/apache/openjpa/commits/89744de0b9a3218dd01c12b12388274b5f779cab","html_url":"https://github.com/apache/openjpa/commit/89744de0b9a3218dd01c12b12388274b5f779cab"}]},{"sha":"77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3Y2UxM2Q2ZmNjODFkM2M4MGIxNmMzYTQxMGZkYzgzZDVlYzg3Yjg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-05T16:29:09Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-05T16:29:09Z"},"message":"Minor typos and javadoc updates.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@582337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c4281473e472a802f94096e7154603fdb8b85e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/2c4281473e472a802f94096e7154603fdb8b85e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8","html_url":"https://github.com/apache/openjpa/commit/77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8/comments","author":null,"committer":null,"parents":[{"sha":"cf0c81a09a6de694d8c31503c000248a5c83e236","url":"https://api.github.com/repos/apache/openjpa/commits/cf0c81a09a6de694d8c31503c000248a5c83e236","html_url":"https://github.com/apache/openjpa/commit/cf0c81a09a6de694d8c31503c000248a5c83e236"}]},{"sha":"6c1b918371d9a9650ccd5be531ce00f832f0a7b7","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjMWI5MTgzNzFkOWE5NjUwY2NkNWJlNTMxY2UwMGY4MzJmMGE3Yjc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-10-07T05:46:00Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-10-07T05:46:00Z"},"message":"OPENJPA-394 (bug in 1.0.x) : DB2 CAST ? AS VARCHAR missing LENGTH\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@582581 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f65489f07a011c629aaa034cc4c9bab9dc708d1f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f65489f07a011c629aaa034cc4c9bab9dc708d1f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6c1b918371d9a9650ccd5be531ce00f832f0a7b7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6c1b918371d9a9650ccd5be531ce00f832f0a7b7","html_url":"https://github.com/apache/openjpa/commit/6c1b918371d9a9650ccd5be531ce00f832f0a7b7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6c1b918371d9a9650ccd5be531ce00f832f0a7b7/comments","author":null,"committer":null,"parents":[{"sha":"77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8","url":"https://api.github.com/repos/apache/openjpa/commits/77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8","html_url":"https://github.com/apache/openjpa/commit/77ce13d6fcc81d3c80b16c3a410fdc83d5ec87b8"}]},{"sha":"fe50bbe648c954f4990f8e0cbfa8c673cb29b16d","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlNTBiYmU2NDhjOTU0ZjQ5OTBmOGUwY2JmYThjNjczY2IyOWIxNmQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-08T14:41:14Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-08T14:41:14Z"},"message":"OPENJPA-395.  Use getShort instead of getInt for the KEY_SEQ, DEFFERABILITY, and DELETE_RULE metadata fields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@582838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cce10b2835046d9e49e004819d78e4e748a82867","url":"https://api.github.com/repos/apache/openjpa/git/trees/cce10b2835046d9e49e004819d78e4e748a82867"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe50bbe648c954f4990f8e0cbfa8c673cb29b16d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe50bbe648c954f4990f8e0cbfa8c673cb29b16d","html_url":"https://github.com/apache/openjpa/commit/fe50bbe648c954f4990f8e0cbfa8c673cb29b16d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe50bbe648c954f4990f8e0cbfa8c673cb29b16d/comments","author":null,"committer":null,"parents":[{"sha":"6c1b918371d9a9650ccd5be531ce00f832f0a7b7","url":"https://api.github.com/repos/apache/openjpa/commits/6c1b918371d9a9650ccd5be531ce00f832f0a7b7","html_url":"https://github.com/apache/openjpa/commit/6c1b918371d9a9650ccd5be531ce00f832f0a7b7"}]},{"sha":"3412d7df07551ba515534e110267628a60f86e80","node_id":"MDY6Q29tbWl0MjA2MzY0OjM0MTJkN2RmMDc1NTFiYTUxNTUzNGUxMTAyNjc2MjhhNjBmODZlODA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-08T15:41:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-08T15:41:25Z"},"message":"OPENJPA-397\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@582852 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c70b2c53c1dd95ddf944b78bb2347ac92a31c96","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c70b2c53c1dd95ddf944b78bb2347ac92a31c96"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3412d7df07551ba515534e110267628a60f86e80","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3412d7df07551ba515534e110267628a60f86e80","html_url":"https://github.com/apache/openjpa/commit/3412d7df07551ba515534e110267628a60f86e80","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3412d7df07551ba515534e110267628a60f86e80/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"fe50bbe648c954f4990f8e0cbfa8c673cb29b16d","url":"https://api.github.com/repos/apache/openjpa/commits/fe50bbe648c954f4990f8e0cbfa8c673cb29b16d","html_url":"https://github.com/apache/openjpa/commit/fe50bbe648c954f4990f8e0cbfa8c673cb29b16d"}]},{"sha":"bc8dfab419eb81195c132f3d49a913500e2e09e6","node_id":"MDY6Q29tbWl0MjA2MzY0OmJjOGRmYWI0MTllYjgxMTk1YzEzMmYzZDQ5YTkxMzUwMGUyZTA5ZTY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-08T21:06:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-08T21:06:45Z"},"message":"OPENJPA-396.  Going ahead with the commit of the patch.  Per the discussion in the Issue and the dev mailing list, I have added a few more comments to the clone() generation.  Thanks.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@582974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97222e6bafab8cb7c21a721b7fe5b8c6723ce9ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/97222e6bafab8cb7c21a721b7fe5b8c6723ce9ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6","html_url":"https://github.com/apache/openjpa/commit/bc8dfab419eb81195c132f3d49a913500e2e09e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6/comments","author":null,"committer":null,"parents":[{"sha":"3412d7df07551ba515534e110267628a60f86e80","url":"https://api.github.com/repos/apache/openjpa/commits/3412d7df07551ba515534e110267628a60f86e80","html_url":"https://github.com/apache/openjpa/commit/3412d7df07551ba515534e110267628a60f86e80"}]},{"sha":"008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwOGFjNzNkN2NmZDFhZDU5NDNmN2QwMzZlMTY4YzdiOWIyYjQ0Nzg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-12T15:49:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-12T15:49:00Z"},"message":"OPENJPA-401\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@584192 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7f2b32934738f7383a3a4c1df55416197804d401","url":"https://api.github.com/repos/apache/openjpa/git/trees/7f2b32934738f7383a3a4c1df55416197804d401"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","html_url":"https://github.com/apache/openjpa/commit/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","comments_url":"https://api.github.com/repos/apache/openjpa/commits/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bc8dfab419eb81195c132f3d49a913500e2e09e6","url":"https://api.github.com/repos/apache/openjpa/commits/bc8dfab419eb81195c132f3d49a913500e2e09e6","html_url":"https://github.com/apache/openjpa/commit/bc8dfab419eb81195c132f3d49a913500e2e09e6"}]},{"sha":"3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMmI4NzhkMGE2ODZhZTIyZDZkYzVkN2E2MjZlMWU1NDRlOWQ3NWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-12T23:50:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-12T23:50:55Z"},"message":"OPENJPA-399 committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@584337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0060f75748ee85385565b06c27173a014b0c18d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/0060f75748ee85385565b06c27173a014b0c18d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","html_url":"https://github.com/apache/openjpa/commit/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","url":"https://api.github.com/repos/apache/openjpa/commits/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","html_url":"https://github.com/apache/openjpa/commit/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478"}]},{"sha":"9e807991b062850bbc958913cc09bdae47852698","node_id":"MDY6Q29tbWl0MjA2MzY0OjllODA3OTkxYjA2Mjg1MGJiYzk1ODkxM2NjMDliZGFlNDc4NTI2OTg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-13T00:35:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-13T00:35:12Z"},"message":"OPENJPA-399 Committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@584350 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06ead7b9863f8e7c30f139088185614a744d9005","url":"https://api.github.com/repos/apache/openjpa/git/trees/06ead7b9863f8e7c30f139088185614a744d9005"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e807991b062850bbc958913cc09bdae47852698","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e807991b062850bbc958913cc09bdae47852698","html_url":"https://github.com/apache/openjpa/commit/9e807991b062850bbc958913cc09bdae47852698","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e807991b062850bbc958913cc09bdae47852698/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","url":"https://api.github.com/repos/apache/openjpa/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","html_url":"https://github.com/apache/openjpa/commit/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d"}]},{"sha":"2956c90a84ee947dbb91b3347f1a9e35bf910d95","node_id":"MDY6Q29tbWl0MjA2MzY0OjI5NTZjOTBhODRlZTk0N2RiYjkxYjMzNDdmMWE5ZTM1YmY5MTBkOTU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-13T15:47:47Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-13T15:47:47Z"},"message":"OPENJPA-402 Complete .class file read in ZipFileMetaDataIterator\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@584415 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4ecd87e9a1082dc5a9bd2539ac85878b61b0c58f","url":"https://api.github.com/repos/apache/openjpa/git/trees/4ecd87e9a1082dc5a9bd2539ac85878b61b0c58f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2956c90a84ee947dbb91b3347f1a9e35bf910d95","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2956c90a84ee947dbb91b3347f1a9e35bf910d95","html_url":"https://github.com/apache/openjpa/commit/2956c90a84ee947dbb91b3347f1a9e35bf910d95","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2956c90a84ee947dbb91b3347f1a9e35bf910d95/comments","author":null,"committer":null,"parents":[{"sha":"9e807991b062850bbc958913cc09bdae47852698","url":"https://api.github.com/repos/apache/openjpa/commits/9e807991b062850bbc958913cc09bdae47852698","html_url":"https://github.com/apache/openjpa/commit/9e807991b062850bbc958913cc09bdae47852698"}]},{"sha":"fa8097cf5590bca2a1f4a8134756a577b85873ad","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhODA5N2NmNTU5MGJjYTJhMWY0YTgxMzQ3NTZhNTc3Yjg1ODczYWQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-16T21:47:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-16T21:47:39Z"},"message":"OPENJPA-405.  Dropping Teresa's patch for trunk and 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@585269 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2c1daab2f752a1f164276cabda57b0fe527772d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2c1daab2f752a1f164276cabda57b0fe527772d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fa8097cf5590bca2a1f4a8134756a577b85873ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fa8097cf5590bca2a1f4a8134756a577b85873ad","html_url":"https://github.com/apache/openjpa/commit/fa8097cf5590bca2a1f4a8134756a577b85873ad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fa8097cf5590bca2a1f4a8134756a577b85873ad/comments","author":null,"committer":null,"parents":[{"sha":"2956c90a84ee947dbb91b3347f1a9e35bf910d95","url":"https://api.github.com/repos/apache/openjpa/commits/2956c90a84ee947dbb91b3347f1a9e35bf910d95","html_url":"https://github.com/apache/openjpa/commit/2956c90a84ee947dbb91b3347f1a9e35bf910d95"}]},{"sha":"261cb3b549be59628f122c2d95b4b3cebb8cc47b","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2MWNiM2I1NDliZTU5NjI4ZjEyMmMyZDk1YjRiM2NlYmI4Y2M0N2I=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T01:30:28Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T01:30:28Z"},"message":"OPENJPA-409.  Message update.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@585773 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e1d92f7ef30d254e06f4ea60142dd2ee4d0e0771","url":"https://api.github.com/repos/apache/openjpa/git/trees/e1d92f7ef30d254e06f4ea60142dd2ee4d0e0771"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/261cb3b549be59628f122c2d95b4b3cebb8cc47b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/261cb3b549be59628f122c2d95b4b3cebb8cc47b","html_url":"https://github.com/apache/openjpa/commit/261cb3b549be59628f122c2d95b4b3cebb8cc47b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/261cb3b549be59628f122c2d95b4b3cebb8cc47b/comments","author":null,"committer":null,"parents":[{"sha":"fa8097cf5590bca2a1f4a8134756a577b85873ad","url":"https://api.github.com/repos/apache/openjpa/commits/fa8097cf5590bca2a1f4a8134756a577b85873ad","html_url":"https://github.com/apache/openjpa/commit/fa8097cf5590bca2a1f4a8134756a577b85873ad"}]},{"sha":"548a483a04713cfd5aba3e5a1d44a263ca7a7461","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0OGE0ODNhMDQ3MTNjZmQ1YWJhM2U1YTFkNDRhMjYzY2E3YTc0NjE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T01:37:58Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T01:37:58Z"},"message":"OPENJPA-399.  Committing Teresa's most recent patch for this Issue.  Should be ready for resolution now.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@585774 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d1e40e41e9bfe8caefac6d62753585d311a7d6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d1e40e41e9bfe8caefac6d62753585d311a7d6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461","html_url":"https://github.com/apache/openjpa/commit/548a483a04713cfd5aba3e5a1d44a263ca7a7461","comments_url":"https://api.github.com/repos/apache/openjpa/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461/comments","author":null,"committer":null,"parents":[{"sha":"261cb3b549be59628f122c2d95b4b3cebb8cc47b","url":"https://api.github.com/repos/apache/openjpa/commits/261cb3b549be59628f122c2d95b4b3cebb8cc47b","html_url":"https://github.com/apache/openjpa/commit/261cb3b549be59628f122c2d95b4b3cebb8cc47b"}]},{"sha":"ebea29dc04f10f14440399cc5847f087b4838efd","node_id":"MDY6Q29tbWl0MjA2MzY0OmViZWEyOWRjMDRmMTBmMTQ0NDAzOTljYzU4NDdmMDg3YjQ4MzhlZmQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T15:31:56Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T15:31:56Z"},"message":"OPENJPA-403.  Committing Teresa's patch for the 1.0.1 version of Patrick's fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@586007 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c14f45c0b57d4b1d229a953b4658bfcc493f04a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/c14f45c0b57d4b1d229a953b4658bfcc493f04a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ebea29dc04f10f14440399cc5847f087b4838efd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ebea29dc04f10f14440399cc5847f087b4838efd","html_url":"https://github.com/apache/openjpa/commit/ebea29dc04f10f14440399cc5847f087b4838efd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ebea29dc04f10f14440399cc5847f087b4838efd/comments","author":null,"committer":null,"parents":[{"sha":"548a483a04713cfd5aba3e5a1d44a263ca7a7461","url":"https://api.github.com/repos/apache/openjpa/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461","html_url":"https://github.com/apache/openjpa/commit/548a483a04713cfd5aba3e5a1d44a263ca7a7461"}]},{"sha":"215efaa6361eee42362e25dad964142b9d717818","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxNWVmYWE2MzYxZWVlNDIzNjJlMjVkYWQ5NjQxNDJiOWQ3MTc4MTg=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-19T19:36:21Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-19T19:36:21Z"},"message":"Minor update to doc to fix up a reference tag.  Question marks (???) were being displayed instead of the section reference.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@586587 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d22ae166209f83e1b14cf3efa373a52907f6a6eb","url":"https://api.github.com/repos/apache/openjpa/git/trees/d22ae166209f83e1b14cf3efa373a52907f6a6eb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/215efaa6361eee42362e25dad964142b9d717818","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/215efaa6361eee42362e25dad964142b9d717818","html_url":"https://github.com/apache/openjpa/commit/215efaa6361eee42362e25dad964142b9d717818","comments_url":"https://api.github.com/repos/apache/openjpa/commits/215efaa6361eee42362e25dad964142b9d717818/comments","author":null,"committer":null,"parents":[{"sha":"ebea29dc04f10f14440399cc5847f087b4838efd","url":"https://api.github.com/repos/apache/openjpa/commits/ebea29dc04f10f14440399cc5847f087b4838efd","html_url":"https://github.com/apache/openjpa/commit/ebea29dc04f10f14440399cc5847f087b4838efd"}]},{"sha":"a94a55d00bd5b2a2f9fc266920a9a3115538179b","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5NGE1NWQwMGJkNWIyYTJmOWZjMjY2OTIwYTlhMzExNTUzODE3OWI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-19T19:37:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-19T19:37:44Z"},"message":"OPENJPA-410.  Committing the change to make the \"connecting to database\" message a Trace message instead of an Info message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@586588 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1dc4d02111e794f5ba3896c5133cff7e46ce3478","url":"https://api.github.com/repos/apache/openjpa/git/trees/1dc4d02111e794f5ba3896c5133cff7e46ce3478"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a94a55d00bd5b2a2f9fc266920a9a3115538179b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a94a55d00bd5b2a2f9fc266920a9a3115538179b","html_url":"https://github.com/apache/openjpa/commit/a94a55d00bd5b2a2f9fc266920a9a3115538179b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a94a55d00bd5b2a2f9fc266920a9a3115538179b/comments","author":null,"committer":null,"parents":[{"sha":"215efaa6361eee42362e25dad964142b9d717818","url":"https://api.github.com/repos/apache/openjpa/commits/215efaa6361eee42362e25dad964142b9d717818","html_url":"https://github.com/apache/openjpa/commit/215efaa6361eee42362e25dad964142b9d717818"}]},{"sha":"2491c0b66a3e0593e070dd78ef043d0a96310480","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0OTFjMGI2NmEzZTA1OTNlMDcwZGQ3OGVmMDQzZDBhOTYzMTA0ODA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-20T16:17:47Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-20T16:17:47Z"},"message":"Typo in my doc markup.  Fixing the build break.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@586756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ecad185a06ba483924d73df05f01f6cc922455d3","url":"https://api.github.com/repos/apache/openjpa/git/trees/ecad185a06ba483924d73df05f01f6cc922455d3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2491c0b66a3e0593e070dd78ef043d0a96310480","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2491c0b66a3e0593e070dd78ef043d0a96310480","html_url":"https://github.com/apache/openjpa/commit/2491c0b66a3e0593e070dd78ef043d0a96310480","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2491c0b66a3e0593e070dd78ef043d0a96310480/comments","author":null,"committer":null,"parents":[{"sha":"a94a55d00bd5b2a2f9fc266920a9a3115538179b","url":"https://api.github.com/repos/apache/openjpa/commits/a94a55d00bd5b2a2f9fc266920a9a3115538179b","html_url":"https://github.com/apache/openjpa/commit/a94a55d00bd5b2a2f9fc266920a9a3115538179b"}]},{"sha":"546c34abd1bb05ef0f6b01e016b6fd5c0d646644","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0NmMzNGFiZDFiYjA1ZWYwZjZiMDFlMDE2YjZmZDVjMGQ2NDY2NDQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-23T22:48:48Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-23T22:48:48Z"},"message":"OPENJPA-413, commit localizer.properties files for Teresa.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@587683 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"537827fa8dd07028ccd01821a11433d421d05e61","url":"https://api.github.com/repos/apache/openjpa/git/trees/537827fa8dd07028ccd01821a11433d421d05e61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/546c34abd1bb05ef0f6b01e016b6fd5c0d646644","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/546c34abd1bb05ef0f6b01e016b6fd5c0d646644","html_url":"https://github.com/apache/openjpa/commit/546c34abd1bb05ef0f6b01e016b6fd5c0d646644","comments_url":"https://api.github.com/repos/apache/openjpa/commits/546c34abd1bb05ef0f6b01e016b6fd5c0d646644/comments","author":null,"committer":null,"parents":[{"sha":"2491c0b66a3e0593e070dd78ef043d0a96310480","url":"https://api.github.com/repos/apache/openjpa/commits/2491c0b66a3e0593e070dd78ef043d0a96310480","html_url":"https://github.com/apache/openjpa/commit/2491c0b66a3e0593e070dd78ef043d0a96310480"}]},{"sha":"71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxZGMzYWQzNGQzZmMyZWY4MDE4NmFjNWQ2OGI5MTAzZmNmZmYxZjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T04:13:07Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T04:13:07Z"},"message":"OPENJPA-113\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@587774 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c9d9e13f72f9a8fee863860af35003663e425551","url":"https://api.github.com/repos/apache/openjpa/git/trees/c9d9e13f72f9a8fee863860af35003663e425551"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8","html_url":"https://github.com/apache/openjpa/commit/71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"546c34abd1bb05ef0f6b01e016b6fd5c0d646644","url":"https://api.github.com/repos/apache/openjpa/commits/546c34abd1bb05ef0f6b01e016b6fd5c0d646644","html_url":"https://github.com/apache/openjpa/commit/546c34abd1bb05ef0f6b01e016b6fd5c0d646644"}]},{"sha":"b4e48abb3ace9cff2678ea9f0708b4b1720140f5","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0ZTQ4YWJiM2FjZTljZmYyNjc4ZWE5ZjA3MDhiNGIxNzIwMTQwZjU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T17:42:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T17:42:19Z"},"message":"specify version for javacc plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@587937 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6e9053123e6894fc36cb5e0890491eaed3ca60d","url":"https://api.github.com/repos/apache/openjpa/git/trees/a6e9053123e6894fc36cb5e0890491eaed3ca60d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4e48abb3ace9cff2678ea9f0708b4b1720140f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4e48abb3ace9cff2678ea9f0708b4b1720140f5","html_url":"https://github.com/apache/openjpa/commit/b4e48abb3ace9cff2678ea9f0708b4b1720140f5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4e48abb3ace9cff2678ea9f0708b4b1720140f5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8","url":"https://api.github.com/repos/apache/openjpa/commits/71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8","html_url":"https://github.com/apache/openjpa/commit/71dc3ad34d3fc2ef80186ac5d68b9103fcfff1f8"}]},{"sha":"c450bb60da10d2912afe0a476a3bd355f8a45789","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NTBiYjYwZGExMGQyOTEyYWZlMGE0NzZhM2JkMzU1ZjhhNDU3ODk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T18:08:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T18:08:23Z"},"message":"OPENJPA-416\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@587942 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ad4ab71924d1ac161c13a7da08d29e90422dbe5","url":"https://api.github.com/repos/apache/openjpa/git/trees/6ad4ab71924d1ac161c13a7da08d29e90422dbe5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c450bb60da10d2912afe0a476a3bd355f8a45789","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c450bb60da10d2912afe0a476a3bd355f8a45789","html_url":"https://github.com/apache/openjpa/commit/c450bb60da10d2912afe0a476a3bd355f8a45789","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c450bb60da10d2912afe0a476a3bd355f8a45789/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4e48abb3ace9cff2678ea9f0708b4b1720140f5","url":"https://api.github.com/repos/apache/openjpa/commits/b4e48abb3ace9cff2678ea9f0708b4b1720140f5","html_url":"https://github.com/apache/openjpa/commit/b4e48abb3ace9cff2678ea9f0708b4b1720140f5"}]},{"sha":"d4c2a2f77c9a636200297254e2f7c4ac63e45617","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0YzJhMmY3N2M5YTYzNjIwMDI5NzI1NGUyZjdjNGFjNjNlNDU2MTc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T20:22:40Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T20:22:40Z"},"message":"OPENJPA-413 committing for Teresa\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@588002 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"022c9b2e979fbc8f4a74ac6f57b1d508ac768434","url":"https://api.github.com/repos/apache/openjpa/git/trees/022c9b2e979fbc8f4a74ac6f57b1d508ac768434"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d4c2a2f77c9a636200297254e2f7c4ac63e45617","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d4c2a2f77c9a636200297254e2f7c4ac63e45617","html_url":"https://github.com/apache/openjpa/commit/d4c2a2f77c9a636200297254e2f7c4ac63e45617","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d4c2a2f77c9a636200297254e2f7c4ac63e45617/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c450bb60da10d2912afe0a476a3bd355f8a45789","url":"https://api.github.com/repos/apache/openjpa/commits/c450bb60da10d2912afe0a476a3bd355f8a45789","html_url":"https://github.com/apache/openjpa/commit/c450bb60da10d2912afe0a476a3bd355f8a45789"}]},{"sha":"18502c72cae6c46044c8084495d036314948f9bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4NTAyYzcyY2FlNmM0NjA0NGM4MDg0NDk1ZDAzNjMxNDk0OGY5YmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T21:18:28Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-24T21:18:28Z"},"message":"Port 570487 to 1.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@588032 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f152a9d014fa2068088fdc48517bd93e38e0f959","url":"https://api.github.com/repos/apache/openjpa/git/trees/f152a9d014fa2068088fdc48517bd93e38e0f959"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18502c72cae6c46044c8084495d036314948f9bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18502c72cae6c46044c8084495d036314948f9bc","html_url":"https://github.com/apache/openjpa/commit/18502c72cae6c46044c8084495d036314948f9bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18502c72cae6c46044c8084495d036314948f9bc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d4c2a2f77c9a636200297254e2f7c4ac63e45617","url":"https://api.github.com/repos/apache/openjpa/commits/d4c2a2f77c9a636200297254e2f7c4ac63e45617","html_url":"https://github.com/apache/openjpa/commit/d4c2a2f77c9a636200297254e2f7c4ac63e45617"}]},{"sha":"38ca258bc0e3e405877c1017b0915eb28a9408f5","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4Y2EyNThiYzBlM2U0MDU4NzdjMTAxN2IwOTE1ZWIyOGE5NDA4ZjU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-25T00:04:51Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-25T00:04:51Z"},"message":"OPENJPA-415 remove AbstractResultList.finalize() method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@588089 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f0be75e30d7e953ab952b20db6601146607da477","url":"https://api.github.com/repos/apache/openjpa/git/trees/f0be75e30d7e953ab952b20db6601146607da477"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38ca258bc0e3e405877c1017b0915eb28a9408f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38ca258bc0e3e405877c1017b0915eb28a9408f5","html_url":"https://github.com/apache/openjpa/commit/38ca258bc0e3e405877c1017b0915eb28a9408f5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38ca258bc0e3e405877c1017b0915eb28a9408f5/comments","author":null,"committer":null,"parents":[{"sha":"18502c72cae6c46044c8084495d036314948f9bc","url":"https://api.github.com/repos/apache/openjpa/commits/18502c72cae6c46044c8084495d036314948f9bc","html_url":"https://github.com/apache/openjpa/commit/18502c72cae6c46044c8084495d036314948f9bc"}]},{"sha":"b291cd7223862c71dc72d77a57a1b55af20f46af","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyOTFjZDcyMjM4NjJjNzFkYzcyZDc3YTU3YTFiNTVhZjIwZjQ2YWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-25T02:18:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-25T02:18:42Z"},"message":"OPENJPA-413 revised message\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@588114 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f7e86a76969ec5dfbaf34713b06a6272eb9697cf","url":"https://api.github.com/repos/apache/openjpa/git/trees/f7e86a76969ec5dfbaf34713b06a6272eb9697cf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b291cd7223862c71dc72d77a57a1b55af20f46af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b291cd7223862c71dc72d77a57a1b55af20f46af","html_url":"https://github.com/apache/openjpa/commit/b291cd7223862c71dc72d77a57a1b55af20f46af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b291cd7223862c71dc72d77a57a1b55af20f46af/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"38ca258bc0e3e405877c1017b0915eb28a9408f5","url":"https://api.github.com/repos/apache/openjpa/commits/38ca258bc0e3e405877c1017b0915eb28a9408f5","html_url":"https://github.com/apache/openjpa/commit/38ca258bc0e3e405877c1017b0915eb28a9408f5"}]},{"sha":"da5d28cb1a032c0db75c0f4cdf5774428393e11e","node_id":"MDY6Q29tbWl0MjA2MzY0OmRhNWQyOGNiMWEwMzJjMGRiNzVjMGY0Y2RmNTc3NDQyODM5M2UxMWU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-27T20:18:56Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-27T20:18:56Z"},"message":"OPENJPA-422.  The reproxy() method needed the Calendar object type in it's switch statement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@589207 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3149d56e59502dda87128b7eff5ce6f9df2e86dc","url":"https://api.github.com/repos/apache/openjpa/git/trees/3149d56e59502dda87128b7eff5ce6f9df2e86dc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/da5d28cb1a032c0db75c0f4cdf5774428393e11e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/da5d28cb1a032c0db75c0f4cdf5774428393e11e","html_url":"https://github.com/apache/openjpa/commit/da5d28cb1a032c0db75c0f4cdf5774428393e11e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/da5d28cb1a032c0db75c0f4cdf5774428393e11e/comments","author":null,"committer":null,"parents":[{"sha":"b291cd7223862c71dc72d77a57a1b55af20f46af","url":"https://api.github.com/repos/apache/openjpa/commits/b291cd7223862c71dc72d77a57a1b55af20f46af","html_url":"https://github.com/apache/openjpa/commit/b291cd7223862c71dc72d77a57a1b55af20f46af"}]},{"sha":"c5ff10a1413103ea2b9ba734e615d7cd7656b337","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1ZmYxMGExNDEzMTAzZWEyYjliYTczNGU2MTVkN2NkNzY1NmIzMzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T15:47:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T15:47:50Z"},"message":"OPENJPA-423\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@589694 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e211591b76f4aae4855f7a79cbf6413a47c430af","url":"https://api.github.com/repos/apache/openjpa/git/trees/e211591b76f4aae4855f7a79cbf6413a47c430af"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c5ff10a1413103ea2b9ba734e615d7cd7656b337","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c5ff10a1413103ea2b9ba734e615d7cd7656b337","html_url":"https://github.com/apache/openjpa/commit/c5ff10a1413103ea2b9ba734e615d7cd7656b337","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c5ff10a1413103ea2b9ba734e615d7cd7656b337/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"da5d28cb1a032c0db75c0f4cdf5774428393e11e","url":"https://api.github.com/repos/apache/openjpa/commits/da5d28cb1a032c0db75c0f4cdf5774428393e11e","html_url":"https://github.com/apache/openjpa/commit/da5d28cb1a032c0db75c0f4cdf5774428393e11e"}]},{"sha":"446a0e054324407a7e83166a7f91263a07a20941","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0NmEwZTA1NDMyNDQwN2E3ZTgzMTY2YTdmOTEyNjNhMDdhMjA5NDE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-29T16:23:17Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-29T16:23:17Z"},"message":"OPENJPA-421.  Committing Daniel's changes to ensure that the datasource configuration is complete before attempting to generate SQL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@589723 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"73b0463ff5a6af3c96674af449ceda762e4cac15","url":"https://api.github.com/repos/apache/openjpa/git/trees/73b0463ff5a6af3c96674af449ceda762e4cac15"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/446a0e054324407a7e83166a7f91263a07a20941","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/446a0e054324407a7e83166a7f91263a07a20941","html_url":"https://github.com/apache/openjpa/commit/446a0e054324407a7e83166a7f91263a07a20941","comments_url":"https://api.github.com/repos/apache/openjpa/commits/446a0e054324407a7e83166a7f91263a07a20941/comments","author":null,"committer":null,"parents":[{"sha":"c5ff10a1413103ea2b9ba734e615d7cd7656b337","url":"https://api.github.com/repos/apache/openjpa/commits/c5ff10a1413103ea2b9ba734e615d7cd7656b337","html_url":"https://github.com/apache/openjpa/commit/c5ff10a1413103ea2b9ba734e615d7cd7656b337"}]},{"sha":"38607842164f59a131fd4862fc41958653df6f92","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4NjA3ODQyMTY0ZjU5YTEzMWZkNDg2MmZjNDE5NTg2NTNkZjZmOTI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T18:21:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T18:21:56Z"},"message":"OPENJPA-399 committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@589784 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"531288fe455e94535c3b8382a18f8289265a31d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/531288fe455e94535c3b8382a18f8289265a31d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38607842164f59a131fd4862fc41958653df6f92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38607842164f59a131fd4862fc41958653df6f92","html_url":"https://github.com/apache/openjpa/commit/38607842164f59a131fd4862fc41958653df6f92","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38607842164f59a131fd4862fc41958653df6f92/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"446a0e054324407a7e83166a7f91263a07a20941","url":"https://api.github.com/repos/apache/openjpa/commits/446a0e054324407a7e83166a7f91263a07a20941","html_url":"https://github.com/apache/openjpa/commit/446a0e054324407a7e83166a7f91263a07a20941"}]},{"sha":"2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1NDhjY2U3ZWNkMWEzZjYwYTJmZGFkOWQ3N2U2YzQzNTljMzc1ZWE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-29T19:46:32Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-29T19:46:32Z"},"message":"OpenJPA Release 1.0.1 branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@589825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"531288fe455e94535c3b8382a18f8289265a31d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/531288fe455e94535c3b8382a18f8289265a31d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea","html_url":"https://github.com/apache/openjpa/commit/2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea/comments","author":null,"committer":null,"parents":[{"sha":"38607842164f59a131fd4862fc41958653df6f92","url":"https://api.github.com/repos/apache/openjpa/commits/38607842164f59a131fd4862fc41958653df6f92","html_url":"https://github.com/apache/openjpa/commit/38607842164f59a131fd4862fc41958653df6f92"}]},{"sha":"e727e9ab4d747ce255a1dd78cd862a8802240b70","node_id":"MDY6Q29tbWl0MjA2MzY0OmU3MjdlOWFiNGQ3NDdjZTI1NWExZGQ3OGNkODYyYTg4MDIyNDBiNzA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-29T23:00:58Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-29T23:00:58Z"},"message":"1.0.1 Release Updates\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@589901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75442fa2f9357e1f07586fe55e70a02792ad8ddc","url":"https://api.github.com/repos/apache/openjpa/git/trees/75442fa2f9357e1f07586fe55e70a02792ad8ddc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e727e9ab4d747ce255a1dd78cd862a8802240b70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e727e9ab4d747ce255a1dd78cd862a8802240b70","html_url":"https://github.com/apache/openjpa/commit/e727e9ab4d747ce255a1dd78cd862a8802240b70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e727e9ab4d747ce255a1dd78cd862a8802240b70/comments","author":null,"committer":null,"parents":[{"sha":"2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea","url":"https://api.github.com/repos/apache/openjpa/commits/2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea","html_url":"https://github.com/apache/openjpa/commit/2548cce7ecd1a3f60a2fdad9d77e6c4359c375ea"}]},{"sha":"c445da483f7efcf4489d7d28300c020f4905e69e","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NDVkYTQ4M2Y3ZWZjZjQ0ODlkN2QyODMwMGMwMjBmNDkwNWU2OWU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-31T18:27:31Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-31T18:27:31Z"},"message":"OPENJPA-375: commit for Catalina in 101 release. Undo this fix for DB2 (result set closed problem). The problem is resolved by setting DB2 datasource custom property \"resultSetHoldability\"  to 1 in WebSphere.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@590779 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ffbee7d578c3e4beb772262e86f46c2ff8a06646","url":"https://api.github.com/repos/apache/openjpa/git/trees/ffbee7d578c3e4beb772262e86f46c2ff8a06646"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c445da483f7efcf4489d7d28300c020f4905e69e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c445da483f7efcf4489d7d28300c020f4905e69e","html_url":"https://github.com/apache/openjpa/commit/c445da483f7efcf4489d7d28300c020f4905e69e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c445da483f7efcf4489d7d28300c020f4905e69e/comments","author":null,"committer":null,"parents":[{"sha":"e727e9ab4d747ce255a1dd78cd862a8802240b70","url":"https://api.github.com/repos/apache/openjpa/commits/e727e9ab4d747ce255a1dd78cd862a8802240b70","html_url":"https://github.com/apache/openjpa/commit/e727e9ab4d747ce255a1dd78cd862a8802240b70"}]},{"sha":"72a71f6c3cf94c02b3def59b4aa5b8759d26d923","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyYTcxZjZjM2NmOTRjMDJiM2RlZjU5YjRhYTViODc1OWQyNmQ5MjM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-31T21:46:53Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-31T21:46:53Z"},"message":"Add new committers to the top level pom.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@590847 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d07f400e172efe866949ac25e1931a6d065200b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/d07f400e172efe866949ac25e1931a6d065200b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72a71f6c3cf94c02b3def59b4aa5b8759d26d923","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72a71f6c3cf94c02b3def59b4aa5b8759d26d923","html_url":"https://github.com/apache/openjpa/commit/72a71f6c3cf94c02b3def59b4aa5b8759d26d923","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72a71f6c3cf94c02b3def59b4aa5b8759d26d923/comments","author":null,"committer":null,"parents":[{"sha":"c445da483f7efcf4489d7d28300c020f4905e69e","url":"https://api.github.com/repos/apache/openjpa/commits/c445da483f7efcf4489d7d28300c020f4905e69e","html_url":"https://github.com/apache/openjpa/commit/c445da483f7efcf4489d7d28300c020f4905e69e"}]},{"sha":"4062c3e9c8280572cd991eb84c4b170787ef8a60","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwNjJjM2U5YzgyODA1NzJjZDk5MWViODRjNGIxNzA3ODdlZjhhNjA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-01T03:22:21Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-01T03:22:21Z"},"message":"Update scm.dir in top level pom.xml for 1.0.1 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@590880 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64bc69bd02be78155697e6a1be2c7e8f1c662816","url":"https://api.github.com/repos/apache/openjpa/git/trees/64bc69bd02be78155697e6a1be2c7e8f1c662816"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4062c3e9c8280572cd991eb84c4b170787ef8a60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4062c3e9c8280572cd991eb84c4b170787ef8a60","html_url":"https://github.com/apache/openjpa/commit/4062c3e9c8280572cd991eb84c4b170787ef8a60","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4062c3e9c8280572cd991eb84c4b170787ef8a60/comments","author":null,"committer":null,"parents":[{"sha":"72a71f6c3cf94c02b3def59b4aa5b8759d26d923","url":"https://api.github.com/repos/apache/openjpa/commits/72a71f6c3cf94c02b3def59b4aa5b8759d26d923","html_url":"https://github.com/apache/openjpa/commit/72a71f6c3cf94c02b3def59b4aa5b8759d26d923"}]},{"sha":"1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiN2I3Y2U0ODMzYzYwZDc3ZmMxNzk0OTc3YjVlZGQ0MTIyZjRiZDI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-11-02T15:29:38Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-11-02T15:29:38Z"},"message":"OPENJPA-370.  Reverting this change for the 1.0.1 release as well (since that release was cut before we made this decision to back out the changes).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@591364 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e90d9892ee4ceb0d29d286058d2f524dc502f4ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/e90d9892ee4ceb0d29d286058d2f524dc502f4ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","html_url":"https://github.com/apache/openjpa/commit/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2/comments","author":null,"committer":null,"parents":[{"sha":"4062c3e9c8280572cd991eb84c4b170787ef8a60","url":"https://api.github.com/repos/apache/openjpa/commits/4062c3e9c8280572cd991eb84c4b170787ef8a60","html_url":"https://github.com/apache/openjpa/commit/4062c3e9c8280572cd991eb84c4b170787ef8a60"}]},{"sha":"093c9c3ec2da31183bca5ef71c023b871a967fd9","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5M2M5YzNlYzJkYTMxMTgzYmNhNWVmNzFjMDIzYjg3MWE5NjdmZDk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-05T20:36:38Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-05T20:36:38Z"},"message":"Remove OPENJPA-370 from CHANGES.txt and RELEASE-NOTES.html.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@592145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"874b9e1c07a84b7454cf60ab7382d24d905a87f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/874b9e1c07a84b7454cf60ab7382d24d905a87f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/093c9c3ec2da31183bca5ef71c023b871a967fd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/093c9c3ec2da31183bca5ef71c023b871a967fd9","html_url":"https://github.com/apache/openjpa/commit/093c9c3ec2da31183bca5ef71c023b871a967fd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/093c9c3ec2da31183bca5ef71c023b871a967fd9/comments","author":null,"committer":null,"parents":[{"sha":"1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","url":"https://api.github.com/repos/apache/openjpa/commits/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","html_url":"https://github.com/apache/openjpa/commit/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2"}]}],"files":[{"sha":"45e21cad0a0b6bf06de6972c712c9c84dfd5dfc9","filename":"openjpa-all/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -28,10 +28,10 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <properties>\n-        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk/openjpa-all</scm.dir>\n+        <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.x/openjpa-all</scm.dir>\n     </properties>\n \n     <scm>"},{"sha":"79ccb1f6dae487568b663646469ba00f4149fda8","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"bd7f83c7a7a3b4a6010948e01e7ddf817a29efd3","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -37,7 +37,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n \n     <profiles>"},{"sha":"4e161367ba370823a57c762b02a61c40a5d9f403","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -28,7 +28,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"e9ce0ceb44234662ec4d26f9b145455458643038","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -55,7 +55,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n \n     <profiles>"},{"sha":"3158d4366536bd7edecf71ac3a4d99004292bad7","filename":"openjpa-jdbc-5/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"cadeabac1ef24bf988aec19af12c0ead8e8d7448","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <profiles>\n         <profile>"},{"sha":"0c9e9509229df8b0b72f7e2255b26aac319849db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -176,7 +176,10 @@ protected void executeOn(String[] files)\n         if (MappingTool.ACTION_IMPORT.equals(flags.action))\n             assertFiles(files);\n \n-        ClassLoader loader = getClassLoader();\n+        ClassLoader loader =\n+            (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                    .newTemporaryClassLoaderAction(getClassLoader()));\n+        \n         if (flags.meta && MappingTool.ACTION_ADD.equals(flags.action))\n             flags.metaDataFile = Files.getFile(file, loader);\n         else\n@@ -185,12 +188,12 @@ protected void executeOn(String[] files)\n         flags.sqlWriter = Files.getWriter(sqlFile, loader);\n \n         MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n-        resolver.addClassLoader(loader);\n         resolver.addClassLoader((ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(MappingTool.class)));\n+        resolver.addClassLoader(loader);\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         conf.setClassResolver(resolver);\n-\n+        \n         if (!MappingTool.run(conf, files, flags, loader))\n             throw new BuildException(_loc.get(\"bad-conf\", \"MappingToolTask\")\n                 .getMessage());"},{"sha":"cfe589a95be61c6ff1ffec4e95c0f8b17e12c7e7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -130,7 +130,8 @@ protected ConfigurationImpl newConfiguration() {\n \n     protected void executeOn(String[] files)\n         throws Exception {\n-        assertFiles(files);\n+        if (SchemaTool.ACTION_IMPORT.equals(flags.action))\n+            assertFiles(files);\n \n         ClassLoader loader = getClassLoader();\n         flags.writer = Files.getWriter(file, loader);"},{"sha":"3afeeba1325c6a901a2be9b0473b2af2e1bc79cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -555,10 +555,10 @@ public DBDictionary getDBDictionaryInstance() {\n                 // the DB and use the connection metadata\n                 if (dbdictionary == null) {\n                     Log log = getLog(LOG_JDBC);\n-                    if (log.isInfoEnabled()) {\n+                    if (log.isTraceEnabled()) {\n                         Localizer loc = Localizer.forPackage\n                             (JDBCConfigurationImpl.class);\n-                        log.info(loc.get(\"connecting-for-dictionary\"));\n+                        log.trace(loc.get(\"connecting-for-dictionary\"));\n                     }\n \n                     // use the base connection factory rather than the"},{"sha":"93b2279a47ea49f036e7f8f71512df9c4bff6e31","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -45,7 +45,7 @@\n \n     protected int type = TYPE_DEFAULT;\n     protected Object current = null;\n-    private transient Transaction _outerTransaction;\n+    private static ThreadLocal _outerTransaction = new ThreadLocal();\n \n     /**\n      * Records the sequence type.\n@@ -155,7 +155,7 @@ else if (suspendInJTA()) {\n             try {\n                 TransactionManager tm = getConfiguration()\n                     .getManagedRuntimeInstance().getTransactionManager();\n-                _outerTransaction = tm.suspend();\n+                _outerTransaction.set(tm.suspend());\n                 tm.begin();\n                 return store.getConnection();\n             } catch (Exception e) {\n@@ -188,13 +188,14 @@ protected void closeConnection(Connection conn) {\n                 tm.commit();\n                 try { conn.close(); } catch (SQLException se) {}\n \n-                if (_outerTransaction != null)\n-                    tm.resume(_outerTransaction);\n+                Transaction outerTxn = (Transaction)_outerTransaction.get();\n+                if (outerTxn != null)\n+                    tm.resume(outerTxn);\n \n             } catch (Exception e) {\n                 throw new StoreException(e);\n             } finally {\n-                _outerTransaction = null;\n+                _outerTransaction.set(null);\n             }\n         } else {\n             try {"},{"sha":"b444495a28baf2968f94aae8f6d0f4cf2640a6ef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -215,6 +215,9 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n                 paramList = Collections.EMPTY_LIST;\n \n             SQLBuffer buf = new SQLBuffer(dict).append(sql);\n+            \n+            // we need to make sure we have an active store connection\n+            store.getContext().beginStore();\n             Connection conn = store.getConnection();\n             JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)\n                 q.getContext().getFetchConfiguration();\n@@ -241,6 +244,8 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n                     try { stmnt.close(); } catch (SQLException se2) {}\n                 try { conn.close(); } catch (SQLException se2) {}\n                 throw SQLExceptions.getStore(se, dict);\n+            } finally {\n+                try { conn.close(); } catch (SQLException se) {}\n             }\n         }\n "},{"sha":"25b2bd67b1f5b7a2ff0c838708803c217eb715ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":67,"deletions":23,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -24,11 +24,13 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.HashMap;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Schema;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n@@ -77,14 +79,15 @@\n     private transient Log _log = null;\n     private int _alloc = 50;\n     private int _intValue = 1;\n-    private final Status _stat = new Status();\n+    private final HashMap _stat = new HashMap();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n+    private int _schemasIdx = 0;    \n \n     /**\n      * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n@@ -212,20 +215,36 @@ public void endConfiguration() {\n         buildTable();\n     }\n     \n-    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n-        // table already exists?\n-        if (group.isKnownTable(_table))\n-            return;\n \n-        String schemaName = Strings.getPackageName(_table);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n-\n-        // create table in this group\n-        Schema schema = group.getSchema(schemaName);\n-        if (schema == null)\n-            schema = group.addSchema(schemaName);\n-        schema.importTable(_pkColumn.getTable());\n+    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n+        // Since the table is created by openjpa internally\n+        // we can create the table for each schema within the PU\n+        // in here.\n+        \n+        Schema[] schemas = group.getSchemas();\n+        for (int i = 0; i < schemas.length; i++) {\n+            String schemaName = Strings.getPackageName(_table);\n+            if (schemaName.length() == 0)\n+                schemaName = Schemas.getNewTableSchema(_conf);\n+            if (schemaName == null)\n+                schemaName = schemas[i].getName();\n+\n+            // create table in this group\n+            Schema schema = group.getSchema(schemaName);\n+            if (schema == null)\n+                schema = group.addSchema(schemaName);\n+            \n+            schema.importTable(_pkColumn.getTable());\n+            // we need to reset the table name in the column with the\n+            // fully qualified name for matching the table name from the\n+            // Column.\n+            _pkColumn.resetTableName(schemaName + \".\"\n+                    + _pkColumn.getTableName());\n+            // some databases require to create an index for the sequence table\n+            _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n+                    _table, _pkColumn);\n+         \n+        }\n     }\n \n     protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n@@ -285,8 +304,14 @@ protected void allocateInternal(int count, JDBCStore store,\n      * Return the appropriate status object for the given class, or null\n      * if cannot handle the given class. The mapping may be null.\n      */\n-    protected Status getStatus(ClassMapping mapping) {\n-        return _stat;\n+    protected Status getStatus(ClassMapping mapping) {  \n+        Status status = (Status)_stat.get(mapping);        \n+        if (status == null){ \n+            status = new Status();\n+            _stat.put(mapping, status);\n+        }\n+        return status;\n+            \n     }\n \n     /**\n@@ -392,8 +417,9 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n                 getClass(), mapping));\n \n         DBDictionary dict = _conf.getDBDictionaryInstance();\n+        String tableName = resolveTableName(mapping, _pkColumn.getTable());\n         SQLBuffer insert = new SQLBuffer(dict).append(\"INSERT INTO \").\n-            append(_pkColumn.getTable()).append(\" (\").\n+            append(tableName).append(\" (\").\n             append(_pkColumn).append(\", \").append(_seqColumn).\n             append(\") VALUES (\").\n             appendValue(pk, _pkColumn).append(\", \").\n@@ -431,10 +457,12 @@ protected long getSequence(ClassMapping mapping, Connection conn)\n         SQLBuffer sel = new SQLBuffer(dict).append(_seqColumn);\n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n-        SQLBuffer tables = new SQLBuffer(dict).append(_seqColumn.getTable());\n+        String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+        SQLBuffer tables = new SQLBuffer(dict).append(tableName);\n \n-        SQLBuffer select = dict.toSelect(sel, null, tables, where, null,\n-            null, null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE);\n+        SQLBuffer select = dict.toSelect(sel, null, tables, where, null, null,\n+                null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE,\n+                false, true);\n \n         PreparedStatement stmnt = select.prepareStatement(conn);\n         ResultSet rs = null;\n@@ -467,7 +495,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n             throw new InvalidStateException(_loc.get(\"bad-seq-type\",\n                 getClass(), mapping));\n \n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n+        DBDictionary dict = _conf.getDBDictionaryInstance();        \n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n \n@@ -486,7 +514,8 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n \n                 // update the value\n                 upd = new SQLBuffer(dict);\n-                upd.append(\"UPDATE \").append(_seqColumn.getTable()).\n+                String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+                upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n                     appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n                     append(\" WHERE \").append(where).append(\" AND \").\n@@ -503,7 +532,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n             }\n         }\n \n-        // setup new sequence range\n+        // setup new sequence range        \n         synchronized (stat) {\n             if (updateStatSeq && stat.seq < cur)\n                 stat.seq = cur;\n@@ -512,6 +541,21 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n         }\n         return true;\n     }\n+    /**\n+     * Resolve a fully qualified table name\n+     * \n+     * @param class\n+     *            mapping to get the schema name\n+     */\n+    public String resolveTableName(ClassMapping mapping, Table table) {\n+        String sName = mapping.getTable().getSchemaName();\n+        String tableName;\n+        if (sName == null)\n+            tableName = table.getFullName();\n+        else\n+            tableName = sName + \".\" + table.getFullName();\n+        return tableName;\n+    }\n \n     /**\n      * Creates the sequence table in the DB."},{"sha":"067be5761c71e77f5b960e3963d3ac11bc3cbdf0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -515,6 +515,13 @@ public void map(boolean adapt) {\n      */\n     public void mapJoin(boolean adapt, boolean joinRequired) {\n         Table table = _info.getTable(this, joinRequired, adapt);\n+\n+        if(table != null && table.equals(getDefiningMapping().getTable())) {\n+            // Don't create a join if the field's table is the same as the\n+            // class's table. \n+            table = null;\n+        }\n+\n         ForeignKey join = null;\n         if (table != null)\n             join = _info.getJoin(this, table, adapt);"},{"sha":"d105060dd0197b49187204efa192ac67b30e4b5c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -112,7 +112,8 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n             && base.getJoinablePCSubclassMappings().length == 0))\n             return base.getDescribedType();\n \n-        Object cls = res.getObject(disc.getColumns()[0], -1, null);\n+        Object cls =\n+                res.getObject(disc.getColumns()[0], disc.getJavaType(), null);\n         return getClass(cls, store);\n     }\n "},{"sha":"deda088e8666cdf95fa8e8b7079371686b0fcc32","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -180,6 +180,14 @@ public void setTableName(String name) {\n         _tableName = name;\n         _fullName = null;\n     }\n+    \n+    /**\n+     * Reset the table name with the fully qualified table name which\n+     * includes the schema name\n+     */\n+    public void resetTableName(String name) {\n+        _tableName = name;\n+    }\n \n     /**\n      * The column's schema name."},{"sha":"560c15dfd6a22a33727dda8f5a7f6b7c62184811","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -189,6 +189,7 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n         DataSource inner = ds.getInnermostDelegate();\n         if (inner instanceof DriverDataSource)\n             ((DriverDataSource) inner).initDBDictionary(dict);\n+        Connection conn = null;\n \n         try {\n             // add the dictionary as a warning handler on the logging\n@@ -219,9 +220,26 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n \n             // allow the dbdictionary to decorate the connection further\n             ds.addDecorator(dict);\n+            \n+            // ensure dbdictionary to process connectedConfiguration()\n+            if (!factory2)\n+                conn = ds.getConnection(conf.getConnectionUserName(), conf\n+                        .getConnectionPassword());\n+            else\n+                conn = ds.getConnection(conf.getConnection2UserName(), conf\n+                        .getConnection2Password());\n+\n             return ds;\n         } catch (Exception e) {\n             throw new StoreException(e).setFatal(true);\n+        } finally {\n+            if (conn != null)\n+                try {\n+                    conn.close();\n+                } catch (SQLException se) {\n+                    // ignore any exception since the connection is not going\n+                    // to be used anyway\n+                }\n         }\n     }\n "},{"sha":"57f0a74a29bedb386443f0587152bd3236886c1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -93,11 +93,11 @@ public void setColumns(Column[] cols) {\n      * Add a column to the constraint.\n      */\n     public void addColumn(Column col) {\n-        if (col == null || !ObjectUtils.equals(col.getTable(), getTable()))\n+    \tif (col == null)\n             throw new InvalidStateException(_loc.get(\"table-mismatch\",\n                 col == null ? null : col.getTable(),\n                 col == null ? null : getTable()));\n-\n+    \t\n         if (_colList == null)\n             _colList = new ArrayList(3);\n         else if (_colList.contains(col))"},{"sha":"1e4b188be7bf8468d823c0d37e8d7ab0d64bfbf4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -819,8 +819,10 @@ public void generateSequences(String schemaName, String sequenceName,\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"gen-seqs\", schemaName, sequenceName));\n \n+        // since all the sequences are generated under the default schema\n+        // therefore, we can use the null schemaname to search\n         Sequence[] seqs = _dict.getSequences(meta, conn.getCatalog(),\n-            schemaName, sequenceName, conn);\n+            null, sequenceName, conn);\n \n         SchemaGroup group = getSchemaGroup();\n         Schema schema;"},{"sha":"a5d7fd3f3deb485ad9caf1df1db0183492d8a3d6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","status":"modified","additions":67,"deletions":2,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -186,6 +186,42 @@ public Table findTable(String name) {\n         return null;\n     }\n \n+    /**\n+     * Find the table with the given name in the group, using '.' as the catalog\n+     * separator. Returns null if no table found.\n+     */\n+    public Table findTable(Schema inSchema, String name) {\n+        if (name == null)\n+            return null;\n+\n+        int dotIdx = name.indexOf('.');\n+        if (dotIdx != -1) {\n+            String schemaName = name.substring(0, dotIdx);\n+            name = name.substring(dotIdx + 1);\n+            Schema schema = getSchema(schemaName);\n+            if (schema != null)\n+                return schema.getTable(name);\n+        } else {\n+            Schema[] schemas = getSchemas();\n+            for (int i = 0; i < schemas.length; i++) {\n+                Table tab = schemas[i].getTable(name);\n+                // if a table is found and it has the same schema\n+                // as the input schema , it means that the table\n+                // exists. However, if the input schema is null,\n+                // then we assume that there is only one table for the\n+                // db default schema, in this case, table exists..\n+                // We can't handle the case that one entity has schema name\n+                // and other entity does not have schema name but both entities\n+                // map to the same table.\n+                if (tab != null\n+                        && (schemas[i] == inSchema || inSchema.getName() == null))\n+                    return tab;\n+\n+            }\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Return true if the given sequence is known to exist. While\n      * {@link #findSequence} may exhibit dynamic behavior in some schema group\n@@ -242,8 +278,37 @@ public Sequence findSequence(String name) {\n     }\n \n     /**\n-     * Find all foreign keys exported by a given primary key (all foreign\n-     * keys that link to the primary key).\n+     * Find the sequence with the given name in the group, using '.' as the\n+     * catalog separator. Returns null if no sequence found.\n+     */\n+    public Sequence findSequence(Schema inSchema, String name) {\n+        if (name == null)\n+            return null;\n+\n+        int dotIdx = name.indexOf('.');\n+        if (dotIdx != -1) {\n+            String schemaName = name.substring(0, dotIdx);\n+            name = name.substring(dotIdx + 1);\n+            Schema schema = getSchema(schemaName);\n+            if (schema != null)\n+                return schema.getSequence(name);\n+        } else {\n+            Schema[] schemas = getSchemas();\n+            Sequence seq;\n+            for (int i = 0; i < schemas.length; i++) {\n+                seq = schemas[i].getSequence(name);\n+                if ((seq != null)\n+                        && (schemas[i] == inSchema || inSchema.getName() == null))\n+                    return seq;\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find all foreign keys exported by a given primary key (all foreign keys\n+     * that link to the primary key).\n      */\n     public ForeignKey[] findExportedForeignKeys(PrimaryKey pk) {\n         if (pk == null)"},{"sha":"199b624d42e9c3efa29ae15da9092249dc13c100","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -450,7 +450,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             for (int i = 0; i < schemas.length; i++) {\n                 seqs = schemas[i].getSequences();\n                 for (int j = 0; j < seqs.length; j++) {\n-                    if (db.findSequence(seqs[j]) != null)\n+                    if (db.findSequence(schemas[i], seqs[j].getFullName()) != null)\n                         continue;\n \n                     if (createSequence(seqs[j])) {\n@@ -473,7 +473,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n                 cols = tabs[j].getColumns();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                 for (int k = 0; k < cols.length; k++) {\n                     if (dbTable != null) {\n                         col = dbTable.getColumn(cols[k].getName());\n@@ -500,7 +500,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n                 tabs = schemas[i].getTables();\n                 for (int j = 0; j < tabs.length; j++) {\n                     pk = tabs[j].getPrimaryKey();\n-                    dbTable = db.findTable(tabs[j]);\n+                    dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                     if (pk != null && !pk.isLogical() && dbTable != null) {\n                         if (dbTable.getPrimaryKey() == null\n                             && addPrimaryKey(pk))\n@@ -520,7 +520,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n-                if (db.findTable(tabs[j]) != null)\n+                if (db.findTable(schemas[i], tabs[j].getFullName()) != null)\n                     continue;\n \n                 if (createTable(tabs[j])) {\n@@ -546,7 +546,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 idxs = tabs[j].getIndexes();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                 for (int k = 0; k < idxs.length; k++) {\n                     if (dbTable != null) {\n                         idx = findIndex(dbTable, idxs[k]);\n@@ -596,7 +596,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 fks = tabs[j].getForeignKeys();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i],tabs[j].getFullName());\n                 for (int k = 0; k < fks.length; k++) {\n                     if (!fks[k].isLogical() && dbTable != null) {\n                         fk = findForeignKey(dbTable, fks[k]);"},{"sha":"926cccf14a61a6e6f9c7b9439daa79be7eef6fbf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -498,7 +498,7 @@ public ForeignKey importForeignKey(ForeignKey fk) {\n      * Return the table's indexes.\n      */\n     public Index[] getIndexes() {\n-        if (_idxs == null)\n+        if (_idxs == null || _idxs.length == 0)\n             _idxs = (_idxMap == null) ? Schemas.EMPTY_INDEXES : (Index[])\n                 _idxMap.values().toArray(new Index[_idxMap.size()]);\n         return _idxs;"},{"sha":"5762523ef11b25f4e742b7ed6137a9ab11a69175","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":99,"deletions":34,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -31,12 +31,17 @@\n import org.apache.openjpa.jdbc.kernel.exps.Lit;\r\n import org.apache.openjpa.jdbc.kernel.exps.Param;\r\n import org.apache.openjpa.jdbc.kernel.exps.Val;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n import org.apache.openjpa.kernel.Filters;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n import org.apache.openjpa.util.UnsupportedException;\r\n+\r\n import serp.util.Strings;\r\n \r\n /**\r\n@@ -50,12 +55,12 @@\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n     protected int db2ServerType = 0;\r\n-    protected static final int db2ISeriesV5R3OrEarlier = 1;\r\n-    protected static final int db2UDBV81OrEarlier = 2;\r\n-    protected static final int db2ZOSV8xOrLater = 3;\r\n-    protected static final int db2UDBV82OrLater = 4;\r\n-    protected static final int db2ISeriesV5R4OrLater = 5;\r\n-\tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n+    public static final int db2ISeriesV5R3OrEarlier = 1;\r\n+    public static final int db2UDBV81OrEarlier = 2;\r\n+    public static final int db2ZOSV8xOrLater = 3;\r\n+    public static final int db2UDBV82OrLater = 4;\r\n+    public static final int db2ISeriesV5R4OrLater = 5;\r\n+\tprivate static final String forUpdate = \"FOR UPDATE\";\r\n     private static final String withRSClause = \"WITH RS\";\r\n     private static final String withRRClause = \"WITH RR\";\r\n     private static final String useKeepUpdateLockClause\r\n@@ -94,7 +99,7 @@ public DB2Dictionary() {\n             \"LONG VARCHAR FOR BIT DATA\", \"LONG VARCHAR\", \"LONG VARGRAPHIC\",\r\n         }));\r\n         systemSchemas = new String(\r\n-                \"SYSCAT, SYSIBM, SYSSTAT, SYSIBMADM, SYSTOOLS\");\r\n+                \"SYSCAT,SYSIBM,SYSSTAT,SYSIBMADM,SYSTOOLS\");\r\n         maxConstraintNameLength = 18;\r\n         maxIndexNameLength = 18;\r\n         maxColumnNameLength = 30;\r\n@@ -147,11 +152,14 @@ public boolean supportsRandomAccessResultSet(Select sel,\n             && super.supportsRandomAccessResultSet(sel, forUpdate);\r\n     }\r\n \r\n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\r\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\r\n+        boolean subselect) {\r\n         // appends the literal range string, since DB2 is unable to handle\r\n         // a bound parameter for it\r\n-        buf.append(\" FETCH FIRST \").append(Long.toString(end)).\r\n-            append(\" ROWS ONLY\");\r\n+        // do not generate FETCH FIRST clause for subselect\r\n+        if (!subselect)\r\n+            buf.append(\" FETCH FIRST \").append(Long.toString(end)).\r\n+                append(\" ROWS ONLY\");\r\n     }\r\n \r\n     public String[] getCreateSequenceSQL(Sequence seq) {\r\n@@ -286,9 +294,12 @@ else if (isDB2UDBV82OrLater())\n      * updateClause and isolationLevel hints\r\n      */\r\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\r\n-        boolean forUpdate) {\r\n+        boolean isForUpdate, Select sel) {\r\n         int isolationLevel;\r\n-        StringBuffer forUpdateString = new StringBuffer();\r\n+        // For db2UDBV81OrEarlier and db2ISeriesV5R3OrEarlier:\r\n+        // \"optimize for\" clause appears before \"for update\" clause.\r\n+        StringBuffer forUpdateString = new StringBuffer(\r\n+            getOptimizeClause(sel));\r\n         try {\r\n             // Determine the isolationLevel; the fetch\r\n             // configuration data overrides the persistence.xml value\r\n@@ -297,16 +308,15 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n             else\r\n                 isolationLevel = conf.getTransactionIsolationConstant();\r\n \r\n-            if (forUpdate) {\r\n+            if (isForUpdate) {\r\n                 switch(db2ServerType) {\r\n                 case db2ISeriesV5R3OrEarlier:\r\n                 case db2UDBV81OrEarlier:\r\n-                    if (isolationLevel ==\r\n-                        Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(forUpdateOfClause);\r\n-                    } else\r\n-                        forUpdateString.append(\" \").append(forUpdateOfClause);\r\n+                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE)\r\n+                        forUpdateString.append(\" \").append(forUpdateClause);\r\n+                    else \r\n+                        forUpdateString.append(\" \").append(forUpdate)\r\n+                            .append(\" \").append(withRSClause);\r\n                     break;\r\n                 case db2ZOSV8xOrLater:\r\n                 case db2UDBV82OrLater:\r\n@@ -341,7 +351,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         return forUpdateString.toString();\r\n     }\r\n \r\n-    public boolean isDB2UDBV82OrLater() throws SQLException {\r\n+    public boolean isDB2UDBV82OrLater() {\r\n         boolean match = false;\r\n         if ((databaseProductVersion.indexOf(\"SQL\") != -1\r\n             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n@@ -350,8 +360,7 @@ public boolean isDB2UDBV82OrLater() throws SQLException {\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8xOrLater()\r\n-       throws SQLException {\r\n+    public boolean isDB2ZOSV8xOrLater() {\r\n        boolean match = false;\r\n        if ((databaseProductVersion.indexOf(\"DSN\") != -1\r\n            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n@@ -360,25 +369,23 @@ public boolean isDB2ZOSV8xOrLater()\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R3OrEarlier()\r\n-       throws SQLException {\r\n+    public boolean isDB2ISeriesV5R3OrEarlier() {\r\n        boolean match = false;\r\n        if (databaseProductName.indexOf(\"AS\") != -1\r\n            && ((maj == 5 && min <=3) || maj < 5))\r\n            match = true;\r\n        return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R4OrLater()\r\n-       throws SQLException {\r\n+    public boolean isDB2ISeriesV5R4OrLater() {\r\n        boolean match = false;\r\n        if (databaseProductName.indexOf(\"AS\") != -1\r\n            && (maj >=6 || (maj == 5 && min >=4)))\r\n            match = true;\r\n       return match;\r\n     }\r\n \r\n-    public boolean isDB2UDBV81OrEarlier() throws SQLException {\r\n+    public boolean isDB2UDBV81OrEarlier() {\r\n         boolean match = false;\r\n         if ((databaseProductVersion.indexOf(\"SQL\") != -1 \r\n            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n@@ -438,17 +445,16 @@ private void getProductVersionMajorMinor() {\n         }\r\n     }\r\n \r\n-    public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n-        JDBCFetchConfiguration fetch) {\r\n-        SQLBuffer buf = super.toSelect(sel, forUpdate, fetch);\r\n-\r\n-        if (sel.getExpectedResultCount() > 0) {\r\n+    protected String getOptimizeClause(Select sel) {\r\n+        if (sel != null && sel.getExpectedResultCount() > 0) {\r\n+            StringBuffer buf = new StringBuffer();\r\n             buf.append(\" \").append(optimizeClause).append(\" \")\r\n                 .append(String.valueOf(sel.getExpectedResultCount()))\r\n                 .append(\" \").append(rowClause);\r\n+            return buf.toString();\r\n         }\r\n \r\n-        return buf;\r\n+        return \"\";\r\n     }\r\n \r\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\r\n@@ -646,7 +652,7 @@ private String addCastAsString(String func, String target,\n     public String addCastAsType(String func, Val val) {\r\n         String fstring = null;\r\n         String type = getTypeName(getJDBCType(JavaTypes.getTypeCode(val\r\n-                .getType()), false));\r\n+            .getType()), false));\r\n         fstring = \"CAST(? AS \" + type + \")\";\r\n         return fstring;\r\n     }\r\n@@ -696,4 +702,63 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         }\r\n         buf.append(\") - 1)\");\r\n     }\r\n+\r\n+    /** \r\n+     * Cast the specified value to the specified type.\r\n+     *\r\n+     * @param buf the buffer to append the cast to\r\n+     * @param val the value to cast\r\n+     * @param type the type of the case, e.g. {@link Types#NUMERIC}\r\n+     */\r\n+    public void appendCast(SQLBuffer buf, FilterValue val, int type) {\r\n+\r\n+        // Convert the cast function: \"CAST({0} AS {1})\"\r\n+        int firstParam = castFunction.indexOf(\"{0}\");\r\n+        String pre = castFunction.substring(0, firstParam); // \"CAST(\"\r\n+        String mid = castFunction.substring(firstParam + 3);\r\n+        int secondParam = mid.indexOf(\"{1}\");\r\n+        String post;\r\n+        if (secondParam > -1) {\r\n+            post = mid.substring(secondParam + 3); // \")\"\r\n+            mid = mid.substring(0, secondParam); // \" AS \"\r\n+        } else\r\n+            post = \"\";\r\n+\r\n+        // No need to add CAST if the value is a constant\r\n+        if (val instanceof Lit || val instanceof Param) {\r\n+            buf.append(pre);\r\n+            val.appendTo(buf);\r\n+            buf.append(mid);\r\n+            buf.append(getTypeName(type));\r\n+            appendLength(buf, type);\r\n+            buf.append(post);\r\n+        } else {\r\n+            val.appendTo(buf);\r\n+            String sqlString = buf.getSQL(false);\r\n+            if (sqlString.endsWith(\"?\")) {\r\n+                // case \"(?\" - convert to \"CAST(? AS type\"\r\n+                String typeName = getTypeName(type);\r\n+                if (String.class.equals(val.getType()))\r\n+                    typeName = typeName + \"(\" + characterColumnSize + \")\";\r\n+                String str = \"CAST(? AS \" + typeName + \")\";\r\n+                buf.replaceSqlString(sqlString.length() - 1,\r\n+                        sqlString.length(), str);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an index if necessary for some database tables\r\n+     */\r\n+    public void createIndexIfNecessary(Schema schema, String table,\r\n+            Column pkColumn) {\r\n+        if (isDB2ZOSV8xOrLater()) {\r\n+            // build the index for the sequence tables\r\n+            // the index name will the fully qualified table name + _IDX\r\n+            Table tab = schema.getTable(table);\r\n+            Index idx = tab.addIndex(tab.getFullName() + \"_IDX\");\r\n+            idx.setUnique(true);\r\n+            idx.addColumn(pkColumn);\r\n+        }\r\n+    }\r\n }\r"},{"sha":"81ec45f7c3f555c851c487079f6e1f07e724adb7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":121,"deletions":26,"changes":147,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -58,7 +58,6 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.HashMap;\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -68,8 +67,6 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n-import org.apache.openjpa.jdbc.kernel.exps.Lit;\n-import org.apache.openjpa.jdbc.kernel.exps.Param;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -86,7 +83,6 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n@@ -1740,7 +1736,7 @@ public SQLBuffer toSelectCount(Select sel) {\n         from.append(\"(\");\n         from.append(toSelect(subSelect, null, subFrom, where,\n             sel.getGrouping(), sel.getHaving(), null, sel.isDistinct(),\n-            false, sel.getStartIndex(), sel.getEndIndex()));\n+            false, sel.getStartIndex(), sel.getEndIndex(), true));\n         from.append(\")\");\n         if (requiresAliasForSubselect)\n             from.append(\" \").append(Select.FROM_SELECT_ALIAS);\n@@ -1996,7 +1992,7 @@ public SQLBuffer toSelect(Select sel, boolean forUpdate,\n         SQLBuffer where = getWhere(sel, update);\n         return toSelect(select, fetch, from, where, sel.getGrouping(),\n             sel.getHaving(), ordering, sel.isDistinct(), forUpdate,\n-            sel.getStartIndex(), sel.getEndIndex());\n+            sel.getStartIndex(), sel.getEndIndex(), sel);\n     }\n \n     /**\n@@ -2184,19 +2180,55 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         boolean distinct, boolean forUpdate, long start, long end) {\n         return toOperation(getSelectOperation(fetch), selects, from, where,\n             group, having, order, distinct, start, end,\n-            getForUpdateClause(fetch, forUpdate));\n+            getForUpdateClause(fetch, forUpdate, null));\n+    }\n+\n+    /**\n+     * Combine the given components into a SELECT statement.\n+     */\n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        boolean subselect) {\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n+            group, having, order, distinct, start, end,\n+            getForUpdateClause(fetch, forUpdate, null), subselect);\n+    }\n+    \n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+            SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+            SQLBuffer having, SQLBuffer order,\n+            boolean distinct, boolean forUpdate, long start, long end,\n+            boolean subselect, boolean checkTableForUpdate) {\n+            return toOperation(getSelectOperation(fetch), selects, from, where,\n+                group, having, order, distinct, start, end,\n+                getForUpdateClause(fetch, forUpdate, null), subselect, checkTableForUpdate);\n+        }\n+\n+    /**\n+     * Combine the given components into a SELECT statement.\n+     */\n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end\n+        , Select sel) {\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n+            group, having, order, distinct, start, end,\n+            getForUpdateClause(fetch, forUpdate, sel));\n     }\n \n     /**\n      * Get the update clause for the query based on the\n      * updateClause and isolationLevel hints\n      */\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n-        boolean forUpdate) {\n+        boolean isForUpdate, Select sel) {\n         if (fetch != null && fetch.getIsolation() != -1) {\n             throw new InvalidStateException(_loc.get(\n                 \"isolation-level-config-not-supported\", getClass().getName()));\n-        } else if (forUpdate && !simulateLocking) {\n+        } else if (isForUpdate && !simulateLocking) {\n             assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n             return forUpdateClause;\n         } else {\n@@ -2214,23 +2246,51 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n     /**\n      * Return the SQL for the given selecting operation.\n      */\n-    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+    public SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n         SQLBuffer order, boolean distinct, long start, long end,\n         String forUpdateClause) {\n+        return toOperation(op, selects, from, where, group, having, order,\n+            distinct, start, end, forUpdateClause, false);\n+    }\n+    \n+    /**\n+     * Return the SQL for the given selecting operation.\n+     */\n+    public SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause, boolean subselect) {\n+        return toOperation(op, selects, from, where, group, having, order,\n+                distinct, start, end, forUpdateClause, subselect, false);\n+    }\n+\n+    /**\n+     * Return the SQL for the given selecting operation.\n+     */\n+    private SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause, boolean subselect, boolean checkTableForUpdate) {\n         SQLBuffer buf = new SQLBuffer(this);\n         buf.append(op);\n \n         boolean range = start != 0 || end != Long.MAX_VALUE;\n         if (range && rangePosition == RANGE_PRE_DISTINCT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         if (distinct)\n             buf.append(\" DISTINCT\");\n         if (range && rangePosition == RANGE_POST_DISTINCT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n \n         buf.append(\" \").append(selects).append(\" FROM \").append(from);\n \n+        if (checkTableForUpdate\n+                && (StringUtils.isEmpty(forUpdateClause) && !StringUtils\n+                        .isEmpty(tableForUpdateClause))) {\n+            buf.append(\" \").append(tableForUpdateClause);\n+        }\n+\n         if (where != null && !where.isEmpty())\n             buf.append(\" WHERE \").append(where);\n         if (group != null && !group.isEmpty())\n@@ -2242,19 +2302,20 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         if (order != null && !order.isEmpty())\n             buf.append(\" ORDER BY \").append(order);\n         if (range && rangePosition == RANGE_POST_SELECT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         if (forUpdateClause != null)\n             buf.append(\" \").append(forUpdateClause);\n         if (range && rangePosition == RANGE_POST_LOCK)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         return buf;\n     }\n \n     /**\n      * If this dictionary can select ranges,\n      * use this method to append the range SQL.\n      */\n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end\n+        , boolean subselect) {\n     }\n \n     /**\n@@ -3038,7 +3099,7 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             return null;\n         if (fk.getDeleteAction() == ForeignKey.ACTION_NONE)\n             return null;\n-        if (fk.isDeferred() && !supportsDeferredConstraints)\n+        if (fk.isDeferred() && !supportsDeferredForeignKeyConstraints())\n             return null;\n         if (!supportsDeleteAction(fk.getDeleteAction())\n             || !supportsUpdateAction(fk.getUpdateAction()))\n@@ -3075,14 +3136,24 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             buf.append(\" ON UPDATE \").append(upAction);\n         if (fk.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredForeignKeyConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (fk.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(fk.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred foreign key constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredForeignKeyConstraints() {\n+        return supportsDeferredConstraints;\n+    }\n+\n     /**\n      * Return the name of the given foreign key action.\n      */\n@@ -3151,7 +3222,7 @@ public boolean supportsUpdateAction(int action) {\n      */\n     protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n-            || (unq.isDeferred() && !supportsDeferredConstraints))\n+            || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n \n         StringBuffer buf = new StringBuffer();\n@@ -3165,14 +3236,24 @@ protected String getUniqueConstraintSQL(Unique unq) {\n             append(\")\");\n         if (unq.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredUniqueConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (unq.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(unq.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred unique constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredUniqueConstraints() {\n+        return supportsDeferredConstraints;\n+    }\n+\n     /////////////////////\n     // Database metadata\n     /////////////////////\n@@ -3287,7 +3368,7 @@ protected Table newTable(ResultSet tableMeta)\n         try {\n             int idx = 1;\n             if (schemaName != null)\n-                stmnt.setString(idx++, schemaName);\n+                stmnt.setString(idx++, schemaName.toUpperCase());\n             if (sequenceName != null)\n                 stmnt.setString(idx++, sequenceName);\n \n@@ -3567,11 +3648,11 @@ protected ForeignKey newForeignKey(ResultSet fkMeta)\n         fk.setPrimaryKeySchemaName(fkMeta.getString(\"PKTABLE_SCHEM\"));\n         fk.setPrimaryKeyTableName(fkMeta.getString(\"PKTABLE_NAME\"));\n         fk.setPrimaryKeyColumnName(fkMeta.getString(\"PKCOLUMN_NAME\"));\n-        fk.setKeySequence(fkMeta.getInt(\"KEY_SEQ\"));\n-        fk.setDeferred(fkMeta.getInt(\"DEFERRABILITY\")\n+        fk.setKeySequence(fkMeta.getShort(\"KEY_SEQ\"));\n+        fk.setDeferred(fkMeta.getShort(\"DEFERRABILITY\")\n             == DatabaseMetaData.importedKeyInitiallyDeferred);\n \n-        int del = fkMeta.getInt(\"DELETE_RULE\");\n+        int del = fkMeta.getShort(\"DELETE_RULE\");\n         switch (del) {\n             case DatabaseMetaData.importedKeySetNull:\n                 fk.setDeleteAction(ForeignKey.ACTION_NULL);\n@@ -3631,13 +3712,21 @@ protected String convertSchemaCase(String objectName) {\n         if (objectName == null)\n             return null;\n \n-        if (SCHEMA_CASE_LOWER.equals(schemaCase))\n+        String scase = getSchemaCase();\n+        if (SCHEMA_CASE_LOWER.equals(scase))\n             return objectName.toLowerCase();\n-        if (SCHEMA_CASE_PRESERVE.equals(schemaCase))\n+        if (SCHEMA_CASE_PRESERVE.equals(scase))\n             return objectName;\n         return objectName.toUpperCase();\n     }\n \n+    /**\n+     * Return DB specific schemaCase \n+     */\n+    public String getSchemaCase(){\n+        return schemaCase;\n+    }\n+    \n     /**\n      * Prepared the connection for metadata operations.\n      */\n@@ -3893,5 +3982,11 @@ public String getVersionColumn(Column column, String tableAlias) {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n-   \n+    \n+    /**\n+     * Create an index if necessary for some database tables\n+     */\n+    public void createIndexIfNecessary(Schema schema, String table,\n+            Column pkColumn) {\n+    }\n }"},{"sha":"9a241a51844a48f6410945702c596be0e34a3fd8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -193,7 +193,7 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return buf.toString();\n     }\n \n-    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+    public SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n         SQLBuffer order, boolean distinct, long start, long end,\n         String forUpdateClause) {"},{"sha":"a6bd7a4b081a58135c8f5ce8202afb34ff81f990","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -94,10 +94,10 @@ public PostgresDictionary() {\n         // PostgreSQL requires double-escape for strings\n         searchStringEscape = \"\\\\\\\\\";\n \n-        maxTableNameLength = 31;\n-        maxColumnNameLength = 31;\n-        maxIndexNameLength = 31;\n-        maxConstraintNameLength = 31;\n+        maxTableNameLength = 63;\n+        maxColumnNameLength = 63;\n+        maxIndexNameLength = 63;\n+        maxConstraintNameLength = 63;\n         schemaCase = SCHEMA_CASE_LOWER;\n         rangePosition = RANGE_POST_LOCK;\n         requiresAliasForSubselect = true;\n@@ -271,6 +271,11 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         return sql;\n     }\n \n+    protected boolean supportsDeferredUniqueConstraints() {\n+        // Postgres only supports deferred foreign key constraints.\n+        return false;\n+    }\n+\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         if (schemaName == null && sequenceName == null)\n             return allSequencesSQL;"},{"sha":"4a96a7a42eaf3dffd15df1f24bc53ace3d800a5d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -606,6 +606,17 @@ public void addCastForParam(String oper, Val val) {\n         }\n     }\n \n+    /**\n+     * Replace current buffer string with the new string\n+     * \n+     * @param start replace start position\n+     * @param end replace end position\n+     * @param newString\n+     */\n+    public void replaceSqlString(int start, int end, String newString) {\n+        _sql.replace(start, end, newString);\n+    }\n+    \n     /**\n      * Represents a subselect.\n      */"},{"sha":"18ac7cc65cb0d2ec3b27c5400d7857bed8446d1f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -42,6 +42,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (SQLServerDictionary.class);\n \n+    private String schemaCase = SCHEMA_CASE_PRESERVE;\n     /**\n      * Flag whether to treat UNIQUEIDENTIFIER as VARBINARY or VARCHAR\n      */\n@@ -230,4 +231,11 @@ private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n         appendLength(buf, type);\n         buf.append(\"')\");\n     }\n+    \n+    /**\n+     * Return DB specific schemaCase\n+     */\n+    public String getSchemaCase() {\n+        return schemaCase;\n+    }\n }"},{"sha":"d48c00946867f2c06759f752b84de53d73df3158","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -238,8 +238,8 @@ ConnectionURL-values: jdbc:JSQLConnect://<hostname>/database=<database>,\\\n \tjdbc:dbaw://<hostname>:8889/<database>\n \n connecting-for-dictionary: OpenJPA will now connect to the database to attempt \\\n-    to determine what type of database dictionary to use.  To prevent this \\\n-\tconnection in the future, set your openjpa.jdbc.DBDictionary \\\n+    to determine what type of database dictionary to use. You may prevent this \\\n+\tconnection in the future by setting your openjpa.jdbc.DBDictionary \\\n     configuration property to the appropriate value for your database (see \\\n     the documentation for available values).\n map-factory: Using mapping factory \"{0}\"."},{"sha":"bcd8de3e06a8ac577fd13eaaa1e77d062f3f2e94","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -56,7 +56,7 @@ generic-num-cols: For \"{0}\", expected {1} column(s), but found {2}.\n generic-no-col-name: No column name was given for \"{0}\".\n generic-bad-col-name: \"{0}\" declares column \"{1}\", but this column does not \\\n \texist in table \"{2}\".\n-generic-incompat-col: \"{0}\" declares a column \"{1}\" whose jdbc-type is not \\\n+generic-incompat-col: \"{0}\" declares a column \"{1}\" whose JDBC type is not \\\n \tcompatible with the expected type \"{2}\".\n generic-bad-col: \"{0}\" declares a column that is not compatible with the \\\n \texpected type \"{1}\".  Column details:\\n{2}\n@@ -66,7 +66,7 @@ datastoreid-no-col-name: No datastore identity column name was given for \"{0}\".\n datastoreid-bad-col-name: Type \"{0}\" declares datastore identity column \"{1}\", \\\n \tbut this column does not exist in table \"{2}\".\n datastoreid-incompat-col: Type \"{0}\" declares a datastore identity column \\\n-\t\"{1}\" whose jdbc-type is not compatible with the expected type \"{2}\".\n+\t\"{1}\" whose JDBC type is not compatible with the expected type \"{2}\".\n datastoreid-bad-col: Type \"{0}\" declares a datastore identity column that is \\\n \tnot compatible with the expected type \"{1}\".  Column details:\\n{2}\n nondfg-field-orderable: Cannot order \"{0}\" on \"{1}\", because that field is not \\\n@@ -77,16 +77,16 @@ order-conflict: Field \"{0}\" declares both a synthetic ordering column and \\\n order-no-col-name: No order column name was given for \"{0}\".\n order-bad-col-name: \"{0}\" declares order column \"{1}\", but this column does \\\n \tnot exist in table \"{2}\".\n-order-incompat-col: \"{0}\" declares an order column \"{1}\" whose jdbc-type is \\\n+order-incompat-col: \"{0}\" declares an order column \"{1}\" whose JDBC type is \\\n \tnot compatible with the expected type \"{2}\".\n order-bad-col: \"{0}\" declares an order column column that is not compatible \\\n \twith the expected type \"{1}\".  Column details:\\n{2}\n-null-ind-no-col-name: No null-indicator column name was given for \"{0}\".\n-null-ind-bad-col-name: \"{0}\" declares null-indicator column \"{1}\", but this \\\n+null-ind-no-col-name: No null indicator column name was given for \"{0}\".\n+null-ind-bad-col-name: \"{0}\" declares null indicator column \"{1}\", but this \\\n \tcolumn does not exist in table \"{2}\".\n-null-ind-incompat-col: \"{0}\" declares a null-indicator column \"{1}\" whose \\\n-\tjdbc-type is not compatible with the expected type \"{2}\".\n-null-ind-bad-col: \"{0}\" declares a null-indicator column column that is not \\\n+null-ind-incompat-col: \"{0}\" declares a null indicator column \"{1}\" whose \\\n+\tJDBC type is not compatible with the expected type \"{2}\".\n+null-ind-bad-col: \"{0}\" declares a null indicator column column that is not \\\n \tcompatible with the expected type \"{1}\".  Column details:\\n{2}\n generic-no-index-cols: \"{0}\" declares an index, but has no columns.\n generic-index-exists: \"{0}\" marks its columns as explicitly not indexed, but \\\n@@ -262,7 +262,7 @@ col-wrong-table: When mapping \"{0}\" to table \"{1}\", found a column mapped to \\\n \tillegal table \"{2}\".\n target-wrong-cls: When mapping \"{0}\", found join with a target-field in class \\\n \t\"{1}\".  This class does not match the expected source or target mappings \\\n-\tfor the join (\"{2}\", \"{3}\").\n+\tfor the join of (\"{2}\", \"{3}\").\n no-equiv-mapped-by: \"{0}\" does not have a valid mapping.  It declares that it \\\n \tis mapped by \"{2}\", but \"{1}\", a subclass of its declared type, does not \\\n \tinherit that relation field.\n@@ -355,7 +355,7 @@ revtool-running: The reverse mapping tool will run on the database.  The tool \\\n \tis gathering schema information; this process may take some time.  Enable \\\n \tthe org.apache.openjpa.jdbc.Schema logging category to see messages about schema data.\n revtool-running-file: The reverse mapping tool will run on schema file \"{0}\".\n-revtool-map: Calculating reverse mappings.\n+revtool-map: ReverseMappingTool : generating classes.\n revtool-write-code: Writing generated class source code.\n revtool-write-appid: Writing generated application identity classes.\n revtool-write-metadata: Writing generated metadata."},{"sha":"e8facf26703da7a002762b0a410b748eb13f3604","filename":"openjpa-kernel-5/pom.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -39,6 +39,12 @@\n             <version>${pom.version}</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-lib-5</artifactId>\n+            <version>${pom.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"fa76f87bea5bec925be8ae667cfe484d765fb8f1","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -55,14 +55,15 @@\n     /**\r\n      * For each element in <code>classes</code>, this method will redefine\r\n      * all the element's methods such that field accesses are intercepted\r\n-     * in-line.\r\n+     * in-line. If {@link #canRedefineClasses()} returns <code>false</code>,\r\n+     * this method is a no-op.\r\n      */\r\n     public static void redefineClasses(OpenJPAConfiguration conf,\r\n         final Map<Class,byte[]> classes) {\r\n-        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n-        if (classes == null || classes.size() == 0)\r\n+        if (classes == null || classes.size() == 0 || !canRedefineClasses())\r\n             return;\r\n \r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n         Instrumentation inst = null;\r\n         ClassFileTransformer t = null;\r\n         try {\r"},{"sha":"d0365e201ff16c07458ef23a353c3a4d011ab39a","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -104,10 +104,10 @@\n \r\n         boolean redefine = ClassRedefiner.canRedefineClasses();\r\n         if (redefine)\r\n-            log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r\n+            log.info(_loc.get(\"enhance-and-subclass-and-redef-start\",\r\n                 classes));\r\n         else\r\n-            log.info(_loc.get(\"enhance-and-subclass-and-redef-start\",\r\n+            log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r\n                 classes));\r\n \r\n         final Map<Class, byte[]> map = new HashMap<Class, byte[]>();\r\n@@ -139,12 +139,14 @@ public void write(BCClass bc) throws IOException {\n             unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n                 classes, unspecified);\r\n \r\n-            enhancer.run();\r\n-            try {\r\n-                enhancer.record();\r\n-            } catch (IOException e) {\r\n-                // our impl of BytecodeWriter doesn't throw IOException\r\n-                throw new InternalException(e);\r\n+            int runResult = enhancer.run();\r\n+            if (runResult == PCEnhancer.ENHANCE_PC) {\r\n+                try {\r\n+                    enhancer.record();\r\n+                } catch (IOException e) {\r\n+                    // our impl of BytecodeWriter doesn't throw IOException\r\n+                    throw new InternalException(e);\r\n+                }\r\n             }\r\n         }\r\n \r"},{"sha":"9af0c0c5d4ef016c2df750aebb3490951628e7b8","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -60,14 +60,24 @@\n     public static void premain(String args, Instrumentation inst) {\n         Options opts = Configurations.parseProperties(args);\n \n-        if (opts.getBooleanProperty(\n-            \"ClassLoadEnhancement\", \"classLoadEnhancement\", true))\n-            registerClassLoadEnhancer(inst, opts);\n-\n-        // Deprecated property setting\n-        if (opts.getBooleanProperty(\n-            \"RuntimeEnhancement\", \"runtimeEnhancement\", true))\n+        if (opts.containsKey(\"ClassLoadEnhancement\") ||\n+            opts.containsKey(\"classLoadEnhancement\")) {\n+            if (opts.getBooleanProperty(\n+                \"ClassLoadEnhancement\", \"classLoadEnhancement\", true))\n+                registerClassLoadEnhancer(inst, opts);\n+        }\n+        else if (opts.containsKey(\"RuntimeEnhancement\") ||\n+            opts.containsKey(\"runtimeEnhancement\")) {\n+            // Deprecated property setting\n+            if (opts.getBooleanProperty(\n+                \"RuntimeEnhancement\", \"runtimeEnhancement\", true))\n+                registerClassLoadEnhancer(inst, opts);\n+        } else {\n+            // if neither is set, then we should be turning it on. We need this\n+            // logic instead of just a getBooleanProperty() because of the\n+            // backwards-compat logic flow.\n             registerClassLoadEnhancer(inst, opts);\n+        }\n \n         if (opts.getBooleanProperty(\n             \"RuntimeRedefinition\", \"runtimeRedefinition\", true)) {"},{"sha":"7436b2ebd636577263eb8c0496955accb43c9539","filename":"openjpa-kernel/pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n         <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.0.0</version>\r\n+        <version>1.0.1</version>\r\n     </parent>\r\n     <profiles>\r\n         <profile>\r\n@@ -90,6 +90,7 @@\n             <plugin>\r\n                 <groupId>org.codehaus.mojo</groupId>\r\n                 <artifactId>javacc-maven-plugin</artifactId>\r\n+                <version>2.1</version>\r\n                 <executions>\r\n                     <execution>\r\n                         <id>jjtree-jpql</id>\r"},{"sha":"cc2b374529250dffdebbc916a640e21562d5ebb3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -611,6 +611,14 @@\n      * @since 0.3.0\n      */\n     public MetaDataRepository getMetaDataRepositoryInstance();\n+    \n+    /**\n+     * Returns true if a metaDataRepository has been created for this \n+     * configuration.\n+     * \n+     * @since 1.1.0 1.0.1\n+     */\n+    public boolean metaDataRepositoryAvailable();\n \n     /**\n      * Create a new empty metadata repository of the configured type.\n@@ -1399,9 +1407,9 @@\n     /**\n      * Specifies how OpenJPA handles unenhanced types. Possible values are:\n      * <ul>\n-     * <li><code>enabled</code>: Runtime optimization of persistent types\n+     * <li><code>supported</code>: Runtime optimization of persistent types\n      * is available. This is the default</li>\n-     * <li><code>disabled</code>: Runtime optimization of persistent types\n+     * <li><code>unsupported</code>: Runtime optimization of persistent types\n      * is not available. An exception will be thrown if the system loads with\n      * persistent types that are not enhanced.</li>\n      * <li><code>warn</code>: Runtime optimization of persistent types is\n@@ -1427,9 +1435,9 @@\n      * Return the runtime class optimization setting as one of the\n      * following symbolic constants:\n      * <ul>\n-     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_ENABLED}</li>\n-     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_DISABLED}</li>\n-     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_WARN}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#SUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#UNSUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#WARN}</li>\n      * </ul>\n      *\n      * @since 1.0.0\n@@ -1440,9 +1448,9 @@\n      * Set the runtime class optimization setting as one of the\n      * following symbolic constants:\n      * <ul>\n-     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_ENABLED}</li>\n-     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_DISABLED}</li>\n-     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_WARN}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#SUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#UNSUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#WARN}</li>\n      * </ul>\n      *\n      * @since 1.0.0"},{"sha":"150cd3b019a7ca6fc01b45eec39f6eff3a395ba7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -852,6 +852,10 @@ public MetaDataRepository getMetaDataRepositoryInstance() {\n             metaRepository = newMetaDataRepositoryInstance();\n         return metaRepository;\n     }\n+    \n+    public boolean metaDataRepositoryAvailable(){ \n+        return metaRepository != null; \n+    }\n \n     public MetaDataRepository newMetaDataRepositoryInstance() {\n         return (MetaDataRepository) metaRepositoryPlugin.instantiate("},{"sha":"4d89d3eadbbefa7144d57b337ef71aebe7e3447c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -45,8 +45,21 @@\n     public static final String REVISION_NUMBER;\n \n     static {\n-        Package pack = OpenJPAVersion.class.getPackage();\n-        String vers = pack == null ? null : pack.getImplementationVersion();\n+        Properties revisionProps = new Properties();\n+        try {\n+            InputStream in = OpenJPAVersion.class.getResourceAsStream\n+                (\"/META-INF/org.apache.openjpa.revision.properties\");\n+            if (in != null) {\n+                try {\n+                    revisionProps.load(in);\n+                } finally {\n+                    in.close();\n+                }\n+            }\n+        } catch (Exception e) {\n+        }\n+\n+        String vers = revisionProps.getProperty(\"openjpa.version\");\n         if (vers == null || \"\".equals(vers.trim()))\n             vers = \"0.0.0\";\n         VERSION_NUMBER = vers;\n@@ -71,21 +84,7 @@\n             patch = 0;\n         }\n \n-        String revision = \"\";\n-        try {\n-            InputStream in = OpenJPAVersion.class.getResourceAsStream\n-                (\"/META-INF/org.apache.openjpa.revision.properties\");\n-            if (in != null) {\n-                try {\n-                    Properties props = new Properties();\n-                    props.load(in);\n-                    revision = props.getProperty(\"revision.number\");\n-                } finally {\n-                    in.close();\n-                }\n-            }\n-        } catch (Exception e) {\n-        }\n+        String revision = revisionProps.getProperty(\"revision.number\");\n \n         MAJOR_RELEASE = major;\n         MINOR_RELEASE = minor;"},{"sha":"38b194abafa63ae95d18710a6aec01f4c2fb7f51","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.datacache;\n \n+import java.security.AccessController;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n@@ -28,6 +29,7 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -97,8 +99,9 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n         _caches.put(cache, schedule);\n         _stop = false;\n         if (_thread == null) {\n-            _thread = new Thread(this, _loc.get(\"scheduler-name\").getMessage());\n-            _thread.setDaemon(true);\n+            _thread = (Thread) AccessController.doPrivileged(J2DoPrivHelper\n+                .newDaemonThreadAction(this, _loc.get(\"scheduler-name\")\n+                    .getMessage()));\n             _thread.start();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"scheduler-start\", _thread.getName()));"},{"sha":"976ccea7b1674ec57da02085e73e7ec219e74ee0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -696,8 +696,8 @@ private static BCField findField(BCMethod meth, Instruction template,\n \n         BCField field = null, cur;\n         Instruction templateIns, prevIns, earlierIns;\n-        int backupCount = 3;\n         while (code.searchForward(template)) {\n+            int backupCount = 3;\n             templateIns = code.previous();\n             if (!code.hasPrevious())\n                 return null;\n@@ -4338,7 +4338,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n                 log.trace(_loc.get(\"enhance-running\", o));\n \n             if (o instanceof String)\n-                bc = project.loadClass((String) o);\n+                bc = project.loadClass((String) o, loader);\n             else\n                 bc = project.loadClass((Class) o);\n             enhancer = new PCEnhancer(conf, bc, repos, loader);"},{"sha":"1f620154d2a25b5cbee5b5fca7dbf87fa5aacb20","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -388,9 +388,11 @@ public void close() {\n                     broker.close();\n             }\n \n-            // remove metadata repository from listener list\n-            PCRegistry.removeRegisterClassListener\n-                (_conf.getMetaDataRepositoryInstance());\n+            if(_conf.metaDataRepositoryAvailable()) {\n+                // remove metadata repository from listener list\n+                PCRegistry.removeRegisterClassListener\n+                    (_conf.getMetaDataRepositoryInstance());\n+            }\n \n             _conf.close();\n             _closed = true;"},{"sha":"3a924b45b033a19f43aea702f43d0b2586a1f8a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -1430,7 +1430,15 @@ private void setRollbackOnlyInternal(Throwable cause) {\n                 _runtime.getTransactionManager().getTransaction();\n             if (trans == null)\n                 throw new InvalidStateException(_loc.get(\"null-trans\"));\n-            _runtime.setRollbackOnly(cause);\n+            // ensure tran is in a valid state to accept the setRollbackOnly\n+            int tranStatus = trans.getStatus();\n+            if ((tranStatus != Status.STATUS_NO_TRANSACTION)\n+                    && (tranStatus != Status.STATUS_ROLLEDBACK)\n+                    && (tranStatus != Status.STATUS_COMMITTED))\n+                _runtime.setRollbackOnly(cause);\n+            else if (_log.isTraceEnabled())\n+                _log.trace(_loc.get(\"invalid-tran-status\", new Integer(\n+                        tranStatus), \"setRollbackOnly\"));\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n@@ -1725,7 +1733,7 @@ public boolean endOperation() {\n                 detachAllInternal(null);\n             }\n             if (_operationCount < 1)\n-                throw new InternalException();\n+                throw new InternalException(_loc.get(\"multi-threaded-access\"));\n             return _operationCount == 1;\n         } catch (OpenJPAException ke) {\n             throw ke;"},{"sha":"f868bb5f6761ca3c9629d7b63c61bfeb11c5fdc7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -527,6 +527,7 @@ public void reproxy(DetachedStateManager dsm) {\n                         break;\n                     }\n                     // no break\n+                case JavaTypes.CALENDAR:\n                 case JavaTypes.DATE:\n                 case JavaTypes.OBJECT:\n                     sm.provideField(getDetachedPersistenceCapable(), this, i);"},{"sha":"0975f875fc421a89060c0069d27e40ba051c7a11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -604,6 +604,8 @@ private int getAvailableRecursionDepth(FieldMetaData fm, Class type,\n         int cur;\n         for (int i = 0; max != FetchGroup.DEPTH_INFINITE \n             && i < groups.length; i++) {\n+            // ignore custom groups that are inactive in this configuration\n+            if (!this.hasFetchGroup(groups[i])) continue;\n             cur = meta.getFetchGroup(groups[i]).getRecursionDepth(fm);\n             if (cur == FetchGroup.DEPTH_INFINITE || cur > max) \n                 max = cur;\n@@ -625,7 +627,7 @@ private int getAvailableRecursionDepth(FieldMetaData fm, Class type,\n             return avail;\n         return Math.min(max, avail);\n     }\n- \n+\n     /**\n      * Return the relation type of the given field.\n      */"},{"sha":"c770456acc9a6f349e0dd73e9fc6834ea845fef6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.meta;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.MalformedURLException;\n@@ -656,9 +657,15 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scan-found-names\", clss, file));\n                     names.addAll(Arrays.asList(clss));\n-                    mapPersistentTypeNames(((File) AccessController\n+                    File f = (File) AccessController\n                         .doPrivileged(J2DoPrivHelper\n-                            .getAbsoluteFileAction(file))).toURL(), clss);\n+                            .getAbsoluteFileAction(file));\n+                    try {\n+                        mapPersistentTypeNames(AccessController\n+                            .doPrivileged(J2DoPrivHelper.toURLAction(f)), clss);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (FileNotFoundException) pae.getException();\n+                    }\n                 }\n             }\n         }"},{"sha":"cd7c86da6125ecb036bf603f589ee6ad53e05d92","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":39,"deletions":1,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -20,10 +20,13 @@\n \r\n import java.io.Serializable;\r\n import java.util.ArrayList;\r\n+import java.util.Collections;\r\n import java.util.HashMap;\r\n+import java.util.HashSet;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n import org.apache.commons.lang.ObjectUtils;\r\n@@ -74,6 +77,7 @@\n     private final ClassMetaData _meta;\r\n     private final boolean _readOnly;\r\n     private List _includes;\r\n+    private Set  _containedBy;\r\n     private Map _depths;\r\n     private Boolean _postLoad;\r\n \r\n@@ -105,6 +109,9 @@ void copy(FetchGroup fg) {\n         if (fg._includes != null)\r\n             for (Iterator itr = fg._includes.iterator(); itr.hasNext();)\r\n                 addDeclaredInclude((String) itr.next());\r\n+        if (fg._containedBy != null) \r\n+        \tthis._containedBy = new HashSet(fg._containedBy);\r\n+        \r\n         if (fg._depths != null) {\r\n             Map.Entry entry;\r\n             for (Iterator itr = fg._depths.entrySet().iterator(); \r\n@@ -152,7 +159,7 @@ public boolean includes(String fgName, boolean recurse) {\n         if (_includes != null) {\r\n             if (_includes.contains(fgName))\r\n                 return true;\r\n-            if (recurse) {\r\n+            if (recurse && _meta!=null) {\r\n                 FetchGroup fg;\r\n                 for (Iterator i = _includes.iterator(); i.hasNext();) {\r\n                     fg = _meta.getFetchGroup((String) i.next());\r\n@@ -172,6 +179,37 @@ public boolean includes(String fgName, boolean recurse) {\n         }\r\n         return false;\r\n     }\r\n+    \r\n+    /**\r\n+     * Adds this receiver as one of the included fetch groups of the given\r\n+     * parent. \r\n+     * The parent fecth group will include this receiver as a side-effect of\r\n+     * this call.\r\n+     * \r\n+     * @see #includes(String, boolean)\r\n+     * @see #addDeclaredInclude(String) \r\n+     * \r\n+     * @return true if given parent is a new addition. false othrwise.\r\n+     * @since 1.1.1   \r\n+     */\r\n+    public boolean addContainedBy(FetchGroup parent) {\r\n+    \tparent.addDeclaredInclude(this.getName());\r\n+    \tif (_containedBy==null)\r\n+    \t\t_containedBy = new HashSet();\r\n+    \treturn _containedBy.add(parent.getName());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Gets the name of the fetch groups in which this receiver has been\r\n+     * included.\r\n+     * \r\n+     * @see #addContainedBy(FetchGroup)\r\n+     * @since 1.1.1   \r\n+     */\r\n+    public Set getContainedBy() {\r\n+    \treturn (_containedBy == null) ? Collections.EMPTY_SET :\r\n+            Collections.unmodifiableSet(_containedBy);\r\n+    }\r\n \r\n     /**\r\n      * Return the fetch group names declared included by this group.\r"},{"sha":"bda0f63f442fb91262f560a6e97526cd7bdb39e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -63,6 +63,8 @@\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.UserException;\n+\n import serp.util.Strings;\n \n /**\n@@ -594,7 +596,6 @@ public boolean isInDefaultFetchGroup() {\n                 // field left as default; dfg setting depends on type\n                 switch (getTypeCode()) {\n                     case JavaTypes.OBJECT:\n-                    case JavaTypes.PC:\n                         if (isSerializable() || isEnum())\n                             _dfg = DFG_TRUE;\n                         else\n@@ -608,6 +609,7 @@ public boolean isInDefaultFetchGroup() {\n                         break;\n                     case JavaTypes.COLLECTION:\n                     case JavaTypes.MAP:\n+                    case JavaTypes.PC:\n                     case JavaTypes.PC_UNTYPED:\n                         _dfg = DFG_FALSE;\n                         break;\n@@ -1214,8 +1216,16 @@ public boolean isExternalized() {\n      */\n     public Object getExternalValue(Object val, StoreContext ctx) {\n         Map extValues = getExternalValueMap();\n-        if (extValues != null)\n-            return extValues.get(val);\n+        if (extValues != null) {\n+            Object foundVal = extValues.get(val);\n+            if (foundVal == null) {\n+                throw new UserException(_loc.get(\"bad-externalized-value\",\n+                        new Object[] { val, extValues.keySet(), this }))\n+                        .setFatal(true).setFailedObject(val);\n+            } else {\n+                return foundVal;\n+            }\n+        }\n \n         Method externalizer = getExternalizerMethod();\n         if (externalizer == null)"},{"sha":"48fcad7513a707da93ea1ebf7fbaf377ae117d5d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":54,"deletions":10,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -26,6 +26,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.security.PrivilegedActionException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n@@ -438,7 +439,7 @@ private ProxyCalendar getFactoryProxyCalendar(Class type) {\n      * Return the cached factory proxy for the given bean type.\n      */\n     private ProxyBean getFactoryProxyBean(Object orig) {\n-        Class type = orig.getClass();\n+        final Class type = orig.getClass();\n         if (isUnproxyable(type))\n             return null;\n \n@@ -449,7 +450,12 @@ private ProxyBean getFactoryProxyBean(Object orig) {\n                 ProxyBean.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null) {\n-                BCClass bc = generateProxyBeanBytecode(type, true);\n+                BCClass bc = (BCClass) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return generateProxyBeanBytecode(type, true);\n+                        }\n+                    });\n                 if (bc != null)\n                     pcls = GeneratedClasses.loadBCClass(bc, l);\n             }\n@@ -517,7 +523,8 @@ protected BCClass generateProxyCollectionBytecode(Class type,\n         boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyCollection.class);\n  \n@@ -554,7 +561,8 @@ private static void assertNotFinal(Class type) {\n     protected BCClass generateProxyMapBytecode(Class type, boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyMap.class);\n  \n@@ -573,7 +581,8 @@ protected BCClass generateProxyMapBytecode(Class type, boolean runtime) {\n     protected BCClass generateProxyDateBytecode(Class type, boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyDate.class);\n  \n@@ -592,7 +601,8 @@ protected BCClass generateProxyCalendarBytecode(Class type,\n         boolean runtime) {\n         assertNotFinal(type);\n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyCalendar.class);\n  \n@@ -626,7 +636,8 @@ protected BCClass generateProxyBeanBytecode(Class type, boolean runtime) {\n         }\n \n         Project project = new Project(); \n-        BCClass bc = project.loadClass(getProxyClassName(type, runtime));\n+        BCClass bc = (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(project, getProxyClassName(type, runtime))); \n         bc.setSuperclass(type);\n         bc.declareInterface(ProxyBean.class);\n  \n@@ -708,6 +719,32 @@ private void addProxyMethods(BCClass bc, boolean changeTracker) {\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n \n+        /* \n+         * clone (return detached proxy object)\n+         * Note:  This method is only being provided to satisfy a quirk with\n+         * the IBM JDK -- while comparing Calendar objects, the clone() method\n+         * was invoked.  So, we are now overriding the clone() method so as to\n+         * provide a detached proxy object (null out the StateManager).\n+         */\n+        m = bc.declareMethod(\"clone\", Object.class, null);\n+        m.makePublic();\n+        code = m.getCode(true);\n+        code.aload().setThis();\n+        code.invokespecial().setMethod(bc.getSuperclassType(), \"clone\",\n+                Object.class, null);  \n+        code.checkcast().setType(Proxy.class);  \n+        int other = code.getNextLocalsIndex();\n+        code.astore().setLocal(other);\n+        code.aload().setLocal(other);\n+        code.constant().setNull();\n+        code.constant().setValue(0);\n+        code.invokeinterface().setMethod(Proxy.class, \"setOwner\", void.class,\n+                new Class[] { OpenJPAStateManager.class, int.class });\n+        code.aload().setLocal(other);\n+        code.areturn();\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        \n         if (changeTracker) {\n             m = bc.declareMethod(\"getChangeTracker\", ChangeTracker.class, null);\n             m.makePublic();\n@@ -1596,7 +1633,7 @@ public static void main(String[] args)\n             })); \n         }\n \n-        ProxyManagerImpl mgr = new ProxyManagerImpl();\n+        final ProxyManagerImpl mgr = new ProxyManagerImpl();\n         Class cls;\n         BCClass bc;\n         for (int i = 0; i < types.size(); i++) {\n@@ -1618,8 +1655,15 @@ else if (Date.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyDateBytecode(cls, false);\n             else if (Calendar.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyCalendarBytecode(cls, false);\n-            else\n-                bc = mgr.generateProxyBeanBytecode(cls, false);\n+            else {\n+                final Class fCls = cls;\n+                bc = (BCClass) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return mgr.generateProxyBeanBytecode(fCls, false);\n+                        }\n+                    });\n+            }\n \n             System.out.println(bc.getName());\n             bc.write(new File(dir, bc.getClassName() + \".class\"));"},{"sha":"d757807d1e85b38017a0056cef9d548f1978cedb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -128,7 +128,7 @@ property-no-getter: No getter method found for persistent property \"{0}\".  All \\\n \tpersistent properties must have getter methods.\n property-no-setter: No setter method found for persistent property \"{0}\", and \\\n \tbytecode analysis of the getter did not reveal a clear backing field. \\\n-\tPlease create a setter method for this property (it may be private). \n+\tPlease create a setter method for this property.\n property-setter-getter-mismatch: Bytecode analysis of the setter and getter \\\n \tmethods for persistent property \"{0}\" indicates that the two methods \\\n \tmight be acting on different backing fields.  The setter method assigns to \\\n@@ -139,9 +139,9 @@ subclasser-error-field: Error while processing persistent field {1}, declared \\\n \tin {2}. Error details: {0}\n subclasser-error-meta: Error while processing persistent type {1}, declared \\\n \tin {2}. Error details: {0}\n-subclasser-contract-violation-field: Possible violation of subclassing contract\\\n-\tdetected while processing persistent field {1}, declared in {2}. Are you \\\n-\tsure you are obeying the OpenJPA requirements? Details: {0}\n+subclasser-contract-violation-field: Possible violation of subclassing \\\n+    contract detected while processing persistent field {1}, declared in {2}. \\\n+    Are you sure you are obeying the OpenJPA requirements? Details: {0}\n subclasser-setter-getter-field-mismatch: Mismatch between getter and setter.\n subclasser-no-ifaces: OpenJPA does not currently support automatic handling of \\\n     interface types. Failed type: {0}\n@@ -198,4 +198,4 @@ no-accessor: Could not find method called {0} in type {1}.\n unspecified-unenhanced-types: One or more of the types in {0} have relations \\\n     to other unenhanced types that were not specified. These unspecified types \\\n     are: {1}\n-enhance-error: An error occurred while enhancing {0}. Exception message: {1}\n\\ No newline at end of file\n+enhance-error: An error occurred while enhancing {0}. Exception message: {1}"},{"sha":"7a17bc019bffdd5cbc6054b0a21bc69d9c12d37b","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -151,7 +151,7 @@ attach-version-del: Attempted to attach deleted instance type \"{0}\" with oid \\\n \tdefault value.\n attach-wrongclass: Attempted to attach instance \"{0}\" of type \"{1}\", but this \\\n \tinstance is already in the datastore as type \"{2}\".\n-sjvm-acquired-lock: Acquired an exclusive lock on oid \"{0}\": \"{1}\".\n+sjvm-acquired-lock: Acquired an exclusive lock \"{0}\" on oid \"{1}\".\n sjvm-released-lock: Released lock \"{0}\".\n conn-not-supported: This data store cannot return connections.\n incremental-flush-not-supported: This data store does not support incremental \\\n@@ -213,10 +213,10 @@ no-field: Field \"{0}\" is not declared in \"{1}\", or is not managed.\n no-field-index: \"{0}\" is not the index of any managed field in \"{1}\".\n cant-cascade-persist: Encountered unmanaged object \"{0}\" in persistent field \\\n \t\"{1}\" of managed object \"{2}\" during flush.  However, this field does not \\\n-\tallow cascade persist.  You cannot flush unmanaged objects.\n+\tallow to be CascadeType.PERSIST.  You cannot flush unmanaged objects.\n cant-cascade-attach: Encountered new object \"{0}\" in persistent field \\\n \t\"{1}\" of managed object \"{2}\" during attach.  However, this field does not \\\n-\tallow cascade attach.  You cannot attach a reference to a new object \\\n+\tallow to cascade during attach.  You cannot attach a reference to a new object \\\n \twithout cascading.\n ref-to-deleted: Encountered deleted object \"{0}\" in persistent field \\\n \t\"{1}\" of managed object \"{2}\" during flush.\n@@ -245,7 +245,8 @@ no-impls: Unable to execute a query on type \"{0}\".  This class or interface \\\n \tis not mapped, and does not have any mapped implementors.\n bad-param-name: The parameter name or position \"{0}\" passed to \\\n \texecute() is not valid.  All map keys must be a declared parameter \\\n-\tname or a number matching the parameter position. \n+\tname or a number matching the parameter position. Native queries only \\\n+\tallow the use of positional parameters.\n force-in-mem: This query on type \"{0}\" must load the entire candidate class \\\n \textent and evaluate the query in-memory.  This may be very slow.  The \\\n \tquery must be executed in memory because OpenJPA is configured with \\\n@@ -313,7 +314,8 @@ cant-set: Result type \"{0}\" does not have any public fields or setter methods \\\n \tgeneric put(Object,Object) method that can be used, nor does it have a \\\n \tpublic constructor that takes the types {2}.\n pack-err: There was an error packing the projection and/or aggregate results \\\n-\tof the query into result type \"{0}\".  See the nested throwable for details.\n+\tof the query into result type \"{0}\".  See the nested Throwable exception \\\n+\tfor details.\n pack-instantiation-err: There was an error creating an instance of type \"{0}\" \\\n \twhen packing the projection and/or aggregate results of the query. Ensure \\\n \tthat you have defined a public no-args constructor in \"{0}\".\n@@ -323,7 +325,7 @@ bad-inmem-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Object, \\\n \tOpenJPA is attempting to execute this query in-memory; if you implemented \\\n     the datastore method instead (a method with the same signature but without \\\n     the Object argument) and want this query to execute in the datastore, \\\n-    either make the query before modifying objects in the current transaction, \\\n+    either create the query before modifying objects in the current transaction, \\\n \tset IgnoreCache to true, or set the openjpa.FlushBeforeQueries property to \\\n \ttrue.\n bad-datastore-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Map, \\\n@@ -373,3 +375,9 @@ existing value assigned to this field: {0}.  This existing value was either \\\n provided via an initializer or by calling the setter method.  You either need \\\n to remove the @GeneratedValue annotation or modify the code to remove the \\\n initializer processing.\n+invalid-tran-status: The transaction was not in a valid state ({0}) to \\\n+accept the \"{1}\" method invocation.  Processing will continue.\n+multi-threaded-access: Multiple concurrent threads attempted to access a \\\n+    single broker. By default brokers are not thread safe; if you require \\\n+    and/or intend a broker to be accessed by more than one thread, set the \\\n+    openjpa.Multithreaded property to true to override the default behavior."},{"sha":"652ca20e53f17c574f306967cff5fb6803821b9b","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -37,7 +37,7 @@ assigned-sup: Set persistence-capable superclass of \"{0}\" to \"{1}\".\n found-pcs: Found {0} classes with metadata in {1} milliseconds.\n not-managed-interface: Cannot set type \"{1}\" as interface \"{0}\" implementor. \\\n     \"{0}\" is not a managed interface.\n-declare-non-interface: Cannot declare on type \"{0}\" interface \"{1}\" as it is \\\n+declare-non-interface: Cannot declare type \"{0}\" on \"{1}\" as it is \\\n     not an interface.\n unmanaged-sup-field: Superclass field \"{0}\" is mapped in the metadata for \\\n \tsubclass \"{1}\", but is not a persistent field.\n@@ -210,7 +210,7 @@ bad-drop: The metadata for some of the following classes may not have \\\n \tbeen dropped: {0}\n bad-store: Your configured MetaDataIO cannot create metadata.  You \\\n \tmust create it by hand. \n-tool-running: Metadata tool running on type \"{0}\" with action \"{1}\".\n+tool-running: MetaData Tool running on type \"{0}\" with action \"{1}\".\n tool-record: Recording metadata changes.\n tool-usage: Usage: java org.apache.openjpa.meta.MetaDataTool\\n\\\n \t\\t[-properties/-p <properties file or resource>]\\n\\\n@@ -304,3 +304,5 @@ interface-load: Dynamic implementation of managed \"{0}\" can not be defined \\\n interface-load2: Enhanced dynamic implementaion of managed \"{0}\" can not be \\\n \tdefined using classloader \"{1}\". See nested exception for details.\n interface-badenhance: Dynamic implementaion of \"{0}\" can not be enhanced.\n+bad-externalized-value: Value \"{0}\" was not found in the list of \\\n+\tExternalValues for field \"{2}\". Valid values are {1}"},{"sha":"53fa96c2167f28ba218a810de75e22d1ee86a412","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":71,"deletions":5,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -46,6 +46,7 @@\n import java.util.TreeMap;\n import java.util.Vector;\n \n+import org.apache.openjpa.util.Proxy;\n import junit.framework.TestCase;\n import junit.textui.TestRunner;\n \n@@ -151,12 +152,20 @@ private static void populate(SortedSet coll) {\n      */\n     private static void assertSortedSetsEqual(SortedSet s1, SortedSet s2) {\n         assertTrue(s1.getClass() == s2.getClass());\n+        assertSortedSetsEquals(s1, s2);\n+    }  \n+\n+    /**\n+     * Assert that the given sets are exactly the same (minus the class).\n+     */\n+    private static void assertSortedSetsEquals(SortedSet s1, SortedSet s2) {\n         assertEquals(s1.comparator(), s2.comparator());\n         assertEquals(s1.size(), s2.size());\n         Iterator itr1 = s1.iterator();\n         Iterator itr2 = s2.iterator();\n         while (itr1.hasNext())\n             assertTrue(itr1.next() == itr2.next());\n+        assertTrue(s1.equals(s2));\n     }  \n \n     public void testCopyNullCollection() {\n@@ -176,6 +185,16 @@ public void testCopyProxyCollection() {\n             _mgr.copyCollection(torig));\n     }\n \n+    public void testCloneProxyCollection() {\n+        // List doesn't support clone()\n+        \n+        TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, \n+            new CustomComparator());\n+        assertTrue(torig.comparator() instanceof CustomComparator);\n+        populate(torig);\n+        assertSortedSetsEquals(new TreeSet(torig), (SortedSet) torig.clone());\n+    }\n+\n     public void testListMethodsProxied() \n         throws Exception {\n         Class proxy = _mgr.newCollectionProxy(ArrayList.class, null, null).\n@@ -433,6 +452,13 @@ public void testCopySortedMaps() {\n      */\n     private static void assertSortedMapsEqual(SortedMap m1, SortedMap m2) {\n         assertTrue(m1.getClass() == m2.getClass());\n+        assertSortedMapsEquals(m1, m2);\n+    }  \n+\n+    /**\n+     * Assert that the given maps are exactly the same (minus the class).\n+     */\n+    private static void assertSortedMapsEquals(SortedMap m1, SortedMap m2) {\n         assertEquals(m1.comparator(), m2.comparator());\n         assertEquals(m1.size(), m2.size());\n         Map.Entry entry1;\n@@ -445,6 +471,7 @@ private static void assertSortedMapsEqual(SortedMap m1, SortedMap m2) {\n             assertTrue(entry1.getKey() == entry2.getKey());\n             assertTrue(entry1.getValue() == entry2.getValue());\n         }\n+        assertTrue(m1.equals(m2));\n     }  \n \n     public void testCopyNullMap() {\n@@ -464,6 +491,16 @@ public void testCopyProxyMap() {\n             _mgr.copyMap(torig));\n     }\n \n+    public void testCloneProxyMap() {\n+        // Map does not support clone()\n+        \n+        TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, \n+            new CustomComparator());\n+        assertTrue(torig.comparator() instanceof CustomComparator);\n+        populate(torig);\n+        assertSortedMapsEquals(new TreeMap(torig), (SortedMap) torig.clone());\n+    }\n+\n     public void testMapMethodsProxied() \n         throws Exception {\n         Class proxy = _mgr.newMapProxy(HashMap.class, null, null, null).\n@@ -551,8 +588,15 @@ public void testCopyDates() {\n      * Assert that the given dates are exactly the same.\n      */\n     private static void assertDatesEqual(Date d1, Date d2) {\n-        assertTrue(d1.getClass() == d1.getClass());\n-        assertEquals(d1, d2);\n+        assertTrue(d1.getClass() == d2.getClass());\n+        assertDatesEquals(d1, d2);\n+    }  \n+\n+    /**\n+     * Assert that the given dates are exactly the same (minus the class).\n+     */\n+    private static void assertDatesEquals(Date d1, Date d2) {\n+        assertTrue(d1.equals(d2));\n     }  \n \n     public void testCopyNullDate() {\n@@ -562,7 +606,13 @@ public void testCopyNullDate() {\n     public void testCopyProxyDate() {\n         Date orig = (Date) _mgr.newDateProxy(Time.class);\n         orig.setTime(1999);\n-        assertDatesEqual(new Date(orig.getTime()), (Date) _mgr.copyDate(orig));\n+        assertDatesEqual(new Time(orig.getTime()), (Date) _mgr.copyDate(orig));\n+    }\n+\n+    public void testCloneProxyDate() {\n+        Date orig = (Date) _mgr.newDateProxy(Time.class);\n+        orig.setTime(1999);\n+        assertDatesEquals(new Time(orig.getTime()), (Date) orig.clone());\n     }\n \n     public void testDateMethodsProxied() \n@@ -647,8 +697,15 @@ private static void populate(Calendar cal) {\n      * Assert that the given dates are exactly the same.\n      */\n     private static void assertCalendarsEqual(Calendar c1, Calendar c2) {\n-        assertTrue(c1.getClass() == c1.getClass());\n-        assertEquals(c1, c2);\n+        assertTrue(c1.getClass() == c2.getClass());\n+        assertCalendarsEquals(c1, c2);\n+    }  \n+\n+    /**\n+     * Assert that the given dates are exactly the same (minus the class).\n+     */\n+    private static void assertCalendarsEquals(Calendar c1, Calendar c2) {\n+        assertTrue(c1.equals(c2));\n     }  \n \n     public void testCopyNullCalendar() {\n@@ -664,6 +721,15 @@ public void testCopyProxyCalendar() {\n         assertCalendarsEqual(cal, _mgr.copyCalendar(orig));\n     }\n \n+    public void testCloneProxyCalendar() {\n+        Calendar orig = (Calendar) _mgr.newCalendarProxy\n+            (GregorianCalendar.class, TimeZone.getTimeZone(\"CST\"));\n+        populate(orig);\n+        Calendar cal = new GregorianCalendar();\n+        populate(cal);\n+        assertCalendarsEquals(cal, (Calendar)orig.clone());\n+    }\n+\n     public void testCalendarAbstractClassProxy() {\n         Proxy cal = _mgr.newCalendarProxy(Calendar.class, null);\n         assertNotNull(cal);"},{"sha":"288c7966bccaacb0fc7204fba2b373ee1dfea652","filename":"openjpa-lib-5/pom.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib-5/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+\r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.\r\n+-->\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+    <modelVersion>4.0.0</modelVersion>\r\n+    <groupId>org.apache.openjpa</groupId>\r\n+    <artifactId>openjpa-lib-5</artifactId>\r\n+    <packaging>jar</packaging>\r\n+    <name>OpenJPA Utilities 1.5</name>\r\n+    <description>OpenJPA Utilities 1.5</description>\r\n+    <url>http://openjpa.apache.org</url>\r\n+    <parent>\r\n+        <groupId>org.apache.openjpa</groupId>\r\n+        <artifactId>openjpa-parent</artifactId>\r\n+        <version>1.0.1</version>\r\n+    </parent>\r\n+    <dependencies>\r\n+        <dependency>\r\n+            <groupId>org.apache.openjpa</groupId>\r\n+            <artifactId>openjpa-lib</artifactId>\r\n+            <version>${pom.version}</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+    </dependencies>\r\n+    <build>\r\n+        <plugins>\r\n+            <plugin>\r\n+                <groupId>org.apache.maven.plugins</groupId>\r\n+                <artifactId>maven-compiler-plugin</artifactId>\r\n+                <configuration>\r\n+                    <source>1.5</source>\r\n+                    <target>1.5</target>\r\n+                </configuration>\r\n+            </plugin>\r\n+        </plugins>\r\n+    </build>\r\n+</project>\r"},{"sha":"cf42913f326e999026c7fabdd31bedc25b4bf8ba","filename":"openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib-5/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.lang.reflect.AnnotatedElement;\r\n+import java.security.PrivilegedAction;\r\n+\r\n+/**\r\n+ * Helper class to obtain the Privilege(Exception)Action object to perform\r\n+ * Java 2 doPrivilege security sensitive function call in the following\r\n+ * methods:\r\n+ * <ul>\r\n+ * <li>AnnotatedElement.getAnnotations\r\n+ * <li>AnnotatedElement.getDeclaredAnnotations\r\n+ * <li>AnnotatedElement.isAnnotationPresent\r\n+ * </ul>\r\n+ *\r\n+ * @author Albert Lee\r\n+ */\r\n+\r\n+public abstract class J2DoPriv5Helper extends J2DoPrivHelper {\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for AnnotatedElement.getAnnotations().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Annotation[]\r\n+     */\r\n+    public static final PrivilegedAction getAnnotationsAction(\r\n+        final AnnotatedElement element) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.getAnnotations();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for\r\n+     *   AnnotatedElement.getDeclaredAnnotations().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Annotation[]\r\n+     */\r\n+    public static final PrivilegedAction getDeclaredAnnotationsAction(\r\n+        final AnnotatedElement element) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.getDeclaredAnnotations();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for\r\n+     *   AnnotatedElement.isAnnotationPresent().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Boolean\r\n+     */\r\n+    public static final PrivilegedAction isAnnotationPresentAction(\r\n+        final AnnotatedElement element, final Class annotationClazz) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.isAnnotationPresent(annotationClazz)\r\n+                    ? Boolean.TRUE : Boolean.FALSE;\r\n+            }\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"8afa06e4a152556786d566eaacff1de820aaf526","filename":"openjpa-lib/pom.xml","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <profiles>\n         <profile>\n@@ -157,9 +157,11 @@\n                                 <property name=\"subversion.revision\"\n                                     value=\"unknown\"/>\n                                 <echo>Revision: ${subversion.revision}</echo>\n+                                <echo>OpenJPA version: ${project.version}</echo>\n                                     \n                                 <mkdir dir=\"${outdir}/META-INF\"/>\n-                                <echo file=\"${outdir}/META-INF/org.apache.openjpa.revision.properties\">revision.number=${subversion.revision}</echo>\n+                                <echo file=\"${outdir}/META-INF/org.apache.openjpa.revision.properties\">revision.number=${subversion.revision}\n+openjpa.version=${project.version}</echo>\n                                 <delete dir=\"${tmpdir}\"/>\n                             </tasks>\n                         </configuration>"},{"sha":"5e17ef96b0aa9f5dc21b639544a4d763552281ae","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":32,"deletions":23,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -181,30 +181,39 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n \n         Class cls = null; \n \n-        // can't have a null reference in the map, so use symbolic \n-        // constant as key\n-        Object key = loader == null ? NULL_LOADER : loader;\n-        Map loaderCache = (Map) _loaders.get(key);\n-        if (loaderCache == null) { // We don't have a cache for this loader.\n-            loaderCache = new ConcurrentHashMap();\n-            _loaders.put(key, loaderCache);\n-        } else {  // We have a cache for this loader.\n-            cls = (Class) loaderCache.get(clsName);\n-        }\n+        while (cls == null) {\n+            // can't have a null reference in the map, so use symbolic\n+            // constant as key\n+            Object key = loader == null ? NULL_LOADER : loader;\n+            Map loaderCache = (Map) _loaders.get(key);\n+            if (loaderCache == null) { // We don't have a cache for this loader.\n+                loaderCache = new ConcurrentHashMap();\n+                _loaders.put(key, loaderCache);\n+            } else {  // We have a cache for this loader.\n+                cls = (Class) loaderCache.get(clsName);\n+            }\n \n-        if (cls == null) { // we haven't cached this.\n-            try {\n-                cls = Strings.toClass(clsName, findDerivedLoader(conf, loader));\n-                loaderCache.put(clsName, cls);\n-            } catch (RuntimeException re) {\n-                if (val != null)\n-                    re = getCreateException(clsName, val, re);\n-                if (fatal)\n-                    throw re;\n-                Log log = (conf == null) ? null : conf.getConfigurationLog();\n-                if (log != null && log.isErrorEnabled())\n-                    log.error(_loc.get(\"plugin-creation-exception\", val), re);\n-                return null;\n+            if (cls == null) {\n+                try {\n+                    cls = Strings.toClass(clsName, findDerivedLoader(conf,\n+                            loader));\n+                    loaderCache.put(clsName, cls);\n+                } catch (RuntimeException re) {\n+                    if (loader != null)  // Try one more time with loader=null\n+                        loader = null;\n+                    else {\n+                        if (val != null)\n+                            re = getCreateException(clsName, val, re);\n+                        if (fatal)\n+                            throw re;\n+                        Log log = (conf == null) ? null : conf\n+                                .getConfigurationLog();\n+                        if (log != null && log.isErrorEnabled())\n+                            log.error(_loc\n+                                    .get(\"plugin-creation-exception\", val), re);\n+                        return null;\n+                    }\n+                }\n             }\n         }\n "},{"sha":"5753750091abd70680dc6452eb6e8b531c931286","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -49,23 +49,23 @@ public Logger getDelegate() {\n         }\n \n         public boolean isTraceEnabled() {\n-            return _log.getEffectiveLevel().toInt() >= Level.DEBUG_INT;\n+            return _log.isEnabledFor(Level.DEBUG);\n         }\n \n         public boolean isInfoEnabled() {\n-            return _log.getEffectiveLevel().toInt() >= Level.INFO_INT;\n+            return _log.isEnabledFor(Level.INFO);\n         }\n \n         public boolean isWarnEnabled() {\n-            return _log.getEffectiveLevel().toInt() >= Level.WARN_INT;\n+            return _log.isEnabledFor(Level.WARN);\n         }\n \n         public boolean isErrorEnabled() {\n-            return _log.getEffectiveLevel().toInt() >= Level.ERROR_INT;\n+            return _log.isEnabledFor(Level.ERROR);\n         }\n \n         public boolean isFatalEnabled() {\n-            return _log.getEffectiveLevel().toInt() >= Level.FATAL_INT;\n+            return _log.isEnabledFor(Level.FATAL);\n         }\n \n         public void trace(Object o) {"},{"sha":"a6ee36b401c8b26c29a14e54bd83eb699fa4ef10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -20,6 +20,9 @@\n \n import java.io.IOException;\n \n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n import serp.bytecode.lowlevel.ConstantPoolTable;\n \n /**\n@@ -33,6 +36,10 @@\n public class ClassAnnotationMetaDataFilter implements MetaDataFilter {\n \n     private final String[] _annos;\n+    \n+    private static final Localizer _loc = Localizer.forPackage\n+        (ClassAnnotationMetaDataFilter.class);\n+    private Log _log = null;\n \n     /**\n      * Constructor; supply annotation to match against.\n@@ -86,9 +93,16 @@ public boolean matches(Resource rsrc) throws IOException {\n                 idx += 4 + table.readInt(idx);\n             }\n         } catch (ArrayIndexOutOfBoundsException e) {\n+            /*\n+             * This ArrayIndexOutOfBoundsException indicates an incorrectly\n+             * formed .class file. We will eat the exception, log a trace\n+             * message (if a log exists), and return \"false\" to indicate there\n+             * was no match.\n+             */\n             Error cfe = new ClassFormatError(rsrc.getName());\n             cfe.initCause(e);\n-            throw cfe;\n+            if (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"class-arg\", rsrc.getName()), cfe);\n         }\n         return false;\n     }\n@@ -184,4 +198,12 @@ private static int skipFieldOrMethod(ConstantPoolTable table, int idx) {\n         }\n         return skipped;\n     }\n+\n+    public Log getLog() {\n+        return _log;\n+    }\n+\n+    public void setLog(Log _log) {\n+        this._log = _log;\n+    }\n }"},{"sha":"d63f2365bc5c34c49f90ab3ba1ffbb7e819ecb95","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -24,6 +24,7 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.MalformedURLException;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n@@ -111,8 +112,14 @@ public Object next() throws IOException {\n             throw new NoSuchElementException();\n \n         _file = (File) _itr.next();\n-        return ((File) AccessController.doPrivileged(J2DoPrivHelper\n-            .getAbsoluteFileAction(_file))).toURL();\n+        try {\n+            File f = (File) AccessController.doPrivileged(J2DoPrivHelper\n+                .getAbsoluteFileAction(_file));\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.toURLAction(f));\n+        } catch (PrivilegedActionException pae) {\n+            throw (MalformedURLException) pae.getException();\n+        }\n     }\n \n     public InputStream getInputStream() throws IOException {"},{"sha":"57ae0cfe58f7fb88458cf1c51331457120487014","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -142,7 +142,12 @@ public String getName() {\n             content = bout.toByteArray();\n         } else {\n             content = new byte[(int) size];\n-            in.read(content);\n+            int offset = 0;\n+            int read;\n+            while (offset < size &&\n+                (read = in.read(content, offset, (int) size - offset)) != -1) {\n+                offset += read;\n+            }\n         }\n         in.close();\n         return content;"},{"sha":"e6b80be820e2a9b39a88e713688bd7e5286c3ba8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -84,11 +84,6 @@ public List subList(int from, int to) {\n         throw new UnsupportedOperationException();\n     }\n \n-    protected void finalize() throws Throwable {\n-        super.finalize();\n-        close();\n-    }\n-\n     protected void assertOpen() {\n         if (isClosed())\n             throw new NoSuchElementException(_loc.get(\"closed\").getMessage());"},{"sha":"a9d9b42866e01b2b7aa3bfb10f1f526883b08cb0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -25,6 +25,7 @@\n import java.io.IOException;\n import java.lang.reflect.AccessibleObject;\n import java.net.InetAddress;\n+import java.net.MalformedURLException;\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.net.URL;\n@@ -69,6 +70,7 @@\n  * <li>File.isDirectory\n  * <li>File.mkdirs\n  * <li>File.renameTo\n+ * <li>File.toURL\n  * <li>FileInputStream new\n  * <li>FileOutputStream new\n  * <li>System.getProperties\n@@ -79,6 +81,7 @@\n  * <li>Socket.accept\n  * <li>System.getProperty\n  * <li>Thread.getContextClassLoader\n+ * <li>Thread new\n  * <li>TemporaryClassLoader new\n  * <li>URL.openStream\n  * <li>URLConnection.getContent\n@@ -593,6 +596,24 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedExceptionAction object for f.toURL().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Boolean\n+     * @throws MalformedURLException\n+     */\n+    public static final PrivilegedExceptionAction toURLAction(final File file)\n+        throws MalformedURLException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws MalformedURLException {\n+                return file.toURL();\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedExceptionAction object for new FileInputStream().\n      * \n@@ -768,6 +789,26 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedAction object for new Thread().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"modifyThreadGroup\";'\n+     *   'permission java.lang.RuntimePermission \"modifyThread\";'\n+     * \n+     * @return Thread\n+     */\n+    public static final PrivilegedAction newDaemonThreadAction(\n+        final Runnable target, final String name) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                Thread thread = new Thread(target, name);\n+                thread.setDaemon(true);\n+                return thread;\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedExceptionAction object for url.openStream().\n      * \n@@ -966,4 +1007,21 @@ public Object run() {\n             }\n         };\n     }\n+    \n+    /**\n+     * Return a PrivilegeAction object for Project.loadClass().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCClass\n+     */\n+    public static final PrivilegedAction loadProjectClassAction(\n+        final Project project, final String clazzName) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return project.loadClass(clazzName);\n+            }\n+        };\n+    }\n }"},{"sha":"af7c203f17aafa9ef59269fa4134bc8f696239db","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -61,7 +61,7 @@\n \n     // offset to move from 1/1/1970, which is 0-time for Java, to gregorian\n     // 0-time 10/15/1582, and multiplier to go from 100nsec to msec units\n-    private static final long GREG_OFFSET = 0x01b21dd213814000L;\n+    private static final long GREG_OFFSET = 0xB1D069B5400L;\n     private static final long MILLI_MULT = 10000L;\n \n     // type of UUID -- time based"},{"sha":"aab9a94193e9b79676b761c492f947045ff11ad0","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <properties>\n         <openjpa.loglevel>INFO</openjpa.loglevel>"},{"sha":"37a6d22aed1e0a7e3ffff59e7ff08d7c3b44990a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -21,6 +21,7 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.sql.Types;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -74,6 +75,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -1058,7 +1060,9 @@ protected void parseColumns(FieldMapping fm,\n             \n             if (xmlTypeClass != null\n                 && StringUtils.isEmpty(pcols[i].columnDefinition())\n-                && fm.getDeclaredType().isAnnotationPresent(xmlTypeClass)) {\n+                && ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                    .isAnnotationPresentAction(fm.getDeclaredType(),\n+                        xmlTypeClass))).booleanValue()) {\n                 DBDictionary dict = ((MappingRepository) getRepository())\n                     .getDBDictionary();\n                 if (dict.supportsXMLColumn)"},{"sha":"c483d2834d3957c5c9d83bb42673233482462aef","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -541,9 +541,9 @@ protected void endFieldMapping(FieldMetaData field)\n         if (_cols != null) {\n             switch (fm.getDeclaredTypeCode()) {\n                 case JavaTypes.ARRAY:\n-                    if (fm.getDeclaredType() == byte[].class\n-                        || fm.getDeclaredType() == char[].class\n-                        || fm.getDeclaredType() == Character[].class) {\n+                    Class type = fm.getDeclaredType();\n+                    if (type == byte[].class || type == Byte[].class\n+                        || type == char[].class || type == Character[].class ) {\n                         fm.getValueInfo().setColumns(_cols);\n                         break;\n                     }"},{"sha":"d3b8e3e6137eb780de615a55cddc9ef764434a21","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import junit.framework.TestCase;\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.BCField;\r\n+import serp.bytecode.BCMethod;\r\n+import serp.bytecode.Project;\r\n+\r\n+public class TestPCEnhancerFindField\r\n+    extends TestCase {\r\n+\r\n+    private String field;\r\n+\r\n+    public String myMethod() {\r\n+        if (Math.abs(1) == 1)\r\n+            return field;\r\n+        else\r\n+            return field;\r\n+    }\r\n+\r\n+    public void testPCEnhancerFindField() {\r\n+        Project proj = new Project();\r\n+        BCClass bc = proj.loadClass(getClass());\r\n+        BCMethod meth = bc.getMethods(\"myMethod\")[0];\r\n+        BCField field = PCEnhancer.getReturnedField(meth);\r\n+        assertEquals(\"field\", field.getName());\r\n+    }\r\n+}\r"},{"sha":"baa7a6225c0f9a67b6deb260203834c0bddfc2e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","status":"modified","additions":55,"deletions":7,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -50,7 +50,24 @@ public void testCharDiscriminators() {\n         discrim = getMapping(\"CharRootEntity\").getDiscriminator();\n         assertEquals(new Character('R'), discrim.getValue());\n         assertEquals(JavaTypes.CHAR, discrim.getJavaType());\n-\n+        \n+        CharLeafEntity leaf = new CharLeafEntity();\n+        CharRootEntity root = new CharRootEntity();\n+        em.getTransaction().begin();\n+        em.persist(leaf);\n+        em.persist(root);\n+        em.getTransaction().commit();\n+        \n+        em.refresh(leaf);\n+        em.refresh(root);\n+        \n+        em.clear();\n+        \n+        CharLeafEntity leaf2 = em.find(CharLeafEntity.class, leaf.getId());\n+        CharRootEntity root2 = em.find(CharRootEntity.class, root.getId());\n+        \n+        assertNotNull(leaf2);\n+        assertNotNull(root2);\n         em.close();\n     }\n \n@@ -71,6 +88,25 @@ public void testIntDiscriminators() {\n         assertEquals(new Integer(10101), discrim.getValue());\n         assertEquals(JavaTypes.INT, discrim.getJavaType());\n \n+        IntegerLeafEntity leaf = new IntegerLeafEntity();\n+        IntegerRootEntity root = new IntegerRootEntity();\n+        em.getTransaction().begin();\n+        em.persist(leaf);\n+        em.persist(root);\n+        em.getTransaction().commit();\n+        \n+        em.refresh(leaf);\n+        em.refresh(root);\n+        \n+        em.clear();\n+\n+        IntegerLeafEntity leaf2 =\n+                em.find(IntegerLeafEntity.class, leaf.getId());\n+        IntegerRootEntity root2 =\n+                em.find(IntegerRootEntity.class, root.getId());\n+        \n+        assertNotNull(leaf2);\n+        assertNotNull(root2);\n         em.close();\n     }\n \n@@ -88,12 +124,24 @@ public void testStringDiscriminators() {\n         discrim = getMapping(\"StringRootEntity\").getDiscriminator();\n         assertEquals(\"StringRoot\", discrim.getValue());\n         assertEquals(JavaTypes.STRING, discrim.getJavaType());\n+        \n+        StringLeafEntity leaf = new StringLeafEntity();\n+        StringRootEntity root = new StringRootEntity();\n+        em.getTransaction().begin();\n+        em.persist(leaf);\n+        em.persist(root);\n+        em.getTransaction().commit();\n+        \n+        em.refresh(leaf);\n+        em.refresh(root);\n+        \n+        em.clear();\n+        \n+        StringLeafEntity leaf2 = em.find(StringLeafEntity.class, leaf.getId());\n+        StringRootEntity root2 = em.find(StringRootEntity.class, root.getId());\n+        \n+        assertNotNull(leaf2);\n+        assertNotNull(root2);\n         em.close();\n     }\n-\n-    private ClassMapping getMapping(String name) {\n-        return (ClassMapping) emf.getConfiguration()\n-                .getMetaDataRepositoryInstance().getMetaData(name,\n-                        getClass().getClassLoader(), true);\n-    }\n }"},{"sha":"ac3c20c1a545ace5412a9f1d3d00e7a739081f22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/EntityA.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/EntityA.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.external;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.ExternalValues;\n+import org.apache.openjpa.persistence.Type;\n+\n+@Entity\n+@Table(name = \"ExternalizationEntityA\")\n+public class EntityA implements java.io.Serializable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate int id;\n+\n+\t@ExternalValues( { \"SMALL=SML\", \"MEDIUM=MID\", \"LARGE=LRG\" })\n+\t@Column(length = 3)\n+\tprivate String s1;\n+\n+\t@ExternalValues( { \"SMALL=5\", \"MEDIUM=8\", \"LARGE=15\" })\n+\t@Type(int.class)\n+\tprivate String s2;\n+\n+\tpublic EntityA() {\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getS1() {\n+\t\treturn s1;\n+\t}\n+\n+\tpublic void setS1(String s1) {\n+\t\tthis.s1 = s1;\n+\t}\n+\n+\tpublic String getS2() {\n+\t\treturn s2;\n+\t}\n+\n+\tpublic void setS2(String s2) {\n+\t\tthis.s2 = s2;\n+\t}\n+}"},{"sha":"04680acd662c323c906609b49b51a5bac8a68c30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.external;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.PersistenceException;\n+import org.apache.openjpa.persistence.RollbackException;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestExternalValues extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        super.setUp(EntityA.class);\n+    }\n+\n+    public void testUnrecognizedExternalValue() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+\n+        EntityA entity = new EntityA();\n+\n+        entity.setS1(\"ABDEF\");\n+        entity.setS2(\"NOT_VALID\");\n+\n+        em.persist(entity);\n+\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"Expected an exception at commit time\");\n+        } catch (RollbackException e) {\n+            Throwable t = e;\n+            while (t.getCause() != null) {\n+                t = t.getCause();\n+            }\n+            assertTrue(t.getMessage().contains(\n+                    \"was not found in the list of ExternalValues\"));\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"aa5d0b57b7fe2b17554c55847e0e8ec62127fd7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,105 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class FGAddress {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @Basic\r\n+    private String street;\r\n+\r\n+    @Basic\r\n+    private String city;\r\n+\r\n+    @Basic\r\n+    private String state;\r\n+\r\n+    @Basic\r\n+    private int zip;\r\n+\r\n+    public FGAddress() {\r\n+\r\n+    }\r\n+\r\n+    public FGAddress(int id, String street, String city, String state, int zip) {\r\n+        this.id = id;\r\n+        this.street = street;\r\n+        this.city = city;\r\n+        this.state = state;\r\n+        this.zip = zip;\r\n+    }\r\n+\r\n+    public String getCity() {\r\n+        return city;\r\n+    }\r\n+\r\n+    public void setCity(String city) {\r\n+        this.city = city;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getState() {\r\n+        return state;\r\n+    }\r\n+\r\n+    public void setState(String state) {\r\n+        this.state = state;\r\n+    }\r\n+\r\n+    public String getStreet() {\r\n+        return street;\r\n+    }\r\n+\r\n+    public void setStreet(String street) {\r\n+        this.street = street;\r\n+    }\r\n+\r\n+    public int getZip() {\r\n+        return zip;\r\n+    }\r\n+\r\n+    public void setZip(int zip) {\r\n+        this.zip = zip;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(\"FGAddress(id=\").append(this.id).append(\")\");\r\n+        sb.append(\": street=\").append(getStreet());\r\n+        sb.append(\": city=\").append(getCity());\r\n+        sb.append(\": state=\").append(getState());\r\n+        sb.append(\": zip=\").append(getZip());\r\n+\r\n+        return new String(sb);\r\n+    }\r\n+\r\n+}\r"},{"sha":"38bc351e099b206597c94f1ab7bd428088e6d493","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class FGDepartment {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private String name;\r\n+\r\n+    public FGDepartment() {\r\n+\r\n+    }\r\n+\r\n+    public FGDepartment(int id, String name) {\r\n+        this.id = id;\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return new String(\"FGDepartment(id=\" + this.id + \")\");\r\n+    }\r\n+\r\n+}\r"},{"sha":"51457097fff526d5cd92b7a35e90f946438fc4e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,174 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.DiscriminatorType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+import org.apache.openjpa.persistence.FetchAttribute;\r\n+import org.apache.openjpa.persistence.FetchGroup;\r\n+import org.apache.openjpa.persistence.FetchGroups;\r\n+import org.apache.openjpa.persistence.LoadFetchGroup;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+// Default inheritance strategy\r\n+@DiscriminatorColumn(name = \"EMP_TYPE\", discriminatorType = DiscriminatorType.INTEGER)\r\n+@DiscriminatorValue(\"0\")\r\n+@FetchGroups( {\r\n+        @FetchGroup(name = \"AddressFetchGroup\", attributes = { @FetchAttribute(name = \"address\") }),\r\n+        @FetchGroup(name = \"RatingFetchGroup\", attributes = { @FetchAttribute(name = \"rating\") }),\r\n+        @FetchGroup(name = \"ManagerFetchGroup1A\", attributes = { @FetchAttribute(name = \"manager\", recursionDepth = 1) }),\r\n+        @FetchGroup(name = \"ManagerFetchGroup1B\", attributes = { @FetchAttribute(name = \"manager\", recursionDepth = -1) }),\r\n+        @FetchGroup(name = \"ManagerFetchGroup2\", attributes = { @FetchAttribute(name = \"manager\", recursionDepth = 2) }),\r\n+        @FetchGroup(name = \"DescFetchGroup\", attributes = { @FetchAttribute(name = \"description\") }),\r\n+\r\n+        @FetchGroup(name = \"DepartmentFetchGroup\", attributes = { @FetchAttribute(name = \"dept\") }),\r\n+\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup1\", attributes = {\r\n+                @FetchAttribute(name = \"dept\"),\r\n+                @FetchAttribute(name = \"address\"),\r\n+                @FetchAttribute(name = \"manager\", recursionDepth = 1) }),\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup2\", fetchGroups = { \"AggregateEmployeeFetchGroup1\" }),\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup3\", fetchGroups = {\r\n+                \"DepartmentFetchGroup\", \"AddressFetchGroup\",\r\n+                \"ManagerFetchGroup1A\" }),\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup4\", attributes = {\r\n+                @FetchAttribute(name = \"dept\"),\r\n+                @FetchAttribute(name = \"address\") }, fetchGroups = { \"ManagerFetchGroup1A\" }) })\r\n+public class FGEmployee {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private String lastName;\r\n+\r\n+    private String firstName;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    private String description;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    private FGDepartment dept;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    private FGAddress address;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    private FGManager manager;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    @LoadFetchGroup(\"AddressFetchGroup\")\r\n+    private String rating;\r\n+\r\n+    public FGEmployee() {\r\n+\r\n+    }\r\n+\r\n+    public FGEmployee(int id, String firstName, String lastName, String desc,\r\n+            FGDepartment dept, FGAddress address, FGManager manager,\r\n+            String rating) {\r\n+        this.id = id;\r\n+        this.lastName = lastName;\r\n+        this.firstName = firstName;\r\n+        this.description = desc;\r\n+        this.dept = dept;\r\n+        this.address = address;\r\n+        this.manager = manager;\r\n+        this.rating = rating;\r\n+    }\r\n+\r\n+    public FGAddress getAddress() {\r\n+        return address;\r\n+    }\r\n+\r\n+    public void setAddress(FGAddress address) {\r\n+        this.address = address;\r\n+    }\r\n+\r\n+    public FGDepartment getDept() {\r\n+        return dept;\r\n+    }\r\n+\r\n+    public void setDept(FGDepartment dept) {\r\n+        this.dept = dept;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String desc) {\r\n+        this.description = desc;\r\n+    }\r\n+\r\n+    public String getFirstName() {\r\n+        return firstName;\r\n+    }\r\n+\r\n+    public void setFirstName(String firstName) {\r\n+        this.firstName = firstName;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getLastName() {\r\n+        return lastName;\r\n+    }\r\n+\r\n+    public void setLastName(String lastName) {\r\n+        this.lastName = lastName;\r\n+    }\r\n+\r\n+    public FGManager getManager() {\r\n+        return manager;\r\n+    }\r\n+\r\n+    public void setManager(FGManager manager) {\r\n+        this.manager = manager;\r\n+    }\r\n+\r\n+    public String getRating() {\r\n+        return rating;\r\n+    }\r\n+\r\n+    public void setRating(String rating) {\r\n+        this.rating = rating;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return new String(this.getClass().getSimpleName() + \"(id=\" + this.id\r\n+                + \")\");\r\n+    }\r\n+\r\n+}\r"},{"sha":"8c69edf6945638494260287ecca0f5e1c3e790c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+import org.apache.openjpa.persistence.FetchAttribute;\r\n+import org.apache.openjpa.persistence.FetchGroup;\r\n+import org.apache.openjpa.persistence.FetchGroups;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"1\")\r\n+@FetchGroups( {\r\n+        @FetchGroup(name = \"MDataFetchGroup\", attributes = { @FetchAttribute(name = \"mData\") }),\r\n+        @FetchGroup(name = \"EmployeesFetchGroup\", attributes = { @FetchAttribute(name = \"employees\") }) })\r\n+public class FGManager extends FGEmployee {\r\n+    @OneToMany(mappedBy = \"manager\", fetch = FetchType.LAZY)\r\n+    Collection<FGEmployee> employees;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    private String mData;\r\n+\r\n+    public FGManager() {\r\n+        super();\r\n+        employees = new ArrayList<FGEmployee>();\r\n+    }\r\n+\r\n+    public FGManager(int id, String firstName, String lastName, String desc,\r\n+            FGDepartment dept, FGAddress address, FGManager manager,\r\n+            String rating, Collection<FGEmployee> employees, String mData) {\r\n+        super(id, firstName, lastName, desc, dept, address, manager, rating);\r\n+        this.employees = new ArrayList<FGEmployee>();\r\n+        this.employees.addAll(employees);\r\n+        this.mData = mData;\r\n+    }\r\n+\r\n+    public String getMData() {\r\n+        return mData;\r\n+    }\r\n+\r\n+    public void setMData(String data) {\r\n+        mData = data;\r\n+    }\r\n+\r\n+    public Collection<FGEmployee> getEmployees() {\r\n+        return employees;\r\n+    }\r\n+\r\n+}\r"},{"sha":"a101690abd261d46b06cf674a71fac4cd6fc2106","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"Dog1\")\n+@Table(name = \"DOGAUTO\", schema = \"SCHEMA1\")\n+public class Dog1 implements Serializable\n+\n+{\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id2;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public Dog1() {\n+        super();\n+\n+    }\n+\n+    public Dog1(String name) {\n+        this.id2 = id2;\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+}"},{"sha":"5a62ed6eef6bb579de516723b9618bc9f8eba504","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"Dog2\")\n+@Table(name = \"DOGAUTO\", schema = \"SCHEMA2\")\n+public class Dog2 implements Serializable\n+\n+{\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id2;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public Dog2() {\n+        super();\n+\n+    }\n+\n+    public Dog2(String name) {\n+        this.id2 = id2;\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+}"},{"sha":"695da48454090648cade8969c8c736285d6e7972","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"DogTable\")\n+@Table(name = \"DOGTABLES\", schema = \"SCHEMA1\")\n+public class DogTable implements Serializable\n+\n+{\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen1\", table = \"ID_Gen1\", \n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 20, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen1\")\n+    private int id2;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public DogTable() {\n+        super();\n+\n+    }\n+\n+    public DogTable(String name) {\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+}"},{"sha":"de06404280971ffb80a91dec988feb1b227c075d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.io.*;\n+import javax.persistence.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"DogTable2\")\n+@Table(name = \"DOGTABLES\", schema = \"SCHEMA2\")\n+public class DogTable2 implements Serializable\n+\n+{\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen2\", table = \"ID_Gen2\", \n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 100, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen2\")\n+    private int id2;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public DogTable2() {\n+        super();\n+\n+    }\n+\n+    public DogTable2(String name) {\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+}"},{"sha":"94310df54b17d39e25b4fd19a39a4f5ffabb7e59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"added","additions":231,"deletions":0,"changes":231,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMultipleSchemaNames extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(Dog1.class, Dog2.class, DogTable.class, DogTable2.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        // cleanup database first\n+        Query qry = em.createQuery(\"select d from Dog1 d\");\n+        List result = qry.getResultList();\n+\n+        for (int index = 0; index < result.size(); index++) {\n+            Dog1 Obj = (Dog1) result.get(index);\n+            em.remove(Obj);\n+        }\n+        Query qry2 = em.createQuery(\"select d from Dog2 d\");\n+        List result2 = qry2.getResultList();\n+\n+        for (int index = 0; index < result2.size(); index++) {\n+            Dog2 Obj = (Dog2) result2.get(index);\n+            em.remove(Obj);\n+        }\n+        Query qry3 = em.createQuery(\"select d from DogTable d\");\n+        List result3 = qry3.getResultList();\n+\n+        for (int index = 0; index < result3.size(); index++) {\n+            DogTable Obj = (DogTable) result3.get(index);\n+            em.remove(Obj);\n+        }\n+        Query qry4 = em.createQuery(\"select d from DogTable2 d\");\n+        List result4 = qry4.getResultList();\n+\n+        for (int index = 0; index < result4.size(); index++) {\n+            DogTable2 Obj = (DogTable2) result4.get(index);\n+            em.remove(Obj);\n+        }\n+\n+        Query delschema1 = em\n+                .createNativeQuery(\"delete from schema1.openjpa_sequence_table\");\n+        delschema1.executeUpdate();\n+        Query delschema2 = em\n+                .createNativeQuery(\"delete from schema2.openjpa_sequence_table\");\n+        delschema2.executeUpdate();\n+        Query delgentable = em.createNativeQuery(\"delete from schema1.id_gen1\");\n+        delgentable.executeUpdate();\n+        Query delgentable2 = em\n+                .createNativeQuery(\"delete from schema2.id_gen2\");\n+        delgentable2.executeUpdate();\n+\n+        em.getTransaction().commit();\n+\n+    }\n+\n+    public void testGeneratedAUTO() {\n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        em.getTransaction().begin();\n+\n+        Dog1 dog1 = new Dog1();\n+        dog1.setName(\"helloDog1\");\n+        dog1.setPrice(12000);\n+\n+        em.persist(dog1);\n+        Dog1 dog1a = new Dog1();\n+        dog1a.setName(\"helloDog2\");\n+        dog1a.setPrice(22000);\n+        em.persist(dog1a);\n+        // add dog2\n+        Dog2 dog2 = new Dog2();\n+        dog2.setName(\"helloDog3\");\n+        dog2.setPrice(15000);\n+        em.persist(dog2);\n+\n+        Dog2 dog2a = new Dog2();\n+        dog2a.setName(\"helloDog4\");\n+        dog2a.setPrice(25000);\n+        em.persist(dog2a);\n+        em.getTransaction().commit();\n+\n+        Dog1 dog1x = em.find(Dog1.class, kem.getObjectId(dog1));\n+        // Derby can't guarantee the order of the generated value, therefore,\n+        // we can't assert the id based on the order. For db2, we see the id \n+        // value in the right order\n+        assertTrue(dog1x.getId2() == 1 || dog1x.getId2() == 2);\n+        assertEquals(dog1x.getName(), \"helloDog1\");\n+        dog1x.setName(\"Dog1\");\n+        dog1x.setDomestic(true);\n+        Dog1 dog11 = em.find(Dog1.class, kem.getObjectId(dog1a));\n+        assertTrue(dog11.getId2() == 1 || dog11.getId2() == 2);\n+        assertEquals(dog11.getName(), \"helloDog2\");\n+        dog11.setName(\"Dog2\");\n+        dog11.setDomestic(true);\n+        // update dog2\n+        Dog2 dog2x = em.find(Dog2.class, kem.getObjectId(dog2));\n+        assertTrue(dog2x.getId2() == 1 || dog2x.getId2() == 2);\n+        assertEquals(dog2x.getName(), \"helloDog3\");\n+        dog2x.setName(\"Dog3\");\n+        dog2x.setDomestic(true);\n+        Dog2 dog21 = em.find(Dog2.class, kem.getObjectId(dog2a));\n+        assertTrue(dog21.getId2() == 1 || dog21.getId2() == 2);\n+        assertEquals(dog21.getName(), \"helloDog4\");\n+        dog21.setName(\"Dog4\");\n+        dog21.setDomestic(true);\n+\n+        // get the update dog name\n+\n+        em.getTransaction().begin();\n+        Query qry1 = em.createQuery(\"select d from Dog1 d order by d.name\");\n+        List result1 = qry1.getResultList();\n+        for (int index = 0; index < result1.size(); index++) {\n+            Dog1 dog4 = (Dog1) result1.get(index);\n+            int i = index + 1;\n+            assertTrue(dog4.getId2() == 1 || dog4.getId2() == 2);\n+            assertEquals(dog4.getName(), \"Dog\" + i);\n+        }\n+\n+        Query qry2 = em.createQuery(\"select d from Dog2 d order by d.name\");\n+        List result2 = qry2.getResultList();\n+\n+        for (int index = 0; index < result2.size(); index++) {\n+            Dog2 dog5 = (Dog2) result2.get(index);\n+            assertTrue(dog5.getId2() == 1 || dog5.getId2() == 2);\n+            int j = index + 3;\n+            assertEquals(dog5.getName(), \"Dog\" + j);\n+        }\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testGeneratedTABLE() {\n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        em.getTransaction().begin();\n+\n+        DogTable dog1 = new DogTable();\n+        dog1.setName(\"helloDog1\");\n+        dog1.setPrice(12000);\n+\n+        em.persist(dog1);\n+        DogTable dog1a = new DogTable();\n+        dog1a.setName(\"helloDog2\");\n+        dog1a.setPrice(22000);\n+        em.persist(dog1a);\n+        // add dog2\n+        DogTable2 dog2 = new DogTable2();\n+        dog2.setName(\"helloDog3\");\n+        dog2.setPrice(15000);\n+        em.persist(dog2);\n+\n+        DogTable2 dog2a = new DogTable2();\n+        dog2a.setName(\"helloDog4\");\n+        dog2a.setPrice(25000);\n+        em.persist(dog2a);\n+        em.getTransaction().commit();\n+\n+        DogTable dog1x = em.find(DogTable.class, kem.getObjectId(dog1));\n+        assertTrue(dog1x.getId2() == 20 || dog1x.getId2() == 21);\n+        assertEquals(dog1x.getName(), \"helloDog1\");\n+        dog1x.setName(\"Dog1\");\n+        dog1x.setDomestic(true);\n+        DogTable dog11 = em.find(DogTable.class, kem.getObjectId(dog1a));\n+        assertTrue(dog11.getId2() == 20 || dog11.getId2() == 21);\n+        assertEquals(dog11.getName(), \"helloDog2\");\n+        dog11.setName(\"Dog2\");\n+        dog11.setDomestic(true);\n+        // update dog2\n+        DogTable2 dog2x = em.find(DogTable2.class, kem.getObjectId(dog2));\n+        assertTrue(dog2x.getId2() == 100 || dog2x.getId2() == 101);\n+        assertEquals(dog2x.getName(), \"helloDog3\");\n+        dog2x.setName(\"Dog3\");\n+        dog2x.setDomestic(true);\n+        DogTable2 dog21 = em.find(DogTable2.class, kem.getObjectId(dog2a));\n+        assertTrue(dog2x.getId2() == 100 || dog2x.getId2() == 101);\n+        assertEquals(dog21.getName(), \"helloDog4\");\n+        dog21.setName(\"Dog4\");\n+        dog21.setDomestic(true);\n+\n+        // get the update dog name\n+\n+        em.getTransaction().begin();\n+        Query qry1 = em.createQuery(\"select d from DogTable d order by d.name\");\n+        List result1 = qry1.getResultList();\n+        for (int index = 0; index < result1.size(); index++) {\n+            DogTable dog4 = (DogTable) result1.get(index);\n+            assertTrue(dog4.getId2() == 20 || dog4.getId2() == 21);\n+            int j = index + 1;\n+            assertEquals(dog4.getName(), \"Dog\" + j);\n+\n+        }\n+\n+        Query qry2 = em\n+                .createQuery(\"select d from DogTable2 d order by d.name\");\n+        List result2 = qry2.getResultList();\n+\n+        for (int index = 0; index < result2.size(); index++) {\n+            DogTable2 dog5 = (DogTable2) result2.get(index);\n+            assertTrue(dog5.getId2() == 100 || dog5.getId2() == 101);\n+            int j = index + 3;\n+            assertEquals(dog5.getName(), \"Dog\" + j);\n+        }\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+} // end of TestMultipleSchemaNames"},{"sha":"41c0298fb2d6920bedffee052d518482974b6674","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":21,"deletions":47,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -81,37 +81,23 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n \n                 q.getResultList();\n                 if (dict instanceof DB2Dictionary) {\n-                    if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n-                        || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n+                    int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                    if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                        || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField, \"\n-                            + \"t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                            + \" FOR UPDATE OF\");\n+                        assertContainsSQL(\" FOR UPDATE\");\n                     }\n                     // it is DB2 v82 or later\n-                    else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n-                        || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n+                    else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                        || db2server == DB2Dictionary.db2UDBV82OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField, \"\n-                            + \"t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                            + \" FOR READ ONLY WITH RR USE AND KEEP \" \n+                        assertContainsSQL(\" FOR READ ONLY WITH RR USE AND KEEP \" \n                             + \"UPDATE LOCKS\");\n                     }\n-                    else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n+                    else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField, \"\n-                            + \"t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                            + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE \" \n-                            + \"LOCKS\");\n+                        assertContainsSQL(\" FOR READ ONLY WITH RR USE AND KEEP\" \n+                            + \" EXCLUSIVE LOCKS\");\n                     }    \n                     else {\n                         fail(\"OpenJPA currently only supports \" \n@@ -124,37 +110,25 @@ else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n                     .setIsolation(IsolationLevel.SERIALIZABLE);\n                 em.find(AllFieldTypes.class, 0);\n                 if (dict instanceof DB2Dictionary ) {\n-                    if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n-                        || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n+                    int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                    if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                        || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField,\"\n-                            + \" t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                            + \" FOR UPDATE OF optimize for 1 row\");\n+                        assertContainsSQL(\" optimize for 1 row FOR UPDATE\");\n                     }\n                     // it is DB2 v82 or later\n-                    else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n-                        || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n+                    else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                        || db2server == DB2Dictionary.db2UDBV82OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField,\"\n-                            + \" t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        assertContainsSQL(\" optimize for 1 row\"\n                             + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n-                            + \" optimize for 1 row\");\n+                            );\n                     }\n-                    else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n+                    else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField,\"\n-                            + \" t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        assertContainsSQL(\" optimize for 1 row\"\n                             + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE\" \n-                            + \" LOCKS optimize for 1 row\");\n+                            + \" LOCKS\");\n                     }    \n                     else {\n                         fail(\"OpenJPA currently only supports per-query\" "},{"sha":"c8ba92349078a8b2061d2a480a987da3900919db","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -81,22 +81,14 @@ public void testOptimizeForClause(boolean hint,\n                }     \r\n                if (dict instanceof DB2Dictionary) {\r\n                    assertEquals(1, sql.size());\r\n-                   assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\" +\r\n-                       \" t0.charField, t0.dateField, t0.doubleField, \" +\r\n-                       \"t0.floatField, t0.intField, t0.longField, \" +\r\n-                       \"t0.shortField, t0.stringField FROM AllFieldTypes \" +\r\n-                       \"t0 WHERE \\\\(t0.intField = \\\\?\\\\)  optimize for 8 row\");\r\n+                   assertContainsSQL(\" optimize for 8 row\");\r\n                }\r\n             }\r\n             else {\r\n                  em.find(AllFieldTypes.class, 0);\r\n                  if (dict instanceof DB2Dictionary ) {\r\n                     assertEquals(1, sql.size());\r\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \" +\r\n-                        \"t0.charField, t0.dateField, t0.doubleField, \" +\r\n-                        \"t0.floatField, t0.intField, t0.longField, \" +\r\n-                        \"t0.shortField, t0.stringField FROM AllFieldTypes\" +\r\n-                        \" t0 WHERE t0.id = \\\\?  optimize for 1 row\");\r\n+                    assertContainsSQL(\" optimize for 1 row\");\r\n                 }\r\n                    \r\n             }\r"},{"sha":"3c6cdf965506b10957358901d0bfed27b51f72ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":11,"deletions":24,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -57,37 +57,24 @@ public void testSelectForUpdateOverride() {\n             em.find(AllFieldTypes.class, 0);\n             assertEquals(1, sql.size());\n             if (dict instanceof DB2Dictionary) {\n-                if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n-                    || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n+                int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                    || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n                     assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR UPDATE OF optimize for 1 row\");\n+                    assertContainsSQL(\" optimize for 1 row FOR UPDATE\");\n                 }\n                 // it is DB2 v82 or later\n-                else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n-                    || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n+                else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                    || db2server == DB2Dictionary.db2UDBV82OrLater) {\n                     assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n-                        + \" optimize for 1 row\");\n+                    assertContainsSQL(\" optimize for 1 row\"\n+                        + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\");\n                 }\n-                else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n+                else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n                     assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    assertContainsSQL(\" optimize for 1 row\"\n                         + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n-                        + \" optimize for 1 row\");\n+                        );\n                 }    \n                 else {\n                     fail(\"OpenJPA currently only supports per-query isolation \" "},{"sha":"828f7e79955e2b2e793b8f029bbda767ce8b1f9f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n+import java.io.Serializable;\n+\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n@@ -26,7 +28,7 @@\n import javax.persistence.OneToOne;\n \n @Entity\n-public class BidiChild {\n+public class BidiChild implements Serializable {\n \n     @Id\n     @GeneratedValue"},{"sha":"3b2be5e4d2bce5eb7bb3ff5f43404f1a855cca01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -30,7 +31,7 @@\n import javax.persistence.OrderBy;\n \n @Entity\n-public class BidiParent {\n+public class BidiParent implements Serializable {\n \n     @Id\n     @GeneratedValue"},{"sha":"04c8d1f20bfc3ab4e099990e5d001e37f2e8483e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ITEM\")\n+public class Item {\n+\n+    public int itemId;\n+    public String itemName;\n+    public java.math.BigDecimal itemPrice;\n+    public String itemData;\n+\n+    @Column(name = \"I_DATA\", table = \"ITEM\")\n+    public String getItemData() {\n+        return itemData;\n+    }\n+\n+    public void setItemData(String itemData) {\n+        this.itemData = itemData;\n+    }\n+\n+    @Id\n+    @Column(name = \"I_ID\", table = \"ITEM\")\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public int getItemId() {\n+        return itemId;\n+    }\n+\n+    public void setItemId(int itemId) {\n+        this.itemId = itemId;\n+    }\n+\n+    @Column(name = \"I_NAME\", table = \"ITEM\")\n+    public String getItemName() {\n+        return itemName;\n+    }\n+\n+    public void setItemName(String itemName) {\n+        this.itemName = itemName;\n+    }\n+\n+    @Basic\n+    @Column(name = \"I_PRICE\", table = \"ITEM\")\n+    public java.math.BigDecimal getItemPrice() {\n+        return itemPrice;\n+    }\n+\n+    public void setItemPrice(java.math.BigDecimal itemPrice) {\n+        this.itemPrice = itemPrice;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"76d8f3b9a9dd9986275464581d59a7978cc00322","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+public class TestEntityManagerFactory extends TestCase {\n+\n+    /*\n+     * This test uses a mis-configured persistence unit to verify that we will\n+     * not connect to the database when an unused emf is closed.  \n+     */\n+    public void testCloseUnusedEMF() {\n+        EntityManagerFactory emf =\n+                Persistence.createEntityManagerFactory(\"invalid\");\n+        emf.close();\n+    }\n+}"},{"sha":"afbdf9a368230d4c7d05a662655db217e6c298ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJoin extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        super.setUp(Item.class);\n+    }\n+\n+    /*\n+     * Verify that an entity does not create joins to itself.\n+     */\n+    public void testSelfJoin() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\n+                Item.class);\n+        FieldMapping fm = cm.getFieldMapping(\"itemId\");\n+        assertNotNull(fm);\n+        assertNull(fm.getJoinForeignKey());\n+    }\n+}"},{"sha":"f091b7ec5b6731359193bc1624bc1c3e1351c019","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -78,6 +78,21 @@ public void assertNotSQL(String sqlExp) {\n                 + \" should not have been executed in SQL statements: \" + sql);\n     }\n \n+    /**\n+     * Confirm that the executed SQL String contains the specified sqlExp.\n+     *\n+     * @param sqlExp the SQL expression. E.g., \"SELECT BADCOLUMN .*\"\n+     */\n+    public void assertContainsSQL(String sqlExp) {\n+        for (String statement : sql) {\n+            if (statement.contains(sqlExp))\n+                return;\n+        }\n+\n+        fail(\"Expected regular expression <\" + sqlExp + \"> to be\"\n+            + \" contained in SQL statements: \" + sql);\n+    }\n+\n     public class Listener\n         extends AbstractJDBCListener {\n "},{"sha":"7a4f33866d0373c97695faacdaaa2e3f30d859e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.test;\n \n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n \n public abstract class SingleEMFTestCase\n@@ -61,4 +62,10 @@ public void tearDown() throws Exception {\n             closeEMF(emf);\n         }\n     }\n+    \n+    protected ClassMapping getMapping(String name) {\n+        return (ClassMapping) emf.getConfiguration()\n+                .getMetaDataRepositoryInstance().getMetaData(name,\n+                        getClass().getClassLoader(), true);\n+    }\n }"},{"sha":"b49191214005ff67fb10249bcb2fe6f31692c089","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -20,6 +20,9 @@\n \n import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.persistence.InvalidStateException;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -62,6 +65,24 @@ public void testOptionalAttributeOverride() {\n         em.getTransaction().begin();\n         em.remove(em.find(XmlOverrideEntity.class, optional.getId()));\n         em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+    \n+    \n+    public void testColumnOverride() { \n+        EntityManager em = emf.createEntityManager();\n+\n+        ClassMapping mapping = getMapping(\"XmlOverride\");\n+        \n+        FieldMapping fm = mapping.getFieldMapping(\"picture\");\n+        \n+        Column[] columns = fm.getColumns();\n+        \n+        assertEquals(1, columns.length);\n+        assertEquals(\"pic_xml\", columns[0].getName());\n+        \n+        em.close();\n     }\n }\n "},{"sha":"5853e9a2e91ec654c3639667c0f80945babeba65","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -19,9 +19,11 @@\n package org.apache.openjpa.persistence.xml;\n \n import javax.persistence.Basic;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n+import javax.persistence.Lob;\n \n @Entity\n public class XmlOverrideEntity {\n@@ -35,6 +37,10 @@\n     \n     @Basic(optional=true)\n     String description;\n+    \n+    @Column(name=\"PICTURE\")\n+    @Lob\n+    private Byte[] picture;\n \n     public int getId() {\n         return id;\n@@ -58,6 +64,14 @@ public String getDescription() {\n \n     public void setDescription(String description) {\n         this.description = description;\n+    }\n+\n+    public Byte[] getPicture() {\n+        return picture;\n+    }\n+\n+    public void setPicture(Byte[] picture) {\n+        this.picture = picture;\n     } \n }\n "},{"sha":"e2704009c1cd3b9b7d95ae1a81c8db4b218f14f3","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -54,4 +54,13 @@\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>\n     </persistence-unit>\n+    \n+    <persistence-unit name=\"invalid\">\n+        <properties>\n+            <property name=\"openjpa.ConnectionDriverName\"\n+                value=\"org.apache.commons.dbcp.BasicDataSource\" />\n+            <property name=\"openjpa.ConnectionProperties\"\n+                value=\"DriverClassName=not.a.real.Driver,Url=jdbc:notreal://\"/>\n+        </properties>\n+    </persistence-unit>\n </persistence>"},{"sha":"76dc3321308c4b41f9d80b0dabd3f410479b440b","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -43,6 +43,10 @@\n     \t<attributes>\n \t    \t<basic name=\"name\" optional=\"true\"></basic>\n \t    \t<basic name=\"description\" optional=\"false\"></basic>\n+            <basic name=\"picture\" fetch=\"EAGER\"> \n+                <column name=\"pic_xml\"/>\n+                <lob/>\n+            </basic>\n     \t</attributes>\n     </entity>\n     <entity name=\"AllFieldTypes\" "},{"sha":"d4022fde7b70f0ec39be448be69786b56442568b","filename":"openjpa-persistence/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"e188fc2f6b5be90d2d404510e84106d1d24f3512","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":58,"deletions":14,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -87,7 +87,7 @@\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n@@ -109,6 +109,8 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -463,9 +465,14 @@ private ClassMetaData parseClassAnnotations() {\n         // check immediately whether the user is using any annotations,\n         // regardless of mode.  this prevents adding non-entity classes to\n         // repository if we're ignoring these annotations in mapping mode\n-        if (!_cls.isAnnotationPresent(Entity.class)\n-            && !_cls.isAnnotationPresent(Embeddable.class)\n-            && !_cls.isAnnotationPresent(MappedSuperclass.class))\n+        if (!((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(_cls, Entity.class))).booleanValue()\n+            && !((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(_cls, Embeddable.class)))\n+                .booleanValue()\n+            && !((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(_cls, MappedSuperclass.class)))\n+                .booleanValue())\n             return null;\n \n         // find / create metadata\n@@ -662,17 +669,17 @@ protected File getSourceFile() {\n \n         String rsrc = StringUtils.replace(cls.getName(), \".\", \"/\");\n         ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n-            J2DoPrivHelper.getClassLoaderAction(cls)); \n+            J2DoPriv5Helper.getClassLoaderAction(cls)); \n         if (loader == null)\n             loader = (ClassLoader) AccessController.doPrivileged(\n-                J2DoPrivHelper.getSystemClassLoaderAction()); \n+                J2DoPriv5Helper.getSystemClassLoaderAction()); \n         if (loader == null)\n             return null;\n         URL url = (URL) AccessController.doPrivileged(\n-            J2DoPrivHelper.getResourceAction(loader, rsrc + \".java\")); \n+            J2DoPriv5Helper.getResourceAction(loader, rsrc + \".java\")); \n         if (url == null) {\n             url = (URL) AccessController.doPrivileged(\n-                J2DoPrivHelper.getResourceAction(loader, rsrc + \".class\")); \n+                J2DoPriv5Helper.getResourceAction(loader, rsrc + \".class\")); \n             if (url == null)\n                 return null;\n         }\n@@ -757,10 +764,12 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n                 meta.setDetachedState(detached.fieldName());\n         } else {\n             Field[] fields = (Field[]) AccessController.doPrivileged(\n-                J2DoPrivHelper.getDeclaredFieldsAction(\n+                J2DoPriv5Helper.getDeclaredFieldsAction(\n                     meta.getDescribedType())); \n             for (int i = 0; i < fields.length; i++)\n-                if (fields[i].isAnnotationPresent(DetachedState.class))\n+                if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                    .isAnnotationPresentAction(fields[i], DetachedState.class)))\n+                    .booleanValue())\n                     meta.setDetachedState(fields[i].getName());\n         }\n     }\n@@ -799,7 +808,7 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n         Set<MethodKey> seen = new HashSet<MethodKey>();\n         do {\n             for (Method m : (Method[]) AccessController.doPrivileged(\n-                J2DoPrivHelper.getDeclaredMethodsAction(sup))) {\n+                J2DoPriv5Helper.getDeclaredMethodsAction(sup))) {\n                 mods = m.getModifiers();\n                 if (Modifier.isStatic(mods) || Modifier.isFinal(mods) ||\n                     Object.class.equals(m.getDeclaringClass()))\n@@ -816,7 +825,9 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n \n         MetaDataDefaults def = repos.getMetaDataFactory().getDefaults();\n         for (Method m : methods) {\n-            for (Annotation anno : m.getDeclaredAnnotations()) {\n+            for (Annotation anno : (Annotation[]) AccessController\n+                .doPrivileged(J2DoPriv5Helper\n+                    .getDeclaredAnnotationsAction(m))) {\n                 MetaDataTag tag = _tags.get(anno.annotationType());\n                 if (tag == null)\n                     continue;\n@@ -875,6 +886,14 @@ private void recordCallbacks(ClassMetaData cls,\n \n     /**\n      * Create fetch groups.\n+     * If FetchGroup A includes FetchGroup B, then a bi-link is set between\n+     * A and B. Both A and B must be declared in the same Class. \n+     * <br>\n+     * Call {@link #parseFetchAttribute(ClassMetaData, \n+     * org.apache.openjpa.meta.FetchGroup, FetchAttribute) only after the\n+     * bi-links have been established, because a field f will not only add the\n+     * fetch group A which explictly includes f to its custom fetch groups but \n+     * also will also add any fetch group B that includes A.  \n      */\n     private void parseFetchGroups(ClassMetaData meta, FetchGroup... groups) {\n         org.apache.openjpa.meta.FetchGroup fg;\n@@ -885,12 +904,33 @@ private void parseFetchGroups(ClassMetaData meta, FetchGroup... groups) {\n             fg = meta.addDeclaredFetchGroup(group.name());\n             if (group.postLoad())\n                 fg.setPostLoad(true); \n-            for (String s : group.fetchGroups())\n+            for (String s : group.fetchGroups()) {\n                 fg.addDeclaredInclude(s);\n+            }\n+        }\n+        // Add the parent-child style bi-links between fetch groups in a \n+        // separate pass. \n+        for (FetchGroup group:groups) {\n+        \tfg = meta.getFetchGroup(group.name());\n+        \tString[] includedFetchGropNames = fg.getDeclaredIncludes();\n+        \tfor (String includedFectchGroupName:includedFetchGropNames) {\n+        \t\torg.apache.openjpa.meta.FetchGroup child =\n+        \t    meta.getFetchGroup(includedFectchGroupName);\n+        \t\tif (child == null) \n+        \t\t\tthrow new UserException(_loc.get(\"missing-included-fg\", \n+        \t\t\t\tmeta.getDescribedType().getName(), fg.getName(),\n+        \t\t\t\tincludedFectchGroupName));\n+        \t\tchild.addContainedBy(fg);\n+        \t}\n+        }\n+        \n+        for (FetchGroup group : groups) {\n+            fg = meta.getFetchGroup(group.name());\n             for (FetchAttribute attr : group.attributes())\n                 parseFetchAttribute(meta, fg, attr);\n         }\n     }\n+    \n \n     /**\n      * Set a field's fetch group.\n@@ -904,6 +944,9 @@ private void parseFetchAttribute(ClassMetaData meta,\n                 meta, attr.name()));\n \n         field.setInFetchGroup(fg.getName(), true);\n+        Set parentFetchGroups = fg.getContainedBy();\n+        for (Object parentFetchGroup:parentFetchGroups)\n+        \tfield.setInFetchGroup(parentFetchGroup.toString(), true);\n         if (attr.recursionDepth() != Integer.MIN_VALUE)\n             fg.setRecursionDepth(field, attr.recursionDepth());\n     }\n@@ -922,7 +965,8 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n         fmd.setExplicit(true);\n \n         AnnotatedElement el = (AnnotatedElement) member;\n-        boolean lob = el.isAnnotationPresent(Lob.class);\n+        boolean lob = ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(el, Lob.class))).booleanValue();\n         if (isMetaDataMode()) {\n             switch (pstrat) {\n                 case BASIC:"},{"sha":"f9e0c00fdeac8a806e2c596c37178b8a954e5497","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -22,10 +22,12 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -171,8 +173,11 @@ public void parse(FieldMetaData fmd) {\n     private XMLMetaData parseXMLClassAnnotations() {\n         // check immediately whether the class has JAXB XML annotations\n         if (_cls == null || xmlTypeClass == null\n-            || !(_cls.isAnnotationPresent(xmlTypeClass)\n-                && _cls.isAnnotationPresent(xmlRootElementClass)))\n+            || !(((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(_cls, xmlTypeClass))).booleanValue()\n+                && ((Boolean) AccessController\n+                .doPrivileged(J2DoPriv5Helper.isAnnotationPresentAction(_cls,\n+                    xmlRootElementClass))).booleanValue()))\n             return null;\n \n         // find / create metadata\n@@ -220,7 +225,9 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n         Class superclass = cls.getSuperclass();\n \n         // handle inheritance at sub-element level\n-        if (superclass.isAnnotationPresent(xmlTypeClass))\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(superclass, xmlTypeClass)))\n+            .booleanValue())\n             populateFromReflection(superclass, meta);\n \n         try {\n@@ -240,8 +247,9 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n                     // avoid JAXB XML bind default name\n                     if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n                         xmlname = member.getName();\n-                    if (((Field) member).getType()\n-                        .isAnnotationPresent(xmlTypeClass)) {\n+                    if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                        .isAnnotationPresentAction(((Field) member).getType(),\n+                            xmlTypeClass))).booleanValue()) {\n                         field = _repos.addXMLMetaData(((Field) member).getType()\n                             , member.getName());\n                         parseXmlRootElement(((Field) member).getType(), field);"},{"sha":"83e00b7e13bb0e197fd68a656927d22930f31def","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -48,7 +48,7 @@\n import javax.persistence.Transient;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.meta.AbstractMetaDataDefaults;\n@@ -116,7 +116,8 @@ public PersistenceMetaDataDefaults() {\n         if (member == null)\n             return null;\n         AnnotatedElement el = (AnnotatedElement) member;\n-        if (el.isAnnotationPresent(Transient.class))\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(el, Transient.class))).booleanValue())\n             return TRANSIENT;\n         if (fmd != null\n             && fmd.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\n@@ -182,7 +183,8 @@ public PersistenceMetaDataDefaults() {\n         }\n \n         //### EJB3: what if defined in XML?\n-        if (type.isAnnotationPresent(Embeddable.class))\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(type, Embeddable.class))).booleanValue())\n             return EMBEDDED;\n         if (Serializable.class.isAssignableFrom(type))\n             return BASIC;\n@@ -256,10 +258,10 @@ private int getAccessType(Class cls) {\n \n         int access = 0;\n         if (usesAccess((Field[]) AccessController.doPrivileged(\n-            J2DoPrivHelper.getDeclaredFieldsAction(cls))))\n+            J2DoPriv5Helper.getDeclaredFieldsAction(cls))))\n             access |= ClassMetaData.ACCESS_FIELD;\n         if (usesAccess((Method[]) AccessController.doPrivileged(\n-            J2DoPrivHelper.getDeclaredMethodsAction(cls))))\n+            J2DoPriv5Helper.getDeclaredMethodsAction(cls))))\n             access |= ClassMetaData.ACCESS_PROPERTY;\n         return (access == 0) ? getAccessType(cls.getSuperclass()) : access;\n     }\n@@ -271,7 +273,8 @@ private static boolean usesAccess(AnnotatedElement[] members) {\n         Annotation[] annos;\n         String name;\n         for (int i = 0; i < members.length; i++) {\n-            annos = members[i].getAnnotations();\n+            annos = (Annotation[]) AccessController.doPrivileged(J2DoPriv5Helper\n+                .getAnnotationsAction(members[i]));\n             for (int j = 0; j < annos.length; j++) {\n                 name = annos[j].annotationType().getName();\n                 if ((name.startsWith(\"javax.persistence.\")\n@@ -293,7 +296,7 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n             try {\n                 // check for setters for methods\n                 Method setter = (Method) AccessController.doPrivileged(\n-                    J2DoPrivHelper.getDeclaredMethodAction(\n+                    J2DoPriv5Helper.getDeclaredMethodAction(\n                         meta.getDescribedType(), \"set\" +\n                         StringUtils.capitalize(name), new Class[] { \n                             ((Method) member).getReturnType() }));\n@@ -317,7 +320,9 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n \n     private boolean isAnnotatedTransient(Member member) {\n         return member instanceof AnnotatedElement\n-            && ((AnnotatedElement) member).isAnnotationPresent(Transient.class);\n+            && ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(((AnnotatedElement) member),\n+                    Transient.class))).booleanValue();\n     }\n \n     private void logNoSetter(ClassMetaData meta, String name, Exception e) {"},{"sha":"b56c28028bc95d4aca2187f99f919e77ca95e761","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -46,7 +46,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.MetaDataFilter;\n import org.apache.openjpa.lib.meta.MetaDataParser;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n@@ -293,18 +293,26 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n             return null;\n         Collection classes = repos.loadPersistentTypes(false, loader);\n         for (Class cls : (Collection<Class>) classes) {\n-            if (cls.isAnnotationPresent(NamedQuery.class) && hasNamedQuery\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedQuery.class)))\n+                .booleanValue() && hasNamedQuery\n                 (queryName, (NamedQuery) cls.getAnnotation(NamedQuery.class)))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedQueries.class) &&\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedQueries.class)))\n+                .booleanValue() &&\n                 hasNamedQuery(queryName, ((NamedQueries) cls.\n                     getAnnotation(NamedQueries.class)).value()))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedNativeQuery.class) &&\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedNativeQuery.class)))\n+                .booleanValue() &&\n                 hasNamedNativeQuery(queryName, (NamedNativeQuery) cls.\n                     getAnnotation(NamedNativeQuery.class)))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedNativeQueries.class) &&\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedNativeQueries.class)))\n+                .booleanValue() &&\n                 hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.\n                     getAnnotation(NamedNativeQueries.class)).value()))\n                 return cls;\n@@ -320,13 +328,17 @@ public Class getResultSetMappingScope(String rsMappingName,\n         \n         Collection classes = repos.loadPersistentTypes(false, loader);\n         for (Class cls : (Collection<Class>) classes) {\n-            \n-            if (cls.isAnnotationPresent(SqlResultSetMapping.class) && \n+\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, SqlResultSetMapping.class)))\n+                .booleanValue() &&\n                 hasRSMapping(rsMappingName, (SqlResultSetMapping) cls.\n                 getAnnotation(SqlResultSetMapping.class)))\n                 return cls;\n-            \n-            if (cls.isAnnotationPresent(SqlResultSetMappings.class) && \n+\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, SqlResultSetMappings.class)))\n+                .booleanValue() &&\n                 hasRSMapping(rsMappingName, ((SqlResultSetMappings) cls.\n                 getAnnotation(SqlResultSetMappings.class)).value()))\n                 return cls;\n@@ -362,8 +374,11 @@ private boolean hasNamedNativeQuery(String query,\n \n     @Override\n     protected MetaDataFilter newMetaDataFilter() {\n-        return new ClassAnnotationMetaDataFilter(new Class[]{\n-            Entity.class, Embeddable.class, MappedSuperclass.class });\n+        ClassAnnotationMetaDataFilter camdf = new ClassAnnotationMetaDataFilter(\n+                new Class[] { Entity.class, Embeddable.class,\n+                        MappedSuperclass.class });\n+        camdf.setLog(log);\n+        return camdf;\n     }\n \n     /**\n@@ -443,11 +458,11 @@ private File defaultXMLFile() {\n         ClassLoader loader = repos.getConfiguration().\n             getClassResolverInstance().getClassLoader(getClass(), null);\n         URL rsrc = (URL) AccessController.doPrivileged(\n-            J2DoPrivHelper.getResourceAction(loader, \"META-INF/orm.xml\"));\n+            J2DoPriv5Helper.getResourceAction(loader, \"META-INF/orm.xml\"));\n         if (rsrc != null) {\n             File file = new File(rsrc.getFile());\n             if (((Boolean) AccessController.doPrivileged(\n-                J2DoPrivHelper.existsAction(file))).booleanValue())\n+                J2DoPriv5Helper.existsAction(file))).booleanValue())\n                 return file;\n         }\n         return new File(\"orm.xml\");"},{"sha":"48f6e534f636ae8c2b9d4b0537bae68fb975d7f1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -20,6 +20,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n@@ -458,7 +459,12 @@ public void parse(URL url)\n         @Override\n         public void parse(File file)\n             throws IOException {\n-            _source = file.toURL();\n+            try {\n+                _source = (URL) AccessController.doPrivileged(J2DoPrivHelper\n+                    .toURLAction(file));\n+            } catch (PrivilegedActionException pae) {\n+                throw (MalformedURLException) pae.getException();\n+            }\n             super.parse(file);\n         }\n "},{"sha":"8596d232115469aaca5c6f2e5cdc3322d6c1d14b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -24,6 +24,7 @@\n import java.net.URL;\n import java.net.URLDecoder;\n import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -219,8 +220,12 @@ public void addJarFileName(String name) {\n             if (cp[i].equals(name)\n                 || cp[i].endsWith(File.separatorChar + name)) {\n                 try {\n-                    addJarFile(new File(cp[i]).toURL());\n+                    addJarFile((URL) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .toURLAction(new File(cp[i]))));\n                     return;\n+                } catch (PrivilegedActionException pae) {\n+                    break;\n                 } catch (MalformedURLException mue) {\n                     break;\n                 }"},{"sha":"b19b4774b99b39d5c0d2c3637223f2880641d092","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -59,6 +59,9 @@ unnamed-fg: \"{0}\" declares an unnamed fetch group.  All fetch groups \\\n bad-fg-field: Fetch group \"{0}\" in type \"{1}\" includes field \"{2}\", but \\\n \tthis field is not declared in \"{1}\", or is not persistent.  Currently, \\\n \tOpenJPA only supports declared fields in fetch groups.\n+missing-included-fg:\"{0}\" declares a fecth group \"{1}\" includes \"{2}\". But \\\n+\tthe included fetch group \"{2}\" can not be found in \"{0}\". Currently, all \\\n+\tincluded fetch groups must be declared within the same entity scope.\n not-update-delete-query: Cannot perform an update or delete operation \\\n \ton select query: \"{0}\".\n not-select-query: Cannot perform a select on update or delete query: \"{0}\".\n@@ -141,3 +144,4 @@ EntityManagerFactory-cat: Persistence.Advanced\n EntityManagerFactory-displayorder: 50\n EntityManagerFactory-expert: true\n EntityManagerFactory-interface: org.apache.openjpa.persistence.EntityManagerFactoryImpl\n+"},{"sha":"6f3d7be00da1f84b3c707ad96a537940475f4e71","filename":"openjpa-project/BUILDING.txt","status":"modified","additions":43,"deletions":28,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/BUILDING.txt","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/BUILDING.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/BUILDING.txt?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -103,15 +103,21 @@ $ mvn compile\n [INFO] Scanning for projects...\n [INFO] Reactor build order: \n [INFO]   OpenJPA\n-[INFO]   Utilities\n-[INFO]   Kernel\n-[INFO]   JDBC\n-[INFO]   XML Store\n-[INFO]   JDBC 1.5\n-[INFO]   Kernel 1.5\n-[INFO]   JPA\n-[INFO]   JPA JDBC\n-[INFO]   OpenJPA Project\n+[INFO]   OpenJPA Utilities\n+[INFO]   OpenJPA Kernel\n+[INFO]   OpenJPA JDBC\n+[INFO]   OpenJPA XML Store\n+[INFO]   OpenJPA Utilities 1.5\n+[INFO]   OpenJPA Kernel 1.5\n+[INFO]   OpenJPA JDBC 1.5\n+[INFO]   OpenJPA JPA\n+[INFO]   OpenJPA JPA JDBC\n+[INFO]   OpenJPA Aggregate Jar\n+[INFO]   OpenJPA Distribution\n+[INFO]   OpenJPA Integration Tests\n+[INFO]   OpenJPA Examples Integration Tests\n+[INFO]   OpenJPA JPA TCK Integration Tests\n+[INFO]   OpenJPA Persistence Examples\n [INFO] -------------------------------------------------------------------------\n [INFO] Building OpenJPA\n [INFO]    task-segment: [compile]\n@@ -123,23 +129,29 @@ $ mvn compile\n [INFO] ------------------------------------------------------------------------\n [INFO] Reactor Summary:\n [INFO] ------------------------------------------------------------------------\n-[INFO] OpenJPA ............................................... SUCCESS [0.789s]\n-[INFO] Utilities ............................................. SUCCESS [3.489s]\n-[INFO] Kernel ................................................ SUCCESS [9.347s]\n-[INFO] JDBC .................................................. SUCCESS [12.208s]\n-[INFO] XML Store ............................................. SUCCESS [1.166s]\n-[INFO] JDBC 1.5 .............................................. SUCCESS [1.519s]\n-[INFO] Kernel 1.5 ............................................ SUCCESS [0.538s]\n-[INFO] JPA ................................................... SUCCESS [2.777s]\n-[INFO] JPA JDBC .............................................. SUCCESS [2.151s]\n-[INFO] OpenJPA Project ....................................... SUCCESS [1.495s]\n+[INFO] OpenJPA ............................................... SUCCESS [0.000s]\n+[INFO] OpenJPA Utilities ..................................... SUCCESS [8.766s]\n+[INFO] OpenJPA Kernel ........................................ SUCCESS [7.672s]\n+[INFO] OpenJPA JDBC .......................................... SUCCESS [5.203s]\n+[INFO] OpenJPA XML Store ..................................... SUCCESS [1.047s]\n+[INFO] OpenJPA Utilities 1.5 ................................. SUCCESS [0.485s]\n+[INFO] OpenJPA Kernel 1.5 .................................... SUCCESS [0.937s]\n+[INFO] OpenJPA JDBC 1.5 ...................................... SUCCESS [1.172s]\n+[INFO] OpenJPA JPA ........................................... SUCCESS [2.469s]\n+[INFO] OpenJPA JPA JDBC ...................................... SUCCESS [2.125s]\n+[INFO] OpenJPA Aggregate Jar ................................. SUCCESS [0.016s]\n+[INFO] OpenJPA Distribution .................................. SUCCESS [0.125s]\n+[INFO] OpenJPA Integration Tests ............................. SUCCESS [0.000s]\n+[INFO] OpenJPA Examples Integration Tests .................... SUCCESS [0.000s]\n+[INFO] OpenJPA JPA TCK Integration Tests ..................... SUCCESS [0.000s]\n+[INFO] OpenJPA Persistence Examples .......................... SUCCESS [1.078s]\n [INFO] ------------------------------------------------------------------------\n [INFO] ------------------------------------------------------------------------\n [INFO] BUILD SUCCESSFUL\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time: 37 seconds\n-[INFO] Finished at: Wed Jul 26 11:44:33 PDT 2006\n-[INFO] Final Memory: 10M/41M\n+[INFO] Finished at: Mon Oct 29 11:44:33 CST 2007\n+[INFO] Final Memory: 12M/65M\n [INFO] ------------------------------------------------------------------------\n \n \n@@ -149,17 +161,20 @@ $ mvn package -Dtest=false\n \n ...\n \n-[INFO] [assembly:assembly {execution: bin}]\n-[INFO] Building zip: /tmp/openjpatestbuild/trunk/openjpa-project/target/filtered\n--site/resources/downloads/openjpa-0.9.0.zip\n+[INFO] [assembly:attached {execution: bin}]\n+[INFO] Building zip: /tmp/openjpatestbuild/trunk/openjpa-project/../target/site/\n+downloads/apache-openjpa-1.0.1-binary.zip\n+[INFO] [assembly:attached {execution: sources}]\n+[INFO] Building zip: /tmp/openjpatestbuild/trunk/openjpa-project/../target/site/\n+downloads/apache-openjpa-1.0.1-source.zip\n \n ... \n \n \n-$ ls -lh openjpa-project/target/filtered-site/resources/downloads/\n+$ ls -lh target/site/downloads/\n \n-total 9.2M\n--rw-r--r--    1 mprudhom wheel       4.0M Jul 26 11:46 openjpa-0.9.0-sources.zip\n--rw-r--r--    1 mprudhom wheel       5.2M Jul 26 11:46 openjpa-0.9.0.zip\n+total 13M\n+-rw-r--r--   1 leealber None   7.4M Oct 29 16:03 apache-openjpa-1.0.1-binary.zip\n+-rw-r--r--   1 leealber None   4.8M Oct 29 16:03 apache-openjpa-1.0.1-source.zip\n \n  "},{"sha":"981bc24103276cea91eeefb40b4c5b08efc02372","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":110,"deletions":2,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -13,8 +13,8 @@\n \n Overview\n \n-   These notes describe the difference between OpenJPA release 1.0.0 and the\n-   preceding releases, 0.9.6 and 0.9.7. 1.0.0 is the first major release\n+   These notes describe the difference between OpenJPA release 1.0.1 and the\n+   preceding releases 0.9.7 and 1.0.0. 1.0.1 is the first maintenance release\n    since OpenJPA graduated to an Apache top level project (TLP), and contains\n    many new features and bugfixes.\n \n@@ -313,3 +313,111 @@ New Feature\n          advantage of any third-party cache that provides a way to get\n          multiple object in one call by providing a list of keys (oids).\n        * [OPENJPA-317] - API formalization pre-1.0\n+       \n+\n+                         OpenJPA 1.0.1 Release Notes\n+\n+** Bug\n+    * [OPENJPA-113] - when you specify columm table=\"empbean\"  in the xml file \n+      entity id or basic type when empbean is the default table name, the \n+      mapping tool generates extra foreign key field (eg.EmpBean_empid) in the \n+      table produced.\n+    * [OPENJPA-135] - join fetch not returning duplicate references which not \n+      conforming to ejb3.0 spec\n+    * [OPENJPA-209] - Query returning 2 entities w/unidir 1-1 relationship gets \n+      openjpa.persistence.ArgumentException: Address with the same id already \n+      exists in the L1 cache.\n+    * [OPENJPA-210] - Query returning 2 entities w/1-1 relationship returns \n+      wrong types in the result list\n+    * [OPENJPA-211] - CLONE -java.lang.VerifyError on websphere 6.1 with Spring \n+      2.0.3 and OpenJpa 0.96/0.97\n+    * [OPENJPA-251] - org.apache.openjpa.enhance.Reflection.getDeclaredMethod() \n+      has undefined behavior, leading to VM-dependent crashes\n+    * [OPENJPA-258] - MetaDataInheritanceComparator is not transitive; \n+      C > B > A > C leads to out-of-memory crash in PCEnhancer\n+    * [OPENJPA-282] - Postgresql does not support deferred unique constraints.\n+    * [OPENJPA-295] - ArrayIndexOutofBoundsException when under load and within \n+      a managed Transaction\n+    * [OPENJPA-316] - Unenhanced OneToMany collection not loaded\n+    * [OPENJPA-326] - NPE if a discriminator column is specified without \n+      discriminator type in orm.xml\n+    * [OPENJPA-329] - Generic interface may cause the openjpa Reflection code to\n+      pickup the wrong getter method\n+    * [OPENJPA-331] - Allow BigInteger and other Basic types as Primary Keys\n+    * [OPENJPA-335] - Logic in getters for entities with property access causes \n+      the PCEnhancer to hang\n+    * [OPENJPA-339] - Java 2 security Access denied in File.toURL() call\n+    * [OPENJPA-343] - Do not call setRollbackOnly on inactive Transactions\n+    * [OPENJPA-346] - PCEnhancerAgent backwards-compatibility setting \n+      overly-enables enhancement\n+    * [OPENJPA-347] - Performance Issue with Lazy Loaded Foreign Keys\n+    * [OPENJPA-353] - Character discriminators are not converted correctly if \n+      storeCharsAsNumbers = true\n+    * [OPENJPA-355] - OpenJPA Log4J factory incorrectly handles logging level\n+    * [OPENJPA-356] - DB2 requires CASTs when parameters appear in SELECT clause\n+    * [OPENJPA-357] - Use case where FetchGroup A includes FecthGroup B is not \n+      honoured by fetch operations\n+    * [OPENJPA-358] - Recursion Depth for Field f should be calculated w.r.t \n+      active fetch groups and not all fetch groups\n+    * [OPENJPA-360] - SQL FOR UPDATE OF incorrectly generated for DB2/NT SQL0816\n+    * [OPENJPA-361] - Incorrect GREG_OFFSET offset or inconsistent usage in \n+      UUIDGenerator\n+    * [OPENJPA-366] - InternalException thrown in BrokerImpl.endOperation\n+    * [OPENJPA-367] - PCEnhancer does not find meta data for entities using pure\n+      XML annotation\n+    * [OPENJPA-368] - Multithreaded client fails randomly on \n+      EntityManager.persist() with out transaction context.\n+    * [OPENJPA-369] - AccessDeclaredMembers RuntimePermission requires by \n+      Solaris JDK with security enabled\n+    * [OPENJPA-372] - PCEnhancer throws away its classloader\n+    * [OPENJPA-375] - DB2 autoCommit(true) causes Result Set prematurely closed \n+      in WebContainer JEE environment.\n+    * [OPENJPA-376] - Need more trace for transaction demarcation\n+    * [OPENJPA-377] - RuntimeUnenhancedClasses support can go into a \n+      \"half baked\" state\n+    * [OPENJPA-378] - DB2 SQL incorrectly generating \"FETCH FIRST n ROWS ONLY\" \n+      in subselects\n+    * [OPENJPA-380] - Connecting to database when an unused emf is closed \n+    * [OPENJPA-382] - Overriding column names for Byte[] attributes causes \n+      exception.\n+    * [OPENJPA-385] - IndexOutOfBounds exception when parsing \".class\" files\n+    * [OPENJPA-387] - Getting \"java.lang.ClassNotFoundException\" when loading \n+      datacache plug-in which is a class outside of OpenJPA package.\n+    * [OPENJPA-388] - MappingToolTask can't find persistence meta data. \n+    * [OPENJPA-389] - em.getTransaction().commit() is not issuing database \n+      commit for NativeQuery requesting updates\n+    * [OPENJPA-394] - DB2 CAST VARCHAR type missing LENGTH\n+    * [OPENJPA-395] - Accessing short Foreign Key metadata fields as ints causes\n+      problems on iSeries\n+    * [OPENJPA-396] - Cloning Calendar proxies doesn't detach from StateManager\n+    * [OPENJPA-397] - schematool ant task always requires files\n+    * [OPENJPA-401] - UnsatisfiedLinkError in MappingToolTask when using DB2 \n+      JDBC driver \n+    * [OPENJPA-402] - Unable to detect an valid Entity's meta data when the \n+      entity's .class file size is large.\n+    * [OPENJPA-403] - LoadFetchGroup patch (OPENJPA-370) introduces NPE\n+    * [OPENJPA-405] - need extract space in the message text\n+    * [OPENJPA-409] - Quick message updates\n+    * [OPENJPA-410] - Change \"connecting to dictionary\" message from Info to \n+      Trace\n+    * [OPENJPA-413] - Fix some message text in the localizer.properties files\n+    * [OPENJPA-415] - Garbage collection of AbstractResultList instance closes \n+      active connection\n+    * [OPENJPA-416] - Unclear exception if an unknown external value is used\n+    * [OPENJPA-420] - JPQL constructor query close the <SELECT DISTINCT> \n+      feature? \n+    * [OPENJPA-421] - OpenJPA generates bad SQL before configuration fully \n+      populated\n+    * [OPENJPA-422] - Calendar objects contained in a detached Entity still have\n+      a \"live\" StateManagerImpl\n+    * [OPENJPA-423] - Deadlock victim exception getting sequence value with\n+      SQLServer\n+\n+** Sub-task\n+    * [OPENJPA-309] - CTS passing in at least JDK6\n+    * [OPENJPA-408] - Improve error processing for \n+      openjpa.RuntimeUnenhancedClasses property settings\n+\n+** Improvement\n+    * [OPENJPA-338] - Remove unnecessary CAST in SQL statement for DB2\n+"},{"sha":"3b3b5ddb3278a17fa24628124b3104ff7efc894f","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":90,"deletions":19,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -18,10 +18,10 @@ <h1>Release Notes for OpenJPA</h1>\n \n <h2><a name=\"Overview\"></a>Overview</h2>\n \n-<p> These notes describe the difference between OpenJPA release 1.0.0\n-and the preceding releases, 0.9.6 and 0.9.7. 1.0.0 is the first\n-major release since OpenJPA graduated to an Apache top level project (TLP),\n-and contains many new features and bugfixes.\n+<p>These notes describe the difference between OpenJPA release 1.0.1 and the\n+preceding releases, 0.9.7 and 1.0.0. 1.0.1 is the first maintenance release\n+since OpenJPA graduated to an Apache top level project (TLP), and contains\n+many new features and bugfixes.\n <P>\n OpenJPA is a feature-rich implementation of the persistence part of \n Java Community Process JSR-220 (Enterprise JavaBeans 3.0), which is\n@@ -60,9 +60,8 @@ <h2><a name=\"License\"></a>License</h2>\n \n <h2><a name=\"Prerequisites\"></a>Prerequisites</h2>\n <P>\n-OpenJPA requires Java 1.5 but will not compile with Java 6. For more\n-detail please see <a href=\"http://issues.apache.org/jira/browse/OPENJPA-5\">\n-http://issues.apache.org/jira/browse/OPENJPA-5</a>\n+In normal usage, OpenJPA requires Java 5 or higher and a relational \n+database of some sort.\n \n <h2><a name=\"Documentation\"></a>Documentation</h2>\n <p>If you have questions about OpenJPA, a good source of information is the \n@@ -102,12 +101,12 @@ <h2><a name=\"GetInvolved\"></a>Getting Involved</h2>\n \n <h1><a name=\"0.9.7\">OpenJPA 0.9.7 Release Notes</a></h1>\n \n-<h2><a name=\"Bugs\"</a>Bugs</h2>\n+<h2><a name=\"Bugs\"/>Bugs Fixed</h2>\n The following bugs have been fixed for release 0.9.7\n <ul>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-16'>OPENJPA-16</a>] - NPE in createQuery for EJB QL with nested correlated subqueries</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-21'>OPENJPA-21</a>] - Time is missing from list of mutable classes.</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-22'>OPENJPA-22</a>] - locate & substring queries fail both db2 & derby, cannot use parameter markers in expression ?-?</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-22'>OPENJPA-22</a>] - locate &amp; substring queries fail both db2 &amp; derby, cannot use parameter markers in expression ?-?</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-23'>OPENJPA-23</a>] - -418 sqlexception using DB2 and EJB QL with SQRT or MOD</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-24'>OPENJPA-24</a>] - Allow OpenJPA to be extensible</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-25'>OPENJPA-25</a>] - Incorrect SQL generated for queries involving more than one AbstractSchemaNames, generated SQL FROM clause is missing 'Table alias'</li>\n@@ -125,7 +124,7 @@ <h2><a name=\"Bugs\"</a>Bugs</h2>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-80'>OPENJPA-80</a>] - Bad Escaping for LIKE in MySQL</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-98'>OPENJPA-98</a>] - Java deadlock when insert in t1 and find in t2 when using IBM JVM 1.5.0</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-100'>OPENJPA-100</a>] - <jar-file> entries failing to be processed for persistence unit rooted in an EAR</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-102'>OPENJPA-102</a>] - JTA transaction rollback, nonexistant instances, transactional persistence context => failures during afterCompletion() and close()</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-102'>OPENJPA-102</a>] - JTA transaction rollback, nonexistant instances, transactional persistence context =&gt; failures during afterCompletion() and close()</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-103'>OPENJPA-103</a>] - Default Listeners not being processed correctly</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-104'>OPENJPA-104</a>] - OpenJPA does not detach instances on rollback()</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-107'>OPENJPA-107</a>] - @SqlResultSetMappings fails in mapping tool with java.lang.ArrayStoreException</li>\n@@ -158,13 +157,12 @@ <h2><a name=\"Bugs\"</a>Bugs</h2>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-181'>OPENJPA-181</a>] - ClassCastException when executing bulk delete on an entity that owns a OneToOne with a Cascade.DELETE when DataCache is on</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-185'>OPENJPA-185</a>] - optional attribute is not overriden by xml descriptor</li>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-186'>OPENJPA-186</a>] - Build failure of OpenJPA sources from trunk</li>\n-</ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-202'>OPENJPA-202</a>] - after invoking LRS processing in a client by calling an @LRS annotated relationship, the next em.clear()/em.close() gets org.apache.openjpa.persistence.InvalidStateException: You cannot transfer large result set fields from one object or field to another</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-208'>OPENJPA-208</a>] - NoResultException and NonUniqueResultException are not thrown when expected</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-214'>OPENJPA-214</a>] - Need to support floating point primary keys</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-202'>OPENJPA-202</a>] - after invoking LRS processing in a client by calling an @LRS annotated relationship, the next em.clear()/em.close() gets org.apache.openjpa.persistence.InvalidStateException: You cannot transfer large result set fields from one object or field to another\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-208'>OPENJPA-208</a>] - NoResultException and NonUniqueResultException are not thrown when expected\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-214'>OPENJPA-214</a>] - Need to support floating point primary keys\n </ul>\n     \n-<h2><a name=\"Improvements\"</a>Improvements</h2>\n+<h2><a name=\"Improvements\"/>Improvements</h2>\n Improvements made for release 0.9.7\n <ul>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-10'>OPENJPA-10</a>] - persistence unit name should be default diagnostic context for standard OpenJPA log impl</li>\n@@ -181,7 +179,7 @@ <h2><a name=\"Improvements\"</a>Improvements</h2>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-196'>OPENJPA-196</a>] - Ease the restrictions on forcing a matche between the number of declared and assigned positional parameters</li>\n </ul>\n     \n-<h2><a name=\"New Features\"</a>New Features</h2>\n+<h2><A name=\"New Features\"/>New Features</h2>\n Features added for release 0.9.7\n <ul>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-92'>OPENJPA-92</a>] - Support for H2 Database Engine</li>\n@@ -192,13 +190,13 @@ <h2><a name=\"New Features\"</a>New Features</h2>\n \n \n \n-<h2><a name=\"Task\"</a>Task</h2>\n+<h2><A name=\"Task\"/>Task</h2>\n Tasks done for release 0.9.7\n <ul>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-36'>OPENJPA-36</a>] - Add cwiki url to incubator status page</li>\n </ul>\n     \n-<h2><a name=\"Test\"</a>Test</h2>\n+<h2><A name=\"Test\"/>Test</h2>\n Additional testing done for release 0.9.7\n <ul>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-40'>OPENJPA-40</a>] - Testing OpenJPA and Spring integration fails</li>\n@@ -279,7 +277,7 @@ <h2> Bugs fixed\n </li>\n </ul>\n \n-<h2> Sub-task\n+<h2> Sub-tasks\n </h2>\n <ul>\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-279'>OPENJPA-279</a>] - Fixed missing lookup for non-jta-data-source in JDBCConfigurationImpl.\n@@ -317,8 +315,81 @@ <h2> New Feature\n <li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-317'>OPENJPA-317</a>] - API formalization pre-1.0\n </li>\n </ul>\n+<h1><a name=\"1.0.1\">OpenJPA 1.0.1 Release Notes</a></h1>\n \n  \n+<h2> Bugs fixed\n+</h2>\n+<ul>\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-113\">OPENJPA-113</a>] - when you specify columm table=&quot;empbean&quot; in the xml file entity id or basic type when empbean is the default table name, the mapping tool generates extra foreign key field (eg.EmpBean_empid) in the table produced\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-135\">OPENJPA-135</a>] - join fetch not returning duplicate references which not conforming to ejb3.0 spec\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-209\">OPENJPA-209</a>] - Query returning 2 entities w/unidir 1-1 relationship gets openjpa.persistence.ArgumentException: Address with the same id already exists in the L1 cache.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-210\">OPENJPA-210</a>] - Query returning 2 entities w/1-1 relationship returns wrong types in the result list\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-211\">OPENJPA-211</a>] - CLONE -java.lang.VerifyError on websphere 6.1 with Spring 2.0.3 and OpenJpa 0.96/0.97\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-251\">OPENJPA-251</a>] - org.apache.openjpa.enhance.Reflection.getDeclaredMethod() has undefined behavior, leading to VM-dependent crashes\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-258\">OPENJPA-258</a>] - MetaDataInheritanceComparator is not transitive; C &gt; B &gt; A &gt; C leads to out-of-memory crash in PCEnhancer\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-282\">OPENJPA-282</a>] - Postgresql does not support deferred unique constraints\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-295\">OPENJPA-295</a>] - ArrayIndexOutofBoundsException when under load and within a managed Transaction\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-316\">OPENJPA-316</a>] - Unenhanced OneToMany collection not loaded\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-326\">OPENJPA-326</a>] - NPE if a discriminator column is specified without discriminator type in orm.xml\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-329\">OPENJPA-329</a>] - Generic interface may cause the openjpa Reflection code to pickup the wrong getter method\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-331\">OPENJPA-331</a>] - Allow BigInteger and other Basic types as Primary Keys\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-335\">OPENJPA-335</a>] - Logic in getters for entities with property access causes the PCEnhancer to hang\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-339\">OPENJPA-339</a>] - Java 2 security Access denied in File.toURL() call\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-343\">OPENJPA-343</a>] - Do not call setRollbackOnly on inactive Transactions\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-346\">OPENJPA-346</a>] - PCEnhancerAgent backwards-compatibility setting overly-enables enhancement\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-347\">OPENJPA-347</a>] - Performance Issue with Lazy Loaded Foreign Keys\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-353\">OPENJPA-353</a>] - Character discriminators are not converted correctly if storeCharsAsNumbers = true\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-355\">OPENJPA-355</a>] - OpenJPA Log4J factory incorrectly handles logging level\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-356\">OPENJPA-356</a>] - DB2 requires CASTs when parameters appear in SELECT clause\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-357\">OPENJPA-357</a>] - Use case where FetchGroup A includes FecthGroup B is not honoured by fetch operations\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-358\">OPENJPA-358</a>] - Recursion Depth for Field f should be calculated w.r.t active fetch groups and not all fetch groups\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-360\">OPENJPA-360</a>] - SQL FOR UPDATE OF incorrectly generated for DB2/NT SQL0816\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-361\">OPENJPA-361</a>] - Incorrect GREG_OFFSET offset or inconsistent usage in UUIDGenerator\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-366\">OPENJPA-366</a>] - InternalException thrown in BrokerImpl.endOperation\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-367\">OPENJPA-367</a>] - PCEnhancer does not find meta data for entities using pure XML annotation\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-368\">OPENJPA-368</a>] - Multithreaded client fails randomly on EntityManager.persist() with out transaction context.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-369\">OPENJPA-369</a>] - AccessDeclaredMembers RuntimePermission requires by Solaris JDK with security enabled\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-372\">OPENJPA-372</a>] - PCEnhancer throws away its classloader\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-375\">OPENJPA-375</a>] - DB2 autoCommit(true) causes Result Set prematurely closed in WebContainer JEE environment.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-376\">OPENJPA-376</a>] - Need more trace for transaction demarcation\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-377\">OPENJPA-377</a>] - RuntimeUnenhancedClasses support can go into a &quot;half baked&quot; state\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-378\">OPENJPA-378</a>] - DB2 SQL incorrectly generating &quot;FETCH FIRST n ROWS ONLY&quot; in subselects\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-380\">OPENJPA-380</a>] - Connecting to database when an unused emf is closed\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-382\">OPENJPA-382</a>] - Overriding column names for Byte[] attributes causes exception.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-385\">OPENJPA-385</a>] - IndexOutOfBounds exception when parsing &quot;.class&quot; files\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-387\">OPENJPA-387</a>] - Getting &quot;java.lang.ClassNotFoundException&quot; when loading datacache plug-in which is a class outside of OpenJPA package.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-388\">OPENJPA-388</a>] - MappingToolTask can't find persistence meta data.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-389\">OPENJPA-389</a>] - em.getTransaction().commit() is not issuing database commit for NativeQuery requesting updates\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-394\">OPENJPA-394</a>] - DB2 CAST VARCHAR type missing LENGTH\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-395\">OPENJPA-395</a>] - Accessing short Foreign Key metadata fields as ints causes problems on iSeries\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-396\">OPENJPA-396</a>] - Cloning Calendar proxies doesn't detach from StateManager\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-397\">OPENJPA-397</a>] - schematool ant task always requires files\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-401\">OPENJPA-401</a>] - UnsatisfiedLinkError in MappingToolTask when using DB2 JDBC driver\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-402\">OPENJPA-402</a>] - Unable to detect an valid Entity's meta data when the entity's .class file size is large.\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-403\">OPENJPA-403</a>] - LoadFetchGroup patch (OPENJPA-370) introduces NPE\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-405\">OPENJPA-405</a>] - need extract space in the message text\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-409\">OPENJPA-409</a>] - Quick message updates\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-410\">OPENJPA-410</a>] - Change &quot;connecting to dictionary&quot; message from Info to Trace\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-413\">OPENJPA-413</a>] - Fix some message text in the localizer.properties files\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-415\">OPENJPA-415</a>] - Garbage collection of AbstractResultList instance closes active connection\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-416\">OPENJPA-416</a>] - Unclear exception if an unknown external value is used\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-420\">OPENJPA-420</a>] - JPQL constructor query close the &lt;SELECT DISTINCT&gt; feature? \n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-421\">OPENJPA-421</a>] - OpenJPA generates bad SQL before configuration fully populated\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-422\">OPENJPA-422</a>] - Calendar objects contained in a detached Entity still have a &quot;live&quot; StateManagerImpl\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-423\">OPENJPA-423</a>] - Deadlock victim exception getting sequence value with SQLServer\n+</ul>\n+\n+<h2> Sub-tasks</h2>\n+<ul>\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-309\">OPENJPA-309</a>] - CTS passing in at least JDK6\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-408\">OPENJPA-408</a>] - Improve error processing for openjpa.RuntimeUnenhancedClasses property settings\n+</ul>\n+<h2> Improvement\n+</h2>\n+<ul>\n+<li>[<a href=\"http://issues.apache.org/jira/browse/OPENJPA-338\">OPENJPA-338</a>] - Remove unnecessary CAST in SQL statement for DB2</li>\n+</ul>\n </body>\n </html>\n "},{"sha":"c6262c9c16138017a61dbc1d87ef5e1f4ed4b026","filename":"openjpa-project/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -40,11 +40,11 @@\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n         <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.0.0</version>\r\n+        <version>1.0.1</version>\r\n     </parent>\r\n \r\n     <properties>\r\n-        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk/openjpa-project</scm.dir>\r\n+        <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.x/openjpa-project</scm.dir>\r\n         <openjpa.release.keyAlias>\r\n             ${user.name}@apache.org\r\n         </openjpa.release.keyAlias>\r"},{"sha":"5d90a6f8985ed7f0ec074c89d9c671cf56708ccd","filename":"openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -883,6 +883,19 @@ These string constants are defined in\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/Generator.html\">\n <classname>org.apache.openjpa.persistence.Generator</classname></ulink>.\n                 </para>\n+                 <para>\n+If the entities are mapped to the same table name but with different schema \n+name within one <literal>PersistenceUnit</literal> intentionally, and the \n+strategy of <literal>GeneratedType.AUTO</literal> is used to generate the ID \n+for each entity, a schema name for each entity must be explicitly declared \n+either through the annotation or the mapping.xml file. Otherwise, the mapping \n+tool only creates the tables for those entities with the schema names under \n+each schema. In addition, there will be only one \n+<literal>OPENJPA_SEQUENCE_TABLE</literal> created for all the entities within \n+the <literal>PersistenceUnit</literal> if the entities are not identified \n+with the schema name. Read <xref linkend=\"ref_guide_sequence\"/> and \n+<xref linkend=\"ref_guide_schema_def\"/> in the Reference Guide.\n+                </para>\n             </note>\n         </section>\n         <section id=\"jpa_overview_meta_embedid\">"},{"sha":"a39294bf69c67f8cb387dc512e5359fc244db168","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -3299,6 +3299,19 @@ The <literal>Schema</literal> property also establishes the default schema for\n new tables created through OpenJPA tools, such as the mapping tool covered in\n <xref linkend=\"ref_guide_mapping_mappingtool\"/>.\n         </para>\n+        <para>\n+If the entities are mapped to the same table name but with different schema \n+name within one <literal>PersistenceUnit</literal> intentionally, and the \n+strategy of <literal>GeneratedType.AUTO</literal> is used to generate the ID \n+for each entity, a schema name for each entity must be explicitly declared \n+either through the annotation or the mapping.xml file. Otherwise, the mapping \n+tool only creates the tables for those entities with the schema names under \n+each schema. In addition, there will be only one \n+<literal>OPENJPA_SEQUENCE_TABLE</literal> created for all the entities within \n+the <literal>PersistenceUnit</literal> if the entities are not identified \n+with the schema name. \n+Read <xref linkend=\"ref_guide_sequence\"/> in the Reference Guide.\n+        </para>\n     </section>\n     <section id=\"ref_guide_schema_info\">\n         <title>"},{"sha":"a72845c03ce9cdb3ab1590459ab1cb1a9262763a","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -178,7 +178,7 @@ with the <link linkend=\"openjpa.BrokerImpl\"><literal>openjpa.BrokerImpl\n </literal></link> configuration property. Set this property to the full class \n name of your custom subclass. When implementing your subclass, consider the\n finalization issues mentioned in \n-<link linkend=\"ref_guide_runtime_broker_finalization\"/>. It may be appropriate\n+<xref linkend=\"ref_guide_runtime_broker_finalization\"/>. It may be appropriate\n to create a subtype of both \n <ulink url=\"../javadoc/org/apache/openjpa/kernel/BrokerImpl.html\">\n <classname>org.apache.openjpa.kernel.BrokerImpl</classname></ulink> and\n@@ -1455,7 +1455,10 @@ This <classname>Seq</classname> has the following properties:\n                     <listitem>\n                         <para>\n <literal>Table</literal>: The name of the sequence number table to use.\n-Defaults to <literal>OPENJPA_SEQUENCE_TABLE</literal>.\n+Defaults to <literal>OPENJPA_SEQUENCE_TABLE</literal>. If the entities are \n+mapped to the same table name but with different schema name within one \n+PersistenceUnit, one <literal>OPENJPA_SEQUENCE_TABLE</literal> is created \n+for each schema.\n                         </para>\n                     </listitem>\n                     <listitem>"},{"sha":"ff66f7b98261f724e015e12a35b281ef4ad476fa","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0</version>\n+        <version>1.0.1</version>\n     </parent>\n     <profiles>\n         <profile>"},{"sha":"4b1f9de2de436b21eb6bb983dd6fde0169b99e32","filename":"pom.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/093c9c3ec2da31183bca5ef71c023b871a967fd9/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/093c9c3ec2da31183bca5ef71c023b871a967fd9/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=093c9c3ec2da31183bca5ef71c023b871a967fd9","patch":"@@ -32,15 +32,15 @@\n     <description>OpenJPA</description>\n \n     <properties>\n-        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk</scm.dir>\n+        <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.1</scm.dir>\n         <openjpa.version>${pom.version}</openjpa.version>\n     </properties>\n \n     <!--\n         Changing this version needs to also be done in all children poms\n         See: http://jira.codehaus.org/browse/MNG-624\n     -->\n-    <version>1.0.0</version>\n+    <version>1.0.1</version>\n     <url>http://openjpa.apache.org</url>\n     <issueManagement>\n         <system>jira</system>\n@@ -75,9 +75,12 @@\n             Committer list taken from http://openjpa.apache.org/committers.html\n         -->\n         <developer><name>Abe White</name></developer>\n+        <developer><name>Albert Lee</name></developer>\n         <developer><name>Brian McCallister</name></developer>\n         <developer><name>Bryan Noll</name></developer>\n+        <developer><name>Catalina Wei</name></developer>\n         <developer><name>Craig Russell</name></developer>\n+        <developer><name>David Ezzio</name></developer>\n         <developer><name>David Wisneski</name></developer>\n         <developer><name>Eddie O'Neil</name></developer>\n         <developer><name>Geir Magnusson Jr.</name></developer>\n@@ -121,6 +124,7 @@\n                 <jdk>1.5</jdk>\n             </activation>\n             <modules>\n+                <module>openjpa-lib-5</module>\n                 <module>openjpa-persistence</module>\n                 <module>openjpa-persistence-jdbc</module>\n                 <module>openjpa-kernel-5</module>"}]}

