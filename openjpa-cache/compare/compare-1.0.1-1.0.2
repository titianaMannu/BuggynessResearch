{"url":"https://api.github.com/repos/apache/openjpa/compare/1.0.1...1.0.2","html_url":"https://github.com/apache/openjpa/compare/1.0.1...1.0.2","permalink_url":"https://github.com/apache/openjpa/compare/apache:093c9c3...apache:94515fa","diff_url":"https://github.com/apache/openjpa/compare/1.0.1...1.0.2.diff","patch_url":"https://github.com/apache/openjpa/compare/1.0.1...1.0.2.patch","base_commit":{"sha":"093c9c3ec2da31183bca5ef71c023b871a967fd9","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5M2M5YzNlYzJkYTMxMTgzYmNhNWVmNzFjMDIzYjg3MWE5NjdmZDk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-05T20:36:38Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-05T20:36:38Z"},"message":"Remove OPENJPA-370 from CHANGES.txt and RELEASE-NOTES.html.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.1@592145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"874b9e1c07a84b7454cf60ab7382d24d905a87f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/874b9e1c07a84b7454cf60ab7382d24d905a87f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/093c9c3ec2da31183bca5ef71c023b871a967fd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/093c9c3ec2da31183bca5ef71c023b871a967fd9","html_url":"https://github.com/apache/openjpa/commit/093c9c3ec2da31183bca5ef71c023b871a967fd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/093c9c3ec2da31183bca5ef71c023b871a967fd9/comments","author":null,"committer":null,"parents":[{"sha":"1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","url":"https://api.github.com/repos/apache/openjpa/commits/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2","html_url":"https://github.com/apache/openjpa/commit/1b7b7ce4833c60d77fc1794977b5edd4122f4bd2"}]},"merge_base_commit":{"sha":"38607842164f59a131fd4862fc41958653df6f92","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4NjA3ODQyMTY0ZjU5YTEzMWZkNDg2MmZjNDE5NTg2NTNkZjZmOTI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T18:21:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T18:21:56Z"},"message":"OPENJPA-399 committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@589784 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"531288fe455e94535c3b8382a18f8289265a31d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/531288fe455e94535c3b8382a18f8289265a31d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38607842164f59a131fd4862fc41958653df6f92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38607842164f59a131fd4862fc41958653df6f92","html_url":"https://github.com/apache/openjpa/commit/38607842164f59a131fd4862fc41958653df6f92","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38607842164f59a131fd4862fc41958653df6f92/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"446a0e054324407a7e83166a7f91263a07a20941","url":"https://api.github.com/repos/apache/openjpa/commits/446a0e054324407a7e83166a7f91263a07a20941","html_url":"https://github.com/apache/openjpa/commit/446a0e054324407a7e83166a7f91263a07a20941"}]},"status":"diverged","ahead_by":37,"behind_by":7,"total_commits":37,"commits":[{"sha":"5e927f23763fe5f7c380057001f9f5d7cb9f869d","node_id":"MDY6Q29tbWl0MjA2MzY0OjVlOTI3ZjIzNzYzZmU1ZjdjMzgwMDU3MDAxZjlmNWQ3Y2I5Zjg2OWQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-10-30T21:51:47Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-10-30T21:51:47Z"},"message":"OPENJPA-375: undo this fix for DB2 (result set closed problem). The problem is resolved by setting DB2 datasource custom property \"resultSetHoldability\"  to 1 in WebSphere.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@590481 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7bea4f828788b2c270340b3c53cee4184a7cee7f","url":"https://api.github.com/repos/apache/openjpa/git/trees/7bea4f828788b2c270340b3c53cee4184a7cee7f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5e927f23763fe5f7c380057001f9f5d7cb9f869d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5e927f23763fe5f7c380057001f9f5d7cb9f869d","html_url":"https://github.com/apache/openjpa/commit/5e927f23763fe5f7c380057001f9f5d7cb9f869d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5e927f23763fe5f7c380057001f9f5d7cb9f869d/comments","author":null,"committer":null,"parents":[{"sha":"38607842164f59a131fd4862fc41958653df6f92","url":"https://api.github.com/repos/apache/openjpa/commits/38607842164f59a131fd4862fc41958653df6f92","html_url":"https://github.com/apache/openjpa/commit/38607842164f59a131fd4862fc41958653df6f92"}]},{"sha":"b522dea9422d04ff30868f9c8add1396dc653b2f","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1MjJkZWE5NDIyZDA0ZmYzMDg2OGY5YzhhZGQxMzk2ZGM2NTNiMmY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-31T22:29:28Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-10-31T22:29:28Z"},"message":"Update committers in top level pom.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@590854 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"889ab414f6490ba709392b4227a4a3298bb8d7ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/889ab414f6490ba709392b4227a4a3298bb8d7ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b522dea9422d04ff30868f9c8add1396dc653b2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b522dea9422d04ff30868f9c8add1396dc653b2f","html_url":"https://github.com/apache/openjpa/commit/b522dea9422d04ff30868f9c8add1396dc653b2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b522dea9422d04ff30868f9c8add1396dc653b2f/comments","author":null,"committer":null,"parents":[{"sha":"5e927f23763fe5f7c380057001f9f5d7cb9f869d","url":"https://api.github.com/repos/apache/openjpa/commits/5e927f23763fe5f7c380057001f9f5d7cb9f869d","html_url":"https://github.com/apache/openjpa/commit/5e927f23763fe5f7c380057001f9f5d7cb9f869d"}]},{"sha":"3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5MTllNWVlN2JlNzRkZGYzMGZmN2JkZTAyNGQyYzMxMmQ2YWUyZmQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-11-01T22:36:09Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-11-01T22:36:09Z"},"message":"OPENJPA-370.  Backing out the changes for the LoadFetchGroup implementation.  We need to re-think the implementation (both the real and the expected).  I left the test Entities in SVN, but removed the testcase so that we wouldn't fail the builds.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@591157 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d43c63bd6ecb01d06c5003f564a1a7edb8d2947c","url":"https://api.github.com/repos/apache/openjpa/git/trees/d43c63bd6ecb01d06c5003f564a1a7edb8d2947c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd","html_url":"https://github.com/apache/openjpa/commit/3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd/comments","author":null,"committer":null,"parents":[{"sha":"b522dea9422d04ff30868f9c8add1396dc653b2f","url":"https://api.github.com/repos/apache/openjpa/commits/b522dea9422d04ff30868f9c8add1396dc653b2f","html_url":"https://github.com/apache/openjpa/commit/b522dea9422d04ff30868f9c8add1396dc653b2f"}]},{"sha":"9e014f54d9650ce3da509729eb50acaadee07ca2","node_id":"MDY6Q29tbWl0MjA2MzY0OjllMDE0ZjU0ZDk2NTBjZTNkYTUwOTcyOWViNTBhY2FhZGVlMDdjYTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-10T01:35:32Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2007-11-10T01:35:32Z"},"message":"Update version from 1.0.1-SNAPSHOT to 1.0.2-SNAPSHOT\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@593712 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a09586f52dd8a1509b396d3abf7f12f1c6779dea","url":"https://api.github.com/repos/apache/openjpa/git/trees/a09586f52dd8a1509b396d3abf7f12f1c6779dea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e014f54d9650ce3da509729eb50acaadee07ca2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e014f54d9650ce3da509729eb50acaadee07ca2","html_url":"https://github.com/apache/openjpa/commit/9e014f54d9650ce3da509729eb50acaadee07ca2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e014f54d9650ce3da509729eb50acaadee07ca2/comments","author":null,"committer":null,"parents":[{"sha":"3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd","url":"https://api.github.com/repos/apache/openjpa/commits/3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd","html_url":"https://github.com/apache/openjpa/commit/3919e5ee7be74ddf30ff7bde024d2c312d6ae2fd"}]},{"sha":"de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlMWFhZTI5NmVmY2MxYTFiZmExY2U0OGI3ZWQ3MTg3YzZmMzlmZmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-20T16:33:31Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-20T16:33:31Z"},"message":"OPENJPA-446\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@596737 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7eaf227b1d64907ccd1331c6a3dc9e2a03e76606","url":"https://api.github.com/repos/apache/openjpa/git/trees/7eaf227b1d64907ccd1331c6a3dc9e2a03e76606"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff","html_url":"https://github.com/apache/openjpa/commit/de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"9e014f54d9650ce3da509729eb50acaadee07ca2","url":"https://api.github.com/repos/apache/openjpa/commits/9e014f54d9650ce3da509729eb50acaadee07ca2","html_url":"https://github.com/apache/openjpa/commit/9e014f54d9650ce3da509729eb50acaadee07ca2"}]},{"sha":"a062803ca57dcc226d18c6fcb5873fff0107d17c","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwNjI4MDNjYTU3ZGNjMjI2ZDE4YzZmY2I1ODczZmZmMDEwN2QxN2M=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-20T20:51:47Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-20T20:51:47Z"},"message":"OPENJPA-446 adding copyrights to new test cases in 1.0.x stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@596820 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"53f2859f8a1c3a6a24571e565f685dfd9f0495dd","url":"https://api.github.com/repos/apache/openjpa/git/trees/53f2859f8a1c3a6a24571e565f685dfd9f0495dd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a062803ca57dcc226d18c6fcb5873fff0107d17c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a062803ca57dcc226d18c6fcb5873fff0107d17c","html_url":"https://github.com/apache/openjpa/commit/a062803ca57dcc226d18c6fcb5873fff0107d17c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a062803ca57dcc226d18c6fcb5873fff0107d17c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff","url":"https://api.github.com/repos/apache/openjpa/commits/de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff","html_url":"https://github.com/apache/openjpa/commit/de1aae296efcc1a1bfa1ce48b7ed7187c6f39fff"}]},{"sha":"540c81c5c32ad552251b0eada332bd3c1b265afa","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0MGM4MWM1YzMyYWQ1NTIyNTFiMGVhZGEzMzJiZDNjMWIyNjVhZmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-30T19:26:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-30T19:26:49Z"},"message":"removed incorrect premain class from interim jar\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@607584 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c227cf490009ae23c5198c2396e7772c34830d8a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c227cf490009ae23c5198c2396e7772c34830d8a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/540c81c5c32ad552251b0eada332bd3c1b265afa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/540c81c5c32ad552251b0eada332bd3c1b265afa","html_url":"https://github.com/apache/openjpa/commit/540c81c5c32ad552251b0eada332bd3c1b265afa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/540c81c5c32ad552251b0eada332bd3c1b265afa/comments","author":null,"committer":null,"parents":[{"sha":"a062803ca57dcc226d18c6fcb5873fff0107d17c","url":"https://api.github.com/repos/apache/openjpa/commits/a062803ca57dcc226d18c6fcb5873fff0107d17c","html_url":"https://github.com/apache/openjpa/commit/a062803ca57dcc226d18c6fcb5873fff0107d17c"}]},{"sha":"cae90a6cf2731b91b6a6b409d42578b77fcbec5a","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhZTkwYTZjZjI3MzFiOTFiNmE2YjQwOWQ0MjU3OGI3N2ZjYmVjNWE=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2008-01-02T17:46:37Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2008-01-02T17:46:37Z"},"message":"OPENJPA-452 Fixed xml in secondary table mapping example. Patch contributed by Ignacio Andreu\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@608158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"287caddaed81a9a77718632fd2c424e5085c6117","url":"https://api.github.com/repos/apache/openjpa/git/trees/287caddaed81a9a77718632fd2c424e5085c6117"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cae90a6cf2731b91b6a6b409d42578b77fcbec5a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cae90a6cf2731b91b6a6b409d42578b77fcbec5a","html_url":"https://github.com/apache/openjpa/commit/cae90a6cf2731b91b6a6b409d42578b77fcbec5a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cae90a6cf2731b91b6a6b409d42578b77fcbec5a/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"540c81c5c32ad552251b0eada332bd3c1b265afa","url":"https://api.github.com/repos/apache/openjpa/commits/540c81c5c32ad552251b0eada332bd3c1b265afa","html_url":"https://github.com/apache/openjpa/commit/540c81c5c32ad552251b0eada332bd3c1b265afa"}]},{"sha":"d2264b92bb5aea7f7e345421ad845879f1fd8179","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyMjY0YjkyYmI1YWVhN2Y3ZTM0NTQyMWFkODQ1ODc5ZjFmZDgxNzk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:09:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:09:05Z"},"message":"Port of r603666 to 1.0.x. Change Services.getImplementorClasses(Class) and Services.getImplementorClasses(Class,ClassLoader) to filter out implementations that are not assignable to the Class argument. This allows the Services call to be more fault-tolerant in environments with odd classloader configurations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@609766 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"15684544140f8d63cf3141ddeef5774a8e6330f8","url":"https://api.github.com/repos/apache/openjpa/git/trees/15684544140f8d63cf3141ddeef5774a8e6330f8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d2264b92bb5aea7f7e345421ad845879f1fd8179","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d2264b92bb5aea7f7e345421ad845879f1fd8179","html_url":"https://github.com/apache/openjpa/commit/d2264b92bb5aea7f7e345421ad845879f1fd8179","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d2264b92bb5aea7f7e345421ad845879f1fd8179/comments","author":null,"committer":null,"parents":[{"sha":"cae90a6cf2731b91b6a6b409d42578b77fcbec5a","url":"https://api.github.com/repos/apache/openjpa/commits/cae90a6cf2731b91b6a6b409d42578b77fcbec5a","html_url":"https://github.com/apache/openjpa/commit/cae90a6cf2731b91b6a6b409d42578b77fcbec5a"}]},{"sha":"b013b6fd4a420dcb5dffd97e6e99669e67286d3e","node_id":"MDY6Q29tbWl0MjA2MzY0OmIwMTNiNmZkNGE0MjBkY2I1ZGZmZDk3ZTZlOTk2NjllNjcyODZkM2U=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-10T06:55:17Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-10T06:55:17Z"},"message":"OPENJPA-471 iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.IDENTITY)\nor @GeneratedValue(strategy=GenerationType.SEQUENCE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@610697 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f2a169e4350de20ce43c396ed8e4b1516d8da9a","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f2a169e4350de20ce43c396ed8e4b1516d8da9a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b013b6fd4a420dcb5dffd97e6e99669e67286d3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b013b6fd4a420dcb5dffd97e6e99669e67286d3e","html_url":"https://github.com/apache/openjpa/commit/b013b6fd4a420dcb5dffd97e6e99669e67286d3e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b013b6fd4a420dcb5dffd97e6e99669e67286d3e/comments","author":null,"committer":null,"parents":[{"sha":"d2264b92bb5aea7f7e345421ad845879f1fd8179","url":"https://api.github.com/repos/apache/openjpa/commits/d2264b92bb5aea7f7e345421ad845879f1fd8179","html_url":"https://github.com/apache/openjpa/commit/d2264b92bb5aea7f7e345421ad845879f1fd8179"}]},{"sha":"8ef7997457b4d980b6f21d2f7c8eaf11696754a9","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlZjc5OTc0NTdiNGQ5ODBiNmYyMWQyZjdjOGVhZjExNjk2NzU0YTk=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-17T15:35:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-17T15:35:45Z"},"message":"OPENJPA-437.  Changed AbstractBrokerFactory.loadPersistentTypes to be synchronized to get around the multi-threading issue during broker creation.\n\nAlso, migrated the change for OPENJPA-449 from trunk to the 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@612846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e51dd8687c6b7a601fbfd4f13aa74f6f80d03bd2","url":"https://api.github.com/repos/apache/openjpa/git/trees/e51dd8687c6b7a601fbfd4f13aa74f6f80d03bd2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","html_url":"https://github.com/apache/openjpa/commit/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9/comments","author":null,"committer":null,"parents":[{"sha":"b013b6fd4a420dcb5dffd97e6e99669e67286d3e","url":"https://api.github.com/repos/apache/openjpa/commits/b013b6fd4a420dcb5dffd97e6e99669e67286d3e","html_url":"https://github.com/apache/openjpa/commit/b013b6fd4a420dcb5dffd97e6e99669e67286d3e"}]},{"sha":"bebd829b4512143e33a1edb6f4291d28b7fa4127","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlYmQ4MjliNDUxMjE0M2UzM2ExZWRiNmY0MjkxZDI4YjdmYTQxMjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-01-23T15:17:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-01-23T15:17:42Z"},"message":"OPENJPA-245\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@614564 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86061292c08aa36fb621ed63e4092122154bda09","url":"https://api.github.com/repos/apache/openjpa/git/trees/86061292c08aa36fb621ed63e4092122154bda09"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bebd829b4512143e33a1edb6f4291d28b7fa4127","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bebd829b4512143e33a1edb6f4291d28b7fa4127","html_url":"https://github.com/apache/openjpa/commit/bebd829b4512143e33a1edb6f4291d28b7fa4127","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bebd829b4512143e33a1edb6f4291d28b7fa4127/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8ef7997457b4d980b6f21d2f7c8eaf11696754a9","url":"https://api.github.com/repos/apache/openjpa/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","html_url":"https://github.com/apache/openjpa/commit/8ef7997457b4d980b6f21d2f7c8eaf11696754a9"}]},{"sha":"72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZGI1NjgwZmE3YTk5NTRjZDFiYTVlNmQ4ZDkwY2EyNjVjMGUyMGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:30:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:30:47Z"},"message":"OPENJPA-437. Removed synchronization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@615311 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"638d4ae6f10bc934a343578104af9fb010bb5c97","url":"https://api.github.com/repos/apache/openjpa/git/trees/638d4ae6f10bc934a343578104af9fb010bb5c97"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","html_url":"https://github.com/apache/openjpa/commit/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d/comments","author":null,"committer":null,"parents":[{"sha":"bebd829b4512143e33a1edb6f4291d28b7fa4127","url":"https://api.github.com/repos/apache/openjpa/commits/bebd829b4512143e33a1edb6f4291d28b7fa4127","html_url":"https://github.com/apache/openjpa/commit/bebd829b4512143e33a1edb6f4291d28b7fa4127"}]},{"sha":"3a7f54f3d920614e5ec58855b432248d2845f08c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhN2Y1NGYzZDkyMDYxNGU1ZWM1ODg1NWI0MzIyNDhkMjg0NWYwOGM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:32:22Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:32:22Z"},"message":"OPENJPA-245\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@615313 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a8088e0437e9d42c8c46f894c273c63bb989beb","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a8088e0437e9d42c8c46f894c273c63bb989beb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a7f54f3d920614e5ec58855b432248d2845f08c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a7f54f3d920614e5ec58855b432248d2845f08c","html_url":"https://github.com/apache/openjpa/commit/3a7f54f3d920614e5ec58855b432248d2845f08c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a7f54f3d920614e5ec58855b432248d2845f08c/comments","author":null,"committer":null,"parents":[{"sha":"72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","url":"https://api.github.com/repos/apache/openjpa/commits/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","html_url":"https://github.com/apache/openjpa/commit/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d"}]},{"sha":"ce44c20cbd31287bd7b03aea7ff94692687c9a5f","node_id":"MDY6Q29tbWl0MjA2MzY0OmNlNDRjMjBjYmQzMTI4N2JkN2IwM2FlYTdmZjk0NjkyNjg3YzlhNWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T21:59:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T21:59:50Z"},"message":"OPENJPA-437\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@615368 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5831520c68cd0cd1442a0953d627f64c067bface","url":"https://api.github.com/repos/apache/openjpa/git/trees/5831520c68cd0cd1442a0953d627f64c067bface"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ce44c20cbd31287bd7b03aea7ff94692687c9a5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ce44c20cbd31287bd7b03aea7ff94692687c9a5f","html_url":"https://github.com/apache/openjpa/commit/ce44c20cbd31287bd7b03aea7ff94692687c9a5f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ce44c20cbd31287bd7b03aea7ff94692687c9a5f/comments","author":null,"committer":null,"parents":[{"sha":"3a7f54f3d920614e5ec58855b432248d2845f08c","url":"https://api.github.com/repos/apache/openjpa/commits/3a7f54f3d920614e5ec58855b432248d2845f08c","html_url":"https://github.com/apache/openjpa/commit/3a7f54f3d920614e5ec58855b432248d2845f08c"}]},{"sha":"276d7cdd232c215240de7ef2a7246a52ea035337","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3NmQ3Y2RkMjMyYzIxNTI0MGRlN2VmMmE3MjQ2YTUyZWEwMzUzMzc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T22:41:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T22:41:44Z"},"message":"OPENJPA-437. Correcting incorrect port of trunk change to branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@615382 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1df907e15c3029120f530252ebaf286bb137fae2","url":"https://api.github.com/repos/apache/openjpa/git/trees/1df907e15c3029120f530252ebaf286bb137fae2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/276d7cdd232c215240de7ef2a7246a52ea035337","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/276d7cdd232c215240de7ef2a7246a52ea035337","html_url":"https://github.com/apache/openjpa/commit/276d7cdd232c215240de7ef2a7246a52ea035337","comments_url":"https://api.github.com/repos/apache/openjpa/commits/276d7cdd232c215240de7ef2a7246a52ea035337/comments","author":null,"committer":null,"parents":[{"sha":"ce44c20cbd31287bd7b03aea7ff94692687c9a5f","url":"https://api.github.com/repos/apache/openjpa/commits/ce44c20cbd31287bd7b03aea7ff94692687c9a5f","html_url":"https://github.com/apache/openjpa/commit/ce44c20cbd31287bd7b03aea7ff94692687c9a5f"}]},{"sha":"200016ad61204f9b1da6d7c3475bf1ec234720ec","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwMDAxNmFkNjEyMDRmOWIxZGE2ZDdjMzQ3NWJmMWVjMjM0NzIwZWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T19:03:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T19:03:37Z"},"message":"OPENJPA-437. Reverted back to hard-reference ArrayList instead of a concurrent set, since the new logic only performs local mutation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@616844 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c275ad11271a2db96a84ed53de562a3aa127d5c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/c275ad11271a2db96a84ed53de562a3aa127d5c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/200016ad61204f9b1da6d7c3475bf1ec234720ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/200016ad61204f9b1da6d7c3475bf1ec234720ec","html_url":"https://github.com/apache/openjpa/commit/200016ad61204f9b1da6d7c3475bf1ec234720ec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/200016ad61204f9b1da6d7c3475bf1ec234720ec/comments","author":null,"committer":null,"parents":[{"sha":"276d7cdd232c215240de7ef2a7246a52ea035337","url":"https://api.github.com/repos/apache/openjpa/commits/276d7cdd232c215240de7ef2a7246a52ea035337","html_url":"https://github.com/apache/openjpa/commit/276d7cdd232c215240de7ef2a7246a52ea035337"}]},{"sha":"71470998d2cfe1d4957a01d9a9a75d5968a5a47f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxNDcwOTk4ZDJjZmUxZDQ5NTdhMDFkOWE5YTc1ZDU5NjhhNWE0N2Y=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T23:42:32Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T23:42:32Z"},"message":"OPENJPA-251, OPENJPA-329. I was not able to reproduce OPENJPA-251, but this logic should avoid the issue. I did not build a direct reproducer for OPENJPA-329, but I believe that the unit test covers the use case identified by that issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@616961 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b1acdf589bddcad32d6be6d185f52dbb77498b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b1acdf589bddcad32d6be6d185f52dbb77498b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","html_url":"https://github.com/apache/openjpa/commit/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/comments","author":null,"committer":null,"parents":[{"sha":"200016ad61204f9b1da6d7c3475bf1ec234720ec","url":"https://api.github.com/repos/apache/openjpa/commits/200016ad61204f9b1da6d7c3475bf1ec234720ec","html_url":"https://github.com/apache/openjpa/commit/200016ad61204f9b1da6d7c3475bf1ec234720ec"}]},{"sha":"ae0f7eea4fb9eff3814f94561d3f873c78882bfa","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlMGY3ZWVhNGZiOWVmZjM4MTRmOTQ1NjFkM2Y4NzNjNzg4ODJiZmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T00:13:31Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T00:13:31Z"},"message":"OPENJPA-331. Ported to 1.0.x: svn merge -c 604621 ../../trunk; svn merge -c 607478 ../../trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@616965 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8a0d5b6a65c3f7b4ed5dfe1b7b6534ad9e2ff5e8","url":"https://api.github.com/repos/apache/openjpa/git/trees/8a0d5b6a65c3f7b4ed5dfe1b7b6534ad9e2ff5e8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ae0f7eea4fb9eff3814f94561d3f873c78882bfa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ae0f7eea4fb9eff3814f94561d3f873c78882bfa","html_url":"https://github.com/apache/openjpa/commit/ae0f7eea4fb9eff3814f94561d3f873c78882bfa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ae0f7eea4fb9eff3814f94561d3f873c78882bfa/comments","author":null,"committer":null,"parents":[{"sha":"71470998d2cfe1d4957a01d9a9a75d5968a5a47f","url":"https://api.github.com/repos/apache/openjpa/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","html_url":"https://github.com/apache/openjpa/commit/71470998d2cfe1d4957a01d9a9a75d5968a5a47f"}]},{"sha":"31b93870cf92663b5aae81378eb2bb301c49cf55","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxYjkzODcwY2Y5MjY2M2I1YWFlODEzNzhlYjJiYjMwMWM0OWNmNTU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T08:04:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T08:04:03Z"},"message":"OPENJPA-258\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617039 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25bdd4905a4da4b6d6aef6d869ad31e5360f5c60","url":"https://api.github.com/repos/apache/openjpa/git/trees/25bdd4905a4da4b6d6aef6d869ad31e5360f5c60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31b93870cf92663b5aae81378eb2bb301c49cf55","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31b93870cf92663b5aae81378eb2bb301c49cf55","html_url":"https://github.com/apache/openjpa/commit/31b93870cf92663b5aae81378eb2bb301c49cf55","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31b93870cf92663b5aae81378eb2bb301c49cf55/comments","author":null,"committer":null,"parents":[{"sha":"ae0f7eea4fb9eff3814f94561d3f873c78882bfa","url":"https://api.github.com/repos/apache/openjpa/commits/ae0f7eea4fb9eff3814f94561d3f873c78882bfa","html_url":"https://github.com/apache/openjpa/commit/ae0f7eea4fb9eff3814f94561d3f873c78882bfa"}]},{"sha":"6687c01f114a9b878c79a83f24d04c14703d4090","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2ODdjMDFmMTE0YTliODc4Yzc5YTgzZjI0ZDA0YzE0NzAzZDQwOTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T08:56:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T08:56:46Z"},"message":"OPENJPA-258. Actually really fixing the issue this time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a63ee42903d7e79c20251cd6c5151e48d7ed80ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/a63ee42903d7e79c20251cd6c5151e48d7ed80ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6687c01f114a9b878c79a83f24d04c14703d4090","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6687c01f114a9b878c79a83f24d04c14703d4090","html_url":"https://github.com/apache/openjpa/commit/6687c01f114a9b878c79a83f24d04c14703d4090","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6687c01f114a9b878c79a83f24d04c14703d4090/comments","author":null,"committer":null,"parents":[{"sha":"31b93870cf92663b5aae81378eb2bb301c49cf55","url":"https://api.github.com/repos/apache/openjpa/commits/31b93870cf92663b5aae81378eb2bb301c49cf55","html_url":"https://github.com/apache/openjpa/commit/31b93870cf92663b5aae81378eb2bb301c49cf55"}]},{"sha":"dc1088934b55a74d53cc403f0a075119986b9d58","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjMTA4ODkzNGI1NWE3NGQ1M2NjNDAzZjBhMDc1MTE5OTg2YjlkNTg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T17:23:34Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T17:23:34Z"},"message":"OPENJPA-135, OPENJPA-420\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617164 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca734e9a4a780f12dafe4b73f1334cf787df2dbd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ca734e9a4a780f12dafe4b73f1334cf787df2dbd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dc1088934b55a74d53cc403f0a075119986b9d58","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dc1088934b55a74d53cc403f0a075119986b9d58","html_url":"https://github.com/apache/openjpa/commit/dc1088934b55a74d53cc403f0a075119986b9d58","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dc1088934b55a74d53cc403f0a075119986b9d58/comments","author":null,"committer":null,"parents":[{"sha":"6687c01f114a9b878c79a83f24d04c14703d4090","url":"https://api.github.com/repos/apache/openjpa/commits/6687c01f114a9b878c79a83f24d04c14703d4090","html_url":"https://github.com/apache/openjpa/commit/6687c01f114a9b878c79a83f24d04c14703d4090"}]},{"sha":"f12c0926de48a09a52731065bd9175b8f579c455","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxMmMwOTI2ZGU0OGEwOWE1MjczMTA2NWJkOTE3NWI4ZjU3OWM0NTU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-01T02:41:00Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-01T02:41:00Z"},"message":"OPENJPA-506\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617334 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5400030e3c2e0eb7324ee072a186b6e58e73a040","url":"https://api.github.com/repos/apache/openjpa/git/trees/5400030e3c2e0eb7324ee072a186b6e58e73a040"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f12c0926de48a09a52731065bd9175b8f579c455","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f12c0926de48a09a52731065bd9175b8f579c455","html_url":"https://github.com/apache/openjpa/commit/f12c0926de48a09a52731065bd9175b8f579c455","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f12c0926de48a09a52731065bd9175b8f579c455/comments","author":null,"committer":null,"parents":[{"sha":"dc1088934b55a74d53cc403f0a075119986b9d58","url":"https://api.github.com/repos/apache/openjpa/commits/dc1088934b55a74d53cc403f0a075119986b9d58","html_url":"https://github.com/apache/openjpa/commit/dc1088934b55a74d53cc403f0a075119986b9d58"}]},{"sha":"d5fed7023856b145cab4e9659334363041f9e2a1","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1ZmVkNzAyMzg1NmIxNDVjYWI0ZTk2NTkzMzQzNjMwNDFmOWUyYTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-01T07:36:31Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-01T07:36:31Z"},"message":"OPENJPA-506\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"234bcf57a40d739f8cf75eeb62765379a6babf55","url":"https://api.github.com/repos/apache/openjpa/git/trees/234bcf57a40d739f8cf75eeb62765379a6babf55"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d5fed7023856b145cab4e9659334363041f9e2a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d5fed7023856b145cab4e9659334363041f9e2a1","html_url":"https://github.com/apache/openjpa/commit/d5fed7023856b145cab4e9659334363041f9e2a1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d5fed7023856b145cab4e9659334363041f9e2a1/comments","author":null,"committer":null,"parents":[{"sha":"f12c0926de48a09a52731065bd9175b8f579c455","url":"https://api.github.com/repos/apache/openjpa/commits/f12c0926de48a09a52731065bd9175b8f579c455","html_url":"https://github.com/apache/openjpa/commit/f12c0926de48a09a52731065bd9175b8f579c455"}]},{"sha":"c414e4cc793729a26bd537cefb2333c86dda30c4","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0MTRlNGNjNzkzNzI5YTI2YmQ1MzdjZWZiMjMzM2M4NmRkYTMwYzQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-01T23:03:05Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-01T23:03:05Z"},"message":"OPENJPA-419 Ported to 1.0.x. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617695 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35ba2db892b8c5f1bdea548d223f435d9bad17d7","url":"https://api.github.com/repos/apache/openjpa/git/trees/35ba2db892b8c5f1bdea548d223f435d9bad17d7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c414e4cc793729a26bd537cefb2333c86dda30c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c414e4cc793729a26bd537cefb2333c86dda30c4","html_url":"https://github.com/apache/openjpa/commit/c414e4cc793729a26bd537cefb2333c86dda30c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c414e4cc793729a26bd537cefb2333c86dda30c4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d5fed7023856b145cab4e9659334363041f9e2a1","url":"https://api.github.com/repos/apache/openjpa/commits/d5fed7023856b145cab4e9659334363041f9e2a1","html_url":"https://github.com/apache/openjpa/commit/d5fed7023856b145cab4e9659334363041f9e2a1"}]},{"sha":"91b151e6aa68c7dca28b8906140157730d3b8e47","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxYjE1MWU2YWE2OGM3ZGNhMjhiODkwNjE0MDE1NzczMGQzYjhlNDc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-02T06:35:29Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-02T06:35:29Z"},"message":"OPENJPA-508\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617760 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acc9703aed8d0391364685a2e073e8d59982cf38","url":"https://api.github.com/repos/apache/openjpa/git/trees/acc9703aed8d0391364685a2e073e8d59982cf38"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/91b151e6aa68c7dca28b8906140157730d3b8e47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/91b151e6aa68c7dca28b8906140157730d3b8e47","html_url":"https://github.com/apache/openjpa/commit/91b151e6aa68c7dca28b8906140157730d3b8e47","comments_url":"https://api.github.com/repos/apache/openjpa/commits/91b151e6aa68c7dca28b8906140157730d3b8e47/comments","author":null,"committer":null,"parents":[{"sha":"c414e4cc793729a26bd537cefb2333c86dda30c4","url":"https://api.github.com/repos/apache/openjpa/commits/c414e4cc793729a26bd537cefb2333c86dda30c4","html_url":"https://github.com/apache/openjpa/commit/c414e4cc793729a26bd537cefb2333c86dda30c4"}]},{"sha":"3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiNzkwYzhiZjNhZDZiYmJhMjI3MWJmMTlhNGM5OWJhNzI0ZDdiOTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-04T19:01:24Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-04T19:01:24Z"},"message":"Reduce log verbosity.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@618380 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b187a9f2a2d1a3de2806b2790d02e7543479e08","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b187a9f2a2d1a3de2806b2790d02e7543479e08"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91","html_url":"https://github.com/apache/openjpa/commit/3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91/comments","author":null,"committer":null,"parents":[{"sha":"91b151e6aa68c7dca28b8906140157730d3b8e47","url":"https://api.github.com/repos/apache/openjpa/commits/91b151e6aa68c7dca28b8906140157730d3b8e47","html_url":"https://github.com/apache/openjpa/commit/91b151e6aa68c7dca28b8906140157730d3b8e47"}]},{"sha":"304117261f29f94fb4b34fc21c4b82933f0f7a67","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwNDExNzI2MWYyOWY5NGZiNGIzNGZjMjFjNGI4MjkzM2YwZjdhNjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T18:58:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T18:58:08Z"},"message":"OPENJPA-401 making temporary classloader optional for MappingTool ant task\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@618744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2f50eeb43c19455c06c83ae2f6e030b06cf5c50","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2f50eeb43c19455c06c83ae2f6e030b06cf5c50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/304117261f29f94fb4b34fc21c4b82933f0f7a67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/304117261f29f94fb4b34fc21c4b82933f0f7a67","html_url":"https://github.com/apache/openjpa/commit/304117261f29f94fb4b34fc21c4b82933f0f7a67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/304117261f29f94fb4b34fc21c4b82933f0f7a67/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91","url":"https://api.github.com/repos/apache/openjpa/commits/3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91","html_url":"https://github.com/apache/openjpa/commit/3b790c8bf3ad6bbba2271bf19a4c99ba724d7b91"}]},{"sha":"78e258706ddda8eee2bfb6b71b673e33aa29d59f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4ZTI1ODcwNmRkZGE4ZWVlMmJmYjZiNzFiNjczZTMzYWEyOWQ1OWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T20:01:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T20:01:12Z"},"message":"revert OPENJPA-401 in 1.0.x - shouldn't add a new flag in a service stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@618762 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b187a9f2a2d1a3de2806b2790d02e7543479e08","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b187a9f2a2d1a3de2806b2790d02e7543479e08"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f","html_url":"https://github.com/apache/openjpa/commit/78e258706ddda8eee2bfb6b71b673e33aa29d59f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"304117261f29f94fb4b34fc21c4b82933f0f7a67","url":"https://api.github.com/repos/apache/openjpa/commits/304117261f29f94fb4b34fc21c4b82933f0f7a67","html_url":"https://github.com/apache/openjpa/commit/304117261f29f94fb4b34fc21c4b82933f0f7a67"}]},{"sha":"f38d30496b2d9c4c450b1afec218c508a8a91571","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzOGQzMDQ5NmIyZDljNGM0NTBiMWFmZWMyMThjNTA4YThhOTE1NzE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T00:09:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T00:09:28Z"},"message":"OPENJPA-506. svn merge -c 618821 ../../trunk. Oddly, the TCK was passing on this branch; maybe trunk and 1.0.x have different TCK versions?\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@618834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f595ae71cb57624824605e4c5b0427450a4d4736","url":"https://api.github.com/repos/apache/openjpa/git/trees/f595ae71cb57624824605e4c5b0427450a4d4736"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f38d30496b2d9c4c450b1afec218c508a8a91571","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f38d30496b2d9c4c450b1afec218c508a8a91571","html_url":"https://github.com/apache/openjpa/commit/f38d30496b2d9c4c450b1afec218c508a8a91571","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f38d30496b2d9c4c450b1afec218c508a8a91571/comments","author":null,"committer":null,"parents":[{"sha":"78e258706ddda8eee2bfb6b71b673e33aa29d59f","url":"https://api.github.com/repos/apache/openjpa/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f","html_url":"https://github.com/apache/openjpa/commit/78e258706ddda8eee2bfb6b71b673e33aa29d59f"}]},{"sha":"04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0YzlkNGZjMjMyNDhhOTUwZWQ3YTI5ZTNhMGZjNjlmZTVjNWMzNDU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T20:10:07Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T20:10:07Z"},"message":"allow surefire to move up to 2.4, which allegedly has a fix to the repeated-test issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@619138 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3db698d378c276615fc87476e74f2edc3805c5d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/3db698d378c276615fc87476e74f2edc3805c5d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","html_url":"https://github.com/apache/openjpa/commit/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345/comments","author":null,"committer":null,"parents":[{"sha":"f38d30496b2d9c4c450b1afec218c508a8a91571","url":"https://api.github.com/repos/apache/openjpa/commits/f38d30496b2d9c4c450b1afec218c508a8a91571","html_url":"https://github.com/apache/openjpa/commit/f38d30496b2d9c4c450b1afec218c508a8a91571"}]},{"sha":"881461e99aa4584e3631a89027b8d2f185a6a582","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4MTQ2MWU5OWFhNDU4NGUzNjMxYTg5MDI3YjhkMmYxODVhNmE1ODI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T22:04:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T22:04:15Z"},"message":"Merge from ../../trunk. svn merge -c 596523 ../../trunk; svn merge -c 596661 ../../trunk Merge from ../../trunk. svn merge -c 596661 ../../trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@619175 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c05fef9ad6691d5572306477898a39634bda048","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c05fef9ad6691d5572306477898a39634bda048"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/881461e99aa4584e3631a89027b8d2f185a6a582","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/881461e99aa4584e3631a89027b8d2f185a6a582","html_url":"https://github.com/apache/openjpa/commit/881461e99aa4584e3631a89027b8d2f185a6a582","comments_url":"https://api.github.com/repos/apache/openjpa/commits/881461e99aa4584e3631a89027b8d2f185a6a582/comments","author":null,"committer":null,"parents":[{"sha":"04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","url":"https://api.github.com/repos/apache/openjpa/commits/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","html_url":"https://github.com/apache/openjpa/commit/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345"}]},{"sha":"befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmJlZmQyOTVlYTUzYjcyZmY4ZDkyNWU3YzUwMmU2N2ZhNmIyYzVhMWU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T23:05:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T23:05:54Z"},"message":"OPENJPA-447. Merge from ../../trunk. svn merge -c 596523, plus correction to 596661 merge\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@619212 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6348ee44dac3f5f0c95216a3dd8946f8d53cbef","url":"https://api.github.com/repos/apache/openjpa/git/trees/a6348ee44dac3f5f0c95216a3dd8946f8d53cbef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","html_url":"https://github.com/apache/openjpa/commit/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e/comments","author":null,"committer":null,"parents":[{"sha":"881461e99aa4584e3631a89027b8d2f185a6a582","url":"https://api.github.com/repos/apache/openjpa/commits/881461e99aa4584e3631a89027b8d2f185a6a582","html_url":"https://github.com/apache/openjpa/commit/881461e99aa4584e3631a89027b8d2f185a6a582"}]},{"sha":"4fb812a4c3aa90b3c80c0e9a286238c184a21f96","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmYjgxMmE0YzNhYTkwYjNjODBjMGU5YTI4NjIzOGMxODRhMjFmOTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:17:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:17:24Z"},"message":"OPENJPA-511\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@619479 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba3986d18eaf7697049fa5517f9caece164560c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba3986d18eaf7697049fa5517f9caece164560c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","html_url":"https://github.com/apache/openjpa/commit/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","url":"https://api.github.com/repos/apache/openjpa/commits/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","html_url":"https://github.com/apache/openjpa/commit/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e"}]},{"sha":"4cc805aae6f5b17a4ebf855e2abf624dab257160","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjYzgwNWFhZTZmNWIxN2E0ZWJmODU1ZTJhYmY2MjRkYWIyNTcxNjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-09T03:00:30Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-09T03:00:30Z"},"message":"OpenJPA Release 1.0.2 branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.2@620072 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba3986d18eaf7697049fa5517f9caece164560c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba3986d18eaf7697049fa5517f9caece164560c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4cc805aae6f5b17a4ebf855e2abf624dab257160","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4cc805aae6f5b17a4ebf855e2abf624dab257160","html_url":"https://github.com/apache/openjpa/commit/4cc805aae6f5b17a4ebf855e2abf624dab257160","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4cc805aae6f5b17a4ebf855e2abf624dab257160/comments","author":null,"committer":null,"parents":[{"sha":"4fb812a4c3aa90b3c80c0e9a286238c184a21f96","url":"https://api.github.com/repos/apache/openjpa/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","html_url":"https://github.com/apache/openjpa/commit/4fb812a4c3aa90b3c80c0e9a286238c184a21f96"}]},{"sha":"42dc96ef489a26fd3977db85e56aab3e8ad70c62","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyZGM5NmVmNDg5YTI2ZmQzOTc3ZGI4NWU1NmFhYjNlOGFkNzBjNjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-12T22:16:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-12T22:16:50Z"},"message":"Updated to version 1.0.2 for the release; added release note content from JIRA\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.2@627150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdb704e1e319c13d311e3ba5f35a03d9aa20b96c","url":"https://api.github.com/repos/apache/openjpa/git/trees/bdb704e1e319c13d311e3ba5f35a03d9aa20b96c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/42dc96ef489a26fd3977db85e56aab3e8ad70c62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/42dc96ef489a26fd3977db85e56aab3e8ad70c62","html_url":"https://github.com/apache/openjpa/commit/42dc96ef489a26fd3977db85e56aab3e8ad70c62","comments_url":"https://api.github.com/repos/apache/openjpa/commits/42dc96ef489a26fd3977db85e56aab3e8ad70c62/comments","author":null,"committer":null,"parents":[{"sha":"4cc805aae6f5b17a4ebf855e2abf624dab257160","url":"https://api.github.com/repos/apache/openjpa/commits/4cc805aae6f5b17a4ebf855e2abf624dab257160","html_url":"https://github.com/apache/openjpa/commit/4cc805aae6f5b17a4ebf855e2abf624dab257160"}]},{"sha":"94515fa95247d7ae318118589ab55ca49ccca162","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0NTE1ZmE5NTI0N2Q3YWUzMTgxMTg1ODlhYjU1Y2E0OWNjY2ExNjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-12T22:29:00Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-12T22:29:00Z"},"message":"Updated to version 1.0.2 for the release; added release note content from JIRA\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.2@627158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ccd2c814ac5562ab4d8a1ef7c8324d21f035c50","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ccd2c814ac5562ab4d8a1ef7c8324d21f035c50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94515fa95247d7ae318118589ab55ca49ccca162","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94515fa95247d7ae318118589ab55ca49ccca162","html_url":"https://github.com/apache/openjpa/commit/94515fa95247d7ae318118589ab55ca49ccca162","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94515fa95247d7ae318118589ab55ca49ccca162/comments","author":null,"committer":null,"parents":[{"sha":"42dc96ef489a26fd3977db85e56aab3e8ad70c62","url":"https://api.github.com/repos/apache/openjpa/commits/42dc96ef489a26fd3977db85e56aab3e8ad70c62","html_url":"https://github.com/apache/openjpa/commit/42dc96ef489a26fd3977db85e56aab3e8ad70c62"}]}],"files":[{"sha":"95230426cab4ef0b45221a0efc0ea3f437db6ceb","filename":"openjpa-all/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -28,7 +28,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <properties>\n         <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.x/openjpa-all</scm.dir>"},{"sha":"88d7ab33105adb6090d0beba0e24141b7d2c7774","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"996fbead5e4a1c1e3a89bbb325c011c52a38922a","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -37,7 +37,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n \n     <profiles>"},{"sha":"0788f6454d0a435aa1bb68e4c7eed9fdb7881f71","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -28,7 +28,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"e949517734ade0f675164f01c97f1e838a2c6467","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -55,7 +55,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n \n     <profiles>"},{"sha":"3f4c472f26224055b76be77c4336faca784ec962","filename":"openjpa-jdbc-5/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"41e8eb2729be4b7900d671fca2b0d63a7d3325a5","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <profiles>\n         <profile>"},{"sha":"f77c9df3b1866e6dac569afd100506ea5c189c41","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -183,8 +183,7 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n             String sql = StringUtils.trimToNull(ctx.getQueryString());\n             if (sql == null)\n                 throw new UserException(_loc.get(\"no-sql\"));\n-            _select = sql.length() > 6\n-                && sql.substring(0, 6).equalsIgnoreCase(\"select\");\n+            _select = q.getStore().getDBDictionary().isSelect(sql);\n             _call = sql.length() > 4\n                 && sql.substring(0, 4).equalsIgnoreCase(\"call\");\n         }"},{"sha":"79e1bb661d7a23ddd63ae2c16bcd88e850bfa45f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -300,8 +300,8 @@ public void select(Select sel, ExpContext ctx, ClassMapping mapping,\n         }\n \n         // add conditions limiting the projections to the proper classes; if\n-        // this isn't a projection then they will already be added\n-        if (exps.projections.length > 0) {\n+        // this isn't a projection or a subq then they will already be added\n+        if (exps.projections.length > 0 || sel.getParent() != null) {\n             ctx.store.loadSubclasses(mapping);\n             mapping.getDiscriminator().addClassConditions((inner != null) \n                 ? inner : sel, subclasses, joins);"},{"sha":"1d88edf4a83e70f989e368c7ab0b8aed616c65b0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -108,7 +108,8 @@ else if (colType == Types.BLOB)\n             super.setNull(stmnt, idx, colType, col);\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         // cannot use a value here, since SQLServer does not support\n         // bound parameters in a \"TOP\" clause\n         buf.append(\" TOP \").append(Long.toString(end));"},{"sha":"732f4d06806686050124a0122b9322ec8aa3e052","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -106,7 +106,6 @@ public DB2Dictionary() {\n         supportsDeferredConstraints = false;\r\n         supportsDefaultDeleteAction = false;\r\n         supportsAlterTableWithDropColumn = false;\r\n-        supportsMultipleNontransactionalResultSets = false;\r\n \r\n         supportsNullTableForGetColumns = false;\r\n         requiresCastForMathFunctions = true;\r\n@@ -145,6 +144,8 @@ public DB2Dictionary() {\n             \"TYPE\", \"UNDO\", \"UNTIL\", \"VALIDPROC\", \"VARIABLE\", \"VARIANT\", \"VCAT\",\r\n             \"VOLUMES\", \"WHILE\", \"WLM\", \"YEARS\",\r\n         }));\r\n+        \r\n+        selectWordSet.add(\"WITH\");\r\n     }\r\n \r\n     public boolean supportsRandomAccessResultSet(Select sel,\r\n@@ -280,6 +281,10 @@ else if (isDB2UDBV82OrLater())\n             break;\r\n         case db2ISeriesV5R3OrEarlier:\r\n         case db2ISeriesV5R4OrLater:\r\n+            lastGeneratedKeyQuery = \"SELECT IDENTITY_VAL_LOCAL() FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n+            nextSequenceQuery = \"SELECT NEXTVAL FOR {0} FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n             validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n                 + \"QSYS2.SYSTABLES\";\r\n             sequenceSQL = \"SELECT SEQUENCE_SCHEMA, \"\r"},{"sha":"75cce66534153b70ac66888fb2e5b4e2d8b31d7d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -307,6 +307,12 @@\n     protected final Set systemTableSet = new HashSet();\n     protected final Set fixedSizeTypeNameSet = new HashSet();\n \n+    /**\n+     * If a native query begins with any of the values found here then it will\n+     * be treated as a select statement.  \n+     */\n+    protected final Set selectWordSet = new HashSet();\n+\n     // when we store values that lose precion, track the types so that the\n     // first time it happens we can warn the user\n     private Set _precisionWarnedTypes = null;\n@@ -323,6 +329,8 @@ public DBDictionary() {\n             \"OTHER\", \"REAL\", \"REF\", \"SMALLINT\", \"STRUCT\", \"TIME\", \"TIMESTAMP\",\n             \"TINYINT\",\n         }));\n+        \n+        selectWordSet.add(\"SELECT\");\n     }\n \n     /**\n@@ -3989,4 +3997,25 @@ public String getCastFunction(Val val, String func) {\n     public void createIndexIfNecessary(Schema schema, String table,\n             Column pkColumn) {\n     }\n+\n+    /**\n+     * Determine whether the provided <code>sql</code> may be treated as a \n+     * select statement on this database.\n+     *  \n+     * @param sql   A sql statement. \n+     * \n+     * @return true if <code>sql</code> represents a select statement.\n+     */\n+    public boolean isSelect(String sql) {\n+        Iterator i = selectWordSet.iterator();\n+        String cur;\n+        while (i.hasNext()) {\n+            cur = (String) i.next();\n+            if (sql.length() >= cur.length()\n+                    && sql.substring(0, cur.length()).equalsIgnoreCase(cur)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }"},{"sha":"6c0b90c18e1a5df9af5149ebf1f6c4e55073ac9b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -185,7 +185,8 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return cols;\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);\n         if (start != 0)"},{"sha":"fc8d7560548aa13637f45bbda8da6ab189a29cdd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -250,7 +250,8 @@ public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n         }\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         // HSQL doesn't parameters in range\n         buf.append(\" LIMIT \").append(String.valueOf(start)).append(\" \");\n         if (end == Long.MAX_VALUE)"},{"sha":"e359a114b6cae7c96c63e2ae658371541bb239be","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -162,7 +162,8 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n         }\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         buf.append(\" LIMIT \").appendValue(start).append(\", \");\n         if (end == Long.MAX_VALUE)\n             buf.appendValue(Long.MAX_VALUE);"},{"sha":"8fff8c718f2da5fc6a98db6208f5963ead4ee1f9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -240,7 +240,8 @@ public void setNull(PreparedStatement stmnt, int idx, int colType,\n         stmnt.setNull(idx, colType);\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);\n         if (start != 0)"},{"sha":"d3f0a7c47ce7bf53cc846e8ecbbec0d4e18a8bcf","filename":"openjpa-kernel-5/pom.xml","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -56,21 +56,6 @@\n                     <target>1.5</target>\n                 </configuration>\n             </plugin>\n-            <!-- create enhancer pre-main attribute -->\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <configuration>\n-                    <archive>\n-                        <manifestEntries>\n-                            <Premain-Class>\n-                                org.apache.openjpa.enhance.InstrumentationFactory\n-                            </Premain-Class>\n-                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n-                        </manifestEntries>\n-                    </archive>\n-                </configuration>\n-            </plugin>\n         </plugins>\n     </build>\n </project>"},{"sha":"1254cd79c1104191ef829d37bf290d375182b8eb","filename":"openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,93 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.List;\r\n+import java.util.ArrayList;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+/**\r\n+ * Tests that {@link Reflection#getDeclaredMethod(Class, String, Class)}\r\n+ * returns the most-derived class's method when called from a type hierarchy.\r\n+ * See OPENJPA-251.\r\n+ */\r\n+public class TestGetDeclaredMethod extends TestCase {\r\n+\r\n+    public void testGetDeclaredMethod() {\r\n+        Method meth =\r\n+            Reflection.getDeclaredMethod(Impl.class, \"getObject\", null);\r\n+        assertEquals(Impl.class, meth.getDeclaringClass());\r\n+        assertEquals(String.class, meth.getReturnType());\r\n+    }\r\n+\r\n+    public void testMostDerived() throws NoSuchMethodException {\r\n+        Method impl = Impl.class.getDeclaredMethod(\"getObject\", null);\r\n+        Method iface = Iface.class.getDeclaredMethod(\"getObject\", null);\r\n+        Method other = Other.class.getDeclaredMethod(\"getObject\", null);\r\n+        assertEquals(Impl.class, Reflection.mostDerived(impl, iface)\r\n+            .getDeclaringClass());\r\n+        assertEquals(Impl.class, Reflection.mostDerived(iface, impl)\r\n+            .getDeclaringClass());\r\n+        try {\r\n+            Reflection.mostDerived(iface, other);\r\n+            fail(\"'iface' and 'other' are not from related types\");\r\n+        } catch (IllegalArgumentException e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n+    public void testGenerics() throws NoSuchMethodException {\r\n+        List<Method> meths = new ArrayList<Method>();\r\n+        for (Method meth : GenericsImpl.class.getDeclaredMethods()) {\r\n+            if (\"getObject\".equals(meth.getName()))\r\n+                meths.add(meth);\r\n+        }\r\n+        assertEquals(2, meths.size());\r\n+        assertEquals(String.class, Reflection.mostDerived(meths.get(0),\r\n+            meths.get(1)).getReturnType());\r\n+    }\r\n+    \r\n+    interface Iface {\r\n+        Object getObject();\r\n+    }\r\n+\r\n+    static class Impl implements Iface {\r\n+        public String getObject() {\r\n+            return \"string\";\r\n+        }\r\n+    }\r\n+\r\n+    static class Other {\r\n+        public String getObject() {\r\n+            return \"other\";\r\n+        }\r\n+    }\r\n+\r\n+    interface GenericsIface<T> {\r\n+        public T getObject();\r\n+    }\r\n+\r\n+    static class GenericsImpl implements GenericsIface {\r\n+        public String getObject() {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"a93459efc3f2ccdb51fc2475c6b5f6f20065732e","filename":"openjpa-kernel/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n         <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.0.1-SNAPSHOT</version>\r\n+        <version>1.0.2</version>\r\n     </parent>\r\n     <profiles>\r\n         <profile>\r"},{"sha":"40dae8b91e0282c9a88ade6cf0899f430e7b6775","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -47,7 +47,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n@@ -65,6 +64,8 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n@@ -2071,6 +2072,18 @@ private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n                     code.invokevirtual().setMethod(StringId.class, \"getId\",\n                         String.class, null);\n                     break;\n+                case JavaTypes.BIGDECIMAL:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(BigDecimalId.class);\n+                    code.invokevirtual().setMethod(BigDecimalId.class, \"getId\",\n+                        BigDecimalId.class, null);\n+                    break;\n+                case JavaTypes.BIGINTEGER:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(BigIntegerId.class);\n+                    code.invokevirtual().setMethod(BigIntegerId.class, \"getId\",\n+                        BigIntegerId.class, null);\n+                    break;\n                 default:\n                     code.aload().setLocal(oid);\n                     code.checkcast().setType(ObjectId.class);"},{"sha":"bd8996873458f0bd3db944aa85be774b224ab229","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":42,"deletions":7,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -112,27 +112,62 @@ public static Method findSetter(Class cls, String prop, Class param,\n      * Invokes <code>cls.getDeclaredMethods()</code>, and returns the method\n      * that matches the <code>name</code> and <code>param</code> arguments.\n      * Avoids the exception thrown by <code>Class.getDeclaredMethod()</code>\n-     * for performance reasons. <code>param</code> may be null.\n+     * for performance reasons. <code>param</code> may be null. Additionally,\n+     * if there are multiple methods with different return types, this will\n+     * return the method defined in the least-derived class.\n      *\n      * @since 0.9.8\n      */\n-    private static Method getDeclaredMethod(Class cls, String name,\n+    static Method getDeclaredMethod(Class cls, String name,\n         Class param) {\n         Method[] methods = (Method[]) AccessController.doPrivileged(\n             J2DoPrivHelper.getDeclaredMethodsAction(cls));\n+        Method candidate = null;\n         for (int i = 0 ; i < methods.length; i++) {\n     \t    if (name.equals(methods[i].getName())) {\n                 Class[] methodParams = methods[i].getParameterTypes();\n                 if (param == null && methodParams.length == 0)\n-                    return methods[i];\n-                if (param != null && methodParams.length == 1\n+                    candidate = mostDerived(methods[i], candidate);\n+                else if (param != null && methodParams.length == 1\n                     && param.equals(methodParams[0]))\n-                    return methods[i];\n+                    candidate = mostDerived(methods[i], candidate);\n             }\n         }\n-        return null;\n+        return candidate;\n+    }\n+\n+    static Method mostDerived(Method meth1, Method meth2) {\n+        if (meth1 == null)\n+            return meth2;\n+        if (meth2 == null)\n+            return meth1;\n+        \n+        Class cls2 = meth2.getDeclaringClass();\n+        Class cls1 = meth1.getDeclaringClass();\n+\n+        if (cls1.equals(cls2)) {\n+            Class ret1 = meth1.getReturnType();\n+            Class ret2 = meth2.getReturnType();\n+            if (ret1.isAssignableFrom(ret2))\n+                return meth2;\n+            else if (ret2.isAssignableFrom(ret1))\n+                return meth1;\n+            else\n+                throw new IllegalArgumentException(\n+                    _loc.get(\"most-derived-unrelated-same-type\", meth1, meth2)\n+                        .getMessage());\n+        } else {\n+            if (cls1.isAssignableFrom(cls2))\n+                return meth2;\n+            else if (cls2.isAssignableFrom(cls1))\n+                return meth1;\n+            else\n+                throw new IllegalArgumentException(\n+                    _loc.get(\"most-derived-unrelated\", meth1, meth2)\n+                        .getMessage());\n+        }\n     }\n-    \n+\n     /**\n      * Return the field with the given name, optionally throwing an exception\n      * if none."},{"sha":"bb8cf0127e1405a196416071fc7289b258aa5d32","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -41,6 +41,12 @@\n      */\n     public static final int AFTER_PERSIST = 1;\n \n+    /**\n+     * Event type when an instance is made persistent, after the record has\n+     * been written to the store\n+     */\n+    public static final int AFTER_PERSIST_PERFORMED = 18;\n+\n     /**\n      * Event type when an instance is loaded.\n      */\n@@ -76,6 +82,12 @@\n      */\n     public static final int AFTER_DELETE = 8;\n \n+    /**\n+     * Event type when an instance is deleted, after the record has been\n+     * deleted from the store.\n+     */\n+    public static final int AFTER_DELETE_PERFORMED = 19;\n+\n     /**\n      * Event type when an instance is dirtied for the first time.\n      */\n@@ -121,19 +133,34 @@\n      */\n     public static final int AFTER_REFRESH = 17;\n \n+    /**\n+     * Event type when an instance is modified. This is not invoked for\n+     * PNEW records, but is invoked for PNEWFLUSHED.\n+     */\n+    public static final int BEFORE_UPDATE = 20;\n+\n+    /**\n+     * Event type when an instance is modified, after the change has been\n+     * sent to the store. This is not invoked for PNEW records, but is\n+     * invoked for PNEWFLUSHED records.\n+     */\n+    public static final int AFTER_UPDATE_PERFORMED = 21;\n+\n     /**\n      * Convenience array of all event types.\n      */\n     public static final int[] ALL_EVENTS = new int[]{\n         BEFORE_PERSIST,\n         AFTER_PERSIST,\n+        AFTER_PERSIST_PERFORMED,\n         AFTER_LOAD,\n         BEFORE_STORE,\n         AFTER_STORE,\n         BEFORE_CLEAR,\n         AFTER_CLEAR,\n         BEFORE_DELETE,\n         AFTER_DELETE,\n+        AFTER_DELETE_PERFORMED,\n         BEFORE_DIRTY,\n         AFTER_DIRTY,\n         BEFORE_DIRTY_FLUSHED,\n@@ -143,6 +170,8 @@\n         BEFORE_ATTACH,\n         AFTER_ATTACH,\n         AFTER_REFRESH,\n+        BEFORE_UPDATE,\n+        AFTER_UPDATE_PERFORMED,\n     };\n \n     private final int _type;"},{"sha":"427bc598d6e9f88231e99cefa8a10c4ea3966e2a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":64,"deletions":2,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -28,6 +28,8 @@\n \n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataDefaults;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Manager that can be used to track and notify listeners on lifecycle events.\n@@ -48,6 +50,9 @@\n \n     private static final Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n \n+    private static final Localizer _loc = Localizer.forPackage(\n+        LifecycleEventManager.class);\n+\n     private Map _classListeners = null; // class -> listener list\n     private ListenerList _listeners = null;\n     private List _addListeners = new LinkedList();\n@@ -56,6 +61,11 @@\n     private boolean _firing = false;\n     private boolean _fail = false;\n     private boolean _failFast = false;\n+    private final Log _log;\n+\n+    public LifecycleEventManager(Log log) {\n+        _log = log;\n+    }\n \n     /**\n      * Whether to fail after first exception when firing events to listeners.\n@@ -132,15 +142,18 @@ public synchronized void removeListener(Object listener) {\n      */\n     public boolean hasPersistListeners(Object source, ClassMetaData meta) {\n         return hasHandlers(source, meta, LifecycleEvent.BEFORE_PERSIST)\n-            || hasHandlers(source, meta, LifecycleEvent.AFTER_PERSIST);\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_PERSIST)\n+            || hasHandlers(source, meta,\n+                LifecycleEvent.AFTER_PERSIST_PERFORMED);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDeleteListeners(Object source, ClassMetaData meta) {\n         return hasHandlers(source, meta, LifecycleEvent.BEFORE_DELETE)\n-            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE);\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE_PERFORMED);\n     }\n \n     /**\n@@ -166,6 +179,14 @@ public boolean hasStoreListeners(Object source, ClassMetaData meta) {\n             || hasHandlers(source, meta, LifecycleEvent.AFTER_STORE);\n     }\n \n+    /**\n+     * Return whether there are listeners or callbacks for the given source.\n+     */\n+    public boolean hasUpdateListeners(Object source, ClassMetaData meta) {\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_UPDATE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_UPDATE_PERFORMED);\n+    }\n+\n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n@@ -470,6 +491,47 @@ else if (listener instanceof ListenerAdapter) {\n                                 ((AttachListener) listener).afterAttach(ev);\n                         }\n                         break;\n+\n+                    case LifecycleEvent.AFTER_PERSIST_PERFORMED:\n+                        if (responds || listener instanceof PostPersistListener)\n+                        {\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            ((PostPersistListener) listener)\n+                                .afterPersistPerformed(ev);\n+                        }\n+                        break;\n+                    case LifecycleEvent.BEFORE_UPDATE:\n+                    case LifecycleEvent.AFTER_UPDATE_PERFORMED:\n+                        if (responds || listener instanceof UpdateListener) {\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            if (type == LifecycleEvent.BEFORE_UPDATE)\n+                                ((UpdateListener) listener).beforeUpdate(ev);\n+                            else\n+                                ((UpdateListener) listener)\n+                                    .afterUpdatePerformed(ev);\n+                        }\n+                        break;\n+                    case LifecycleEvent.AFTER_DELETE_PERFORMED:\n+                        if (responds || listener instanceof PostDeleteListener){\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            ((PostDeleteListener) listener)\n+                                .afterDeletePerformed(ev);\n+                        }\n+                        break;\n+                    default:\n+                        if (_log.isWarnEnabled())\n+                            _log.warn(_loc.get(\"unknown-lifecycle-event\",\n+                                Integer.toString(type)));\n+                        break;\n                 }\n             }\n             catch (Exception e) {"},{"sha":"7273d0c0b51f5e3e31a480203c4e514db9d5cbd7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface PostDeleteListener {\r\n+    \r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link DeleteListener#afterDelete(LifecycleEvent)} in that the latter\r\n+     * is called after the delete operation, whereas this is called after the\r\n+     * delete statements have been sent to the data store.\r\n+     */\r\n+    public void afterDeletePerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"76a54c7317ec89626d1bad313dae009880771d55","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface PostPersistListener {\r\n+\r\n+    /**\r\n+     * Receives notifications after a persist operation has been written to the\r\n+     * data store. Differs from {@link PersistListener#afterPersist} in that\r\n+     * the latter is called at the end of the persist() operation itself, not\r\n+     * after the flush.\r\n+     */\r\n+    public void afterPersistPerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"b274521db182f31111753362c44adc133ad15974","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface UpdateListener {\r\n+\r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link StoreListener#beforeStore} in that the latter is called for\r\n+     * updated and new records, whereas this is only invoked for updated\r\n+     * records.\r\n+     */\r\n+    public void beforeUpdate(LifecycleEvent event);\r\n+\r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link StoreListener#afterStore} in that the latter is called for\r\n+     * updated and new records, whereas this is only invoked for updated\r\n+     * records, and that this is called after the record is actually flushed\r\n+     * to the store.\r\n+     */\r\n+    public void afterUpdatePerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"aff638325b17173df75256f8049ba284e12524ce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -46,7 +46,6 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.ReferenceHashSet;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n@@ -95,6 +94,7 @@\n     // that we can re-load them for each new broker\n     private transient Collection _pcClassNames = null;\n     private transient Collection _pcClassLoaders = null;\n+    private transient boolean _persistentTypesLoaded = false;\n \n     // lifecycle listeners to pass to each broker\n     private transient Map _lifecycleListeners = null;\n@@ -133,6 +133,8 @@ protected static AbstractBrokerFactory getPooledFactory(Map map) {\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n+        _pcClassLoaders = new ConcurrentReferenceHashSet(\n+            ConcurrentReferenceHashSet.WEAK);\n     }\n \n     /**\n@@ -233,30 +235,38 @@ protected void addListeners(BrokerImpl broker) {\n      * whenever a broker is created.\n      */\n     private void loadPersistentTypes(ClassLoader envLoader) {\n-        // no listed persistent types?\n-        if (_pcClassNames != null && _pcClassNames.isEmpty())\n+        // if we've loaded the persistent types and the class name list\n+        // is empty, then we can simply return. Note that there is a\n+        // potential threading scenario in which _persistentTypesLoaded is\n+        // false when read, but the work to populate _pcClassNames has\n+        // already been done. This is ok; _pcClassNames can tolerate\n+        // concurrent access, so the worst case is that the list is\n+        // persistent type data is processed multiple times, which this\n+        // algorithm takes into account.\n+        if (_persistentTypesLoaded && _pcClassNames.isEmpty())\n             return;\n \n         // cache persistent type names if not already\n         ClassLoader loader = _conf.getClassResolverInstance().\n             getClassLoader(getClass(), envLoader);\n         Collection toRedefine = new ArrayList();\n-        if (_pcClassNames == null) {\n+        if (!_persistentTypesLoaded) {\n             Collection clss = _conf.getMetaDataRepositoryInstance().\n                 loadPersistentTypes(false, loader);\n             if (clss.isEmpty())\n                 _pcClassNames = Collections.EMPTY_SET;\n             else {\n-                _pcClassNames = new ArrayList(clss.size());\n+                Collection c = new ArrayList(clss.size());\n                 for (Iterator itr = clss.iterator(); itr.hasNext();) {\n                     Class cls = (Class) itr.next();\n-                    _pcClassNames.add(cls.getName());\n+                    c.add(cls.getName());\n                     if (needsSub(cls))\n                         toRedefine.add(cls);\n                 }\n-                _pcClassLoaders = new ReferenceHashSet(ReferenceHashSet.WEAK);\n                 _pcClassLoaders.add(loader);\n+                _pcClassNames = c;\n             }\n+            _persistentTypesLoaded = true;\n         } else {\n             // reload with this loader\n             if (_pcClassLoaders.add(loader)) {"},{"sha":"028f43a1c4078deca94d84d1a418ddd026da1667","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -268,7 +268,10 @@ protected Object getReference(AttachManager manager, Object toAttach,\n         OpenJPAStateManager sm, ValueMetaData vmd) {\n         if (toAttach == null)\n             return null;\n-        if (manager.getBroker().isDetached(toAttach)) {\n+\n+        if (manager.getBroker().isPersistent(toAttach)) {\n+            return toAttach;\n+        } else if (manager.getBroker().isDetached(toAttach)) {\n             Object oid = manager.getDetachedObjectId(toAttach);\n             if (oid != null)\n                 return manager.getBroker().find(oid, false, null);"},{"sha":"a690b7a3e1981ec17595ac5c74597ef59f362cf6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -264,7 +264,8 @@ public void initialize(AbstractBrokerFactory factory,\n         else\n             _runtime = new LocalManagedRuntime(this);\n \n-        _lifeEventManager = new LifecycleEventManager();\n+        _lifeEventManager = new LifecycleEventManager(\n+            _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME));\n         _transEventManager = new TransactionEventManager();\n         int cmode = _conf.getMetaDataRepositoryInstance().\n             getMetaDataFactory().getDefaults().getCallbackMode();"},{"sha":"dcbe31ecc42fece127fa3bc9e56aba9391459d43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.openjpa.kernel;\n \n-import java.util.BitSet;\n import java.util.Collection;\n import java.util.Set;\n \n@@ -447,15 +446,7 @@ public int requiresFetch(FieldMetaData fmd) {\n             throw translate(re);\n         }\n     }\n-    \n-    public BitSet requiresFetch(Set fgs, FieldMetaData[] fmds ){\n-        try {\n-            return _fetch.requiresFetch(fgs, fmds);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-    \n+\n     public boolean requiresLoad() {\n         try {\n             return _fetch.requiresLoad();"},{"sha":"7bf1b6325eb3cb896725199c021f6497ca922af8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -552,7 +552,8 @@ public void settingDoubleField(PersistenceCapable pc, int idx, double cur,\n     public void settingStringField(PersistenceCapable pc, int idx, String cur,\n         String next, int set) {\n         accessingField(idx);\n-        if (cur == next || !_loaded.get(idx))\n+        if (cur == next || (cur != null && cur.equals(next))\n+                || !_loaded.get(idx))\n             return;\n         lock();\n         try {"},{"sha":"1fdfce43adec63d620615ed4121a271c03a48723","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.kernel;\n \n import java.io.Serializable;\n-import java.util.BitSet;\n import java.util.Collection;\n import java.util.Set;\n \n@@ -346,18 +345,6 @@\n      */\n     public int requiresFetch(FieldMetaData fm);\n \n-    /**\n-     * Affirms if the given fields require to be fetched in the context of\n-     * the given fetch group set.  Returns a BitSet that contains one of\n-     * {@link #FETCH_NONE}, {@link #FETCH_LOAD}, {@link FETCH_REF} for each\n-     * field.\n-     * \n-     * @param fgs fetch group set\n-     * @param fmds array of fields to be examined\n-     * @return BitSet that indicates whether fetches are required or not\n-     */\n-    public BitSet requiresFetch(Set fgs, FieldMetaData[] fmds );\n-    \n     /**\n      * Return false if we know that the object being fetched with this\n      * configuration does not require a load, because this configuration came"},{"sha":"0975f875fc421a89060c0069d27e40ba051c7a11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":3,"deletions":75,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -21,7 +21,6 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -93,7 +92,6 @@\n     private boolean _load = true;\n     private int _availableRecursion;\n     private int _availableDepth;\n-    private Map _lfgFields = null;\n \n     public FetchConfigurationImpl() {\n         this(null);\n@@ -512,10 +510,6 @@ public int requiresFetch(FieldMetaData fm) {\n         if (!includes(fm))\n             return FETCH_NONE;\n         \n-        return indirectFetch(fm);\n-    }\n-    \n-    private int indirectFetch(FieldMetaData fm){\n         Class type = getRelationType(fm);\n         if (type == null)\n             return FETCH_LOAD;\n@@ -535,15 +529,6 @@ private int indirectFetch(FieldMetaData fm){\n             return FETCH_REF;\n         return FETCH_LOAD;\n     }\n-    \n-    public BitSet requiresFetch(Set fgs, FieldMetaData[] fmds) {\n-        BitSet fields = new BitSet(fgs.size());\n-        Iterator itr = fgs.iterator();\n-        while (itr.hasNext()) {\n-            fields = includes((FieldMetaData) itr.next(), fmds, fields);\n-        }\n-        return fields;\n-    }\n \n     public boolean requiresLoad() {\n         return _load;\n@@ -582,73 +567,16 @@ private boolean includes(FieldMetaData fmd) {\n             || hasField(fmd.getFullName(false)))\n             return true;\n         String[] fgs = fmd.getCustomFetchGroups();\n-        for (int i = 0; i < fgs.length; i++){\n+        for (int i = 0; i < fgs.length; i++)\n             if (hasFetchGroup(fgs[i]))\n                 return true;\n-        }\n         return false; \n     }\n \n-    private BitSet includes(FieldMetaData fmd, FieldMetaData[] fmds,\n-            BitSet fields) {\n-        if ((fmd.isInDefaultFetchGroup() && hasFetchGroup(FetchGroup.NAME_DEFAULT))\n-                || hasFetchGroup(FetchGroup.NAME_ALL)\n-                || hasField(fmd.getFullName(false))) {\n-            if (indirectFetch(fmd) != FETCH_NONE)\n-                fields.set(fmd.getIndex());\n-            return fields;\n-        }\n-        // now we need to see if this field associates with\n-        // any fetch groups\n-        String[] fgs = fmd.getCustomFetchGroups();\n-        for (int i = 0; i < fgs.length; i++) {\n-            if (hasFetchGroup(fgs[i])) {\n-                if (indirectFetch(fmd) != FETCH_NONE)\n-                    fields.set(fmd.getIndex());\n-                // check whether this field has a loadFetchGroup\n-                // if it has a LoadFetchGroup, then we need to get\n-                // all the fields that associate with this LoadFetchGroup\n-                String fg = fmd.getLoadFetchGroup();\n-                if (fg != null) {\n-                    BitSet fldIndex = getLoadFetchGroupFields(fg, fmds);\n-                    // merge the loadFetchGroup fields to the retuned fields.\n-                    if (fldIndex != null && !fldIndex.isEmpty()) {\n-                        for (int j = 0; j < fldIndex.length(); j++)\n-                            if (fldIndex.get(j))\n-                                fields.set(j);\n-                    }\n-                }\n-            }\n-        }\n-        return fields;\n-    }\n-    \n-    /**\n-     * Search the fields for this loadFetchGroup. It basically searches from\n-     * each field and check whether this field has the same fetchgroup. If it\n-     * has then this field is required to load.\n-     */\n-    private BitSet getLoadFetchGroupFields(String fg, FieldMetaData[] fmds) {\n-        BitSet rtnField = null;\n-        if (_lfgFields != null && _lfgFields.containsKey(fg))\n-           return (BitSet)_lfgFields.get(fg);\n-        for (int i = 0; i < fmds.length; i++) {\n-            if (fmds[i].isInFetchGroup(fg)){\n-                if (rtnField == null)\n-                    rtnField = new BitSet(fmds.length);\n-                rtnField.set(i);\n-            }\n-        }\n-        if (_lfgFields == null)\n-            _lfgFields = new HashMap(fmds.length);\n-        _lfgFields.put(fg,rtnField);\n-        return rtnField;\n-    }\n-    \n     /**\n-     * Return the available recursion depth via the given field for the \n+     * Return the available recursion depth via the given field for the\n      * given type.\n-     * \n+     *\n      * @param traverse whether we're traversing the field\n      */\n     private int getAvailableRecursionDepth(FieldMetaData fm, Class type, "},{"sha":"4e264dd678a241be58f912e257a079c005c59316","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":24,"deletions":25,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -427,22 +427,18 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n \n         BitSet fields = null;\n         FieldMetaData[] fmds = _meta.getFields();\n-        Set fgs = null;         \n         boolean load;\n-        \n         for (int i = 0; i < fmds.length; i++) {\n-              if (exclude != null && exclude.get(i))\n-                  continue;\n+            if (_loaded.get(i) || (exclude != null && exclude.get(i)))\n+                continue;\n \n             switch (mode) {\n                 case LOAD_SERIALIZE:\n                     load = !fmds[i].isTransient();\n                     break;\n-                case LOAD_FGS:                  \n-                    load = false;\n-                    if (fgs == null)\n-                        fgs = new HashSet(fmds.length);\n-                    fgs.add(fmds[i]);\n+                case LOAD_FGS:\n+                    load = fetch == null || fetch.requiresFetch(fmds[i]) \n+                        != FetchConfiguration.FETCH_NONE;\n                     break;\n                 default: // LOAD_ALL\n                     load = true;\n@@ -453,22 +449,6 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n                     fields = new BitSet(fmds.length);\n                 fields.set(i);\n             }\n-            // post process for the fetchGroup: if there is a\n-            // fetchgroup field, then go to the FetchConfiguration\n-            // to get the required fetch fields.\n-            if (fgs != null && fetch != null){\n-                if (fields == null)\n-                    fields = new BitSet(fmds.length);\n-                BitSet fgFields = fetch.requiresFetch(fgs, fmds);\n-                // merge the fetchgroup required fields to the original\n-                // fields only the fields are not already loaded and\n-                // are not in the original fields.\n-                for (int j = 0; j < fgFields.length(); j++) {\n-                    if (fgFields.get(j) && !fields.get(j) && !_loaded.get(j))\n-                        fields.set(j);\n-                }\n-            }\n-\n         }\n         return fields;\n     }\n@@ -972,6 +952,11 @@ void afterFlush(int reason) {\n \n         if (reason != BrokerImpl.FLUSH_ROLLBACK\n             && reason != BrokerImpl.FLUSH_LOGICAL) {\n+            // analyze previous state for later\n+            boolean wasNew = isNew();\n+            boolean wasFlushed = isFlushed();\n+            boolean wasDeleted = isDeleted();\n+\n             // all dirty fields were flushed\n             _flush.or(_dirty);\n \n@@ -992,6 +977,15 @@ void afterFlush(int reason) {\n             // if this object was stored with preFlush, do post-store callback\n             if ((_flags & FLAG_PRE_FLUSHED) > 0)\n                 fireLifecycleEvent(LifecycleEvent.AFTER_STORE);\n+\n+            // do post-update as needed\n+            if (wasNew && !wasFlushed)\n+                fireLifecycleEvent(LifecycleEvent.AFTER_PERSIST_PERFORMED);\n+            else if (wasDeleted)\n+                fireLifecycleEvent(LifecycleEvent.AFTER_DELETE_PERFORMED);\n+            else \n+                // updates and new-flushed with changes\n+                fireLifecycleEvent(LifecycleEvent.AFTER_UPDATE_PERFORMED);\n         } else if (reason == BrokerImpl.FLUSH_ROLLBACK) {\n             // revert to last loaded version and original oid\n             assignVersionField(_loadVersion);\n@@ -2781,6 +2775,11 @@ void preFlush(boolean logical, OpCallbacks call) {\n \n         if (isPersistent()) {\n             fireLifecycleEvent(LifecycleEvent.BEFORE_STORE);\n+            // BEFORE_PERSIST is handled during Broker.persist and Broker.attach\n+            if (isDeleted())\n+                fireLifecycleEvent(LifecycleEvent.BEFORE_DELETE);\n+            else if (!(isNew() && !isFlushed()))\n+                fireLifecycleEvent(LifecycleEvent.BEFORE_UPDATE);\n             _flags |= FLAG_PRE_FLUSHED;\n         }\n "},{"sha":"7fa741f7b5d2a19b50f590ef56cfda581c2c6794","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":41,"deletions":3,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OptimisticException;\n import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.event.LifecycleEvent;\n \n /**\n  * Handles attaching instances using version and primary key fields.\n@@ -68,12 +69,19 @@ protected void provideField(Object toAttach, StateManagerImpl sm,\n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n         ValueMetaData ownerMeta, boolean explicit) {\n+\n+        // VersionAttachStrategy is invoked in the case where no more\n+        // intelligent strategy could be found; let's be more lenient\n+        // about new vs. detached record determination.\n+        if (into == null)\n+            into = findFromDatabase(manager, toAttach);\n+\n         BrokerImpl broker = manager.getBroker();\n         PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n             meta.getRepository().getConfiguration());\n \n         boolean embedded = ownerMeta != null && ownerMeta.isEmbeddedPC();\n-        boolean isNew = !broker.isDetached(pc);\n+        boolean isNew = !broker.isDetached(pc) && into == null;\n         Object version = null;\n         StateManagerImpl sm;\n \n@@ -126,8 +134,13 @@ public Object attach(AttachManager manager, Object toAttach,\n             return into;\n         }\n \n-        // invoke any preAttach on the detached instance\n-        manager.fireBeforeAttach(toAttach, meta);\n+        if (isNew) {\n+            broker.fireLifecycleEvent(toAttach, null, meta,\n+                LifecycleEvent.BEFORE_PERSIST);\n+        } else {\n+            // invoke any preAttach on the detached instance\n+            manager.fireBeforeAttach(toAttach, meta);\n+        }\n \n         // assign the detached pc the same state manager as the object we're\n         // copying into during the attach process\n@@ -342,4 +355,29 @@ private Map attachInPlace(AttachManager manager, StateManagerImpl sm,\n         }\n         return (copy == null) ? map : copy;\n \t}\n+\n+    /**\n+     * Find a PersistenceCapable instance of an Object if it exists in the\n+     * database. If the object is null or can't be found in the database.\n+     *\n+     * @param pc An object which will be attached into the current context. The\n+     * object may or may not correspond to a row in the database.\n+     *\n+     * @return If the object is null or can't be found in the database this\n+     * method returns null. Otherwise a PersistenceCapable representation of the\n+     * object is returned.\n+     */\n+    protected PersistenceCapable findFromDatabase(AttachManager manager,\n+        Object pc) {\n+        Object oid = manager.getBroker().newObjectId(pc.getClass(),\n+            manager.getDetachedObjectId(pc));\n+\n+        if (oid != null) {\n+            return ImplHelper.toPersistenceCapable(\n+                manager.getBroker().find(oid, true, null),\n+                manager.getBroker().getConfiguration());\n+        } else {\n+            return null;\n+        }\n+    }\n }"},{"sha":"629e886a6d812be95957b79f71a1fd8becce0bde","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -383,6 +383,13 @@ private Expression evalSelectClause(QueryExpressions exps) {\n \n         JPQLNode selectNode = root();\n \n+        JPQLNode selectClause = selectNode.\n+            findChildByID(JJTSELECTCLAUSE, false);\n+        if (selectClause != null && selectClause.hasChildID(JJTDISTINCT))\n+            exps.distinct = exps.DISTINCT_TRUE | exps.DISTINCT_AUTO;\n+        else\n+            exps.distinct = exps.DISTINCT_FALSE;\n+\n         JPQLNode constructor = selectNode.findChildByID(JJTCONSTRUCTOR, true);\n         if (constructor != null) {\n             // build up the fully-qualified result class name by\n@@ -391,16 +398,8 @@ private Expression evalSelectClause(QueryExpressions exps) {\n             exps.resultClass = resolver.classForName(resultClassName, null);\n \n             // now assign the arguments to the select clause as the projections\n-            exps.distinct = exps.DISTINCT_FALSE;\n             return assignProjections(right(constructor), exps);\n         } else {\n-            JPQLNode selectClause = selectNode.\n-                findChildByID(JJTSELECTCLAUSE, false);\n-            if (selectClause != null && selectClause.hasChildID(JJTDISTINCT))\n-                exps.distinct = exps.DISTINCT_TRUE | exps.DISTINCT_AUTO;\n-            else\n-                exps.distinct = exps.DISTINCT_FALSE;\n-\n             // handle SELECT clauses\n             JPQLNode expNode = selectNode.\n                 findChildByID(JJTSELECTEXPRESSIONS, true);"},{"sha":"b746af8c07a892408d68d0e758543f38bc197301","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -46,6 +46,8 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n@@ -482,6 +484,12 @@ public Class getObjectIdType() {\n             case JavaTypes.OBJECT:\n                 _objectId = ObjectId.class;\n                 break;\n+            case JavaTypes.BIGDECIMAL:\n+                _objectId = BigDecimalId.class;\n+                break;\n+            case JavaTypes.BIGINTEGER:\n+                _objectId = BigIntegerId.class;\n+                break;\n         }\n         return _objectId;\n     }"},{"sha":"bd56b81fe832e401be8cb666dd4977e34647a1b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,11 +30,10 @@\n public class InheritanceComparator\n     implements Comparator, Serializable {\n \n-    private Class _base = Object.class;\n+    private Class _base = null;\n \n     /**\n-     * Set the least-derived type possible; defaults to\n-     * <code>Object.class</code>.\n+     * Set the least-derived type possible; defaults to <code>null</code>.\n      */\n     public void setBase(Class base) {\n         _base = base;\n@@ -75,7 +74,12 @@ public int compare(Object o1, Object o2) {\n                 return 1;\n             return c1.getName().compareTo(c2.getName());\n         }\n-        return i1 - i2;\n+        if (i1 < i2)\n+            return -1;\n+        else if (i1 > i2)\n+            return 1;\n+        else\n+            return 0;\n     }\n \n     /**\n@@ -84,6 +88,8 @@ public int compare(Object o1, Object o2) {\n     private int levels(Class to) {\n         if (to.isInterface())\n             return to.getInterfaces().length;\n+        if (_base == null)\n+            return 0;\n         for (int i = 0; to != null; i++, to = to.getSuperclass())\n             if (to == _base)\n                 return i;"},{"sha":"b0314014da74381016d3fc66f4a80e804f8cd113","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.util.Date;\n@@ -170,6 +172,14 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 case JavaTypes.OID:\n                 case JavaTypes.OBJECT:\n                     return new ObjectId(meta.getDescribedType(), val);\n+                case JavaTypes.BIGDECIMAL:\n+                    if (!convert && !(val instanceof BigDecimal))\n+                        throw new ClassCastException(\"!(x instanceof BigDecimal)\");\n+                    return new BigDecimalId(meta.getDescribedType(), (BigDecimal)val);\n+                case JavaTypes.BIGINTEGER:\n+                    if (!convert && !(val instanceof BigInteger))\n+                        throw new ClassCastException(\"!(x instanceof BigInteger)\");\n+                    return new BigIntegerId(meta.getDescribedType(), (BigInteger)val);\n                 default:\n                     throw new InternalException();\n             }\n@@ -275,6 +285,12 @@ public static Object copy(Object oid, ClassMetaData meta) {\n                 case JavaTypes.DATE:\n                     return new DateId(cls, ((DateId) oid).getId(),\n                         koid.hasSubclasses());\n+                case JavaTypes.BIGDECIMAL:\n+                    return new BigDecimalId(cls, ((BigDecimalId) oid).getId(),\n+                        koid.hasSubclasses());\n+                case JavaTypes.BIGINTEGER:\n+                    return new BigIntegerId(cls, ((BigIntegerId) oid).getId(),\n+                        koid.hasSubclasses());\n                 default:\n                     throw new InternalException();\n             }"},{"sha":"529b9f0d84b79fefc7ddb0394f741fa15e81a4a7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,74 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.math.BigDecimal;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ * @since 1.1.0\r\n+ */\r\n+public class BigDecimalId\r\n+    extends OpenJPAId {\r\n+\r\n+    private final BigDecimal key;\r\n+\r\n+    public BigDecimalId(Class cls, String key) {\r\n+        this(cls, (key == null) ? null : new BigDecimal(key));\r\n+    }\r\n+\r\n+    public BigDecimalId(Class cls, BigDecimal key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigDecimalId(Class cls, BigDecimal key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigDecimal getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        if (key == null)\r\n+            return \"NULL\";\r\n+\r\n+        return key.toString();\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        if (key != null)\r\n+            return key.hashCode();\r\n+\r\n+        return 0;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId other) {\r\n+        if(key == null)\r\n+            return false;\r\n+\r\n+        return key.equals(other);\r\n+    }\r\n+}\r"},{"sha":"95e9053a0ad3468683cb3ff778fc9f13454b797f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.math.BigInteger;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ * @since 1.1.0\r\n+ */\r\n+public class BigIntegerId\r\n+    extends OpenJPAId {\r\n+\r\n+    private final BigInteger key;\r\n+\r\n+    public BigIntegerId(Class cls, String key) {\r\n+        this(cls, (key == null) ? null : new BigInteger(key));\r\n+    }\r\n+\r\n+    public BigIntegerId(Class cls, BigInteger key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigIntegerId(Class cls, BigInteger key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigInteger getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        if (key == null)\r\n+            return \"NULL\";\r\n+\r\n+        return key.toString();\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        if (key != null)\r\n+            return key.hashCode();\r\n+\r\n+        return 0;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId other) {\r\n+        if (key == null)\r\n+            return false;\r\n+\r\n+        return key.equals(other);\r\n+    }\r\n+\r\n+}\r"},{"sha":"69e0d4d4ce3cc3a0fa13dd80d6650ae06e5d5bc1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -168,9 +168,9 @@ private static Object generateValue(StoreContext ctx,\n         }\n     }\n \n-    /** \n-     * Returns the fields of the state that require an update. \n-     *  \n+    /**\n+     * Returns the fields of the state that require an update.\n+     *\n      * @param  sm  the state to check\n      * @return the BitSet of fields that need update, or null if none\n      */"},{"sha":"83d4dbb9608cc12b6a02fa9c03346e3798e0e774","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -199,3 +199,8 @@ unspecified-unenhanced-types: One or more of the types in {0} have relations \\\n     to other unenhanced types that were not specified. These unspecified types \\\n     are: {1}\n enhance-error: An error occurred while enhancing {0}. Exception message: {1}\n+most-derived-unrelated: Methods \"{0}\" and \"{1}\" are defined in types that do \\\n+    not have an interface or superclass inheritance relationship.\n+most-derived-unrelated-same-type: Methods \"{0}\" and \"{1}\" are defined in the same \\\n+    type, but the method return types do not have an interface or superclass \\\n+    inheritance relationship."},{"sha":"d146f0848187106bf1cc7acc0d1cc7d81020c951","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -96,4 +96,6 @@ bean-constructor: Could not instantiate class {0}.  Make sure it has an \\\n method-notfound: Method \"{1}\" with arguments of type: {2} \\\n     not found in class \"{0}\".\n broker-factory-listener-exception: Exception thrown while calling a \\\n-    BrokerFactoryListener. This exception will be ignored.\n\\ No newline at end of file\n+    BrokerFactoryListener. This exception will be ignored.\n+unknown-lifecycle-event: An unknown lifecycle event was encountered. Please \\\n+    report this to dev@openjpa.apache.org. Event type: {0}.\n\\ No newline at end of file"},{"sha":"f6b60f282d6162146fb4d46063bcb7a0036dbe69","filename":"openjpa-lib-5/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-lib-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-lib-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib-5/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n         <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.0.1-SNAPSHOT</version>\r\n+        <version>1.0.2</version>\r\n     </parent>\r\n     <dependencies>\r\n         <dependency>\r"},{"sha":"e66b8ccbf753efb4b5e830f75727e329881ed7e8","filename":"openjpa-lib/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <profiles>\n         <profile>"},{"sha":"e50280fd5300cc6c969f325a337938f379a324f6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -25,7 +25,9 @@\n import java.net.URL;\n import java.security.AccessController;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Enumeration;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.StringTokenizer;\n@@ -145,7 +147,21 @@ private static void addResources(URL url, Set set) throws IOException {\n \n     public static Class[] getImplementorClasses(Class serviceClass,\n         ClassLoader loader) {\n-        return getImplementorClasses(serviceClass.getName(), loader);\n+        Set invalid = new HashSet();\n+        Class[] classes = getImplementorClasses(serviceClass.getName(), loader);\n+\n+        // filter out any classes that have any classloader issues wrt.\n+        // the specified service class.\n+        for (int i = 0; i < classes.length; i++)\n+            if (!serviceClass.isAssignableFrom(classes[i]))\n+                invalid.add(classes[i]);\n+        if (invalid.size() != 0) {\n+            List list = new ArrayList(Arrays.asList(classes));\n+            list.removeAll(invalid);\n+            return (Class[]) list.toArray(new Class[list.size()]);\n+        } else {\n+            return classes;\n+        }\n     }\n \n     /**"},{"sha":"03bc602c97814b7953ee64367a4a899298fac884","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <properties>\n         <openjpa.loglevel>INFO</openjpa.loglevel>"},{"sha":"2062d3f5a29e56383b29c3158046a7332c9a1764","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"meta_A\")\r\n+public class A extends AbstractThing {\r\n+\r\n+}\r"},{"sha":"7fb70373e8774865e9ded4846545ddca29fa65ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import javax.persistence.MappedSuperclass;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Column;\r\n+\r\n+@MappedSuperclass\r\n+public class AbstractThing {\r\n+\r\n+    private String id;\r\n+\r\n+    @Id\r\n+    @GeneratedValue(generator = \"uuid-hex\")\r\n+    @Column(columnDefinition = \"char(32)\")\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    protected void setId(final String id) {\r\n+        this.id = id;\r\n+    }\r\n+}\r"},{"sha":"e89ba24257197a83c4ed4b2088bb50b6ce8c4386","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Set;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.meta.C;\r\n+\r\n+@Entity\r\n+@Table(name=\"meta_B\")\r\n+public class B extends AbstractThing {\r\n+    private Set<C> cs;\r\n+    private Set<A> as;\r\n+\r\n+    @OneToMany\r\n+    public Set<C> getCs() {\r\n+        return cs;\r\n+    }\r\n+\r\n+    public void setCs(Set<C> cs) {\r\n+        this.cs = cs;\r\n+    }\r\n+\r\n+    @OneToMany\r\n+    public Set<A> getAs() {\r\n+        return as;\r\n+    }\r\n+\r\n+    public void setAs(Set<A> as) {\r\n+        this.as = as;\r\n+    }\r\n+}\r"},{"sha":"83f99aaa1b39d60d559f663bcfa8a2f47e30b730","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,103 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.meta.C.Identity;\r\n+\r\n+@Entity\r\n+@IdClass(Identity.class)\r\n+@Table(name=\"meta_C\")\r\n+public class C {\r\n+    private A a;\r\n+    private B b;\r\n+    private long num;\r\n+\r\n+    @ManyToOne(optional = false)\r\n+    @Column(nullable = false)\r\n+    public A getA() {\r\n+        return a;\r\n+    }\r\n+\r\n+    public void setA(A a) {\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    @Id\r\n+    @ManyToOne(optional = false)\r\n+    @Column(nullable = false)\r\n+    public B getB() {\r\n+        return b;\r\n+    }\r\n+\r\n+    public void setB(B b) {\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    @Id\r\n+    public long getNum() {\r\n+        return num;\r\n+    }\r\n+\r\n+    public void setNum(long num) {\r\n+        this.num = num;\r\n+    }\r\n+\r\n+    public static class Identity {\r\n+        private String b;\r\n+        private long num;\r\n+\r\n+        @Override\r\n+        public int hashCode() {\r\n+            return b.hashCode() * 17 + (int) num;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object obj) {\r\n+            return obj != null && (obj instanceof Identity)\r\n+                && b.equals(((Identity) obj).b) && num == ((Identity) obj).num;\r\n+        }\r\n+\r\n+        public String getB() {\r\n+            return b;\r\n+        }\r\n+\r\n+        public void setB(B b) {\r\n+            this.b = b.getId();\r\n+        }\r\n+\r\n+        public void setB(String b) {\r\n+            this.b = b;\r\n+        }\r\n+\r\n+        public long getNum() {\r\n+            return num;\r\n+        }\r\n+\r\n+        public void setNum(long num) {\r\n+            this.num = num;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"257e66605475ad002cb7ee3a19603c2059b10bbd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\r\n+\r\n+    public void testInheritanceComparatorWithoutBase() {\r\n+        inheritanceComparatorHelper(false);\r\n+    }\r\n+\r\n+    public void testInheritanceComparatorWithBase() {\r\n+        inheritanceComparatorHelper(true);\r\n+    }\r\n+\r\n+    private void inheritanceComparatorHelper(boolean base) {\r\n+        InheritanceComparator comp = new InheritanceComparator();\r\n+        if (base)\r\n+            comp.setBase(AbstractThing.class);\r\n+\r\n+        assertEquals(-1, comp.compare(A.class, B.class));\r\n+        assertEquals(-1, comp.compare(B.class, C.class));\r\n+        assertTrue(comp.compare(A.class, C.class) < 0);\r\n+\r\n+        assertEquals(-1, comp.compare(AbstractThing.class, A.class));\r\n+        assertEquals(-1, comp.compare(AbstractThing.class, B.class));\r\n+        assertTrue(comp.compare(AbstractThing.class, C.class) < 0);\r\n+    }\r\n+\r\n+    public void testMetaDataInheritanceComparatorWithoutBase() {\r\n+        metaDataInheritanceComparatorHelper(false);\r\n+    }\r\n+\r\n+    public void testMetaDataInheritanceComparatorWithBase() {\r\n+        metaDataInheritanceComparatorHelper(true);\r\n+    }\r\n+\r\n+    private void metaDataInheritanceComparatorHelper(boolean base) {\r\n+        InheritanceComparator comp = new MetaDataInheritanceComparator();\r\n+        if (base)\r\n+            comp.setBase(AbstractThing.class);\r\n+\r\n+        EntityManagerFactory emf = createEMF(A.class, B.class, C.class,\r\n+            AbstractThing.class);\r\n+\r\n+        ClassMetaData a = JPAFacadeHelper.getMetaData(emf, A.class);\r\n+        ClassMetaData b = JPAFacadeHelper.getMetaData(emf, B.class);\r\n+        ClassMetaData c = JPAFacadeHelper.getMetaData(emf, C.class);\r\n+        ClassMetaData at = JPAFacadeHelper.getMetaData(emf,\r\n+            AbstractThing.class);\r\n+\r\n+        emf.close();\r\n+\r\n+        assertEquals(-1, comp.compare(a, b));\r\n+        assertEquals(-1, comp.compare(b, c));\r\n+        assertTrue(comp.compare(a, c) < 0);\r\n+\r\n+        assertEquals(1, comp.compare(b, a));\r\n+        assertEquals(1, comp.compare(c, b));\r\n+        assertTrue(comp.compare(c, a) > 0);\r\n+\r\n+        assertEquals(-1, comp.compare(at, a));\r\n+        assertEquals(-1, comp.compare(at, b));\r\n+        assertEquals(-1, comp.compare(at, c));\r\n+    }\r\n+\r\n+    public void testEndToEnd() {\r\n+        // make sure we can get things fully instantiated\r\n+        EntityManagerFactory emf = createEMF(A.class, B.class, C.class,\r\n+            AbstractThing.class);\r\n+        emf.createEntityManager().close();\r\n+        emf.close();\r\n+    }\r\n+}\r"},{"sha":"f5ffce8058e48d6bf369518e2b5db4ee126da8f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.EntityListeners;\r\n+\r\n+@Entity\r\n+@EntityListeners(value = ListenerImpl.class)\r\n+public class EntityListenerEntity implements ListenerTestEntity {\r\n+    @Id @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private int value;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(int value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"57bc1bae44264ae138bb2c8b97536eb42cec390f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java","status":"modified","additions":68,"deletions":11,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -24,29 +24,54 @@\n import javax.persistence.PrePersist;\n import javax.persistence.PreUpdate;\n import javax.persistence.Version;\n-\n+import javax.persistence.PreRemove;\n+import javax.persistence.PostRemove;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PostPersist;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Transient;\n \n @Entity\n public class ExceptionsFromCallbacksEntity {\n-    @Id private long id;\n+    @Id @GeneratedValue private long id;\n     @Version private int version;\n-    private boolean throwOnPrePersist;\n-    private boolean throwOnPreUpdate;\n+    @Transient private boolean throwOnPrePersist;\n+    @Transient private boolean throwOnPostPersist;\n+    @Transient private boolean throwOnPreUpdate;\n+    @Transient private boolean throwOnPostUpdate;\n     private boolean throwOnPostLoad;\n+    @Transient private boolean throwOnPreRemove;\n+    @Transient private boolean throwOnPostRemove;\n     private String stringField;\n-    \n+\n     public void setThrowOnPrePersist(boolean b) {\n         throwOnPrePersist = b;\n     }\n \n-    public void setThrowOnPostLoad(boolean b) {\n-        throwOnPostLoad = b;\n+    public void setThrowOnPostPersist(boolean b) {\n+        throwOnPostPersist = b;\n     }\n \n     public void setThrowOnPreUpdate(boolean b) {\n         throwOnPreUpdate = b;\n     }\n \n+    public void setThrowOnPostUpdate(boolean b) {\n+        throwOnPostUpdate = b;\n+    }\n+\n+    public void setThrowOnPostLoad(boolean b) {\n+        throwOnPostLoad = b;\n+    }\n+\n+    public void setThrowOnPreRemove(boolean b) {\n+        throwOnPreRemove = b;\n+    }\n+\n+    public void setThrowOnPostRemove(boolean b) {\n+        throwOnPostRemove = b;\n+    }\n+\n     public void setStringField(String s) {\n         stringField = s;\n     }\n@@ -57,18 +82,50 @@ public void prePersist() {\n             throw new CallbackTestException();\n     }\n \n+    @PostPersist\n+    public void postPersist() {\n+        if (throwOnPostPersist)\n+            throw new CallbackTestException();\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        if (throwOnPostLoad && isInvokedFromTestMethod())\n+            throw new CallbackTestException();\n+    }\n+\n+    private boolean isInvokedFromTestMethod() {\n+        return TestExceptionsFromCallbacks.testRunning;\n+    }\n+\n     @PreUpdate\n     public void preUpdate() {\n         if (throwOnPreUpdate)\n             throw new CallbackTestException();\n     }\n \n-    @PostLoad\n-    public void postLoad() {\n-        if (throwOnPostLoad)\n+    @PostUpdate\n+    public void postUpdate() {\n+        if (throwOnPostUpdate)\n             throw new CallbackTestException();\n     }\n-    \n+\n+    @PreRemove\n+    public void preRemove() {\n+        if (throwOnPreRemove && isInvokedFromTestMethod())\n+            throw new CallbackTestException();\n+    }\n+\n+    @PostRemove\n+    public void postRemove() {\n+        if (throwOnPostRemove && isInvokedFromTestMethod())\n+            throw new CallbackTestException();\n+    }\n+\n+    public Object getId() {\n+        return id;\n+    }\n+\n     public class CallbackTestException\n         extends RuntimeException {\n     }"},{"sha":"317f85a4136b2f9d72db5fa3d5cda386a5342ad9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.EntityListeners;\r\n+\r\n+import org.apache.openjpa.persistence.callbacks.ListenerImpl;\r\n+\r\n+@Entity\r\n+public class GlobalListenerEntity implements ListenerTestEntity {\r\n+    @Id @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private int value;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(int value) {\r\n+        this.value = value;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"72746723f7e7fae8acdeebfd9ebb27f41cef0d05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.PrePersist;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PostLoad;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreRemove;\r\n+import javax.persistence.PostRemove;\r\n+\r\n+public class ListenerImpl {\r\n+\r\n+    static int prePersistCount;\r\n+    static int postPersistCount;\r\n+    static int preUpdateCount;\r\n+    static int postUpdateCount;\r\n+    static int preRemoveCount;\r\n+    static int postRemoveCount;\r\n+    static int postLoadCount;\r\n+\r\n+    @PrePersist\r\n+    public void prePersist(Object o) {\r\n+        prePersistCount++;\r\n+    }\r\n+\r\n+    @PostPersist\r\n+    public void postPersist(Object o) {\r\n+        postPersistCount++;\r\n+    }\r\n+\r\n+    @PostLoad\r\n+    public void postLoad(Object o) {\r\n+        postLoadCount++;\r\n+    }\r\n+\r\n+    @PreUpdate\r\n+    public void preUpdate(Object o) {\r\n+        preUpdateCount++;\r\n+    }\r\n+\r\n+    @PostUpdate\r\n+    public void postUpdate(Object o) {\r\n+        postUpdateCount++;\r\n+    }\r\n+\r\n+    @PreRemove\r\n+    public void preRemove(Object o) {\r\n+        preRemoveCount++;\r\n+    }\r\n+\r\n+    @PostRemove\r\n+    public void postRemove(Object o) {\r\n+        postRemoveCount++;\r\n+    }\r\n+}\r"},{"sha":"f8ad91e826afe28ad4a5aead4a6028f657f064c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+public interface ListenerTestEntity {\r\n+\r\n+    public long getId();\r\n+\r\n+    public int getValue();\r\n+\r\n+    public void setValue(int val);\r\n+}\r"},{"sha":"d8684f39906e03cd775b1b2cc925f1eaf3a11a6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestEntityListeners extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES);\r\n+        ListenerImpl.prePersistCount = 0;\r\n+        ListenerImpl.postPersistCount = 0;\r\n+        ListenerImpl.preUpdateCount = 0;\r\n+        ListenerImpl.postUpdateCount = 0;\r\n+        ListenerImpl.preRemoveCount = 0;\r\n+        ListenerImpl.postRemoveCount = 0;\r\n+        ListenerImpl.postLoadCount = 0;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"listener-pu\";\r\n+    }\r\n+\r\n+    public void testEntityListeners() {\r\n+        helper(true);\r\n+    }\r\n+\r\n+    public void testGlobalListeners() {\r\n+        helper(false);\r\n+    }\r\n+\r\n+    public void helper(boolean entityListeners) {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            ListenerTestEntity o;\r\n+            if (entityListeners)\r\n+                o = new EntityListenerEntity();\r\n+            else\r\n+                o = new GlobalListenerEntity();\r\n+            em.persist(o);\r\n+\r\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n+\r\n+            em.getTransaction().commit();\r\n+            long id = o.getId();\r\n+            em.close();\r\n+\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n+\r\n+            em = emf.createEntityManager();\r\n+            em.getTransaction().begin();\r\n+            if (entityListeners)\r\n+                o = em.find(EntityListenerEntity.class, id);\r\n+            else\r\n+                o = em.find(GlobalListenerEntity.class, id);\r\n+\r\n+            assertNotNull(o);\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n+\r\n+            o.setValue(o.getValue() + 1);\r\n+\r\n+            em.flush();\r\n+            assertStatus(1, 1, 1, 1, 0, 0, 1);\r\n+\r\n+            em.remove(o);\r\n+            assertStatus(1, 1, 1, 1, 1, 0, 1);\r\n+\r\n+            em.getTransaction().commit();\r\n+\r\n+            assertStatus(1, 1, 1, 1, 1, 1, 1);\r\n+\r\n+            em.close();\r\n+        } finally {\r\n+            if (em != null && em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            if (em != null && em.isOpen())\r\n+                em.close();\r\n+        }\r\n+    }\r\n+\r\n+    private void assertStatus(\r\n+        int prePersist, int postPersist,\r\n+        int preUpdate, int postUpdate,\r\n+        int preRemove, int postRemove,\r\n+        int postLoad) {\r\n+        assertEquals(prePersist, ListenerImpl.prePersistCount);\r\n+        assertEquals(postPersist, ListenerImpl.postPersistCount);\r\n+        assertEquals(preUpdate, ListenerImpl.preUpdateCount);\r\n+        assertEquals(postUpdate, ListenerImpl.postUpdateCount);\r\n+        assertEquals(preRemove, ListenerImpl.preRemoveCount);\r\n+        assertEquals(postRemove, ListenerImpl.postRemoveCount);\r\n+        assertEquals(postLoad, ListenerImpl.postLoadCount);\r\n+    }\r\n+\r\n+}\r"},{"sha":"33b40440cf7314d9b7ce5ad106250b58b1c27730","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","status":"modified","additions":424,"deletions":14,"changes":438,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -18,27 +18,51 @@\n  */\n package org.apache.openjpa.persistence.callbacks;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import java.util.Set;\n+import java.util.HashSet;\n import javax.persistence.EntityManager;\n-import javax.persistence.Persistence;\n import javax.persistence.RollbackException;\n \n-import junit.framework.TestCase;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.callbacks.ExceptionsFromCallbacksEntity.CallbackTestException;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n \n /**\n  * Tests against JPA section 3.5's description of callback exception handling.\n  */\n public class TestExceptionsFromCallbacks\n     extends SingleEMFTestCase {\n \n+    public static boolean testRunning = false;\n+\n+    @Override\n     public void setUp() {\n-        setUp(ExceptionsFromCallbacksEntity.class);\n+        Set needEnhancement = new HashSet();\n+        needEnhancement.add(\n+            \"testPostUpdateExceptionDuringFlushWithNewInstance\");\n+        needEnhancement.add(\n+            \"testPreUpdateExceptionDuringFlushWithExistingFlushedInstance\");\n+        needEnhancement.add(\n+            \"testPreUpdateExceptionDuringCommitWithExistingFlushedInstance\");\n+        needEnhancement.add(\n+            \"testPostUpdateExceptionDuringFlushWithExistingFlushedInstance\");\n+        needEnhancement.add(\n+            \"testPostUpdateExceptionDuringCommitWithExistingFlushedInstance\");\n+        if (!PersistenceCapable.class.isAssignableFrom(\n+            ExceptionsFromCallbacksEntity.class)\n+            && needEnhancement.contains(getName()))\n+            // actually, we really only need redef\n+            fail(\"this test method does not work without enhancement\");\n+\n+        setUp(ExceptionsFromCallbacksEntity.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\n+        testRunning = true;\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        testRunning = false;\n+        super.tearDown();\n     }\n \n     public void testPrePersistException() {\n@@ -60,13 +84,41 @@ public void testPrePersistException() {\n         }\n     }\n \n-    public void testPreUpdateExceptionDuringFlush() {\n+    public void testPrePersistExceptionOnMerge() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n-        o.setThrowOnPreUpdate(true);\n+        o.setThrowOnPrePersist(true);\n+        try {\n+            em.merge(o);\n+            fail(\"merge should have failed\");\n+        } catch (CallbackTestException cte) {\n+            // transaction should be still active, but marked for rollback\n+            assertTrue(em.getTransaction().isActive());\n+            assertTrue(em.getTransaction().getRollbackOnly());\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+\n+    public void testPostPersistExceptionDuringFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPostPersist(true);\n         em.persist(o);\n+        mutateAndFlush(em, o);\n+    }\n+\n+    private void mutateAndFlush(EntityManager em,\n+        ExceptionsFromCallbacksEntity o) {\n         o.setStringField(\"foo\");\n+        flush(em);\n+    }\n+\n+    private void flush(EntityManager em) {\n         try {\n             em.flush();\n             fail(\"flush should have failed\");\n@@ -81,20 +133,29 @@ public void testPreUpdateExceptionDuringFlush() {\n         }\n     }\n \n-    public void testPreUpdateExceptionDuringCommit() {\n+    public void testPostPersistExceptionDuringCommit() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n-        o.setThrowOnPreUpdate(true);\n+        o.setThrowOnPostPersist(true);\n         em.persist(o);\n+        mutateAndCommit(em, o);\n+    }\n+\n+    private void mutateAndCommit(EntityManager em,\n+        ExceptionsFromCallbacksEntity o) {\n         o.setStringField(\"foo\");\n+        commit(em);\n+    }\n+\n+    private void commit(EntityManager em) {\n         try {\n             em.getTransaction().commit();\n             fail(\"commit should have failed\");\n         } catch (RollbackException re) {\n             assertEquals(CallbackTestException.class,\n                 re.getCause().getClass());\n-            \n+\n             // transaction should be rolled back at this point\n             assertFalse(em.getTransaction().isActive());\n         } finally {\n@@ -103,7 +164,253 @@ public void testPreUpdateExceptionDuringCommit() {\n             em.close();\n         }\n     }\n-    \n+\n+    public void testPrePersistExceptionDuringFlushWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPrePersist(true);\n+        // should pass; pre-persist should not be triggered\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPrePersistExceptionDuringCommitWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPrePersist(true);\n+        // should pass; pre-persist should not be triggered\n+        o.setStringField(\"foo\");\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostPersistExceptionDuringFlushWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPostPersist(true);\n+        // should pass; post-persist should not be triggered\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostPersistExceptionDuringCommitWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPostPersist(true);\n+        // should pass; post-persist should not be triggered\n+        o.setStringField(\"foo\");\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPreUpdateExceptionWithNewInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPreUpdate(true);\n+        em.persist(o);\n+        o.setStringField(\"foo\");\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostUpdateExceptionDuringFlushWithNewInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPostUpdate(true);\n+        em.persist(o);\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostUpdateExceptionDuringCommitWithNewInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPostUpdate(true);\n+        em.persist(o);\n+        o.setStringField(\"foo\");\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPreUpdateExceptionDuringFlushWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPreUpdate(true);\n+        mutateAndFlush(em, o);\n+    }\n+\n+    public void testPreUpdateExceptionDuringCommitWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPreUpdate(true);\n+        mutateAndCommit(em, o);\n+    }\n+\n+    public void testPostUpdateExceptionDuringFlushWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPostUpdate(true);\n+        mutateAndFlush(em, o);\n+    }\n+\n+    public void testPostUpdateExceptionDuringCommitWithNewFlushedInstance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPostUpdate(true);\n+        mutateAndCommit(em, o);\n+    }\n+\n+    public void testPreUpdateExceptionDuringFlushWithExistingInstance() {\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setThrowOnPreUpdate(true);\n+        mutateAndFlush(em, o);\n+    }\n+\n+    private Object insert(String s) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setStringField(s);\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+        return o.getId();\n+    }\n+\n+    public void testPreUpdateExceptionDuringCommitWithExistingInstance() {\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setThrowOnPreUpdate(true);\n+        mutateAndCommit(em, o);\n+    }\n+\n+    public void testPostUpdateExceptionDuringFlushWithExistingInstance() {\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setThrowOnPostUpdate(true);\n+        mutateAndFlush(em, o);\n+    }\n+\n+    public void testPostUpdateExceptionDuringCommitWithExistingInstance() {\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setThrowOnPostUpdate(true);\n+        mutateAndCommit(em, o);\n+    }\n+\n+    public void testPreUpdateExceptionDuringFlushWithExistingFlushedInstance() {\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        o.setThrowOnPreUpdate(true);\n+        // there's no additional flush work; should not re-invoke the callback\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPreUpdateExceptionDuringCommitWithExistingFlushedInstance(){\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        o.setThrowOnPreUpdate(true);\n+        // there's no additional flush work; should not re-invoke the callback\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostUpdateExceptionDuringFlushWithExistingFlushedInstance(){\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        o.setThrowOnPostUpdate(true);\n+        // no mutations; should not trigger a PostUpdate\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostUpdateExceptionDuringCommitWithExistingFlushedInstance()\n+    {\n+        Object oid = insert(\"new instance\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o =\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n+        o.setStringField(\"foo\");\n+        em.flush();\n+        // no mutations; should not trigger a PostUpdate\n+        o.setThrowOnPostUpdate(true);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n     public void testPostLoadException() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -117,7 +424,7 @@ public void testPostLoadException() {\n         em = emf.createEntityManager();\n         em.getTransaction().begin();\n         try {\n-            o = em.find(ExceptionsFromCallbacksEntity.class, oid);\n+            em.find(ExceptionsFromCallbacksEntity.class, oid);\n             fail(\"find should have failed\");\n         } catch (CallbackTestException cte) {\n             // transaction should be active but marked for rollback\n@@ -129,4 +436,107 @@ public void testPostLoadException() {\n             em.close();\n         }\n     }\n+\n+    public void testPreDeleteException() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPreRemove(true);\n+        try {\n+            em.remove(o);\n+        } catch (CallbackTestException cte) {\n+            // transaction should be active but marked for rollback\n+            assertTrue(em.getTransaction().isActive());\n+            assertTrue(em.getTransaction().getRollbackOnly());\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+\n+    public void testPostDeleteExceptionDuringFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPostRemove(true);\n+        try {\n+            em.remove(o);\n+        } catch (CallbackTestException e) {\n+            em.getTransaction().rollback();\n+            em.close();\n+            fail(\"PostRemove is being called too soon (before SQL is issued)\");\n+        }\n+        flush(em);\n+    }\n+\n+    public void testPostDeleteExceptionDuringCommit() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        o.setThrowOnPostRemove(true);\n+        try {\n+            em.remove(o);\n+        } catch (CallbackTestException e) {\n+            em.getTransaction().rollback();\n+            em.close();\n+            fail(\"PostRemove is being called too soon (before SQL is issued)\");\n+        }\n+        commit(em);\n+    }\n+\n+    public void testPreDeleteExceptionDoubleDelete() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        // this should pass\n+        em.remove(o);\n+        em.flush();\n+        o.setThrowOnPreRemove(true);\n+        // this shoud also pass; no work to do for delete\n+        em.remove(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostDeleteExceptionDuringFlushDoubleDelete() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        // this should pass\n+        em.remove(o);\n+        em.flush();\n+        o.setThrowOnPostRemove(true);\n+        // this shoud also pass; no work to do for delete\n+        em.remove(o);\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPostDeleteExceptionDuringCommitDoubleDelete() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        em.persist(o);\n+        em.flush();\n+        // this should pass\n+        em.remove(o);\n+        em.flush();\n+        o.setThrowOnPostRemove(true);\n+        // this shoud also pass; no work to do for delete\n+        em.remove(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }"},{"sha":"910e2b5a9ecb8caa3abfaf21b1f2fd78928d3353","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/Record.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.Persistent;\n+\n+@Entity\n+public class Record {\n+\n+    @Persistent\n+    private String content;\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(String content) {\n+        this.content = content;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"22a31378f399b1939bce99a13bab7816352d07d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachment.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachment extends SingleEMFTestCase {\n+\n+    private int id;\n+\n+    public void setUp() {\n+        super.setUp(Record.class);\n+        id = prepare();\n+    }\n+\n+    public void testAttachWithNewString() {\n+        // set up record with string \"default\" as content\n+        Record record = detach(id);\n+\n+        // set different text\n+        record.setContent(\"a text different than the one in the record\");\n+\n+        attach(record);\n+    }\n+\n+    public void testSetSameStringInstance() {\n+        Record record = detach(id);\n+\n+        // same text, same String instance\n+        record.setContent(record.getContent());\n+\n+        attach(record);\n+    }\n+\n+    public void testSetSameString() {\n+        Record record = detach(id);\n+        // same text, different String instance\n+        record.setContent(record.getContent() + \"\");\n+\n+        attach(record);\n+    }\n+\n+    /**\n+     * Creates a new record, sets the content to \"default\" and returns the id.\n+     */\n+    private int prepare() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        Record record = new Record();\n+        record.setContent(\"default\");\n+        em.persist(record);\n+        em.getTransaction().commit();\n+        em.close();\n+        return record.getId();\n+    }\n+\n+    /**\n+     * Fetches the record with the given id and returns a detached instance.\n+     */\n+    private Record detach(int id) {\n+        EntityManager em = emf.createEntityManager();\n+        Record record = em.find(Record.class, id);\n+        em.close(); // detach\n+        return record;\n+    }\n+\n+    /**\n+     * Merges the record into a new persistence context.\n+     */\n+    private void attach(Record record) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        record = em.merge(record);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"},{"sha":"2c19810ac3c8f756476097b36d4c1019b597845e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.openjpa.persistence.discriminator;\n \n+import java.util.List;\n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n-import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -32,7 +33,7 @@ protected void setUp() {\n                 CharRootEntity.class, IntegerAbstractEntity.class,\n                 IntegerLeafEntity.class, IntegerRootEntity.class,\n                 StringAbstractEntity.class, StringLeafEntity.class,\n-                StringRootEntity.class);\n+                StringRootEntity.class, CLEAR_TABLES);\n     }\n \n     public void testCharDiscriminators() {\n@@ -144,4 +145,33 @@ public void testStringDiscriminators() {\n         assertNotNull(root2);\n         em.close();\n     }\n+\n+    public void testExistsQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        StringRootEntity e = new StringRootEntity();\n+        e.setName(\"foo\");\n+        em.persist(e);\n+\n+        e = new StringRootEntity();\n+        e.setName(\"foo\");\n+        em.persist(e);\n+\n+        e = new StringRootEntity();\n+        e.setName(\"bar\");\n+        em.persist(e);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select o from StringAbstractEntity o \" +\n+            \"where exists (select o2 from StringLeafEntity o2)\");\n+        List<StringAbstractEntity> list = q.getResultList();\n+        assertEquals(0, list.size());\n+        for (StringAbstractEntity entity : list)\n+            assertTrue(entity instanceof StringLeafEntity);\n+        em.close();\n+    }\n }"},{"sha":"2f1e9be1026433f5cf94c8fdb109104ccfab185e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java","status":"removed","additions":0,"deletions":564,"changes":564,"blob_url":"https://github.com/apache/openjpa/blob/38607842164f59a131fd4862fc41958653df6f92/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/38607842164f59a131fd4862fc41958653df6f92/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java?ref=38607842164f59a131fd4862fc41958653df6f92","patch":"@@ -1,564 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.fetchgroups;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestFetchGroup extends SingleEMTestCase {\r\n-    public void setUp() {\r\n-        setUp(FGEmployee.class, FGDepartment.class, FGManager.class,\r\n-                FGAddress.class);\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        // Populate database as denoted in Entity Data\r\n-        boolean errors = initializeDatabase(oem);\r\n-        assertFalse(errors);\r\n-    }\r\n-\r\n-    // Test no fetch group is added.\r\n-    public void testFetchGroup001() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"******** 001 ==> test no fetch group is added\r\n-        // thru API\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        FGEmployee emp = findEmployee(oem, 1, false, null);\r\n-\r\n-        // Examine Employee(id=1).rating, data should be available\r\n-        // System.out.println(\"Assert Employee(id=1).rating should be null.\r\n-        // Result ==>\");\r\n-        assertNull(emp.getRating());\r\n-        // Examine Employee(id=1).description, data should NOT be available\r\n-        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n-        // ==>\");\r\n-        assertNull(emp.getDescription());\r\n-        // Examine Employee(id=1).address, data should not be available\r\n-        // System.out.println(\"Assert Employee(id=1).address is null\");\r\n-        assertNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoTbe available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is null \");\r\n-        assertNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // System.out.println(\"Assert Employee(id=1).manager is null \");\r\n-        assertNull(emp.getManager());\r\n-\r\n-    }\r\n-\r\n-    // Test no fetch group is added and restFetchGroup is called.\r\n-    public void testFetchGroup002() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"*****************002 ==> test no fetch group is\r\n-        // added thru API and \");\r\n-        // System.out.println(\" resetFetchGroup is called.\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        FGEmployee emp = findEmployee(oem, 1, true, null);\r\n-        // Examine Employee(id=1).rating, data should not be available\r\n-        // System.out.println(\"Assert Employee(id=1).rating is null.\");\r\n-        assertNull(emp.getRating());\r\n-        // Examine Employee(id=1).description, data should NOT be available\r\n-        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n-        // ==>\");\r\n-        assertNull(emp.getDescription());\r\n-        // Examine Employee(id=1).address, data should not be available\r\n-        // System.out.println(\"Assert Employee(id=1).address is null \");\r\n-        assertNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoT be available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is null \");\r\n-        assertNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // System.out.println(\"Assert Employee(id=1).manager is null \");\r\n-        assertNull(emp.getManager());\r\n-\r\n-    }\r\n-\r\n-    // Test Rating fetch group is added and restFetchGroup is called.\r\n-    public void testFetchGroup003() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"****************003 ==> test RatingFetchGroup is\r\n-        // added thru API and \");\r\n-        // System.out.println(\" resetFetchGroup is called.\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        String[] arr = { \"RatingFetchGroup\" };\r\n-        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n-        // Examine Employee(id=1).rating, data should be available\r\n-        // System.out.println(\"Assert Employee(id=1).rating is not null. Result\r\n-        // ==> \");\r\n-        assertNotNull(emp.getRating());\r\n-        // Examine Employee(id=1).description, data should NOT be available\r\n-        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n-        // ==>\");\r\n-        assertNull(emp.getDescription());\r\n-        // Examine Employee(id=1).address, data should be available\r\n-        // System.out.println(\"Assert Employee(id=1).address is not null because\r\n-        // of @LoadFetchGroup on Rating ==> \");\r\n-        assertNotNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoTbe available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is null = \");\r\n-        assertNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // System.out.println(\"Assert Employee(id=1).manager is null =\");\r\n-        assertNull(emp.getManager());\r\n-        // em.getTransaction().commit();\r\n-\r\n-    }\r\n-\r\n-    // Test Address and Rating fetch groups are added and restFetchGroup is\r\n-    // called.\r\n-    public void testFetchGroup004() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"***************004 ==> test RatingFetchGroup and\r\n-        // AddressFetchGroup\" +\r\n-        // \"are added thru API and \" +\r\n-        // \"resetFetchGroup is called.\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        String[] arr = { \"RatingFetchGroup\", \"AddressFetchGroup\" };\r\n-        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n-        // Examine Employee(id=1).rating, data should be available\r\n-        // System.out.println(\"Assert Employee(id=1).rating is not null. Result\r\n-        // ==> \");\r\n-        assertNotNull(emp.getRating());\r\n-        // Examine Employee(id=1).description, data should NOT be available\r\n-        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n-        // ==>\");\r\n-        assertNull(emp.getDescription());\r\n-        // Examine Employee(id=1).address, data should be available\r\n-        // System.out.println(\"Assert Employee(id=1).address is not null ==> \");\r\n-        assertNotNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoTbe available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is null = \");\r\n-        assertNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // System.out.println(\"Assert Employee(id=1).manager is null =\");\r\n-        assertNull(emp.getManager());\r\n-\r\n-    }\r\n-\r\n-    // Test aggregateEmployeeFetchGroup2 only\r\n-    public void testFetchGroup005() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"***************005 ==> test\r\n-        // aggregateEmployeeFetchGroup2 only\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        String[] arr = { \"AggregateEmployeeFetchGroup2\" };\r\n-        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n-        // Examine Employee(id=1).address, data should be available\r\n-\r\n-        // System.out.println(\"Assert Employee(id=1).address is not null \");\r\n-        assertNotNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoTbe available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is not null = \");\r\n-        assertNotNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // System.out.println(\"Assert Employee(id=1).manager is not null =\");\r\n-        assertNotNull(emp.getManager());\r\n-\r\n-    }\r\n-\r\n-    public void testFetchGroup006() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"************006 ==> test\r\n-        // aggregateEmployeeFetchGroup1 and \"+\r\n-        // \" aggregateEmployeeFetchGroup2 - expect address, dept and manager are\r\n-        // not null\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-        // em.getTransaction().begin();\r\n-\r\n-        String[] arr = { \"AggregateEmployeeFetchGroup1\",\r\n-                \"AggregateEmployeeFetchGroup2\" };\r\n-        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n-        // Examine Employee(id=1).address, data should be available\r\n-        // System.out.println(\"Assert Employee(id=1).address is not null \");\r\n-        assertNotNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoTbe available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is not null \");\r\n-        assertNotNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // FGManager mgr = emp.getManager();\r\n-        // System.out.println(\"assert manager is not null\");\r\n-        assertNotNull(emp.getManager());\r\n-        assertNotNull(emp.getManager().getId());\r\n-        assertNotNull(emp.getManager().getFirstName());\r\n-\r\n-        // Verify that Manager(id=101).manager is not available, as the\r\n-        // recursion depth should have retrieved only the Employee and its\r\n-        // manager.\r\n-        // System.out.println(\"Verify that Manager(id=101).manager is no\r\n-        // available, as the recursion depth should have retrieved only the\r\n-        // Employee and its manager.\");\r\n-        // System.out.println(\"Assert Employee(id=1).manager.manager == null\r\n-        // ==>\"+ mgrMgr);\r\n-        assertNull(emp.getManager().getManager());\r\n-\r\n-        // System.out.println(\"Verify that Manager(id=201).manager is not\r\n-        // available, as the recursion depth should have retrieved only the\r\n-        // Employee and its manager.\");\r\n-        // assertNull(emp.getManager().getManager().getManager());\r\n-\r\n-    }\r\n-\r\n-    public void testFetchGroup007() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"***********007 ==> test one fetch group attribute\r\n-        // is associated\"+\r\n-        // \"multiple fetch groups\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-\r\n-        String[] arr = { \"ManagerFetchGroup1A\" };\r\n-        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n-        // Examine Employee(id=1).address, data should be available\r\n-        // FGAddress addr = emp.getAddress();\r\n-        // System.out.println(\"Assert Employee(id=1).address is null \");\r\n-        assertNull(emp.getAddress());\r\n-        // Examine Employee(id=1).dept, data should NoTbe available\r\n-        // System.out.println(\"Assert Employee(id=1).dept is null\");\r\n-        assertNull(emp.getDept());\r\n-        // Examine Employee(id=1).manager, data should NOT be available.\r\n-        // FGManager mgr = emp.getManager();\r\n-\r\n-        // System.out.println(\"Assert manager is not null\");\r\n-        assertNotNull(emp.getManager());\r\n-        assertNotNull(emp.getManager().getId());\r\n-        assertNotNull(emp.getManager().getFirstName());\r\n-\r\n-        // Verify that Manager(id=101).manager is not available, as the\r\n-        // recursion depth should have retrieved only the Employee and its\r\n-        // manager.\r\n-        // System.out.println(\"Verify that Manager(id=101).manager is not\r\n-        // available, as the recursion depth should have retrieved only the\r\n-        // Employee and its manager.\");\r\n-        assertNull(emp.getManager().getManager());\r\n-\r\n-        // System.out.println(\"Verify that Manager(id=201).manager is not\r\n-        // available, as the recursion depth should have retrieved only the\r\n-        // Employee and its manager.\");\r\n-        // assertNull(emp.getManager().getManager().getManager());\r\n-\r\n-    }\r\n-\r\n-    public void testFetchGroup008() {\r\n-        // System.out.println(\"***********************************************\");\r\n-        // System.out.println(\"***********007 ==> test one fetch group attribute\r\n-        // is associated\"+\r\n-        // \"multiple fetch groups\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n-        OpenJPAEntityManager oem1 = OpenJPAPersistence.cast(em);\r\n-        Query q = oem1.createQuery(\"SELECT e FROM FGEmployee e WHERE e.id = 1\");\r\n-        OpenJPAQuery oq = (OpenJPAQuery) q;\r\n-        oem1.clear();\r\n-\r\n-        // use the default, address and description should be null\r\n-        FGEmployee emp = findEmployeeForQuery(oem, oq, 1, true, null, null);\r\n-        oem1.clear();\r\n-        assertNull(emp.getAddress());\r\n-        assertNull(emp.getDescription());\r\n-        assertNull(emp.getManager());\r\n-\r\n-        // add fetch fields to the fetch plan - address and description should\r\n-        // not be null\r\n-        String[] str = {\r\n-            \"org.apache.openjpa.persistence.fetchgroups.FGEmployee.description\",\r\n-            \"org.apache.openjpa.persistence.fetchgroups.FGEmployee.address\" };\r\n-        FGEmployee emp2 = findEmployeeForQuery(oem, oq, 1, true, str, null);\r\n-        oem1.clear();\r\n-        assertNotNull(emp2.getAddress());\r\n-        assertNotNull(emp2.getDescription());\r\n-        assertNull(emp2.getManager());\r\n-\r\n-        // remove fetch fields again - address and description should be null\r\n-        FGEmployee emp3 = findEmployeeForQuery(oem, oq, 1, false, null, str);\r\n-        oem1.clear();\r\n-        assertNull(emp3.getAddress());\r\n-        assertNull(emp3.getDescription());\r\n-        assertNull(emp3.getManager());\r\n-    }\r\n-\r\n-    private FGEmployee findEmployee(OpenJPAEntityManager oem, Object id,\r\n-            boolean reset, String[] fetchGroups) {\r\n-        oem.getTransaction().begin();\r\n-        // System.out.println(\"findEmployoee starts and check the fetchGroup\r\n-        // info:\");\r\n-        // int sz = oem.getFetchPlan().getFetchGroups().size();\r\n-        // String arr =\r\n-        // Arrays.toString(oem.getFetchPlan().getFetchGroups().toArray());\r\n-        // System.out.println(\"fetchGroup = \"+arr+ \" and fetch Group size\r\n-        // =\"+sz);\r\n-        // reset fetchGroup if necessary:\r\n-        if (reset) {\r\n-            oem.getFetchPlan().resetFetchGroups();\r\n-            // assertEquals(1, oem.getFetchPlan().getFetchGroups().size());\r\n-            // arr =\r\n-            // Arrays.toString(oem.getFetchPlan().getFetchGroups().toArray());\r\n-            // System.out.println(\"after resetFetchGroup, fetchGroup=\"+arr);\r\n-            // assertEquals(\"[default]\",arr);\r\n-        }\r\n-        if (fetchGroups != null) {\r\n-            // System.out.println(\"input fetchGroup = \"+fetchGroups);\r\n-            for (String fg : fetchGroups)\r\n-                oem.getFetchPlan().addFetchGroup(fg);\r\n-            // arr =\r\n-            // Arrays.toString(oem.getFetchPlan().getFetchGroups().toArray());\r\n-            // System.out.println(\"after addFetchGroup, fetchGroups = \"+arr);\r\n-        }\r\n-        // System.out.println(\"Finding Employee(id=1)...\");\r\n-        FGEmployee emp = oem.find(FGEmployee.class, id);\r\n-        // System.out.println(\"Employee found =\"+emp);\r\n-        oem.getTransaction().commit();\r\n-        // oem.clear();\r\n-        oem.close();\r\n-        return emp;\r\n-\r\n-    }\r\n-\r\n-    private static FGEmployee findEmployeeForQuery(OpenJPAEntityManager oem,\r\n-            OpenJPAQuery oq, Object id, boolean reset, String[] fetchGroups,\r\n-            String[] removes) {\r\n-        oem.getTransaction().begin();\r\n-        // reset fetchGroup if necessary:\r\n-        if (reset) {\r\n-            oem.getFetchPlan().resetFetchGroups();\r\n-            oq.getFetchPlan().resetFetchGroups();\r\n-        }\r\n-        if (fetchGroups != null) {\r\n-            for (String fg : fetchGroups)\r\n-                oq.getFetchPlan().addField(fg);\r\n-            // arr =\r\n-            // Arrays.toString(oq.getFetchPlan().getFetchGroups().toArray());\r\n-            // arr = Arrays.toString(oq.getFetchPlan().getFields().toArray());\r\n-            // System.out.println(\"after addFetchfields, fetch fields = \"+arr);\r\n-        }\r\n-        if (removes != null) {\r\n-            oq.getFetchPlan().removeFields(removes);\r\n-            // arr = Arrays.toString(oq.getFetchPlan().getFields().toArray());\r\n-            // System.out.println(\"after removeFetchGroup, fetch fields =\r\n-            // \"+arr);\r\n-        }\r\n-        // System.out.println(\"Finding Employee(id=1)...\");\r\n-        FGEmployee emp = (FGEmployee) oq.getSingleResult();\r\n-        oem.getTransaction().commit();\r\n-        oem.clear();\r\n-        // oem.close();\r\n-        return emp;\r\n-\r\n-    }\r\n-\r\n-    private static void cleanDatabase(EntityManager em) {\r\n-        // Clean out the database\r\n-        em.clear();\r\n-\r\n-        String entityNames[] = { \"FGEmployee\", \"FGAddress\", \"FGDepartment\" };\r\n-\r\n-        // System.out.println(\"Cleaning database.\");\r\n-        try {\r\n-            // System.out.println(\"Starting transaction...\");\r\n-            em.getTransaction().begin();\r\n-            // if (persistenceContextType == PERSISTENCECONTEXTTYPE_APPMGD)\r\n-            // em.joinTransaction();\r\n-\r\n-            for (int index = 0; index < entityNames.length; index++) {\r\n-                String query = \"SELECT a FROM \" + entityNames[index] + \" a\";\r\n-                List entityAList = em.createQuery(query).getResultList();\r\n-\r\n-                // Nothing returned, go to the next entity\r\n-                if (entityAList.size() == 0)\r\n-                    continue;\r\n-\r\n-                // System.out.println(\"Removing \" + entityNames[index] + \" data\r\n-                // from the database...\");\r\n-\r\n-                Iterator i = entityAList.iterator();\r\n-                while (i.hasNext()) {\r\n-                    Object entity = i.next();\r\n-                    // System.out.println(\"Removing entity \" + entity.toString()\r\n-                    // + \" ...\");\r\n-                    em.remove(entity);\r\n-                }\r\n-            }\r\n-\r\n-            // System.out.println(\"Committing transaction...\");\r\n-            em.getTransaction().commit();\r\n-        } catch (Throwable t) {\r\n-            System.out.println(\"Caught exception during db cleanup\" + t);\r\n-        } finally {\r\n-            try {\r\n-                if (em.getTransaction().isActive())\r\n-                    em.getTransaction().rollback();\r\n-            } catch (Throwable t) {\r\n-                System.out\r\n-                        .println(\"Caught exception transaction rollback in db cleanup failure recovery\"\r\n-                                + t);\r\n-                // throw t;\r\n-            }\r\n-        }\r\n-\r\n-        // System.out.println(\"Done cleaning database.\");\r\n-    }\r\n-\r\n-    private static boolean initializeDatabase(EntityManager em) {\r\n-        // Clean the database first\r\n-        cleanDatabase(em);\r\n-\r\n-        // System.out.println(\"Creating entities...\");\r\n-        boolean errors = false;\r\n-        try {\r\n-            // Persist all entities to the database\r\n-            // System.out.println(\"Starting transaction...\");\r\n-            em.getTransaction().begin();\r\n-            // if (persistenceContextType == PERSISTENCECONTEXTTYPE_APPMGD)\r\n-            // em.joinTransaction();\r\n-\r\n-            // Addreesses\r\n-            FGAddress[] addresses = new FGAddress[11];\r\n-            addresses[0] = new FGAddress(1, \"1010 29th Ave NW\", \"Rochester\",\r\n-                    \"MN\", 55901);\r\n-            addresses[1] = new FGAddress(2, \"2020 29th Ave NW\", \"Rochester\",\r\n-                    \"MN\", 55901);\r\n-            addresses[2] = new FGAddress(3, \"5000 Pilot Knob\", \"Rochester\",\r\n-                    \"MN\", 55902);\r\n-            addresses[3] = new FGAddress(4, \"8192 Galaxie Avenue\",\r\n-                    \"Apple Valley\", \"MN\", 55209);\r\n-            addresses[4] = new FGAddress(5, \"9100 Knight Drive\", \"Fargo\", \"ND\",\r\n-                    58202);\r\n-            addresses[5] = new FGAddress(6, \"312 Sioux Lane\", \"Bismarck\", \"ND\",\r\n-                    58102);\r\n-            addresses[6] = new FGAddress(7, \"5124 Grinch Circle\", \"Mason City\",\r\n-                    \"IA\", 24241);\r\n-            addresses[7] = new FGAddress(8, \"1201 Citrus Lane\", \"Raleigh\",\r\n-                    \"NC\", 12345);\r\n-            addresses[8] = new FGAddress(9, \"1501 Lemon Lane\", \"Raleigh\", \"NC\",\r\n-                    12345);\r\n-            addresses[9] = new FGAddress(10, \"2903 Orange Drive\", \"Raleigh\",\r\n-                    \"NC\", 12345);\r\n-            addresses[10] = new FGAddress(11, \"1511 Kiwi Circle\", \"Raleigh\",\r\n-                    \"NC\", 12345);\r\n-\r\n-            // System.out.println(\"Persisting Address entities...\");\r\n-            for (int index = 0; index < addresses.length; index++) {\r\n-                em.persist(addresses[index]);\r\n-            }\r\n-\r\n-            // Departments\r\n-            FGDepartment[] departments = new FGDepartment[7];\r\n-            for (int index = 0; index < 7; index++) {\r\n-                departments[index] = new FGDepartment(index + 1, \"Department \"\r\n-                        + (index + 1));\r\n-            }\r\n-\r\n-            // System.out.println(\"Persisting Department entities...\");\r\n-            for (int index = 0; index < departments.length; index++) {\r\n-                em.persist(departments[index]);\r\n-            }\r\n-\r\n-            // Managers\r\n-            Collection<FGEmployee> emptyCollection = new ArrayList<FGEmployee>();\r\n-            FGManager[] managers = new FGManager[6];\r\n-            managers[0] = new FGManager(301, \"Elric\", \"Scotch\",\r\n-                    \"Description MMM1\", departments[6], addresses[10],\r\n-                    (FGManager) null, \"Good\", emptyCollection, \"MData301\");\r\n-            managers[1] = new FGManager(202, \"Cedric\", \"Clue\",\r\n-                    \"Description MM2\", departments[5], addresses[9],\r\n-                    managers[0], \"Good\", emptyCollection, \"MData202\");\r\n-            managers[2] = new FGManager(201, \"Bill\", \"Editor\",\r\n-                    \"Description MM1\", departments[5], addresses[8],\r\n-                    managers[0], \"Good\", emptyCollection, \"MData201\");\r\n-            managers[3] = new FGManager(103, \"Sue\", \"Taylor\", \"Description M3\",\r\n-                    departments[4], addresses[8], managers[1], \"Good\",\r\n-                    emptyCollection, \"MData103\");\r\n-            managers[4] = new FGManager(102, \"Alfred\", \"Newmann\",\r\n-                    \"Description M2\", departments[3], addresses[7],\r\n-                    managers[2], \"Good\", emptyCollection, \"MData102\");\r\n-            managers[5] = new FGManager(101, \"Jim\", \"Mitternacht\",\r\n-                    \"Description M1\", departments[3], addresses[6],\r\n-                    managers[2], \"Good\", emptyCollection, \"MData101\");\r\n-\r\n-            // System.out.println(\"Persisting Manager entities...\");\r\n-            for (int index = 0; index < managers.length; index++) {\r\n-                em.persist(managers[index]);\r\n-            }\r\n-\r\n-            // Employees\r\n-            FGEmployee[] employees = new FGEmployee[8];\r\n-            employees[0] = new FGEmployee(1, \"John\", \"Doe\", \"Description 1\",\r\n-                    departments[0], addresses[0], managers[5], \"Good\");\r\n-            employees[1] = new FGEmployee(2, \"Jane\", \"Doe\", \"Description 2\",\r\n-                    departments[0], addresses[0], managers[5], \"Good\");\r\n-            employees[2] = new FGEmployee(3, \"Steve\", \"Martin\",\r\n-                    \"Description 3\", departments[0], addresses[1], managers[5],\r\n-                    \"Good\");\r\n-            employees[3] = new FGEmployee(4, \"Mark\", \"Scrabble\",\r\n-                    \"Description 4\", departments[1], addresses[2], managers[4],\r\n-                    \"Good\");\r\n-            employees[4] = new FGEmployee(5, \"Stacy\", \"Life\", \"Description 5\",\r\n-                    departments[1], addresses[3], managers[4], \"Good\");\r\n-            employees[5] = new FGEmployee(6, \"Alx\", \"Indigo\", \"Description 6\",\r\n-                    departments[2], addresses[5], managers[3], \"Good\");\r\n-            employees[6] = new FGEmployee(7, \"John\", \"Einstein\",\r\n-                    \"Description 7\", departments[2], addresses[5], managers[3],\r\n-                    \"Good\");\r\n-            employees[7] = new FGEmployee(8, \"Max\", \"Headroom\",\r\n-                    \"Description 7\", departments[5], addresses[3], managers[2],\r\n-                    \"Good\");\r\n-\r\n-            // System.out.println(\"Persisting Employee entities...\");\r\n-            for (int index = 0; index < employees.length; index++) {\r\n-                em.persist(employees[index]);\r\n-            }\r\n-\r\n-            // System.out.println(\"Committing transaction...\");\r\n-            em.getTransaction().commit();\r\n-        } catch (Throwable t) {\r\n-            // System.out.println(\"Caught exception during db populating\"+ t);\r\n-            errors = true;\r\n-        } finally {\r\n-            try {\r\n-                if (em.getTransaction().isActive())\r\n-                    em.getTransaction().rollback();\r\n-            } catch (Throwable t) {\r\n-                // System.out.println(\"Caught exception transaction rollback in\r\n-                // db population failure recovery\"+ t);\r\n-            }\r\n-        }\r\n-\r\n-        return errors;\r\n-    }\r\n-\r\n-} // end of TestFetchGroup\r"},{"sha":"50bf3b6716440dc5cfac5b1221ed805e371e2b30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+@Entity\r\n+public class SQLBigDecimalIdEntity {\r\n+\r\n+    @Id\r\n+    private BigDecimal id;\r\n+    private int data;\r\n+\r\n+    public BigDecimal getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(BigDecimal id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getData() {\r\n+        return data;\r\n+    }\r\n+\r\n+    public void setData(int data) {\r\n+        this.data = data;\r\n+    }\r\n+}\r"},{"sha":"2f107fbcc1d723da58cffdc42695da43d12ca866","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigInteger;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+@Entity\r\n+public class SQLBigIntegerIdEntity {\r\n+\r\n+    @Id\r\n+    private BigInteger id;\r\n+    private int data;\r\n+\r\n+    public BigInteger getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(BigInteger id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getData() {\r\n+        return data;\r\n+    }\r\n+\r\n+    public void setData(int data) {\r\n+        this.data = data;\r\n+    }\r\n+}\r"},{"sha":"ab378a7eb454a5e62e813e4ced237f6b3fa4bb10","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+public class TestSQLBigDecimalId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SQLBigDecimalIdEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\r\n+        BigDecimal decimal = new BigDecimal(time);\r\n+\r\n+        SQLBigDecimalIdEntity e = new SQLBigDecimalIdEntity();\r\n+        e.setId(decimal);\r\n+        e.setData(1);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(time, e.getId().longValue());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(SQLBigDecimalIdEntity.class, decimal);\r\n+        assertEquals(1, e.getData());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(SQLBigDecimalIdEntity.class);\r\n+    }\r\n+}\r"},{"sha":"5d62bf1e8e6b27a7ef74ce0bc5f0727a199cb62b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+public class TestSQLBigIntegerId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SQLBigIntegerIdEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\r\n+        BigInteger integer = new BigDecimal(time).toBigInteger();\r\n+\r\n+        SQLBigIntegerIdEntity e = new SQLBigIntegerIdEntity();\r\n+        e.setId(integer);\r\n+        e.setData(1);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(time, e.getId().longValue());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(SQLBigIntegerIdEntity.class, integer);\r\n+        assertEquals(1, e.getData());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(SQLBigIntegerIdEntity.class);\r\n+    }\r\n+}\r"},{"sha":"faa367e7aca575dbe33276637f1cd5c0e37c8fcf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lifecycle;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.relations.BidiChild;\n+import org.apache.openjpa.persistence.relations.BidiParent;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestMergeAndPersistWithManagedRelation\n+    extends SingleEMTestCase {\n+\n+    private long childId;\n+\n+    public void setUp() {\n+        setUp(BidiParent.class, BidiChild.class, CLEAR_TABLES);\n+\n+        BidiChild child = new BidiChild();\n+        child.setName(\"child\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(child);\n+        em.getTransaction().commit();\n+        childId = child.getId();\n+        em.close();\n+    }\n+\n+    public void testPersistWithManagedRelation() {\n+        BidiParent parent = new BidiParent();\n+        BidiChild child = em.find(BidiChild.class, childId);\n+        parent.setOneToOneChild(child);\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(BidiParent.class, id);\n+        assertNotNull(parent);\n+    }\n+\n+    public void testMergeWithManagedRelation() {\n+        BidiParent parent = new BidiParent();\n+        BidiChild child = em.find(BidiChild.class, childId);\n+        parent.setOneToOneChild(child);\n+        em.getTransaction().begin();\n+        parent = em.merge(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(BidiParent.class, id);\n+        assertNotNull(parent);\n+    }\n+}"},{"sha":"2f8bcb5625f7d20fffb0e17d8ec2a2b5ea39b20e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\r\n+\r\n+public class TestDistinctQueries extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Address.class, Company.class, Customer.class, Employee.class,\r\n+            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\r\n+            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\r\n+\r\n+        ProductOrder order = new ProductOrder();\r\n+        LineItem item0 = new LineItem();\r\n+        LineItem item1 = new LineItem();\r\n+        LineItem item2 = new LineItem();\r\n+        order.getItems().add(item0);\r\n+        order.getItems().add(item1);\r\n+        order.getItems().add(item2);\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(order);\r\n+        em.persist(item0);\r\n+        em.persist(item1);\r\n+        em.persist(item2);\r\n+        em.getTransaction().commit();\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\r\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n+            \"left join fetch o.items\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctJoinQuery() {\r\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testNoDuplicateResultsInDistinctQuery() {\r\n+        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(1, l.size());\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\r\n+        List l = em.createQuery(\"select new \" +\r\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n+            \"o.id) from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testNoDuplicateResultsInDistinctConstructorQuery()\r\n+        throws NoSuchMethodException {\r\n+        List l = em.createQuery(\"select distinct new \" +\r\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n+            \"o.id) from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(1, l.size());\r\n+    }\r\n+\r\n+    public static class Holder {\r\n+        public Holder(long id) {\r\n+            // we don't actually do anything with the returned data\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"654647ced349ed849e389d104769a88cdd37979f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","status":"modified","additions":28,"deletions":5,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -18,19 +18,23 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.util.List;\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n /**\n  * Test that query pagination works properly.\n  */\n public class TestQueryPagination\n-    extends SingleEMFTestCase {\n+    extends SQLListenerTestCase {\n \n     public void setUp() {\n-        setUp(SimpleEntity.class, CLEAR_TABLES);\n+        setUp(SimpleEntity.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -70,12 +74,31 @@ public void testAllResultsFirstLast() {\n \n     private void helper(boolean firstFirst, int first, int max, int expected) {\n         EntityManager em = emf.createEntityManager();\n-        Query q = em.createQuery(\"select e from simple e\");\n+        Query q = em.createQuery(\"select e from simple e order by e.value\");\n+        sql.clear();\n+        List<SimpleEntity> fullList = q.getResultList();\n         if (firstFirst)\n             q.setFirstResult(first).setMaxResults(max);\n         else\n             q.setMaxResults(max).setFirstResult(first);\n-        assertEquals(expected, q.getResultList().size());\n+        List<SimpleEntity> list = q.getResultList();\n+        checkSQL();\n+        assertEquals(expected, list.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            assertEquals(\"bar\" + (first + i), list.get(i).getValue());\n+        }\n         em.close();\n     }\n+\n+    private void checkSQL() {\n+        assertEquals(2, sql.size());\n+        String noRange = this.sql.get(0);\n+        String withRange = this.sql.get(1);\n+        DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (dict.supportsSelectStartIndex || dict.supportsSelectEndIndex)\n+            assertFalse(noRange.equals(withRange));\n+        else\n+            assertEquals(noRange, withRange);\n+    }\n }\n\\ No newline at end of file"},{"sha":"c5559892901183a086f8a096723481ac35a72eb4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class Person {\n+    private int id;\n+    private String forename;\n+    private String surname;\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getForename() {\n+        return forename;\n+    }\n+\n+    public void setForename(String forename) {\n+        this.forename = forename;\n+    }\n+\n+    public String getSurname() {\n+        return surname;\n+    }\n+\n+    public void setSurname(String surname) {\n+        this.surname = surname;\n+    }\n+}"},{"sha":"88fd5a71e7d745e3dd8c317bc1a03e9888602284","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","status":"modified","additions":39,"deletions":1,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.openjpa.persistence.simple;\r\n \r\n+import javax.persistence.EntityManager;\r\n+\r\n import junit.textui.TestRunner;\r\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n \r\n@@ -30,7 +32,7 @@\n     extends SingleEMTestCase {\r\n \r\n     public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n+        setUp(AllFieldTypes.class, Person.class);\r\n     }\r\n \r\n     public void testMerge() {\r\n@@ -70,6 +72,42 @@ public void testMerge() {\n   \r\n     }\r\n     \r\n+    /**\r\n+     * This test verifies that persisting a new entity which matches an existing \r\n+     * row in the database succeeds. \r\n+     */\r\n+    public void testMergeExistingEntity() {\r\n+        Person p = new Person();\r\n+        p.setId(102);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(p);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        p = new Person();\r\n+        p.setId(102);\r\n+        p.setForename(\"Jane\");\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.merge(p);\r\n+        em.getTransaction().commit();\r\n+\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        p = (Person) em.createQuery(\"Select p from Person p where p.id = 102\")\r\n+                .getSingleResult();\r\n+\r\n+        assertNotNull(p);\r\n+        assertEquals(\"Jane\", p.getForename());\r\n+        \r\n+        em.close();\r\n+    }\r\n+    \r\n     public static void main(String[] args) {\r\n         TestRunner.run(TestEntityManagerMerge.class);\r\n     }\r"},{"sha":"9b1cff7e4b4fa8d44108135d19b3934aef3a3dc4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":26,"deletions":2,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.Persistence;\n \n import junit.framework.TestCase;\n+import junit.framework.TestResult;\n import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -47,6 +48,11 @@\n      */\n     protected static final Object CLEAR_TABLES = new Object();\n \n+    /**\n+     * The {@link TestResult} instance for the current test run.\n+     */\n+    protected TestResult testResult;\n+\n     /**\n      * Create an entity manager factory. Put {@link #CLEAR_TABLES} in\n      * this list to tell the test framework to delete all table contents\n@@ -85,11 +91,29 @@ protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\n         }\n \n         return (OpenJPAEntityManagerFactorySPI) Persistence.\n-            createEntityManagerFactory(\"test\", map);\n+            createEntityManagerFactory(getPersistenceUnitName(), map);\n+    }\n+\n+    protected String getPersistenceUnitName() {\n+        return \"test\";\n+    }\n+\n+    @Override\n+    public void run(TestResult testResult) {\n+        this.testResult = testResult;\n+        super.run(testResult);\n     }\n \n+    @Override\n     public void tearDown() throws Exception {\n-        super.tearDown();\n+        try {\n+            super.tearDown();\n+        } catch (Exception e) {\n+            // if a test failed, swallow any exceptions that happen\n+            // during tear-down, as these just mask the original problem.\n+            if (testResult.wasSuccessful())\n+                throw e;\n+        }\n     }\n \n     /**"},{"sha":"60c4394904e589717f60d1d7800f3348d0c800e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -58,6 +58,11 @@ public void tearDown() throws Exception {\n \n         try {\n             clear(emf);\n+        } catch (Exception e) {\n+            // if a test failed, swallow any exceptions that happen\n+            // during tear-down, as these just mask the original problem.\n+            if (testResult.wasSuccessful())\n+                throw e;\n         } finally {\n             closeEMF(emf);\n         }"},{"sha":"475736ebba149edbc8cc8a9176ca86e41f79e112","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+\r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.\r\n+-->\r\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n+    version=\"1.0\">\r\n+    <package>org.apache.openjpa.persistence.callbacks</package>\r\n+    <entity class=\"EntityListenerEntity\">\r\n+        <exclude-default-listeners>true</exclude-default-listeners>\r\n+    </entity>\r\n+    <persistence-unit-metadata>\r\n+        <persistence-unit-defaults>\r\n+            <entity-listeners>\r\n+                <entity-listener class=\"ListenerImpl\">\r\n+                </entity-listener>\r\n+            </entity-listeners>\r\n+        </persistence-unit-defaults>\r\n+    </persistence-unit-metadata>\r\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"795d6ef960471a6d33bc58d5882320030c710cc5","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -63,4 +63,14 @@\n                 value=\"DriverClassName=not.a.real.Driver,Url=jdbc:notreal://\"/>\n         </properties>\n     </persistence-unit>\n+\n+    <persistence-unit name=\"listener-pu\">\n+        <mapping-file>META-INF/listener-orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                  value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n </persistence>"},{"sha":"7b30d0b31c5d64c68c2adcf1f7855a5286e412f5","filename":"openjpa-persistence/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"f03f2081791cd6413a92330ac6ef4b9c72728503","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.openjpa.persistence;\r\n \r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Iterator;\r\n@@ -27,6 +29,8 @@\n import org.apache.openjpa.kernel.Broker;\r\n import org.apache.openjpa.kernel.BrokerFactory;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.BigDecimalId;\r\n+import org.apache.openjpa.util.BigIntegerId;\r\n import org.apache.openjpa.util.ByteId;\r\n import org.apache.openjpa.util.CharId;\r\n import org.apache.openjpa.util.DoubleId;\r\n@@ -231,6 +235,10 @@ public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n             return new ShortId(cls, (Short) oid);\r\n         if (oid instanceof String)\r\n             return new StringId(cls, (String) oid);\r\n+        if (oid instanceof BigDecimal)\r\n+            return new BigDecimalId(cls, (BigDecimal) oid);\r\n+        if (oid instanceof BigInteger)\r\n+            return new BigIntegerId(cls, (BigInteger) oid);\r\n         return new ObjectId(cls, oid);\r\n     }\r\n \r\n@@ -301,7 +309,11 @@ public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n         if (oidClass == ShortId.class)\r\n             return Short.class;\r\n         if (oidClass == StringId.class)\r\n-\t\t\treturn String.class;\r\n-\t\treturn oidClass;\r\n+            return String.class;\r\n+        if (oidClass == BigDecimalId.class)\r\n+            return BigDecimal.class;\r\n+        if (oidClass == BigIntegerId.class)\r\n+            return BigInteger.class;\r\n+        return oidClass;\r\n \t}\r\n }\r"},{"sha":"6eb378d9f75b5c8c1f1cc18e66b5a6953c8feb8f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -47,15 +47,15 @@\n             case PRE_PERSIST:\n                 return new int[]{ LifecycleEvent.BEFORE_PERSIST };\n             case POST_PERSIST:\n-                return new int[]{ LifecycleEvent.AFTER_PERSIST };\n+                return new int[]{ LifecycleEvent.AFTER_PERSIST_PERFORMED };\n             case PRE_REMOVE:\n                 return new int[]{ LifecycleEvent.BEFORE_DELETE };\n             case POST_REMOVE:\n-                return new int[]{ LifecycleEvent.AFTER_DELETE };\n+                return new int[]{ LifecycleEvent.AFTER_DELETE_PERFORMED };\n             case PRE_UPDATE:\n-                return new int[]{ LifecycleEvent.BEFORE_STORE };\n+                return new int[]{ LifecycleEvent.BEFORE_UPDATE };\n             case POST_UPDATE:\n-                return new int[]{ LifecycleEvent.AFTER_STORE };\n+                return new int[]{ LifecycleEvent.AFTER_UPDATE_PERFORMED };\n             case POST_LOAD:\n                 return new int[]{ LifecycleEvent.AFTER_LOAD,\n                     LifecycleEvent.AFTER_REFRESH };"},{"sha":"ffeeb93c27ebfe8dcc540ae012b9aacb65d4688b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -27,13 +27,16 @@\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.event.LoadListener;\n import org.apache.openjpa.event.PersistListener;\n-import org.apache.openjpa.event.StoreListener;\n+import org.apache.openjpa.event.PostPersistListener;\n+import org.apache.openjpa.event.UpdateListener;\n+import org.apache.openjpa.event.PostDeleteListener;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.CallbackException;\n \n class PersistenceListenerAdapter\n     implements LifecycleEventManager.ListenerAdapter, PersistListener,\n-    LoadListener, StoreListener, DeleteListener {\n+    PostPersistListener, LoadListener, UpdateListener, DeleteListener,\n+    PostDeleteListener {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (PersistenceListenerAdapter.class);\n@@ -83,6 +86,10 @@ public void beforePersist(LifecycleEvent event) {\n     }\n \n     public void afterPersist(LifecycleEvent event) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void afterPersistPerformed(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n@@ -94,11 +101,11 @@ public void afterRefresh(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n-    public void beforeStore(LifecycleEvent event) {\n+    public void beforeUpdate(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n-    public void afterStore(LifecycleEvent event) {\n+    public void afterUpdatePerformed(LifecycleEvent event) {\n         makeCallback(event);\n     }\n \n@@ -107,6 +114,10 @@ public void beforeDelete(LifecycleEvent event) {\n     }\n \n     public void afterDelete(LifecycleEvent event) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void afterDeletePerformed(LifecycleEvent event) {\n         makeCallback(event);\n     }\n }"},{"sha":"9b6afd5aeec6da8c4bce60b67c929ddd73d0d2f2","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":176,"deletions":88,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -13,10 +13,10 @@\n \n Overview\n \n-   These notes describe the difference between OpenJPA release 1.0.0 and the\n-   preceding releases, 0.9.6 and 0.9.7. 1.0.0 is the first major release\n-   since OpenJPA graduated to an Apache top level project (TLP), and contains\n-   many new features and bugfixes.\n+   These notes describe the difference between OpenJPA release 1.0.2 and the\n+   preceding releases. 1.0 is the first major release since OpenJPA graduated \n+   to an Apache top level project (TLP), and contains many new features and \n+   bugfixes.\n \n    OpenJPA is a feature-rich implementation of the persistence part of Java\n    Community Process JSR-220 (Enterprise JavaBeans 3.0), which is known as\n@@ -83,6 +83,178 @@ Getting Involved\n        freenode.net.\n      * Bugs and other issues can be posted on the project JIRA.\n \n+                          OpenJPA 1.0.2 Release Notes\n+\n+Bugs\n+\n+       * [OPENJPA-135] - join fetch not returning duplicate references which not conforming to ejb3.0 spec\n+       * [OPENJPA-211] - CLONE -java.lang.VerifyError on websphere 6.1 with Spring 2.0.3 and OpenJpa 0.96/0.97\n+       * [OPENJPA-251] - org.apache.openjpa.enhance.Reflection.getDeclaredMethod() has undefined behavior, leading to VM-dependent crashes\n+       * [OPENJPA-258] - MetaDataInheritanceComparator is not transitive; C > B > A > C leads to out-of-memory crash in PCEnhancer\n+       * [OPENJPA-322] - Timezone on the Calendar object lost in proxying\n+       * [OPENJPA-329] - Generic interface may cause the openjpa Reflection code to pickup the wrong getter method\n+       * [OPENJPA-331] - Allow BigInteger and other Basic types as Primary Keys\n+       * [OPENJPA-366] - InternalException thrown in BrokerImpl.endOperation\n+       * [OPENJPA-367] - PCEnhancer does not find meta data for entities using pure XML annotation\n+       * [OPENJPA-370] - LoadFetchGroup annotation was not recognized during the fetch1\n+       * [OPENJPA-401] - UnsatisfiedLinkError in MappingToolTask when using DB2 JDBC driver\n+       * [OPENJPA-419] - Merging graphs that include managed instances fails\n+       * [OPENJPA-420] - JPQL constructor query close the <SELECT DISTINCT> feature?\n+       * [OPENJPA-437] - EntityManagerFactory is not thread-safe\n+       * [OPENJPA-446] - Problem when setting String fields of detached objects\n+       * [OPENJPA-447] - Query pagination broken for non-DB2 databases\n+       * [OPENJPA-452] - Error in the XML equivalent in the \"secondary table field mapping\" example\n+       * [OPENJPA-471] - iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.IDENTITY)\n+       * [OPENJPA-472] - iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.SEQUENCE ...)\n+       * [OPENJPA-476] - Query.setFirstResult and Query.setMaxResults don't take effect\n+       * [OPENJPA-506] - PreRemove method callback is never called; PreUpdate is always called\n+       * [OPENJPA-508] - JPQL EXISTS clauses do not handle subclasses properly\n+       * [OPENJPA-511] - Unable to execute native queries which start with the WITH keyword.\n+\n+                          OpenJPA 1.0.1 Release Notes\n+\n+Bugs Fixed\n+\n+       * [OPENJPA-113] - when you specify columm table=\"empbean\" in the xml file entity id or basic type when empbean is the default table name, the mapping tool generates extra foreign key field (eg.EmpBean_empid) in the table produced.\n+       * [OPENJPA-282] - Postgresql does not support deferred unique constraints.\n+       * [OPENJPA-295] - ArrayIndexOutofBoundsException when under load and within a managed Transaction\n+       * [OPENJPA-326] - NPE if a discriminator column is specified without discriminator type in orm.xml\n+       * [OPENJPA-335] - Logic in getters for entities with property access causes the PCEnhancer to hang\n+       * [OPENJPA-339] - Java 2 security Access denied in File.toURL() call\n+       * [OPENJPA-343] - Do not call setRollbackOnly on inactive Transactions\n+       * [OPENJPA-346] - PCEnhancerAgent backwards-compatibility setting overly-enables enhancement\n+       * [OPENJPA-347] - Performance Issue with Lazy Loaded Foreign Keys\n+       * [OPENJPA-353] - Character discriminators are not converted correctly if storeCharsAsNumbers = true\n+       * [OPENJPA-355] - OpenJPA Log4J factory incorrectly handles logging level\n+       * [OPENJPA-356] - DB2 requires CASTs when parameters appear in SELECT clause\n+       * [OPENJPA-357] - Use case where FetchGroup A includes FecthGroup B is not honoured by fetch operations\n+       * [OPENJPA-358] - Recursion Depth for Field f should be calculated w.r.t active fetch groups and not all fetch groups\n+       * [OPENJPA-360] - SQL FOR UPDATE OF incorrectly generated for DB2/NT SQL0816\n+       * [OPENJPA-361] - Incorrect GREG_OFFSET offset or inconsistent usage in UUIDGenerator\n+       * [OPENJPA-367] - PCEnhancer does not find meta data for entities using pure XML annotation\n+       * [OPENJPA-368] - Multithreaded client fails randomly on EntityManager.persist() with out transaction context.\n+       * [OPENJPA-369] - AccessDeclaredMembers RuntimePermission requires by Solaris JDK with security enabled\n+       * [OPENJPA-372] - PCEnhancer throws away its classloader\n+       * [OPENJPA-375] - DB2 autoCommit(true) causes Result Set prematurely closed in WebContainer JEE environment.\n+       * [OPENJPA-378] - DB2 SQL incorrectly generating \"FETCH FIRST n ROWS ONLY\" in subselects\n+       * [OPENJPA-380] - Connecting to database when an unused emf is closed\n+       * [OPENJPA-382] - Overriding column names for Byte[] attributes causes exception.\n+       * [OPENJPA-385] - IndexOutOfBounds exception when parsing \".class\" files\n+       * [OPENJPA-387] - Getting \"java.lang.ClassNotFoundException\" when loading datacache plug-in which is a class outside of OpenJPA package.\n+       * [OPENJPA-388] - MappingToolTask can't find persistence meta data.\n+       * [OPENJPA-389] - em.getTransaction().commit() is not issuing database commit for NativeQuery requesting updates\n+       * [OPENJPA-394] - DB2 CAST VARCHAR type missing LENGTH\n+       * [OPENJPA-395] - Accessing short Foreign Key metadata fields as ints causes problems on iSeries\n+       * [OPENJPA-396] - Cloning Calendar proxies doesn't detach from StateManager\n+       * [OPENJPA-397] - schematool ant task always requires files\n+       * [OPENJPA-399] - openjpa did not handle multiple schema names with same table name\n+       * [OPENJPA-401] - UnsatisfiedLinkError in MappingToolTask when using DB2 JDBC driver\n+       * [OPENJPA-402] - Unable to detect an valid Entity's meta data when the entity's .class file size is large.\n+       * [OPENJPA-403] - LoadFetchGroup patch (OPENJPA-370) introduces NPE\n+       * [OPENJPA-405] - need extract space in the message text\n+       * [OPENJPA-409] - Quick message updates\n+       * [OPENJPA-410] - Change \"connecting to dictionary\" message from Info to Trace\n+       * [OPENJPA-413] - Fix some message text in the localizer.properties files\n+       * [OPENJPA-415] - Garbage collection of AbstractResultList instance closes active connection\n+       * [OPENJPA-416] - Unclear exception if an unknown external value is used\n+       * [OPENJPA-421] - OpenJPA generates bad SQL before configuration fully populated\n+       * [OPENJPA-422] - Calendar objects contained in a detached Entity still have a \"live\" StateManagerImpl\n+       * [OPENJPA-423] - Deadlock victim exception getting sequence value with SQLServer\n+\n+Improvements\n+\n+       * [OPENJPA-338] - Remove unnecessary CAST in SQL statement for DB2\n+\n+Sub-tasks\n+\n+       * [OPENJPA-408] - Improve error processing for openjpa.RuntimeUnenhancedClasses property settings\n+\n+\n+                          OpenJPA 1.0.0 Release Notes\n+\n+Bugs fixed\n+\n+       * [OPENJPA-61] - Missing usage of TransactionSynchronizationRegistry\n+       * [OPENJPA-86] - \"uuid-hex\" generator does not make affect in orm.xml\n+       * [OPENJPA-143] - Problems with Single Table Inheritance Strategy (and\n+         Discriminator Type of Integer)\n+       * [OPENJPA-165] - QueryImpl.setFirstResult does not take already set\n+         maxResults into account\n+       * [OPENJPA-177] - When using NOT NULL constraint on foreign key it is\n+         not possible to use CascadeType.ALL and GeneratedId\n+       * [OPENJPA-199] - bulk update gets parsing exception trying to update\n+         an attribute of an embedded class\n+       * [OPENJPA-244] - Java 2 Security enablement\n+       * [OPENJPA-248] - ForeignKey cascade delete action not working\n+       * [OPENJPA-257] - Getter/Setter type inconsistency in Entity IdClass\n+       * [OPENJPA-269] - Informix doesn't support subselects or using table\n+         aliases in a delete statement.\n+       * [OPENJPA-271] - DB2 missing JDBC driver 2 support\n+       * [OPENJPA-272] - @GenerateValue (AUTO) doesn't work with Property\n+         level access\n+       * [OPENJPA-274] - JPQL queries cannot access version fields, including\n+         bulk updates\n+       * [OPENJPA-278] - OpenJPAQuery.getDataStoreActions() returns an empty\n+         String array\n+       * [OPENJPA-280] - Enhancement failure for inherited fields introduced\n+         with change 532137\n+       * [OPENJPA-281] - EAGER not the default fetch type without the @Basic\n+         annotation\n+       * [OPENJPA-284] - TableJDBCSeq for GeneratedValue.TABLE did not handle\n+         initialValue correctly\n+       * [OPENJPA-285] - Multiple deploy/undeploy leaks memory in PCRegistry\n+       * [OPENJPA-287] - Generated methods on superclasses are not visible to\n+         subclasses\n+       * [OPENJPA-294] - Exception while enchnancing the java classes using\n+         OpenJPA PCEnhancerTask with build.xml\n+       * [OPENJPA-296] - UUID algorithm generating non-unique values\n+         sometimes\n+       * [OPENJPA-304] - Problems with DepthFirstAnalysis and the IBM JDK\n+       * [OPENJPA-308] - Postgres: bytea vs. oid handling in\n+         PreparedStatement.setNull() calls\n+       * [OPENJPA-311] - Problem loading classes with OSGi classloaders\n+       * [OPENJPA-312] - derby fails with duplicate primary key(s) in group\n+         by list\n+       * [OPENJPA-313] - list of objects returned by query partially correct\n+       * [OPENJPA-314] - Unenhanced complex id in MappedSuperclass causes NPE\n+       * [OPENJPA-315] - Unenhanced generated id field of a primitive wrapper\n+         type causes NPE\n+       * [OPENJPA-320] - Do not use System Tables (SYS*) with DB2\n+       * [OPENJPA-321] - DB2 ABS Casting problem\n+       * [OPENJPA-322] - Timezone on the Calendar object lost in proxying\n+       * [OPENJPA-323] - Cleanup some message text\n+       * [OPENJPA-256] - java.lang.ClassNotFoundException:\n+         org.apache.openjpa.util.CacheMap in a jetty spring environment\n+\n+Sub-task\n+\n+       * [OPENJPA-279] - Fixed missing lookup for non-jta-data-source in\n+         JDBCConfigurationImpl.\n+       * [OPENJPA-297] - Lazy loading must be ignored in certain unenhanced\n+         cases\n+       * [OPENJPA-298] - Miscellaneous documentation improvements\n+       * [OPENJPA-299] - Provide a means to enable the old enhancing agent\n+\n+Improvements\n+\n+       * [OPENJPA-259] - Ability to parse EJB QL multiline queries in orm.xml\n+       * [OPENJPA-266] - Add Extensibility: Change \"private\" field/method to\n+         \"protected\" or \"public\" in OpenJPA classes to be extendable\n+       * [OPENJPA-275] - Bulk updates: version information should be\n+         automatically maintained when the query does not\n+\n+New Feature\n+\n+       * [OPENJPA-168] - sql optimize n rows query hint\n+       * [OPENJPA-239] - Option for the reverse mapping tool to generate\n+         mapping annotations\n+       * [OPENJPA-262] - Event notification of BrokerFactory creation\n+       * [OPENJPA-263] - Introducing getAll(List) method for data cache to be\n+         called by loadAll() will allow data cache plug-ins to leverage the\n+         advantage of any third-party cache that provides a way to get\n+         multiple object in one call by providing a list of keys (oids).\n+       * [OPENJPA-317] - API formalization pre-1.0\n+\n                           OpenJPA 0.9.7 Release Notes\n \n Bugs\n@@ -229,87 +401,3 @@ Test\n      Additional testing done for release 0.9.7\n        * [OPENJPA-40] - Testing OpenJPA and Spring integration fails\n \n-                          OpenJPA 1.0.0 Release Notes\n-\n-Bugs fixed\n-\n-       * [OPENJPA-61] - Missing usage of TransactionSynchronizationRegistry\n-       * [OPENJPA-86] - \"uuid-hex\" generator does not make affect in orm.xml\n-       * [OPENJPA-143] - Problems with Single Table Inheritance Strategy (and\n-         Discriminator Type of Integer)\n-       * [OPENJPA-165] - QueryImpl.setFirstResult does not take already set\n-         maxResults into account\n-       * [OPENJPA-177] - When using NOT NULL constraint on foreign key it is\n-         not possible to use CascadeType.ALL and GeneratedId\n-       * [OPENJPA-199] - bulk update gets parsing exception trying to update\n-         an attribute of an embedded class\n-       * [OPENJPA-244] - Java 2 Security enablement\n-       * [OPENJPA-248] - ForeignKey cascade delete action not working\n-       * [OPENJPA-257] - Getter/Setter type inconsistency in Entity IdClass\n-       * [OPENJPA-269] - Informix doesn't support subselects or using table\n-         aliases in a delete statement.\n-       * [OPENJPA-271] - DB2 missing JDBC driver 2 support\n-       * [OPENJPA-272] - @GenerateValue (AUTO) doesn't work with Property\n-         level access\n-       * [OPENJPA-274] - JPQL queries cannot access version fields, including\n-         bulk updates\n-       * [OPENJPA-278] - OpenJPAQuery.getDataStoreActions() returns an empty\n-         String array\n-       * [OPENJPA-280] - Enhancement failure for inherited fields introduced\n-         with change 532137\n-       * [OPENJPA-281] - EAGER not the default fetch type without the @Basic\n-         annotation\n-       * [OPENJPA-284] - TableJDBCSeq for GeneratedValue.TABLE did not handle\n-         initialValue correctly\n-       * [OPENJPA-285] - Multiple deploy/undeploy leaks memory in PCRegistry\n-       * [OPENJPA-287] - Generated methods on superclasses are not visible to\n-         subclasses\n-       * [OPENJPA-294] - Exception while enchnancing the java classes using\n-         OpenJPA PCEnhancerTask with build.xml\n-       * [OPENJPA-296] - UUID algorithm generating non-unique values\n-         sometimes\n-       * [OPENJPA-304] - Problems with DepthFirstAnalysis and the IBM JDK\n-       * [OPENJPA-308] - Postgres: bytea vs. oid handling in\n-         PreparedStatement.setNull() calls\n-       * [OPENJPA-311] - Problem loading classes with OSGi classloaders\n-       * [OPENJPA-312] - derby fails with duplicate primary key(s) in group\n-         by list\n-       * [OPENJPA-313] - list of objects returned by query partially correct\n-       * [OPENJPA-314] - Unenhanced complex id in MappedSuperclass causes NPE\n-       * [OPENJPA-315] - Unenhanced generated id field of a primitive wrapper\n-         type causes NPE\n-       * [OPENJPA-320] - Do not use System Tables (SYS*) with DB2\n-       * [OPENJPA-321] - DB2 ABS Casting problem\n-       * [OPENJPA-322] - Timezone on the Calendar object lost in proxying\n-       * [OPENJPA-323] - Cleanup some message text\n-       * [OPENJPA-256] - java.lang.ClassNotFoundException:\n-         org.apache.openjpa.util.CacheMap in a jetty spring environment\n-\n-Sub-task\n-\n-       * [OPENJPA-279] - Fixed missing lookup for non-jta-data-source in\n-         JDBCConfigurationImpl.\n-       * [OPENJPA-297] - Lazy loading must be ignored in certain unenhanced\n-         cases\n-       * [OPENJPA-298] - Miscellaneous documentation improvements\n-       * [OPENJPA-299] - Provide a means to enable the old enhancing agent\n-\n-Improvements\n-\n-       * [OPENJPA-259] - Ability to parse EJB QL multiline queries in orm.xml\n-       * [OPENJPA-266] - Add Extensibility: Change \"private\" field/method to\n-         \"protected\" or \"public\" in OpenJPA classes to be extendable\n-       * [OPENJPA-275] - Bulk updates: version information should be\n-         automatically maintained when the query does not\n-\n-New Feature\n-\n-       * [OPENJPA-168] - sql optimize n rows query hint\n-       * [OPENJPA-239] - Option for the reverse mapping tool to generate\n-         mapping annotations\n-       * [OPENJPA-262] - Event notification of BrokerFactory creation\n-       * [OPENJPA-263] - Introducing getAll(List) method for data cache to be\n-         called by loadAll() will allow data cache plug-ins to leverage the\n-         advantage of any third-party cache that provides a way to get\n-         multiple object in one call by providing a list of keys (oids).\n-       * [OPENJPA-317] - API formalization pre-1.0"},{"sha":"76177a324a45e55070d04b9d06ee0d105f84fb98","filename":"openjpa-project/NOTICE.txt","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/NOTICE.txt?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -16,4 +16,12 @@ COPYRIGHT NOTICES\n     Sun Microsystems and licensed under the CDDL 1.0. The source code is\r\n     available at: https://glassfish.dev.java.net/source/browse/glassfish/\r\n \r\n+* OpenJPA includes the following software copyright 2007 Miroslav Nachev\r\n+\r\n+openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java\r\n+openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java\r\n+openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java\r\n+openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java\r\n+openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java\r\n+openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java\r\n \r"},{"sha":"0b01562e5e8dee30a7253440c8b57724098e88fd","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":262,"deletions":103,"changes":365,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -9,19 +9,14 @@ <h1>Release Notes for OpenJPA</h1>\n <li><a href=\"#Prerequisites\">Prerequisites</a></li>\n <li><a href=\"#Documentation\">Documentation</a></li>\n <li><a href=\"#GetInvolved\">Getting Involved</a></li>\n-<li><a href=\"#Bugs\">Bugs</a></li>\n-<li><a href=\"#Improvements\">Improvements</a></li>\n-<li><a href=\"#New Features\">New Features</a></li>\n-<li><a href=\"#Task\">Task</a></li>\n-<li><a href=\"#Test\">Test</a></li>\n </ul>\n \n <h2><a name=\"Overview\"></a>Overview</h2>\n \n-<p> These notes describe the difference between OpenJPA release 1.0.0\n-and the preceding releases, 0.9.6 and 0.9.7. 1.0.0 is the first\n-major release since OpenJPA graduated to an Apache top level project (TLP),\n-and contains many new features and bugfixes.\n+<p> These notes describe the difference between OpenJPA release 1.0.2 and the\n+preceding releases. 1.0 is the first major release since OpenJPA graduated \n+to an Apache top level project (TLP), and contains many new features and \n+bugfixes.\n <P>\n OpenJPA is a feature-rich implementation of the persistence part of \n Java Community Process JSR-220 (Enterprise JavaBeans 3.0), which is\n@@ -98,109 +93,168 @@ <h2><a name=\"GetInvolved\"></a>Getting Involved</h2>\n     <li> Bugs and other issues can be posted on the project JIRA. </li>\n </ul>\n \n+<h1><a name=\"1.0.2\">OpenJPA 1.0.2 Release Notes</a></h1>\n \n-<h1><a name=\"0.9.7\">OpenJPA 0.9.7 Release Notes</a></h1>\n-\n-<h2><a name=\"Bugs\"</a>Bugs</h2>\n-The following bugs have been fixed for release 0.9.7\n-<ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-16'>OPENJPA-16</a>] - NPE in createQuery for EJB QL with nested correlated subqueries</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-21'>OPENJPA-21</a>] - Time is missing from list of mutable classes.</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-22'>OPENJPA-22</a>] - locate & substring queries fail both db2 & derby, cannot use parameter markers in expression ?-?</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-23'>OPENJPA-23</a>] - -418 sqlexception using DB2 and EJB QL with SQRT or MOD</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-24'>OPENJPA-24</a>] - Allow OpenJPA to be extensible</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-25'>OPENJPA-25</a>] - Incorrect SQL generated for queries involving more than one AbstractSchemaNames, generated SQL FROM clause is missing 'Table alias'</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-35'>OPENJPA-35</a>] - In-memory Delete operation fails with active DataCache</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-41'>OPENJPA-41</a>] - transforming classes doesn't work</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-48'>OPENJPA-48</a>] -  parsing error - cast of subselect does not work</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-50'>OPENJPA-50</a>] - bad sql pushdown, cast changes datatype</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-53'>OPENJPA-53</a>] -  bad sql pushdown for nested subselects, missing nested subselect</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-54'>OPENJPA-54</a>] - bad sql pushdown, should use all syntax</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-56'>OPENJPA-56</a>] - in derby concat with input parameter needs a cast, otherwise becomes long varchar and some operations do not work</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-60'>OPENJPA-60</a>] - Specifying the wrong persistence implementation in persistence.xml leads to misleading error message</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-62'>OPENJPA-62</a>] - Ejbql join queries show invalid null Entities when run in a new persistence context where no entity instances exist.</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-71'>OPENJPA-71</a>] - Caching primitive array types consumes excessive memory</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-77'>OPENJPA-77</a>] - Problems in default setting in DB2Dictionary , also missing support for DB2 z/OS platforms</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-80'>OPENJPA-80</a>] - Bad Escaping for LIKE in MySQL</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-98'>OPENJPA-98</a>] - Java deadlock when insert in t1 and find in t2 when using IBM JVM 1.5.0</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-100'>OPENJPA-100</a>] - <jar-file> entries failing to be processed for persistence unit rooted in an EAR</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-102'>OPENJPA-102</a>] - JTA transaction rollback, nonexistant instances, transactional persistence context => failures during afterCompletion() and close()</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-103'>OPENJPA-103</a>] - Default Listeners not being processed correctly</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-104'>OPENJPA-104</a>] - OpenJPA does not detach instances on rollback()</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-107'>OPENJPA-107</a>] - @SqlResultSetMappings fails in mapping tool with java.lang.ArrayStoreException</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-108'>OPENJPA-108</a>] - @AttributeOverrides fails in mapping tool with java.lang.ArrayStoreException</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-109'>OPENJPA-109</a>] - every NativeQuery using SqlResultSetMapping fails at runtime with There is no query result mapping for \"null\" with name \"xxx\" when the entity is persisted in a different method than the method doing the query.  </li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-110'>OPENJPA-110</a>] - Every NamedNativeQuery using ResultSetMapping fails at runtime with class cast exception when try to iterate over list<Some Entity></li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-111'>OPENJPA-111</a>] - native queries fail when use named parameters</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-115'>OPENJPA-115</a>] - Bottleneck(s) with using OpenJPA in a Container-managed environment</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-116'>OPENJPA-116</a>] - EntityManager.getDelegate should throw an IllegalStateException </li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-118'>OPENJPA-118</a>] - AutoDetach property has no effect</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-119'>OPENJPA-119</a>] - EntityManager.clear() should not implicitly invoke the flush operation</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-121'>OPENJPA-121</a>] - Table name defaults to the class name instead of the entity name</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-122'>OPENJPA-122</a>] - EntityManager does not throw exceptions after close() in required cases</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-132'>OPENJPA-132</a>] - java.lang.NoSuchMethodError for entity with ID of type java.sql.Date</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-133'>OPENJPA-133</a>] - Can't find non-public callback methods with superclass or interface parameters</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-134'>OPENJPA-134</a>] - Extra unneeded SQL joins for OneToMany relationship with fetch type EAGER</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-139'>OPENJPA-139</a>] - PersistenceException merging an entity with a Calendar field. </li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-140'>OPENJPA-140</a>] - Wrong package name in test classes</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-142'>OPENJPA-142</a>] - Entity name is ignored when specified in the orm.xml file</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-144'>OPENJPA-144</a>] - JDBCConfigurationImpl does not support JNDI lookup for non-jta-data-source.  </li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-146'>OPENJPA-146</a>] - Entity enhancement fails while using EmbeddedId on a MappedSuperclass</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-150'>OPENJPA-150</a>] - @Column in @AttributeOverride not honoring table attribute that maps to a secondary table in mappedsuperclass entity</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-154'>OPENJPA-154</a>] - OptimisticLockException working with  Savepoints</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-155'>OPENJPA-155</a>] -  java.lang.ArrayIndexOutOfBoundsException during commit</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-157'>OPENJPA-157</a>] - NullPointerException when running query with null parameter</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-162'>OPENJPA-162</a>] - @OrderBy on @OneToMany does not allow ordering by @Id value</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-174'>OPENJPA-174</a>] - error when find()'ing an abstract class</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-175'>OPENJPA-175</a>] - Eager selects by PagingResultObjectProvider may not use the FetchBatchSize</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-179'>OPENJPA-179</a>] - Schemas defined in orm.xml are only applied when a name is also specified. </li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-181'>OPENJPA-181</a>] - ClassCastException when executing bulk delete on an entity that owns a OneToOne with a Cascade.DELETE when DataCache is on</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-185'>OPENJPA-185</a>] - optional attribute is not overriden by xml descriptor</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-186'>OPENJPA-186</a>] - Build failure of OpenJPA sources from trunk</li>\n-</ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-202'>OPENJPA-202</a>] - after invoking LRS processing in a client by calling an @LRS annotated relationship, the next em.clear()/em.close() gets org.apache.openjpa.persistence.InvalidStateException: You cannot transfer large result set fields from one object or field to another</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-208'>OPENJPA-208</a>] - NoResultException and NonUniqueResultException are not thrown when expected</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-214'>OPENJPA-214</a>] - Need to support floating point primary keys</li>\n-</ul>\n-    \n-<h2><a name=\"Improvements\"</a>Improvements</h2>\n-Improvements made for release 0.9.7\n-<ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-10'>OPENJPA-10</a>] - persistence unit name should be default diagnostic context for standard OpenJPA log impl</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-37'>OPENJPA-37</a>] - Support ant typedefs for OpenJPA tasks</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-55'>OPENJPA-55</a>] - Allow executeUpdate() invocations on native queries</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-57'>OPENJPA-57</a>] - persistence_1_0.xsd is missing</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-63'>OPENJPA-63</a>] - Better pessimistic lock support for DB2 v8.2+</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-151'>OPENJPA-151</a>] - Added field in enhanced vesrion of a class is not serialized. Hence the change in detached+serialized instances is not registered under certain conditions.  </li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-153'>OPENJPA-153</a>] - WebSphere and non-jta-data-source and default ManagedRuntime</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-158'>OPENJPA-158</a>] - OpenJPA logs overly-verbose at INFO level</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-161'>OPENJPA-161</a>] - Overuse of synchronization in AbstractBrokerFactory</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-166'>OPENJPA-166</a>] - Track the reason why a setRollbackOnly invocation was made</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-176'>OPENJPA-176</a>] - Exception prefixes should be human-readable</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-196'>OPENJPA-196</a>] - Ease the restrictions on forcing a matche between the number of declared and assigned positional parameters</li>\n-</ul>\n-    \n-<h2><a name=\"New Features\"</a>New Features</h2>\n-Features added for release 0.9.7\n+<h2>        Bugs\n+</h2>\n <ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-92'>OPENJPA-92</a>] - Support for H2 Database Engine</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-93'>OPENJPA-93</a>] - Sequence generation in a JTA environment should not require non-JTA datasource</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-94'>OPENJPA-94</a>] - Allow MappingTool and persistence.xml to support drop-create for database schema</li>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-182'>OPENJPA-182</a>] - db2 update lock syntax WITH <isolation> USE AND KEEP UPDATE LOCKS</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-135'>OPENJPA-135</a>] -         join fetch not returning duplicate references which not conforming to ejb3.0 spec\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-211'>OPENJPA-211</a>] -         CLONE -java.lang.VerifyError on websphere 6.1 with Spring 2.0.3 and OpenJpa 0.96/0.97\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-251'>OPENJPA-251</a>] -         org.apache.openjpa.enhance.Reflection.getDeclaredMethod() has undefined behavior, leading to VM-dependent crashes\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-258'>OPENJPA-258</a>] -         MetaDataInheritanceComparator is not transitive; C &gt; B &gt; A &gt; C leads to out-of-memory crash in PCEnhancer\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-322'>OPENJPA-322</a>] -         Timezone on the Calendar object lost in proxying\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-329'>OPENJPA-329</a>] -         Generic interface may cause the openjpa Reflection code to pickup the wrong getter method\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-331'>OPENJPA-331</a>] -         Allow BigInteger and other Basic types as Primary Keys\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-366'>OPENJPA-366</a>] -         InternalException thrown in BrokerImpl.endOperation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-367'>OPENJPA-367</a>] -         PCEnhancer does not find meta data for entities using pure XML annotation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-370'>OPENJPA-370</a>] -         LoadFetchGroup annotation was not recognized during the fetch1\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-401'>OPENJPA-401</a>] -         UnsatisfiedLinkError in MappingToolTask when using DB2 JDBC driver \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-419'>OPENJPA-419</a>] -         Merging graphs that include managed instances fails\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-420'>OPENJPA-420</a>] -         JPQL constructor query close the &lt;SELECT DISTINCT&gt; feature? \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-437'>OPENJPA-437</a>] -         EntityManagerFactory is not thread-safe\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-446'>OPENJPA-446</a>] -         Problem when setting String fields of detached objects\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-447'>OPENJPA-447</a>] -         Query pagination broken for non-DB2 databases\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-452'>OPENJPA-452</a>] -         Error in the XML equivalent in the &quot;secondary table field mapping&quot; example\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-471'>OPENJPA-471</a>] -         iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.IDENTITY)\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-472'>OPENJPA-472</a>] -         iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.SEQUENCE ...) \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-476'>OPENJPA-476</a>] -         Query.setFirstResult and Query.setMaxResults don't take effect\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-506'>OPENJPA-506</a>] -         PreRemove method callback is never called; PreUpdate is always called\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-508'>OPENJPA-508</a>] -         JPQL EXISTS clauses do not handle subclasses properly\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-511'>OPENJPA-511</a>] -         Unable to execute native queries which start with the WITH keyword. \n+</li>\n </ul>\n \n+<h1><a name=\"1.0.1\">OpenJPA 1.0.1 Release Notes</a></h1>\n \n-\n-<h2><a name=\"Task\"</a>Task</h2>\n-Tasks done for release 0.9.7\n+<h2>        Bugs\n+</h2>\n <ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-36'>OPENJPA-36</a>] - Add cwiki url to incubator status page</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-113'>OPENJPA-113</a>] -         when you specify columm table=&quot;empbean&quot;  in the xml file entity id or basic type when empbean is the default table name, the mapping tool generates extra foreign key field (eg.EmpBean_empid) in the table produced.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-282'>OPENJPA-282</a>] -         Postgresql does not support deferred unique constraints.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-295'>OPENJPA-295</a>] -         ArrayIndexOutofBoundsException when under load and within a managed Transaction\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-326'>OPENJPA-326</a>] -         NPE if a discriminator column is specified without discriminator type in orm.xml\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-335'>OPENJPA-335</a>] -         Logic in getters for entities with property access causes the PCEnhancer to hang\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-339'>OPENJPA-339</a>] -         Java 2 security Access denied in File.toURL() call\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-343'>OPENJPA-343</a>] -         Do not call setRollbackOnly on inactive Transactions\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-346'>OPENJPA-346</a>] -         PCEnhancerAgent backwards-compatibility setting overly-enables enhancement\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-347'>OPENJPA-347</a>] -         Performance Issue with Lazy Loaded Foreign Keys\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-353'>OPENJPA-353</a>] -         Character discriminators are not converted correctly if storeCharsAsNumbers = true\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-355'>OPENJPA-355</a>] -         OpenJPA Log4J factory incorrectly handles logging level\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-356'>OPENJPA-356</a>] -         DB2 requires CASTs when parameters appear in SELECT clause\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-357'>OPENJPA-357</a>] -         Use case where FetchGroup A includes FecthGroup B is not honoured by fetch operations\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-358'>OPENJPA-358</a>] -         Recursion Depth for Field f should be calculated w.r.t active fetch groups and not all fetch groups\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-360'>OPENJPA-360</a>] -         SQL FOR UPDATE OF incorrectly generated for DB2/NT SQL0816\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-361'>OPENJPA-361</a>] -         Incorrect GREG_OFFSET offset or inconsistent usage in UUIDGenerator\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-367'>OPENJPA-367</a>] -         PCEnhancer does not find meta data for entities using pure XML annotation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-368'>OPENJPA-368</a>] -         Multithreaded client fails randomly on EntityManager.persist() with out transaction context.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-369'>OPENJPA-369</a>] -         AccessDeclaredMembers RuntimePermission requires by Solaris JDK with security enabled\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-372'>OPENJPA-372</a>] -         PCEnhancer throws away its classloader\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-375'>OPENJPA-375</a>] -         DB2 autoCommit(true) causes Result Set prematurely closed in WebContainer JEE environment.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-378'>OPENJPA-378</a>] -         DB2 SQL incorrectly generating &quot;FETCH FIRST n ROWS ONLY&quot; in subselects\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-380'>OPENJPA-380</a>] -         Connecting to database when an unused emf is closed \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-382'>OPENJPA-382</a>] -         Overriding column names for Byte[] attributes causes exception.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-385'>OPENJPA-385</a>] -         IndexOutOfBounds exception when parsing &quot;.class&quot; files\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-387'>OPENJPA-387</a>] -         Getting &quot;java.lang.ClassNotFoundException&quot; when loading datacache plug-in which is a class outside of OpenJPA package.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-388'>OPENJPA-388</a>] -         MappingToolTask can't find persistence meta data. \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-389'>OPENJPA-389</a>] -         em.getTransaction().commit() is not issuing database commit for NativeQuery requesting updates\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-394'>OPENJPA-394</a>] -         DB2 CAST VARCHAR type missing LENGTH\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-395'>OPENJPA-395</a>] -         Accessing short Foreign Key metadata fields as ints causes problems on iSeries\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-396'>OPENJPA-396</a>] -         Cloning Calendar proxies doesn't detach from StateManager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-397'>OPENJPA-397</a>] -         schematool ant task always requires files\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-399'>OPENJPA-399</a>] -         openjpa did not handle multiple schema names with same table name\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-401'>OPENJPA-401</a>] -         UnsatisfiedLinkError in MappingToolTask when using DB2 JDBC driver \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-402'>OPENJPA-402</a>] -         Unable to detect an valid Entity's meta data when the entity's .class file size is large.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-403'>OPENJPA-403</a>] -         LoadFetchGroup patch (OPENJPA-370) introduces NPE\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-405'>OPENJPA-405</a>] -         need extract space in the message text\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-409'>OPENJPA-409</a>] -         Quick message updates\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-410'>OPENJPA-410</a>] -         Change &quot;connecting to dictionary&quot; message from Info to Trace\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-413'>OPENJPA-413</a>] -         Fix some message text in the localizer.properties files\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-415'>OPENJPA-415</a>] -         Garbage collection of AbstractResultList instance closes active connection\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-416'>OPENJPA-416</a>] -         Unclear exception if an unknown external value is used\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-421'>OPENJPA-421</a>] -         OpenJPA generates bad SQL before configuration fully populated\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-422'>OPENJPA-422</a>] -         Calendar objects contained in a detached Entity still have a &quot;live&quot; StateManagerImpl\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-423'>OPENJPA-423</a>] -         Deadlock victim exception getting sequence value with SQLServer\n+</li>\n </ul>\n     \n-<h2><a name=\"Test\"</a>Test</h2>\n-Additional testing done for release 0.9.7\n+<h2>        Sub-tasks\n+</h2>\n <ul>\n-<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-40'>OPENJPA-40</a>] - Testing OpenJPA and Spring integration fails</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-408'>OPENJPA-408</a>] -         Improve error processing for openjpa.RuntimeUnenhancedClasses property settings\n+</li>\n+</ul>\n+                \n+<h2>        Improvements\n+</h2>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-338'>OPENJPA-338</a>] -         Remove unnecessary CAST in SQL statement for DB2\n+</li>\n </ul>\n \n \n@@ -317,6 +371,111 @@ <h2> New Feature\n </li>\n </ul>\n \n+<h1><a name=\"0.9.7\">OpenJPA 0.9.7 Release Notes</a></h1>\n+\n+<h2>Bugs</h2>\n+The following bugs have been fixed for release 0.9.7\n+<ul>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-16'>OPENJPA-16</a>] - NPE in createQuery for EJB QL with nested correlated subqueries</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-21'>OPENJPA-21</a>] - Time is missing from list of mutable classes.</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-22'>OPENJPA-22</a>] - locate & substring queries fail both db2 & derby, cannot use parameter markers in expression ?-?</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-23'>OPENJPA-23</a>] - -418 sqlexception using DB2 and EJB QL with SQRT or MOD</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-24'>OPENJPA-24</a>] - Allow OpenJPA to be extensible</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-25'>OPENJPA-25</a>] - Incorrect SQL generated for queries involving more than one AbstractSchemaNames, generated SQL FROM clause is missing 'Table alias'</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-35'>OPENJPA-35</a>] - In-memory Delete operation fails with active DataCache</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-41'>OPENJPA-41</a>] - transforming classes doesn't work</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-48'>OPENJPA-48</a>] -  parsing error - cast of subselect does not work</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-50'>OPENJPA-50</a>] - bad sql pushdown, cast changes datatype</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-53'>OPENJPA-53</a>] -  bad sql pushdown for nested subselects, missing nested subselect</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-54'>OPENJPA-54</a>] - bad sql pushdown, should use all syntax</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-56'>OPENJPA-56</a>] - in derby concat with input parameter needs a cast, otherwise becomes long varchar and some operations do not work</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-60'>OPENJPA-60</a>] - Specifying the wrong persistence implementation in persistence.xml leads to misleading error message</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-62'>OPENJPA-62</a>] - Ejbql join queries show invalid null Entities when run in a new persistence context where no entity instances exist.</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-71'>OPENJPA-71</a>] - Caching primitive array types consumes excessive memory</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-77'>OPENJPA-77</a>] - Problems in default setting in DB2Dictionary , also missing support for DB2 z/OS platforms</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-80'>OPENJPA-80</a>] - Bad Escaping for LIKE in MySQL</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-98'>OPENJPA-98</a>] - Java deadlock when insert in t1 and find in t2 when using IBM JVM 1.5.0</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-100'>OPENJPA-100</a>] - <jar-file> entries failing to be processed for persistence unit rooted in an EAR</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-102'>OPENJPA-102</a>] - JTA transaction rollback, nonexistant instances, transactional persistence context => failures during afterCompletion() and close()</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-103'>OPENJPA-103</a>] - Default Listeners not being processed correctly</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-104'>OPENJPA-104</a>] - OpenJPA does not detach instances on rollback()</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-107'>OPENJPA-107</a>] - @SqlResultSetMappings fails in mapping tool with java.lang.ArrayStoreException</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-108'>OPENJPA-108</a>] - @AttributeOverrides fails in mapping tool with java.lang.ArrayStoreException</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-109'>OPENJPA-109</a>] - every NativeQuery using SqlResultSetMapping fails at runtime with There is no query result mapping for \"null\" with name \"xxx\" when the entity is persisted in a different method than the method doing the query.  </li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-110'>OPENJPA-110</a>] - Every NamedNativeQuery using ResultSetMapping fails at runtime with class cast exception when try to iterate over list<Some Entity></li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-111'>OPENJPA-111</a>] - native queries fail when use named parameters</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-115'>OPENJPA-115</a>] - Bottleneck(s) with using OpenJPA in a Container-managed environment</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-116'>OPENJPA-116</a>] - EntityManager.getDelegate should throw an IllegalStateException </li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-118'>OPENJPA-118</a>] - AutoDetach property has no effect</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-119'>OPENJPA-119</a>] - EntityManager.clear() should not implicitly invoke the flush operation</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-121'>OPENJPA-121</a>] - Table name defaults to the class name instead of the entity name</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-122'>OPENJPA-122</a>] - EntityManager does not throw exceptions after close() in required cases</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-132'>OPENJPA-132</a>] - java.lang.NoSuchMethodError for entity with ID of type java.sql.Date</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-133'>OPENJPA-133</a>] - Can't find non-public callback methods with superclass or interface parameters</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-134'>OPENJPA-134</a>] - Extra unneeded SQL joins for OneToMany relationship with fetch type EAGER</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-139'>OPENJPA-139</a>] - PersistenceException merging an entity with a Calendar field. </li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-140'>OPENJPA-140</a>] - Wrong package name in test classes</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-142'>OPENJPA-142</a>] - Entity name is ignored when specified in the orm.xml file</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-144'>OPENJPA-144</a>] - JDBCConfigurationImpl does not support JNDI lookup for non-jta-data-source.  </li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-146'>OPENJPA-146</a>] - Entity enhancement fails while using EmbeddedId on a MappedSuperclass</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-150'>OPENJPA-150</a>] - @Column in @AttributeOverride not honoring table attribute that maps to a secondary table in mappedsuperclass entity</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-154'>OPENJPA-154</a>] - OptimisticLockException working with  Savepoints</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-155'>OPENJPA-155</a>] -  java.lang.ArrayIndexOutOfBoundsException during commit</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-157'>OPENJPA-157</a>] - NullPointerException when running query with null parameter</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-162'>OPENJPA-162</a>] - @OrderBy on @OneToMany does not allow ordering by @Id value</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-174'>OPENJPA-174</a>] - error when find()'ing an abstract class</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-175'>OPENJPA-175</a>] - Eager selects by PagingResultObjectProvider may not use the FetchBatchSize</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-179'>OPENJPA-179</a>] - Schemas defined in orm.xml are only applied when a name is also specified. </li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-181'>OPENJPA-181</a>] - ClassCastException when executing bulk delete on an entity that owns a OneToOne with a Cascade.DELETE when DataCache is on</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-185'>OPENJPA-185</a>] - optional attribute is not overriden by xml descriptor</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-186'>OPENJPA-186</a>] - Build failure of OpenJPA sources from trunk</li>\n+</ul>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-202'>OPENJPA-202</a>] - after invoking LRS processing in a client by calling an @LRS annotated relationship, the next em.clear()/em.close() gets org.apache.openjpa.persistence.InvalidStateException: You cannot transfer large result set fields from one object or field to another</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-208'>OPENJPA-208</a>] - NoResultException and NonUniqueResultException are not thrown when expected</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-214'>OPENJPA-214</a>] - Need to support floating point primary keys</li>\n+</ul>\n+    \n+<h2>Improvements</h2>\n+Improvements made for release 0.9.7\n+<ul>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-10'>OPENJPA-10</a>] - persistence unit name should be default diagnostic context for standard OpenJPA log impl</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-37'>OPENJPA-37</a>] - Support ant typedefs for OpenJPA tasks</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-55'>OPENJPA-55</a>] - Allow executeUpdate() invocations on native queries</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-57'>OPENJPA-57</a>] - persistence_1_0.xsd is missing</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-63'>OPENJPA-63</a>] - Better pessimistic lock support for DB2 v8.2+</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-151'>OPENJPA-151</a>] - Added field in enhanced vesrion of a class is not serialized. Hence the change in detached+serialized instances is not registered under certain conditions.  </li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-153'>OPENJPA-153</a>] - WebSphere and non-jta-data-source and default ManagedRuntime</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-158'>OPENJPA-158</a>] - OpenJPA logs overly-verbose at INFO level</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-161'>OPENJPA-161</a>] - Overuse of synchronization in AbstractBrokerFactory</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-166'>OPENJPA-166</a>] - Track the reason why a setRollbackOnly invocation was made</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-176'>OPENJPA-176</a>] - Exception prefixes should be human-readable</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-196'>OPENJPA-196</a>] - Ease the restrictions on forcing a matche between the number of declared and assigned positional parameters</li>\n+</ul>\n+    \n+<h2>New Features</h2>\n+Features added for release 0.9.7\n+<ul>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-92'>OPENJPA-92</a>] - Support for H2 Database Engine</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-93'>OPENJPA-93</a>] - Sequence generation in a JTA environment should not require non-JTA datasource</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-94'>OPENJPA-94</a>] - Allow MappingTool and persistence.xml to support drop-create for database schema</li>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-182'>OPENJPA-182</a>] - db2 update lock syntax WITH <isolation> USE AND KEEP UPDATE LOCKS</li>\n+</ul>\n+\n+\n+\n+<h2>Task</h2>\n+Tasks done for release 0.9.7\n+<ul>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-36'>OPENJPA-36</a>] - Add cwiki url to incubator status page</li>\n+</ul>\n+    \n+<h2>Test</h2>\n+Additional testing done for release 0.9.7\n+<ul>\n+<li>[<a href='http://issues.apache.org/jira/browse/OPENJPA-40'>OPENJPA-40</a>] - Testing OpenJPA and Spring integration fails</li>\n+</ul>\n+\n+\n  \n </body>\n </html>"},{"sha":"ad60fcd17fcf2e839794c478039e0ca3354edc72","filename":"openjpa-project/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -40,7 +40,7 @@\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n         <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.0.1-SNAPSHOT</version>\r\n+        <version>1.0.2</version>\r\n     </parent>\r\n \r\n     <properties>\r"},{"sha":"c312c6606bd8acd2a2bb9ff7b3e9595898b1999d","filename":"openjpa-project/src/doc/manual/jpa_overview_mapping.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_mapping.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -3393,7 +3393,7 @@ And in XML:\n                 </para>\n <programlisting>\n &lt;entity class=\"org.mag.Article\"&gt;\n-    &lt;table name=\"ART\"&gt;\n+    &lt;table name=\"ART\"/&gt;\n     &lt;secondary-table name=\"ART_DATA\"&gt;\n         &lt;primary-key-join-column name=\"ART_ID\" referenced-column-name=\"ID\"/&gt;\n     &lt;/secondary-table&gt;"},{"sha":"ddaabd359e94dc9c422865f090f79bc081c0f0d1","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.1-SNAPSHOT</version>\n+        <version>1.0.2</version>\n     </parent>\n     <profiles>\n         <profile>"},{"sha":"dbe16d887a7fbdac4eb6561055fb5c09aae85368","filename":"pom.xml","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/94515fa95247d7ae318118589ab55ca49ccca162/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/94515fa95247d7ae318118589ab55ca49ccca162/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=94515fa95247d7ae318118589ab55ca49ccca162","patch":"@@ -32,15 +32,15 @@\n     <description>OpenJPA</description>\n \n     <properties>\n-        <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.x</scm.dir>\n+        <scm.dir>svn.apache.org/repos/asf/openjpa/branches/1.0.2</scm.dir>\n         <openjpa.version>${pom.version}</openjpa.version>\n     </properties>\n \n     <!--\n         Changing this version needs to also be done in all children poms\n         See: http://jira.codehaus.org/browse/MNG-624\n     -->\n-    <version>1.0.1-SNAPSHOT</version>\n+    <version>1.0.2</version>\n     <url>http://openjpa.apache.org</url>\n     <issueManagement>\n         <system>jira</system>\n@@ -75,9 +75,12 @@\n             Committer list taken from http://openjpa.apache.org/committers.html\n         -->\n         <developer><name>Abe White</name></developer>\n+        <developer><name>Albert Lee</name></developer>\r\n         <developer><name>Brian McCallister</name></developer>\n         <developer><name>Bryan Noll</name></developer>\n+        <developer><name>Catalina Wei</name></developer>\r\n         <developer><name>Craig Russell</name></developer>\n+        <developer><name>David Ezzio</name></developer>\r\n         <developer><name>David Wisneski</name></developer>\n         <developer><name>Eddie O'Neil</name></developer>\n         <developer><name>Geir Magnusson Jr.</name></developer>\n@@ -315,7 +318,6 @@\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-surefire-plugin</artifactId>\n-                    <version>2.2</version>\n                     <configuration>\n                         <argLine>${surefire.jvm.args}</argLine>\n                         <useFile>false</useFile>"}]}

