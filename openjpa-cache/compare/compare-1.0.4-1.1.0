{"url":"https://api.github.com/repos/apache/openjpa/compare/1.0.4...1.1.0","html_url":"https://github.com/apache/openjpa/compare/1.0.4...1.1.0","permalink_url":"https://github.com/apache/openjpa/compare/apache:222c73b...apache:26e8ada","diff_url":"https://github.com/apache/openjpa/compare/1.0.4...1.1.0.diff","patch_url":"https://github.com/apache/openjpa/compare/1.0.4...1.1.0.patch","base_commit":{"sha":"222c73b3ac8a91218ef16c8aabaae48fe58477b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyMmM3M2IzYWM4YTkxMjE4ZWYxNmM4YWFiYWFlNDhmZTU4NDc3Yjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-26T14:32:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-26T14:32:00Z"},"message":"[maven-release-plugin]  copy for tag 1.0.4\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.0.4@989711 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e582fc5fbb0940933980e1a4fa8808fc8acd0e4","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e582fc5fbb0940933980e1a4fa8808fc8acd0e4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/222c73b3ac8a91218ef16c8aabaae48fe58477b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/222c73b3ac8a91218ef16c8aabaae48fe58477b8","html_url":"https://github.com/apache/openjpa/commit/222c73b3ac8a91218ef16c8aabaae48fe58477b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/222c73b3ac8a91218ef16c8aabaae48fe58477b8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"cd4c8839f87f750e2655a5b98f552e2ba4031a67","url":"https://api.github.com/repos/apache/openjpa/commits/cd4c8839f87f750e2655a5b98f552e2ba4031a67","html_url":"https://github.com/apache/openjpa/commit/cd4c8839f87f750e2655a5b98f552e2ba4031a67"},{"sha":"b481b8d2091958bafb7a05bfef90607333a3c3b4","url":"https://api.github.com/repos/apache/openjpa/commits/b481b8d2091958bafb7a05bfef90607333a3c3b4","html_url":"https://github.com/apache/openjpa/commit/b481b8d2091958bafb7a05bfef90607333a3c3b4"}]},"merge_base_commit":{"sha":"56f6b437909815b1974c391d6496a1c4c5f87382","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2ZjZiNDM3OTA5ODE1YjE5NzRjMzkxZDY0OTZhMWM0YzVmODczODI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T07:03:48Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T07:03:48Z"},"message":"OPENJPA-317. Some more API Javadoc cleanup, plus a bit of last-minute renaming and method visibility changes for clarity.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567986 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89d6919672557b309d461e69636ae1ee6cdeab77","url":"https://api.github.com/repos/apache/openjpa/git/trees/89d6919672557b309d461e69636ae1ee6cdeab77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/56f6b437909815b1974c391d6496a1c4c5f87382","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/56f6b437909815b1974c391d6496a1c4c5f87382","html_url":"https://github.com/apache/openjpa/commit/56f6b437909815b1974c391d6496a1c4c5f87382","comments_url":"https://api.github.com/repos/apache/openjpa/commits/56f6b437909815b1974c391d6496a1c4c5f87382/comments","author":null,"committer":null,"parents":[{"sha":"52d7ab797565c7b182a87128eb0a484a7e9237a7","url":"https://api.github.com/repos/apache/openjpa/commits/52d7ab797565c7b182a87128eb0a484a7e9237a7","html_url":"https://github.com/apache/openjpa/commit/52d7ab797565c7b182a87128eb0a484a7e9237a7"}]},"status":"diverged","ahead_by":406,"behind_by":251,"total_commits":406,"commits":[{"sha":"6ea5a81c9380521adb3c0c7839a06194c9e148f3","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlYTVhODFjOTM4MDUyMWFkYjNjMGM3ODM5YTA2MTk0YzllMTQ4ZjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-11-20T23:12:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-11-20T23:12:33Z"},"message":"OPENJPA-449 : initializing _pcClassLoaders in constructor instead of conditionally inside loadPersistentTypes(). Saves NPE on new Broker construction in multi-threaded scenarios' openjpa-kernel\\src\\main\\java\\org\\apache\\openjpa\\kernel\\AbstractBrokerFactory.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@596871 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b0013b38130d73414d877a42c38cf207e265a36","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b0013b38130d73414d877a42c38cf207e265a36"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6ea5a81c9380521adb3c0c7839a06194c9e148f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6ea5a81c9380521adb3c0c7839a06194c9e148f3","html_url":"https://github.com/apache/openjpa/commit/6ea5a81c9380521adb3c0c7839a06194c9e148f3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6ea5a81c9380521adb3c0c7839a06194c9e148f3/comments","author":null,"committer":null,"parents":[{"sha":"aa5259d5210a6ba6e9adc11d37db2cc733725715","url":"https://api.github.com/repos/apache/openjpa/commits/aa5259d5210a6ba6e9adc11d37db2cc733725715","html_url":"https://github.com/apache/openjpa/commit/aa5259d5210a6ba6e9adc11d37db2cc733725715"}]},{"sha":"46ce1f5af7dea3fa25e037618779d6dc2d2f92bf","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2Y2UxZjVhZjdkZWEzZmEyNWUwMzc2MTg3NzlkNmRjMmQyZjkyYmY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T03:48:38Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T03:48:38Z"},"message":"OPENJPA-448\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@596929 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"caf30945f4d87453d6c6e3a6867b1fc33c450512","url":"https://api.github.com/repos/apache/openjpa/git/trees/caf30945f4d87453d6c6e3a6867b1fc33c450512"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/46ce1f5af7dea3fa25e037618779d6dc2d2f92bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/46ce1f5af7dea3fa25e037618779d6dc2d2f92bf","html_url":"https://github.com/apache/openjpa/commit/46ce1f5af7dea3fa25e037618779d6dc2d2f92bf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/46ce1f5af7dea3fa25e037618779d6dc2d2f92bf/comments","author":null,"committer":null,"parents":[{"sha":"6ea5a81c9380521adb3c0c7839a06194c9e148f3","url":"https://api.github.com/repos/apache/openjpa/commits/6ea5a81c9380521adb3c0c7839a06194c9e148f3","html_url":"https://github.com/apache/openjpa/commit/6ea5a81c9380521adb3c0c7839a06194c9e148f3"}]},{"sha":"4fb39b9590374407c6d06bd48f6e9c6e9bac3505","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmYjM5Yjk1OTAzNzQ0MDdjNmQwNmJkNDhmNmU5YzZlOWJhYzM1MDU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T06:25:29Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T06:25:29Z"},"message":"Example of how to do dynamic class registration in OpenJPA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@596954 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0faba6ac81398bf8345a8d29fc21d413c011f14","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0faba6ac81398bf8345a8d29fc21d413c011f14"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4fb39b9590374407c6d06bd48f6e9c6e9bac3505","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4fb39b9590374407c6d06bd48f6e9c6e9bac3505","html_url":"https://github.com/apache/openjpa/commit/4fb39b9590374407c6d06bd48f6e9c6e9bac3505","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4fb39b9590374407c6d06bd48f6e9c6e9bac3505/comments","author":null,"committer":null,"parents":[{"sha":"46ce1f5af7dea3fa25e037618779d6dc2d2f92bf","url":"https://api.github.com/repos/apache/openjpa/commits/46ce1f5af7dea3fa25e037618779d6dc2d2f92bf","html_url":"https://github.com/apache/openjpa/commit/46ce1f5af7dea3fa25e037618779d6dc2d2f92bf"}]},{"sha":"21ec1613390ffe25d4ab8ffcc0ce3e5155940eef","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxZWMxNjEzMzkwZmZlMjVkNGFiOGZmY2MwY2UzZTUxNTU5NDBlZWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T06:34:00Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T06:34:00Z"},"message":"Example of how to do dynamic class registration in OpenJPA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@596958 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ab503581c4001df9e2fda62bf48e9483015a392","url":"https://api.github.com/repos/apache/openjpa/git/trees/6ab503581c4001df9e2fda62bf48e9483015a392"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/21ec1613390ffe25d4ab8ffcc0ce3e5155940eef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/21ec1613390ffe25d4ab8ffcc0ce3e5155940eef","html_url":"https://github.com/apache/openjpa/commit/21ec1613390ffe25d4ab8ffcc0ce3e5155940eef","comments_url":"https://api.github.com/repos/apache/openjpa/commits/21ec1613390ffe25d4ab8ffcc0ce3e5155940eef/comments","author":null,"committer":null,"parents":[{"sha":"4fb39b9590374407c6d06bd48f6e9c6e9bac3505","url":"https://api.github.com/repos/apache/openjpa/commits/4fb39b9590374407c6d06bd48f6e9c6e9bac3505","html_url":"https://github.com/apache/openjpa/commit/4fb39b9590374407c6d06bd48f6e9c6e9bac3505"}]},{"sha":"99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5YmIxNjBkYWVlYzNjNjBiMmZhMWNiZDRmYjhmZTc3ODBmYzNmZGM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T09:20:56Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T09:20:56Z"},"message":"While looking at dynamic class loading, I noticed that we create a separate MappingRepository when doing an in-process schema redefinion. This seems to lead to potentially-out-of-sync states in the main configuration MappingRepository; this change shares the Configuration's repository with the MappingTool.\n\nIt looks like the old behavior was somewhat implicit, so I'm hoping that it wasn't necessary, and that this change will be a step forward.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@597002 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0e550db2484a43e8fc317d7a84f996a60c32e03a","url":"https://api.github.com/repos/apache/openjpa/git/trees/0e550db2484a43e8fc317d7a84f996a60c32e03a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc","html_url":"https://github.com/apache/openjpa/commit/99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc/comments","author":null,"committer":null,"parents":[{"sha":"21ec1613390ffe25d4ab8ffcc0ce3e5155940eef","url":"https://api.github.com/repos/apache/openjpa/commits/21ec1613390ffe25d4ab8ffcc0ce3e5155940eef","html_url":"https://github.com/apache/openjpa/commit/21ec1613390ffe25d4ab8ffcc0ce3e5155940eef"}]},{"sha":"c231cc814fed7c904880c3bb396d5be31d8fe397","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyMzFjYzgxNGZlZDdjOTA0ODgwYzNiYjM5NmQ1YmUzMWQ4ZmUzOTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T09:46:08Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T09:46:08Z"},"message":"Oops, it looks like this change wasn't passing. Not sure why it got committed; I thought I checked it in through the gatekeeper.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@597010 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83e7ac7e709e21dd93f9f054712f939ccf2763da","url":"https://api.github.com/repos/apache/openjpa/git/trees/83e7ac7e709e21dd93f9f054712f939ccf2763da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c231cc814fed7c904880c3bb396d5be31d8fe397","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c231cc814fed7c904880c3bb396d5be31d8fe397","html_url":"https://github.com/apache/openjpa/commit/c231cc814fed7c904880c3bb396d5be31d8fe397","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c231cc814fed7c904880c3bb396d5be31d8fe397/comments","author":null,"committer":null,"parents":[{"sha":"99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc","url":"https://api.github.com/repos/apache/openjpa/commits/99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc","html_url":"https://github.com/apache/openjpa/commit/99bb160daeec3c60b2fa1cbd4fb8fe7780fc3fdc"}]},{"sha":"fad6f352012ad403752eee463a5b6b3456fc0d74","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhZDZmMzUyMDEyYWQ0MDM3NTJlZWU0NjNhNWI2YjM0NTZmYzBkNzQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T11:42:01Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T11:42:01Z"},"message":"Removing the XML types from the default test runs to reduce complexity of unit test executions and to speed up overall test execution time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@597041 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a807e177afec6733ee49a80dbd9244e0b0a97ee9","url":"https://api.github.com/repos/apache/openjpa/git/trees/a807e177afec6733ee49a80dbd9244e0b0a97ee9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fad6f352012ad403752eee463a5b6b3456fc0d74","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fad6f352012ad403752eee463a5b6b3456fc0d74","html_url":"https://github.com/apache/openjpa/commit/fad6f352012ad403752eee463a5b6b3456fc0d74","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fad6f352012ad403752eee463a5b6b3456fc0d74/comments","author":null,"committer":null,"parents":[{"sha":"c231cc814fed7c904880c3bb396d5be31d8fe397","url":"https://api.github.com/repos/apache/openjpa/commits/c231cc814fed7c904880c3bb396d5be31d8fe397","html_url":"https://github.com/apache/openjpa/commit/c231cc814fed7c904880c3bb396d5be31d8fe397"}]},{"sha":"5018dfaa88189d72909b45ccde5cd722ed2bae10","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwMThkZmFhODgxODlkNzI5MDliNDVjY2RlNWNkNzIyZWQyYmFlMTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T17:40:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-21T17:40:54Z"},"message":"OPENJPA-126: EntityManager serializability. Also includes a fix to make LoadListener.afterRefresh() work. Committing directly (not via remote queue) as I'm about to lose my internet connection for a while. Hopefully, my local testing is accurate.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@597155 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5fb5f1f161ba1602bec780dcf75a19e531732b3a","url":"https://api.github.com/repos/apache/openjpa/git/trees/5fb5f1f161ba1602bec780dcf75a19e531732b3a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5018dfaa88189d72909b45ccde5cd722ed2bae10","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5018dfaa88189d72909b45ccde5cd722ed2bae10","html_url":"https://github.com/apache/openjpa/commit/5018dfaa88189d72909b45ccde5cd722ed2bae10","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5018dfaa88189d72909b45ccde5cd722ed2bae10/comments","author":null,"committer":null,"parents":[{"sha":"fad6f352012ad403752eee463a5b6b3456fc0d74","url":"https://api.github.com/repos/apache/openjpa/commits/fad6f352012ad403752eee463a5b6b3456fc0d74","html_url":"https://github.com/apache/openjpa/commit/fad6f352012ad403752eee463a5b6b3456fc0d74"}]},{"sha":"1946a9b0364cfffd39b4ca625dbdebcd8042b375","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5NDZhOWIwMzY0Y2ZmZmQzOWI0Y2E2MjVkYmRlYmNkODA0MmIzNzU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-27T08:35:35Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-27T08:35:35Z"},"message":"OPENJPA-9 not all configuration files are XML, so have getAnchorsInResource and getAnchorsInFile just return null if it isn't able to parse the specific configuration resources as XML\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@598557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d96d7312ec7f9eeb1e2f06529839dbce37be764","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d96d7312ec7f9eeb1e2f06529839dbce37be764"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1946a9b0364cfffd39b4ca625dbdebcd8042b375","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1946a9b0364cfffd39b4ca625dbdebcd8042b375","html_url":"https://github.com/apache/openjpa/commit/1946a9b0364cfffd39b4ca625dbdebcd8042b375","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1946a9b0364cfffd39b4ca625dbdebcd8042b375/comments","author":null,"committer":null,"parents":[{"sha":"5018dfaa88189d72909b45ccde5cd722ed2bae10","url":"https://api.github.com/repos/apache/openjpa/commits/5018dfaa88189d72909b45ccde5cd722ed2bae10","html_url":"https://github.com/apache/openjpa/commit/5018dfaa88189d72909b45ccde5cd722ed2bae10"}]},{"sha":"30024007cda04b1c6625f22fe4f49a64078047c4","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwMDI0MDA3Y2RhMDRiMWM2NjI1ZjIyZmU0ZjQ5YTY0MDc4MDQ3YzQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-28T00:25:53Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-28T00:25:53Z"},"message":"OPENJPA-223 Handle Indexes with multiple columns, which is a step towards a fix for OPENJPA-223\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@598829 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"84c68d4c775cf27fd3b330a8f3ec95d82f63b4b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/84c68d4c775cf27fd3b330a8f3ec95d82f63b4b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/30024007cda04b1c6625f22fe4f49a64078047c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/30024007cda04b1c6625f22fe4f49a64078047c4","html_url":"https://github.com/apache/openjpa/commit/30024007cda04b1c6625f22fe4f49a64078047c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/30024007cda04b1c6625f22fe4f49a64078047c4/comments","author":null,"committer":null,"parents":[{"sha":"1946a9b0364cfffd39b4ca625dbdebcd8042b375","url":"https://api.github.com/repos/apache/openjpa/commits/1946a9b0364cfffd39b4ca625dbdebcd8042b375","html_url":"https://github.com/apache/openjpa/commit/1946a9b0364cfffd39b4ca625dbdebcd8042b375"}]},{"sha":"5472692b411e87032a95e60ea0833b35b94695a0","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0NzI2OTJiNDExZTg3MDMyYTk1ZTYwZWEwODMzYjM1Yjk0Njk1YTA=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-28T22:51:18Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-28T22:51:18Z"},"message":"OPENJPA-401 Swapped the order of the class loaders since the previous fix for OPENJPA-401 was causing intermittent failures in loading metadata when the mappingtool task was being run.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599178 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e80da9ed71c64a7e95bc626bd39c5c9a723506bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/e80da9ed71c64a7e95bc626bd39c5c9a723506bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5472692b411e87032a95e60ea0833b35b94695a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5472692b411e87032a95e60ea0833b35b94695a0","html_url":"https://github.com/apache/openjpa/commit/5472692b411e87032a95e60ea0833b35b94695a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5472692b411e87032a95e60ea0833b35b94695a0/comments","author":null,"committer":null,"parents":[{"sha":"30024007cda04b1c6625f22fe4f49a64078047c4","url":"https://api.github.com/repos/apache/openjpa/commits/30024007cda04b1c6625f22fe4f49a64078047c4","html_url":"https://github.com/apache/openjpa/commit/30024007cda04b1c6625f22fe4f49a64078047c4"}]},{"sha":"55720f220bb769a21cb3161f240a9f7937d27dd6","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1NzIwZjIyMGJiNzY5YTIxY2IzMTYxZjI0MGE5Zjc5MzdkMjdkZDY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-28T23:13:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-28T23:13:50Z"},"message":"OPENJPA-455\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599192 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8b81fc6631779281afd5e4575fb6caa86f35c4e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/8b81fc6631779281afd5e4575fb6caa86f35c4e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55720f220bb769a21cb3161f240a9f7937d27dd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55720f220bb769a21cb3161f240a9f7937d27dd6","html_url":"https://github.com/apache/openjpa/commit/55720f220bb769a21cb3161f240a9f7937d27dd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55720f220bb769a21cb3161f240a9f7937d27dd6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5472692b411e87032a95e60ea0833b35b94695a0","url":"https://api.github.com/repos/apache/openjpa/commits/5472692b411e87032a95e60ea0833b35b94695a0","html_url":"https://github.com/apache/openjpa/commit/5472692b411e87032a95e60ea0833b35b94695a0"}]},{"sha":"1928eeb61111b92c0b594ce8286be973671d47e7","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5MjhlZWI2MTExMWI5MmMwYjU5NGNlODI4NmJlOTczNjcxZDQ3ZTc=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T00:52:16Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T00:52:16Z"},"message":"Returned initialize() to be public (which was made package-private in r597155 for some reason)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599230 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b1b06dde99eefe249b17b5d33c571f3594828bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b1b06dde99eefe249b17b5d33c571f3594828bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1928eeb61111b92c0b594ce8286be973671d47e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1928eeb61111b92c0b594ce8286be973671d47e7","html_url":"https://github.com/apache/openjpa/commit/1928eeb61111b92c0b594ce8286be973671d47e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1928eeb61111b92c0b594ce8286be973671d47e7/comments","author":null,"committer":null,"parents":[{"sha":"55720f220bb769a21cb3161f240a9f7937d27dd6","url":"https://api.github.com/repos/apache/openjpa/commits/55720f220bb769a21cb3161f240a9f7937d27dd6","html_url":"https://github.com/apache/openjpa/commit/55720f220bb769a21cb3161f240a9f7937d27dd6"}]},{"sha":"c97cd70b3e41db250a1b06e624dc233d5e271a85","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5N2NkNzBiM2U0MWRiMjUwYTFiMDZlNjI0ZGMyMzNkNWUyNzFhODU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T01:17:47Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T01:17:47Z"},"message":"Added nested stack trace to the MissingResourceException as an additional diagnostic for issues around ProductDerivations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599239 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3bd24cbe36a0c556a8396895477abbbed4abb63","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3bd24cbe36a0c556a8396895477abbbed4abb63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85","html_url":"https://github.com/apache/openjpa/commit/c97cd70b3e41db250a1b06e624dc233d5e271a85","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85/comments","author":null,"committer":null,"parents":[{"sha":"1928eeb61111b92c0b594ce8286be973671d47e7","url":"https://api.github.com/repos/apache/openjpa/commits/1928eeb61111b92c0b594ce8286be973671d47e7","html_url":"https://github.com/apache/openjpa/commit/1928eeb61111b92c0b594ce8286be973671d47e7"}]},{"sha":"860a260fe282a7fa1ea7911079484ac3e2a0f2d1","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2MGEyNjBmZTI4MmE3ZmExZWE3OTExMDc5NDg0YWMzZTJhMGYyZDE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-29T19:14:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-29T19:14:08Z"},"message":"OPENJPA-454\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599547 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"723676325af326e4d2d21130590bee247fbd2f65","url":"https://api.github.com/repos/apache/openjpa/git/trees/723676325af326e4d2d21130590bee247fbd2f65"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/860a260fe282a7fa1ea7911079484ac3e2a0f2d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/860a260fe282a7fa1ea7911079484ac3e2a0f2d1","html_url":"https://github.com/apache/openjpa/commit/860a260fe282a7fa1ea7911079484ac3e2a0f2d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/860a260fe282a7fa1ea7911079484ac3e2a0f2d1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c97cd70b3e41db250a1b06e624dc233d5e271a85","url":"https://api.github.com/repos/apache/openjpa/commits/c97cd70b3e41db250a1b06e624dc233d5e271a85","html_url":"https://github.com/apache/openjpa/commit/c97cd70b3e41db250a1b06e624dc233d5e271a85"}]},{"sha":"5e650f0ce356afea167d81c53b4ebd9203031cc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjVlNjUwZjBjZTM1NmFmZWExNjdkODFjNTNiNGViZDkyMDMwMzFjYzI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T22:08:54Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-11-29T22:08:54Z"},"message":"Changed JDK 1.5-specific String.contains() to JDK 1.4-compatible String.indexOf().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c160c9bba99c74ad02595df8e4dd5e111bc37b07","url":"https://api.github.com/repos/apache/openjpa/git/trees/c160c9bba99c74ad02595df8e4dd5e111bc37b07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5e650f0ce356afea167d81c53b4ebd9203031cc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5e650f0ce356afea167d81c53b4ebd9203031cc2","html_url":"https://github.com/apache/openjpa/commit/5e650f0ce356afea167d81c53b4ebd9203031cc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5e650f0ce356afea167d81c53b4ebd9203031cc2/comments","author":null,"committer":null,"parents":[{"sha":"860a260fe282a7fa1ea7911079484ac3e2a0f2d1","url":"https://api.github.com/repos/apache/openjpa/commits/860a260fe282a7fa1ea7911079484ac3e2a0f2d1","html_url":"https://github.com/apache/openjpa/commit/860a260fe282a7fa1ea7911079484ac3e2a0f2d1"}]},{"sha":"e503930afa3b607e55818d38f11ff9205553807a","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1MDM5MzBhZmEzYjYwN2U1NTgxOGQzOGYxMWZmOTIwNTU1MzgwN2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-12-05T15:57:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-12-05T15:57:23Z"},"message":"OPENJPA-456 committing patch provided by Teresa Kan\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@601379 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"af9432d7d0fcfc06180f50933363d1ea614e34b8","url":"https://api.github.com/repos/apache/openjpa/git/trees/af9432d7d0fcfc06180f50933363d1ea614e34b8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e503930afa3b607e55818d38f11ff9205553807a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e503930afa3b607e55818d38f11ff9205553807a","html_url":"https://github.com/apache/openjpa/commit/e503930afa3b607e55818d38f11ff9205553807a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e503930afa3b607e55818d38f11ff9205553807a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5e650f0ce356afea167d81c53b4ebd9203031cc2","url":"https://api.github.com/repos/apache/openjpa/commits/5e650f0ce356afea167d81c53b4ebd9203031cc2","html_url":"https://github.com/apache/openjpa/commit/5e650f0ce356afea167d81c53b4ebd9203031cc2"}]},{"sha":"d3fb4cabf89d9c80054a481cc6679158be665402","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzZmI0Y2FiZjg5ZDljODAwNTRhNDgxY2M2Njc5MTU4YmU2NjU0MDI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-12-05T23:37:34Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-12-05T23:37:34Z"},"message":"OPENJPA-460 Can't convert to: Time, InformixDictionary needs timeTypeName set to \"DATETIME HOUR TO SECOND\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@601576 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66365323cab186fffbc38dc3eab1f0f1be846b28","url":"https://api.github.com/repos/apache/openjpa/git/trees/66365323cab186fffbc38dc3eab1f0f1be846b28"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d3fb4cabf89d9c80054a481cc6679158be665402","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d3fb4cabf89d9c80054a481cc6679158be665402","html_url":"https://github.com/apache/openjpa/commit/d3fb4cabf89d9c80054a481cc6679158be665402","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d3fb4cabf89d9c80054a481cc6679158be665402/comments","author":null,"committer":null,"parents":[{"sha":"e503930afa3b607e55818d38f11ff9205553807a","url":"https://api.github.com/repos/apache/openjpa/commits/e503930afa3b607e55818d38f11ff9205553807a","html_url":"https://github.com/apache/openjpa/commit/e503930afa3b607e55818d38f11ff9205553807a"}]},{"sha":"88aa0ce910a9ea15033c6289337d8aec94445f09","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4YWEwY2U5MTBhOWVhMTUwMzNjNjI4OTMzN2Q4YWVjOTQ0NDVmMDk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T17:21:28Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T17:21:28Z"},"message":"OPENJPA-463: Added conf.OpenJPAVersion as the Main-Class in manifest\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@602971 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c63f8308a89f62a5e9ad0da5f2162a1b25001f33","url":"https://api.github.com/repos/apache/openjpa/git/trees/c63f8308a89f62a5e9ad0da5f2162a1b25001f33"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88aa0ce910a9ea15033c6289337d8aec94445f09","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88aa0ce910a9ea15033c6289337d8aec94445f09","html_url":"https://github.com/apache/openjpa/commit/88aa0ce910a9ea15033c6289337d8aec94445f09","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88aa0ce910a9ea15033c6289337d8aec94445f09/comments","author":null,"committer":null,"parents":[{"sha":"d3fb4cabf89d9c80054a481cc6679158be665402","url":"https://api.github.com/repos/apache/openjpa/commits/d3fb4cabf89d9c80054a481cc6679158be665402","html_url":"https://github.com/apache/openjpa/commit/d3fb4cabf89d9c80054a481cc6679158be665402"}]},{"sha":"a54f84262450b1cafe497ed0b058f1e9bd5f31bc","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1NGY4NDI2MjQ1MGIxY2FmZTQ5N2VkMGIwNThmMWU5YmQ1ZjMxYmM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T19:15:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T19:15:35Z"},"message":"OPENJPA-462: Narrow StoreException by SQLException.getSQLState()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bec2f16da4ebe0631afcb7dbd782cc64f8625190","url":"https://api.github.com/repos/apache/openjpa/git/trees/bec2f16da4ebe0631afcb7dbd782cc64f8625190"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","html_url":"https://github.com/apache/openjpa/commit/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc/comments","author":null,"committer":null,"parents":[{"sha":"88aa0ce910a9ea15033c6289337d8aec94445f09","url":"https://api.github.com/repos/apache/openjpa/commits/88aa0ce910a9ea15033c6289337d8aec94445f09","html_url":"https://github.com/apache/openjpa/commit/88aa0ce910a9ea15033c6289337d8aec94445f09"}]},{"sha":"38f41d870ee28de236a4bde5fa5331c04771eebf","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4ZjQxZDg3MGVlMjhkZTIzNmE0YmRlNWZhNTMzMWMwNDc3MWVlYmY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:11:22Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:11:22Z"},"message":"OPENJPA-462: Adding SQLState in DerbyDictionary to demonstrate specialization\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10183ce617a804c8efd3e544efb5d581b741c09c","url":"https://api.github.com/repos/apache/openjpa/git/trees/10183ce617a804c8efd3e544efb5d581b741c09c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38f41d870ee28de236a4bde5fa5331c04771eebf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38f41d870ee28de236a4bde5fa5331c04771eebf","html_url":"https://github.com/apache/openjpa/commit/38f41d870ee28de236a4bde5fa5331c04771eebf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38f41d870ee28de236a4bde5fa5331c04771eebf/comments","author":null,"committer":null,"parents":[{"sha":"a54f84262450b1cafe497ed0b058f1e9bd5f31bc","url":"https://api.github.com/repos/apache/openjpa/commits/a54f84262450b1cafe497ed0b058f1e9bd5f31bc","html_url":"https://github.com/apache/openjpa/commit/a54f84262450b1cafe497ed0b058f1e9bd5f31bc"}]},{"sha":"111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMTA5OGYxYjNhZjJhOGNiNjU2MThhNzhlYjFiYzliNTNkNmJkZGI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:13:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:13:20Z"},"message":"Shows the failed SQL Statement when things break rather than internal ExpContext object\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603031 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"30b33a8c63b3eb7ffa5c72005adee774188695a5","url":"https://api.github.com/repos/apache/openjpa/git/trees/30b33a8c63b3eb7ffa5c72005adee774188695a5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","html_url":"https://github.com/apache/openjpa/commit/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb/comments","author":null,"committer":null,"parents":[{"sha":"38f41d870ee28de236a4bde5fa5331c04771eebf","url":"https://api.github.com/repos/apache/openjpa/commits/38f41d870ee28de236a4bde5fa5331c04771eebf","html_url":"https://github.com/apache/openjpa/commit/38f41d870ee28de236a4bde5fa5331c04771eebf"}]},{"sha":"c00f3b5b788775703494a1566be6529d70e4f724","node_id":"MDY6Q29tbWl0MjA2MzY0OmMwMGYzYjViNzg4Nzc1NzAzNDk0YTE1NjZiZTY1MjlkNzBlNGY3MjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:16:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-10T20:16:11Z"},"message":"OPENJPA-462: Adding a Test case to verify correct exception type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603032 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a1492ea655aa3dc9badd1f4b67c87160024c266","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a1492ea655aa3dc9badd1f4b67c87160024c266"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c00f3b5b788775703494a1566be6529d70e4f724","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c00f3b5b788775703494a1566be6529d70e4f724","html_url":"https://github.com/apache/openjpa/commit/c00f3b5b788775703494a1566be6529d70e4f724","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c00f3b5b788775703494a1566be6529d70e4f724/comments","author":null,"committer":null,"parents":[{"sha":"111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","url":"https://api.github.com/repos/apache/openjpa/commits/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb","html_url":"https://github.com/apache/openjpa/commit/111098f1b3af2a8cb65618a78eb1bc9b53d6bddb"}]},{"sha":"265be5d1bdd5da5debf62bb1cfb0906c195d7f8b","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2NWJlNWQxYmRkNWRhNWRlYmY2MmJiMWNmYjA5MDZjMTk1ZDdmOGI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-11T02:15:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-11T02:15:28Z"},"message":"Tweak test case to report original error instead of cleanup error in the case where a test case failed and put things in a state that prevents cleanup from succeeding.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603119 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54d0b3f5abc270b4834a87a65a6457f862f38f71","url":"https://api.github.com/repos/apache/openjpa/git/trees/54d0b3f5abc270b4834a87a65a6457f862f38f71"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/265be5d1bdd5da5debf62bb1cfb0906c195d7f8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/265be5d1bdd5da5debf62bb1cfb0906c195d7f8b","html_url":"https://github.com/apache/openjpa/commit/265be5d1bdd5da5debf62bb1cfb0906c195d7f8b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/265be5d1bdd5da5debf62bb1cfb0906c195d7f8b/comments","author":null,"committer":null,"parents":[{"sha":"c00f3b5b788775703494a1566be6529d70e4f724","url":"https://api.github.com/repos/apache/openjpa/commits/c00f3b5b788775703494a1566be6529d70e4f724","html_url":"https://github.com/apache/openjpa/commit/c00f3b5b788775703494a1566be6529d70e4f724"}]},{"sha":"45eb530812221b3e2b0a4d095a703ea4b95a6f2a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1ZWI1MzA4MTIyMjFiM2UyYjBhNGQwOTVhNzAzZWE0Yjk1YTZmMmE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-12-12T14:59:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-12-12T14:59:12Z"},"message":"OPENJPA-456 committing patch provided by Teresa Kan\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603633 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df180a31a38eff446379979f2edc2a732576ca50","url":"https://api.github.com/repos/apache/openjpa/git/trees/df180a31a38eff446379979f2edc2a732576ca50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45eb530812221b3e2b0a4d095a703ea4b95a6f2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45eb530812221b3e2b0a4d095a703ea4b95a6f2a","html_url":"https://github.com/apache/openjpa/commit/45eb530812221b3e2b0a4d095a703ea4b95a6f2a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45eb530812221b3e2b0a4d095a703ea4b95a6f2a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"265be5d1bdd5da5debf62bb1cfb0906c195d7f8b","url":"https://api.github.com/repos/apache/openjpa/commits/265be5d1bdd5da5debf62bb1cfb0906c195d7f8b","html_url":"https://github.com/apache/openjpa/commit/265be5d1bdd5da5debf62bb1cfb0906c195d7f8b"}]},{"sha":"485372b3f66bff883a422b3de8966279a57589de","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4NTM3MmIzZjY2YmZmODgzYTQyMmIzZGU4OTY2Mjc5YTU3NTg5ZGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-12T16:32:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-12T16:32:28Z"},"message":"Change Services.getImplementorClasses(Class) and Services.getImplementorClasses(Class,ClassLoader) to filter out implementations that are not assignable to the Class argument. This allows the Services call to be more fault-tolerant in environments with odd classloader configurations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603666 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc71a4270bbcd5c99bbce2016488747c90ddc87a","url":"https://api.github.com/repos/apache/openjpa/git/trees/cc71a4270bbcd5c99bbce2016488747c90ddc87a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/485372b3f66bff883a422b3de8966279a57589de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/485372b3f66bff883a422b3de8966279a57589de","html_url":"https://github.com/apache/openjpa/commit/485372b3f66bff883a422b3de8966279a57589de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/485372b3f66bff883a422b3de8966279a57589de/comments","author":null,"committer":null,"parents":[{"sha":"45eb530812221b3e2b0a4d095a703ea4b95a6f2a","url":"https://api.github.com/repos/apache/openjpa/commits/45eb530812221b3e2b0a4d095a703ea4b95a6f2a","html_url":"https://github.com/apache/openjpa/commit/45eb530812221b3e2b0a4d095a703ea4b95a6f2a"}]},{"sha":"787b57a486877f695c55c54f7709428df18e64d9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4N2I1N2E0ODY4NzdmNjk1YzU1YzU0Zjc3MDk0MjhkZjE4ZTY0ZDk=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-12-14T21:26:02Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-12-14T21:26:02Z"},"message":"OPENJPA-9 Use the same criteria for resolving the configuration file for the purposes of listing all the anchors as we do for actually parsing the file itself. Fixes the problem where specifing the property \"persistence.xml\" was not actually resolving /META-INF/persistence.xml in order to obtain the list of anchors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604300 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b97a32dbc962294b61853e02256bb53152dd85a","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b97a32dbc962294b61853e02256bb53152dd85a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/787b57a486877f695c55c54f7709428df18e64d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/787b57a486877f695c55c54f7709428df18e64d9","html_url":"https://github.com/apache/openjpa/commit/787b57a486877f695c55c54f7709428df18e64d9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/787b57a486877f695c55c54f7709428df18e64d9/comments","author":null,"committer":null,"parents":[{"sha":"485372b3f66bff883a422b3de8966279a57589de","url":"https://api.github.com/repos/apache/openjpa/commits/485372b3f66bff883a422b3de8966279a57589de","html_url":"https://github.com/apache/openjpa/commit/485372b3f66bff883a422b3de8966279a57589de"}]},{"sha":"2c18b555c7f51d194efa6035f581a5bd65c950ac","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjMThiNTU1YzdmNTFkMTk0ZWZhNjAzNWY1ODFhNWJkNjVjOTUwYWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-14T22:35:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-14T22:35:06Z"},"message":"Allow JDBCStoreManager to avail configuration different than that of its StoreContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604318 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bf80c23fc9a57dd3071ac0c64281c15ca374cd3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/bf80c23fc9a57dd3071ac0c64281c15ca374cd3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c18b555c7f51d194efa6035f581a5bd65c950ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c18b555c7f51d194efa6035f581a5bd65c950ac","html_url":"https://github.com/apache/openjpa/commit/2c18b555c7f51d194efa6035f581a5bd65c950ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c18b555c7f51d194efa6035f581a5bd65c950ac/comments","author":null,"committer":null,"parents":[{"sha":"787b57a486877f695c55c54f7709428df18e64d9","url":"https://api.github.com/repos/apache/openjpa/commits/787b57a486877f695c55c54f7709428df18e64d9","html_url":"https://github.com/apache/openjpa/commit/787b57a486877f695c55c54f7709428df18e64d9"}]},{"sha":"7bd70d36dbf8737fb279beedcde7c46b95481c3b","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiZDcwZDM2ZGJmODczN2ZiMjc5YmVlZGNkZTdjNDZiOTU0ODFjM2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-14T23:00:46Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-14T23:00:46Z"},"message":"Allow JDBCStoreManager to avail configuration different than that of its StoreContext. Wrong tab corrected.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0fdba252ec9253250bff77a80743bb5f44fc547","url":"https://api.github.com/repos/apache/openjpa/git/trees/b0fdba252ec9253250bff77a80743bb5f44fc547"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7bd70d36dbf8737fb279beedcde7c46b95481c3b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7bd70d36dbf8737fb279beedcde7c46b95481c3b","html_url":"https://github.com/apache/openjpa/commit/7bd70d36dbf8737fb279beedcde7c46b95481c3b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7bd70d36dbf8737fb279beedcde7c46b95481c3b/comments","author":null,"committer":null,"parents":[{"sha":"2c18b555c7f51d194efa6035f581a5bd65c950ac","url":"https://api.github.com/repos/apache/openjpa/commits/2c18b555c7f51d194efa6035f581a5bd65c950ac","html_url":"https://github.com/apache/openjpa/commit/2c18b555c7f51d194efa6035f581a5bd65c950ac"}]},{"sha":"008b249c241dae1cc91a2c74f0621afc8947a5fa","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwOGIyNDljMjQxZGFlMWNjOTFhMmM3NGYwNjIxYWZjODk0N2E1ZmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-16T12:30:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-16T12:30:15Z"},"message":"OPENJPA-331. Checking in on behalf of Miroslav Nachev. Includes minor whitespace reformatting and @since tags for new source classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604621 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a1d753d1e3ed7ca5b79f2a234e731e1d2641c72","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a1d753d1e3ed7ca5b79f2a234e731e1d2641c72"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa","html_url":"https://github.com/apache/openjpa/commit/008b249c241dae1cc91a2c74f0621afc8947a5fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa/comments","author":null,"committer":null,"parents":[{"sha":"7bd70d36dbf8737fb279beedcde7c46b95481c3b","url":"https://api.github.com/repos/apache/openjpa/commits/7bd70d36dbf8737fb279beedcde7c46b95481c3b","html_url":"https://github.com/apache/openjpa/commit/7bd70d36dbf8737fb279beedcde7c46b95481c3b"}]},{"sha":"f185a0fe7b0d2316dff65237025caf53cd5d3fce","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxODVhMGZlN2IwZDIzMTZkZmY2NTIzNzAyNWNhZjUzY2Q1ZDNmY2U=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-16T18:38:24Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-16T18:38:24Z"},"message":"Doc improvement: added a cross-reference.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604668 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f226bc1434569e94249eeaacd3e003eb9d8adfdd","url":"https://api.github.com/repos/apache/openjpa/git/trees/f226bc1434569e94249eeaacd3e003eb9d8adfdd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f185a0fe7b0d2316dff65237025caf53cd5d3fce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f185a0fe7b0d2316dff65237025caf53cd5d3fce","html_url":"https://github.com/apache/openjpa/commit/f185a0fe7b0d2316dff65237025caf53cd5d3fce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f185a0fe7b0d2316dff65237025caf53cd5d3fce/comments","author":null,"committer":null,"parents":[{"sha":"008b249c241dae1cc91a2c74f0621afc8947a5fa","url":"https://api.github.com/repos/apache/openjpa/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa","html_url":"https://github.com/apache/openjpa/commit/008b249c241dae1cc91a2c74f0621afc8947a5fa"}]},{"sha":"84205d6d5040a9af6c14c86d9effc814a96abf73","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0MjA1ZDZkNTA0MGE5YWY2YzE0Yzg2ZDllZmZjODE0YTk2YWJmNzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-17T20:06:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-17T20:06:44Z"},"message":"Error message improvement: include nested exception in constructor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604981 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60da1ad2fb090b521c18014a6a1312468b0d2feb","url":"https://api.github.com/repos/apache/openjpa/git/trees/60da1ad2fb090b521c18014a6a1312468b0d2feb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/84205d6d5040a9af6c14c86d9effc814a96abf73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/84205d6d5040a9af6c14c86d9effc814a96abf73","html_url":"https://github.com/apache/openjpa/commit/84205d6d5040a9af6c14c86d9effc814a96abf73","comments_url":"https://api.github.com/repos/apache/openjpa/commits/84205d6d5040a9af6c14c86d9effc814a96abf73/comments","author":null,"committer":null,"parents":[{"sha":"f185a0fe7b0d2316dff65237025caf53cd5d3fce","url":"https://api.github.com/repos/apache/openjpa/commits/f185a0fe7b0d2316dff65237025caf53cd5d3fce","html_url":"https://github.com/apache/openjpa/commit/f185a0fe7b0d2316dff65237025caf53cd5d3fce"}]},{"sha":"ab88266f2aa9f0a95baa64f264efeb3ff79665b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiODgyNjZmMmFhOWYwYTk1YmFhNjRmMjY0ZWZlYjNmZjc5NjY1YjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-19T20:19:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-19T20:19:49Z"},"message":"OPENJPA-470. Added test case for custom sequence implementations, and updated docs with the current parentheses limitation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@605679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"968d1dcbfe0412eb551dae6ef5c10b05b5ad0ad9","url":"https://api.github.com/repos/apache/openjpa/git/trees/968d1dcbfe0412eb551dae6ef5c10b05b5ad0ad9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","html_url":"https://github.com/apache/openjpa/commit/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2/comments","author":null,"committer":null,"parents":[{"sha":"84205d6d5040a9af6c14c86d9effc814a96abf73","url":"https://api.github.com/repos/apache/openjpa/commits/84205d6d5040a9af6c14c86d9effc814a96abf73","html_url":"https://github.com/apache/openjpa/commit/84205d6d5040a9af6c14c86d9effc814a96abf73"}]},{"sha":"a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzYzJkMmE0ODc0YTNkZDRkOWMyOTEzNjdjNWFkMDQ5N2Y0NWQ2Zjg=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2007-12-24T16:25:07Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2007-12-24T16:25:07Z"},"message":"Harmless change to test commit ability\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@606709 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae7a080739774ed96fa1e92a90ffcbc3e11ea192","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae7a080739774ed96fa1e92a90ffcbc3e11ea192"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8","html_url":"https://github.com/apache/openjpa/commit/a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8/comments","author":null,"committer":null,"parents":[{"sha":"ab88266f2aa9f0a95baa64f264efeb3ff79665b2","url":"https://api.github.com/repos/apache/openjpa/commits/ab88266f2aa9f0a95baa64f264efeb3ff79665b2","html_url":"https://github.com/apache/openjpa/commit/ab88266f2aa9f0a95baa64f264efeb3ff79665b2"}]},{"sha":"e868210ca0b3c8a6b11f382ea0e403b4f85451df","node_id":"MDY6Q29tbWl0MjA2MzY0OmU4NjgyMTBjYTBiM2M4YTZiMTFmMzgyZWEwZTQwM2I0Zjg1NDUxZGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-26T21:02:43Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-12-26T21:02:43Z"},"message":"Allow read-only access to operating set of instances to extensions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@606946 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d12d927c350c97f92b43a672f0353c6fcc7b48d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/d12d927c350c97f92b43a672f0353c6fcc7b48d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e868210ca0b3c8a6b11f382ea0e403b4f85451df","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e868210ca0b3c8a6b11f382ea0e403b4f85451df","html_url":"https://github.com/apache/openjpa/commit/e868210ca0b3c8a6b11f382ea0e403b4f85451df","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e868210ca0b3c8a6b11f382ea0e403b4f85451df/comments","author":null,"committer":null,"parents":[{"sha":"a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8","url":"https://api.github.com/repos/apache/openjpa/commits/a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8","html_url":"https://github.com/apache/openjpa/commit/a3c2d2a4874a3dd4d9c291367c5ad0497f45d6f8"}]},{"sha":"69ee1ce7f0f6b819a38128ffeddbb5c235942af9","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5ZWUxY2U3ZjBmNmI4MTlhMzgxMjhmZmVkZGJiNWMyMzU5NDJhZjk=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-12-29T22:07:29Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2007-12-29T22:07:29Z"},"message":"OPENJPA-331 fix notices\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@607478 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf4722156e5ef4bb334096c9ad3617c3c8ff0b16","url":"https://api.github.com/repos/apache/openjpa/git/trees/cf4722156e5ef4bb334096c9ad3617c3c8ff0b16"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69ee1ce7f0f6b819a38128ffeddbb5c235942af9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69ee1ce7f0f6b819a38128ffeddbb5c235942af9","html_url":"https://github.com/apache/openjpa/commit/69ee1ce7f0f6b819a38128ffeddbb5c235942af9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69ee1ce7f0f6b819a38128ffeddbb5c235942af9/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"e868210ca0b3c8a6b11f382ea0e403b4f85451df","url":"https://api.github.com/repos/apache/openjpa/commits/e868210ca0b3c8a6b11f382ea0e403b4f85451df","html_url":"https://github.com/apache/openjpa/commit/e868210ca0b3c8a6b11f382ea0e403b4f85451df"}]},{"sha":"e11e2078af240018cc60fca04a8d6ded282d95d1","node_id":"MDY6Q29tbWl0MjA2MzY0OmUxMWUyMDc4YWYyNDAwMThjYzYwZmNhMDRhOGQ2ZGVkMjgyZDk1ZDE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-30T19:20:53Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-30T19:20:53Z"},"message":"removed incorrect premain class from interim jar\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@607583 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95c528eba3a83c03c601d783e9cfbb967e587a96","url":"https://api.github.com/repos/apache/openjpa/git/trees/95c528eba3a83c03c601d783e9cfbb967e587a96"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e11e2078af240018cc60fca04a8d6ded282d95d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e11e2078af240018cc60fca04a8d6ded282d95d1","html_url":"https://github.com/apache/openjpa/commit/e11e2078af240018cc60fca04a8d6ded282d95d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e11e2078af240018cc60fca04a8d6ded282d95d1/comments","author":null,"committer":null,"parents":[{"sha":"69ee1ce7f0f6b819a38128ffeddbb5c235942af9","url":"https://api.github.com/repos/apache/openjpa/commits/69ee1ce7f0f6b819a38128ffeddbb5c235942af9","html_url":"https://github.com/apache/openjpa/commit/69ee1ce7f0f6b819a38128ffeddbb5c235942af9"}]},{"sha":"288355f4ad85efabcaeae95e6e4b3ef49f82fb95","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4ODM1NWY0YWQ4NWVmYWJjYWVhZTk1ZTZlNGIzZWY0OWY4MmZiOTU=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2008-01-01T23:03:30Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2008-01-01T23:03:30Z"},"message":"Updated NOTICE to be consistent with other Apache NOTICE files\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@607941 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34477661540c206648f0d9ad464375ebb6e19052","url":"https://api.github.com/repos/apache/openjpa/git/trees/34477661540c206648f0d9ad464375ebb6e19052"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/288355f4ad85efabcaeae95e6e4b3ef49f82fb95","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/288355f4ad85efabcaeae95e6e4b3ef49f82fb95","html_url":"https://github.com/apache/openjpa/commit/288355f4ad85efabcaeae95e6e4b3ef49f82fb95","comments_url":"https://api.github.com/repos/apache/openjpa/commits/288355f4ad85efabcaeae95e6e4b3ef49f82fb95/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"e11e2078af240018cc60fca04a8d6ded282d95d1","url":"https://api.github.com/repos/apache/openjpa/commits/e11e2078af240018cc60fca04a8d6ded282d95d1","html_url":"https://github.com/apache/openjpa/commit/e11e2078af240018cc60fca04a8d6ded282d95d1"}]},{"sha":"4fda4e948461aa05d836fa25e3f2a2698f46e6da","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmZGE0ZTk0ODQ2MWFhMDVkODM2ZmEyNWUzZjJhMjY5OGY0NmU2ZGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-02T05:12:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-02T05:12:25Z"},"message":"Allow access to underlying DataSource for extensibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@608008 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d29b1cac848e1c9b36dca69d633d548f6690ec3f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d29b1cac848e1c9b36dca69d633d548f6690ec3f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4fda4e948461aa05d836fa25e3f2a2698f46e6da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4fda4e948461aa05d836fa25e3f2a2698f46e6da","html_url":"https://github.com/apache/openjpa/commit/4fda4e948461aa05d836fa25e3f2a2698f46e6da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4fda4e948461aa05d836fa25e3f2a2698f46e6da/comments","author":null,"committer":null,"parents":[{"sha":"288355f4ad85efabcaeae95e6e4b3ef49f82fb95","url":"https://api.github.com/repos/apache/openjpa/commits/288355f4ad85efabcaeae95e6e4b3ef49f82fb95","html_url":"https://github.com/apache/openjpa/commit/288355f4ad85efabcaeae95e6e4b3ef49f82fb95"}]},{"sha":"82cd11cb197b73cac01eb888875b1bba6202b609","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyY2QxMWNiMTk3YjczY2FjMDFlYjg4ODg3NWIxYmJhNjIwMmI2MDk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-02T05:14:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-02T05:14:52Z"},"message":"Do not throw exception when failed to lookup JNDI, rather return null. Callers handle null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@608009 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de4d27568b12e1ab2e545cad2c8348e019939c01","url":"https://api.github.com/repos/apache/openjpa/git/trees/de4d27568b12e1ab2e545cad2c8348e019939c01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82cd11cb197b73cac01eb888875b1bba6202b609","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82cd11cb197b73cac01eb888875b1bba6202b609","html_url":"https://github.com/apache/openjpa/commit/82cd11cb197b73cac01eb888875b1bba6202b609","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82cd11cb197b73cac01eb888875b1bba6202b609/comments","author":null,"committer":null,"parents":[{"sha":"4fda4e948461aa05d836fa25e3f2a2698f46e6da","url":"https://api.github.com/repos/apache/openjpa/commits/4fda4e948461aa05d836fa25e3f2a2698f46e6da","html_url":"https://github.com/apache/openjpa/commit/4fda4e948461aa05d836fa25e3f2a2698f46e6da"}]},{"sha":"4140d243a4b4c65cdaa9d43589c4c25263cbdb2b","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxNDBkMjQzYTRiNGM2NWNkYWE5ZDQzNTg5YzRjMjUyNjNjYmRiMmI=","commit":{"author":{"name":"Craig Russell","email":"clr@apache.org","date":"2008-01-02T17:45:12Z"},"committer":{"name":"Craig Russell","email":"clr@apache.org","date":"2008-01-02T17:45:12Z"},"message":"OPENJPA-452 Fixed xml in secondary table mapping example. Patch contributed by Ignacio Andreu\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@608157 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dbedecf4582ba89015c7f66e9048bb97adc5e8fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/dbedecf4582ba89015c7f66e9048bb97adc5e8fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4140d243a4b4c65cdaa9d43589c4c25263cbdb2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4140d243a4b4c65cdaa9d43589c4c25263cbdb2b","html_url":"https://github.com/apache/openjpa/commit/4140d243a4b4c65cdaa9d43589c4c25263cbdb2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4140d243a4b4c65cdaa9d43589c4c25263cbdb2b/comments","author":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"committer":{"login":"papajdo","id":2455884,"node_id":"MDQ6VXNlcjI0NTU4ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/2455884?v=4","gravatar_id":"","url":"https://api.github.com/users/papajdo","html_url":"https://github.com/papajdo","followers_url":"https://api.github.com/users/papajdo/followers","following_url":"https://api.github.com/users/papajdo/following{/other_user}","gists_url":"https://api.github.com/users/papajdo/gists{/gist_id}","starred_url":"https://api.github.com/users/papajdo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/papajdo/subscriptions","organizations_url":"https://api.github.com/users/papajdo/orgs","repos_url":"https://api.github.com/users/papajdo/repos","events_url":"https://api.github.com/users/papajdo/events{/privacy}","received_events_url":"https://api.github.com/users/papajdo/received_events","type":"User","site_admin":false},"parents":[{"sha":"82cd11cb197b73cac01eb888875b1bba6202b609","url":"https://api.github.com/repos/apache/openjpa/commits/82cd11cb197b73cac01eb888875b1bba6202b609","html_url":"https://github.com/apache/openjpa/commit/82cd11cb197b73cac01eb888875b1bba6202b609"}]},{"sha":"6f29454e48415ac92f14e407119a69dfcddea9c4","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmMjk0NTRlNDg0MTVhYzkyZjE0ZTQwNzExOWE2OWRmY2RkZWE5YzQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:56:22Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:56:22Z"},"message":"Small log clarification.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@609775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c82d48a4f063c832f31c6d660c1f803c2d41b34","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c82d48a4f063c832f31c6d660c1f803c2d41b34"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f29454e48415ac92f14e407119a69dfcddea9c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f29454e48415ac92f14e407119a69dfcddea9c4","html_url":"https://github.com/apache/openjpa/commit/6f29454e48415ac92f14e407119a69dfcddea9c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f29454e48415ac92f14e407119a69dfcddea9c4/comments","author":null,"committer":null,"parents":[{"sha":"4140d243a4b4c65cdaa9d43589c4c25263cbdb2b","url":"https://api.github.com/repos/apache/openjpa/commits/4140d243a4b4c65cdaa9d43589c4c25263cbdb2b","html_url":"https://github.com/apache/openjpa/commit/4140d243a4b4c65cdaa9d43589c4c25263cbdb2b"}]},{"sha":"5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMGI1YjM5ZTdjNmZlMzU0ZTcyMmFiNDY3YmRmMzU1ZGRkM2ZmODU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:58:01Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:58:01Z"},"message":"Write output to the logging channels instead of to stdout.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@609776 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63beff932cba4c681fe1ce719606d90c4bc33653","url":"https://api.github.com/repos/apache/openjpa/git/trees/63beff932cba4c681fe1ce719606d90c4bc33653"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","html_url":"https://github.com/apache/openjpa/commit/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85/comments","author":null,"committer":null,"parents":[{"sha":"6f29454e48415ac92f14e407119a69dfcddea9c4","url":"https://api.github.com/repos/apache/openjpa/commits/6f29454e48415ac92f14e407119a69dfcddea9c4","html_url":"https://github.com/apache/openjpa/commit/6f29454e48415ac92f14e407119a69dfcddea9c4"}]},{"sha":"26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2ZWY5ZGRhYmJiM2RlYjNmN2ZiOGY4MTQ1ZGRjMzEzMWVjNTFlNWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-08T00:57:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-08T00:57:05Z"},"message":"Obtain the DBDictionary up-front in the mapping tool constructor to ensure that the dictionary is fully configured with connection-specific information.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@609824 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46627b43b3262c477170767ec9707795341fcf37","url":"https://api.github.com/repos/apache/openjpa/git/trees/46627b43b3262c477170767ec9707795341fcf37"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","html_url":"https://github.com/apache/openjpa/commit/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c/comments","author":null,"committer":null,"parents":[{"sha":"5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","url":"https://api.github.com/repos/apache/openjpa/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","html_url":"https://github.com/apache/openjpa/commit/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85"}]},{"sha":"07c046a077f265309f6844938824f9562cce286e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3YzA0NmEwNzdmMjY1MzA5ZjY4NDQ5Mzg4MjRmOTU2MmNjZTI4NmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-08T01:03:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-08T01:03:43Z"},"message":"Oops; earlier refactoring was not complete.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@609825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"229cc3d196e4a7c04cd9adf25201b06fca21da2c","url":"https://api.github.com/repos/apache/openjpa/git/trees/229cc3d196e4a7c04cd9adf25201b06fca21da2c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07c046a077f265309f6844938824f9562cce286e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07c046a077f265309f6844938824f9562cce286e","html_url":"https://github.com/apache/openjpa/commit/07c046a077f265309f6844938824f9562cce286e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07c046a077f265309f6844938824f9562cce286e/comments","author":null,"committer":null,"parents":[{"sha":"26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","url":"https://api.github.com/repos/apache/openjpa/commits/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","html_url":"https://github.com/apache/openjpa/commit/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c"}]},{"sha":"d621aa765d1a4185c557c078092e27f8881f6228","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ2MjFhYTc2NWQxYTQxODVjNTU3YzA3ODA5MmUyN2Y4ODgxZjYyMjg=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-01-09T15:59:39Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-01-09T15:59:39Z"},"message":"Removed duplicate prefixing of schema name in resolveTableName\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@610427 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c7d34dc8e4677c102659cc25d409c1cbc7a8f14","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c7d34dc8e4677c102659cc25d409c1cbc7a8f14"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d621aa765d1a4185c557c078092e27f8881f6228","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d621aa765d1a4185c557c078092e27f8881f6228","html_url":"https://github.com/apache/openjpa/commit/d621aa765d1a4185c557c078092e27f8881f6228","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d621aa765d1a4185c557c078092e27f8881f6228/comments","author":null,"committer":null,"parents":[{"sha":"07c046a077f265309f6844938824f9562cce286e","url":"https://api.github.com/repos/apache/openjpa/commits/07c046a077f265309f6844938824f9562cce286e","html_url":"https://github.com/apache/openjpa/commit/07c046a077f265309f6844938824f9562cce286e"}]},{"sha":"0d3bc96fcb3ce692bf088c5cab91cfa309013a32","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkM2JjOTZmY2IzY2U2OTJiZjA4OGM1Y2FiOTFjZmEzMDkwMTNhMzI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-10T06:55:17Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-10T06:55:17Z"},"message":"OPENJPA-471 iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.IDENTITY)\nor @GeneratedValue(strategy=GenerationType.SEQUENCE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@610697 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a891f511ef7660b18432819f62ba32476b1c2d81","url":"https://api.github.com/repos/apache/openjpa/git/trees/a891f511ef7660b18432819f62ba32476b1c2d81"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d3bc96fcb3ce692bf088c5cab91cfa309013a32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d3bc96fcb3ce692bf088c5cab91cfa309013a32","html_url":"https://github.com/apache/openjpa/commit/0d3bc96fcb3ce692bf088c5cab91cfa309013a32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d3bc96fcb3ce692bf088c5cab91cfa309013a32/comments","author":null,"committer":null,"parents":[{"sha":"d621aa765d1a4185c557c078092e27f8881f6228","url":"https://api.github.com/repos/apache/openjpa/commits/d621aa765d1a4185c557c078092e27f8881f6228","html_url":"https://github.com/apache/openjpa/commit/d621aa765d1a4185c557c078092e27f8881f6228"}]},{"sha":"2933147f53d43377613e9d51d51f9a55df75346e","node_id":"MDY6Q29tbWl0MjA2MzY0OjI5MzMxNDdmNTNkNDMzNzc2MTNlOWQ1MWQ1MWY5YTU1ZGY3NTM0NmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-10T20:37:36Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-10T20:37:36Z"},"message":"proxy collection optimization for adding to the end of a list vs. adding elsewhere\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@610922 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1083a2aba7e408aadaf3912eccbaa0dc604f3e79","url":"https://api.github.com/repos/apache/openjpa/git/trees/1083a2aba7e408aadaf3912eccbaa0dc604f3e79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2933147f53d43377613e9d51d51f9a55df75346e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2933147f53d43377613e9d51d51f9a55df75346e","html_url":"https://github.com/apache/openjpa/commit/2933147f53d43377613e9d51d51f9a55df75346e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2933147f53d43377613e9d51d51f9a55df75346e/comments","author":null,"committer":null,"parents":[{"sha":"0d3bc96fcb3ce692bf088c5cab91cfa309013a32","url":"https://api.github.com/repos/apache/openjpa/commits/0d3bc96fcb3ce692bf088c5cab91cfa309013a32","html_url":"https://github.com/apache/openjpa/commit/0d3bc96fcb3ce692bf088c5cab91cfa309013a32"}]},{"sha":"d4a2929a579f5a484ee5893330bb88cc64464aa0","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0YTI5MjlhNTc5ZjVhNDg0ZWU1ODkzMzMwYmI4OGNjNjQ0NjRhYTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-10T20:44:35Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-10T20:44:35Z"},"message":"OPENJPA-147 -- managed interface support. Also includes failure test case for OPENJPA-481.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@610924 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb4c407290eeb089f0b75d6928a6688a9040ab01","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb4c407290eeb089f0b75d6928a6688a9040ab01"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0","html_url":"https://github.com/apache/openjpa/commit/d4a2929a579f5a484ee5893330bb88cc64464aa0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0/comments","author":null,"committer":null,"parents":[{"sha":"2933147f53d43377613e9d51d51f9a55df75346e","url":"https://api.github.com/repos/apache/openjpa/commits/2933147f53d43377613e9d51d51f9a55df75346e","html_url":"https://github.com/apache/openjpa/commit/2933147f53d43377613e9d51d51f9a55df75346e"}]},{"sha":"72f7d7ce4365d531bc1111fee278256bd994a21f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZjdkN2NlNDM2NWQ1MzFiYzExMTFmZWUyNzgyNTZiZDk5NGEyMWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-11T00:28:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-11T00:28:55Z"},"message":"OPENJPA-147: added license headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@610999 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"842825d9b8975620a5ec4c0bbf6f1f68c6b1cb49","url":"https://api.github.com/repos/apache/openjpa/git/trees/842825d9b8975620a5ec4c0bbf6f1f68c6b1cb49"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72f7d7ce4365d531bc1111fee278256bd994a21f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72f7d7ce4365d531bc1111fee278256bd994a21f","html_url":"https://github.com/apache/openjpa/commit/72f7d7ce4365d531bc1111fee278256bd994a21f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72f7d7ce4365d531bc1111fee278256bd994a21f/comments","author":null,"committer":null,"parents":[{"sha":"d4a2929a579f5a484ee5893330bb88cc64464aa0","url":"https://api.github.com/repos/apache/openjpa/commits/d4a2929a579f5a484ee5893330bb88cc64464aa0","html_url":"https://github.com/apache/openjpa/commit/d4a2929a579f5a484ee5893330bb88cc64464aa0"}]},{"sha":"8c4cf9511edfc1a505ae639204b14f06a12ce739","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjNGNmOTUxMWVkZmMxYTUwNWFlNjM5MjA0YjE0ZjA2YTEyY2U3Mzk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T03:49:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T03:49:23Z"},"message":"OPENJPA-488, OPENJPA-489, OPENJPA-490, OPENJPA-491, OPENJPA-492\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612345 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8a78b8938e2678a2878fddc0ea52301d32f78022","url":"https://api.github.com/repos/apache/openjpa/git/trees/8a78b8938e2678a2878fddc0ea52301d32f78022"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739","html_url":"https://github.com/apache/openjpa/commit/8c4cf9511edfc1a505ae639204b14f06a12ce739","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739/comments","author":null,"committer":null,"parents":[{"sha":"72f7d7ce4365d531bc1111fee278256bd994a21f","url":"https://api.github.com/repos/apache/openjpa/commits/72f7d7ce4365d531bc1111fee278256bd994a21f","html_url":"https://github.com/apache/openjpa/commit/72f7d7ce4365d531bc1111fee278256bd994a21f"}]},{"sha":"3d3cb67c5a5144afd49d23195a3ae0f50595ed98","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkM2NiNjdjNWE1MTQ0YWZkNDlkMjMxOTVhM2FlMGY1MDU5NWVkOTg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T04:18:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T04:18:19Z"},"message":"OPENJPA-488, OPENJPA-489, OPENJPA-490, OPENJPA-491, OPENJPA-492. Adding omitted license headers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612347 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6b74c9b522bc20f24ff8db70ae8bcd530129dee","url":"https://api.github.com/repos/apache/openjpa/git/trees/e6b74c9b522bc20f24ff8db70ae8bcd530129dee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3d3cb67c5a5144afd49d23195a3ae0f50595ed98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3d3cb67c5a5144afd49d23195a3ae0f50595ed98","html_url":"https://github.com/apache/openjpa/commit/3d3cb67c5a5144afd49d23195a3ae0f50595ed98","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3d3cb67c5a5144afd49d23195a3ae0f50595ed98/comments","author":null,"committer":null,"parents":[{"sha":"8c4cf9511edfc1a505ae639204b14f06a12ce739","url":"https://api.github.com/repos/apache/openjpa/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739","html_url":"https://github.com/apache/openjpa/commit/8c4cf9511edfc1a505ae639204b14f06a12ce739"}]},{"sha":"206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwNmYwZjA0ZTFkNmQyOGI3YTFhOGM3MTY2YmY3ZTVlMzY2YjVkZGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T04:35:26Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T04:35:26Z"},"message":"OPENJPA-488, OPENJPA-489, OPENJPA-490, OPENJPA-491, OPENJPA-492. Reduce logging in test case; use onlyChild() to validate tree structure.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612348 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8542f77a710b92c3587583ea92d94eccc0090868","url":"https://api.github.com/repos/apache/openjpa/git/trees/8542f77a710b92c3587583ea92d94eccc0090868"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde","html_url":"https://github.com/apache/openjpa/commit/206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde","comments_url":"https://api.github.com/repos/apache/openjpa/commits/206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde/comments","author":null,"committer":null,"parents":[{"sha":"3d3cb67c5a5144afd49d23195a3ae0f50595ed98","url":"https://api.github.com/repos/apache/openjpa/commits/3d3cb67c5a5144afd49d23195a3ae0f50595ed98","html_url":"https://github.com/apache/openjpa/commit/3d3cb67c5a5144afd49d23195a3ae0f50595ed98"}]},{"sha":"8464ea75f10492f7f815ccd1c3604dc238f8cfc0","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0NjRlYTc1ZjEwNDkyZjdmODE1Y2NkMWMzNjA0ZGMyMzhmOGNmYzA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T17:25:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T17:25:47Z"},"message":"OPENJPA-488. HSQL override is no longer necessary; correct if clause in DBDictionary.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612523 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b87bf94e541dca3c7c11be2b294b685f641b83f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b87bf94e541dca3c7c11be2b294b685f641b83f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8464ea75f10492f7f815ccd1c3604dc238f8cfc0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8464ea75f10492f7f815ccd1c3604dc238f8cfc0","html_url":"https://github.com/apache/openjpa/commit/8464ea75f10492f7f815ccd1c3604dc238f8cfc0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8464ea75f10492f7f815ccd1c3604dc238f8cfc0/comments","author":null,"committer":null,"parents":[{"sha":"206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde","url":"https://api.github.com/repos/apache/openjpa/commits/206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde","html_url":"https://github.com/apache/openjpa/commit/206f0f04e1d6d28b7a1a8c7166bf7e5e366b5dde"}]},{"sha":"240d356314bb8662101ac87c1e2e97ebf829c4b2","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0MGQzNTYzMTRiYjg2NjIxMDFhYzg3YzFlMmU5N2ViZjgyOWM0YjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-16T22:01:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-16T22:01:42Z"},"message":"OPENJPA-495 Populate Ordering/ProjectClauses from JPQL parser to be used for merging multiple ordered results\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612583 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e8b4446d2369076407bf730e165a5371a59d0db","url":"https://api.github.com/repos/apache/openjpa/git/trees/3e8b4446d2369076407bf730e165a5371a59d0db"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2","html_url":"https://github.com/apache/openjpa/commit/240d356314bb8662101ac87c1e2e97ebf829c4b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2/comments","author":null,"committer":null,"parents":[{"sha":"8464ea75f10492f7f815ccd1c3604dc238f8cfc0","url":"https://api.github.com/repos/apache/openjpa/commits/8464ea75f10492f7f815ccd1c3604dc238f8cfc0","html_url":"https://github.com/apache/openjpa/commit/8464ea75f10492f7f815ccd1c3604dc238f8cfc0"}]},{"sha":"7f797f0226382b919e7353060d108d9e519e90dc","node_id":"MDY6Q29tbWl0MjA2MzY0OjdmNzk3ZjAyMjYzODJiOTE5ZTczNTMwNjBkMTA4ZDllNTE5ZTkwZGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-17T15:35:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-17T15:35:45Z"},"message":"OPENJPA-437.  Changed AbstractBrokerFactory.loadPersistentTypes to be synchronized to get around the multi-threading issue during broker creation.\n\nAlso, migrated the change for OPENJPA-449 from trunk to the 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ead86744806d3bd7f7e0b5fddaff0637e7f8832b","url":"https://api.github.com/repos/apache/openjpa/git/trees/ead86744806d3bd7f7e0b5fddaff0637e7f8832b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7f797f0226382b919e7353060d108d9e519e90dc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7f797f0226382b919e7353060d108d9e519e90dc","html_url":"https://github.com/apache/openjpa/commit/7f797f0226382b919e7353060d108d9e519e90dc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7f797f0226382b919e7353060d108d9e519e90dc/comments","author":null,"committer":null,"parents":[{"sha":"240d356314bb8662101ac87c1e2e97ebf829c4b2","url":"https://api.github.com/repos/apache/openjpa/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2","html_url":"https://github.com/apache/openjpa/commit/240d356314bb8662101ac87c1e2e97ebf829c4b2"}]},{"sha":"92d1334e52ad95bc637260eb60b32b03598e61b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyZDEzMzRlNTJhZDk1YmM2MzcyNjBlYjYwYjMyYjAzNTk4ZTYxYjg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-19T00:55:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-19T00:55:19Z"},"message":"OPENJPA-498. Resolve this by not removing if the prop is not set; the prop in question is only ever set internally anyways when EMF pooling is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@613332 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e62e1345677fac37daede9ebda5209df4a7cc30","url":"https://api.github.com/repos/apache/openjpa/git/trees/3e62e1345677fac37daede9ebda5209df4a7cc30"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/92d1334e52ad95bc637260eb60b32b03598e61b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/92d1334e52ad95bc637260eb60b32b03598e61b8","html_url":"https://github.com/apache/openjpa/commit/92d1334e52ad95bc637260eb60b32b03598e61b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/92d1334e52ad95bc637260eb60b32b03598e61b8/comments","author":null,"committer":null,"parents":[{"sha":"7f797f0226382b919e7353060d108d9e519e90dc","url":"https://api.github.com/repos/apache/openjpa/commits/7f797f0226382b919e7353060d108d9e519e90dc","html_url":"https://github.com/apache/openjpa/commit/7f797f0226382b919e7353060d108d9e519e90dc"}]},{"sha":"4d9a6759db880b67adf9cd233528da021524dc99","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkOWE2NzU5ZGI4ODBiNjdhZGY5Y2QyMzM1MjhkYTAyMTUyNGRjOTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-01-23T15:16:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-01-23T15:16:01Z"},"message":"OPENJPA-245\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614563 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca0fdd08cb4776bf91bfee505cbeaaff4cd4690c","url":"https://api.github.com/repos/apache/openjpa/git/trees/ca0fdd08cb4776bf91bfee505cbeaaff4cd4690c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d9a6759db880b67adf9cd233528da021524dc99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d9a6759db880b67adf9cd233528da021524dc99","html_url":"https://github.com/apache/openjpa/commit/4d9a6759db880b67adf9cd233528da021524dc99","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d9a6759db880b67adf9cd233528da021524dc99/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"92d1334e52ad95bc637260eb60b32b03598e61b8","url":"https://api.github.com/repos/apache/openjpa/commits/92d1334e52ad95bc637260eb60b32b03598e61b8","html_url":"https://github.com/apache/openjpa/commit/92d1334e52ad95bc637260eb60b32b03598e61b8"}]},{"sha":"3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhYTYwMDA3ZGRmOGVhZDkwYjJmYTVhYTRjNDRmNzMxZGZhODZlMDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T17:22:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T17:22:55Z"},"message":"OPENJPA-500\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614583 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae13326eea0a47c3a935f802f10c27906b971169","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae13326eea0a47c3a935f802f10c27906b971169"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","html_url":"https://github.com/apache/openjpa/commit/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04/comments","author":null,"committer":null,"parents":[{"sha":"4d9a6759db880b67adf9cd233528da021524dc99","url":"https://api.github.com/repos/apache/openjpa/commits/4d9a6759db880b67adf9cd233528da021524dc99","html_url":"https://github.com/apache/openjpa/commit/4d9a6759db880b67adf9cd233528da021524dc99"}]},{"sha":"13dd4f22526a57f27c1b4bbb89619b11af31815a","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzZGQ0ZjIyNTI2YTU3ZjI3YzFiNGJiYjg5NjE5YjExYWYzMTgxNWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T18:15:09Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T18:15:09Z"},"message":"Improve error message when checking metadata access types; correct recursive method to always include superclass information.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614606 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b7772a5d6a9bce4d3cc38109b139e63b16818952","url":"https://api.github.com/repos/apache/openjpa/git/trees/b7772a5d6a9bce4d3cc38109b139e63b16818952"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a","html_url":"https://github.com/apache/openjpa/commit/13dd4f22526a57f27c1b4bbb89619b11af31815a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a/comments","author":null,"committer":null,"parents":[{"sha":"3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","url":"https://api.github.com/repos/apache/openjpa/commits/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","html_url":"https://github.com/apache/openjpa/commit/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04"}]},{"sha":"95018cef64b459002d572ac0c1452e6ad8500cea","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk1MDE4Y2VmNjRiNDU5MDAyZDU3MmFjMGMxNDUyZTZhZDg1MDBjZWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T19:51:45Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T19:51:45Z"},"message":"OPENJPA-430. Fixed bug that passed all column name checks through to the DBDictionary for potential renaming even when _defMissing is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614640 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1189938d0e4838c4d7d066f59580c16668f94cf7","url":"https://api.github.com/repos/apache/openjpa/git/trees/1189938d0e4838c4d7d066f59580c16668f94cf7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/95018cef64b459002d572ac0c1452e6ad8500cea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/95018cef64b459002d572ac0c1452e6ad8500cea","html_url":"https://github.com/apache/openjpa/commit/95018cef64b459002d572ac0c1452e6ad8500cea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/95018cef64b459002d572ac0c1452e6ad8500cea/comments","author":null,"committer":null,"parents":[{"sha":"13dd4f22526a57f27c1b4bbb89619b11af31815a","url":"https://api.github.com/repos/apache/openjpa/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a","html_url":"https://github.com/apache/openjpa/commit/13dd4f22526a57f27c1b4bbb89619b11af31815a"}]},{"sha":"72aefb149b493ca812d2dd03fc555ca8b1a6e961","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyYWVmYjE0OWI0OTNjYTgxMmQyZGQwM2ZjNTU1Y2E4YjFhNmU5NjE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T19:54:29Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T19:54:29Z"},"message":"OPENJPA-430. Docs update.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614643 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1e12a2a084c1e647451776d167253c3898a7ac2","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1e12a2a084c1e647451776d167253c3898a7ac2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72aefb149b493ca812d2dd03fc555ca8b1a6e961","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72aefb149b493ca812d2dd03fc555ca8b1a6e961","html_url":"https://github.com/apache/openjpa/commit/72aefb149b493ca812d2dd03fc555ca8b1a6e961","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72aefb149b493ca812d2dd03fc555ca8b1a6e961/comments","author":null,"committer":null,"parents":[{"sha":"95018cef64b459002d572ac0c1452e6ad8500cea","url":"https://api.github.com/repos/apache/openjpa/commits/95018cef64b459002d572ac0c1452e6ad8500cea","html_url":"https://github.com/apache/openjpa/commit/95018cef64b459002d572ac0c1452e6ad8500cea"}]},{"sha":"8d18daabd722e39dae258ab33f74c561b4965496","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkMThkYWFiZDcyMmUzOWRhZTI1OGFiMzNmNzRjNTYxYjQ5NjU0OTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-01-23T23:25:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-01-23T23:25:56Z"},"message":"OPENJPA-464 committing patch provided by Teresa Kan\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614731 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31d86fd9095744db45249ccc43a6d536314a99d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/31d86fd9095744db45249ccc43a6d536314a99d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8d18daabd722e39dae258ab33f74c561b4965496","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8d18daabd722e39dae258ab33f74c561b4965496","html_url":"https://github.com/apache/openjpa/commit/8d18daabd722e39dae258ab33f74c561b4965496","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8d18daabd722e39dae258ab33f74c561b4965496/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"72aefb149b493ca812d2dd03fc555ca8b1a6e961","url":"https://api.github.com/repos/apache/openjpa/commits/72aefb149b493ca812d2dd03fc555ca8b1a6e961","html_url":"https://github.com/apache/openjpa/commit/72aefb149b493ca812d2dd03fc555ca8b1a6e961"}]},{"sha":"a8f6d3c116564b1af3bbbc8319ba0715c042750a","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4ZjZkM2MxMTY1NjRiMWFmM2JiYmM4MzE5YmEwNzE1YzA0Mjc1MGE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-24T01:33:48Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-24T01:33:48Z"},"message":"OPENJPA-477 Making StoreManager more flexible and extensible\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614763 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f73b9d3f89d4ecd7fca0a7fea00b7ad822f80f1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/f73b9d3f89d4ecd7fca0a7fea00b7ad822f80f1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8f6d3c116564b1af3bbbc8319ba0715c042750a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8f6d3c116564b1af3bbbc8319ba0715c042750a","html_url":"https://github.com/apache/openjpa/commit/a8f6d3c116564b1af3bbbc8319ba0715c042750a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8f6d3c116564b1af3bbbc8319ba0715c042750a/comments","author":null,"committer":null,"parents":[{"sha":"8d18daabd722e39dae258ab33f74c561b4965496","url":"https://api.github.com/repos/apache/openjpa/commits/8d18daabd722e39dae258ab33f74c561b4965496","html_url":"https://github.com/apache/openjpa/commit/8d18daabd722e39dae258ab33f74c561b4965496"}]},{"sha":"6a29ebffe46e6e3d61d41a3b87442a94307a73a6","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhMjllYmZmZTQ2ZTZlM2Q2MWQ0MWEzYjg3NDQyYTk0MzA3YTczYTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T06:56:14Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T06:56:14Z"},"message":"OPENJPA-503\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19e1271ccb0d4cdb4fd2827bd2130770f54973a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/19e1271ccb0d4cdb4fd2827bd2130770f54973a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6a29ebffe46e6e3d61d41a3b87442a94307a73a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6a29ebffe46e6e3d61d41a3b87442a94307a73a6","html_url":"https://github.com/apache/openjpa/commit/6a29ebffe46e6e3d61d41a3b87442a94307a73a6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6a29ebffe46e6e3d61d41a3b87442a94307a73a6/comments","author":null,"committer":null,"parents":[{"sha":"a8f6d3c116564b1af3bbbc8319ba0715c042750a","url":"https://api.github.com/repos/apache/openjpa/commits/a8f6d3c116564b1af3bbbc8319ba0715c042750a","html_url":"https://github.com/apache/openjpa/commit/a8f6d3c116564b1af3bbbc8319ba0715c042750a"}]},{"sha":"5a1faec4719c40ee0769901f2b4a959084e67cd9","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMWZhZWM0NzE5YzQwZWUwNzY5OTAxZjJiNGE5NTkwODRlNjdjZDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T07:33:32Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T07:33:32Z"},"message":"OPENJPA-502\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13a062e908b94a038ce43fa0986a673cf67aa3e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/13a062e908b94a038ce43fa0986a673cf67aa3e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9","html_url":"https://github.com/apache/openjpa/commit/5a1faec4719c40ee0769901f2b4a959084e67cd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9/comments","author":null,"committer":null,"parents":[{"sha":"6a29ebffe46e6e3d61d41a3b87442a94307a73a6","url":"https://api.github.com/repos/apache/openjpa/commits/6a29ebffe46e6e3d61d41a3b87442a94307a73a6","html_url":"https://github.com/apache/openjpa/commit/6a29ebffe46e6e3d61d41a3b87442a94307a73a6"}]},{"sha":"d4454e5a1f0793345269a9985d094f88f892a0b0","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ0NDU0ZTVhMWYwNzkzMzQ1MjY5YTk5ODVkMDk0Zjg4Zjg5MmEwYjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T17:41:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T17:41:44Z"},"message":"OPENJPA-503\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614936 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dae2b96c38c445b324d529a5fc9e7d69c96cbe4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/dae2b96c38c445b324d529a5fc9e7d69c96cbe4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d4454e5a1f0793345269a9985d094f88f892a0b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d4454e5a1f0793345269a9985d094f88f892a0b0","html_url":"https://github.com/apache/openjpa/commit/d4454e5a1f0793345269a9985d094f88f892a0b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d4454e5a1f0793345269a9985d094f88f892a0b0/comments","author":null,"committer":null,"parents":[{"sha":"5a1faec4719c40ee0769901f2b4a959084e67cd9","url":"https://api.github.com/repos/apache/openjpa/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9","html_url":"https://github.com/apache/openjpa/commit/5a1faec4719c40ee0769901f2b4a959084e67cd9"}]},{"sha":"2a45dc5929232f897d20240d2891836dabff020d","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhNDVkYzU5MjkyMzJmODk3ZDIwMjQwZDI4OTE4MzZkYWJmZjAyMGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:41:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:41:47Z"},"message":"OPENJPA-437\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@615316 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8567bb64f86aa942ac2d5b57b9b885957e3ef79a","url":"https://api.github.com/repos/apache/openjpa/git/trees/8567bb64f86aa942ac2d5b57b9b885957e3ef79a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a45dc5929232f897d20240d2891836dabff020d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a45dc5929232f897d20240d2891836dabff020d","html_url":"https://github.com/apache/openjpa/commit/2a45dc5929232f897d20240d2891836dabff020d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a45dc5929232f897d20240d2891836dabff020d/comments","author":null,"committer":null,"parents":[{"sha":"d4454e5a1f0793345269a9985d094f88f892a0b0","url":"https://api.github.com/repos/apache/openjpa/commits/d4454e5a1f0793345269a9985d094f88f892a0b0","html_url":"https://github.com/apache/openjpa/commit/d4454e5a1f0793345269a9985d094f88f892a0b0"}]},{"sha":"2a612c105315ff1b994a868505a65523e19690b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhNjEyYzEwNTMxNWZmMWI5OTRhODY4NTA1YTY1NTIzZTE5NjkwYjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:41:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:41:57Z"},"message":"OPENJPA-245\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@615317 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5d6a5d4af0801945c07832bc0aaa025d48bc2552","url":"https://api.github.com/repos/apache/openjpa/git/trees/5d6a5d4af0801945c07832bc0aaa025d48bc2552"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a612c105315ff1b994a868505a65523e19690b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a612c105315ff1b994a868505a65523e19690b0","html_url":"https://github.com/apache/openjpa/commit/2a612c105315ff1b994a868505a65523e19690b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a612c105315ff1b994a868505a65523e19690b0/comments","author":null,"committer":null,"parents":[{"sha":"2a45dc5929232f897d20240d2891836dabff020d","url":"https://api.github.com/repos/apache/openjpa/commits/2a45dc5929232f897d20240d2891836dabff020d","html_url":"https://github.com/apache/openjpa/commit/2a45dc5929232f897d20240d2891836dabff020d"}]},{"sha":"78f5a95b2b21290f26e467de86bc97db483ee52c","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4ZjVhOTViMmIyMTI5MGYyNmU0NjdkZTg2YmM5N2RiNDgzZWU1MmM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T21:52:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T21:52:05Z"},"message":"OPENJPA-437\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@615360 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a62d48179bb64b9dd9911cc1f8ff81364d775b9","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a62d48179bb64b9dd9911cc1f8ff81364d775b9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78f5a95b2b21290f26e467de86bc97db483ee52c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78f5a95b2b21290f26e467de86bc97db483ee52c","html_url":"https://github.com/apache/openjpa/commit/78f5a95b2b21290f26e467de86bc97db483ee52c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78f5a95b2b21290f26e467de86bc97db483ee52c/comments","author":null,"committer":null,"parents":[{"sha":"2a612c105315ff1b994a868505a65523e19690b0","url":"https://api.github.com/repos/apache/openjpa/commits/2a612c105315ff1b994a868505a65523e19690b0","html_url":"https://github.com/apache/openjpa/commit/2a612c105315ff1b994a868505a65523e19690b0"}]},{"sha":"37c4e9148a7c6246c339a8b87285b686a8d812ae","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3YzRlOTE0OGE3YzYyNDZjMzM5YThiODcyODViNjg2YThkODEyYWU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T21:53:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T21:53:57Z"},"message":"OPENJPA-437. Trivial change to be consistent with class usage between constructor and symbolic constant.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@615361 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"26c2adbf5c9f78a977559540f89683abb8e810d7","url":"https://api.github.com/repos/apache/openjpa/git/trees/26c2adbf5c9f78a977559540f89683abb8e810d7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/37c4e9148a7c6246c339a8b87285b686a8d812ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/37c4e9148a7c6246c339a8b87285b686a8d812ae","html_url":"https://github.com/apache/openjpa/commit/37c4e9148a7c6246c339a8b87285b686a8d812ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/37c4e9148a7c6246c339a8b87285b686a8d812ae/comments","author":null,"committer":null,"parents":[{"sha":"78f5a95b2b21290f26e467de86bc97db483ee52c","url":"https://api.github.com/repos/apache/openjpa/commits/78f5a95b2b21290f26e467de86bc97db483ee52c","html_url":"https://github.com/apache/openjpa/commit/78f5a95b2b21290f26e467de86bc97db483ee52c"}]},{"sha":"b2a10e285f70f888e21ffd02ff09122986556a1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYTEwZTI4NWY3MGY4ODhlMjFmZmQwMmZmMDkxMjI5ODY1NTZhMWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-28T09:36:42Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-01-28T09:36:42Z"},"message":"OPENJPA-477 no need to make changes to BootStrap, StateManagerImpl and PersistenceProviderImpl.\nThese files are restored to their previous version.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@615806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"168350808c1e2829f7b96f579cb26513b9fa005a","url":"https://api.github.com/repos/apache/openjpa/git/trees/168350808c1e2829f7b96f579cb26513b9fa005a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2a10e285f70f888e21ffd02ff09122986556a1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2a10e285f70f888e21ffd02ff09122986556a1e","html_url":"https://github.com/apache/openjpa/commit/b2a10e285f70f888e21ffd02ff09122986556a1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2a10e285f70f888e21ffd02ff09122986556a1e/comments","author":null,"committer":null,"parents":[{"sha":"37c4e9148a7c6246c339a8b87285b686a8d812ae","url":"https://api.github.com/repos/apache/openjpa/commits/37c4e9148a7c6246c339a8b87285b686a8d812ae","html_url":"https://github.com/apache/openjpa/commit/37c4e9148a7c6246c339a8b87285b686a8d812ae"}]},{"sha":"0b4ce34920fbf2fb358447bd1aa209d03098b8f3","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiNGNlMzQ5MjBmYmYyZmIzNTg0NDdiZDFhYTIwOWQwMzA5OGI4ZjM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T06:49:26Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T06:49:26Z"},"message":"OPENJPA-505. Committing on behalf of joe@bea.com (Joe Weinstein).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@616658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"021f56872a225287b13ec30abb67aa06dac84c2e","url":"https://api.github.com/repos/apache/openjpa/git/trees/021f56872a225287b13ec30abb67aa06dac84c2e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b4ce34920fbf2fb358447bd1aa209d03098b8f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b4ce34920fbf2fb358447bd1aa209d03098b8f3","html_url":"https://github.com/apache/openjpa/commit/0b4ce34920fbf2fb358447bd1aa209d03098b8f3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b4ce34920fbf2fb358447bd1aa209d03098b8f3/comments","author":null,"committer":null,"parents":[{"sha":"b2a10e285f70f888e21ffd02ff09122986556a1e","url":"https://api.github.com/repos/apache/openjpa/commits/b2a10e285f70f888e21ffd02ff09122986556a1e","html_url":"https://github.com/apache/openjpa/commit/b2a10e285f70f888e21ffd02ff09122986556a1e"}]},{"sha":"badc4b924fb4f3632b2d74439b9ee0b5904ef962","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhZGM0YjkyNGZiNGYzNjMyYjJkNzQ0MzliOWVlMGI1OTA0ZWY5NjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T19:03:48Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T19:03:48Z"},"message":"OPENJPA-437. Reverted back to hard-reference ArrayList instead of a concurrent set, since the new logic only performs local mutation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@616845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e0e6ea10b4f96133c9292eff80138b75472e2e80","url":"https://api.github.com/repos/apache/openjpa/git/trees/e0e6ea10b4f96133c9292eff80138b75472e2e80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/badc4b924fb4f3632b2d74439b9ee0b5904ef962","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/badc4b924fb4f3632b2d74439b9ee0b5904ef962","html_url":"https://github.com/apache/openjpa/commit/badc4b924fb4f3632b2d74439b9ee0b5904ef962","comments_url":"https://api.github.com/repos/apache/openjpa/commits/badc4b924fb4f3632b2d74439b9ee0b5904ef962/comments","author":null,"committer":null,"parents":[{"sha":"0b4ce34920fbf2fb358447bd1aa209d03098b8f3","url":"https://api.github.com/repos/apache/openjpa/commits/0b4ce34920fbf2fb358447bd1aa209d03098b8f3","html_url":"https://github.com/apache/openjpa/commit/0b4ce34920fbf2fb358447bd1aa209d03098b8f3"}]},{"sha":"70f3a94b36c3fc63924dd0748513023fd8372faa","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwZjNhOTRiMzZjM2ZjNjM5MjRkZDA3NDg1MTMwMjNmZDgzNzJmYWE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-30T20:01:09Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-30T20:01:09Z"},"message":"OPENJPA-505.  Resolving some formatting issues with the r616658 commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@616878 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f72ae35c322116a9e84ddcc781bf67ee444709be","url":"https://api.github.com/repos/apache/openjpa/git/trees/f72ae35c322116a9e84ddcc781bf67ee444709be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/70f3a94b36c3fc63924dd0748513023fd8372faa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/70f3a94b36c3fc63924dd0748513023fd8372faa","html_url":"https://github.com/apache/openjpa/commit/70f3a94b36c3fc63924dd0748513023fd8372faa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/70f3a94b36c3fc63924dd0748513023fd8372faa/comments","author":null,"committer":null,"parents":[{"sha":"badc4b924fb4f3632b2d74439b9ee0b5904ef962","url":"https://api.github.com/repos/apache/openjpa/commits/badc4b924fb4f3632b2d74439b9ee0b5904ef962","html_url":"https://github.com/apache/openjpa/commit/badc4b924fb4f3632b2d74439b9ee0b5904ef962"}]},{"sha":"8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkMTYxZmY5OWUxZTRmMWYwYmZhNGIyYzVlNTkwYWJjNTkwZGY0MmQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T21:10:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T21:10:49Z"},"message":"OPENJPA-357, OPENJPA-358. Changing @since tag to 1.1.0.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@616905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09c8e4a6f7f68ba943636fe0e67b18f7c990d220","url":"https://api.github.com/repos/apache/openjpa/git/trees/09c8e4a6f7f68ba943636fe0e67b18f7c990d220"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","html_url":"https://github.com/apache/openjpa/commit/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d/comments","author":null,"committer":null,"parents":[{"sha":"70f3a94b36c3fc63924dd0748513023fd8372faa","url":"https://api.github.com/repos/apache/openjpa/commits/70f3a94b36c3fc63924dd0748513023fd8372faa","html_url":"https://github.com/apache/openjpa/commit/70f3a94b36c3fc63924dd0748513023fd8372faa"}]},{"sha":"d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyNGJlYzZlZDYxYmRlMzIxMTFlYzFlZTNjOGRlNzdmOWEwNWMxYzE=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-01-31T00:59:02Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-01-31T00:59:02Z"},"message":"Allow EntityManagerFactory objects to be serialized and deserialized successfully.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@616972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55f5c53c23f3d6ab989b6815cb39be3345b3cf69","url":"https://api.github.com/repos/apache/openjpa/git/trees/55f5c53c23f3d6ab989b6815cb39be3345b3cf69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","html_url":"https://github.com/apache/openjpa/commit/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1/comments","author":null,"committer":null,"parents":[{"sha":"8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","url":"https://api.github.com/repos/apache/openjpa/commits/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d","html_url":"https://github.com/apache/openjpa/commit/8d161ff99e1e4f1f0bfa4b2c5e590abc590df42d"}]},{"sha":"18e83a09b18fde4721af69123fd4c7799bcca00e","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4ZTgzYTA5YjE4ZmRlNDcyMWFmNjkxMjNmZDRjNzc5OWJjY2EwMGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:01:45Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:01:45Z"},"message":"OPENJPA-251, OPENJPA-329. svn merge -c 616961 ../branches/1.0.x/\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617191 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c5c3621d1d4d9dc6c5a74a143e200268b866c473","url":"https://api.github.com/repos/apache/openjpa/git/trees/c5c3621d1d4d9dc6c5a74a143e200268b866c473"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18e83a09b18fde4721af69123fd4c7799bcca00e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18e83a09b18fde4721af69123fd4c7799bcca00e","html_url":"https://github.com/apache/openjpa/commit/18e83a09b18fde4721af69123fd4c7799bcca00e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18e83a09b18fde4721af69123fd4c7799bcca00e/comments","author":null,"committer":null,"parents":[{"sha":"d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","url":"https://api.github.com/repos/apache/openjpa/commits/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1","html_url":"https://github.com/apache/openjpa/commit/d24bec6ed61bde32111ec1ee3c8de77f9a05c1c1"}]},{"sha":"62c8c548d90295d92e5aacd3adcdce0e785bf553","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyYzhjNTQ4ZDkwMjk1ZDkyZTVhYWNkM2FkY2RjZTBlNzg1YmY1NTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:39:25Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:39:25Z"},"message":"OPENJPA-258 Merge from ../branches/1.0.x. svn merge -c 617039\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617198 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a00d87529cbe053a67fcf7304de5a2604cf0cad","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a00d87529cbe053a67fcf7304de5a2604cf0cad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62c8c548d90295d92e5aacd3adcdce0e785bf553","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62c8c548d90295d92e5aacd3adcdce0e785bf553","html_url":"https://github.com/apache/openjpa/commit/62c8c548d90295d92e5aacd3adcdce0e785bf553","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62c8c548d90295d92e5aacd3adcdce0e785bf553/comments","author":null,"committer":null,"parents":[{"sha":"18e83a09b18fde4721af69123fd4c7799bcca00e","url":"https://api.github.com/repos/apache/openjpa/commits/18e83a09b18fde4721af69123fd4c7799bcca00e","html_url":"https://github.com/apache/openjpa/commit/18e83a09b18fde4721af69123fd4c7799bcca00e"}]},{"sha":"171dc5d46aeb2084b2fc2f92079033117b413ac4","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3MWRjNWQ0NmFlYjIwODRiMmZjMmY5MjA3OTAzMzExN2I0MTNhYzQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:40:34Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:40:34Z"},"message":"OPENJPA-258 Merge from ../branches/1.0.x. svn merge -c 617073\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617199 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89fda4e62dd76b09e44b4db82a6a5f7198609ce1","url":"https://api.github.com/repos/apache/openjpa/git/trees/89fda4e62dd76b09e44b4db82a6a5f7198609ce1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/171dc5d46aeb2084b2fc2f92079033117b413ac4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/171dc5d46aeb2084b2fc2f92079033117b413ac4","html_url":"https://github.com/apache/openjpa/commit/171dc5d46aeb2084b2fc2f92079033117b413ac4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/171dc5d46aeb2084b2fc2f92079033117b413ac4/comments","author":null,"committer":null,"parents":[{"sha":"62c8c548d90295d92e5aacd3adcdce0e785bf553","url":"https://api.github.com/repos/apache/openjpa/commits/62c8c548d90295d92e5aacd3adcdce0e785bf553","html_url":"https://github.com/apache/openjpa/commit/62c8c548d90295d92e5aacd3adcdce0e785bf553"}]},{"sha":"64d0ea816673b6f36f88c363891ecb2136993dda","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0ZDBlYTgxNjY3M2I2ZjM2Zjg4YzM2Mzg5MWVjYjIxMzY5OTNkZGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:41:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:41:46Z"},"message":"OPENJPA-135, OPENJPA-420 Merge from ../branches/1.0.x. svn merge -c 617164\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c0516ae74017bd189d93260daac643bf7d04a1a","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c0516ae74017bd189d93260daac643bf7d04a1a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/64d0ea816673b6f36f88c363891ecb2136993dda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/64d0ea816673b6f36f88c363891ecb2136993dda","html_url":"https://github.com/apache/openjpa/commit/64d0ea816673b6f36f88c363891ecb2136993dda","comments_url":"https://api.github.com/repos/apache/openjpa/commits/64d0ea816673b6f36f88c363891ecb2136993dda/comments","author":null,"committer":null,"parents":[{"sha":"171dc5d46aeb2084b2fc2f92079033117b413ac4","url":"https://api.github.com/repos/apache/openjpa/commits/171dc5d46aeb2084b2fc2f92079033117b413ac4","html_url":"https://github.com/apache/openjpa/commit/171dc5d46aeb2084b2fc2f92079033117b413ac4"}]},{"sha":"a747db9443a0408c58221d36ce9c6103e8010be2","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3NDdkYjk0NDNhMDQwOGM1ODIyMWQzNmNlOWM2MTAzZTgwMTBiZTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-01T15:46:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-01T15:46:51Z"},"message":"OPENJPA-506. svn merge -c 617334 ../branches/1.0.x; svn merge -c 617363 ../branches/1.0.x, plus modifications for serialization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617525 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c53e4c34aa22c6160d247293d15cd149470ff59","url":"https://api.github.com/repos/apache/openjpa/git/trees/3c53e4c34aa22c6160d247293d15cd149470ff59"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a747db9443a0408c58221d36ce9c6103e8010be2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a747db9443a0408c58221d36ce9c6103e8010be2","html_url":"https://github.com/apache/openjpa/commit/a747db9443a0408c58221d36ce9c6103e8010be2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a747db9443a0408c58221d36ce9c6103e8010be2/comments","author":null,"committer":null,"parents":[{"sha":"64d0ea816673b6f36f88c363891ecb2136993dda","url":"https://api.github.com/repos/apache/openjpa/commits/64d0ea816673b6f36f88c363891ecb2136993dda","html_url":"https://github.com/apache/openjpa/commit/64d0ea816673b6f36f88c363891ecb2136993dda"}]},{"sha":"4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMzM2YjJhMmNmMzU0ZmVjY2UyZjg5MzFjYTFmNjcwMmVmYmUxZDU=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-01T17:53:48Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-01T17:53:48Z"},"message":"Rolledback change to AbstractBrokerFactory pending resolution of issues arising from r616972.  Modified TestSerializedFactory to expect failure: it expects created EntityManagerFactory objects to be instances of Serialization, but to not be useful after serialization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617577 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"620001ea52be5782e6bd1c8026facc443eab2a8e","url":"https://api.github.com/repos/apache/openjpa/git/trees/620001ea52be5782e6bd1c8026facc443eab2a8e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","html_url":"https://github.com/apache/openjpa/commit/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5/comments","author":null,"committer":null,"parents":[{"sha":"a747db9443a0408c58221d36ce9c6103e8010be2","url":"https://api.github.com/repos/apache/openjpa/commits/a747db9443a0408c58221d36ce9c6103e8010be2","html_url":"https://github.com/apache/openjpa/commit/a747db9443a0408c58221d36ce9c6103e8010be2"}]},{"sha":"8ba8ffffc429b766f6e5ee3b4e30af23848075e7","node_id":"MDY6Q29tbWl0MjA2MzY0OjhiYThmZmZmYzQyOWI3NjZmNmU1ZWUzYjRlMzBhZjIzODQ4MDc1ZTc=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-01T17:57:45Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-01T17:57:45Z"},"message":"Fixed line lengths\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617580 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9fbbc626d5c7affcb245787e7fe26cdf56947a16","url":"https://api.github.com/repos/apache/openjpa/git/trees/9fbbc626d5c7affcb245787e7fe26cdf56947a16"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8ba8ffffc429b766f6e5ee3b4e30af23848075e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8ba8ffffc429b766f6e5ee3b4e30af23848075e7","html_url":"https://github.com/apache/openjpa/commit/8ba8ffffc429b766f6e5ee3b4e30af23848075e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8ba8ffffc429b766f6e5ee3b4e30af23848075e7/comments","author":null,"committer":null,"parents":[{"sha":"4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","url":"https://api.github.com/repos/apache/openjpa/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","html_url":"https://github.com/apache/openjpa/commit/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5"}]},{"sha":"18c90bbd0be9031ca3f32f0f19c2c48221c3834f","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4YzkwYmJkMGJlOTAzMWNhM2YzMmYwZjE5YzJjNDgyMjFjMzgzNGY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-02T06:42:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-02T06:42:20Z"},"message":"OPENJPA-508 Merge from ../branches/1.0.x. svn merge -c 617760 ../branches/1.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617763 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"871ea34c2079873f5c7ee0c19c97a5a24ad2cc44","url":"https://api.github.com/repos/apache/openjpa/git/trees/871ea34c2079873f5c7ee0c19c97a5a24ad2cc44"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18c90bbd0be9031ca3f32f0f19c2c48221c3834f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18c90bbd0be9031ca3f32f0f19c2c48221c3834f","html_url":"https://github.com/apache/openjpa/commit/18c90bbd0be9031ca3f32f0f19c2c48221c3834f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18c90bbd0be9031ca3f32f0f19c2c48221c3834f/comments","author":null,"committer":null,"parents":[{"sha":"8ba8ffffc429b766f6e5ee3b4e30af23848075e7","url":"https://api.github.com/repos/apache/openjpa/commits/8ba8ffffc429b766f6e5ee3b4e30af23848075e7","html_url":"https://github.com/apache/openjpa/commit/8ba8ffffc429b766f6e5ee3b4e30af23848075e7"}]},{"sha":"012efc034c6f6cb751ad6854bfab18f86ad2fd68","node_id":"MDY6Q29tbWl0MjA2MzY0OjAxMmVmYzAzNGM2ZjZjYjc1MWFkNjg1NGJmYWIxOGY4NmFkMmZkNjg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T04:34:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T04:34:54Z"},"message":"OPENJPA-147. Changes resulting from tests via Kodo's harness.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618537 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93af945e957e7378c05aacd0cf9362b169aff5b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/93af945e957e7378c05aacd0cf9362b169aff5b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/012efc034c6f6cb751ad6854bfab18f86ad2fd68","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/012efc034c6f6cb751ad6854bfab18f86ad2fd68","html_url":"https://github.com/apache/openjpa/commit/012efc034c6f6cb751ad6854bfab18f86ad2fd68","comments_url":"https://api.github.com/repos/apache/openjpa/commits/012efc034c6f6cb751ad6854bfab18f86ad2fd68/comments","author":null,"committer":null,"parents":[{"sha":"18c90bbd0be9031ca3f32f0f19c2c48221c3834f","url":"https://api.github.com/repos/apache/openjpa/commits/18c90bbd0be9031ca3f32f0f19c2c48221c3834f","html_url":"https://github.com/apache/openjpa/commit/18c90bbd0be9031ca3f32f0f19c2c48221c3834f"}]},{"sha":"de14ad6630a17d4c4ea27133e825479f5f01c61d","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlMTRhZDY2MzBhMTdkNGM0ZWEyNzEzM2U4MjU0NzlmNWYwMWM2MWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T18:34:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T18:34:55Z"},"message":"OPENJPA-147. Changes resulting from tests via Kodo's harness.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618738 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95e4aa3e614325f735ee0432c6f1f82a4209ee46","url":"https://api.github.com/repos/apache/openjpa/git/trees/95e4aa3e614325f735ee0432c6f1f82a4209ee46"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d","html_url":"https://github.com/apache/openjpa/commit/de14ad6630a17d4c4ea27133e825479f5f01c61d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d/comments","author":null,"committer":null,"parents":[{"sha":"012efc034c6f6cb751ad6854bfab18f86ad2fd68","url":"https://api.github.com/repos/apache/openjpa/commits/012efc034c6f6cb751ad6854bfab18f86ad2fd68","html_url":"https://github.com/apache/openjpa/commit/012efc034c6f6cb751ad6854bfab18f86ad2fd68"}]},{"sha":"24d2a42c227c3e1662d4ecf17b16149174d19ec0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0ZDJhNDJjMjI3YzNlMTY2MmQ0ZWNmMTdiMTYxNDkxNzRkMTllYzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-05T18:50:02Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-05T18:50:02Z"},"message":"Get the key from config only once as it is costly\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618741 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6942107cf61948fbffac8a7b3ee04585e29a266","url":"https://api.github.com/repos/apache/openjpa/git/trees/e6942107cf61948fbffac8a7b3ee04585e29a266"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/24d2a42c227c3e1662d4ecf17b16149174d19ec0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/24d2a42c227c3e1662d4ecf17b16149174d19ec0","html_url":"https://github.com/apache/openjpa/commit/24d2a42c227c3e1662d4ecf17b16149174d19ec0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/24d2a42c227c3e1662d4ecf17b16149174d19ec0/comments","author":null,"committer":null,"parents":[{"sha":"de14ad6630a17d4c4ea27133e825479f5f01c61d","url":"https://api.github.com/repos/apache/openjpa/commits/de14ad6630a17d4c4ea27133e825479f5f01c61d","html_url":"https://github.com/apache/openjpa/commit/de14ad6630a17d4c4ea27133e825479f5f01c61d"}]},{"sha":"b92f6420af0222aa71877aa737d3456f000bb409","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5MmY2NDIwYWYwMjIyYWE3MTg3N2FhNzM3ZDM0NTZmMDAwYmI0MDk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T18:58:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T18:58:09Z"},"message":"OPENJPA-401 making temporary classloader optional for MappingTool ant task\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618745 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de2f9b36f63e3219199884e57d339bd7ba6cf420","url":"https://api.github.com/repos/apache/openjpa/git/trees/de2f9b36f63e3219199884e57d339bd7ba6cf420"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b92f6420af0222aa71877aa737d3456f000bb409","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b92f6420af0222aa71877aa737d3456f000bb409","html_url":"https://github.com/apache/openjpa/commit/b92f6420af0222aa71877aa737d3456f000bb409","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b92f6420af0222aa71877aa737d3456f000bb409/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"24d2a42c227c3e1662d4ecf17b16149174d19ec0","url":"https://api.github.com/repos/apache/openjpa/commits/24d2a42c227c3e1662d4ecf17b16149174d19ec0","html_url":"https://github.com/apache/openjpa/commit/24d2a42c227c3e1662d4ecf17b16149174d19ec0"}]},{"sha":"ebe3fdbd6db6950db13142e9e686f2e232948082","node_id":"MDY6Q29tbWl0MjA2MzY0OmViZTNmZGJkNmRiNjk1MGRiMTMxNDJlOWU2ODZmMmUyMzI5NDgwODI=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:46:09Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:46:09Z"},"message":"Improved the robustness of these test cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618786 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5eff15026d36f14b33ded479a47c4dbfe3cced84","url":"https://api.github.com/repos/apache/openjpa/git/trees/5eff15026d36f14b33ded479a47c4dbfe3cced84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ebe3fdbd6db6950db13142e9e686f2e232948082","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ebe3fdbd6db6950db13142e9e686f2e232948082","html_url":"https://github.com/apache/openjpa/commit/ebe3fdbd6db6950db13142e9e686f2e232948082","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ebe3fdbd6db6950db13142e9e686f2e232948082/comments","author":null,"committer":null,"parents":[{"sha":"b92f6420af0222aa71877aa737d3456f000bb409","url":"https://api.github.com/repos/apache/openjpa/commits/b92f6420af0222aa71877aa737d3456f000bb409","html_url":"https://github.com/apache/openjpa/commit/b92f6420af0222aa71877aa737d3456f000bb409"}]},{"sha":"b74fc3188122a96bc3404cb69825e372cbf383f0","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3NGZjMzE4ODEyMmE5NmJjMzQwNGNiNjk4MjVlMzcyY2JmMzgzZjA=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:49:11Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:49:11Z"},"message":"Prevent deadlock in database during teardown when testing failures leave transactions open\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a9798fbcb250978c15fb99a081e15eaa5b30fcd","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a9798fbcb250978c15fb99a081e15eaa5b30fcd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b74fc3188122a96bc3404cb69825e372cbf383f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b74fc3188122a96bc3404cb69825e372cbf383f0","html_url":"https://github.com/apache/openjpa/commit/b74fc3188122a96bc3404cb69825e372cbf383f0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b74fc3188122a96bc3404cb69825e372cbf383f0/comments","author":null,"committer":null,"parents":[{"sha":"ebe3fdbd6db6950db13142e9e686f2e232948082","url":"https://api.github.com/repos/apache/openjpa/commits/ebe3fdbd6db6950db13142e9e686f2e232948082","html_url":"https://github.com/apache/openjpa/commit/ebe3fdbd6db6950db13142e9e686f2e232948082"}]},{"sha":"c767561f9dd1a6363fc5f14b28af58e796d86dec","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3Njc1NjFmOWRkMWE2MzYzZmM1ZjE0YjI4YWY1OGU3OTZkODZkZWM=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:52:59Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-05T21:52:59Z"},"message":"Added property to permit passing in debugging settings during Maven test run.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618791 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5396e7325746f002362f36cf1440e9708e9e8bb0","url":"https://api.github.com/repos/apache/openjpa/git/trees/5396e7325746f002362f36cf1440e9708e9e8bb0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c767561f9dd1a6363fc5f14b28af58e796d86dec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c767561f9dd1a6363fc5f14b28af58e796d86dec","html_url":"https://github.com/apache/openjpa/commit/c767561f9dd1a6363fc5f14b28af58e796d86dec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c767561f9dd1a6363fc5f14b28af58e796d86dec/comments","author":null,"committer":null,"parents":[{"sha":"b74fc3188122a96bc3404cb69825e372cbf383f0","url":"https://api.github.com/repos/apache/openjpa/commits/b74fc3188122a96bc3404cb69825e372cbf383f0","html_url":"https://github.com/apache/openjpa/commit/b74fc3188122a96bc3404cb69825e372cbf383f0"}]},{"sha":"024faa31d75a55a619b1e59ff40b7523c24c4c84","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNGZhYTMxZDc1YTU1YTYxOWIxZTU5ZmY0MGI3NTIzYzI0YzRjODQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-05T21:53:39Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-05T21:53:39Z"},"message":"OPENJPA-509 Fix & Test for insertion of MappedSuperClass-Entity-Embedded domain featureSelection insertion failure.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618794 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3354571b71c13ef7cfebc6b33cc013b0f16a674e","url":"https://api.github.com/repos/apache/openjpa/git/trees/3354571b71c13ef7cfebc6b33cc013b0f16a674e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/024faa31d75a55a619b1e59ff40b7523c24c4c84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/024faa31d75a55a619b1e59ff40b7523c24c4c84","html_url":"https://github.com/apache/openjpa/commit/024faa31d75a55a619b1e59ff40b7523c24c4c84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/024faa31d75a55a619b1e59ff40b7523c24c4c84/comments","author":null,"committer":null,"parents":[{"sha":"c767561f9dd1a6363fc5f14b28af58e796d86dec","url":"https://api.github.com/repos/apache/openjpa/commits/c767561f9dd1a6363fc5f14b28af58e796d86dec","html_url":"https://github.com/apache/openjpa/commit/c767561f9dd1a6363fc5f14b28af58e796d86dec"}]},{"sha":"3f439edc57637940063ce9c72a1c528587e165ff","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmNDM5ZWRjNTc2Mzc5NDAwNjNjZTljNzJhMWM1Mjg1ODdlMTY1ZmY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T23:26:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-05T23:26:33Z"},"message":"OPENJPA-506. Fixed behaviors for global listeners to get TCK working on trunk again. It turns out that global listeners and per-instance listeners are bound into the OpenJPA event framework differently.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618821 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a252c394a684686c0855b63904d670fe9318871","url":"https://api.github.com/repos/apache/openjpa/git/trees/1a252c394a684686c0855b63904d670fe9318871"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f439edc57637940063ce9c72a1c528587e165ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f439edc57637940063ce9c72a1c528587e165ff","html_url":"https://github.com/apache/openjpa/commit/3f439edc57637940063ce9c72a1c528587e165ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f439edc57637940063ce9c72a1c528587e165ff/comments","author":null,"committer":null,"parents":[{"sha":"024faa31d75a55a619b1e59ff40b7523c24c4c84","url":"https://api.github.com/repos/apache/openjpa/commits/024faa31d75a55a619b1e59ff40b7523c24c4c84","html_url":"https://github.com/apache/openjpa/commit/024faa31d75a55a619b1e59ff40b7523c24c4c84"}]},{"sha":"754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1NGViOGQ2MGMwMzIyMmU2ZDZjNWFkYjllYmUxYjE3Y2JmZTM4ZTE=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-06T00:51:34Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-06T00:51:34Z"},"message":"Allow EntityManagerFactory objects to be serialized and deserialized successfully.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618844 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d59eecd1c86c30dff4c530b30f926e9b39b1a42","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d59eecd1c86c30dff4c530b30f926e9b39b1a42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","html_url":"https://github.com/apache/openjpa/commit/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1/comments","author":null,"committer":null,"parents":[{"sha":"3f439edc57637940063ce9c72a1c528587e165ff","url":"https://api.github.com/repos/apache/openjpa/commits/3f439edc57637940063ce9c72a1c528587e165ff","html_url":"https://github.com/apache/openjpa/commit/3f439edc57637940063ce9c72a1c528587e165ff"}]},{"sha":"2a3ee08d92302b82349f1e9e3d7964d01d7f9a04","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhM2VlMDhkOTIzMDJiODIzNDlmMWU5ZTNkNzk2NGQwMWQ3ZjlhMDQ=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-06T15:02:40Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-06T15:02:40Z"},"message":"Corrected (I hope) the DOS line endings\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619009 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0cb28676518eebd7c9589c4f64b21718eab6f855","url":"https://api.github.com/repos/apache/openjpa/git/trees/0cb28676518eebd7c9589c4f64b21718eab6f855"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a3ee08d92302b82349f1e9e3d7964d01d7f9a04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a3ee08d92302b82349f1e9e3d7964d01d7f9a04","html_url":"https://github.com/apache/openjpa/commit/2a3ee08d92302b82349f1e9e3d7964d01d7f9a04","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a3ee08d92302b82349f1e9e3d7964d01d7f9a04/comments","author":null,"committer":null,"parents":[{"sha":"754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","url":"https://api.github.com/repos/apache/openjpa/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","html_url":"https://github.com/apache/openjpa/commit/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1"}]},{"sha":"12839b6bd9090eb84d1944584c9ea73aaa8b44fa","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyODM5YjZiZDkwOTBlYjg0ZDE5NDQ1ODRjOWVhNzNhYWE4YjQ0ZmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-06T20:26:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-06T20:26:14Z"},"message":"Adding new (source code + pom.xml + doc) for Slice \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9007c46d3f7b0f26c42d4620daffe9a29d0940da","url":"https://api.github.com/repos/apache/openjpa/git/trees/9007c46d3f7b0f26c42d4620daffe9a29d0940da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/12839b6bd9090eb84d1944584c9ea73aaa8b44fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/12839b6bd9090eb84d1944584c9ea73aaa8b44fa","html_url":"https://github.com/apache/openjpa/commit/12839b6bd9090eb84d1944584c9ea73aaa8b44fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/12839b6bd9090eb84d1944584c9ea73aaa8b44fa/comments","author":null,"committer":null,"parents":[{"sha":"2a3ee08d92302b82349f1e9e3d7964d01d7f9a04","url":"https://api.github.com/repos/apache/openjpa/commits/2a3ee08d92302b82349f1e9e3d7964d01d7f9a04","html_url":"https://github.com/apache/openjpa/commit/2a3ee08d92302b82349f1e9e3d7964d01d7f9a04"}]},{"sha":"d5e577c921d462c70b210b2a714885449ef7c5f2","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1ZTU3N2M5MjFkNDYyYzcwYjIxMGIyYTcxNDg4NTQ0OWVmN2M1ZjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T20:38:08Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T20:38:08Z"},"message":"allow surefire to move to 2.4 to get around test-double-counting issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619146 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"99f1209712c332293c8db3e7b2ba6b5e14211f89","url":"https://api.github.com/repos/apache/openjpa/git/trees/99f1209712c332293c8db3e7b2ba6b5e14211f89"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d5e577c921d462c70b210b2a714885449ef7c5f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d5e577c921d462c70b210b2a714885449ef7c5f2","html_url":"https://github.com/apache/openjpa/commit/d5e577c921d462c70b210b2a714885449ef7c5f2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d5e577c921d462c70b210b2a714885449ef7c5f2/comments","author":null,"committer":null,"parents":[{"sha":"12839b6bd9090eb84d1944584c9ea73aaa8b44fa","url":"https://api.github.com/repos/apache/openjpa/commits/12839b6bd9090eb84d1944584c9ea73aaa8b44fa","html_url":"https://github.com/apache/openjpa/commit/12839b6bd9090eb84d1944584c9ea73aaa8b44fa"}]},{"sha":"903170b333f09bfb8dc2a53c0ac091ee12999c8a","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMzE3MGIzMzNmMDliZmI4ZGMyYTUzYzBhYzA5MWVlMTI5OTljOGE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-06T20:45:20Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-06T20:45:20Z"},"message":"Enable ability to subclass of JDBCFetchConfigurationmpl; change one constructor from private to protected.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619147 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01bb577ab81fa48fcde5706bcc6e0b46f745f8c9","url":"https://api.github.com/repos/apache/openjpa/git/trees/01bb577ab81fa48fcde5706bcc6e0b46f745f8c9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/903170b333f09bfb8dc2a53c0ac091ee12999c8a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/903170b333f09bfb8dc2a53c0ac091ee12999c8a","html_url":"https://github.com/apache/openjpa/commit/903170b333f09bfb8dc2a53c0ac091ee12999c8a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/903170b333f09bfb8dc2a53c0ac091ee12999c8a/comments","author":null,"committer":null,"parents":[{"sha":"d5e577c921d462c70b210b2a714885449ef7c5f2","url":"https://api.github.com/repos/apache/openjpa/commits/d5e577c921d462c70b210b2a714885449ef7c5f2","html_url":"https://github.com/apache/openjpa/commit/d5e577c921d462c70b210b2a714885449ef7c5f2"}]},{"sha":"fd7eae62104e624c16ee22695293f77c82259991","node_id":"MDY6Q29tbWl0MjA2MzY0OmZkN2VhZTYyMTA0ZTYyNGMxNmVlMjI2OTUyOTNmNzdjODIyNTk5OTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T21:41:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T21:41:50Z"},"message":"remove the interim fo file so it doesn't make it into the release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619164 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09ab3352493514afa5718c98aee8b044eed1a76a","url":"https://api.github.com/repos/apache/openjpa/git/trees/09ab3352493514afa5718c98aee8b044eed1a76a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fd7eae62104e624c16ee22695293f77c82259991","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fd7eae62104e624c16ee22695293f77c82259991","html_url":"https://github.com/apache/openjpa/commit/fd7eae62104e624c16ee22695293f77c82259991","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fd7eae62104e624c16ee22695293f77c82259991/comments","author":null,"committer":null,"parents":[{"sha":"903170b333f09bfb8dc2a53c0ac091ee12999c8a","url":"https://api.github.com/repos/apache/openjpa/commits/903170b333f09bfb8dc2a53c0ac091ee12999c8a","html_url":"https://github.com/apache/openjpa/commit/903170b333f09bfb8dc2a53c0ac091ee12999c8a"}]},{"sha":"c61d81ade6f149b5193e5818eaaa06bd41b53e0f","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2MWQ4MWFkZTZmMTQ5YjUxOTNlNTgxOGVhYWEwNmJkNDFiNTNlMGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-07T04:51:08Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-07T04:51:08Z"},"message":"Change property name prefix from 'slice.*' to 'openjpa.slice.*' + Apache License Header \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619263 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d9998a9fa286735f5a4bd3017130e1974d82e80","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d9998a9fa286735f5a4bd3017130e1974d82e80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c61d81ade6f149b5193e5818eaaa06bd41b53e0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c61d81ade6f149b5193e5818eaaa06bd41b53e0f","html_url":"https://github.com/apache/openjpa/commit/c61d81ade6f149b5193e5818eaaa06bd41b53e0f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c61d81ade6f149b5193e5818eaaa06bd41b53e0f/comments","author":null,"committer":null,"parents":[{"sha":"fd7eae62104e624c16ee22695293f77c82259991","url":"https://api.github.com/repos/apache/openjpa/commits/fd7eae62104e624c16ee22695293f77c82259991","html_url":"https://github.com/apache/openjpa/commit/fd7eae62104e624c16ee22695293f77c82259991"}]},{"sha":"8051804dbdc6bddbc27f5fe677bcfd80379d83e6","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwNTE4MDRkYmRjNmJkZGJjMjdmNWZlNjc3YmNmZDgwMzc5ZDgzZTY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-07T05:49:05Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-07T05:49:05Z"},"message":"Change document to reflect the namespace change for slice properties from 'slice.*' to 'openjpa.slice.*'\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619280 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"56e9fce1080d626ab154130570827ad8d2358350","url":"https://api.github.com/repos/apache/openjpa/git/trees/56e9fce1080d626ab154130570827ad8d2358350"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8051804dbdc6bddbc27f5fe677bcfd80379d83e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8051804dbdc6bddbc27f5fe677bcfd80379d83e6","html_url":"https://github.com/apache/openjpa/commit/8051804dbdc6bddbc27f5fe677bcfd80379d83e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8051804dbdc6bddbc27f5fe677bcfd80379d83e6/comments","author":null,"committer":null,"parents":[{"sha":"c61d81ade6f149b5193e5818eaaa06bd41b53e0f","url":"https://api.github.com/repos/apache/openjpa/commits/c61d81ade6f149b5193e5818eaaa06bd41b53e0f","html_url":"https://github.com/apache/openjpa/commit/c61d81ade6f149b5193e5818eaaa06bd41b53e0f"}]},{"sha":"321ede95ee2fce8f7741085e67134ab5cff3abf2","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyMWVkZTk1ZWUyZmNlOGY3NzQxMDg1ZTY3MTM0YWI1Y2ZmM2FiZjI=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-07T13:47:48Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-07T13:47:48Z"},"message":"Test conversion of svn:eol-style from as-is to native.  One file in DOS line endings and one file in Unix line endings.  Neither file changed on client, only their svn:eol-style property has been changed by this update.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619411 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"963a647de467782dce6cf03dfd80585f0aab1d06","url":"https://api.github.com/repos/apache/openjpa/git/trees/963a647de467782dce6cf03dfd80585f0aab1d06"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2","html_url":"https://github.com/apache/openjpa/commit/321ede95ee2fce8f7741085e67134ab5cff3abf2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2/comments","author":null,"committer":null,"parents":[{"sha":"8051804dbdc6bddbc27f5fe677bcfd80379d83e6","url":"https://api.github.com/repos/apache/openjpa/commits/8051804dbdc6bddbc27f5fe677bcfd80379d83e6","html_url":"https://github.com/apache/openjpa/commit/8051804dbdc6bddbc27f5fe677bcfd80379d83e6"}]},{"sha":"0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwMzNhNmIzZDk3YTQ2OGZlN2MwOGE2Y2I0NmE2NmZkZDU3YTBkYTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:01:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:01:06Z"},"message":"OPENJPA-511\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619471 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dad1ce407a998c0ff4262a69dc8e2a3b93bc0d78","url":"https://api.github.com/repos/apache/openjpa/git/trees/dad1ce407a998c0ff4262a69dc8e2a3b93bc0d78"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","html_url":"https://github.com/apache/openjpa/commit/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"321ede95ee2fce8f7741085e67134ab5cff3abf2","url":"https://api.github.com/repos/apache/openjpa/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2","html_url":"https://github.com/apache/openjpa/commit/321ede95ee2fce8f7741085e67134ab5cff3abf2"}]},{"sha":"81cb7e17f98946e4455e055f075d958900c2f576","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxY2I3ZTE3Zjk4OTQ2ZTQ0NTVlMDU1ZjA3NWQ5NTg5MDBjMmY1NzY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T22:11:21Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T22:11:21Z"},"message":"OPENJPA-464 commiting patch provided by Teresa Kan\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619664 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2beaa3e92e370900ec05e8868256ea39421b8823","url":"https://api.github.com/repos/apache/openjpa/git/trees/2beaa3e92e370900ec05e8868256ea39421b8823"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/81cb7e17f98946e4455e055f075d958900c2f576","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/81cb7e17f98946e4455e055f075d958900c2f576","html_url":"https://github.com/apache/openjpa/commit/81cb7e17f98946e4455e055f075d958900c2f576","comments_url":"https://api.github.com/repos/apache/openjpa/commits/81cb7e17f98946e4455e055f075d958900c2f576/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","url":"https://api.github.com/repos/apache/openjpa/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","html_url":"https://github.com/apache/openjpa/commit/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3"}]},{"sha":"99bf6d14f8f9097fe4298475f8653608a224cbca","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5YmY2ZDE0ZjhmOTA5N2ZlNDI5ODQ3NWY4NjUzNjA4YTIyNGNiY2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-08T01:15:44Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-08T01:15:44Z"},"message":"OPENJPA-512\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619723 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cee545910e2f5cc4fd2601afcf5280b629ea8db4","url":"https://api.github.com/repos/apache/openjpa/git/trees/cee545910e2f5cc4fd2601afcf5280b629ea8db4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99bf6d14f8f9097fe4298475f8653608a224cbca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99bf6d14f8f9097fe4298475f8653608a224cbca","html_url":"https://github.com/apache/openjpa/commit/99bf6d14f8f9097fe4298475f8653608a224cbca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99bf6d14f8f9097fe4298475f8653608a224cbca/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"81cb7e17f98946e4455e055f075d958900c2f576","url":"https://api.github.com/repos/apache/openjpa/commits/81cb7e17f98946e4455e055f075d958900c2f576","html_url":"https://github.com/apache/openjpa/commit/81cb7e17f98946e4455e055f075d958900c2f576"}]},{"sha":"94f233f0d813cb6d7b1becde6a1367c8e93f1d8f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0ZjIzM2YwZDgxM2NiNmQ3YjFiZWNkZTZhMTM2N2M4ZTkzZjFkOGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-08T05:18:44Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-08T05:18:44Z"},"message":"OPENJPA-374\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619770 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"752edf95b42426e103ad1e7023b5d5927b0a5594","url":"https://api.github.com/repos/apache/openjpa/git/trees/752edf95b42426e103ad1e7023b5d5927b0a5594"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94f233f0d813cb6d7b1becde6a1367c8e93f1d8f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94f233f0d813cb6d7b1becde6a1367c8e93f1d8f","html_url":"https://github.com/apache/openjpa/commit/94f233f0d813cb6d7b1becde6a1367c8e93f1d8f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94f233f0d813cb6d7b1becde6a1367c8e93f1d8f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"99bf6d14f8f9097fe4298475f8653608a224cbca","url":"https://api.github.com/repos/apache/openjpa/commits/99bf6d14f8f9097fe4298475f8653608a224cbca","html_url":"https://github.com/apache/openjpa/commit/99bf6d14f8f9097fe4298475f8653608a224cbca"}]},{"sha":"8de471e541db40d7addf3d245e39fc97629869e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkZTQ3MWU1NDFkYjQwZDdhZGRmM2QyNDVlMzlmYzk3NjI5ODY5ZTg=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-02-09T20:53:49Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-02-09T20:53:49Z"},"message":"OPENJPA-513.  Three of the four test failures with the IBM JDK were due to a malformed listener-orm.xml file.  XML elements were out of order and there were a couple of syntax errors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@620200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdc59dcc1cac1f729a071dbd5990930508ef625a","url":"https://api.github.com/repos/apache/openjpa/git/trees/bdc59dcc1cac1f729a071dbd5990930508ef625a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8de471e541db40d7addf3d245e39fc97629869e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8de471e541db40d7addf3d245e39fc97629869e8","html_url":"https://github.com/apache/openjpa/commit/8de471e541db40d7addf3d245e39fc97629869e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8de471e541db40d7addf3d245e39fc97629869e8/comments","author":null,"committer":null,"parents":[{"sha":"94f233f0d813cb6d7b1becde6a1367c8e93f1d8f","url":"https://api.github.com/repos/apache/openjpa/commits/94f233f0d813cb6d7b1becde6a1367c8e93f1d8f","html_url":"https://github.com/apache/openjpa/commit/94f233f0d813cb6d7b1becde6a1367c8e93f1d8f"}]},{"sha":"07d26ee05aa0ef4eb29f842c945283e6247d7c4b","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3ZDI2ZWUwNWFhMGVmNGViMjlmODQyYzk0NTI4M2U2MjQ3ZDdjNGI=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-13T16:35:08Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-13T16:35:08Z"},"message":"Generated values for non-ID fields have interacted poorly with post persist call backs prior to r617525.  This test ensures no regression to the buggy behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627516 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a50537aa392da0f06b80a1ff3e178571ff635803","url":"https://api.github.com/repos/apache/openjpa/git/trees/a50537aa392da0f06b80a1ff3e178571ff635803"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07d26ee05aa0ef4eb29f842c945283e6247d7c4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07d26ee05aa0ef4eb29f842c945283e6247d7c4b","html_url":"https://github.com/apache/openjpa/commit/07d26ee05aa0ef4eb29f842c945283e6247d7c4b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07d26ee05aa0ef4eb29f842c945283e6247d7c4b/comments","author":null,"committer":null,"parents":[{"sha":"8de471e541db40d7addf3d245e39fc97629869e8","url":"https://api.github.com/repos/apache/openjpa/commits/8de471e541db40d7addf3d245e39fc97629869e8","html_url":"https://github.com/apache/openjpa/commit/8de471e541db40d7addf3d245e39fc97629869e8"}]},{"sha":"eaf452dcc266505f148c28b3558f5e052df6d89f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhZjQ1MmRjYzI2NjUwNWYxNDhjMjhiMzU1OGY1ZTA1MmRmNmQ4OWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T02:26:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T02:26:59Z"},"message":"OPENJPA-515 Add basic Tests for distributed database support.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627636 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71d27c4476e318241c0e09144e45afd8052974c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/71d27c4476e318241c0e09144e45afd8052974c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/eaf452dcc266505f148c28b3558f5e052df6d89f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/eaf452dcc266505f148c28b3558f5e052df6d89f","html_url":"https://github.com/apache/openjpa/commit/eaf452dcc266505f148c28b3558f5e052df6d89f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/eaf452dcc266505f148c28b3558f5e052df6d89f/comments","author":null,"committer":null,"parents":[{"sha":"07d26ee05aa0ef4eb29f842c945283e6247d7c4b","url":"https://api.github.com/repos/apache/openjpa/commits/07d26ee05aa0ef4eb29f842c945283e6247d7c4b","html_url":"https://github.com/apache/openjpa/commit/07d26ee05aa0ef4eb29f842c945283e6247d7c4b"}]},{"sha":"763fd3e5a3fb2c4fb634b238610ab02000c5a822","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc2M2ZkM2U1YTNmYjJjNGZiNjM0YjIzODYxMGFiMDIwMDBjNWE4MjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T02:27:54Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T02:27:54Z"},"message":"OPENJPA-515 A dummy test to warn that Slice tests are currently inactive.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627638 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d6656edefa5c9b500e3f8c98fb6e08b85dc72267","url":"https://api.github.com/repos/apache/openjpa/git/trees/d6656edefa5c9b500e3f8c98fb6e08b85dc72267"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/763fd3e5a3fb2c4fb634b238610ab02000c5a822","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/763fd3e5a3fb2c4fb634b238610ab02000c5a822","html_url":"https://github.com/apache/openjpa/commit/763fd3e5a3fb2c4fb634b238610ab02000c5a822","comments_url":"https://api.github.com/repos/apache/openjpa/commits/763fd3e5a3fb2c4fb634b238610ab02000c5a822/comments","author":null,"committer":null,"parents":[{"sha":"eaf452dcc266505f148c28b3558f5e052df6d89f","url":"https://api.github.com/repos/apache/openjpa/commits/eaf452dcc266505f148c28b3558f5e052df6d89f","html_url":"https://github.com/apache/openjpa/commit/eaf452dcc266505f148c28b3558f5e052df6d89f"}]},{"sha":"68f25ced8476904f212e35ace817b706cb4ba453","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4ZjI1Y2VkODQ3NjkwNGYyMTJlMzVhY2U4MTdiNzA2Y2I0YmE0NTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T03:27:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T03:27:26Z"},"message":"OPENJPA-551 Support Range Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627645 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a77ee90252904f7d7cb5fa029254fb3fd1dfb43e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a77ee90252904f7d7cb5fa029254fb3fd1dfb43e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68f25ced8476904f212e35ace817b706cb4ba453","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68f25ced8476904f212e35ace817b706cb4ba453","html_url":"https://github.com/apache/openjpa/commit/68f25ced8476904f212e35ace817b706cb4ba453","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68f25ced8476904f212e35ace817b706cb4ba453/comments","author":null,"committer":null,"parents":[{"sha":"763fd3e5a3fb2c4fb634b238610ab02000c5a822","url":"https://api.github.com/repos/apache/openjpa/commits/763fd3e5a3fb2c4fb634b238610ab02000c5a822","html_url":"https://github.com/apache/openjpa/commit/763fd3e5a3fb2c4fb634b238610ab02000c5a822"}]},{"sha":"7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjYTFjZmUyMGMxYWFkZmMyY2U1MjMwZmQ0YzhkMTNkZWVhOWEwOTM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-14T05:43:22Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-14T05:43:22Z"},"message":"Enable PersisentProviderImpl subclass to override the default BrokerImpl alias if none is defined in application.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627668 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c74d4f8782d4467c9e01a24392318327a1aa4e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c74d4f8782d4467c9e01a24392318327a1aa4e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093","html_url":"https://github.com/apache/openjpa/commit/7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093/comments","author":null,"committer":null,"parents":[{"sha":"68f25ced8476904f212e35ace817b706cb4ba453","url":"https://api.github.com/repos/apache/openjpa/commits/68f25ced8476904f212e35ace817b706cb4ba453","html_url":"https://github.com/apache/openjpa/commit/68f25ced8476904f212e35ace817b706cb4ba453"}]},{"sha":"4b45bd587755c0f5c7f7f3eb992e2c90abdca471","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiNDViZDU4Nzc1NWMwZjVjN2Y3ZjNlYjk5MmUyYzkwYWJkY2E0NzE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-02-14T21:10:50Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-02-14T21:10:50Z"},"message":"OPENJPA-477 fix  setting up parameter list for PreparedStatement\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"189cdb49ae0fc1107c97a63a4fce4e1298df7c5f","url":"https://api.github.com/repos/apache/openjpa/git/trees/189cdb49ae0fc1107c97a63a4fce4e1298df7c5f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b45bd587755c0f5c7f7f3eb992e2c90abdca471","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b45bd587755c0f5c7f7f3eb992e2c90abdca471","html_url":"https://github.com/apache/openjpa/commit/4b45bd587755c0f5c7f7f3eb992e2c90abdca471","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b45bd587755c0f5c7f7f3eb992e2c90abdca471/comments","author":null,"committer":null,"parents":[{"sha":"7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093","url":"https://api.github.com/repos/apache/openjpa/commits/7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093","html_url":"https://github.com/apache/openjpa/commit/7ca1cfe20c1aadfc2ce5230fd4c8d13deea9a093"}]},{"sha":"caa400cbb335869941d547038008b23f6a7769d5","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhYTQwMGNiYjMzNTg2OTk0MWQ1NDcwMzgwMDhiMjNmNmE3NzY5ZDU=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2008-02-14T21:36:58Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2008-02-14T21:36:58Z"},"message":"OPENJPA-516. Following the setFormOfUse(...) need to still call setString(...)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627879 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"200864869dc6dae56835e7909016a3e355bdf24a","url":"https://api.github.com/repos/apache/openjpa/git/trees/200864869dc6dae56835e7909016a3e355bdf24a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/caa400cbb335869941d547038008b23f6a7769d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/caa400cbb335869941d547038008b23f6a7769d5","html_url":"https://github.com/apache/openjpa/commit/caa400cbb335869941d547038008b23f6a7769d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/caa400cbb335869941d547038008b23f6a7769d5/comments","author":null,"committer":null,"parents":[{"sha":"4b45bd587755c0f5c7f7f3eb992e2c90abdca471","url":"https://api.github.com/repos/apache/openjpa/commits/4b45bd587755c0f5c7f7f3eb992e2c90abdca471","html_url":"https://github.com/apache/openjpa/commit/4b45bd587755c0f5c7f7f3eb992e2c90abdca471"}]},{"sha":"8a811f69ea4908955a2c07699110e51135098700","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhODExZjY5ZWE0OTA4OTU1YTJjMDc2OTkxMTBlNTExMzUwOTg3MDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T22:16:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T22:16:45Z"},"message":"OPENJPA-515 Add support for targeted query via query hints\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"102deac6e7de7f88588f2770a7033facbf24ee38","url":"https://api.github.com/repos/apache/openjpa/git/trees/102deac6e7de7f88588f2770a7033facbf24ee38"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a811f69ea4908955a2c07699110e51135098700","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a811f69ea4908955a2c07699110e51135098700","html_url":"https://github.com/apache/openjpa/commit/8a811f69ea4908955a2c07699110e51135098700","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a811f69ea4908955a2c07699110e51135098700/comments","author":null,"committer":null,"parents":[{"sha":"caa400cbb335869941d547038008b23f6a7769d5","url":"https://api.github.com/repos/apache/openjpa/commits/caa400cbb335869941d547038008b23f6a7769d5","html_url":"https://github.com/apache/openjpa/commit/caa400cbb335869941d547038008b23f6a7769d5"}]},{"sha":"11fba5a6123d00c60474673ecf55481f25b25ad5","node_id":"MDY6Q29tbWl0MjA2MzY0OjExZmJhNWE2MTIzZDAwYzYwNDc0NjczZWNmNTU0ODFmMjViMjVhZDU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T22:17:12Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T22:17:12Z"},"message":"OPENJPA-515 Add documentation for targeted query via query hints\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5982d3942b4ec94d03389e8eddd2feb0cce7e234","url":"https://api.github.com/repos/apache/openjpa/git/trees/5982d3942b4ec94d03389e8eddd2feb0cce7e234"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11fba5a6123d00c60474673ecf55481f25b25ad5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11fba5a6123d00c60474673ecf55481f25b25ad5","html_url":"https://github.com/apache/openjpa/commit/11fba5a6123d00c60474673ecf55481f25b25ad5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11fba5a6123d00c60474673ecf55481f25b25ad5/comments","author":null,"committer":null,"parents":[{"sha":"8a811f69ea4908955a2c07699110e51135098700","url":"https://api.github.com/repos/apache/openjpa/commits/8a811f69ea4908955a2c07699110e51135098700","html_url":"https://github.com/apache/openjpa/commit/8a811f69ea4908955a2c07699110e51135098700"}]},{"sha":"3d2cbcb7a9eba556bb0dace51df0daba0843b148","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkMmNiY2I3YTllYmE1NTZiYjBkYWNlNTFkZjBkYWJhMDg0M2IxNDg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-15T04:44:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-15T04:44:48Z"},"message":"OPENJPA-515 Maintain thread-transaction affinity for bulk delete/update operation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627943 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57df2bcf6625c17525e0b2b8472e6d0e5f0c7dd5","url":"https://api.github.com/repos/apache/openjpa/git/trees/57df2bcf6625c17525e0b2b8472e6d0e5f0c7dd5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3d2cbcb7a9eba556bb0dace51df0daba0843b148","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3d2cbcb7a9eba556bb0dace51df0daba0843b148","html_url":"https://github.com/apache/openjpa/commit/3d2cbcb7a9eba556bb0dace51df0daba0843b148","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3d2cbcb7a9eba556bb0dace51df0daba0843b148/comments","author":null,"committer":null,"parents":[{"sha":"11fba5a6123d00c60474673ecf55481f25b25ad5","url":"https://api.github.com/repos/apache/openjpa/commits/11fba5a6123d00c60474673ecf55481f25b25ad5","html_url":"https://github.com/apache/openjpa/commit/11fba5a6123d00c60474673ecf55481f25b25ad5"}]},{"sha":"1c0b264517c0f07ec91eeb9c94139d447c208c18","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjMGIyNjQ1MTdjMGYwN2VjOTFlZWI5Yzk0MTM5ZDQ0N2MyMDhjMTg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-15T04:56:23Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-15T04:56:23Z"},"message":"OPENJPA-515 clean up imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627952 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d8275e72f5034282b3a810d4bf5aeb088a61843a","url":"https://api.github.com/repos/apache/openjpa/git/trees/d8275e72f5034282b3a810d4bf5aeb088a61843a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c0b264517c0f07ec91eeb9c94139d447c208c18","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c0b264517c0f07ec91eeb9c94139d447c208c18","html_url":"https://github.com/apache/openjpa/commit/1c0b264517c0f07ec91eeb9c94139d447c208c18","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c0b264517c0f07ec91eeb9c94139d447c208c18/comments","author":null,"committer":null,"parents":[{"sha":"3d2cbcb7a9eba556bb0dace51df0daba0843b148","url":"https://api.github.com/repos/apache/openjpa/commits/3d2cbcb7a9eba556bb0dace51df0daba0843b148","html_url":"https://github.com/apache/openjpa/commit/3d2cbcb7a9eba556bb0dace51df0daba0843b148"}]},{"sha":"1c738c44122bf4b79bd61c058851803e1d445440","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjNzM4YzQ0MTIyYmY0Yjc5YmQ2MWMwNTg4NTE4MDNlMWQ0NDU0NDA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T05:26:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T05:26:15Z"},"message":"Disabling Slice tests, since they're failing the build.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627955 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7987acc1e0cadca3b181000a35b79a9e377b026a","url":"https://api.github.com/repos/apache/openjpa/git/trees/7987acc1e0cadca3b181000a35b79a9e377b026a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c738c44122bf4b79bd61c058851803e1d445440","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c738c44122bf4b79bd61c058851803e1d445440","html_url":"https://github.com/apache/openjpa/commit/1c738c44122bf4b79bd61c058851803e1d445440","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c738c44122bf4b79bd61c058851803e1d445440/comments","author":null,"committer":null,"parents":[{"sha":"1c0b264517c0f07ec91eeb9c94139d447c208c18","url":"https://api.github.com/repos/apache/openjpa/commits/1c0b264517c0f07ec91eeb9c94139d447c208c18","html_url":"https://github.com/apache/openjpa/commit/1c0b264517c0f07ec91eeb9c94139d447c208c18"}]},{"sha":"ff42968eed5a7a90fcb4245f6b25bce56659d150","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmNDI5NjhlZWQ1YTdhOTBmY2I0MjQ1ZjZiMjViY2U1NjY1OWQxNTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-15T07:38:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-15T07:38:33Z"},"message":"OPENJPA-515 Missing Licsnese header\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd2e1fd63de67055f4711f8aa2682165b42f49ba","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd2e1fd63de67055f4711f8aa2682165b42f49ba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150","html_url":"https://github.com/apache/openjpa/commit/ff42968eed5a7a90fcb4245f6b25bce56659d150","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150/comments","author":null,"committer":null,"parents":[{"sha":"1c738c44122bf4b79bd61c058851803e1d445440","url":"https://api.github.com/repos/apache/openjpa/commits/1c738c44122bf4b79bd61c058851803e1d445440","html_url":"https://github.com/apache/openjpa/commit/1c738c44122bf4b79bd61c058851803e1d445440"}]},{"sha":"325aa77bc15aaa0dc0c0118186525af232f2be36","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyNWFhNzdiYzE1YWFhMGRjMGMwMTE4MTg2NTI1YWYyMzJmMmJlMzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"message":"New test cases, currently disabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627979 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20","url":"https://api.github.com/repos/apache/openjpa/git/trees/4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","html_url":"https://github.com/apache/openjpa/commit/325aa77bc15aaa0dc0c0118186525af232f2be36","comments_url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36/comments","author":null,"committer":null,"parents":[{"sha":"ff42968eed5a7a90fcb4245f6b25bce56659d150","url":"https://api.github.com/repos/apache/openjpa/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150","html_url":"https://github.com/apache/openjpa/commit/ff42968eed5a7a90fcb4245f6b25bce56659d150"}]},{"sha":"d2f5b73e91268dd4cb5b0f57b11794029eea4709","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyZjViNzNlOTEyNjhkZDRjYjViMGY1N2IxMTc5NDAyOWVlYTQ3MDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:25:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:25:57Z"},"message":"previous exclude was overly comprehensive\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627980 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7cc1953232f3dfcdd8f16e249a4919efdc916f53","url":"https://api.github.com/repos/apache/openjpa/git/trees/7cc1953232f3dfcdd8f16e249a4919efdc916f53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d2f5b73e91268dd4cb5b0f57b11794029eea4709","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d2f5b73e91268dd4cb5b0f57b11794029eea4709","html_url":"https://github.com/apache/openjpa/commit/d2f5b73e91268dd4cb5b0f57b11794029eea4709","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d2f5b73e91268dd4cb5b0f57b11794029eea4709/comments","author":null,"committer":null,"parents":[{"sha":"325aa77bc15aaa0dc0c0118186525af232f2be36","url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","html_url":"https://github.com/apache/openjpa/commit/325aa77bc15aaa0dc0c0118186525af232f2be36"}]},{"sha":"3735e9a54e3670d778afd56fae8d0d1f5e11cc35","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3MzVlOWE1NGUzNjcwZDc3OGFmZDU2ZmFlOGQwZDFmNWUxMWNjMzU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T16:10:09Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T16:10:09Z"},"message":"change a couple of line endings; remove MySQL requirement from openjpa-slice pom\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628095 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64bbcfed3b161aecfb5065eaa73d3bd7dab1c070","url":"https://api.github.com/repos/apache/openjpa/git/trees/64bbcfed3b161aecfb5065eaa73d3bd7dab1c070"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3735e9a54e3670d778afd56fae8d0d1f5e11cc35","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3735e9a54e3670d778afd56fae8d0d1f5e11cc35","html_url":"https://github.com/apache/openjpa/commit/3735e9a54e3670d778afd56fae8d0d1f5e11cc35","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3735e9a54e3670d778afd56fae8d0d1f5e11cc35/comments","author":null,"committer":null,"parents":[{"sha":"d2f5b73e91268dd4cb5b0f57b11794029eea4709","url":"https://api.github.com/repos/apache/openjpa/commits/d2f5b73e91268dd4cb5b0f57b11794029eea4709","html_url":"https://github.com/apache/openjpa/commit/d2f5b73e91268dd4cb5b0f57b11794029eea4709"}]},{"sha":"1b74811ed9742ff972caca854d3d3aaa04f82532","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiNzQ4MTFlZDk3NDJmZjk3MmNhY2E4NTRkM2QzYWFhMDRmODI1MzI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T16:38:22Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T16:38:22Z"},"message":"removed unintentionally-added tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628109 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"05d60bad6042dc23c7fd4238a581a85babcf1efb","url":"https://api.github.com/repos/apache/openjpa/git/trees/05d60bad6042dc23c7fd4238a581a85babcf1efb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b74811ed9742ff972caca854d3d3aaa04f82532","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b74811ed9742ff972caca854d3d3aaa04f82532","html_url":"https://github.com/apache/openjpa/commit/1b74811ed9742ff972caca854d3d3aaa04f82532","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b74811ed9742ff972caca854d3d3aaa04f82532/comments","author":null,"committer":null,"parents":[{"sha":"3735e9a54e3670d778afd56fae8d0d1f5e11cc35","url":"https://api.github.com/repos/apache/openjpa/commits/3735e9a54e3670d778afd56fae8d0d1f5e11cc35","html_url":"https://github.com/apache/openjpa/commit/3735e9a54e3670d778afd56fae8d0d1f5e11cc35"}]},{"sha":"699f06e06c7e07a37442bf7534aa02e3873d3f96","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5OWYwNmUwNmM3ZTA3YTM3NDQyYmY3NTM0YWEwMmUzODczZDNmOTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T16:41:24Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T16:41:24Z"},"message":"removed unintentionally-added temporary file\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628111 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1bef163c9af1f8a05897bc85d563f7c2506b4cf1","url":"https://api.github.com/repos/apache/openjpa/git/trees/1bef163c9af1f8a05897bc85d563f7c2506b4cf1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/699f06e06c7e07a37442bf7534aa02e3873d3f96","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/699f06e06c7e07a37442bf7534aa02e3873d3f96","html_url":"https://github.com/apache/openjpa/commit/699f06e06c7e07a37442bf7534aa02e3873d3f96","comments_url":"https://api.github.com/repos/apache/openjpa/commits/699f06e06c7e07a37442bf7534aa02e3873d3f96/comments","author":null,"committer":null,"parents":[{"sha":"1b74811ed9742ff972caca854d3d3aaa04f82532","url":"https://api.github.com/repos/apache/openjpa/commits/1b74811ed9742ff972caca854d3d3aaa04f82532","html_url":"https://github.com/apache/openjpa/commit/1b74811ed9742ff972caca854d3d3aaa04f82532"}]},{"sha":"31778f01a870ec37820def46e4dd802a8fd8eb66","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNzc4ZjAxYTg3MGVjMzc4MjBkZWY0NmU0ZGQ4MDJhOGZkOGViNjY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-15T20:47:09Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-15T20:47:09Z"},"message":"Enable PersisentProviderImpl subclass to override the configuration impl used by class transformer. The current OpenJPAConfigurationImpl does not recognize options defined in its sub-class and posted an invalid warning message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628168 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a0cda035e70e31e536001a56ce436b10e5b8f72e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a0cda035e70e31e536001a56ce436b10e5b8f72e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31778f01a870ec37820def46e4dd802a8fd8eb66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31778f01a870ec37820def46e4dd802a8fd8eb66","html_url":"https://github.com/apache/openjpa/commit/31778f01a870ec37820def46e4dd802a8fd8eb66","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31778f01a870ec37820def46e4dd802a8fd8eb66/comments","author":null,"committer":null,"parents":[{"sha":"699f06e06c7e07a37442bf7534aa02e3873d3f96","url":"https://api.github.com/repos/apache/openjpa/commits/699f06e06c7e07a37442bf7534aa02e3873d3f96","html_url":"https://github.com/apache/openjpa/commit/699f06e06c7e07a37442bf7534aa02e3873d3f96"}]},{"sha":"4ab1384b430897c394ebf24d2d3d39c74152c1d8","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhYjEzODRiNDMwODk3YzM5NGViZjI0ZDJkM2QzOWM3NDE1MmMxZDg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T21:48:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T21:48:03Z"},"message":"Fixed test case dependency on Sun's VM\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628177 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"323a50876e12e16511c3613647051fecfb4185d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/323a50876e12e16511c3613647051fecfb4185d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4ab1384b430897c394ebf24d2d3d39c74152c1d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4ab1384b430897c394ebf24d2d3d39c74152c1d8","html_url":"https://github.com/apache/openjpa/commit/4ab1384b430897c394ebf24d2d3d39c74152c1d8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4ab1384b430897c394ebf24d2d3d39c74152c1d8/comments","author":null,"committer":null,"parents":[{"sha":"31778f01a870ec37820def46e4dd802a8fd8eb66","url":"https://api.github.com/repos/apache/openjpa/commits/31778f01a870ec37820def46e4dd802a8fd8eb66","html_url":"https://github.com/apache/openjpa/commit/31778f01a870ec37820def46e4dd802a8fd8eb66"}]},{"sha":"7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkNDRlN2EzNTViOTYxMWYzN2VkMDEyMmY0YTNlNjliZGZiMzM1YWI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-16T03:06:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-16T03:06:37Z"},"message":"Enable some of the new tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628233 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"693d3166a6fd064fb8a0cb2bd350ed4c4bf3b30b","url":"https://api.github.com/repos/apache/openjpa/git/trees/693d3166a6fd064fb8a0cb2bd350ed4c4bf3b30b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","html_url":"https://github.com/apache/openjpa/commit/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab/comments","author":null,"committer":null,"parents":[{"sha":"4ab1384b430897c394ebf24d2d3d39c74152c1d8","url":"https://api.github.com/repos/apache/openjpa/commits/4ab1384b430897c394ebf24d2d3d39c74152c1d8","html_url":"https://github.com/apache/openjpa/commit/4ab1384b430897c394ebf24d2d3d39c74152c1d8"}]},{"sha":"de8a4760c8b7df2186cd831733b8fdc095dbc736","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlOGE0NzYwYzhiN2RmMjE4NmNkODMxNzMzYjhmZGMwOTVkYmM3MzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-16T19:30:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-16T19:30:20Z"},"message":"Enable some of the new tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1187b8ebe3b5b6320d4d0f52c127054cee42c956","url":"https://api.github.com/repos/apache/openjpa/git/trees/1187b8ebe3b5b6320d4d0f52c127054cee42c956"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736","html_url":"https://github.com/apache/openjpa/commit/de8a4760c8b7df2186cd831733b8fdc095dbc736","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736/comments","author":null,"committer":null,"parents":[{"sha":"7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","url":"https://api.github.com/repos/apache/openjpa/commits/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab","html_url":"https://github.com/apache/openjpa/commit/7d44e7a355b9611f37ed0122f4a3e69bdfb335ab"}]},{"sha":"c457053f9459293915fb41d1cdea09e014a0175d","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0NTcwNTNmOTQ1OTI5MzkxNWZiNDFkMWNkZWEwOWUwMTRhMDE3NWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-16T22:03:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-16T22:03:25Z"},"message":"OPENJPA-515 Remove XA transaction across slices + test configuration for Derby + activate tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628387 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23d11fa4c2f212cb08dc3f811fb60190e847568c","url":"https://api.github.com/repos/apache/openjpa/git/trees/23d11fa4c2f212cb08dc3f811fb60190e847568c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c457053f9459293915fb41d1cdea09e014a0175d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c457053f9459293915fb41d1cdea09e014a0175d","html_url":"https://github.com/apache/openjpa/commit/c457053f9459293915fb41d1cdea09e014a0175d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c457053f9459293915fb41d1cdea09e014a0175d/comments","author":null,"committer":null,"parents":[{"sha":"de8a4760c8b7df2186cd831733b8fdc095dbc736","url":"https://api.github.com/repos/apache/openjpa/commits/de8a4760c8b7df2186cd831733b8fdc095dbc736","html_url":"https://github.com/apache/openjpa/commit/de8a4760c8b7df2186cd831733b8fdc095dbc736"}]},{"sha":"161527339af62ec2b0cd4dafc663cde6dc59041a","node_id":"MDY6Q29tbWl0MjA2MzY0OjE2MTUyNzMzOWFmNjJlYzJiMGNkNGRhZmM2NjNjZGU2ZGM1OTA0MWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-18T16:53:15Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-18T16:53:15Z"},"message":"OPENJPA-517\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628811 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c048ffec315c263033dd9bf33c18cc3461a5fb88","url":"https://api.github.com/repos/apache/openjpa/git/trees/c048ffec315c263033dd9bf33c18cc3461a5fb88"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/161527339af62ec2b0cd4dafc663cde6dc59041a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/161527339af62ec2b0cd4dafc663cde6dc59041a","html_url":"https://github.com/apache/openjpa/commit/161527339af62ec2b0cd4dafc663cde6dc59041a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/161527339af62ec2b0cd4dafc663cde6dc59041a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c457053f9459293915fb41d1cdea09e014a0175d","url":"https://api.github.com/repos/apache/openjpa/commits/c457053f9459293915fb41d1cdea09e014a0175d","html_url":"https://github.com/apache/openjpa/commit/c457053f9459293915fb41d1cdea09e014a0175d"}]},{"sha":"a7648a78c557498082be8b00f6e637066223d5e0","node_id":"MDY6Q29tbWl0MjA2MzY0OmE3NjQ4YTc4YzU1NzQ5ODA4MmJlOGIwMGY2ZTYzNzA2NjIyM2Q1ZTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-18T18:25:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-18T18:25:55Z"},"message":"Enable more new tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@628840 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5d97e381e40b857fb09345453ee1bacbb629fe3c","url":"https://api.github.com/repos/apache/openjpa/git/trees/5d97e381e40b857fb09345453ee1bacbb629fe3c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a7648a78c557498082be8b00f6e637066223d5e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a7648a78c557498082be8b00f6e637066223d5e0","html_url":"https://github.com/apache/openjpa/commit/a7648a78c557498082be8b00f6e637066223d5e0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a7648a78c557498082be8b00f6e637066223d5e0/comments","author":null,"committer":null,"parents":[{"sha":"161527339af62ec2b0cd4dafc663cde6dc59041a","url":"https://api.github.com/repos/apache/openjpa/commits/161527339af62ec2b0cd4dafc663cde6dc59041a","html_url":"https://github.com/apache/openjpa/commit/161527339af62ec2b0cd4dafc663cde6dc59041a"}]},{"sha":"ec7bd83e1afb1f08ff8f809331526c5186f61b62","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjN2JkODNlMWFmYjFmMDhmZjhmODA5MzMxNTI2YzUxODZmNjFiNjI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-20T15:02:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-20T15:02:30Z"},"message":"OPENJPA-518 Committing code changes suggested by Adam Toback\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@629492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"346ad4e6fba8267420523c0426df0d35d2ce635c","url":"https://api.github.com/repos/apache/openjpa/git/trees/346ad4e6fba8267420523c0426df0d35d2ce635c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec7bd83e1afb1f08ff8f809331526c5186f61b62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec7bd83e1afb1f08ff8f809331526c5186f61b62","html_url":"https://github.com/apache/openjpa/commit/ec7bd83e1afb1f08ff8f809331526c5186f61b62","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec7bd83e1afb1f08ff8f809331526c5186f61b62/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7648a78c557498082be8b00f6e637066223d5e0","url":"https://api.github.com/repos/apache/openjpa/commits/a7648a78c557498082be8b00f6e637066223d5e0","html_url":"https://github.com/apache/openjpa/commit/a7648a78c557498082be8b00f6e637066223d5e0"}]},{"sha":"6bb87e620310fbd6be0493485dca9e9bc910985c","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiYjg3ZTYyMDMxMGZiZDZiZTA0OTM0ODVkY2E5ZTliYzkxMDk4NWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-20T21:58:01Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-20T21:58:01Z"},"message":"OPENJPA-484. Also added 'h2' as an alias for H2Dictionary in the DBDictionary property.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@629627 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e84b9e71c06ae01f73e1a14cff9cb23051e9953c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e84b9e71c06ae01f73e1a14cff9cb23051e9953c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6bb87e620310fbd6be0493485dca9e9bc910985c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6bb87e620310fbd6be0493485dca9e9bc910985c","html_url":"https://github.com/apache/openjpa/commit/6bb87e620310fbd6be0493485dca9e9bc910985c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6bb87e620310fbd6be0493485dca9e9bc910985c/comments","author":null,"committer":null,"parents":[{"sha":"ec7bd83e1afb1f08ff8f809331526c5186f61b62","url":"https://api.github.com/repos/apache/openjpa/commits/ec7bd83e1afb1f08ff8f809331526c5186f61b62","html_url":"https://github.com/apache/openjpa/commit/ec7bd83e1afb1f08ff8f809331526c5186f61b62"}]},{"sha":"1d57a1fdaac3f984a582b250244c811a7d7ed58d","node_id":"MDY6Q29tbWl0MjA2MzY0OjFkNTdhMWZkYWFjM2Y5ODRhNTgyYjI1MDI0NGM4MTFhN2Q3ZWQ1OGQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-02-21T17:10:53Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-02-21T17:10:53Z"},"message":"OPENJPA-519.  Need to hardcode the 2.4 version until the problem is resolved in the maven surefire plugin (supposedly in 2.4.2).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@629874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b99ce4b3b6feb38f5766c505ffd3a6a4be3f5cb7","url":"https://api.github.com/repos/apache/openjpa/git/trees/b99ce4b3b6feb38f5766c505ffd3a6a4be3f5cb7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1d57a1fdaac3f984a582b250244c811a7d7ed58d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1d57a1fdaac3f984a582b250244c811a7d7ed58d","html_url":"https://github.com/apache/openjpa/commit/1d57a1fdaac3f984a582b250244c811a7d7ed58d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1d57a1fdaac3f984a582b250244c811a7d7ed58d/comments","author":null,"committer":null,"parents":[{"sha":"6bb87e620310fbd6be0493485dca9e9bc910985c","url":"https://api.github.com/repos/apache/openjpa/commits/6bb87e620310fbd6be0493485dca9e9bc910985c","html_url":"https://github.com/apache/openjpa/commit/6bb87e620310fbd6be0493485dca9e9bc910985c"}]},{"sha":"4c70963f1a990787ffa2495016b5142c0fbd0747","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjNzA5NjNmMWE5OTA3ODdmZmEyNDk1MDE2YjUxNDJjMGZiZDA3NDc=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-02-21T21:03:10Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-02-21T21:03:10Z"},"message":"OPENJPA-513.  Temporarily exclude the \"no xsd\" test until we get a workaround figured out.  I haven't figured out an easy way and I need to make progress with the IBM JDK...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@629990 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4257c5587977666df78528073f8b9c357964d69","url":"https://api.github.com/repos/apache/openjpa/git/trees/c4257c5587977666df78528073f8b9c357964d69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c70963f1a990787ffa2495016b5142c0fbd0747","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c70963f1a990787ffa2495016b5142c0fbd0747","html_url":"https://github.com/apache/openjpa/commit/4c70963f1a990787ffa2495016b5142c0fbd0747","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c70963f1a990787ffa2495016b5142c0fbd0747/comments","author":null,"committer":null,"parents":[{"sha":"1d57a1fdaac3f984a582b250244c811a7d7ed58d","url":"https://api.github.com/repos/apache/openjpa/commits/1d57a1fdaac3f984a582b250244c811a7d7ed58d","html_url":"https://github.com/apache/openjpa/commit/1d57a1fdaac3f984a582b250244c811a7d7ed58d"}]},{"sha":"c5309299b58fc75bd2f537776c5cc1c2b1e97b02","node_id":"MDY6Q29tbWl0MjA2MzY0OmM1MzA5Mjk5YjU4ZmM3NWJkMmY1Mzc3NzZjNWNjMWMyYjFlOTdiMDI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-22T01:09:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-22T01:09:05Z"},"message":"OPENJPA-521. This is a partial fix; we should be able to avoid the looping in clearInverseRelationCache with a bit of extra data structures in FieldMetaData, probably populated during FieldMetaData.getOrder() or MetaDataRepository.newOrder().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@630063 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98c06cb161f661ca2ccc74c307e73de3b642be8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/98c06cb161f661ca2ccc74c307e73de3b642be8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c5309299b58fc75bd2f537776c5cc1c2b1e97b02","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c5309299b58fc75bd2f537776c5cc1c2b1e97b02","html_url":"https://github.com/apache/openjpa/commit/c5309299b58fc75bd2f537776c5cc1c2b1e97b02","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c5309299b58fc75bd2f537776c5cc1c2b1e97b02/comments","author":null,"committer":null,"parents":[{"sha":"4c70963f1a990787ffa2495016b5142c0fbd0747","url":"https://api.github.com/repos/apache/openjpa/commits/4c70963f1a990787ffa2495016b5142c0fbd0747","html_url":"https://github.com/apache/openjpa/commit/4c70963f1a990787ffa2495016b5142c0fbd0747"}]},{"sha":"699f043cd24ab24ff7445ce9d9486fb5c6be1298","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5OWYwNDNjZDI0YWIyNGZmNzQ0NWNlOWQ5NDg2ZmI1YzZiZTEyOTg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-22T22:40:08Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-22T22:40:08Z"},"message":"Lazy many-to-one tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@630340 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f9c66612056e4b5d82a257d0a8d74b304735ac6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f9c66612056e4b5d82a257d0a8d74b304735ac6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/699f043cd24ab24ff7445ce9d9486fb5c6be1298","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/699f043cd24ab24ff7445ce9d9486fb5c6be1298","html_url":"https://github.com/apache/openjpa/commit/699f043cd24ab24ff7445ce9d9486fb5c6be1298","comments_url":"https://api.github.com/repos/apache/openjpa/commits/699f043cd24ab24ff7445ce9d9486fb5c6be1298/comments","author":null,"committer":null,"parents":[{"sha":"c5309299b58fc75bd2f537776c5cc1c2b1e97b02","url":"https://api.github.com/repos/apache/openjpa/commits/c5309299b58fc75bd2f537776c5cc1c2b1e97b02","html_url":"https://github.com/apache/openjpa/commit/c5309299b58fc75bd2f537776c5cc1c2b1e97b02"}]},{"sha":"c3e2f01204f028ef4563d17cd192a15bead36f27","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzZTJmMDEyMDRmMDI4ZWY0NTYzZDE3Y2QxOTJhMTViZWFkMzZmMjc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-23T19:38:00Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-23T19:38:00Z"},"message":"Fix TestVersion's \"InvalidStateException: The context has been closed.\" problem: em1 and em2 are using the same em from currentEntityManager(). This test is very similar to (if not the same as) *.persistence.jdbc.annotation.TestVersion.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@630516 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef3617e52c01971b0c36efee76dfe3ea6269c295","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef3617e52c01971b0c36efee76dfe3ea6269c295"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c3e2f01204f028ef4563d17cd192a15bead36f27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c3e2f01204f028ef4563d17cd192a15bead36f27","html_url":"https://github.com/apache/openjpa/commit/c3e2f01204f028ef4563d17cd192a15bead36f27","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c3e2f01204f028ef4563d17cd192a15bead36f27/comments","author":null,"committer":null,"parents":[{"sha":"699f043cd24ab24ff7445ce9d9486fb5c6be1298","url":"https://api.github.com/repos/apache/openjpa/commits/699f043cd24ab24ff7445ce9d9486fb5c6be1298","html_url":"https://github.com/apache/openjpa/commit/699f043cd24ab24ff7445ce9d9486fb5c6be1298"}]},{"sha":"c4af04617ebb18551f6cf57e80b798e110da18a6","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0YWYwNDYxN2ViYjE4NTUxZjZjZjU3ZTgwYjc5OGUxMTBkYTE4YTY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-25T22:59:29Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-25T22:59:29Z"},"message":"OPENJPA-359 Improve Timestamp resolution for use by versioning.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@631028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08e20f9487ef5cec1c5d57b18c07a5d45f9383de","url":"https://api.github.com/repos/apache/openjpa/git/trees/08e20f9487ef5cec1c5d57b18c07a5d45f9383de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c4af04617ebb18551f6cf57e80b798e110da18a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c4af04617ebb18551f6cf57e80b798e110da18a6","html_url":"https://github.com/apache/openjpa/commit/c4af04617ebb18551f6cf57e80b798e110da18a6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c4af04617ebb18551f6cf57e80b798e110da18a6/comments","author":null,"committer":null,"parents":[{"sha":"c3e2f01204f028ef4563d17cd192a15bead36f27","url":"https://api.github.com/repos/apache/openjpa/commits/c3e2f01204f028ef4563d17cd192a15bead36f27","html_url":"https://github.com/apache/openjpa/commit/c3e2f01204f028ef4563d17cd192a15bead36f27"}]},{"sha":"e097063b0a2079bd03fc680dacf30782c35305e6","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwOTcwNjNiMGEyMDc5YmQwM2ZjNjgwZGFjZjMwNzgyYzM1MzA1ZTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-26T18:40:13Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-26T18:40:13Z"},"message":"Trivial whitespace change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@631329 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31146b9cf8017a1346ba9d6c2a17331ba99e6815","url":"https://api.github.com/repos/apache/openjpa/git/trees/31146b9cf8017a1346ba9d6c2a17331ba99e6815"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e097063b0a2079bd03fc680dacf30782c35305e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e097063b0a2079bd03fc680dacf30782c35305e6","html_url":"https://github.com/apache/openjpa/commit/e097063b0a2079bd03fc680dacf30782c35305e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e097063b0a2079bd03fc680dacf30782c35305e6/comments","author":null,"committer":null,"parents":[{"sha":"c4af04617ebb18551f6cf57e80b798e110da18a6","url":"https://api.github.com/repos/apache/openjpa/commits/c4af04617ebb18551f6cf57e80b798e110da18a6","html_url":"https://github.com/apache/openjpa/commit/c4af04617ebb18551f6cf57e80b798e110da18a6"}]},{"sha":"177111b5598e4301c2d4e2de7c86b7e0a8acef88","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3NzExMWI1NTk4ZTQzMDFjMmQ0ZTJkZTdjODZiN2UwYThhY2VmODg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-27T17:46:00Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-02-27T17:46:00Z"},"message":"Potential NPE where custom can be null, Boolean.TRUE or Boolean.FALSE. Follow the pattern in update() and deleet()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@631663 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9d20fee769a8e4ac3e9a3ebf074fd41ef8ad989","url":"https://api.github.com/repos/apache/openjpa/git/trees/a9d20fee769a8e4ac3e9a3ebf074fd41ef8ad989"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/177111b5598e4301c2d4e2de7c86b7e0a8acef88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/177111b5598e4301c2d4e2de7c86b7e0a8acef88","html_url":"https://github.com/apache/openjpa/commit/177111b5598e4301c2d4e2de7c86b7e0a8acef88","comments_url":"https://api.github.com/repos/apache/openjpa/commits/177111b5598e4301c2d4e2de7c86b7e0a8acef88/comments","author":null,"committer":null,"parents":[{"sha":"e097063b0a2079bd03fc680dacf30782c35305e6","url":"https://api.github.com/repos/apache/openjpa/commits/e097063b0a2079bd03fc680dacf30782c35305e6","html_url":"https://github.com/apache/openjpa/commit/e097063b0a2079bd03fc680dacf30782c35305e6"}]},{"sha":"66d6230a417972e229a60375201f788e8085dde2","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2ZDYyMzBhNDE3OTcyZTIyOWE2MDM3NTIwMWY3ODhlODA4NWRkZTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-29T18:41:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-29T18:41:16Z"},"message":"Additional test case for enums in queries\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@632404 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f5cf54aba16ab812688c73c81d74b16a5bddb65","url":"https://api.github.com/repos/apache/openjpa/git/trees/8f5cf54aba16ab812688c73c81d74b16a5bddb65"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/66d6230a417972e229a60375201f788e8085dde2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/66d6230a417972e229a60375201f788e8085dde2","html_url":"https://github.com/apache/openjpa/commit/66d6230a417972e229a60375201f788e8085dde2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/66d6230a417972e229a60375201f788e8085dde2/comments","author":null,"committer":null,"parents":[{"sha":"177111b5598e4301c2d4e2de7c86b7e0a8acef88","url":"https://api.github.com/repos/apache/openjpa/commits/177111b5598e4301c2d4e2de7c86b7e0a8acef88","html_url":"https://github.com/apache/openjpa/commit/177111b5598e4301c2d4e2de7c86b7e0a8acef88"}]},{"sha":"9ece24ade3a94b1227bfd40ae9b37b9def386291","node_id":"MDY6Q29tbWl0MjA2MzY0OjllY2UyNGFkZTNhOTRiMTIyN2JmZDQwYWU5YjM3YjlkZWYzODYyOTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-29T19:16:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-29T19:16:27Z"},"message":"Better error message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@632412 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aca762ca57e30a1dd8b8a2b836d92355e7e1744b","url":"https://api.github.com/repos/apache/openjpa/git/trees/aca762ca57e30a1dd8b8a2b836d92355e7e1744b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ece24ade3a94b1227bfd40ae9b37b9def386291","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ece24ade3a94b1227bfd40ae9b37b9def386291","html_url":"https://github.com/apache/openjpa/commit/9ece24ade3a94b1227bfd40ae9b37b9def386291","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ece24ade3a94b1227bfd40ae9b37b9def386291/comments","author":null,"committer":null,"parents":[{"sha":"66d6230a417972e229a60375201f788e8085dde2","url":"https://api.github.com/repos/apache/openjpa/commits/66d6230a417972e229a60375201f788e8085dde2","html_url":"https://github.com/apache/openjpa/commit/66d6230a417972e229a60375201f788e8085dde2"}]},{"sha":"527b09ce6ecde12d1037a8ef9a86312d3dbe6971","node_id":"MDY6Q29tbWl0MjA2MzY0OjUyN2IwOWNlNmVjZGUxMmQxMDM3YThlZjlhODYzMTJkM2RiZTY5NzE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-29T22:16:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-29T22:16:30Z"},"message":"OPENJPA-529 cloning configuration before running enhancer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@632462 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb4430f5fa4a6f1ac7dc1b3649a53d952692954b","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb4430f5fa4a6f1ac7dc1b3649a53d952692954b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/527b09ce6ecde12d1037a8ef9a86312d3dbe6971","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/527b09ce6ecde12d1037a8ef9a86312d3dbe6971","html_url":"https://github.com/apache/openjpa/commit/527b09ce6ecde12d1037a8ef9a86312d3dbe6971","comments_url":"https://api.github.com/repos/apache/openjpa/commits/527b09ce6ecde12d1037a8ef9a86312d3dbe6971/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ece24ade3a94b1227bfd40ae9b37b9def386291","url":"https://api.github.com/repos/apache/openjpa/commits/9ece24ade3a94b1227bfd40ae9b37b9def386291","html_url":"https://github.com/apache/openjpa/commit/9ece24ade3a94b1227bfd40ae9b37b9def386291"}]},{"sha":"a4600fbe98636abf2f72904852008ea09b8793bc","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0NjAwZmJlOTg2MzZhYmYyZjcyOTA0ODUyMDA4ZWEwOWI4NzkzYmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-29T23:06:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-29T23:06:06Z"},"message":"OPENJPA-528 Handle foreignKey column names similarly to joins in PeristenceMetaDataDefaults.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@632486 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a8fc4cab2e697216531c0fd35d1c1294659a10e","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a8fc4cab2e697216531c0fd35d1c1294659a10e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4600fbe98636abf2f72904852008ea09b8793bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4600fbe98636abf2f72904852008ea09b8793bc","html_url":"https://github.com/apache/openjpa/commit/a4600fbe98636abf2f72904852008ea09b8793bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4600fbe98636abf2f72904852008ea09b8793bc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"527b09ce6ecde12d1037a8ef9a86312d3dbe6971","url":"https://api.github.com/repos/apache/openjpa/commits/527b09ce6ecde12d1037a8ef9a86312d3dbe6971","html_url":"https://github.com/apache/openjpa/commit/527b09ce6ecde12d1037a8ef9a86312d3dbe6971"}]},{"sha":"ca9828726d333c043d4a3a97d5276f97591077c2","node_id":"MDY6Q29tbWl0MjA2MzY0OmNhOTgyODcyNmQzMzNjMDQzZDRhM2E5N2Q1Mjc2Zjk3NTkxMDc3YzI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-03T12:54:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-03T12:54:56Z"},"message":"OPENJPA-528 reverting behavior. Original fix caused problems with the TCK. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f27e47b5d1d55fe4dec88aaefbea5ee428e92ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/8f27e47b5d1d55fe4dec88aaefbea5ee428e92ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ca9828726d333c043d4a3a97d5276f97591077c2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ca9828726d333c043d4a3a97d5276f97591077c2","html_url":"https://github.com/apache/openjpa/commit/ca9828726d333c043d4a3a97d5276f97591077c2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ca9828726d333c043d4a3a97d5276f97591077c2/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a4600fbe98636abf2f72904852008ea09b8793bc","url":"https://api.github.com/repos/apache/openjpa/commits/a4600fbe98636abf2f72904852008ea09b8793bc","html_url":"https://github.com/apache/openjpa/commit/a4600fbe98636abf2f72904852008ea09b8793bc"}]},{"sha":"7487d735074888a211080ea8cb23296b86a4ab41","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0ODdkNzM1MDc0ODg4YTIxMTA4MGVhOGNiMjMyOTZiODZhNGFiNDE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-03T19:38:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-03T19:38:47Z"},"message":"OPENJPA-430. Reverting mapping defaults change; I'm not convinced that the code is correct, but internal Kodo tests fail with the new behavior. Changing for now; more investigation to follow.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633245 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5db03b6774f48bb60b27040d83698c31e86cc44","url":"https://api.github.com/repos/apache/openjpa/git/trees/d5db03b6774f48bb60b27040d83698c31e86cc44"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7487d735074888a211080ea8cb23296b86a4ab41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7487d735074888a211080ea8cb23296b86a4ab41","html_url":"https://github.com/apache/openjpa/commit/7487d735074888a211080ea8cb23296b86a4ab41","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7487d735074888a211080ea8cb23296b86a4ab41/comments","author":null,"committer":null,"parents":[{"sha":"ca9828726d333c043d4a3a97d5276f97591077c2","url":"https://api.github.com/repos/apache/openjpa/commits/ca9828726d333c043d4a3a97d5276f97591077c2","html_url":"https://github.com/apache/openjpa/commit/ca9828726d333c043d4a3a97d5276f97591077c2"}]},{"sha":"c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7","node_id":"MDY6Q29tbWl0MjA2MzY0OmMzYWQwNmU4ZmYxMmEzZjE4MzYxMTQ2OTVhZGZiOGM0ZjlkZGVhYTc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-03T22:40:13Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-03T22:40:13Z"},"message":"Change _state and JDBCConfigurationState from private to protect enabling JDBCFechConfigurationImpl subclass to propagate correct state information in subclass's newInstance() method call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633310 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae8a706cd793803aa859a4c998d75e0bc1f8c4bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae8a706cd793803aa859a4c998d75e0bc1f8c4bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7","html_url":"https://github.com/apache/openjpa/commit/c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7/comments","author":null,"committer":null,"parents":[{"sha":"7487d735074888a211080ea8cb23296b86a4ab41","url":"https://api.github.com/repos/apache/openjpa/commits/7487d735074888a211080ea8cb23296b86a4ab41","html_url":"https://github.com/apache/openjpa/commit/7487d735074888a211080ea8cb23296b86a4ab41"}]},{"sha":"64402ea7daab354dbffa85e029dc7df739c1df66","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0NDAyZWE3ZGFhYjM1NGRiZmZhODVlMDI5ZGM3ZGY3MzljMWRmNjY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-03T22:59:07Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-03T22:59:07Z"},"message":"OPENJPA-530 - Change BatchingPreparedStatementManagerImpl to correctly batch dispatched statements in the same order requested by the update managers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633317 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4337d86cadc2e0f28faaaa32a9218b158ed530e","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4337d86cadc2e0f28faaaa32a9218b158ed530e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/64402ea7daab354dbffa85e029dc7df739c1df66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/64402ea7daab354dbffa85e029dc7df739c1df66","html_url":"https://github.com/apache/openjpa/commit/64402ea7daab354dbffa85e029dc7df739c1df66","comments_url":"https://api.github.com/repos/apache/openjpa/commits/64402ea7daab354dbffa85e029dc7df739c1df66/comments","author":null,"committer":null,"parents":[{"sha":"c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7","url":"https://api.github.com/repos/apache/openjpa/commits/c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7","html_url":"https://github.com/apache/openjpa/commit/c3ad06e8ff12a3f1836114695adfb8c4f9ddeaa7"}]},{"sha":"1b76c6df24d3c731b475e0ede5a56dcec6b89d3e","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiNzZjNmRmMjRkM2M3MzFiNDc1ZTBlZGU1YTU2ZGNlYzZiODlkM2U=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-03T23:41:17Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-03T23:41:17Z"},"message":"Possible fix for http://www.nabble.com/InstantiationException-in-latest-OpenJPA-build-tp15799949p15799949.html, which seems to be caused by an attempt to reflectively instantiate a ClassResolverImpl. I've done zero research into how this regression made its way into the codebase, and have not created a test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"464d12d87b4e5954e82fc23d92e2ea510417df8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/464d12d87b4e5954e82fc23d92e2ea510417df8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b76c6df24d3c731b475e0ede5a56dcec6b89d3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b76c6df24d3c731b475e0ede5a56dcec6b89d3e","html_url":"https://github.com/apache/openjpa/commit/1b76c6df24d3c731b475e0ede5a56dcec6b89d3e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b76c6df24d3c731b475e0ede5a56dcec6b89d3e/comments","author":null,"committer":null,"parents":[{"sha":"64402ea7daab354dbffa85e029dc7df739c1df66","url":"https://api.github.com/repos/apache/openjpa/commits/64402ea7daab354dbffa85e029dc7df739c1df66","html_url":"https://github.com/apache/openjpa/commit/64402ea7daab354dbffa85e029dc7df739c1df66"}]},{"sha":"f67ace749ae8e55cd9dc85b5c989353ea4b05899","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2N2FjZTc0OWFlOGU1NWNkOWRjODViNWM5ODkzNTNlYTRiMDU4OTk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-04T04:51:20Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-04T04:51:20Z"},"message":"OPENJPA-530 Update manual and code to match for the update manager values and default.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a1eeaf10efb9d4c57a5ceab1388fa085caf543e","url":"https://api.github.com/repos/apache/openjpa/git/trees/4a1eeaf10efb9d4c57a5ceab1388fa085caf543e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f67ace749ae8e55cd9dc85b5c989353ea4b05899","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f67ace749ae8e55cd9dc85b5c989353ea4b05899","html_url":"https://github.com/apache/openjpa/commit/f67ace749ae8e55cd9dc85b5c989353ea4b05899","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f67ace749ae8e55cd9dc85b5c989353ea4b05899/comments","author":null,"committer":null,"parents":[{"sha":"1b76c6df24d3c731b475e0ede5a56dcec6b89d3e","url":"https://api.github.com/repos/apache/openjpa/commits/1b76c6df24d3c731b475e0ede5a56dcec6b89d3e","html_url":"https://github.com/apache/openjpa/commit/1b76c6df24d3c731b475e0ede5a56dcec6b89d3e"}]},{"sha":"86e17fc21069e755f498ac6cc30c3aa687cc7960","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2ZTE3ZmMyMTA2OWU3NTVmNDk4YWM2Y2MzMGMzYWE2ODdjYzc5NjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-04T22:05:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-04T22:05:51Z"},"message":"Improve the error message when failing to find a field in a given identification variable's type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633668 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e99c38c855ca5e51180785c58e189a6d9beb010","url":"https://api.github.com/repos/apache/openjpa/git/trees/5e99c38c855ca5e51180785c58e189a6d9beb010"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/86e17fc21069e755f498ac6cc30c3aa687cc7960","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/86e17fc21069e755f498ac6cc30c3aa687cc7960","html_url":"https://github.com/apache/openjpa/commit/86e17fc21069e755f498ac6cc30c3aa687cc7960","comments_url":"https://api.github.com/repos/apache/openjpa/commits/86e17fc21069e755f498ac6cc30c3aa687cc7960/comments","author":null,"committer":null,"parents":[{"sha":"f67ace749ae8e55cd9dc85b5c989353ea4b05899","url":"https://api.github.com/repos/apache/openjpa/commits/f67ace749ae8e55cd9dc85b5c989353ea4b05899","html_url":"https://github.com/apache/openjpa/commit/f67ace749ae8e55cd9dc85b5c989353ea4b05899"}]},{"sha":"777818d28332d67a9716d91b1dc8ec900d986b2d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3NzgxOGQyODMzMmQ2N2E5NzE2ZDkxYjFkYzhlYzkwMGQ5ODZiMmQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T00:24:45Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T00:24:45Z"},"message":"OPENJPA-520. Committing on behalf of Qin Feng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633723 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0dd0bbd91f3f1d92e68be55263f1a644edd9a2cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/0dd0bbd91f3f1d92e68be55263f1a644edd9a2cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/777818d28332d67a9716d91b1dc8ec900d986b2d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/777818d28332d67a9716d91b1dc8ec900d986b2d","html_url":"https://github.com/apache/openjpa/commit/777818d28332d67a9716d91b1dc8ec900d986b2d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/777818d28332d67a9716d91b1dc8ec900d986b2d/comments","author":null,"committer":null,"parents":[{"sha":"86e17fc21069e755f498ac6cc30c3aa687cc7960","url":"https://api.github.com/repos/apache/openjpa/commits/86e17fc21069e755f498ac6cc30c3aa687cc7960","html_url":"https://github.com/apache/openjpa/commit/86e17fc21069e755f498ac6cc30c3aa687cc7960"}]},{"sha":"f3dd4c039797ee3498d5bffeac16415474680216","node_id":"MDY6Q29tbWl0MjA2MzY0OmYzZGQ0YzAzOTc5N2VlMzQ5OGQ1YmZmZWFjMTY0MTU0NzQ2ODAyMTY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T01:12:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T01:12:19Z"},"message":"OPENJPA-521. Committing on behalf of Qin Feng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633738 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0745a9c6faa76d211e65e7be5930c688752cf4a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0745a9c6faa76d211e65e7be5930c688752cf4a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f3dd4c039797ee3498d5bffeac16415474680216","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f3dd4c039797ee3498d5bffeac16415474680216","html_url":"https://github.com/apache/openjpa/commit/f3dd4c039797ee3498d5bffeac16415474680216","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f3dd4c039797ee3498d5bffeac16415474680216/comments","author":null,"committer":null,"parents":[{"sha":"777818d28332d67a9716d91b1dc8ec900d986b2d","url":"https://api.github.com/repos/apache/openjpa/commits/777818d28332d67a9716d91b1dc8ec900d986b2d","html_url":"https://github.com/apache/openjpa/commit/777818d28332d67a9716d91b1dc8ec900d986b2d"}]},{"sha":"126358f0e4f9aa200fb4e880fde8437295dbf071","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyNjM1OGYwZTRmOWFhMjAwZmI0ZTg4MGZkZTg0MzcyOTVkYmYwNzE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T01:21:58Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T01:21:58Z"},"message":"Fix NPE reported on newsgroup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633739 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ede16b19c20ae034032a317f9fbcd43f29a099c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/ede16b19c20ae034032a317f9fbcd43f29a099c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/126358f0e4f9aa200fb4e880fde8437295dbf071","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/126358f0e4f9aa200fb4e880fde8437295dbf071","html_url":"https://github.com/apache/openjpa/commit/126358f0e4f9aa200fb4e880fde8437295dbf071","comments_url":"https://api.github.com/repos/apache/openjpa/commits/126358f0e4f9aa200fb4e880fde8437295dbf071/comments","author":null,"committer":null,"parents":[{"sha":"f3dd4c039797ee3498d5bffeac16415474680216","url":"https://api.github.com/repos/apache/openjpa/commits/f3dd4c039797ee3498d5bffeac16415474680216","html_url":"https://github.com/apache/openjpa/commit/f3dd4c039797ee3498d5bffeac16415474680216"}]},{"sha":"b4d72d5843aab0d7b08b28e0bf07859a47419c67","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0ZDcyZDU4NDNhYWIwZDdiMDhiMjhlMGJmMDc4NTlhNDc0MTljNjc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-05T16:38:46Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-05T16:38:46Z"},"message":"After OPENJPA-9, -help option in scripts is not working anymore. This is caused by Configurations.runAgainstAllAnchors returns true if no error is encountered (including no operation) during function execution. Since the check of the -help option is in the command's run method and if no anchor is found, the help check is skipped.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633921 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c6df08a59390ee1220748f8e5930dfda1561ffe","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c6df08a59390ee1220748f8e5930dfda1561ffe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4d72d5843aab0d7b08b28e0bf07859a47419c67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4d72d5843aab0d7b08b28e0bf07859a47419c67","html_url":"https://github.com/apache/openjpa/commit/b4d72d5843aab0d7b08b28e0bf07859a47419c67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4d72d5843aab0d7b08b28e0bf07859a47419c67/comments","author":null,"committer":null,"parents":[{"sha":"126358f0e4f9aa200fb4e880fde8437295dbf071","url":"https://api.github.com/repos/apache/openjpa/commits/126358f0e4f9aa200fb4e880fde8437295dbf071","html_url":"https://github.com/apache/openjpa/commit/126358f0e4f9aa200fb4e880fde8437295dbf071"}]},{"sha":"85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1YzdhMzMzNjU4MTVlY2M1YjYzMGFlNWNlOWI1MWY2MGIyYWQ3Y2I=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T17:59:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-05T17:59:15Z"},"message":"OPENJPA-521. License headers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@633950 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21a4c7b1aba955790d52db18cbcaa7df55706f11","url":"https://api.github.com/repos/apache/openjpa/git/trees/21a4c7b1aba955790d52db18cbcaa7df55706f11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb","html_url":"https://github.com/apache/openjpa/commit/85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb/comments","author":null,"committer":null,"parents":[{"sha":"b4d72d5843aab0d7b08b28e0bf07859a47419c67","url":"https://api.github.com/repos/apache/openjpa/commits/b4d72d5843aab0d7b08b28e0bf07859a47419c67","html_url":"https://github.com/apache/openjpa/commit/b4d72d5843aab0d7b08b28e0bf07859a47419c67"}]},{"sha":"ba5d11b43b0d6182812998c347a94d4af768c6fe","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhNWQxMWI0M2IwZDYxODI4MTI5OThjMzQ3YTk0ZDRhZjc2OGM2ZmU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-06T04:12:11Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-06T04:12:11Z"},"message":"OPENJPA-532 This patch enables command runnable to process once when no persistence unit is found by the tool commands. This allows command option(s) which does not require pu definition to function properly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@634150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0097f4d18414b420f10146bfa9514a349c661c0e","url":"https://api.github.com/repos/apache/openjpa/git/trees/0097f4d18414b420f10146bfa9514a349c661c0e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ba5d11b43b0d6182812998c347a94d4af768c6fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ba5d11b43b0d6182812998c347a94d4af768c6fe","html_url":"https://github.com/apache/openjpa/commit/ba5d11b43b0d6182812998c347a94d4af768c6fe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ba5d11b43b0d6182812998c347a94d4af768c6fe/comments","author":null,"committer":null,"parents":[{"sha":"85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb","url":"https://api.github.com/repos/apache/openjpa/commits/85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb","html_url":"https://github.com/apache/openjpa/commit/85c7a33365815ecc5b630ae5ce9b51f60b2ad7cb"}]},{"sha":"282c8e0c5b8b7a0035d437405fb848b93935ab90","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4MmM4ZTBjNWI4YjdhMDAzNWQ0Mzc0MDVmYjg0OGI5MzkzNWFiOTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-11T18:29:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-11T18:29:19Z"},"message":"Improve product derivation debugging; add test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@636052 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba775a8a10ef91b43650a8fd936f52fc4b1566c5","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba775a8a10ef91b43650a8fd936f52fc4b1566c5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/282c8e0c5b8b7a0035d437405fb848b93935ab90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/282c8e0c5b8b7a0035d437405fb848b93935ab90","html_url":"https://github.com/apache/openjpa/commit/282c8e0c5b8b7a0035d437405fb848b93935ab90","comments_url":"https://api.github.com/repos/apache/openjpa/commits/282c8e0c5b8b7a0035d437405fb848b93935ab90/comments","author":null,"committer":null,"parents":[{"sha":"ba5d11b43b0d6182812998c347a94d4af768c6fe","url":"https://api.github.com/repos/apache/openjpa/commits/ba5d11b43b0d6182812998c347a94d4af768c6fe","html_url":"https://github.com/apache/openjpa/commit/ba5d11b43b0d6182812998c347a94d4af768c6fe"}]},{"sha":"d93ac261adc022453b16d2879805057fd6205773","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5M2FjMjYxYWRjMDIyNDUzYjE2ZDI4Nzk4MDUwNTdmZDYyMDU3NzM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-11T20:05:00Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-11T20:05:00Z"},"message":"OPENJPA-535 - fix comment typos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@636090 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cba4e63dfcf1fab04da88e9fb7cad575007d88e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/cba4e63dfcf1fab04da88e9fb7cad575007d88e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d93ac261adc022453b16d2879805057fd6205773","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d93ac261adc022453b16d2879805057fd6205773","html_url":"https://github.com/apache/openjpa/commit/d93ac261adc022453b16d2879805057fd6205773","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d93ac261adc022453b16d2879805057fd6205773/comments","author":null,"committer":null,"parents":[{"sha":"282c8e0c5b8b7a0035d437405fb848b93935ab90","url":"https://api.github.com/repos/apache/openjpa/commits/282c8e0c5b8b7a0035d437405fb848b93935ab90","html_url":"https://github.com/apache/openjpa/commit/282c8e0c5b8b7a0035d437405fb848b93935ab90"}]},{"sha":"4bed57d778e9478d2e823f65666c4168be37e542","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZWQ1N2Q3NzhlOTQ3OGQyZTgyM2Y2NTY2NmM0MTY4YmUzN2U1NDI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-12T22:01:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-12T22:01:23Z"},"message":"Added license header.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@636531 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e69e0691030dcbabe67a7d2b18b7407423be5564","url":"https://api.github.com/repos/apache/openjpa/git/trees/e69e0691030dcbabe67a7d2b18b7407423be5564"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4bed57d778e9478d2e823f65666c4168be37e542","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4bed57d778e9478d2e823f65666c4168be37e542","html_url":"https://github.com/apache/openjpa/commit/4bed57d778e9478d2e823f65666c4168be37e542","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4bed57d778e9478d2e823f65666c4168be37e542/comments","author":null,"committer":null,"parents":[{"sha":"d93ac261adc022453b16d2879805057fd6205773","url":"https://api.github.com/repos/apache/openjpa/commits/d93ac261adc022453b16d2879805057fd6205773","html_url":"https://github.com/apache/openjpa/commit/d93ac261adc022453b16d2879805057fd6205773"}]},{"sha":"aff3abd8ed44880a8369288cfa623db5c393c76b","node_id":"MDY6Q29tbWl0MjA2MzY0OmFmZjNhYmQ4ZWQ0NDg4MGE4MzY5Mjg4Y2ZhNjIzZGI1YzM5M2M3NmI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-15T16:57:32Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-15T16:57:32Z"},"message":"Fixed JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@637439 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1482b0eed412d00a84569e58ce9bb876717460e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/1482b0eed412d00a84569e58ce9bb876717460e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/aff3abd8ed44880a8369288cfa623db5c393c76b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/aff3abd8ed44880a8369288cfa623db5c393c76b","html_url":"https://github.com/apache/openjpa/commit/aff3abd8ed44880a8369288cfa623db5c393c76b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/aff3abd8ed44880a8369288cfa623db5c393c76b/comments","author":null,"committer":null,"parents":[{"sha":"4bed57d778e9478d2e823f65666c4168be37e542","url":"https://api.github.com/repos/apache/openjpa/commits/4bed57d778e9478d2e823f65666c4168be37e542","html_url":"https://github.com/apache/openjpa/commit/4bed57d778e9478d2e823f65666c4168be37e542"}]},{"sha":"5f0094893ea6783a6a7795679a35b250f6232198","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmMDA5NDg5M2VhNjc4M2E2YTc3OTU2NzlhMzViMjUwZjYyMzIxOTg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-19T01:01:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-19T01:01:43Z"},"message":"Fixed JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@638667 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5873d0810ed76441bd5e32564d4620bd2ae8f3de","url":"https://api.github.com/repos/apache/openjpa/git/trees/5873d0810ed76441bd5e32564d4620bd2ae8f3de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5f0094893ea6783a6a7795679a35b250f6232198","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5f0094893ea6783a6a7795679a35b250f6232198","html_url":"https://github.com/apache/openjpa/commit/5f0094893ea6783a6a7795679a35b250f6232198","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5f0094893ea6783a6a7795679a35b250f6232198/comments","author":null,"committer":null,"parents":[{"sha":"aff3abd8ed44880a8369288cfa623db5c393c76b","url":"https://api.github.com/repos/apache/openjpa/commits/aff3abd8ed44880a8369288cfa623db5c393c76b","html_url":"https://github.com/apache/openjpa/commit/aff3abd8ed44880a8369288cfa623db5c393c76b"}]},{"sha":"b949f7adc591c3fd7af601037325929e60afe8d0","node_id":"MDY6Q29tbWl0MjA2MzY0OmI5NDlmN2FkYzU5MWMzZmQ3YWY2MDEwMzczMjU5MjllNjBhZmU4ZDA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-03-20T19:57:30Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-03-20T19:57:30Z"},"message":"OPENJPA-529.  Revert the clone() operation on the Configuration object.  This is causing problems with the subclassing enhancement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@639431 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"177bfb0935dce3abe957a4101dbabd748ba0bd2c","url":"https://api.github.com/repos/apache/openjpa/git/trees/177bfb0935dce3abe957a4101dbabd748ba0bd2c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b949f7adc591c3fd7af601037325929e60afe8d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b949f7adc591c3fd7af601037325929e60afe8d0","html_url":"https://github.com/apache/openjpa/commit/b949f7adc591c3fd7af601037325929e60afe8d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b949f7adc591c3fd7af601037325929e60afe8d0/comments","author":null,"committer":null,"parents":[{"sha":"5f0094893ea6783a6a7795679a35b250f6232198","url":"https://api.github.com/repos/apache/openjpa/commits/5f0094893ea6783a6a7795679a35b250f6232198","html_url":"https://github.com/apache/openjpa/commit/5f0094893ea6783a6a7795679a35b250f6232198"}]},{"sha":"635ee199fef8533ed5a176e07d40b75dc8a66074","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzNWVlMTk5ZmVmODUzM2VkNWExNzZlMDdkNDBiNzVkYzhhNjYwNzQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-21T13:58:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-21T13:58:16Z"},"message":"OPENJPA-537\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@639647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"726da7784f1c011e97ed1c981de05dac90f0b4c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/726da7784f1c011e97ed1c981de05dac90f0b4c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/635ee199fef8533ed5a176e07d40b75dc8a66074","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/635ee199fef8533ed5a176e07d40b75dc8a66074","html_url":"https://github.com/apache/openjpa/commit/635ee199fef8533ed5a176e07d40b75dc8a66074","comments_url":"https://api.github.com/repos/apache/openjpa/commits/635ee199fef8533ed5a176e07d40b75dc8a66074/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b949f7adc591c3fd7af601037325929e60afe8d0","url":"https://api.github.com/repos/apache/openjpa/commits/b949f7adc591c3fd7af601037325929e60afe8d0","html_url":"https://github.com/apache/openjpa/commit/b949f7adc591c3fd7af601037325929e60afe8d0"}]},{"sha":"831bd55051cccfaad51dde9923e19584d236062f","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMWJkNTUwNTFjY2NmYWFkNTFkZGU5OTIzZTE5NTg0ZDIzNjA2MmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-21T15:48:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-21T15:48:30Z"},"message":"OPENJPA-528 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@639681 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c9653c127e2d68db26bcc1bf16c2d6479afb93b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c9653c127e2d68db26bcc1bf16c2d6479afb93b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/831bd55051cccfaad51dde9923e19584d236062f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/831bd55051cccfaad51dde9923e19584d236062f","html_url":"https://github.com/apache/openjpa/commit/831bd55051cccfaad51dde9923e19584d236062f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/831bd55051cccfaad51dde9923e19584d236062f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"635ee199fef8533ed5a176e07d40b75dc8a66074","url":"https://api.github.com/repos/apache/openjpa/commits/635ee199fef8533ed5a176e07d40b75dc8a66074","html_url":"https://github.com/apache/openjpa/commit/635ee199fef8533ed5a176e07d40b75dc8a66074"}]},{"sha":"57ca9afbdd20903f4fab7d14f876f34d6f911e85","node_id":"MDY6Q29tbWl0MjA2MzY0OjU3Y2E5YWZiZGQyMDkwM2Y0ZmFiN2QxNGY4NzZmMzRkNmY5MTFlODU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-03-21T18:23:19Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-03-21T18:23:19Z"},"message":"OPENJPA-539 Can't create a table with a field of java type \"Map\" in Derby\ncommit patch for Fay Wang. \ntestcases have been modified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@639746 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57d9eaaed528329b045b18f41d6df0e42d9eded1","url":"https://api.github.com/repos/apache/openjpa/git/trees/57d9eaaed528329b045b18f41d6df0e42d9eded1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/57ca9afbdd20903f4fab7d14f876f34d6f911e85","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/57ca9afbdd20903f4fab7d14f876f34d6f911e85","html_url":"https://github.com/apache/openjpa/commit/57ca9afbdd20903f4fab7d14f876f34d6f911e85","comments_url":"https://api.github.com/repos/apache/openjpa/commits/57ca9afbdd20903f4fab7d14f876f34d6f911e85/comments","author":null,"committer":null,"parents":[{"sha":"831bd55051cccfaad51dde9923e19584d236062f","url":"https://api.github.com/repos/apache/openjpa/commits/831bd55051cccfaad51dde9923e19584d236062f","html_url":"https://github.com/apache/openjpa/commit/831bd55051cccfaad51dde9923e19584d236062f"}]},{"sha":"438b877006e9d71d683d12f95f975e2355878784","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzOGI4NzcwMDZlOWQ3MWQ2ODNkMTJmOTVmOTc1ZTIzNTU4Nzg3ODQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-03-21T21:46:55Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-03-21T21:46:55Z"},"message":"OPENJPA-541 Generate SQL92 JOIN syntax for Oracle 9 or later releases\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@639874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cfdf28fd21c91e25b1b5d5cee6f070eac9e86579","url":"https://api.github.com/repos/apache/openjpa/git/trees/cfdf28fd21c91e25b1b5d5cee6f070eac9e86579"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/438b877006e9d71d683d12f95f975e2355878784","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/438b877006e9d71d683d12f95f975e2355878784","html_url":"https://github.com/apache/openjpa/commit/438b877006e9d71d683d12f95f975e2355878784","comments_url":"https://api.github.com/repos/apache/openjpa/commits/438b877006e9d71d683d12f95f975e2355878784/comments","author":null,"committer":null,"parents":[{"sha":"57ca9afbdd20903f4fab7d14f876f34d6f911e85","url":"https://api.github.com/repos/apache/openjpa/commits/57ca9afbdd20903f4fab7d14f876f34d6f911e85","html_url":"https://github.com/apache/openjpa/commit/57ca9afbdd20903f4fab7d14f876f34d6f911e85"}]},{"sha":"2d0a3c91578d9994dca0204abcb463e9fa548828","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkMGEzYzkxNTc4ZDk5OTRkY2EwMjA0YWJjYjQ2M2U5ZmE1NDg4Mjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-24T18:17:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-24T18:17:35Z"},"message":"OPENJPA-542\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@640494 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6040cebd1110698621c8b94f5f0b3561ee7cddc2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6040cebd1110698621c8b94f5f0b3561ee7cddc2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d0a3c91578d9994dca0204abcb463e9fa548828","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d0a3c91578d9994dca0204abcb463e9fa548828","html_url":"https://github.com/apache/openjpa/commit/2d0a3c91578d9994dca0204abcb463e9fa548828","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d0a3c91578d9994dca0204abcb463e9fa548828/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"438b877006e9d71d683d12f95f975e2355878784","url":"https://api.github.com/repos/apache/openjpa/commits/438b877006e9d71d683d12f95f975e2355878784","html_url":"https://github.com/apache/openjpa/commit/438b877006e9d71d683d12f95f975e2355878784"}]},{"sha":"9dadffffc19228783088509e22c2d42181d02295","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkYWRmZmZmYzE5MjI4NzgzMDg4NTA5ZTIyYzJkNDIxODFkMDIyOTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-24T18:41:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-24T18:41:12Z"},"message":"OPENJPA-543\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@640511 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35edc68d1546bad32bcd2bb57b636b5beae31197","url":"https://api.github.com/repos/apache/openjpa/git/trees/35edc68d1546bad32bcd2bb57b636b5beae31197"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9dadffffc19228783088509e22c2d42181d02295","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9dadffffc19228783088509e22c2d42181d02295","html_url":"https://github.com/apache/openjpa/commit/9dadffffc19228783088509e22c2d42181d02295","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9dadffffc19228783088509e22c2d42181d02295/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2d0a3c91578d9994dca0204abcb463e9fa548828","url":"https://api.github.com/repos/apache/openjpa/commits/2d0a3c91578d9994dca0204abcb463e9fa548828","html_url":"https://github.com/apache/openjpa/commit/2d0a3c91578d9994dca0204abcb463e9fa548828"}]},{"sha":"6af619cd891e793efe4c239f4e4815b89d119d49","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhZjYxOWNkODkxZTc5M2VmZTRjMjM5ZjRlNDgxNWI4OWQxMTlkNDk=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-03-25T01:35:28Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-03-25T01:35:28Z"},"message":"OPENJPA-540.  Committing a simpler version of the patch.  Got rid of the ClassResolver classloader and am now just relying on the Class.forName() classloading.  This is similar to the processing used for the other *ManagedRuntime classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@640666 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eab53f91c6a29ec6e23140861d1137c3e19e95df","url":"https://api.github.com/repos/apache/openjpa/git/trees/eab53f91c6a29ec6e23140861d1137c3e19e95df"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6af619cd891e793efe4c239f4e4815b89d119d49","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6af619cd891e793efe4c239f4e4815b89d119d49","html_url":"https://github.com/apache/openjpa/commit/6af619cd891e793efe4c239f4e4815b89d119d49","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6af619cd891e793efe4c239f4e4815b89d119d49/comments","author":null,"committer":null,"parents":[{"sha":"9dadffffc19228783088509e22c2d42181d02295","url":"https://api.github.com/repos/apache/openjpa/commits/9dadffffc19228783088509e22c2d42181d02295","html_url":"https://github.com/apache/openjpa/commit/9dadffffc19228783088509e22c2d42181d02295"}]},{"sha":"b2c1e8f16ffb4fa129249ba88deba4d762adc6c3","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYzFlOGYxNmZmYjRmYTEyOTI0OWJhODhkZWJhNGQ3NjJhZGM2YzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-25T03:37:56Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-03-25T03:37:56Z"},"message":"OPENJPA-544. Get rid of JDK1.4 support, fold the jdk1.5 modules into their siblings, get rid of some ugly reflection that was there for 1.5 support, and move to the java.util.concurrent collections classes. This includes a wrapper around ConcurrentHashMap that allows nulls, since the old OpenJPA concurrent map allowed nulls and we rely on that behavior. The implication is that putIfAbsent() and some of the other special JDK1.5 methods don't obey the same contracts as in the java.util.concurrent package.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@640685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ba6943b181476e3bc6a5b0dd693ef19adf4d4c8","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ba6943b181476e3bc6a5b0dd693ef19adf4d4c8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2c1e8f16ffb4fa129249ba88deba4d762adc6c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2c1e8f16ffb4fa129249ba88deba4d762adc6c3","html_url":"https://github.com/apache/openjpa/commit/b2c1e8f16ffb4fa129249ba88deba4d762adc6c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2c1e8f16ffb4fa129249ba88deba4d762adc6c3/comments","author":null,"committer":null,"parents":[{"sha":"6af619cd891e793efe4c239f4e4815b89d119d49","url":"https://api.github.com/repos/apache/openjpa/commits/6af619cd891e793efe4c239f4e4815b89d119d49","html_url":"https://github.com/apache/openjpa/commit/6af619cd891e793efe4c239f4e4815b89d119d49"}]},{"sha":"608a906aafd965e5c0bb8877f7d41be43b443874","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwOGE5MDZhYWZkOTY1ZTVjMGJiODg3N2Y3ZDQxYmU0M2I0NDM4NzQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-03-25T16:22:35Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-03-25T16:22:35Z"},"message":"OPENJPA-544.  Maybe this is a Windows-ism, or an IBM JDK-ism, but I still need the explicit <version>2.4</version> element for the surefire plugin...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@640887 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e5101359f90bfca8a549e2c3d46afee1e78957f","url":"https://api.github.com/repos/apache/openjpa/git/trees/3e5101359f90bfca8a549e2c3d46afee1e78957f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/608a906aafd965e5c0bb8877f7d41be43b443874","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/608a906aafd965e5c0bb8877f7d41be43b443874","html_url":"https://github.com/apache/openjpa/commit/608a906aafd965e5c0bb8877f7d41be43b443874","comments_url":"https://api.github.com/repos/apache/openjpa/commits/608a906aafd965e5c0bb8877f7d41be43b443874/comments","author":null,"committer":null,"parents":[{"sha":"b2c1e8f16ffb4fa129249ba88deba4d762adc6c3","url":"https://api.github.com/repos/apache/openjpa/commits/b2c1e8f16ffb4fa129249ba88deba4d762adc6c3","html_url":"https://github.com/apache/openjpa/commit/b2c1e8f16ffb4fa129249ba88deba4d762adc6c3"}]},{"sha":"dbb722f5eca9d0e8b45080adb38faa939ac105f7","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiYjcyMmY1ZWNhOWQwZThiNDUwODBhZGIzOGZhYTkzOWFjMTA1Zjc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-03-26T17:06:46Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-03-26T17:06:46Z"},"message":"OPENJPA-541 backout changes.\nCustomer reported that SQL92 joins are bit slower compare to oracle joins    \n(+) and there are known bugs with SQL92 joins. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@641408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"49930b1186b196873cff17ed4274f945a34b683e","url":"https://api.github.com/repos/apache/openjpa/git/trees/49930b1186b196873cff17ed4274f945a34b683e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dbb722f5eca9d0e8b45080adb38faa939ac105f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dbb722f5eca9d0e8b45080adb38faa939ac105f7","html_url":"https://github.com/apache/openjpa/commit/dbb722f5eca9d0e8b45080adb38faa939ac105f7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dbb722f5eca9d0e8b45080adb38faa939ac105f7/comments","author":null,"committer":null,"parents":[{"sha":"608a906aafd965e5c0bb8877f7d41be43b443874","url":"https://api.github.com/repos/apache/openjpa/commits/608a906aafd965e5c0bb8877f7d41be43b443874","html_url":"https://github.com/apache/openjpa/commit/608a906aafd965e5c0bb8877f7d41be43b443874"}]},{"sha":"315a34884886d0718761e39611b71112b4c9dbc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNWEzNDg4NDg4NmQwNzE4NzYxZTM5NjExYjcxMTEyYjRjOWRiYzI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-27T15:08:07Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-27T15:08:07Z"},"message":"OPENJPA-417 - add openjpa.Compability(StoreMapCollectionInEntityAsBlob=true) option to enable map/collection stores as Blob in the database. This allows existing application continues to work.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@641842 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d3b8ee0cc7dd06ca758450a7ce533c8f3d919ae2","url":"https://api.github.com/repos/apache/openjpa/git/trees/d3b8ee0cc7dd06ca758450a7ce533c8f3d919ae2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/315a34884886d0718761e39611b71112b4c9dbc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/315a34884886d0718761e39611b71112b4c9dbc2","html_url":"https://github.com/apache/openjpa/commit/315a34884886d0718761e39611b71112b4c9dbc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/315a34884886d0718761e39611b71112b4c9dbc2/comments","author":null,"committer":null,"parents":[{"sha":"dbb722f5eca9d0e8b45080adb38faa939ac105f7","url":"https://api.github.com/repos/apache/openjpa/commits/dbb722f5eca9d0e8b45080adb38faa939ac105f7","html_url":"https://github.com/apache/openjpa/commit/dbb722f5eca9d0e8b45080adb38faa939ac105f7"}]},{"sha":"1b8ccc624535f77995636062f8a684f6618b585d","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOGNjYzYyNDUzNWY3Nzk5NTYzNjA2MmY4YTY4NGY2NjE4YjU4NWQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-27T16:56:05Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-27T16:56:05Z"},"message":"OPENJPA-417 - Change isStoreMapCollectionInEntityAsBlob() to getStoreMapCollectionInEntityAsBlob()\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@641891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d62b06ad4c063c9cbf7b678603b2bdca859dcba","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d62b06ad4c063c9cbf7b678603b2bdca859dcba"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b8ccc624535f77995636062f8a684f6618b585d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b8ccc624535f77995636062f8a684f6618b585d","html_url":"https://github.com/apache/openjpa/commit/1b8ccc624535f77995636062f8a684f6618b585d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b8ccc624535f77995636062f8a684f6618b585d/comments","author":null,"committer":null,"parents":[{"sha":"315a34884886d0718761e39611b71112b4c9dbc2","url":"https://api.github.com/repos/apache/openjpa/commits/315a34884886d0718761e39611b71112b4c9dbc2","html_url":"https://github.com/apache/openjpa/commit/315a34884886d0718761e39611b71112b4c9dbc2"}]},{"sha":"6b5e0c6967d20d19e77954cdbc8ccb4367c86f00","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiNWUwYzY5NjdkMjBkMTllNzc5NTRjZGJjOGNjYjQzNjdjODZmMDA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-01T03:21:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-01T03:21:23Z"},"message":"OPENJPA-544. Take advantage of tiger dependency.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@643248 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7519c294351b04a718489d6478847a6417e73b20","url":"https://api.github.com/repos/apache/openjpa/git/trees/7519c294351b04a718489d6478847a6417e73b20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6b5e0c6967d20d19e77954cdbc8ccb4367c86f00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6b5e0c6967d20d19e77954cdbc8ccb4367c86f00","html_url":"https://github.com/apache/openjpa/commit/6b5e0c6967d20d19e77954cdbc8ccb4367c86f00","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6b5e0c6967d20d19e77954cdbc8ccb4367c86f00/comments","author":null,"committer":null,"parents":[{"sha":"1b8ccc624535f77995636062f8a684f6618b585d","url":"https://api.github.com/repos/apache/openjpa/commits/1b8ccc624535f77995636062f8a684f6618b585d","html_url":"https://github.com/apache/openjpa/commit/1b8ccc624535f77995636062f8a684f6618b585d"}]},{"sha":"6aa8fd3c35857d83ca7b0a5f7c66938f537d9912","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhYThmZDNjMzU4NTdkODNjYTdiMGE1ZjdjNjY5MzhmNTM3ZDk5MTI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-01T21:29:26Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-01T21:29:26Z"},"message":"Always consider the inclusion of subclasses as part of the query compilation\nkey, even when the candidate class is encoded in the query string instead of\nset programmatically. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@643586 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdaa145ffd6ea3ac5d9f7a88972f3a7857358f8d","url":"https://api.github.com/repos/apache/openjpa/git/trees/fdaa145ffd6ea3ac5d9f7a88972f3a7857358f8d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6aa8fd3c35857d83ca7b0a5f7c66938f537d9912","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6aa8fd3c35857d83ca7b0a5f7c66938f537d9912","html_url":"https://github.com/apache/openjpa/commit/6aa8fd3c35857d83ca7b0a5f7c66938f537d9912","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6aa8fd3c35857d83ca7b0a5f7c66938f537d9912/comments","author":null,"committer":null,"parents":[{"sha":"6b5e0c6967d20d19e77954cdbc8ccb4367c86f00","url":"https://api.github.com/repos/apache/openjpa/commits/6b5e0c6967d20d19e77954cdbc8ccb4367c86f00","html_url":"https://github.com/apache/openjpa/commit/6b5e0c6967d20d19e77954cdbc8ccb4367c86f00"}]},{"sha":"79b23557d3e9ee16dbd11a52d82a64aec45c7039","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5YjIzNTU3ZDNlOWVlMTZkYmQxMWE1MmQ4MmE2NGFlYzQ1YzcwMzk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-02T18:35:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-02T18:35:50Z"},"message":"OPENJPA-529. Clone issue with the configuration was accidentally re-introduced\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"242bd01b57fc97b2a9991d7083b71f4b4fb03b60","url":"https://api.github.com/repos/apache/openjpa/git/trees/242bd01b57fc97b2a9991d7083b71f4b4fb03b60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/79b23557d3e9ee16dbd11a52d82a64aec45c7039","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/79b23557d3e9ee16dbd11a52d82a64aec45c7039","html_url":"https://github.com/apache/openjpa/commit/79b23557d3e9ee16dbd11a52d82a64aec45c7039","comments_url":"https://api.github.com/repos/apache/openjpa/commits/79b23557d3e9ee16dbd11a52d82a64aec45c7039/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6aa8fd3c35857d83ca7b0a5f7c66938f537d9912","url":"https://api.github.com/repos/apache/openjpa/commits/6aa8fd3c35857d83ca7b0a5f7c66938f537d9912","html_url":"https://github.com/apache/openjpa/commit/6aa8fd3c35857d83ca7b0a5f7c66938f537d9912"}]},{"sha":"999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5OWNlMmU2NzBlZWYyZGVmMGEwYjg5ZjRiYjYyZGJlNzRiNmE0ZmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-03T00:01:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-03T00:01:47Z"},"message":"OPENJPA-536. Committing on behalf of Amy Yang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644115 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"002abdeeba9636a2d2ae8c0d19543e5a61b2d8c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/002abdeeba9636a2d2ae8c0d19543e5a61b2d8c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","html_url":"https://github.com/apache/openjpa/commit/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/comments","author":null,"committer":null,"parents":[{"sha":"79b23557d3e9ee16dbd11a52d82a64aec45c7039","url":"https://api.github.com/repos/apache/openjpa/commits/79b23557d3e9ee16dbd11a52d82a64aec45c7039","html_url":"https://github.com/apache/openjpa/commit/79b23557d3e9ee16dbd11a52d82a64aec45c7039"}]},{"sha":"ee8155bb60ddfdc94e94b8973455c599072a6c27","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlODE1NWJiNjBkZGZkYzk0ZTk0Yjg5NzM0NTVjNTk5MDcyYTZjMjc=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-03T01:18:39Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-03T01:18:39Z"},"message":"OPENJPA-552 Remove dis-allowing Connection* properties in \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644129 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e6cc77d97001be79f0113ff230546db1a6938aa","url":"https://api.github.com/repos/apache/openjpa/git/trees/5e6cc77d97001be79f0113ff230546db1a6938aa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee8155bb60ddfdc94e94b8973455c599072a6c27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee8155bb60ddfdc94e94b8973455c599072a6c27","html_url":"https://github.com/apache/openjpa/commit/ee8155bb60ddfdc94e94b8973455c599072a6c27","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee8155bb60ddfdc94e94b8973455c599072a6c27/comments","author":null,"committer":null,"parents":[{"sha":"999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","url":"https://api.github.com/repos/apache/openjpa/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","html_url":"https://github.com/apache/openjpa/commit/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa"}]},{"sha":"36c68c49f59f948967d31f690c7858b40bcea3a9","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2YzY4YzQ5ZjU5Zjk0ODk2N2QzMWY2OTBjNzg1OGI0MGJjZWEzYTk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-03T05:52:38Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-03T05:52:38Z"},"message":"OPENJPA-555 MappingTool got NullPointerException in DB2Dictionary.isDB2ZOSV8xOrLater() \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644177 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"20c55b171aaa4f39f797f0d78b1b6060d9dbc6e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/20c55b171aaa4f39f797f0d78b1b6060d9dbc6e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/36c68c49f59f948967d31f690c7858b40bcea3a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/36c68c49f59f948967d31f690c7858b40bcea3a9","html_url":"https://github.com/apache/openjpa/commit/36c68c49f59f948967d31f690c7858b40bcea3a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/36c68c49f59f948967d31f690c7858b40bcea3a9/comments","author":null,"committer":null,"parents":[{"sha":"ee8155bb60ddfdc94e94b8973455c599072a6c27","url":"https://api.github.com/repos/apache/openjpa/commits/ee8155bb60ddfdc94e94b8973455c599072a6c27","html_url":"https://github.com/apache/openjpa/commit/ee8155bb60ddfdc94e94b8973455c599072a6c27"}]},{"sha":"dd7014a527968468f63b2dcb37a2f9175b0c9492","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkNzAxNGE1Mjc5Njg0NjhmNjNiMmRjYjM3YTJmOTE3NWIwYzk0OTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-04T06:55:13Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-04T06:55:13Z"},"message":"OPENJPA-556. This implementation does some extra copying to accomodate DataCache.getAll(), which takes a List instead of a Collection.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644627 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f1d2d31f46970e98d6eaf3ba5fa9d7665fdd180","url":"https://api.github.com/repos/apache/openjpa/git/trees/2f1d2d31f46970e98d6eaf3ba5fa9d7665fdd180"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dd7014a527968468f63b2dcb37a2f9175b0c9492","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dd7014a527968468f63b2dcb37a2f9175b0c9492","html_url":"https://github.com/apache/openjpa/commit/dd7014a527968468f63b2dcb37a2f9175b0c9492","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dd7014a527968468f63b2dcb37a2f9175b0c9492/comments","author":null,"committer":null,"parents":[{"sha":"36c68c49f59f948967d31f690c7858b40bcea3a9","url":"https://api.github.com/repos/apache/openjpa/commits/36c68c49f59f948967d31f690c7858b40bcea3a9","html_url":"https://github.com/apache/openjpa/commit/36c68c49f59f948967d31f690c7858b40bcea3a9"}]},{"sha":"690cb80eb9682a71dd72e8d09df0ef35ade309e3","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5MGNiODBlYjk2ODJhNzFkZDcyZThkMDlkZjBlZjM1YWRlMzA5ZTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-04T07:34:53Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-04T07:34:53Z"},"message":"Change OpenJPAEntityManagerFactory.getStoreCache(String) to create the cache on-demand if it doesn't exist. This turns an error condition into functional behavior, so there should be no backward-compat issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644635 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"750294d19de15bb6535ec133df56c30054a37ed0","url":"https://api.github.com/repos/apache/openjpa/git/trees/750294d19de15bb6535ec133df56c30054a37ed0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/690cb80eb9682a71dd72e8d09df0ef35ade309e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/690cb80eb9682a71dd72e8d09df0ef35ade309e3","html_url":"https://github.com/apache/openjpa/commit/690cb80eb9682a71dd72e8d09df0ef35ade309e3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/690cb80eb9682a71dd72e8d09df0ef35ade309e3/comments","author":null,"committer":null,"parents":[{"sha":"dd7014a527968468f63b2dcb37a2f9175b0c9492","url":"https://api.github.com/repos/apache/openjpa/commits/dd7014a527968468f63b2dcb37a2f9175b0c9492","html_url":"https://github.com/apache/openjpa/commit/dd7014a527968468f63b2dcb37a2f9175b0c9492"}]},{"sha":"1b5aac791d776726ada8fdc6b39ec71d13262f3e","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiNWFhYzc5MWQ3NzY3MjZhZGE4ZmRjNmIzOWVjNzFkMTMyNjJmM2U=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-04T19:43:36Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-04T19:43:36Z"},"message":"OPENJPA-559 : Add SerialVersionUID.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644852 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64018742663c87ff0c2cd391562eaf26bba01b70","url":"https://api.github.com/repos/apache/openjpa/git/trees/64018742663c87ff0c2cd391562eaf26bba01b70"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b5aac791d776726ada8fdc6b39ec71d13262f3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b5aac791d776726ada8fdc6b39ec71d13262f3e","html_url":"https://github.com/apache/openjpa/commit/1b5aac791d776726ada8fdc6b39ec71d13262f3e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b5aac791d776726ada8fdc6b39ec71d13262f3e/comments","author":null,"committer":null,"parents":[{"sha":"690cb80eb9682a71dd72e8d09df0ef35ade309e3","url":"https://api.github.com/repos/apache/openjpa/commits/690cb80eb9682a71dd72e8d09df0ef35ade309e3","html_url":"https://github.com/apache/openjpa/commit/690cb80eb9682a71dd72e8d09df0ef35ade309e3"}]},{"sha":"9c19356c7c2b5690c8b487b4ee05ba92297847c4","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMTkzNTZjN2MyYjU2OTBjOGI0ODdiNGVlMDViYTkyMjk3ODQ3YzQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-07T16:18:26Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-07T16:18:26Z"},"message":"Fix for OPENJPA-554.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@645589 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"77261e47f4dd80555096b478d8cfe978f7bf80fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/77261e47f4dd80555096b478d8cfe978f7bf80fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c19356c7c2b5690c8b487b4ee05ba92297847c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c19356c7c2b5690c8b487b4ee05ba92297847c4","html_url":"https://github.com/apache/openjpa/commit/9c19356c7c2b5690c8b487b4ee05ba92297847c4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c19356c7c2b5690c8b487b4ee05ba92297847c4/comments","author":null,"committer":null,"parents":[{"sha":"1b5aac791d776726ada8fdc6b39ec71d13262f3e","url":"https://api.github.com/repos/apache/openjpa/commits/1b5aac791d776726ada8fdc6b39ec71d13262f3e","html_url":"https://github.com/apache/openjpa/commit/1b5aac791d776726ada8fdc6b39ec71d13262f3e"}]},{"sha":"ea8b942364fce79b0fae42b9ac94be7c3f58907b","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhOGI5NDIzNjRmY2U3OWIwZmFlNDJiOWFjOTRiZTdjM2Y1ODkwN2I=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-07T16:52:31Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-07T16:52:31Z"},"message":"Be a little more flexible on the exceptions thrown when persisting instances\nwith auto-generated keys already assigned values.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@645610 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"496366ef46f95020b8cb87cbf756a2b637f68e3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/496366ef46f95020b8cb87cbf756a2b637f68e3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b","html_url":"https://github.com/apache/openjpa/commit/ea8b942364fce79b0fae42b9ac94be7c3f58907b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b/comments","author":null,"committer":null,"parents":[{"sha":"9c19356c7c2b5690c8b487b4ee05ba92297847c4","url":"https://api.github.com/repos/apache/openjpa/commits/9c19356c7c2b5690c8b487b4ee05ba92297847c4","html_url":"https://github.com/apache/openjpa/commit/9c19356c7c2b5690c8b487b4ee05ba92297847c4"}]},{"sha":"a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4MmI3MzMyZjFhNDJkZmU5NmIyYjgxYTFiYjdhMGNmNjZjYjVhMDE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-08T19:28:37Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-08T19:28:37Z"},"message":"OpenJPA 1.1.x Branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@646044 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"496366ef46f95020b8cb87cbf756a2b637f68e3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/496366ef46f95020b8cb87cbf756a2b637f68e3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01","html_url":"https://github.com/apache/openjpa/commit/a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01/comments","author":null,"committer":null,"parents":[{"sha":"ea8b942364fce79b0fae42b9ac94be7c3f58907b","url":"https://api.github.com/repos/apache/openjpa/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b","html_url":"https://github.com/apache/openjpa/commit/ea8b942364fce79b0fae42b9ac94be7c3f58907b"}]},{"sha":"7cece296b3e9183aae9dd49abfa235612ab26036","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjZWNlMjk2YjNlOTE4M2FhZTlkZDQ5YWJmYTIzNTYxMmFiMjYwMzY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-08T21:29:19Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-08T21:29:19Z"},"message":"More efficient fix for OPENJPA-245.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@646082 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d0735a725ac9a19ce215ed13dec55c5fc8f0c3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d0735a725ac9a19ce215ed13dec55c5fc8f0c3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7cece296b3e9183aae9dd49abfa235612ab26036","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7cece296b3e9183aae9dd49abfa235612ab26036","html_url":"https://github.com/apache/openjpa/commit/7cece296b3e9183aae9dd49abfa235612ab26036","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7cece296b3e9183aae9dd49abfa235612ab26036/comments","author":null,"committer":null,"parents":[{"sha":"a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01","url":"https://api.github.com/repos/apache/openjpa/commits/a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01","html_url":"https://github.com/apache/openjpa/commit/a82b7332f1a42dfe96b2b81a1bb7a0cf66cb5a01"}]},{"sha":"8d923c33a3f92658984f45a9cfe1caf574e7f913","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkOTIzYzMzYTNmOTI2NTg5ODRmNDVhOWNmZTFjYWY1NzRlN2Y5MTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-08T22:32:35Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-08T22:32:35Z"},"message":"OPENJPA-562. Checking in on behalf of Sandeep Shrivastava after running 'mvn test'\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@646108 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"85de96fc4be4fe74822a61c68e855da15b6b8ea4","url":"https://api.github.com/repos/apache/openjpa/git/trees/85de96fc4be4fe74822a61c68e855da15b6b8ea4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8d923c33a3f92658984f45a9cfe1caf574e7f913","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8d923c33a3f92658984f45a9cfe1caf574e7f913","html_url":"https://github.com/apache/openjpa/commit/8d923c33a3f92658984f45a9cfe1caf574e7f913","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8d923c33a3f92658984f45a9cfe1caf574e7f913/comments","author":null,"committer":null,"parents":[{"sha":"7cece296b3e9183aae9dd49abfa235612ab26036","url":"https://api.github.com/repos/apache/openjpa/commits/7cece296b3e9183aae9dd49abfa235612ab26036","html_url":"https://github.com/apache/openjpa/commit/7cece296b3e9183aae9dd49abfa235612ab26036"}]},{"sha":"4cca7188c5d45641a3b5b729786f514cd32cec06","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjY2E3MTg4YzVkNDU2NDFhM2I1YjcyOTc4NmY1MTRjZDMyY2VjMDY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T14:31:35Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T14:31:35Z"},"message":"OPENJPA-565 - Ignore duplicate NamedQuery definition and continue to parse the remaining entries in NamedQueries definition.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@646379 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7933b22d95da86c8d30ca41bc1f04135f0f8badc","url":"https://api.github.com/repos/apache/openjpa/git/trees/7933b22d95da86c8d30ca41bc1f04135f0f8badc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4cca7188c5d45641a3b5b729786f514cd32cec06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4cca7188c5d45641a3b5b729786f514cd32cec06","html_url":"https://github.com/apache/openjpa/commit/4cca7188c5d45641a3b5b729786f514cd32cec06","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4cca7188c5d45641a3b5b729786f514cd32cec06/comments","author":null,"committer":null,"parents":[{"sha":"8d923c33a3f92658984f45a9cfe1caf574e7f913","url":"https://api.github.com/repos/apache/openjpa/commits/8d923c33a3f92658984f45a9cfe1caf574e7f913","html_url":"https://github.com/apache/openjpa/commit/8d923c33a3f92658984f45a9cfe1caf574e7f913"}]},{"sha":"61b785ca96996c71888ba4cda2f98e14652e2778","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxYjc4NWNhOTY5OTZjNzE4ODhiYTRjZGEyZjk4ZTE0NjUyZTI3Nzg=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-09T18:09:42Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-09T18:09:42Z"},"message":"OPENJPA-547 INNER JOIN FETCH query incorrectly generates LEFT join SQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@646455 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0dd39dc1802f318b9976ae00eadbee1c99872cb7","url":"https://api.github.com/repos/apache/openjpa/git/trees/0dd39dc1802f318b9976ae00eadbee1c99872cb7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61b785ca96996c71888ba4cda2f98e14652e2778","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61b785ca96996c71888ba4cda2f98e14652e2778","html_url":"https://github.com/apache/openjpa/commit/61b785ca96996c71888ba4cda2f98e14652e2778","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61b785ca96996c71888ba4cda2f98e14652e2778/comments","author":null,"committer":null,"parents":[{"sha":"4cca7188c5d45641a3b5b729786f514cd32cec06","url":"https://api.github.com/repos/apache/openjpa/commits/4cca7188c5d45641a3b5b729786f514cd32cec06","html_url":"https://github.com/apache/openjpa/commit/4cca7188c5d45641a3b5b729786f514cd32cec06"}]},{"sha":"b4fda6a9170079c43fbb3fbe04ad666684261949","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0ZmRhNmE5MTcwMDc5YzQzZmJiM2ZiZTA0YWQ2NjY2ODQyNjE5NDk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T23:27:55Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T23:27:55Z"},"message":"OPENJPA-565 - Add test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@646595 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb48cc37f6cce167f0e9b673a0e634cdb3319184","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb48cc37f6cce167f0e9b673a0e634cdb3319184"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4fda6a9170079c43fbb3fbe04ad666684261949","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4fda6a9170079c43fbb3fbe04ad666684261949","html_url":"https://github.com/apache/openjpa/commit/b4fda6a9170079c43fbb3fbe04ad666684261949","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4fda6a9170079c43fbb3fbe04ad666684261949/comments","author":null,"committer":null,"parents":[{"sha":"61b785ca96996c71888ba4cda2f98e14652e2778","url":"https://api.github.com/repos/apache/openjpa/commits/61b785ca96996c71888ba4cda2f98e14652e2778","html_url":"https://github.com/apache/openjpa/commit/61b785ca96996c71888ba4cda2f98e14652e2778"}]},{"sha":"b3f919b1cc88cc0485c0de931ccbba81b91c4d2a","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzZjkxOWIxY2M4OGNjMDQ4NWMwZGU5MzFjY2JiYTgxYjkxYzRkMmE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-11T01:08:29Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-11T01:08:29Z"},"message":"OPENJPA-547 add test strings for FETCH JOINs\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@647026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a2c43d73c924d619f7b1ae7de97eca9397968ef7","url":"https://api.github.com/repos/apache/openjpa/git/trees/a2c43d73c924d619f7b1ae7de97eca9397968ef7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b3f919b1cc88cc0485c0de931ccbba81b91c4d2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b3f919b1cc88cc0485c0de931ccbba81b91c4d2a","html_url":"https://github.com/apache/openjpa/commit/b3f919b1cc88cc0485c0de931ccbba81b91c4d2a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b3f919b1cc88cc0485c0de931ccbba81b91c4d2a/comments","author":null,"committer":null,"parents":[{"sha":"b4fda6a9170079c43fbb3fbe04ad666684261949","url":"https://api.github.com/repos/apache/openjpa/commits/b4fda6a9170079c43fbb3fbe04ad666684261949","html_url":"https://github.com/apache/openjpa/commit/b4fda6a9170079c43fbb3fbe04ad666684261949"}]},{"sha":"e0701520126cbd93e75941756afa9c7954c8f319","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwNzAxNTIwMTI2Y2JkOTNlNzU5NDE3NTZhZmE5Yzc5NTRjOGYzMTk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-11T02:37:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-11T02:37:43Z"},"message":"OPENJPA-536 -- temporarily disabling earlier fix to this issue as it is causing integration problems. A more complete fix will be forthcoming.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@647033 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"517f765af3e6923142ac3a75e7ee514abf4ff082","url":"https://api.github.com/repos/apache/openjpa/git/trees/517f765af3e6923142ac3a75e7ee514abf4ff082"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e0701520126cbd93e75941756afa9c7954c8f319","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e0701520126cbd93e75941756afa9c7954c8f319","html_url":"https://github.com/apache/openjpa/commit/e0701520126cbd93e75941756afa9c7954c8f319","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e0701520126cbd93e75941756afa9c7954c8f319/comments","author":null,"committer":null,"parents":[{"sha":"b3f919b1cc88cc0485c0de931ccbba81b91c4d2a","url":"https://api.github.com/repos/apache/openjpa/commits/b3f919b1cc88cc0485c0de931ccbba81b91c4d2a","html_url":"https://github.com/apache/openjpa/commit/b3f919b1cc88cc0485c0de931ccbba81b91c4d2a"}]},{"sha":"e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","node_id":"MDY6Q29tbWl0MjA2MzY0OmU1ZjMxMzY1ZTZjYjhkZGVmZmJmNGMxYTMyYTc4OGY1OGU1NTRkMTI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-11T18:07:12Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-11T18:07:12Z"},"message":"Submit patch for OPENJPA-564.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@647250 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a17230e30699ae76fd6d215306b340960cef2d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a17230e30699ae76fd6d215306b340960cef2d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","html_url":"https://github.com/apache/openjpa/commit/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12/comments","author":null,"committer":null,"parents":[{"sha":"e0701520126cbd93e75941756afa9c7954c8f319","url":"https://api.github.com/repos/apache/openjpa/commits/e0701520126cbd93e75941756afa9c7954c8f319","html_url":"https://github.com/apache/openjpa/commit/e0701520126cbd93e75941756afa9c7954c8f319"}]},{"sha":"abbc41eec57eec8ef1733ce4c60c7c413ee8315c","node_id":"MDY6Q29tbWl0MjA2MzY0OmFiYmM0MWVlYzU3ZWVjOGVmMTczM2NlNGM2MGM3YzQxM2VlODMxNWM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-15T18:07:42Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-15T18:07:42Z"},"message":"OPENJPA-570 - Apply same change from trunk to 1.1.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@648359 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d24abc6496a122ea76d4ef4df89236d91b52b32f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d24abc6496a122ea76d4ef4df89236d91b52b32f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/abbc41eec57eec8ef1733ce4c60c7c413ee8315c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/abbc41eec57eec8ef1733ce4c60c7c413ee8315c","html_url":"https://github.com/apache/openjpa/commit/abbc41eec57eec8ef1733ce4c60c7c413ee8315c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/abbc41eec57eec8ef1733ce4c60c7c413ee8315c/comments","author":null,"committer":null,"parents":[{"sha":"e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","url":"https://api.github.com/repos/apache/openjpa/commits/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12","html_url":"https://github.com/apache/openjpa/commit/e5f31365e6cb8ddeffbf4c1a32a788f58e554d12"}]},{"sha":"6cfe69e1980e79e11378c2511a664a700f94d2ff","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjZmU2OWUxOTgwZTc5ZTExMzc4YzI1MTFhNjY0YTcwMGY5NGQyZmY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-21T18:32:09Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-21T18:32:09Z"},"message":"No JIRA issue. Resolved an issue manifested in internal test suites with selection of CLOB field types in some projection select cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650217 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c042c75c756dc32029fd707a1494a5f4bb2b9260","url":"https://api.github.com/repos/apache/openjpa/git/trees/c042c75c756dc32029fd707a1494a5f4bb2b9260"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6cfe69e1980e79e11378c2511a664a700f94d2ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6cfe69e1980e79e11378c2511a664a700f94d2ff","html_url":"https://github.com/apache/openjpa/commit/6cfe69e1980e79e11378c2511a664a700f94d2ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6cfe69e1980e79e11378c2511a664a700f94d2ff/comments","author":null,"committer":null,"parents":[{"sha":"abbc41eec57eec8ef1733ce4c60c7c413ee8315c","url":"https://api.github.com/repos/apache/openjpa/commits/abbc41eec57eec8ef1733ce4c60c7c413ee8315c","html_url":"https://github.com/apache/openjpa/commit/abbc41eec57eec8ef1733ce4c60c7c413ee8315c"}]},{"sha":"a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","node_id":"MDY6Q29tbWl0MjA2MzY0OmE2NTdkZGE0NjU0MTYzZDJkYmYwZDBhOGYzMGZhNGEyY2Q0NjZjN2Q=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-21T19:16:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-21T19:16:47Z"},"message":"OPENJPA-577\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650226 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4a1fc613d38d022c8f4b3b2a1bb876bf36b1f3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a4a1fc613d38d022c8f4b3b2a1bb876bf36b1f3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","html_url":"https://github.com/apache/openjpa/commit/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d/comments","author":null,"committer":null,"parents":[{"sha":"6cfe69e1980e79e11378c2511a664a700f94d2ff","url":"https://api.github.com/repos/apache/openjpa/commits/6cfe69e1980e79e11378c2511a664a700f94d2ff","html_url":"https://github.com/apache/openjpa/commit/6cfe69e1980e79e11378c2511a664a700f94d2ff"}]},{"sha":"44e06d03a31c2a2a4f08fbccc6b3021b230ad427","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0ZTA2ZDAzYTMxYzJhMmE0ZjA4ZmJjY2M2YjMwMjFiMjMwYWQ0Mjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T15:46:58Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T15:46:58Z"},"message":"OPENJPA-536. Committing on behalf of Amy Yang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650559 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb3767b3c5957ca249efbf9eae89f5a9646dd5df","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb3767b3c5957ca249efbf9eae89f5a9646dd5df"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","html_url":"https://github.com/apache/openjpa/commit/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","comments_url":"https://api.github.com/repos/apache/openjpa/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/comments","author":null,"committer":null,"parents":[{"sha":"a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","url":"https://api.github.com/repos/apache/openjpa/commits/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","html_url":"https://github.com/apache/openjpa/commit/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d"}]},{"sha":"bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c","node_id":"MDY6Q29tbWl0MjA2MzY0OmJmNmRhMGI1ZmUyYTFlMGRjMjJhMGQ3NDhmYjdjMjYyMDdlYjY1OWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T18:42:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T18:42:43Z"},"message":"OPENJPA-576. Committing on behalf of Sandeep Srivastava.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650607 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ffa81452e873b59c7d1c2c534d4b72e28d4beafd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ffa81452e873b59c7d1c2c534d4b72e28d4beafd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c","html_url":"https://github.com/apache/openjpa/commit/bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c/comments","author":null,"committer":null,"parents":[{"sha":"44e06d03a31c2a2a4f08fbccc6b3021b230ad427","url":"https://api.github.com/repos/apache/openjpa/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","html_url":"https://github.com/apache/openjpa/commit/44e06d03a31c2a2a4f08fbccc6b3021b230ad427"}]},{"sha":"a6ffd14d02e54ac95af7038586aa0f403958fdc2","node_id":"MDY6Q29tbWl0MjA2MzY0OmE2ZmZkMTRkMDJlNTRhYzk1YWY3MDM4NTg2YWEwZjQwMzk1OGZkYzI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T20:09:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T20:09:28Z"},"message":"OPENJPA-576. Reverting Sandeep's change pending an updated change from him.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650633 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb3767b3c5957ca249efbf9eae89f5a9646dd5df","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb3767b3c5957ca249efbf9eae89f5a9646dd5df"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a6ffd14d02e54ac95af7038586aa0f403958fdc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a6ffd14d02e54ac95af7038586aa0f403958fdc2","html_url":"https://github.com/apache/openjpa/commit/a6ffd14d02e54ac95af7038586aa0f403958fdc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a6ffd14d02e54ac95af7038586aa0f403958fdc2/comments","author":null,"committer":null,"parents":[{"sha":"bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c","url":"https://api.github.com/repos/apache/openjpa/commits/bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c","html_url":"https://github.com/apache/openjpa/commit/bf6da0b5fe2a1e0dc22a0d748fb7c26207eb659c"}]},{"sha":"69e3633c490b602f0054e880c3affbc2e2c23702","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5ZTM2MzNjNDkwYjYwMmYwMDU0ZTg4MGMzYWZmYmMyZTJjMjM3MDI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T22:45:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T22:45:49Z"},"message":"OPENJPA-576. Committing on behalf of Sandeep Shrivastava.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650684 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37cdbe2a1e1f24d5e177f2142257089fb04f2a08","url":"https://api.github.com/repos/apache/openjpa/git/trees/37cdbe2a1e1f24d5e177f2142257089fb04f2a08"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69e3633c490b602f0054e880c3affbc2e2c23702","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69e3633c490b602f0054e880c3affbc2e2c23702","html_url":"https://github.com/apache/openjpa/commit/69e3633c490b602f0054e880c3affbc2e2c23702","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69e3633c490b602f0054e880c3affbc2e2c23702/comments","author":null,"committer":null,"parents":[{"sha":"a6ffd14d02e54ac95af7038586aa0f403958fdc2","url":"https://api.github.com/repos/apache/openjpa/commits/a6ffd14d02e54ac95af7038586aa0f403958fdc2","html_url":"https://github.com/apache/openjpa/commit/a6ffd14d02e54ac95af7038586aa0f403958fdc2"}]},{"sha":"22b2f1858e1f84f5facbb4b07245ba5dc2f84602","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyYjJmMTg1OGUxZjg0ZjVmYWNiYjRiMDcyNDViYTVkYzJmODQ2MDI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-23T00:08:31Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-23T00:08:31Z"},"message":"OPENJPA-536. Checking in optimization on behalf of Amy Yang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650703 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c422e2e3cd0a529b93425ac52d539441c968fc68","url":"https://api.github.com/repos/apache/openjpa/git/trees/c422e2e3cd0a529b93425ac52d539441c968fc68"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/22b2f1858e1f84f5facbb4b07245ba5dc2f84602","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/22b2f1858e1f84f5facbb4b07245ba5dc2f84602","html_url":"https://github.com/apache/openjpa/commit/22b2f1858e1f84f5facbb4b07245ba5dc2f84602","comments_url":"https://api.github.com/repos/apache/openjpa/commits/22b2f1858e1f84f5facbb4b07245ba5dc2f84602/comments","author":null,"committer":null,"parents":[{"sha":"69e3633c490b602f0054e880c3affbc2e2c23702","url":"https://api.github.com/repos/apache/openjpa/commits/69e3633c490b602f0054e880c3affbc2e2c23702","html_url":"https://github.com/apache/openjpa/commit/69e3633c490b602f0054e880c3affbc2e2c23702"}]},{"sha":"a584a81022037afd9888face12eec4952b77987c","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ODRhODEwMjIwMzdhZmQ5ODg4ZmFjZTEyZWVjNDk1MmI3Nzk4N2M=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-23T18:29:51Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-23T18:29:51Z"},"message":"Use a pinnedMap that doesn't die on nulls in the CacheMap.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650989 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"465f297322c5a8eec1a7bf8343bfa40318ada728","url":"https://api.github.com/repos/apache/openjpa/git/trees/465f297322c5a8eec1a7bf8343bfa40318ada728"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a584a81022037afd9888face12eec4952b77987c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a584a81022037afd9888face12eec4952b77987c","html_url":"https://github.com/apache/openjpa/commit/a584a81022037afd9888face12eec4952b77987c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a584a81022037afd9888face12eec4952b77987c/comments","author":null,"committer":null,"parents":[{"sha":"22b2f1858e1f84f5facbb4b07245ba5dc2f84602","url":"https://api.github.com/repos/apache/openjpa/commits/22b2f1858e1f84f5facbb4b07245ba5dc2f84602","html_url":"https://github.com/apache/openjpa/commit/22b2f1858e1f84f5facbb4b07245ba5dc2f84602"}]},{"sha":"2e06715a63774eb0e9ae776e97a4a8bc07c6558d","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlMDY3MTVhNjM3NzRlYjBlOWFlNzc2ZTk3YTRhOGJjMDdjNjU1OGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-24T00:20:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-24T00:20:27Z"},"message":"Make the MetaDataCacheMarshaller more configurable, and fix error handling in CacheMarshallerImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@651121 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ed3e7d3fbedd069c4e2281af6c8955c04e80e18","url":"https://api.github.com/repos/apache/openjpa/git/trees/9ed3e7d3fbedd069c4e2281af6c8955c04e80e18"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2e06715a63774eb0e9ae776e97a4a8bc07c6558d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2e06715a63774eb0e9ae776e97a4a8bc07c6558d","html_url":"https://github.com/apache/openjpa/commit/2e06715a63774eb0e9ae776e97a4a8bc07c6558d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2e06715a63774eb0e9ae776e97a4a8bc07c6558d/comments","author":null,"committer":null,"parents":[{"sha":"a584a81022037afd9888face12eec4952b77987c","url":"https://api.github.com/repos/apache/openjpa/commits/a584a81022037afd9888face12eec4952b77987c","html_url":"https://github.com/apache/openjpa/commit/a584a81022037afd9888face12eec4952b77987c"}]},{"sha":"cb555369c773e7583ea42c662c9ddecd43743525","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiNTU1MzY5Yzc3M2U3NTgzZWE0MmM2NjJjOWRkZWNkNDM3NDM1MjU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-24T06:15:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-24T06:15:28Z"},"message":"OPENJPA-567. Committing on behalf of Vikram Bhatia.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@651166 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3cf75fdde630222a9e4b349b009b0b62d6983af1","url":"https://api.github.com/repos/apache/openjpa/git/trees/3cf75fdde630222a9e4b349b009b0b62d6983af1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb555369c773e7583ea42c662c9ddecd43743525","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb555369c773e7583ea42c662c9ddecd43743525","html_url":"https://github.com/apache/openjpa/commit/cb555369c773e7583ea42c662c9ddecd43743525","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb555369c773e7583ea42c662c9ddecd43743525/comments","author":null,"committer":null,"parents":[{"sha":"2e06715a63774eb0e9ae776e97a4a8bc07c6558d","url":"https://api.github.com/repos/apache/openjpa/commits/2e06715a63774eb0e9ae776e97a4a8bc07c6558d","html_url":"https://github.com/apache/openjpa/commit/2e06715a63774eb0e9ae776e97a4a8bc07c6558d"}]},{"sha":"83190655e58bc8d4e769afaedfa50a5f6dcfd84a","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMTkwNjU1ZTU4YmM4ZDRlNzY5YWZhZWRmYTUwYTVmNmRjZmQ4NGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-27T23:12:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-27T23:12:10Z"},"message":"OPENJPA-522\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a804ad6ea266616ad1ae2317dfa9e96dc1879210","url":"https://api.github.com/repos/apache/openjpa/git/trees/a804ad6ea266616ad1ae2317dfa9e96dc1879210"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","html_url":"https://github.com/apache/openjpa/commit/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/comments","author":null,"committer":null,"parents":[{"sha":"cb555369c773e7583ea42c662c9ddecd43743525","url":"https://api.github.com/repos/apache/openjpa/commits/cb555369c773e7583ea42c662c9ddecd43743525","html_url":"https://github.com/apache/openjpa/commit/cb555369c773e7583ea42c662c9ddecd43743525"}]},{"sha":"8577dde96f4a29103d0be441511b92fd6abbcf50","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1NzdkZGU5NmY0YTI5MTAzZDBiZTQ0MTUxMWI5MmZkNmFiYmNmNTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-28T00:56:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-28T00:56:50Z"},"message":"OPENJPA-522. TestFetchPlanStacks failed on my Mac but passed on the Linux build machine; it seemed to have something to do with FetchConfiguration equality / hashCode implementation. Changed to IdentityHashMap to avoid the issue altogether.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652035 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf1790ab3069be3a173b65dee7caa9352bdced6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/cf1790ab3069be3a173b65dee7caa9352bdced6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8577dde96f4a29103d0be441511b92fd6abbcf50","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8577dde96f4a29103d0be441511b92fd6abbcf50","html_url":"https://github.com/apache/openjpa/commit/8577dde96f4a29103d0be441511b92fd6abbcf50","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8577dde96f4a29103d0be441511b92fd6abbcf50/comments","author":null,"committer":null,"parents":[{"sha":"83190655e58bc8d4e769afaedfa50a5f6dcfd84a","url":"https://api.github.com/repos/apache/openjpa/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","html_url":"https://github.com/apache/openjpa/commit/83190655e58bc8d4e769afaedfa50a5f6dcfd84a"}]},{"sha":"3ac1f08072a85278c8f9eeb8a2712241e996fa83","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhYzFmMDgwNzJhODUyNzhjOGY5ZWViOGEyNzEyMjQxZTk5NmZhODM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-01T13:49:07Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-01T13:49:07Z"},"message":"OPENJPA-392. Fixing a new manifestation of this bug introduced by a BEA contribution.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652521 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2151c630d5474b55388e8bce84e8e69486e81521","url":"https://api.github.com/repos/apache/openjpa/git/trees/2151c630d5474b55388e8bce84e8e69486e81521"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3ac1f08072a85278c8f9eeb8a2712241e996fa83","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3ac1f08072a85278c8f9eeb8a2712241e996fa83","html_url":"https://github.com/apache/openjpa/commit/3ac1f08072a85278c8f9eeb8a2712241e996fa83","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3ac1f08072a85278c8f9eeb8a2712241e996fa83/comments","author":null,"committer":null,"parents":[{"sha":"8577dde96f4a29103d0be441511b92fd6abbcf50","url":"https://api.github.com/repos/apache/openjpa/commits/8577dde96f4a29103d0be441511b92fd6abbcf50","html_url":"https://github.com/apache/openjpa/commit/8577dde96f4a29103d0be441511b92fd6abbcf50"}]},{"sha":"d8b82311f5269ea7f4543853e087a67a6982ab45","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ4YjgyMzExZjUyNjllYTdmNDU0Mzg1M2UwODdhNjdhNjk4MmFiNDU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-01T13:56:17Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-01T13:56:17Z"},"message":"OPENJPA-544. JDK1.5 conversion hangover. Introduce pseudo-random behavior into NullSafeConcurrentHashMap. This is important for the various data structures in OpenJPA and derivitaves (mostly caches) that rely on pseudo-random cache removal. These data structures were exacerbated by the fact that ConcurrentHashMap seems to return an Iterator that is approximately LIFO, which is often the worst possible algorithm. This change is pseudo-random in the face of 16 random removes / accesses per put() call; this behavior is hard coded and could be tweaked to become configurable / adaptive.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652523 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c7a83349d622cc9499fdd4592bb5dec6721200c8","url":"https://api.github.com/repos/apache/openjpa/git/trees/c7a83349d622cc9499fdd4592bb5dec6721200c8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d8b82311f5269ea7f4543853e087a67a6982ab45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d8b82311f5269ea7f4543853e087a67a6982ab45","html_url":"https://github.com/apache/openjpa/commit/d8b82311f5269ea7f4543853e087a67a6982ab45","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d8b82311f5269ea7f4543853e087a67a6982ab45/comments","author":null,"committer":null,"parents":[{"sha":"3ac1f08072a85278c8f9eeb8a2712241e996fa83","url":"https://api.github.com/repos/apache/openjpa/commits/3ac1f08072a85278c8f9eeb8a2712241e996fa83","html_url":"https://github.com/apache/openjpa/commit/3ac1f08072a85278c8f9eeb8a2712241e996fa83"}]},{"sha":"c9fd7810079e9c53fa9600140b967f2a79342218","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5ZmQ3ODEwMDc5ZTljNTNmYTk2MDAxNDBiOTY3ZjJhNzkzNDIyMTg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-02T22:21:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-02T22:21:51Z"},"message":"Simplify algorithm in NullSafeConcurrentHashMap; change SizedConcurrentHashMap's algorithms to remove overflow before putting new records into cache instead of after to avoid removing the very instances that were put.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a56d1031f3258055766036badc4c196ecf5ded5a","url":"https://api.github.com/repos/apache/openjpa/git/trees/a56d1031f3258055766036badc4c196ecf5ded5a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c9fd7810079e9c53fa9600140b967f2a79342218","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c9fd7810079e9c53fa9600140b967f2a79342218","html_url":"https://github.com/apache/openjpa/commit/c9fd7810079e9c53fa9600140b967f2a79342218","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c9fd7810079e9c53fa9600140b967f2a79342218/comments","author":null,"committer":null,"parents":[{"sha":"d8b82311f5269ea7f4543853e087a67a6982ab45","url":"https://api.github.com/repos/apache/openjpa/commits/d8b82311f5269ea7f4543853e087a67a6982ab45","html_url":"https://github.com/apache/openjpa/commit/d8b82311f5269ea7f4543853e087a67a6982ab45"}]},{"sha":"148bb16613a48fdbba8783315f81676147f87874","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0OGJiMTY2MTNhNDhmZGJiYTg3ODMzMTVmODE2NzYxNDdmODc4NzQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T03:13:45Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T03:13:45Z"},"message":"OPENJPA-579, OPENJPA-585, OPENJPA-587, OPENJPA-588. Checking in on behalf of Sandeep Srivastava and Jason Zheng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bc182610cdff5aeee1f311571cc03d700ee5697","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bc182610cdff5aeee1f311571cc03d700ee5697"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/148bb16613a48fdbba8783315f81676147f87874","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/148bb16613a48fdbba8783315f81676147f87874","html_url":"https://github.com/apache/openjpa/commit/148bb16613a48fdbba8783315f81676147f87874","comments_url":"https://api.github.com/repos/apache/openjpa/commits/148bb16613a48fdbba8783315f81676147f87874/comments","author":null,"committer":null,"parents":[{"sha":"c9fd7810079e9c53fa9600140b967f2a79342218","url":"https://api.github.com/repos/apache/openjpa/commits/c9fd7810079e9c53fa9600140b967f2a79342218","html_url":"https://github.com/apache/openjpa/commit/c9fd7810079e9c53fa9600140b967f2a79342218"}]},{"sha":"53da9d32abc28574e3cfb994ab3c55ef6c6f577a","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzZGE5ZDMyYWJjMjg1NzRlM2NmYjk5NGFiM2M1NWVmNmM2ZjU3N2E=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T04:41:48Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T04:41:48Z"},"message":"Improve concurrency by actively managing AbstractBrokerFactory's broker set when using non-finalizing brokers. Credit goes to Arunabh Hazarika for identifying the bottleneck and prototyping this solution.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653000 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e756d51c14c2476a300690582ea322e8387520f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/e756d51c14c2476a300690582ea322e8387520f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/53da9d32abc28574e3cfb994ab3c55ef6c6f577a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/53da9d32abc28574e3cfb994ab3c55ef6c6f577a","html_url":"https://github.com/apache/openjpa/commit/53da9d32abc28574e3cfb994ab3c55ef6c6f577a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/53da9d32abc28574e3cfb994ab3c55ef6c6f577a/comments","author":null,"committer":null,"parents":[{"sha":"148bb16613a48fdbba8783315f81676147f87874","url":"https://api.github.com/repos/apache/openjpa/commits/148bb16613a48fdbba8783315f81676147f87874","html_url":"https://github.com/apache/openjpa/commit/148bb16613a48fdbba8783315f81676147f87874"}]},{"sha":"705144dfea2d3c00e5d70e56292bc0867afde31d","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwNTE0NGRmZWEyZDNjMDBlNWQ3MGU1NjI5MmJjMDg2N2FmZGUzMWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T06:30:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T06:30:27Z"},"message":"OPENJPA-130. Committing on behalf of Ignacio Andreu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653008 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2456fbdcd331d4408ea2070739815011adf0cd2c","url":"https://api.github.com/repos/apache/openjpa/git/trees/2456fbdcd331d4408ea2070739815011adf0cd2c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/705144dfea2d3c00e5d70e56292bc0867afde31d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/705144dfea2d3c00e5d70e56292bc0867afde31d","html_url":"https://github.com/apache/openjpa/commit/705144dfea2d3c00e5d70e56292bc0867afde31d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/705144dfea2d3c00e5d70e56292bc0867afde31d/comments","author":null,"committer":null,"parents":[{"sha":"53da9d32abc28574e3cfb994ab3c55ef6c6f577a","url":"https://api.github.com/repos/apache/openjpa/commits/53da9d32abc28574e3cfb994ab3c55ef6c6f577a","html_url":"https://github.com/apache/openjpa/commit/53da9d32abc28574e3cfb994ab3c55ef6c6f577a"}]},{"sha":"712a397e88476ed5e92ec7828eae120c0f876703","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxMmEzOTdlODg0NzZlZDVlOTJlYzc4MjhlYWUxMjBjMGY4NzY3MDM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:14:25Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:14:25Z"},"message":"OPENJPA-417. Docs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653081 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19000335861dba2523824decaae7bfb0bc9bec3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/19000335861dba2523824decaae7bfb0bc9bec3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/712a397e88476ed5e92ec7828eae120c0f876703","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/712a397e88476ed5e92ec7828eae120c0f876703","html_url":"https://github.com/apache/openjpa/commit/712a397e88476ed5e92ec7828eae120c0f876703","comments_url":"https://api.github.com/repos/apache/openjpa/commits/712a397e88476ed5e92ec7828eae120c0f876703/comments","author":null,"committer":null,"parents":[{"sha":"705144dfea2d3c00e5d70e56292bc0867afde31d","url":"https://api.github.com/repos/apache/openjpa/commits/705144dfea2d3c00e5d70e56292bc0867afde31d","html_url":"https://github.com/apache/openjpa/commit/705144dfea2d3c00e5d70e56292bc0867afde31d"}]},{"sha":"e4a9976f26907873a9fdbf2cfbd4e315abad4583","node_id":"MDY6Q29tbWl0MjA2MzY0OmU0YTk5NzZmMjY5MDc4NzNhOWZkYmYyY2ZiZDRlMzE1YWJhZDQ1ODM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:26:39Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:26:39Z"},"message":"Fixed typo in class name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6745993290652c2e4771ca77f1a40b2d6dd6a5b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f6745993290652c2e4771ca77f1a40b2d6dd6a5b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e4a9976f26907873a9fdbf2cfbd4e315abad4583","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e4a9976f26907873a9fdbf2cfbd4e315abad4583","html_url":"https://github.com/apache/openjpa/commit/e4a9976f26907873a9fdbf2cfbd4e315abad4583","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e4a9976f26907873a9fdbf2cfbd4e315abad4583/comments","author":null,"committer":null,"parents":[{"sha":"712a397e88476ed5e92ec7828eae120c0f876703","url":"https://api.github.com/repos/apache/openjpa/commits/712a397e88476ed5e92ec7828eae120c0f876703","html_url":"https://github.com/apache/openjpa/commit/712a397e88476ed5e92ec7828eae120c0f876703"}]},{"sha":"52850030791ff351541bb2b3b72b43ca2c9ada93","node_id":"MDY6Q29tbWl0MjA2MzY0OjUyODUwMDMwNzkxZmYzNTE1NDFiYjJiM2I3MmI0M2NhMmM5YWRhOTM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:31:29Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:31:29Z"},"message":"Added license headers to new image source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f20ebe43dba8014dd41c6d732a2383e9db91699f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f20ebe43dba8014dd41c6d732a2383e9db91699f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/52850030791ff351541bb2b3b72b43ca2c9ada93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/52850030791ff351541bb2b3b72b43ca2c9ada93","html_url":"https://github.com/apache/openjpa/commit/52850030791ff351541bb2b3b72b43ca2c9ada93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/52850030791ff351541bb2b3b72b43ca2c9ada93/comments","author":null,"committer":null,"parents":[{"sha":"e4a9976f26907873a9fdbf2cfbd4e315abad4583","url":"https://api.github.com/repos/apache/openjpa/commits/e4a9976f26907873a9fdbf2cfbd4e315abad4583","html_url":"https://github.com/apache/openjpa/commit/e4a9976f26907873a9fdbf2cfbd4e315abad4583"}]},{"sha":"45576476115efdc9ea1788bae97dc43b64449b5a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1NTc2NDc2MTE1ZWZkYzllYTE3ODhiYWU5N2RjNDNiNjQ0NDliNWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:54:25Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-03T14:54:25Z"},"message":"OPENJPA-502. Changed default for JPQL compatibility setting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653088 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80fdab11f92f39e328090ef93a6588b2c41a664c","url":"https://api.github.com/repos/apache/openjpa/git/trees/80fdab11f92f39e328090ef93a6588b2c41a664c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45576476115efdc9ea1788bae97dc43b64449b5a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45576476115efdc9ea1788bae97dc43b64449b5a","html_url":"https://github.com/apache/openjpa/commit/45576476115efdc9ea1788bae97dc43b64449b5a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45576476115efdc9ea1788bae97dc43b64449b5a/comments","author":null,"committer":null,"parents":[{"sha":"52850030791ff351541bb2b3b72b43ca2c9ada93","url":"https://api.github.com/repos/apache/openjpa/commits/52850030791ff351541bb2b3b72b43ca2c9ada93","html_url":"https://github.com/apache/openjpa/commit/52850030791ff351541bb2b3b72b43ca2c9ada93"}]},{"sha":"ee170672b1c1d04321e2350f01f8ff17974e6a5c","node_id":"MDY6Q29tbWl0MjA2MzY0OmVlMTcwNjcyYjFjMWQwNDMyMWUyMzUwZjAxZjhmZjE3OTc0ZTZhNWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-04T03:26:24Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-04T03:26:24Z"},"message":"OPENJPA-573 JPQL: The combination LIKE ESCAPE does not accept parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@653176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3411fbe20422dacb3e31f073a4e3dd91704fbf69","url":"https://api.github.com/repos/apache/openjpa/git/trees/3411fbe20422dacb3e31f073a4e3dd91704fbf69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c","html_url":"https://github.com/apache/openjpa/commit/ee170672b1c1d04321e2350f01f8ff17974e6a5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c/comments","author":null,"committer":null,"parents":[{"sha":"45576476115efdc9ea1788bae97dc43b64449b5a","url":"https://api.github.com/repos/apache/openjpa/commits/45576476115efdc9ea1788bae97dc43b64449b5a","html_url":"https://github.com/apache/openjpa/commit/45576476115efdc9ea1788bae97dc43b64449b5a"}]},{"sha":"d90a7c7a6ef09cd133f1625186a4025a285fc66e","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5MGE3YzdhNmVmMDljZDEzM2YxNjI1MTg2YTQwMjVhMjg1ZmM2NmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-11T18:39:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-11T18:39:57Z"},"message":"OPENJPA-231. Committing on behalf of Qin Feng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655354 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd0f2d20461d64f8712c1f4458b7a025bafa39a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd0f2d20461d64f8712c1f4458b7a025bafa39a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e","html_url":"https://github.com/apache/openjpa/commit/d90a7c7a6ef09cd133f1625186a4025a285fc66e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e/comments","author":null,"committer":null,"parents":[{"sha":"ee170672b1c1d04321e2350f01f8ff17974e6a5c","url":"https://api.github.com/repos/apache/openjpa/commits/ee170672b1c1d04321e2350f01f8ff17974e6a5c","html_url":"https://github.com/apache/openjpa/commit/ee170672b1c1d04321e2350f01f8ff17974e6a5c"}]},{"sha":"813d37d74338a345c42328869de76e007aafabf7","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxM2QzN2Q3NDMzOGEzNDVjNDIzMjg4NjlkZTc2ZTAwN2FhZmFiZjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T17:59:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T17:59:27Z"},"message":"OPENJPA-130. Committing on behalf of Ignacio Andreu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655581 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"756a4c145c709fd4aa12b447029fa0ae97a6c975","url":"https://api.github.com/repos/apache/openjpa/git/trees/756a4c145c709fd4aa12b447029fa0ae97a6c975"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/813d37d74338a345c42328869de76e007aafabf7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/813d37d74338a345c42328869de76e007aafabf7","html_url":"https://github.com/apache/openjpa/commit/813d37d74338a345c42328869de76e007aafabf7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/813d37d74338a345c42328869de76e007aafabf7/comments","author":null,"committer":null,"parents":[{"sha":"d90a7c7a6ef09cd133f1625186a4025a285fc66e","url":"https://api.github.com/repos/apache/openjpa/commits/d90a7c7a6ef09cd133f1625186a4025a285fc66e","html_url":"https://github.com/apache/openjpa/commit/d90a7c7a6ef09cd133f1625186a4025a285fc66e"}]},{"sha":"1dde59cd79bab940923150f7026abcb4585726ed","node_id":"MDY6Q29tbWl0MjA2MzY0OjFkZGU1OWNkNzliYWI5NDA5MjMxNTBmNzAyNmFiY2I0NTg1NzI2ZWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:03:45Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:03:45Z"},"message":"OPENJPA-594. Applying Dinkar Rao's patch to the 1.1.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655583 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"930f0f2a2c426dd38f286321b66a1b0c8f8cbdde","url":"https://api.github.com/repos/apache/openjpa/git/trees/930f0f2a2c426dd38f286321b66a1b0c8f8cbdde"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1dde59cd79bab940923150f7026abcb4585726ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1dde59cd79bab940923150f7026abcb4585726ed","html_url":"https://github.com/apache/openjpa/commit/1dde59cd79bab940923150f7026abcb4585726ed","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1dde59cd79bab940923150f7026abcb4585726ed/comments","author":null,"committer":null,"parents":[{"sha":"813d37d74338a345c42328869de76e007aafabf7","url":"https://api.github.com/repos/apache/openjpa/commits/813d37d74338a345c42328869de76e007aafabf7","html_url":"https://github.com/apache/openjpa/commit/813d37d74338a345c42328869de76e007aafabf7"}]},{"sha":"5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmY2IzYzAxYTA4N2U4NGNhOWMzYTJkNTgxZjA1YzgxMDRkOWUxYjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:16:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:16:10Z"},"message":"OPENJPA-592. Committing on behalf of Jason Zheng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655586 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae555b1cd1f95144d511f3cdaeba3c5fcad9b09f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae555b1cd1f95144d511f3cdaeba3c5fcad9b09f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2","html_url":"https://github.com/apache/openjpa/commit/5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2/comments","author":null,"committer":null,"parents":[{"sha":"1dde59cd79bab940923150f7026abcb4585726ed","url":"https://api.github.com/repos/apache/openjpa/commits/1dde59cd79bab940923150f7026abcb4585726ed","html_url":"https://github.com/apache/openjpa/commit/1dde59cd79bab940923150f7026abcb4585726ed"}]},{"sha":"46720b6f027a829fb58715d8c204b9de61b3af48","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2NzIwYjZmMDI3YTgyOWZiNTg3MTVkOGMyMDRiOWRlNjFiM2FmNDg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:21:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:21:28Z"},"message":"OPENJPA-592. Oops, reverting earlier commit. I got my issue numbers mixed up.\n\nIf MySQL doesn't have a concept of a schema, I do not believe that we should necessarily try to emulate schemas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655587 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a7c4a8217a471cc97adb5dcd67204b33bbc0f5f","url":"https://api.github.com/repos/apache/openjpa/git/trees/7a7c4a8217a471cc97adb5dcd67204b33bbc0f5f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/46720b6f027a829fb58715d8c204b9de61b3af48","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/46720b6f027a829fb58715d8c204b9de61b3af48","html_url":"https://github.com/apache/openjpa/commit/46720b6f027a829fb58715d8c204b9de61b3af48","comments_url":"https://api.github.com/repos/apache/openjpa/commits/46720b6f027a829fb58715d8c204b9de61b3af48/comments","author":null,"committer":null,"parents":[{"sha":"5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2","url":"https://api.github.com/repos/apache/openjpa/commits/5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2","html_url":"https://github.com/apache/openjpa/commit/5fcb3c01a087e84ca9c3a2d581f05c8104d9e1b2"}]},{"sha":"07d65dcfa4546d0f3fa87da46317295dbbad7f1e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3ZDY1ZGNmYTQ1NDZkMGYzZmE4N2RhNDYzMTcyOTVkYmJhZDdmMWU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:32:30Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:32:30Z"},"message":"OPENJPA-231. Adding license headers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"395ee56c031968ebbf88a095efdebfd3b1e91112","url":"https://api.github.com/repos/apache/openjpa/git/trees/395ee56c031968ebbf88a095efdebfd3b1e91112"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07d65dcfa4546d0f3fa87da46317295dbbad7f1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07d65dcfa4546d0f3fa87da46317295dbbad7f1e","html_url":"https://github.com/apache/openjpa/commit/07d65dcfa4546d0f3fa87da46317295dbbad7f1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07d65dcfa4546d0f3fa87da46317295dbbad7f1e/comments","author":null,"committer":null,"parents":[{"sha":"46720b6f027a829fb58715d8c204b9de61b3af48","url":"https://api.github.com/repos/apache/openjpa/commits/46720b6f027a829fb58715d8c204b9de61b3af48","html_url":"https://github.com/apache/openjpa/commit/46720b6f027a829fb58715d8c204b9de61b3af48"}]},{"sha":"51950e7d49b96805b763510ab4e4d97c92817ea7","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxOTUwZTdkNDliOTY4MDViNzYzNTEwYWI0ZTRkOTdjOTI4MTdlYTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:41:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:41:33Z"},"message":"OPENJPA-591. Porting Mike's work to 1.1.x.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655595 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0781fcd318e8ceee509171bfee5cc630e5bbdcf9","url":"https://api.github.com/repos/apache/openjpa/git/trees/0781fcd318e8ceee509171bfee5cc630e5bbdcf9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/51950e7d49b96805b763510ab4e4d97c92817ea7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/51950e7d49b96805b763510ab4e4d97c92817ea7","html_url":"https://github.com/apache/openjpa/commit/51950e7d49b96805b763510ab4e4d97c92817ea7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/51950e7d49b96805b763510ab4e4d97c92817ea7/comments","author":null,"committer":null,"parents":[{"sha":"07d65dcfa4546d0f3fa87da46317295dbbad7f1e","url":"https://api.github.com/repos/apache/openjpa/commits/07d65dcfa4546d0f3fa87da46317295dbbad7f1e","html_url":"https://github.com/apache/openjpa/commit/07d65dcfa4546d0f3fa87da46317295dbbad7f1e"}]},{"sha":"194f59f02f524211a514bed41882fef9297357d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5NGY1OWYwMmY1MjQyMTFhNTE0YmVkNDE4ODJmZWY5Mjk3MzU3ZDA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:58:00Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T18:58:00Z"},"message":"OPENJPA-597. Committing on behalf of Sandeep Srivastava.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655600 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67358661cee2dcc7c2ea69b60689eccd64902865","url":"https://api.github.com/repos/apache/openjpa/git/trees/67358661cee2dcc7c2ea69b60689eccd64902865"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/194f59f02f524211a514bed41882fef9297357d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/194f59f02f524211a514bed41882fef9297357d0","html_url":"https://github.com/apache/openjpa/commit/194f59f02f524211a514bed41882fef9297357d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/194f59f02f524211a514bed41882fef9297357d0/comments","author":null,"committer":null,"parents":[{"sha":"51950e7d49b96805b763510ab4e4d97c92817ea7","url":"https://api.github.com/repos/apache/openjpa/commits/51950e7d49b96805b763510ab4e4d97c92817ea7","html_url":"https://github.com/apache/openjpa/commit/51950e7d49b96805b763510ab4e4d97c92817ea7"}]},{"sha":"a927500b5ef586d3a527308cd6c0fec421e13b19","node_id":"MDY6Q29tbWl0MjA2MzY0OmE5Mjc1MDBiNWVmNTg2ZDNhNTI3MzA4Y2Q2YzBmZWM0MjFlMTNiMTk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T19:43:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T19:43:57Z"},"message":"OPENJPA-589. Porting patch from trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655617 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b431f3b54830a2d0a2cf59d335a3150913999b3c","url":"https://api.github.com/repos/apache/openjpa/git/trees/b431f3b54830a2d0a2cf59d335a3150913999b3c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a927500b5ef586d3a527308cd6c0fec421e13b19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a927500b5ef586d3a527308cd6c0fec421e13b19","html_url":"https://github.com/apache/openjpa/commit/a927500b5ef586d3a527308cd6c0fec421e13b19","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a927500b5ef586d3a527308cd6c0fec421e13b19/comments","author":null,"committer":null,"parents":[{"sha":"194f59f02f524211a514bed41882fef9297357d0","url":"https://api.github.com/repos/apache/openjpa/commits/194f59f02f524211a514bed41882fef9297357d0","html_url":"https://github.com/apache/openjpa/commit/194f59f02f524211a514bed41882fef9297357d0"}]},{"sha":"b56f30427fb6faabb63e943cff8c7aa17997d8d6","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1NmYzMDQyN2ZiNmZhYWJiNjNlOTQzY2ZmOGM3YWExNzk5N2Q4ZDY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T21:32:08Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T21:32:08Z"},"message":"OPENJPA-589. Added license headers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655655 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c649210fb36d2bff43b530b3d58690f76155def4","url":"https://api.github.com/repos/apache/openjpa/git/trees/c649210fb36d2bff43b530b3d58690f76155def4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b56f30427fb6faabb63e943cff8c7aa17997d8d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b56f30427fb6faabb63e943cff8c7aa17997d8d6","html_url":"https://github.com/apache/openjpa/commit/b56f30427fb6faabb63e943cff8c7aa17997d8d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b56f30427fb6faabb63e943cff8c7aa17997d8d6/comments","author":null,"committer":null,"parents":[{"sha":"a927500b5ef586d3a527308cd6c0fec421e13b19","url":"https://api.github.com/repos/apache/openjpa/commits/a927500b5ef586d3a527308cd6c0fec421e13b19","html_url":"https://github.com/apache/openjpa/commit/a927500b5ef586d3a527308cd6c0fec421e13b19"}]},{"sha":"75309a24472ba244d48b6112daffede1b1c93f04","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1MzA5YTI0NDcyYmEyNDRkNDhiNjExMmRhZmZlZGUxYjFjOTNmMDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T21:42:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T21:42:57Z"},"message":"OPENJPA-595. Porting to 1.1.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@655657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"129057ab615901a9099f7fc0f503c67827b833f3","url":"https://api.github.com/repos/apache/openjpa/git/trees/129057ab615901a9099f7fc0f503c67827b833f3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/75309a24472ba244d48b6112daffede1b1c93f04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/75309a24472ba244d48b6112daffede1b1c93f04","html_url":"https://github.com/apache/openjpa/commit/75309a24472ba244d48b6112daffede1b1c93f04","comments_url":"https://api.github.com/repos/apache/openjpa/commits/75309a24472ba244d48b6112daffede1b1c93f04/comments","author":null,"committer":null,"parents":[{"sha":"b56f30427fb6faabb63e943cff8c7aa17997d8d6","url":"https://api.github.com/repos/apache/openjpa/commits/b56f30427fb6faabb63e943cff8c7aa17997d8d6","html_url":"https://github.com/apache/openjpa/commit/b56f30427fb6faabb63e943cff8c7aa17997d8d6"}]},{"sha":"7f10ac222a7bac686b766826545d6efe5672b317","node_id":"MDY6Q29tbWl0MjA2MzY0OjdmMTBhYzIyMmE3YmFjNjg2Yjc2NjgyNjU0NWQ2ZWZlNTY3MmIzMTc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T23:11:22Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T23:11:22Z"},"message":"OpenJPA 1.1.0 release branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@655685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"129057ab615901a9099f7fc0f503c67827b833f3","url":"https://api.github.com/repos/apache/openjpa/git/trees/129057ab615901a9099f7fc0f503c67827b833f3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7f10ac222a7bac686b766826545d6efe5672b317","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7f10ac222a7bac686b766826545d6efe5672b317","html_url":"https://github.com/apache/openjpa/commit/7f10ac222a7bac686b766826545d6efe5672b317","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7f10ac222a7bac686b766826545d6efe5672b317/comments","author":null,"committer":null,"parents":[{"sha":"75309a24472ba244d48b6112daffede1b1c93f04","url":"https://api.github.com/repos/apache/openjpa/commits/75309a24472ba244d48b6112daffede1b1c93f04","html_url":"https://github.com/apache/openjpa/commit/75309a24472ba244d48b6112daffede1b1c93f04"}]},{"sha":"8467b19863d3d476b9ff3e13ba914eac02bf810a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0NjdiMTk4NjNkM2Q0NzZiOWZmM2UxM2JhOTE0ZWFjMDJiZjgxMGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-13T00:29:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-13T00:29:50Z"},"message":"Updated versions etc. to 1.1.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@655702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22f6e7e1feae3f147d9f8a7b968af5a67beab8e5","url":"https://api.github.com/repos/apache/openjpa/git/trees/22f6e7e1feae3f147d9f8a7b968af5a67beab8e5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8467b19863d3d476b9ff3e13ba914eac02bf810a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8467b19863d3d476b9ff3e13ba914eac02bf810a","html_url":"https://github.com/apache/openjpa/commit/8467b19863d3d476b9ff3e13ba914eac02bf810a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8467b19863d3d476b9ff3e13ba914eac02bf810a/comments","author":null,"committer":null,"parents":[{"sha":"7f10ac222a7bac686b766826545d6efe5672b317","url":"https://api.github.com/repos/apache/openjpa/commits/7f10ac222a7bac686b766826545d6efe5672b317","html_url":"https://github.com/apache/openjpa/commit/7f10ac222a7bac686b766826545d6efe5672b317"}]},{"sha":"5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwMDJjY2ZjODVmYmU1NDlhMWU1ZWI1MmIxYTAwZDMzYmY1NDk4ZDI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-13T20:51:25Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-13T20:51:25Z"},"message":"OPENJPA-600. Committing on behalf of Jason Zheng.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@656006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e039d76ce341c1dce62199df8d2d2cb064b12ca7","url":"https://api.github.com/repos/apache/openjpa/git/trees/e039d76ce341c1dce62199df8d2d2cb064b12ca7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2","html_url":"https://github.com/apache/openjpa/commit/5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2/comments","author":null,"committer":null,"parents":[{"sha":"75309a24472ba244d48b6112daffede1b1c93f04","url":"https://api.github.com/repos/apache/openjpa/commits/75309a24472ba244d48b6112daffede1b1c93f04","html_url":"https://github.com/apache/openjpa/commit/75309a24472ba244d48b6112daffede1b1c93f04"}]},{"sha":"1bd834e056c0412c2e7b645cecdea091c1ef8473","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiZDgzNGUwNTZjMDQxMmMyZTdiNjQ1Y2VjZGVhMDkxYzFlZjg0NzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-13T20:52:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-13T20:52:52Z"},"message":"OPENJPA-600. Porting to the 1.1.0 release branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656007 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4f79edfa14b542ceca78b20bc13e488b32ca48ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/4f79edfa14b542ceca78b20bc13e488b32ca48ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1bd834e056c0412c2e7b645cecdea091c1ef8473","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1bd834e056c0412c2e7b645cecdea091c1ef8473","html_url":"https://github.com/apache/openjpa/commit/1bd834e056c0412c2e7b645cecdea091c1ef8473","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1bd834e056c0412c2e7b645cecdea091c1ef8473/comments","author":null,"committer":null,"parents":[{"sha":"8467b19863d3d476b9ff3e13ba914eac02bf810a","url":"https://api.github.com/repos/apache/openjpa/commits/8467b19863d3d476b9ff3e13ba914eac02bf810a","html_url":"https://github.com/apache/openjpa/commit/8467b19863d3d476b9ff3e13ba914eac02bf810a"}]},{"sha":"73b31ea0ec2243daca68ef1b75f56108de97f7bd","node_id":"MDY6Q29tbWl0MjA2MzY0OjczYjMxZWEwZWMyMjQzZGFjYTY4ZWYxYjc1ZjU2MTA4ZGU5N2Y3YmQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-14T19:01:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-14T19:01:28Z"},"message":"exclude the original OmniGraffle files from the image dir\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656362 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9c8f97e8a71a07080741786e4615bde6a515264","url":"https://api.github.com/repos/apache/openjpa/git/trees/d9c8f97e8a71a07080741786e4615bde6a515264"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/73b31ea0ec2243daca68ef1b75f56108de97f7bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/73b31ea0ec2243daca68ef1b75f56108de97f7bd","html_url":"https://github.com/apache/openjpa/commit/73b31ea0ec2243daca68ef1b75f56108de97f7bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/73b31ea0ec2243daca68ef1b75f56108de97f7bd/comments","author":null,"committer":null,"parents":[{"sha":"1bd834e056c0412c2e7b645cecdea091c1ef8473","url":"https://api.github.com/repos/apache/openjpa/commits/1bd834e056c0412c2e7b645cecdea091c1ef8473","html_url":"https://github.com/apache/openjpa/commit/1bd834e056c0412c2e7b645cecdea091c1ef8473"}]},{"sha":"2dc45dc45a17409de59a1f7613b22436c1aa0892","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkYzQ1ZGM0NWExNzQwOWRlNTlhMWY3NjEzYjIyNDM2YzFhYTA4OTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-14T20:27:14Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-14T20:27:14Z"},"message":"attempting to apply Wendy Smoak's patch for artifact signing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656414 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55f8feaedddc8ef8fbc89cd490f175f060a0adf2","url":"https://api.github.com/repos/apache/openjpa/git/trees/55f8feaedddc8ef8fbc89cd490f175f060a0adf2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2dc45dc45a17409de59a1f7613b22436c1aa0892","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2dc45dc45a17409de59a1f7613b22436c1aa0892","html_url":"https://github.com/apache/openjpa/commit/2dc45dc45a17409de59a1f7613b22436c1aa0892","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2dc45dc45a17409de59a1f7613b22436c1aa0892/comments","author":null,"committer":null,"parents":[{"sha":"73b31ea0ec2243daca68ef1b75f56108de97f7bd","url":"https://api.github.com/repos/apache/openjpa/commits/73b31ea0ec2243daca68ef1b75f56108de97f7bd","html_url":"https://github.com/apache/openjpa/commit/73b31ea0ec2243daca68ef1b75f56108de97f7bd"}]},{"sha":"93e1e96f20b6b0614ae4e8b47b57f628629228b1","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzZTFlOTZmMjBiNmIwNjE0YWU0ZThiNDdiNTdmNjI4NjI5MjI4YjE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-14T21:10:21Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-14T21:10:21Z"},"message":"added passphrase support back to Wendy's suggestion\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656435 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42b86b865ba6a8c4044dbe637ca3401b16cfe9e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/42b86b865ba6a8c4044dbe637ca3401b16cfe9e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93e1e96f20b6b0614ae4e8b47b57f628629228b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93e1e96f20b6b0614ae4e8b47b57f628629228b1","html_url":"https://github.com/apache/openjpa/commit/93e1e96f20b6b0614ae4e8b47b57f628629228b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93e1e96f20b6b0614ae4e8b47b57f628629228b1/comments","author":null,"committer":null,"parents":[{"sha":"2dc45dc45a17409de59a1f7613b22436c1aa0892","url":"https://api.github.com/repos/apache/openjpa/commits/2dc45dc45a17409de59a1f7613b22436c1aa0892","html_url":"https://github.com/apache/openjpa/commit/2dc45dc45a17409de59a1f7613b22436c1aa0892"}]},{"sha":"13b2defc6fcfe04fd91d223f11a7932bb3041b9e","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzYjJkZWZjNmZjZmUwNGZkOTFkMjIzZjExYTc5MzJiYjMwNDFiOWU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-15T03:16:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-15T03:16:16Z"},"message":"adding the old signing stuff back in to try to get things working with our file locations\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656496 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1dcf792209d839b32679203efdd749a4c346b9ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/1dcf792209d839b32679203efdd749a4c346b9ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13b2defc6fcfe04fd91d223f11a7932bb3041b9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13b2defc6fcfe04fd91d223f11a7932bb3041b9e","html_url":"https://github.com/apache/openjpa/commit/13b2defc6fcfe04fd91d223f11a7932bb3041b9e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13b2defc6fcfe04fd91d223f11a7932bb3041b9e/comments","author":null,"committer":null,"parents":[{"sha":"93e1e96f20b6b0614ae4e8b47b57f628629228b1","url":"https://api.github.com/repos/apache/openjpa/commits/93e1e96f20b6b0614ae4e8b47b57f628629228b1","html_url":"https://github.com/apache/openjpa/commit/93e1e96f20b6b0614ae4e8b47b57f628629228b1"}]},{"sha":"36ebb619002dd9c7d589ba259e2829ec1d4441a4","node_id":"MDY6Q29tbWl0MjA2MzY0OjM2ZWJiNjE5MDAyZGQ5YzdkNTg5YmEyNTllMjgyOWVjMWQ0NDQxYTQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-15T03:20:31Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-15T03:20:31Z"},"message":"adding passphrase back into the XML to get signing working properly with both the old and new locations\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656497 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"664ab64a422f2d1950bfdf7b928bb030cd0dc556","url":"https://api.github.com/repos/apache/openjpa/git/trees/664ab64a422f2d1950bfdf7b928bb030cd0dc556"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/36ebb619002dd9c7d589ba259e2829ec1d4441a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/36ebb619002dd9c7d589ba259e2829ec1d4441a4","html_url":"https://github.com/apache/openjpa/commit/36ebb619002dd9c7d589ba259e2829ec1d4441a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/36ebb619002dd9c7d589ba259e2829ec1d4441a4/comments","author":null,"committer":null,"parents":[{"sha":"13b2defc6fcfe04fd91d223f11a7932bb3041b9e","url":"https://api.github.com/repos/apache/openjpa/commits/13b2defc6fcfe04fd91d223f11a7932bb3041b9e","html_url":"https://github.com/apache/openjpa/commit/13b2defc6fcfe04fd91d223f11a7932bb3041b9e"}]},{"sha":"9aaa7428ac4231ef02fd41df9381fedcb314492e","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhYWE3NDI4YWM0MjMxZWYwMmZkNDFkZjkzODFmZWRjYjMxNDQ5MmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-15T05:21:24Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-15T05:21:24Z"},"message":"fixing XML bug\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@656510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa3b011d50ee31ab6a0d5ccce406125baa50cfa4","url":"https://api.github.com/repos/apache/openjpa/git/trees/fa3b011d50ee31ab6a0d5ccce406125baa50cfa4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9aaa7428ac4231ef02fd41df9381fedcb314492e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9aaa7428ac4231ef02fd41df9381fedcb314492e","html_url":"https://github.com/apache/openjpa/commit/9aaa7428ac4231ef02fd41df9381fedcb314492e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9aaa7428ac4231ef02fd41df9381fedcb314492e/comments","author":null,"committer":null,"parents":[{"sha":"36ebb619002dd9c7d589ba259e2829ec1d4441a4","url":"https://api.github.com/repos/apache/openjpa/commits/36ebb619002dd9c7d589ba259e2829ec1d4441a4","html_url":"https://github.com/apache/openjpa/commit/36ebb619002dd9c7d589ba259e2829ec1d4441a4"}]},{"sha":"3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmM2FiNGE1NDNmMzQ5NmM2YjQ4NTBlNGE1ZGIyMzg2YzNmMzNmOGQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-05-15T19:18:27Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-05-15T19:18:27Z"},"message":"Bugfix for multiple insert,delete,query cycles of the same id in the same\ntransaction.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@656796 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e2ab0a0f3b5dbaa5595be60de6b900de166348fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/e2ab0a0f3b5dbaa5595be60de6b900de166348fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d","html_url":"https://github.com/apache/openjpa/commit/3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d/comments","author":null,"committer":null,"parents":[{"sha":"5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2","url":"https://api.github.com/repos/apache/openjpa/commits/5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2","html_url":"https://github.com/apache/openjpa/commit/5002ccfc85fbe549a1e5eb52b1a00d33bf5498d2"}]},{"sha":"5cc1cd2487b24968f40d5eb5a63989e22ff26633","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjYzFjZDI0ODdiMjQ5NjhmNDBkNWViNWE2Mzk4OWUyMmZmMjY2MzM=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-05-16T17:45:48Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-05-16T17:45:48Z"},"message":"In some cases, nested exception arrays can contain a null entry.  Ignore these rather than throw a NullPointerException in the exception handling.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@657148 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c74efa1848d720a8247e0172453794162cad998","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c74efa1848d720a8247e0172453794162cad998"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5cc1cd2487b24968f40d5eb5a63989e22ff26633","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5cc1cd2487b24968f40d5eb5a63989e22ff26633","html_url":"https://github.com/apache/openjpa/commit/5cc1cd2487b24968f40d5eb5a63989e22ff26633","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5cc1cd2487b24968f40d5eb5a63989e22ff26633/comments","author":null,"committer":null,"parents":[{"sha":"3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d","url":"https://api.github.com/repos/apache/openjpa/commits/3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d","html_url":"https://github.com/apache/openjpa/commit/3f3ab4a543f3496c6b4850e4a5db2386c3f33f8d"}]},{"sha":"46b63eced2b1b0144e1af5582cf1d2e972bf6f73","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2YjYzZWNlZDJiMWIwMTQ0ZTFhZjU1ODJjZjFkMmU5NzJiZjZmNzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-16T18:40:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-16T18:40:46Z"},"message":"Make the CacheMarshallerImpl a bit more tolerant to different configurations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@657162 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97bd26580f333f0bae48b89b7af96984602c6554","url":"https://api.github.com/repos/apache/openjpa/git/trees/97bd26580f333f0bae48b89b7af96984602c6554"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/46b63eced2b1b0144e1af5582cf1d2e972bf6f73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/46b63eced2b1b0144e1af5582cf1d2e972bf6f73","html_url":"https://github.com/apache/openjpa/commit/46b63eced2b1b0144e1af5582cf1d2e972bf6f73","comments_url":"https://api.github.com/repos/apache/openjpa/commits/46b63eced2b1b0144e1af5582cf1d2e972bf6f73/comments","author":null,"committer":null,"parents":[{"sha":"5cc1cd2487b24968f40d5eb5a63989e22ff26633","url":"https://api.github.com/repos/apache/openjpa/commits/5cc1cd2487b24968f40d5eb5a63989e22ff26633","html_url":"https://github.com/apache/openjpa/commit/5cc1cd2487b24968f40d5eb5a63989e22ff26633"}]},{"sha":"26dad2ab71f60a458d0c16b23f150acb0f648cb2","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2ZGFkMmFiNzFmNjBhNDU4ZDBjMTZiMjNmMTUwYWNiMGY2NDhjYjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:29:42Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:29:42Z"},"message":"merged changes from 1.1.0 release assembly process to 1.1.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@657897 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80a55105526a5fd94fb5b2e0e8b3426af36a8624","url":"https://api.github.com/repos/apache/openjpa/git/trees/80a55105526a5fd94fb5b2e0e8b3426af36a8624"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26dad2ab71f60a458d0c16b23f150acb0f648cb2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26dad2ab71f60a458d0c16b23f150acb0f648cb2","html_url":"https://github.com/apache/openjpa/commit/26dad2ab71f60a458d0c16b23f150acb0f648cb2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26dad2ab71f60a458d0c16b23f150acb0f648cb2/comments","author":null,"committer":null,"parents":[{"sha":"46b63eced2b1b0144e1af5582cf1d2e972bf6f73","url":"https://api.github.com/repos/apache/openjpa/commits/46b63eced2b1b0144e1af5582cf1d2e972bf6f73","html_url":"https://github.com/apache/openjpa/commit/46b63eced2b1b0144e1af5582cf1d2e972bf6f73"}]},{"sha":"509ba1b1a919326729e9fae1b8177e6ff29f13dd","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwOWJhMWIxYTkxOTMyNjcyOWU5ZmFlMWI4MTc3ZTZmZjI5ZjEzZGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:34:02Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:34:02Z"},"message":"OpenJPA 1.1.0 release branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@657902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80a55105526a5fd94fb5b2e0e8b3426af36a8624","url":"https://api.github.com/repos/apache/openjpa/git/trees/80a55105526a5fd94fb5b2e0e8b3426af36a8624"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/509ba1b1a919326729e9fae1b8177e6ff29f13dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/509ba1b1a919326729e9fae1b8177e6ff29f13dd","html_url":"https://github.com/apache/openjpa/commit/509ba1b1a919326729e9fae1b8177e6ff29f13dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/509ba1b1a919326729e9fae1b8177e6ff29f13dd/comments","author":null,"committer":null,"parents":[{"sha":"9aaa7428ac4231ef02fd41df9381fedcb314492e","url":"https://api.github.com/repos/apache/openjpa/commits/9aaa7428ac4231ef02fd41df9381fedcb314492e","html_url":"https://github.com/apache/openjpa/commit/9aaa7428ac4231ef02fd41df9381fedcb314492e"},{"sha":"26dad2ab71f60a458d0c16b23f150acb0f648cb2","url":"https://api.github.com/repos/apache/openjpa/commits/26dad2ab71f60a458d0c16b23f150acb0f648cb2","html_url":"https://github.com/apache/openjpa/commit/26dad2ab71f60a458d0c16b23f150acb0f648cb2"}]},{"sha":"b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","node_id":"MDY6Q29tbWl0MjA2MzY0OmI2YzFkMDVjZTQ4ZjllMGQ4NWIwNzNjYmQ1YjlmYzM3OTkxOGUyZmM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:47:42Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:47:42Z"},"message":"updated version number to 1.1.0 for the release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@657914 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22d8e26fd607d8c4d9054d5cfd058c30e84b740c","url":"https://api.github.com/repos/apache/openjpa/git/trees/22d8e26fd607d8c4d9054d5cfd058c30e84b740c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","html_url":"https://github.com/apache/openjpa/commit/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc/comments","author":null,"committer":null,"parents":[{"sha":"509ba1b1a919326729e9fae1b8177e6ff29f13dd","url":"https://api.github.com/repos/apache/openjpa/commits/509ba1b1a919326729e9fae1b8177e6ff29f13dd","html_url":"https://github.com/apache/openjpa/commit/509ba1b1a919326729e9fae1b8177e6ff29f13dd"}]},{"sha":"26e8ada2aba91aaf77fe10c37b031a18c279bf01","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2ZThhZGEyYWJhOTFhYWY3N2ZlMTBjMzdiMDMxYTE4YzI3OWJmMDE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:50:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:50:55Z"},"message":"OPENJPA-559. Ported Mike's fix to 1.1.0.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@657916 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a3d3bc040fbc8b866fb5f3e45a27bc1e674140f3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a3d3bc040fbc8b866fb5f3e45a27bc1e674140f3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26e8ada2aba91aaf77fe10c37b031a18c279bf01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26e8ada2aba91aaf77fe10c37b031a18c279bf01","html_url":"https://github.com/apache/openjpa/commit/26e8ada2aba91aaf77fe10c37b031a18c279bf01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26e8ada2aba91aaf77fe10c37b031a18c279bf01/comments","author":null,"committer":null,"parents":[{"sha":"b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","url":"https://api.github.com/repos/apache/openjpa/commits/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","html_url":"https://github.com/apache/openjpa/commit/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc"}]}],"files":[{"sha":"123702f305914b53edb83e239dbbe7c57d4025bd","filename":"board/2007-06.txt","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/board/2007-06.txt","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/board/2007-06.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/board/2007-06.txt?ref=56f6b437909815b1974c391d6496a1c4c5f87382","patch":"@@ -1,25 +0,0 @@\n-2007-06 Status Report for the Apache OpenJPA Project\n-\n-Highlights\n-\n-In its first month following graduation from the incubator,\n-OpenJPA has begun work on its first official release, 1.0.0.\n-\n-Community\n-\n-Email traffic on the lists continues to grow as more people\n-discover that the Java EE 5 specification really does allow\n-pluggable persistence implementations.\n-\n-Governance\n-\n-The TLP migration of the svn repository, mail lists, unix \n-aliases, and openjpa web site have been completed. The \n-incubator web site has been updated to indicate that openjpa\n-is no longer in incubation.\n-\n-Release naming policy is being discussed and resolution is \n-expected prior to the first release as a TLP.\n-\n-Michael Dick was added to the OpenJPA PMC.\n-"},{"sha":"26c3976aba73cf5e9b946db7a4e2916920741386","filename":"board/2007-07.txt","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/board/2007-07.txt","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/board/2007-07.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/board/2007-07.txt?ref=56f6b437909815b1974c391d6496a1c4c5f87382","patch":"@@ -1,29 +0,0 @@\n-2007-07 Status Report for the Apache OpenJPA Project\n-\n-Highlights\n-\n-OpenJPA continues to work toward its first release as a TLP, to be called\n-OpenJPA 1.0.0. There are currently 46 open issues that have been\n-identified as \"close before 1.0.0\".\n-\n-Community\n-\n-The users@openjpa.apache.org mailing list was started upon graduation\n-and already has over 100 posts, from 16 unique non-committer posters.\n-\n-A public face-to-face meeting is being discussed for sometime this summer\n-in the bay area.  We're hoping that the planning date is far enough out \n-that many interested folks can join. We've invited Bull Pugh (FindBugs)\n-to give us a presentation.\n-\n-Governance\n-\n-Release naming policy for the first release has been resolved.\n-\n-David Ezzio was voted as a new committer (and new to Apache).\n-\n-The PMC continues to track contributors with an eye toward making them\n-committers.\n-\n-Releases\n-"},{"sha":"e88d6c4b8559f48bc56457a7e3366a272c47c054","filename":"board/2007-08.txt","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/board/2007-08.txt","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/board/2007-08.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/board/2007-08.txt?ref=56f6b437909815b1974c391d6496a1c4c5f87382","patch":"@@ -1,21 +0,0 @@\n-2007-08 Status Report for the Apache OpenJPA Project\n-\n-Highlights\n-\n-OpenJPA continues to work toward its first release as a TLP, to be called\n-OpenJPA 1.0.0. There are currently 44 open issues that have been\n-identified as \"close before 1.0.0\".\n-\n-Community\n-\n-A public face-to-face meeting was held August 6 and 7, hosted by\n-BEA in San Jose. The meeting was advertised on the Apache party alias\n-in addition to the openjpa dev alias.\n-\n-Governance\n-\n-The PMC continues to track contributors with an eye toward making them\n-committers.\n-\n-Releases\n-"},{"sha":"1f52397b0eb96fd494159f4f0fdb9b4a503cd9de","filename":"openjpa-all/pom.xml","status":"modified","additions":42,"deletions":21,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -28,17 +28,8 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n+        <version>1.1.0</version>\n     </parent>\n-    <properties>\n-        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk/openjpa-all</scm.dir>\n-    </properties>\n-\n-    <scm>\n-        <connection>scm:svn:http://${scm.dir}</connection>\n-        <developerConnection>scm:svn:https://${scm.dir}</developerConnection>\n-        <url>https://${scm.dir}</url>\n-    </scm>\n \n     <build>\n         <plugins>\n@@ -93,13 +84,15 @@\n \n             <!--\n                 create enhancer pre-main attribute\n-                copied from openjpa-kernel-5/pom.xml\n             -->\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-jar-plugin</artifactId>\n                 <configuration>\n                     <archive>\n+                        <manifest>\n+                           <mainClass>org.apache.openjpa.conf.OpenJPAVersion</mainClass>\n+                        </manifest>\n                         <manifestEntries>\n                             <Premain-Class>\n                                 org.apache.openjpa.enhance.PCEnhancerAgent\n@@ -116,41 +109,69 @@\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-lib</artifactId>\n             <version>${pom.version}</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-kernel</artifactId>\n             <version>${pom.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel-5</artifactId>\n-            <version>${pom.version}</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-jdbc</artifactId>\n             <version>${pom.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-jdbc-5</artifactId>\n-            <version>${pom.version}</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-persistence</artifactId>\n             <version>${pom.version}</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-persistence-jdbc</artifactId>\n             <version>${pom.version}</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-xmlstore</artifactId>\n             <version>${pom.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>net.sourceforge.serp</groupId>\n+            <artifactId>serp</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-logging</groupId>\n+            <artifactId>commons-logging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-lang</groupId>\n+            <artifactId>commons-lang</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-collections</groupId>\n+            <artifactId>commons-collections</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-pool</groupId>\n+            <artifactId>commons-pool</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jms_1.1_spec</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jpa_3.0_spec</artifactId>\n         </dependency>\n     </dependencies>\n </project>"},{"sha":"fd1d1a643c03f99beb3902e9ed4b36f228c94e8e","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -30,7 +30,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n+        <version>1.1.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -42,19 +42,16 @@\n         <dependency>\n             <groupId>org.apache.derby</groupId>\n             <artifactId>derby</artifactId>\n-            <version>10.2.2.0</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>commons-dbcp</groupId>\n             <artifactId>commons-dbcp</artifactId>\n-            <version>1.2.1</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>commons-collections</groupId>\n             <artifactId>commons-collections</artifactId>\n-            <version>3.2</version>\n             <scope>test</scope>\n         </dependency>\n     </dependencies>"},{"sha":"ec09ddc7862959f5a6e5713bab8d27c8ad7ff1fd","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -37,7 +37,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n+        <version>1.1.0</version>\n     </parent>\n \n     <profiles>"},{"sha":"4df81667230e326a44ef74a570d9d4873d216c36","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -28,7 +28,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n+        <version>1.1.0</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"59e9c4a40d81ad5f02425be8d4cd4cf21c76c0d8","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -35,6 +35,11 @@\n \n         mvn integration-test -Ptck-profile -Djpatck.pkg.dir=com/sun/ts/tests/ejb30/persistence/inheritance/mappedsc/descriptors\n \n+    You can also run using another database (e.g., oracle) using command\n+    line properties. For example:\n+\n+        mvn integration-test -Ddb.name=oracle -Ddb.driver=oracle.jdbc.driver.OracleDriver -Ddb.url=jdbc:oracle:thin:@dbhost:1526:dbname -Ddb.username=scott -Ddb.password=tiger -Ddb.jar=/tmp/oracle-jdbc.jar -Dtest=false -Ptck-profile -Djpatck.pkg.dir=com/sun/ts/tests/ejb30/persistence/query/apitests -Djpatck.test=queryAPITest15\n+\n     The TCK running process will do the following:\n \n     1. Fine the TCK zip file and extract it\n@@ -55,7 +60,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n+        <version>1.1.0</version>\n     </parent>\n \n     <profiles>\n@@ -100,17 +105,22 @@\n                                 <exclude name=\"**/geronimo-jpa*\"/>\n                             </fileset>\n                             <pathelement path=\"${java.class.path}\"/>\n+                            <pathelement path=\"${db.jar}\"/>\n                         </path>\n                         <pathconvert property=\"cp.property\" refid=\"cp\"/>\n \n+                        <property name=\"db.name\" value=\"derby\"/>\n                         <property name=\"db.driver\"\n                             value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n                         <property name=\"db.url\"\n                             value=\"jdbc:derby:derby-database;create=true\"/>\n                         <property name=\"db.username\" value=\"nousername\"/>\n                         <property name=\"db.password\" value=\"nopassword\"/>\n \n+                        <property name=\"openjpa.log.level\" value=\"WARN\"/>\n+\n                         <property name=\"jpatck.pkg.dir\" value=\"com\"/>\n+                        <property name=\"jpatck.test\" value=\"\"/>\n \n                         <property name=\"jpatck.work.dir\"\n                             value=\"${tck.dir}/../work\"/>\n@@ -130,7 +140,7 @@ openjpa.ConnectionPassword: ${db.password}\n openjpa.FetchBatchSize: -1\n openjpa.Compatibility: StrictIdentityValues=true\n openjpa.Sequence: time\n-openjpa.Log: DefaultLevel=WARN\n+openjpa.Log: DefaultLevel=${openjpa.log.level}\n openjpa.jdbc.DBDictionary: StoreCharsAsNumbers=false\n openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n                         </echo>\n@@ -160,6 +170,7 @@ database.user=${db.username}\n database.passwd=${db.password}\n database.url=${db.url}\n database.driver=${db.driver}\n+databaseName=${db.name}\n \n                         </echo>\n \n@@ -224,6 +235,10 @@ database.driver=${db.driver}\n \n                                     <sysproperty key=\"pkg.dir\"\n                                         value=\"${jpatck.pkg.dir}\"/>\n+                                    <!--\n+                                    <sysproperty key=\"test\"\n+                                        value=\"${jpatck.test}\"/>\n+                                    -->\n \n                                     <classpath>\n                                         <path refid=\"cp\"/>"},{"sha":"d6f758e2313cb09c0c835f35159c4ca834534af9","filename":"openjpa-jdbc-5/pom.xml","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-jdbc-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-jdbc-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/pom.xml?ref=56f6b437909815b1974c391d6496a1c4c5f87382","patch":"@@ -1,60 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <groupId>org.apache.openjpa</groupId>\n-    <artifactId>openjpa-jdbc-5</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA JDBC 1.5</name>\n-    <description>OpenJPA JDBC 1.5</description>\n-    <url>http://openjpa.apache.org</url>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-jdbc</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>compile</scope>\n-        </dependency>\n-\t    <dependency>\n-\t\t    <groupId>javax.xml.bind</groupId>\n-\t\t    <artifactId>jaxb-api</artifactId>\n-\t\t    <version>2.0</version>\n-\t    </dependency>\n-    </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-</project>"},{"sha":"d19404b291f3fd92605d39b48f5731adf300729d","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":12,"deletions":24,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -30,49 +30,37 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n+        <version>1.1.0</version>\n     </parent>\n-    <profiles>\n-        <profile>\n-            <id>java14-validate</id>\n-            <activation><property><name>java14.jar</name></property></activation>\n-            <build>\n-                <pluginManagement>\n-                    <plugins>\n-                        <plugin>\n-                            <artifactId>maven-compiler-plugin</artifactId>\n-                            <configuration>\n-                                <compilerArguments>\n-                                    <bootclasspath>${java14.jar}</bootclasspath>\n-                                </compilerArguments>\n-                            </configuration>\n-                        </plugin>\n-                    </plugins>\n-                </pluginManagement>\n-            </build>\n-        </profile>\n-    </profiles>\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-kernel</artifactId>\n             <version>${pom.version}</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>javax.xml.bind</groupId>\n+            <artifactId>jaxb-api</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>hsqldb</groupId>\n             <artifactId>hsqldb</artifactId>\n-            <version>1.8.0.1</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>8.1-407.jdbc3</version>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>\n             <plugin>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n-                    <source>1.4</source>\n-                    <target>1.4</target>\n+                    <source>1.5</source>\n+                    <target>1.5</target>\n                 </configuration>\n             </plugin>\n         </plugins>"},{"sha":"9cb60aca8b1160e77247c22869b54352338296b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":30,"deletions":6,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -49,6 +49,7 @@\n  * <li><code>file</code></li>\n  * <li><code>schemaFile</code></li>\n  * <li><code>sqlFile</code></li>\n+ * <li><code>tmpClassLoader</code></li>\n  * </ul> Of these arguments, only <code>action</code> is required.\n  */\n public class MappingToolTask\n@@ -61,6 +62,7 @@\n     protected String file = null;\n     protected String schemaFile = null;\n     protected String sqlFile = null;\n+    protected boolean tmpClassLoader = true;\n \n     /**\n      * Set the enumerated MappingTool action type.\n@@ -176,21 +178,30 @@ protected void executeOn(String[] files)\n         if (MappingTool.ACTION_IMPORT.equals(flags.action))\n             assertFiles(files);\n \n-        ClassLoader loader = getClassLoader();\n+        ClassLoader toolLoader = (ClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper\n+                        .getClassLoaderAction(MappingTool.class));\n+        ClassLoader loader = toolLoader;\n+        MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n+\n+        if (tmpClassLoader) {\n+            loader = (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                    .newTemporaryClassLoaderAction(getClassLoader()));\n+            resolver.addClassLoader(loader);\n+        }\n+        resolver.addClassLoader(toolLoader);\n+            \n         if (flags.meta && MappingTool.ACTION_ADD.equals(flags.action))\n             flags.metaDataFile = Files.getFile(file, loader);\n         else\n             flags.mappingWriter = Files.getWriter(file, loader);\n+\n         flags.schemaWriter = Files.getWriter(schemaFile, loader);\n         flags.sqlWriter = Files.getWriter(sqlFile, loader);\n \n-        MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n-        resolver.addClassLoader(loader);\n-        resolver.addClassLoader((ClassLoader) AccessController.doPrivileged(\n-            J2DoPrivHelper.getClassLoaderAction(MappingTool.class)));\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         conf.setClassResolver(resolver);\n-\n+        \n         if (!MappingTool.run(conf, files, flags, loader))\n             throw new BuildException(_loc.get(\"bad-conf\", \"MappingToolTask\")\n                 .getMessage());\n@@ -215,5 +226,18 @@ protected void executeOn(String[] files)\n             return actions;\n         }\n     }\n+\n+    /**\n+     * <P>\n+     * Set whether a temporary ClassLoader should be used by the MappingTool.\n+     * The default value is true\n+     * </P>\n+     * \n+     * @param tmpClassLoader\n+     *            Whether the temporary ClassLoader should be used.\n+     */\n+    public void setTmpClassLoader(boolean tmpClassLoader) {\n+        this.tmpClassLoader = tmpClassLoader;\n+    }\n }\n "},{"sha":"cfe589a95be61c6ff1ffec4e95c0f8b17e12c7e7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -130,7 +130,8 @@ protected ConfigurationImpl newConfiguration() {\n \n     protected void executeOn(String[] files)\n         throws Exception {\n-        assertFiles(files);\n+        if (SchemaTool.ACTION_IMPORT.equals(flags.action))\n+            assertFiles(files);\n \n         ClassLoader loader = getClassLoader();\n         flags.writer = Files.getWriter(file, loader);"},{"sha":"4d85f4b9eb13819fcadf59b1294c20092a89c42c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":10,"deletions":37,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -24,6 +24,8 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager;\n+import org.apache.openjpa.jdbc.kernel.BatchingOperationOrderUpdateManager;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n import org.apache.openjpa.jdbc.kernel.LRSSizes;\n@@ -198,6 +200,7 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"derby\", \"org.apache.openjpa.jdbc.sql.DerbyDictionary\",\n             \"empress\", \"org.apache.openjpa.jdbc.sql.EmpressDictionary\",\n             \"foxpro\", \"org.apache.openjpa.jdbc.sql.FoxProDictionary\",\n+            \"h2\", \"org.apache.openjpa.jdbc.sql.H2Dictionary\",\n             \"hsql\", \"org.apache.openjpa.jdbc.sql.HSQLDictionary\",\n             \"informix\", \"org.apache.openjpa.jdbc.sql.InformixDictionary\",\n             \"jdatastore\", \"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\",\n@@ -214,11 +217,15 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         updateManagerPlugin = addPlugin(\"jdbc.UpdateManager\", true);\n         aliases = new String[]{\n             \"default\",\n-            \"org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager\",\n+            BatchingConstraintUpdateManager.class.getName(),\n             \"operation-order\",\n             \"org.apache.openjpa.jdbc.kernel.OperationOrderUpdateManager\",\n             \"constraint\",\n             \"org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager\",\n+            \"batching-constraint\",\n+            BatchingConstraintUpdateManager.class.getName(),\n+            \"batching-operation-order\",\n+            BatchingOperationOrderUpdateManager.class.getName(),\n         };\n         updateManagerPlugin.setAliases(aliases);\n         updateManagerPlugin.setDefault(aliases[0]);\n@@ -328,7 +335,6 @@ public JDBCConfigurationImpl(JDBCConfiguration conf) {\n     }\n \n     public void setSchema(String schema) {\n-        assertNotReadOnly();\n         this.schema.setString(schema);\n     }\n \n@@ -337,7 +343,6 @@ public String getSchema() {\n     }\n \n     public void setSchemas(String schemas) {\n-        assertNotReadOnly();\n         this.schemas.setString(schemas);\n     }\n \n@@ -346,7 +351,6 @@ public String getSchemas() {\n     }\n \n     public void setSchemas(String[] schemas) {\n-        assertNotReadOnly();\n         this.schemas.set(schemas);\n     }\n \n@@ -355,7 +359,6 @@ public void setSchemas(String[] schemas) {\n     }\n \n     public void setTransactionIsolation(String transactionIsolation) {\n-        assertNotReadOnly();\n         this.transactionIsolation.setString(transactionIsolation);\n     }\n \n@@ -364,7 +367,6 @@ public String getTransactionIsolation() {\n     }\n \n     public void setTransactionIsolation(int transactionIsolation) {\n-        assertNotReadOnly();\n         this.transactionIsolation.set(transactionIsolation);\n     }\n \n@@ -373,7 +375,6 @@ public int getTransactionIsolationConstant() {\n     }\n \n     public void setResultSetType(String resultSetType) {\n-        assertNotReadOnly();\n         this.resultSetType.setString(resultSetType);\n     }\n \n@@ -382,7 +383,6 @@ public String getResultSetType() {\n     }\n \n     public void setResultSetType(int resultSetType) {\n-        assertNotReadOnly();\n         this.resultSetType.set(resultSetType);\n     }\n \n@@ -391,7 +391,6 @@ public int getResultSetTypeConstant() {\n     }\n \n     public void setFetchDirection(String fetchDirection) {\n-        assertNotReadOnly();\n         this.fetchDirection.setString(fetchDirection);\n     }\n \n@@ -400,7 +399,6 @@ public String getFetchDirection() {\n     }\n \n     public void setFetchDirection(int fetchDirection) {\n-        assertNotReadOnly();\n         this.fetchDirection.set(fetchDirection);\n     }\n \n@@ -409,7 +407,6 @@ public int getFetchDirectionConstant() {\n     }\n \n     public void setEagerFetchMode(String eagerFetchMode) {\n-        assertNotReadOnly();\n         this.eagerFetchMode.setString(eagerFetchMode);\n     }\n \n@@ -418,7 +415,6 @@ public String getEagerFetchMode() {\n     }\n \n     public void setEagerFetchMode(int eagerFetchMode) {\n-        assertNotReadOnly();\n         this.eagerFetchMode.set(eagerFetchMode);\n     }\n \n@@ -427,7 +423,6 @@ public int getEagerFetchModeConstant() {\n     }\n \n     public void setSubclassFetchMode(String subclassFetchMode) {\n-        assertNotReadOnly();\n         this.subclassFetchMode.setString(subclassFetchMode);\n     }\n \n@@ -436,7 +431,6 @@ public String getSubclassFetchMode() {\n     }\n \n     public void setSubclassFetchMode(int subclassFetchMode) {\n-        assertNotReadOnly();\n         this.subclassFetchMode.set(subclassFetchMode);\n     }\n \n@@ -445,7 +439,6 @@ public int getSubclassFetchModeConstant() {\n     }\n \n     public void setLRSSize(String lrsSize) {\n-        assertNotReadOnly();\n         this.lrsSize.setString(lrsSize);\n     }\n \n@@ -454,7 +447,6 @@ public String getLRSSize() {\n     }\n \n     public void setLRSSize(int lrsSize) {\n-        assertNotReadOnly();\n         this.lrsSize.set(lrsSize);\n     }\n \n@@ -463,7 +455,6 @@ public int getLRSSizeConstant() {\n     }\n \n     public void setSynchronizeMappings(String synchronizeMappings) {\n-        assertNotReadOnly();\n         this.synchronizeMappings.set(synchronizeMappings);\n     }\n \n@@ -472,7 +463,6 @@ public String getSynchronizeMappings() {\n     }\n \n     public void setJDBCListeners(String jdbcListeners) {\n-        assertNotReadOnly();\n         jdbcListenerPlugins.setString(jdbcListeners);\n     }\n \n@@ -481,7 +471,6 @@ public String getJDBCListeners() {\n     }\n \n     public void setJDBCListeners(JDBCListener[] listeners) {\n-        assertNotReadOnly();\n         jdbcListenerPlugins.set(listeners);\n     }\n \n@@ -492,7 +481,6 @@ public void setJDBCListeners(JDBCListener[] listeners) {\n     }\n \n     public void setConnectionDecorators(String connectionDecorators) {\n-        assertNotReadOnly();\n         connectionDecoratorPlugins.setString(connectionDecorators);\n     }\n \n@@ -501,7 +489,6 @@ public String getConnectionDecorators() {\n     }\n \n     public void setConnectionDecorators(ConnectionDecorator[] decorators) {\n-        assertNotReadOnly();\n         connectionDecoratorPlugins.set(decorators);\n     }\n \n@@ -514,7 +501,6 @@ public void setConnectionDecorators(ConnectionDecorator[] decorators) {\n     }\n \n     public void setDBDictionary(String dbdictionary) {\n-        assertNotReadOnly();\n         dbdictionaryPlugin.setString(dbdictionary);\n     }\n \n@@ -529,7 +515,6 @@ public void setDBDictionary(DBDictionary dbdictionary) {\n             || connectionFactory2.get() != null)\n             throw new IllegalStateException();\n \n-        assertNotReadOnly();\n         dbdictionaryPlugin.set(dbdictionary);\n     }\n \n@@ -555,10 +540,10 @@ public DBDictionary getDBDictionaryInstance() {\n                 // the DB and use the connection metadata\n                 if (dbdictionary == null) {\n                     Log log = getLog(LOG_JDBC);\n-                    if (log.isInfoEnabled()) {\n+                    if (log.isTraceEnabled()) {\n                         Localizer loc = Localizer.forPackage\n                             (JDBCConfigurationImpl.class);\n-                        log.info(loc.get(\"connecting-for-dictionary\"));\n+                        log.trace(loc.get(\"connecting-for-dictionary\"));\n                     }\n \n                     // use the base connection factory rather than the\n@@ -576,7 +561,6 @@ public DBDictionary getDBDictionaryInstance() {\n     }\n \n     public void setUpdateManager(String updateManager) {\n-        assertNotReadOnly();\n         updateManagerPlugin.setString(updateManager);\n     }\n \n@@ -585,7 +569,6 @@ public String getUpdateManager() {\n     }\n \n     public void setUpdateManager(UpdateManager updateManager) {\n-        assertNotReadOnly();\n         updateManagerPlugin.set(updateManager);\n     }\n \n@@ -596,7 +579,6 @@ public UpdateManager getUpdateManagerInstance() {\n     }\n \n     public void setDriverDataSource(String driverDataSource) {\n-        assertNotReadOnly();\n         driverDataSourcePlugin.setString(driverDataSource);\n     }\n \n@@ -610,7 +592,6 @@ public DriverDataSource newDriverDataSourceInstance() {\n     }\n \n     public void setSchemaFactory(String schemaFactory) {\n-        assertNotReadOnly();\n         schemaFactoryPlugin.setString(schemaFactory);\n     }\n \n@@ -619,7 +600,6 @@ public String getSchemaFactory() {\n     }\n \n     public void setSchemaFactory(SchemaFactory schemaFactory) {\n-        assertNotReadOnly();\n         schemaFactoryPlugin.set(schemaFactory);\n     }\n \n@@ -630,7 +610,6 @@ public SchemaFactory getSchemaFactoryInstance() {\n     }\n \n     public void setSQLFactory(String sqlFactory) {\n-        assertNotReadOnly();\n         sqlFactoryPlugin.setString(sqlFactory);\n     }\n \n@@ -639,7 +618,6 @@ public String getSQLFactory() {\n     }\n \n     public void setSQLFactory(SQLFactory sqlFactory) {\n-        assertNotReadOnly();\n         sqlFactoryPlugin.set(sqlFactory);\n     }\n \n@@ -654,7 +632,6 @@ public String getMappingFactory() {\n     }\n \n     public void setMappingFactory(String mapping) {\n-        assertNotReadOnly();\n         mappingFactoryPlugin.setString(mapping);\n     }\n \n@@ -664,7 +641,6 @@ public MetaDataFactory newMetaDataFactoryInstance() {\n     }\n \n     public void setMappingDefaults(String mapping) {\n-        assertNotReadOnly();\n         this.mappingDefaultsPlugin.setString(mapping);\n     }\n \n@@ -673,7 +649,6 @@ public String getMappingDefaults() {\n     }\n \n     public void setMappingDefaults(MappingDefaults mapping) {\n-        assertNotReadOnly();\n         mappingDefaultsPlugin.set(mapping);\n     }\n \n@@ -719,7 +694,6 @@ public void setConnectionFactory(Object factory) {\n             return;\n \n         // override to configure data source\n-        assertNotReadOnly();\n         if (factory != null) {\n             // need to ensure it is decorated before we set the dict\n             DecoratingDataSource ds =\n@@ -779,7 +753,6 @@ public void setConnectionFactory2(Object factory) {\n             return;\n \n         // override to configure data source\n-        assertNotReadOnly();\n         if (factory != null) {\n             // need to ensure it is decorated before we set the dict\n             DecoratingDataSource ds = setupConnectionFactory((DataSource)"},{"sha":"84741971200e086ebd42746f1a0c6d7e115872b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSavepointManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.jdbc.kernel;\n \n+import java.io.IOException;\n+import java.io.NotSerializableException;\n+import java.io.ObjectOutputStream;\n import java.sql.Connection;\n import java.util.Collection;\n \n@@ -134,5 +137,10 @@ public void save(Collection states) {\n             AbstractJDBCSavepointManager.this.setDataStore(this);\n             super.save(states);\n         }\n+\n+        private void writeObject(ObjectOutputStream out)\n+            throws IOException {\n+            throw new NotSerializableException();\n+        }\n     }\n }"},{"sha":"93b2279a47ea49f036e7f8f71512df9c4bff6e31","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -45,7 +45,7 @@\n \n     protected int type = TYPE_DEFAULT;\n     protected Object current = null;\n-    private transient Transaction _outerTransaction;\n+    private static ThreadLocal _outerTransaction = new ThreadLocal();\n \n     /**\n      * Records the sequence type.\n@@ -155,7 +155,7 @@ else if (suspendInJTA()) {\n             try {\n                 TransactionManager tm = getConfiguration()\n                     .getManagedRuntimeInstance().getTransactionManager();\n-                _outerTransaction = tm.suspend();\n+                _outerTransaction.set(tm.suspend());\n                 tm.begin();\n                 return store.getConnection();\n             } catch (Exception e) {\n@@ -188,13 +188,14 @@ protected void closeConnection(Connection conn) {\n                 tm.commit();\n                 try { conn.close(); } catch (SQLException se) {}\n \n-                if (_outerTransaction != null)\n-                    tm.resume(_outerTransaction);\n+                Transaction outerTxn = (Transaction)_outerTransaction.get();\n+                if (outerTxn != null)\n+                    tm.resume(outerTxn);\n \n             } catch (Exception e) {\n                 throw new StoreException(e);\n             } finally {\n-                _outerTransaction = null;\n+                _outerTransaction.set(null);\n             }\n         } else {\n             try {"},{"sha":"bf527d0b217df2bd218e1f500bf86639a3c9852d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -181,13 +181,13 @@ protected Collection addException(Collection exceps, Exception err) {\n     /**\n      * Recursive method to insert the given instance, base class first.\n      */\n-    private void insert(OpenJPAStateManager sm, ClassMapping mapping,\n+    protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n         RowManager rowMgr, JDBCStore store, Collection customs)\n         throws SQLException {\n         Boolean custom = mapping.isCustomInsert(sm, store);\n         if (!Boolean.FALSE.equals(custom))\n             mapping.customInsert(sm, store);\n-        if (custom.equals(Boolean.TRUE))\n+        if (Boolean.TRUE.equals(custom))\n             return;\n \n         ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n@@ -228,7 +228,7 @@ private boolean bufferCustomInsert(Strategy strat, OpenJPAStateManager sm,\n     /**\n      * Recursive method to delete the given instance, base class last.\n      */\n-    private void delete(OpenJPAStateManager sm, ClassMapping mapping,\n+    protected void delete(OpenJPAStateManager sm, ClassMapping mapping,\n         RowManager rowMgr, JDBCStore store, Collection customs)\n         throws SQLException {\n         Boolean custom = mapping.isCustomDelete(sm, store);\n@@ -271,7 +271,7 @@ private boolean bufferCustomDelete(Strategy strat, OpenJPAStateManager sm,\n     /**\n      * Recursive method to update the given instance.\n      */\n-    private void update(OpenJPAStateManager sm, BitSet dirty,\n+    protected void update(OpenJPAStateManager sm, BitSet dirty,\n         ClassMapping mapping, RowManager rowMgr, JDBCStore store,\n         Collection customs) throws SQLException {\n         Boolean custom = mapping.isCustomUpdate(sm, store);\n@@ -300,7 +300,7 @@ private void update(OpenJPAStateManager sm, BitSet dirty,\n     /**\n      * Update version and discriminator indicators.\n      */\n-    private void updateIndicators(OpenJPAStateManager sm, ClassMapping mapping,\n+    protected void updateIndicators(OpenJPAStateManager sm, ClassMapping mapping,\n         RowManager rowMgr, JDBCStore store, Collection customs,\n         boolean versionUpdateOnly) throws SQLException {\n         while (mapping.getJoinablePCSuperclassMapping() != null)"},{"sha":"35a2a25d62564c3375c440d9979547368c5e4418","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.Connection;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.jdbc.sql.RowManager;\n+\n+/**\n+ * <P>Batch update manager that writes the SQL in object-level operation order. \n+ * This update manager initiates a BatchPreparedStatementManagerImpl which \n+ * will utilize the JDBC addBatch() and executeBatch() APIs to batch the \n+ * statements for performance improvement.</P>\n+ * <P>This is the default plug-in class for UpdateManager to support statement \n+ * batching. You can plug-in your own statement batch implementation through \n+ * the following property: \n+ * <PRE>\n+ *   < property name=\"openjpa.jdbc.UpdateManager\" \n+ *     value=\"org.apache.openjpa.jdbc.kernel.YourOperationOrderUpdateManager\" />   \n+ * </PRE></P>\n+ * @author Teresa Kan\n+ */\n+\n+public class BatchingConstraintUpdateManager extends ConstraintUpdateManager {\n+\n+    protected PreparedStatementManager newPreparedStatementManager(\n+        JDBCStore store, Connection conn) {\n+        int batchLimit = dict.getBatchLimit();\n+        return new BatchingPreparedStatementManagerImpl(store, conn,\n+            batchLimit);\n+    }\n+\n+    /*\n+     * Override this method to flush any remaining batched row in the\n+     * PreparedStatementManager.\n+     */\n+    protected Collection flush(RowManager rowMgr,\n+        PreparedStatementManager psMgr, Collection exceps) {\n+        Collection rtnCol = super.flush(rowMgr, psMgr, exceps);\n+        BatchingPreparedStatementManagerImpl bPsMgr =\n+            (BatchingPreparedStatementManagerImpl) psMgr;\n+        bPsMgr.flushBatch();\n+        return rtnCol;\n+    }\n+}"},{"sha":"24fcadf9b87e6fe6f4efb09ad3f1a6240bce3e58","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.Connection;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.jdbc.sql.RowManager;\n+\n+/**\n+ * <P>Batch update manager that writes the SQL in object-level operation order. \n+ * This update manager initiates a BatchPreparedStatementManagerImpl which \n+ * will utilize the JDBC addBatch() and executeBatch() APIs to batch the \n+ * statements for performance improvement.</P>\n+ * <P>This is the plug-in class for UpdateManager to support statement \n+ * batching for ordering. You can plug-in this statement batch implementation \n+ * through the following property: \n+ * <PRE>\n+ * < property name=\"openjpa.jdbc.UpdateManager\" \n+ *   value=\"org.apache.openjpa.jdbc.kernel.BatchingOperationOrderUpdateManager\"\n+ *    />   \n+ * </PRE></P>\n+ * @author Teresa Kan\n+ */\n+\n+public class BatchingOperationOrderUpdateManager extends\n+    OperationOrderUpdateManager {\n+\n+    protected PreparedStatementManager newPreparedStatementManager(\n+        JDBCStore store, Connection conn) {\n+        int batchLimit = dict.getBatchLimit();\n+        return new BatchingPreparedStatementManagerImpl(store, conn,\n+            batchLimit);\n+    }\n+    \n+    /*\n+     * Override this method to flush any remaining batched row in the\n+     * PreparedStatementManager.\n+     */\n+    protected Collection flush(RowManager rowMgr,\n+        PreparedStatementManager psMgr, Collection exceps) {\n+        Collection rtnCol = super.flush(rowMgr, psMgr, exceps);\n+        BatchingPreparedStatementManagerImpl bPsMgr = \n+            (BatchingPreparedStatementManagerImpl) psMgr;\n+        bPsMgr.flushBatch();\n+        return rtnCol;\n+    }\n+}"},{"sha":"f25cdff8f1e9630a1d46c9bc16217527c7643a98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"added","additions":250,"deletions":0,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.Statement;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.Row;\n+import org.apache.openjpa.jdbc.sql.RowImpl;\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.OptimisticException;\n+\n+/**\n+ * Batch prepared statement manager implementation. This prepared statement\n+ * manager will utilize the JDBC addBatch() and exceuteBatch() to batch the SQL\n+ * statements together to improve the execution performance.\n+ * \n+ * @author Teresa Kan\n+ */\n+\n+public class BatchingPreparedStatementManagerImpl extends\n+        PreparedStatementManagerImpl {\n+\n+    private final static Localizer _loc = Localizer\n+            .forPackage(BatchingPreparedStatementManagerImpl.class);\n+\n+    private String _batchedSql = null;\n+    private List _batchedRows = new ArrayList();\n+    private int _batchLimit;\n+    private boolean _disableBatch = false;\n+    private transient Log _log = null;\n+\n+    /**\n+     * Constructor. Supply connection.\n+     */\n+    public BatchingPreparedStatementManagerImpl(JDBCStore store,\n+        Connection conn, int batchLimit) {\n+        super(store, conn);\n+        _batchLimit = batchLimit;\n+        _log = store.getConfiguration().getLog(JDBCConfiguration.LOG_JDBC);\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"batch_limit\", String.valueOf(_batchLimit)));\n+    }\n+\n+    /**\n+     * Flush the given row immediately or deferred the flush in batch.\n+     */\n+    protected void flushAndUpdate(RowImpl row) throws SQLException {\n+        if (isBatchDisabled(row)) {\n+            // if there were some statements batched before, then\n+            // we need to flush them out first before processing the\n+            // current non batch process.\n+            flushBatch();\n+\n+            super.flushAndUpdate(row);\n+        } else {\n+            // process the SQL statement, either execute it immediately or\n+            // batch it for later execution.\n+            String sql = row.getSQL(_dict);\n+            if (_batchedSql == null) {\n+                // brand new SQL\n+                _batchedSql = sql;\n+            } else if (!sql.equals(_batchedSql)) {\n+                // SQL statements changed.\n+                switch (_batchedRows.size()) {\n+                case 0:\n+                    break;\n+                case 1:\n+                    // single entry in cache, direct SQL execution. \n+                    super.flushAndUpdate((RowImpl) _batchedRows.get(0));\n+                    _batchedRows.clear();\n+                    break;\n+                default:\n+                    // flush all entries in cache in batch.\n+                    flushBatch();\n+                }\n+                _batchedSql = sql;\n+            }\n+            _batchedRows.add(row);\n+        }\n+    }\n+\n+    /*\n+     * Compute if batching is disabled, based on values of batch limit\n+     * and database characteristics.\n+     */\n+    private boolean isBatchDisabled(RowImpl row) {\n+        boolean rtnVal = true;\n+        if (_batchLimit != 0 && !_disableBatch) {\n+            String sql = row.getSQL(_dict);\n+            OpenJPAStateManager sm = row.getPrimaryKey();\n+            ClassMapping cmd = null;\n+            if (sm != null)\n+                cmd = (ClassMapping) sm.getMetaData();\n+            Column[] autoAssign = null;\n+            if (row.getAction() == Row.ACTION_INSERT)\n+                autoAssign = row.getTable().getAutoAssignedColumns();\n+            // validate batch capability\n+            _disableBatch = _dict\n+                .validateBatchProcess(row, autoAssign, sm, cmd);\n+            rtnVal = _disableBatch;\n+        }\n+        return rtnVal;\n+    }\n+    \n+    /**\n+     * flush all cached up statements to be executed as a single or batched\n+     * prepared statements.\n+     */\n+    protected void flushBatch() {\n+        if (_batchedSql != null && _batchedRows.size() > 0) {\n+            PreparedStatement ps = null;\n+            try {\n+                RowImpl onerow = null;\n+                ps = _conn.prepareStatement(_batchedSql);\n+                if (_batchedRows.size() == 1) {\n+                    // execute a single row.\n+                    onerow = (RowImpl) _batchedRows.get(0);\n+                    flushSingleRow(onerow, ps);\n+                } else {\n+                    // cache has more than one rows, execute as batch.\n+                    int count = 0;\n+                    int batchedRowsBaseIndex = 0;\n+                    Iterator itr = _batchedRows.iterator();\n+                    while (itr.hasNext()) {\n+                        onerow = (RowImpl) itr.next();\n+                        if (_batchLimit == 1) {\n+                            flushSingleRow(onerow, ps);\n+                        } else {\n+                            if (count < _batchLimit || _batchLimit == -1) {\n+                                onerow.flush(ps, _dict, _store);\n+                                ps.addBatch();\n+                                count++;\n+                            } else {\n+                                // reach the batchLimit, execute the batch\n+                                int[] rtn = ps.executeBatch();\n+                                checkUpdateCount(rtn, batchedRowsBaseIndex);\n+\n+                                batchedRowsBaseIndex += _batchLimit;\n+\n+                                onerow.flush(ps, _dict, _store);\n+                                ps.addBatch();\n+                                // reset the count to 1 for new batch\n+                                count = 1;\n+                            }\n+                        }\n+                    }\n+                    // end of the loop, execute the batch\n+                    int[] rtn = ps.executeBatch();\n+                    checkUpdateCount(rtn, batchedRowsBaseIndex);\n+                }\n+            } catch (SQLException se) {\n+                SQLException sqex = se.getNextException();\n+                if (sqex == null)\n+                    sqex = se;\n+                throw SQLExceptions.getStore(sqex, ps, _dict);\n+            } finally {\n+                _batchedSql = null;\n+                _batchedRows.clear();\n+                if (ps != null) {\n+                    try {\n+                        ps.close();\n+                    } catch (SQLException sqex) {\n+                        throw SQLExceptions.getStore(sqex, ps, _dict);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Execute an update of a single row.\n+     */\n+    private void flushSingleRow(RowImpl row, PreparedStatement ps)\n+        throws SQLException {\n+        row.flush(ps, _dict, _store);\n+        int count = ps.executeUpdate();\n+        if (count != 1) {\n+            Object failed = row.getFailedObject();\n+            if (failed != null)\n+                _exceptions.add(new OptimisticException(failed));\n+            else if (row.getAction() == Row.ACTION_INSERT)\n+                throw new SQLException(_loc.get(\"update-failed-no-failed-obj\",\n+                    String.valueOf(count), row.getSQL(_dict)).getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Process executeBatch function array of return counts.\n+     */\n+    private void checkUpdateCount(int[] count, int batchedRowsBaseIndex)\n+        throws SQLException {\n+        int cnt = 0;\n+        Object failed = null;\n+        for (int i = 0; i < count.length; i++) {\n+            cnt = count[i];\n+            RowImpl row = (RowImpl) _batchedRows.get(batchedRowsBaseIndex + i);\n+            switch (cnt) {\n+            case Statement.EXECUTE_FAILED: // -3\n+                failed = row.getFailedObject();\n+                if (failed != null || row.getAction() == Row.ACTION_UPDATE)\n+                    _exceptions.add(new OptimisticException(failed));\n+                else if (row.getAction() == Row.ACTION_INSERT)\n+                    throw new SQLException(_loc.get(\n+                        \"update-failed-no-failed-obj\",\n+                        String.valueOf(count[i]), _batchedSql).getMessage());\n+                break;\n+            case Statement.SUCCESS_NO_INFO: // -2\n+                if (_log.isTraceEnabled())\n+                    _log.trace(_loc.get(\"batch_update_info\",\n+                        String.valueOf(cnt), _batchedSql).getMessage());\n+                break;\n+            case 0: // no row is inserted, treats it as failed\n+                // case\n+                failed = row.getFailedObject();\n+                if ((failed != null || row.getAction() == Row.ACTION_INSERT))\n+                    throw new SQLException(_loc.get(\n+                        \"update-failed-no-failed-obj\",\n+                        String.valueOf(count[i]), _batchedSql).getMessage());\n+            }\n+        }\n+    }\n+}"},{"sha":"00533d390daebc9b8922f4573668c065633849ce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -168,24 +168,27 @@ private String getKey(ClassMapping mapping, boolean db) {\n      */\n     public static void main(String[] args) throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"clstable-seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return ClassTableJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"clstable-seq-usage\"));\n     }\n \n     /**\n      * Run the tool. Returns false if invalid options were given.\n      */\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts) throws Exception {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         String action = opts.removeProperty(\"action\", \"a\", null);\n         Configurations.populateConfiguration(conf, opts);\n         return run(conf, args, action, null, null);"},{"sha":"317671ef7aab471d6fd2c8a474fd04c5b84564b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -260,4 +260,38 @@ public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n             throw translate(re);\n         }\n     }\n+\n+    public Set getFetchInnerJoins() {\n+        try {\n+            return getJDBCDelegate().getFetchInnerJoins();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean hasFetchInnerJoin(String field) {\n+        try {\n+            return getJDBCDelegate().hasFetchInnerJoin(field);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoin(String field) {\n+        try {\n+            getJDBCDelegate().addFetchInnerJoin(field);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields) {\n+        try {\n+            getJDBCDelegate().addFetchInnerJoins(fields);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"e0b2c0be4a18cea343dbbc46a7c29ab76863f053","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","previous_filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/kernel/JDBC3SavepointManager.java"},{"sha":"54586274be79664e3cf2242abf2cb8271db12611","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":10,"deletions":21,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -22,10 +22,12 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Properties;\n+import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.MappingTool;\n import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Bootstrap;\n@@ -65,28 +67,15 @@ public static JDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n      * Invoked from {@link Bootstrap#getBrokerFactory}.\n      */\n     public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n-        JDBCBrokerFactory factory = (JDBCBrokerFactory) getPooledFactory\n-            (cp.getProperties());\n+        Map props = cp.getProperties();\n+        Object key = toPoolKey(props);\n+        JDBCBrokerFactory factory = (JDBCBrokerFactory)\n+            getPooledFactoryForKey(key);\n         if (factory != null)\n             return factory;\n \n         factory = newInstance(cp);\n-        factory.pool();\n-        return factory;\n-    }\n-\n-    /**\n-     * Factory method for constructing a factory from a configuration.\n-     */\n-    public static synchronized JDBCBrokerFactory getInstance\n-        (JDBCConfiguration conf) {\n-        JDBCBrokerFactory factory = (JDBCBrokerFactory) getPooledFactory\n-            (conf.toProperties(false));\n-        if (factory != null)\n-            return factory;\n-\n-        factory = new JDBCBrokerFactory(conf);\n-        factory.pool();\n+        pool(key, factory);\n         return factory;\n     }\n \n@@ -139,14 +128,14 @@ protected BrokerImpl newBrokerImpl(String user, String pass) {\n     /**\n      * Synchronize the mappings of the classes listed in the configuration.\n      */\n-    private void synchronizeMappings(ClassLoader loader) {\n+    protected void synchronizeMappings(ClassLoader loader) {\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         String action = conf.getSynchronizeMappings();\n         if (StringUtils.isEmpty(action))\n             return;\n \n-        Collection classes = conf.getMetaDataRepositoryInstance().\n-            loadPersistentTypes(false, loader);\n+        MappingRepository repo = conf.getMappingRepositoryInstance();\n+        Collection classes = repo.loadPersistentTypes(false, loader);\n         if (classes.isEmpty())\n             return;\n "},{"sha":"077e61ba5396fc75cf6fa48339668088224e3060","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -207,4 +207,38 @@\n      * Convenience method to cast traversal to store-specific type.\n      */\n     public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n+\n+    /**\n+     * Returns the names of the inner fetch joins that this component will use\n+     * when loading objects. Defaults to the empty set.  This set is not\n+     * thread safe.\n+     *\n+     * @since 1.0.3\n+     */\n+    public Set getFetchInnerJoins();\n+\n+    /**\n+     * Return true if the given fully-qualified inner fetch join has been added.\n+     *\n+     * @since 1.0.3\n+     */\n+    public boolean hasFetchInnerJoin(String field);\n+\n+    /**\n+     * Adds <code>field</code> to the set of fully-qualified field names to\n+     * eagerly join when loading objects. Each class can have at most\n+     * one to-many eagerly joined fields.\n+     *\n+     * @since 1.0.3\n+     */\n+    public JDBCFetchConfiguration addFetchInnerJoin(String field);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * eagerly join when loading objects. Each class can have at most\n+     * one to-many eagerly joined fields.\n+     *\n+     * @since 1.0.3\n+     */\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields);\n }"},{"sha":"a00b5a31ed51486c07e6365c6c50ee879c3ab155","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":37,"deletions":3,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -61,24 +61,25 @@\n     /**\n      * Configurable JDBC state shared throughout a traversal chain.\n      */\n-    private static class JDBCConfigurationState implements Serializable {\n+    protected static class JDBCConfigurationState implements Serializable {\n         public int eagerMode = 0;\n         public int subclassMode = 0;\n         public int type = 0;\n         public int direction = 0;\n         public int size = 0;\n         public int syntax = 0;\n         public Set joins = null;\n+        public Set fetchInnerJoins = null;\n         public int isolationLevel = -1;\n     }\n \n-    private final JDBCConfigurationState _state;\n+    protected final JDBCConfigurationState _state;\n \n     public JDBCFetchConfigurationImpl() {\n         this(null, null);\n     }\n \n-    private JDBCFetchConfigurationImpl(ConfigurationState state, \n+    protected JDBCFetchConfigurationImpl(ConfigurationState state, \n         JDBCConfigurationState jstate) {\n         super(state);\n         _state = (jstate == null) ? new JDBCConfigurationState() : jstate;\n@@ -345,4 +346,37 @@ private JDBCConfiguration getJDBCConfiguration() {\n             return null;\n         return (JDBCConfiguration) conf;\n     }\n+\n+    public Set getFetchInnerJoins() {\n+        return (_state.fetchInnerJoins == null) ? Collections.EMPTY_SET\n+            : _state.fetchInnerJoins;\n+    }\n+\n+    public boolean hasFetchInnerJoin(String field) {\n+        return _state.fetchInnerJoins != null &&\n+            _state.fetchInnerJoins.contains(field);\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoin(String join) {\n+        if (StringUtils.isEmpty(join))\n+            throw new UserException(_loc.get(\"null-join\"));\n+        \n+        lock();\n+        try {\n+            if (_state.fetchInnerJoins == null)\n+                _state.fetchInnerJoins = new HashSet();\n+            _state.fetchInnerJoins.add(join);\n+        } finally {\n+            unlock();\n+        }\n+        return this;\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection joins) {\n+        if (joins == null || joins.isEmpty())\n+            return this;\n+        for (Iterator itr = joins.iterator(); itr.hasNext();)\n+            addFetchInnerJoin((String) itr.next());\n+        return this;\n+    }\n }"},{"sha":"003f70d4ac14f5d2b72b6c0e851ee6a7e90fd572","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":45,"deletions":10,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -105,8 +105,12 @@ public StoreContext getContext() {\n     }\n \n     public void setContext(StoreContext ctx) {\n+        setContext(ctx, (JDBCConfiguration) ctx.getConfiguration());\n+    }\n+    \n+    public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n         _ctx = ctx;\n-        _conf = (JDBCConfiguration) ctx.getConfiguration();\n+        _conf = conf;\n         _dict = _conf.getDBDictionaryInstance();\n         _sql = _conf.getSQLFactoryInstance();\n \n@@ -211,6 +215,10 @@ public Connection getConnection() {\n         connect(true);\n         return _conn;\n     }\n+    \n+    protected DataSource getDataSource() {\n+    \treturn _ds;\n+    }\n \n     public boolean exists(OpenJPAStateManager sm, Object context) {\n         // add where conditions on base class to avoid joins if subclass\n@@ -264,7 +272,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n     /**\n      * Initialize a newly-loaded instance.\n      */\n-    private boolean initializeState(OpenJPAStateManager sm, PCState state,\n+    protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n         JDBCFetchConfiguration fetch, ConnectionInfo info)\n         throws ClassNotFoundException, SQLException {\n         Object oid = sm.getObjectId();\n@@ -286,7 +294,7 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n                     Select.SUBS_EXACT);\n                 if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n                     return false;\n-                if (res != null && !res.next())\n+                if (isEmptyResult(res))\n                     return false;\n             } else {\n                 ClassMapping[] mappings = mapping.\n@@ -303,16 +311,14 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n                 } else\n                     res = getInitializeStateUnionResult(sm, mapping, mappings,\n                         fetch);\n-                if (res != null && !res.next())\n+                if (isEmptyResult(res))\n                     return false;\n             }\n \n             // figure out what type of object this is; the state manager\n             // only guarantees to provide a base class\n             Class type;\n-            if (res == null)\n-                type = mapping.getDescribedType();\n-            else {\n+            if ((type = getType(res, mapping)) == null) {\n                 if (res.getBaseMapping() != null)\n                     mapping = res.getBaseMapping();\n                 res.startDataRequest(mapping.getDiscriminator());\n@@ -334,14 +340,43 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n                 // re-get the mapping in case the instance was a subclass\n                 mapping = (ClassMapping) sm.getMetaData();\n                 load(mapping, sm, fetch, res);\n-                mapping.getVersion().afterLoad(sm, this);\n+                getVersion(mapping, sm, res);\n             }\n             return true;\n         } finally {\n             if (res != null && (info == null || res != info.result))\n                 res.close();\n         }\n     }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of getting version from the result set.\n+     */\n+    protected void getVersion(ClassMapping mapping, OpenJPAStateManager sm,\n+        Result res) throws SQLException {\n+        mapping.getVersion().afterLoad(sm, this);\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of checking whether the result set is empty or not.\n+     */\n+    protected boolean isEmptyResult(Result res) throws SQLException {\n+        if (res != null && !res.next())\n+            return true;\n+        return false;\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of getting type from the result set.\n+     */\n+    protected Class getType(Result res, ClassMapping mapping){\n+        if (res == null)\n+            return mapping.getDescribedType();\n+        return null;\n+    }\n \n     /**\n      * Allow the mapping to custom load data. Return null if the mapping\n@@ -419,7 +454,7 @@ private boolean selectPrimaryKey(OpenJPAStateManager sm,\n         sel.wherePrimaryKey(sm.getObjectId(), base, this);\n         Result exists = sel.execute(this, fetch);\n         try {\n-            if (!exists.next())\n+            if (isEmptyResult(exists))\n                 return false;\n \n             // record locked?\n@@ -470,7 +505,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n                 sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n                 res = sel.execute(this, jfetch, lockLevel);\n                 try {\n-                    if (!res.next())\n+                 \tif (isEmptyResult(res))\n                         return false;\n                     load(mapping, sm, jfetch, res);\n                 } finally {"},{"sha":"8e1f589678156437bf53c4567d6e0f917f71263c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":32,"deletions":11,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -28,7 +28,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Iterator;\n \n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n@@ -63,7 +62,6 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n-import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n \n@@ -150,6 +148,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n         }\n+        if (exps[0].fetchInnerPaths != null)\n+            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n \n         int eager = calculateEagerMode(exps[0], range.start, range.end);\n         int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n@@ -422,20 +422,20 @@ private int calculateEagerMode(QueryExpressions exps, long start,\n     protected Number executeDelete(Executor ex, ClassMetaData base,\n         ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n         QueryExpressions[] exps, Object[] params) {\n-        return executeBulkOperation(ex, base, metas, subclasses, facts, exps,\n+        return executeBulkOperation(metas, subclasses, facts, exps,\n             params, null);\n     }\n \n     protected Number executeUpdate(Executor ex, ClassMetaData base,\n         ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n         QueryExpressions[] exps, Object[] params) {\n-        return executeBulkOperation(ex, base, metas, subclasses, facts, exps,\n+        return executeBulkOperation(metas, subclasses, facts, exps,\n             params, exps[0].updates);\n     }\n \n-    private Number executeBulkOperation(Executor ex, ClassMetaData base,\n-        ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n-        QueryExpressions[] exps, Object[] params, Map updates) {\n+    private Number executeBulkOperation(ClassMetaData[] metas,\n+        boolean subclasses, ExpressionFactory[] facts, QueryExpressions[] exps,\n+        Object[] params, Map updates) {\n         // we cannot execute a bulk delete statement when have mappings in\n         // multiple tables, so indicate we want to use in-memory with null\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n@@ -501,15 +501,16 @@ private Number executeBulkOperation(Executor ex, ClassMetaData base,\n             for (int i = 0; i < sql.length; i++) {\n                 stmnt = null;\n                 try {\n-                    stmnt = sql[i].prepareStatement(conn);\n-                    count += stmnt.executeUpdate();\n+                    stmnt = prepareStatement(conn, sql[i]);\n+                    count += executeUpdate(conn, stmnt, sql[i], isUpdate);                    \n+                } catch (SQLException se) {\n+                    throw SQLExceptions.getStore(se, sql[i].getSQL(), \n+                        _store.getDBDictionary());\n                 } finally {\n                     if (stmnt != null)\n                         try { stmnt.close(); } catch (SQLException se) {}\n                 }\n             }\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, ctx, _store.getDBDictionary());\n         } finally {\n             try { conn.close(); } catch (SQLException se) {}\n         }\n@@ -600,6 +601,8 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n         }\n+        if (exps[0].fetchInnerPaths != null)\n+            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n \n         int eager = calculateEagerMode(exps[0], range.start, range.end);\n         eager = Math.min(eager, JDBCFetchConfiguration.EAGER_JOIN);\n@@ -650,4 +653,22 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n             sql[i] = ((Select) sels.get(i)).toSelect(false, fetch).getSQL(true);\n         return sql;\n     }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing update.\n+     */\n+    protected int executeUpdate(Connection conn, PreparedStatement stmnt, \n+        SQLBuffer sqlBuf, boolean isUpdate) throws SQLException {\n+        return stmnt.executeUpdate();\n+    }\n+            \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n+        throws SQLException {\n+        return sql.prepareStatement(conn);\n+    }    \n }"},{"sha":"346e4e474a2f3e73e11e9f4cc28a1d972fe32cfe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -419,6 +419,13 @@ protected Object getSQLObjectInternal(Object obj, Map map, Joins joins)\n             return _res.getSQLObject(obj, map);\n         }\n \n+        protected Object getStreamInternal(JDBCStore store, Object obj,\n+            int metaTypeCode, Object arg, Joins joins) throws SQLException {\n+            if (obj instanceof Column)\n+                return _res.getObject((Column) obj, arg, joins);\n+            return _res.getObject(obj, metaTypeCode, arg);\n+        }\n+        \n         protected Ref getRefInternal(Object obj, Map map, Joins joins)\n             throws SQLException {\n             if (obj instanceof Column)"},{"sha":"cf0621618fc44dd29b79c50e3a0ac937426224ad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -315,14 +315,20 @@ private long getSequence(Connection conn)\n     public static void main(String[] args)\n         throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"native-seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return NativeJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"native-seq-usage\"));\n     }\n \n     /**\n@@ -331,9 +337,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws Exception {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         String action = opts.removeProperty(\"action\", \"a\", null);\n         Configurations.populateConfiguration(conf, opts);\n         return run(conf, args, action);"},{"sha":"e08fbdea961159cc2ac9b6fbf09f82f00c762f87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":54,"deletions":12,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -132,18 +132,10 @@ private void lockRow(OpenJPAStateManager sm, int timeout) {\n         PreparedStatement stmnt = null;\n         ResultSet rs = null;\n         try {\n-            stmnt = sql.prepareStatement(conn);\n-            if (timeout >= 0 && dict.supportsQueryTimeout) {\n-                if (timeout < 1000) {\n-                    timeout = 1000;\n-                    if (log.isWarnEnabled())\n-                        log.warn(_loc.get(\"millis-query-timeout\"));\n-                }\n-                stmnt.setQueryTimeout(timeout / 1000);\n-            }\n-            rs = stmnt.executeQuery();\n-            if (!rs.next())\n-                throw new LockException(sm.getManagedInstance());\n+            stmnt = prepareStatement(conn, sql);\n+            setTimeout(stmnt, timeout);\n+            rs = executeQuery(conn, stmnt, sql);\n+            checkLock(rs, sm);\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, dict);\n         } finally {\n@@ -168,4 +160,54 @@ private void ensureStoreManagerTransaction() {\n                 log.info(_loc.get(\"start-trans-for-lock\"));\n         }\n     }\n+    \n+    public JDBCStore getStore() {\n+        return _store;\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n+        throws SQLException {\n+        return sql.prepareStatement(conn);\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of setting query timeout.\n+     */\n+    protected void setTimeout(PreparedStatement stmnt, int timeout)\n+        throws SQLException {\n+        DBDictionary dict = _store.getDBDictionary();\n+        if (timeout >= 0 && dict.supportsQueryTimeout) {\n+            if (timeout < 1000) {\n+                timeout = 1000;\n+                if (log.isWarnEnabled())\n+                    log.warn(_loc.get(\"millis-query-timeout\"));\n+            }\n+            stmnt.setQueryTimeout(timeout / 1000);\n+        }\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing query.\n+     */\n+    protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt, \n+        SQLBuffer sql) throws SQLException {\n+        return stmnt.executeQuery();\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of checking lock from the result set.\n+     */\n+    protected void checkLock(ResultSet rs, OpenJPAStateManager sm)\n+        throws SQLException { \n+        if (!rs.next())\n+            throw new LockException(sm.getManagedInstance());\n+        return;\n+    }\n }"},{"sha":"87908437f65898459fe10788eaf2b020dff15cba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":51,"deletions":16,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -32,6 +32,7 @@\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n \n@@ -85,14 +86,38 @@ protected void flushInternal(RowImpl row) throws SQLException {\n         if (row.getAction() == Row.ACTION_INSERT)\n             autoAssign = row.getTable().getAutoAssignedColumns();\n \n+        flushAndUpdate(row);\n+\n+        // set auto assign values\n+        if (autoAssign != null && autoAssign.length > 0\n+            && row.getPrimaryKey() != null) {\n+            OpenJPAStateManager sm = row.getPrimaryKey();\n+            ClassMapping mapping = (ClassMapping) sm.getMetaData();\n+            Object val;\n+            for (int i = 0; i < autoAssign.length; i++) {\n+                val = _dict.getGeneratedKey(autoAssign[i], _conn);\n+                mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n+                    _store, autoAssign[i], val);\n+            }\n+            sm.setObjectId(\n+                ApplicationIds.create(sm.getPersistenceCapable(), mapping));\n+        }\n+    }\n+\n+    /**\n+     * Flush the given row immediately. \n+     */\n+    protected void flushAndUpdate(RowImpl row)\n+        throws SQLException {\n         // prepare statement\n         String sql = row.getSQL(_dict);\n-        PreparedStatement stmnt = _conn.prepareStatement(sql);\n+        PreparedStatement stmnt = prepareStatement(sql);\n \n         // setup parameters and execute statement\n-        row.flush(stmnt, _dict, _store);\n+        if (stmnt != null)\n+            row.flush(stmnt, _dict, _store);\n         try {\n-            int count = stmnt.executeUpdate();\n+            int count = executeUpdate(stmnt, sql, row);\n             if (count != 1) {\n                 Object failed = row.getFailedObject();\n                 if (failed != null)\n@@ -105,23 +130,33 @@ else if (row.getAction() == Row.ACTION_INSERT)\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, row.getFailedObject(), _dict);\n         } finally {\n-            try { stmnt.close(); } catch (SQLException se) {}\n-        }\n-\n-        // set auto assign values\n-        if (autoAssign != null && autoAssign.length > 0\n-            && row.getPrimaryKey() != null) {\n-            OpenJPAStateManager sm = row.getPrimaryKey();\n-            ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-            Object val;\n-            for (int i = 0; i < autoAssign.length; i++) {\n-                val = _dict.getGeneratedKey(autoAssign[i], _conn);\n-                mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n-                    _store, autoAssign[i], val);\n+            if (stmnt != null) {\n+                try {\n+                    stmnt.close();\n+                } catch (SQLException se) {\n+                }\n             }\n         }\n     }\n \n     public void flush() {\n     }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing update.\n+     */\n+    protected int executeUpdate(PreparedStatement stmnt, String sql, \n+        RowImpl row) throws SQLException {\n+        return stmnt.executeUpdate();\n+    }\n+        \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(String sql)\n+        throws SQLException {\n+        return _conn.prepareStatement(sql);\n+    }\n }"},{"sha":"81b2cb2e5494b63a1c51c33cc4b084ad4fba4052","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":103,"deletions":26,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -23,6 +23,7 @@\n import java.io.StringReader;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -157,7 +158,7 @@ public boolean requiresParameterDeclarations() {\n     /**\n      * Executes the filter as a SQL query.\n      */\n-    private static class SQLExecutor\n+    protected static class SQLExecutor\n         extends AbstractExecutor {\n \n         private final ClassMetaData _meta;\n@@ -183,8 +184,7 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n             String sql = StringUtils.trimToNull(ctx.getQueryString());\n             if (sql == null)\n                 throw new UserException(_loc.get(\"no-sql\"));\n-            _select = sql.length() > 6\n-                && sql.substring(0, 6).equalsIgnoreCase(\"select\");\n+            _select = q.getStore().getDBDictionary().isSelect(sql);\n             _call = sql.length() > 4\n                 && sql.substring(0, 4).equalsIgnoreCase(\"call\");\n         }\n@@ -215,32 +215,40 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n                 paramList = Collections.EMPTY_LIST;\n \n             SQLBuffer buf = new SQLBuffer(dict).append(sql);\n+            \n+            // we need to make sure we have an active store connection\n+            store.getContext().beginStore();\n             Connection conn = store.getConnection();\n             JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)\n                 q.getContext().getFetchConfiguration();\n \n             PreparedStatement stmnt = null;\n             try {\n-                stmnt = buf.prepareCall(conn);\n+                stmnt = prepareCall(conn, buf);\n \n-                int index = 0;\n-                for (Iterator i = paramList.iterator(); i.hasNext();)\n-                    dict.setUnknown(stmnt, ++index, i.next(), null);\n-                \n-                int count = 0;\n-                if (_call && stmnt.execute() == false) {\n-                    count = stmnt.getUpdateCount();\n-                }\n-                else {\n-                    // native insert, update, delete\n-                    count = stmnt.executeUpdate();\n-                }\n+                buf.setParameters(paramList);\n+                if (stmnt != null)\n+                    buf.setParameters(stmnt);\n+\n+                int count = executeUpdate(store, conn, stmnt, buf);  \n+              \n                 return Numbers.valueOf(count);\n             } catch (SQLException se) {\n-                if (stmnt != null)\n-                    try { stmnt.close(); } catch (SQLException se2) {}\n-                try { conn.close(); } catch (SQLException se2) {}\n                 throw SQLExceptions.getStore(se, dict);\n+            } finally {\n+                if (stmnt != null) {\n+                    try {\n+                        stmnt.close();\n+                    } catch (SQLException se) {\n+                        // safe to ignore\n+                    } finally {\n+                        stmnt = null;\n+                    }\n+                }\n+                try {\n+                    conn.close();\n+                } catch (SQLException se) {\n+                }\n             }\n         }\n \n@@ -271,20 +279,23 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n             try {\n                 // use the right method depending on sel vs. proc, lrs setting\n                 if (_select && !range.lrs)\n-                    stmnt = buf.prepareStatement(conn);\n+                    stmnt = prepareStatement(conn, buf);\n                 else if (_select)\n-                    stmnt = buf.prepareStatement(conn, fetch, -1, -1);\n+                    stmnt = prepareStatement(conn, buf, fetch, -1, -1);\n                 else if (!range.lrs)\n-                    stmnt = buf.prepareCall(conn);\n+                    stmnt = prepareCall(conn, buf);\n                 else\n-                    stmnt = buf.prepareCall(conn, fetch, -1, -1);\n+                    stmnt = prepareCall(conn, buf, fetch, -1, -1);\n \n                 int index = 0;\n-                for (Iterator i = paramList.iterator(); i.hasNext();)\n+                for (Iterator i = paramList.iterator(); i.hasNext() && \n+                    stmnt != null;)\n                     dict.setUnknown(stmnt, ++index, i.next(), null);\n \n-                ResultSetResult res = new ResultSetResult(conn, stmnt,\n-                    stmnt.executeQuery(), store);\n+                ResultSet rs = executeQuery(store, conn, stmnt, buf, paramList);\n+                ResultSetResult res = stmnt != null ? \n+                    new ResultSetResult(conn, stmnt, rs, store) :\n+                    new ResultSetResult(conn, rs, dict);\n                 if (_resultMapping != null)\n                     rop = new MappedQueryResultObjectProvider(_resultMapping,\n                         store, fetch, res);\n@@ -314,5 +325,71 @@ else if (q.getContext().getCandidateType() != null)\n         public boolean isPacking(StoreQuery q) {\n             return q.getContext().getCandidateType() == null;\n         }\n+        \n+        /**\n+         * This method is to provide override for non-JDBC or JDBC-like \n+         * implementation of preparing call statement.\n+         */\n+        protected PreparedStatement prepareCall(Connection conn, SQLBuffer buf)\n+            throws SQLException {\n+            return buf.prepareCall(conn);            \n+        }\n+        \n+        /**\n+         * This method is to provide override for non-JDBC or JDBC-like \n+         * implementation of executing update.\n+         */\n+        protected int executeUpdate(JDBCStore store, Connection conn, \n+            PreparedStatement stmnt, SQLBuffer buf) \n+            throws SQLException {\n+            int count = 0;\n+            if (_call && stmnt.execute() == false) {\n+                count = stmnt.getUpdateCount();\n+            }\n+            else {\n+                // native insert, update, delete\n+                count = stmnt.executeUpdate();\n+            }\n+            return count;\n+        }\n+        \n+        /**\n+         * This method is to provide override for non-JDBC or JDBC-like \n+         * implementation of preparing call statement.\n+         */\n+        protected PreparedStatement prepareCall(Connection conn, SQLBuffer buf,\n+            JDBCFetchConfiguration fetch, int rsType, int rsConcur)\n+            throws SQLException {\n+            return buf.prepareCall(conn, fetch, rsType, rsConcur);  \n+        }\n+\n+        /**\n+         * This method is to provide override for non-JDBC or JDBC-like \n+         * implementation of preparing statement.\n+         */\n+        protected PreparedStatement prepareStatement(Connection conn, \n+            SQLBuffer buf) throws SQLException {\n+            return buf.prepareStatement(conn);\n+        }\n+        \n+        /**\n+         * This method is to provide override for non-JDBC or JDBC-like \n+         * implementation of preparing statement.\n+         */\n+        protected PreparedStatement prepareStatement(Connection conn, \n+            SQLBuffer buf, JDBCFetchConfiguration fetch, int rsType,\n+            int rsConcur) throws SQLException {\n+            return buf.prepareStatement(conn, fetch, rsType, rsConcur);\n+        }\n+        \n+        /**\n+         * This method is to provide override for non-JDBC or JDBC-like \n+         * implementation of executing query.\n+         */\n+        protected ResultSet executeQuery(JDBCStore store, Connection conn,\n+            PreparedStatement stmnt, SQLBuffer buf, List paramList)\n+            throws SQLException {\n+            return stmnt.executeQuery();\n+        }\n     }\n }"},{"sha":"af84c4f096bcabef73e18ca091ef8452fac19a70","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":127,"deletions":44,"changes":171,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -24,6 +24,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.HashMap;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n@@ -36,6 +37,7 @@\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.lib.conf.Configurable;\n@@ -77,14 +79,15 @@\n     private transient Log _log = null;\n     private int _alloc = 50;\n     private int _intValue = 1;\n-    private final Status _stat = new Status();\n+    private final HashMap _stat = new HashMap();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n+    private int _schemasIdx = 0;    \n \n     /**\n      * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n@@ -212,20 +215,36 @@ public void endConfiguration() {\n         buildTable();\n     }\n     \n-    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n-        // table already exists?\n-        if (group.isKnownTable(_table))\n-            return;\n-\n-        String schemaName = Strings.getPackageName(_table);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n \n-        // create table in this group\n-        Schema schema = group.getSchema(schemaName);\n-        if (schema == null)\n-            schema = group.addSchema(schemaName);\n-        schema.importTable(_pkColumn.getTable());\n+    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n+        // Since the table is created by openjpa internally\n+        // we can create the table for each schema within the PU\n+        // in here.\n+        \n+        Schema[] schemas = group.getSchemas();\n+        for (int i = 0; i < schemas.length; i++) {\n+            String schemaName = Strings.getPackageName(_table);\n+            if (schemaName.length() == 0)\n+                schemaName = Schemas.getNewTableSchema(_conf);\n+            if (schemaName == null)\n+                schemaName = schemas[i].getName();\n+\n+            // create table in this group\n+            Schema schema = group.getSchema(schemaName);\n+            if (schema == null)\n+                schema = group.addSchema(schemaName);\n+            \n+            schema.importTable(_pkColumn.getTable());\n+            // we need to reset the table name in the column with the\n+            // fully qualified name for matching the table name from the\n+            // Column.\n+            _pkColumn.resetTableName(schemaName + \".\"\n+                    + _pkColumn.getTableName());\n+            // some databases require to create an index for the sequence table\n+            _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n+                    _table, _pkColumn);\n+         \n+        }\n     }\n \n     protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n@@ -285,8 +304,14 @@ protected void allocateInternal(int count, JDBCStore store,\n      * Return the appropriate status object for the given class, or null\n      * if cannot handle the given class. The mapping may be null.\n      */\n-    protected Status getStatus(ClassMapping mapping) {\n-        return _stat;\n+    protected Status getStatus(ClassMapping mapping) {  \n+        Status status = (Status)_stat.get(mapping);        \n+        if (status == null){ \n+            status = new Status();\n+            _stat.put(mapping, status);\n+        }\n+        return status;\n+            \n     }\n \n     /**\n@@ -392,8 +417,9 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n                 getClass(), mapping));\n \n         DBDictionary dict = _conf.getDBDictionaryInstance();\n+        String tableName = resolveTableName(mapping, _pkColumn.getTable());\n         SQLBuffer insert = new SQLBuffer(dict).append(\"INSERT INTO \").\n-            append(_pkColumn.getTable()).append(\" (\").\n+            append(tableName).append(\" (\").\n             append(_pkColumn).append(\", \").append(_seqColumn).\n             append(\") VALUES (\").\n             appendValue(pk, _pkColumn).append(\", \").\n@@ -405,8 +431,8 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n \n         PreparedStatement stmnt = null;\n         try {\n-            stmnt = insert.prepareStatement(conn);\n-            stmnt.executeUpdate();\n+            stmnt = prepareStatement(conn, insert);\n+            executeUpdate(_conf, conn, stmnt, insert, RowImpl.ACTION_INSERT);\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}\n@@ -431,22 +457,23 @@ protected long getSequence(ClassMapping mapping, Connection conn)\n         SQLBuffer sel = new SQLBuffer(dict).append(_seqColumn);\n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n-        SQLBuffer tables = new SQLBuffer(dict).append(_seqColumn.getTable());\n+        String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+        SQLBuffer tables = new SQLBuffer(dict).append(tableName);\n \n-        SQLBuffer select = dict.toSelect(sel, null, tables, where, null,\n-            null, null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE);\n+        SQLBuffer select = dict.toSelect(sel, null, tables, where, null, null,\n+                null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE,\n+                false, true);\n \n-        PreparedStatement stmnt = select.prepareStatement(conn);\n+        PreparedStatement stmnt = prepareStatement(conn, select);\n         ResultSet rs = null;\n         try {\n-            rs = stmnt.executeQuery();\n-            if (!rs.next())\n-                return -1;\n-            return dict.getLong(rs, 1);\n+            rs = executeQuery(_conf, conn, stmnt, select);\n+            return getSequence(rs, dict);\n         } finally {\n             if (rs != null)\n                 try { rs.close(); } catch (SQLException se) {}\n-            try { stmnt.close(); } catch (SQLException se) {}\n+            if (stmnt != null)    \n+                try { stmnt.close(); } catch (SQLException se) {}\n         }\n     }\n \n@@ -467,7 +494,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n             throw new InvalidStateException(_loc.get(\"bad-seq-type\",\n                 getClass(), mapping));\n \n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n+        DBDictionary dict = _conf.getDBDictionaryInstance();        \n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n \n@@ -486,15 +513,16 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n \n                 // update the value\n                 upd = new SQLBuffer(dict);\n-                upd.append(\"UPDATE \").append(_seqColumn.getTable()).\n+                String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+                upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n                     appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n                     append(\" WHERE \").append(where).append(\" AND \").\n                     append(_seqColumn).append(\" = \").\n                     appendValue(Numbers.valueOf(cur), _seqColumn);\n \n-                stmnt = upd.prepareStatement(conn);\n-                updates = stmnt.executeUpdate();\n+                stmnt = prepareStatement(conn, upd);\n+                updates = executeUpdate(_conf, conn, stmnt, upd, RowImpl.ACTION_UPDATE);\n             } finally {\n                 if (rs != null) \n                     try { rs.close(); } catch (SQLException se) {}\n@@ -503,7 +531,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n             }\n         }\n \n-        // setup new sequence range\n+        // setup new sequence range        \n         synchronized (stat) {\n             if (updateStatSeq && stat.seq < cur)\n                 stat.seq = cur;\n@@ -512,6 +540,21 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n         }\n         return true;\n     }\n+    /**\n+     * Resolve a fully qualified table name\n+     * \n+     * @param class\n+     *            mapping to get the schema name\n+     */\n+    public String resolveTableName(ClassMapping mapping, Table table) {\n+        String sName = mapping.getTable().getSchemaName();\n+        String tableName;\n+        if (sName == null)\n+            tableName = table.getFullName();\n+        else\n+            tableName = sName + \".\" + table.getName();\n+        return tableName;\n+    }\n \n     /**\n      * Creates the sequence table in the DB.\n@@ -570,14 +613,20 @@ public void dropTable()\n     public static void main(String[] args)\n         throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return TableJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"seq-usage\"));\n     }\n \n     /**\n@@ -586,9 +635,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws Exception {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         String action = opts.removeProperty(\"action\", \"a\", null);\n         Configurations.populateConfiguration(conf, opts);\n         return run(conf, args, action);\n@@ -654,4 +700,41 @@ else if (ACTION_GET.equals(action) || ACTION_SET.equals(action)) {\n         public long seq = 1L;\n         public long max = 0L;\n     }\n+\n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(Connection conn, SQLBuffer buf)\n+        throws SQLException {\n+        return buf.prepareStatement(conn);\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing update.\n+     */\n+    protected int executeUpdate(JDBCConfiguration conf, Connection conn,  \n+        PreparedStatement stmnt, SQLBuffer buf, int opcode) throws SQLException {\n+        return stmnt.executeUpdate();\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing query.\n+     */\n+    protected ResultSet executeQuery(JDBCConfiguration conf, Connection conn,\n+        PreparedStatement stmnt, SQLBuffer buf) throws SQLException {\n+        return stmnt.executeQuery();\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of getting sequence from the result set.\n+     */\n+    protected long getSequence(ResultSet rs, DBDictionary dict) throws SQLException {\n+        if (rs == null || !rs.next())\n+            return -1;\n+        return dict.getLong(rs, 1);\n+    }\n }"},{"sha":"329fcad522c2a38571bcf7ae444dfe06d0bc21b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -120,14 +120,20 @@ protected Object getPrimaryKey(ClassMapping mapping) {\n     public static void main(String[] args)\n         throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"clstable-seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return ValueTableJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"clstable-seq-usage\"));\n     }\n \n     /**\n@@ -136,9 +142,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws Exception {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         String action = opts.removeProperty(\"action\", \"a\", null);\n         Configurations.populateConfiguration(conf, opts);\n         return run(conf, args, action, null, null);"},{"sha":"a47794298025826ae84f2f42e893488aa257d9bc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -45,15 +45,17 @@\n \n     private final Val _map;\n     private final Val _key;\n+    private final String _alias;\n     private ClassMetaData _meta = null;\n     private Class _cast = null;\n \n     /**\n      * Constructor. Provide the map and key to operate on.\n      */\n-    public GetMapValue(Val map, Val key) {\n+    public GetMapValue(Val map, Val key, String alias) {\n         _map = map;\n         _key = key;\n+        _alias = alias;\n     }\n \n     public ClassMetaData getMetaData() {\n@@ -111,7 +113,8 @@ public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state,\n \n     public void select(Select sel, ExpContext ctx, ExpState state, \n         boolean pks) {\n-        sel.select(newSQLBuffer(sel, ctx, state), this);\n+        sel.select(newSQLBuffer(sel, ctx, state).append(\" AS \").append(_alias),\n+            this);\n     }\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n@@ -127,7 +130,7 @@ public void groupBy(Select sel, ExpContext ctx, ExpState state) {\n \n     public void orderBy(Select sel, ExpContext ctx, ExpState state, \n         boolean asc) {\n-        sel.orderBy(newSQLBuffer(sel, ctx, state), asc, false);\n+        sel.orderBy(_alias, asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {"},{"sha":"d3f760a1839bc9f01d337b4b1de7da2e3b3b2800","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.io.Serializable;\n+\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -43,7 +45,7 @@\n  * @nojavadoc\n  */\n public class JDBCExpressionFactory\n-    implements ExpressionFactory {\n+    implements ExpressionFactory, Serializable {\n \n     private static final Val NULL = new Null();\n     private static final Val CURRENT_DATE = new CurrentDate(JavaSQLTypes.DATE);\n@@ -56,6 +58,7 @@\n \n     private final ClassMapping _type;\n     private final SelectConstructor _cons = new SelectConstructor();\n+    private int _getMapValueAlias = 0;\n \n     /**\n      * Constructor. Supply the type we're querying against.\n@@ -394,6 +397,7 @@ public Value getObjectId(Value val) {\n     }\n \n     public Value getMapValue(Value map, Value arg) {\n-        return new GetMapValue((Val) map, (Val) arg);\n+        return new GetMapValue((Val) map, (Val) arg, \n+            \"gmv\" + _getMapValueAlias++);\n     }\n }"},{"sha":"0cff107e4814d26fe0dfa7604b791eb216f35b4c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.io.Serializable;\n import java.sql.SQLException;\n import java.util.Iterator;\n import java.util.LinkedList;\n@@ -48,7 +49,7 @@\n  *\n  * @author Abe White\n  */\n-class PCPath\n+public class PCPath\n     extends AbstractVal\n     implements JDBCPath {\n \n@@ -319,7 +320,7 @@ public void get(FieldMetaData fmd, XMLMetaData meta) {\n         action.data = meta;\n         _actions.add(action);\n         _cast = null;\n-        _key = false;;\n+        _key = false;\n         _type = XPATH;\n         _xmlfield = fmd;\n     }\n@@ -330,7 +331,7 @@ public void get(XMLMetaData meta, String name) {\n         action.data = meta.getFieldMapping(name);\n         _actions.add(action);\n         _cast = null;\n-        _key = false;;\n+        _key = false;\n         _type = XPATH;\n     }\n     \n@@ -548,7 +549,7 @@ private static boolean isJoinedField(FieldMapping src, boolean key,\n     /**\n      * Expression state.\n      */\n-    private static class PathExpState\n+    public static class PathExpState\n         extends ExpState {\n \n         public FieldMapping field = null;\n@@ -789,7 +790,8 @@ public boolean equals(Object other) {\n     /**\n      * Helper class representing an action.\n      */\n-    private static class Action {\n+    private static class Action\n+        implements Serializable {\n \n         public static final int GET = 0;\n         public static final int GET_OUTER = 1;"},{"sha":"85d1d42d2e09304f9b17c47ff560fb786fca658f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -93,7 +93,7 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n     /**\n      * Expression state.\n      */\n-    private static class ParamExpState\n+    public static class ParamExpState\n         extends ConstExpState {\n \n         public Object sqlValue = null;"},{"sha":"200f404214366318fd9981c75a9356322b62f0a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -38,7 +39,8 @@\n  * @author Abe White\n  * @nojavadoc\n  */\n-public class SelectConstructor {\n+public class SelectConstructor\n+    implements Serializable {\n \n     private boolean _extent = false;\n \n@@ -300,8 +302,8 @@ public void select(Select sel, ExpContext ctx, ClassMapping mapping,\n         }\n \n         // add conditions limiting the projections to the proper classes; if\n-        // this isn't a projection then they will already be added\n-        if (exps.projections.length > 0) {\n+        // this isn't a projection or a subq then they will already be added\n+        if (exps.projections.length > 0 || sel.getParent() != null) {\n             ctx.store.loadSubclasses(mapping);\n             mapping.getDiscriminator().addClassConditions((inner != null) \n                 ? inner : sel, subclasses, joins);"},{"sha":"0099b13154e71efcd193c62d564745a304838874","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -226,14 +226,18 @@ public void setSecondaryTableJoinColumns(String tableName, List cols) {\n      * Return the table for the given class.\n      */\n     public Table getTable(final ClassMapping cls, boolean adapt) {\n-        return createTable(cls, new TableDefaults() {\n+        Table t = createTable(cls, new TableDefaults() {\n             public String get(Schema schema) {\n                 // delay this so that we don't do schema reflection for unique\n                 // table name unless necessary\n                 return cls.getMappingRepository().getMappingDefaults().\n                     getTableName(cls, schema);\n             }\n         }, _schemaName, _tableName, adapt);\n+        t.setComment(cls.getTypeAlias() == null\n+            ? cls.getDescribedType().getName()\n+            : cls.getTypeAlias());\n+        return t;\n     }\n \n     /**"},{"sha":"067be5761c71e77f5b960e3963d3ac11bc3cbdf0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -515,6 +515,13 @@ public void map(boolean adapt) {\n      */\n     public void mapJoin(boolean adapt, boolean joinRequired) {\n         Table table = _info.getTable(this, joinRequired, adapt);\n+\n+        if(table != null && table.equals(getDefiningMapping().getTable())) {\n+            // Don't create a join if the field's table is the same as the\n+            // class's table. \n+            table = null;\n+        }\n+\n         ForeignKey join = null;\n         if (table != null)\n             join = _info.getJoin(this, table, adapt);"},{"sha":"7f28dadda517aa79a2ae391ba3f8c0b8c34aa0cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":41,"deletions":6,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -25,6 +25,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.strats.UntypedPCValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.EnumValueHandler;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n@@ -70,6 +71,15 @@\n     private String _discName = null;\n     private String _orderName = null;\n     private String _nullIndName = null;\n+    private boolean _removeHungarianNotation = false;\n+\n+    public boolean isRemoveHungarianNotation() {\n+        return _removeHungarianNotation;\n+    }\n+\n+    public void setRemoveHungarianNotation(boolean removeHungarianNotation) {\n+        this._removeHungarianNotation = removeHungarianNotation;\n+    }\n \n     /**\n      * Default base class strategy alias.\n@@ -448,10 +458,11 @@ public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n         if (_stringifyUnmapped && vm.getTypeMapping() != null\n             && !vm.getTypeMapping().isMapped())\n             return UntypedPCValueHandler.getInstance();\n-        if (_ordinalEnum && !vm.isSerialized()\n-            && JavaVersions.isEnumeration(type))\n-            return \"org.apache.openjpa.jdbc.meta.strats.EnumValueHandler\"\n-                + \"(StoreOrdinal=true)\";\n+        if (type.isEnum() && !vm.isSerialized()) {\n+            EnumValueHandler enumHandler = new EnumValueHandler();\n+            enumHandler.setStoreOrdinal(_ordinalEnum);\n+            return enumHandler;\n+        }\n         return null;\n     }\n \n@@ -535,8 +546,28 @@ else if (_dsIdName != null)\n      * Correct the given column's name.\n      */\n     protected void correctName(Table table, Column col) {\n-        if (!_defMissing)\n-            col.setName(dict.getValidColumnName(col.getName(), table));\n+        if (!_defMissing || _removeHungarianNotation)\n+        {\n+            String name = col.getName();\n+            if (_removeHungarianNotation)\n+                name = removeHungarianNotation(name);\n+            col.setName(dict.getValidColumnName(name, table));\n+        }\n+    }\n+\n+    protected String removeHungarianNotation(String columnName) {\n+        char[] name = columnName.toCharArray();\n+        int newStart = 0;\n+\n+        for (int i = 0; i < name.length; i++) {\n+            if (Character.isUpperCase(name[i]))\n+            {\n+                newStart = i;\n+                break;\n+            }\n+        }\n+\n+        return columnName.substring(newStart);\n     }\n \n     public void populateColumns(Version vers, Table table, Column[] cols) {\n@@ -676,6 +707,10 @@ protected String getIndexName(String name, Table table, Column[] cols) {\n         // based on defaults\n         if (name == null)\n             name = cols[0].getName();\n+\n+        if (_removeHungarianNotation)\n+            name = removeHungarianNotation(name);\n+\n         return dict.getValidIndexName(name, table);\n     }\n "},{"sha":"9172ff63a3d1d15d5e64805a3ec68bdbe881c167","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -699,6 +699,9 @@ else if (col.getJavaType() == JavaTypes.OBJECT) {\n             if (decimals != 0)\n                 col.setDecimalDigits(decimals);\n         }\n+\n+        if (tmplate.hasComment())\n+            col.setComment(tmplate.getComment());\n         return col;\n     }\n \n@@ -813,6 +816,9 @@ protected Index createIndex(MetaDataContext context, String prefix,\n         if (_idx != null) {\n             name = _idx.getName();\n             unq = _idx.isUnique();\n+            // preserve multiple columns if they are specified in the index\n+            if (_idx.getColumns() != null && _idx.getColumns().length > 1)\n+                cols = _idx.getColumns();\n         } else\n             unq = tmplate.isUnique();\n \n@@ -1510,6 +1516,8 @@ protected void syncIndex(MetaDataContext context, Index idx) {\n         _idx = new Index();\n         _idx.setName(idx.getName());\n         _idx.setUnique(idx.isUnique());\n+        if (idx.getColumns() != null && idx.getColumns().length > 1)\n+            _idx.setColumns(idx.getColumns());\n     }\n \n     /**"},{"sha":"b11991f3692abb14cf3f2283fd6eb3db5b9b382d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":41,"deletions":12,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -34,16 +34,22 @@\n import org.apache.openjpa.jdbc.meta.strats.CharArrayValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.ClassNameDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.ElementEmbedValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.EmbedFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.EmbeddedClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.FlatClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerCollectionTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.HandlerFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerHandlerMapTableFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.ImmutableValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.LobFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedBlobFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedByteArrayFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedCharArrayFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.NanoPrecisionTimestampVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n@@ -55,8 +61,10 @@\n import org.apache.openjpa.jdbc.meta.strats.RelationCollectionInverseKeyFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationCollectionTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationHandlerMapTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationRelationMapTableFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.StateComparisonVersionStrategy;\n import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SubclassJoinDiscriminatorStrategy;\n@@ -73,6 +81,7 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -93,13 +102,6 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (MappingRepository.class);\n-    private static final Map _handlers = new HashMap();\n-\n-    static {\n-        // register default value handlers\n-        _handlers.put(\"java.lang.Enum\",\n-            \"org.apache.openjpa.jdbc.meta.strats.EnumValueHandler\");\n-    }\n \n     private transient DBDictionary _dict = null;\n     private transient MappingDefaults _defaults = null;\n@@ -611,6 +613,8 @@ protected VersionStrategy instantiateVersionStrategy(String name,\n             strat = NumberVersionStrategy.class;\n         else if (TimestampVersionStrategy.ALIAS.equals(name))\n             strat = TimestampVersionStrategy.class;\n+        else if (NanoPrecisionTimestampVersionStrategy.ALIAS.equals(name))\n+            strat = NanoPrecisionTimestampVersionStrategy.class;\n         else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n             strat = StateComparisonVersionStrategy.class;\n \n@@ -866,6 +870,9 @@ protected FieldStrategy defaultTypeStrategy(FieldMapping field,\n                     break;\n                 return handlerMapStrategy(field, khandler, vhandler, krel,\n                     vrel, installHandlers);\n+            case JavaTypes.INPUT_STREAM:\n+            case JavaTypes.INPUT_READER:\n+                return new LobFieldStrategy();\n         }\n         return null;\n     }\n@@ -876,7 +883,12 @@ protected FieldStrategy defaultTypeStrategy(FieldMapping field,\n      */\n     protected FieldStrategy handlerCollectionStrategy(FieldMapping field, \n         ValueHandler ehandler, boolean installHandlers) {\n-        return null;\n+        if (getConfiguration().getCompatibilityInstance()\n+            .getStoreMapCollectionInEntityAsBlob())\n+            return null;\n+        if (installHandlers)\n+            field.getElementMapping().setHandler(ehandler);\n+        return new HandlerCollectionTableFieldStrategy();\n     }\n \n     /**\n@@ -886,7 +898,20 @@ protected FieldStrategy handlerCollectionStrategy(FieldMapping field,\n     protected FieldStrategy handlerMapStrategy(FieldMapping field, \n         ValueHandler khandler, ValueHandler vhandler, boolean krel, \n         boolean vrel,  boolean installHandlers) {\n-        return null;\n+        if (getConfiguration().getCompatibilityInstance()\n+            .getStoreMapCollectionInEntityAsBlob())\n+            return null;\n+        if (installHandlers) {\n+            field.getKeyMapping().setHandler(khandler);\n+            field.getElementMapping().setHandler(vhandler);\n+        }\n+        if (!krel && !vrel)\n+            return new HandlerHandlerMapTableFieldStrategy();\n+        if (!krel && vrel)\n+            return new HandlerRelationMapTableFieldStrategy();\n+        if (krel && !vrel)\n+            return new RelationHandlerMapTableFieldStrategy();\n+        return new RelationRelationMapTableFieldStrategy();\n     }\n \n     /**\n@@ -923,8 +948,6 @@ private Object mappedStrategy(ValueMapping val, Class type,\n             return null;\n \n         Object strat = _defaults.getStrategy(val, type, adapting);\n-        if (strat == null)\n-            strat = _handlers.get(type.getName());\n \n         // recurse on superclass so that, for example, a registered handler\n         // for java.lang.Enum will work on all enums\n@@ -1060,6 +1083,10 @@ protected ValueHandler defaultHandler(ValueMapping val, boolean adapting) {\n             case JavaTypes.OID:\n                 return new ObjectIdValueHandler();\n         }\n+        if (!getConfiguration().getCompatibilityInstance()\n+            .getStoreMapCollectionInEntityAsBlob()\n+            && val.isEmbeddedPC())\n+            return new ElementEmbedValueHandler();\n         return null;\n     }\n \n@@ -1197,7 +1224,9 @@ protected VersionStrategy defaultStrategy(Version vers,\n         switch (vfield.getTypeCode()) {\n             case JavaTypes.DATE:\n             case JavaTypes.CALENDAR:\n-                return new TimestampVersionStrategy();\n+                return (JavaVersions.VERSION >= 5) \n+                    ? new NanoPrecisionTimestampVersionStrategy()\n+                    : new TimestampVersionStrategy();\n             case JavaTypes.BYTE:\n             case JavaTypes.INT:\n             case JavaTypes.LONG:"},{"sha":"d9ac176dc72903732003876e55b7b1bd33ee7cbc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -97,13 +97,15 @@\n         ACTION_IMPORT,\n     };\n \n-    private static Localizer _loc = Localizer.forPackage(MappingTool.class);\n+    private static final Localizer _loc =\n+        Localizer.forPackage(MappingTool.class);\n \n     private final JDBCConfiguration _conf;\n     private final Log _log;\n     private final String _action;\n     private final boolean _meta;\n     private final int _mode;\n+    private final DBDictionary _dict;\n \n     private MappingRepository _repos = null;\n     private SchemaGroup _schema = null;\n@@ -147,6 +149,8 @@ else if (meta && ACTION_DROP.equals(_action))\n             _mode = MODE_META | MODE_MAPPING | MODE_QUERY;\n         else\n             _mode = MODE_MAPPING;\n+\n+        _dict = _conf.getDBDictionaryInstance();\n     }\n \n     /**\n@@ -572,11 +576,10 @@ private void dropUnusedSchemaComponents(ClassMapping[] mappings) {\n         SchemaGroup group = getSchemaGroup();\n         Schema[] schemas = group.getSchemas();\n         Table[] tables;\n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n         for (int i = 0; i < schemas.length; i++) {\n             tables = schemas[i].getTables();\n             for (int j = 0; j < tables.length; j++)\n-                dict.refSchemaComponents(tables[j]);\n+                _dict.refSchemaComponents(tables[j]);\n         }\n \n         group.removeUnusedComponents();\n@@ -912,17 +915,23 @@ private void drop(Class cls) {\n      * -f mypackage.orm -a export mypackage.jdo</code></li>\n      * </ul>\n      */\n-    public static void main(String[] args)\n+    public static void main(String[] arguments)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"tool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] args = opts.setFromCmdLine(arguments);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws IOException, SQLException {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return MappingTool.run(conf, args, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.err.println(_loc.get(\"tool-usage\"));\n     }\n \n     /**\n@@ -933,9 +942,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws IOException, SQLException {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         // flags\n         Flags flags = new Flags();\n         flags.action = opts.removeProperty(\"action\", \"a\", flags.action);"},{"sha":"c418bcebfbe8c5a71f05f220bee62691b321a593","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1819,14 +1819,20 @@ public Object clone() {\n     public static void main(String[] args)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"revtool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return ReverseMappingTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"revtool-usage\"));\n     }\n \n     /**\n@@ -1837,9 +1843,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws IOException, SQLException {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         // flags\n         Flags flags = new Flags();\n         flags.packageName = opts.removeProperty"},{"sha":"be1449419d0cf0aa5e559df818b3050ba3d64820","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ElementEmbedValueHandler.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,183 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.util.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.schema.*;\r\n+\r\n+/**\r\n+ * <p>Handler for embedded objects as elements of a collection or map.  For\r\n+ * embedded objects as fields, use the more powerful\r\n+ * {@link EmbedFieldStrategy}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0, 1.1.0\r\n+ * @nojavadoc\r\n+ */\r\n+public class ElementEmbedValueHandler\r\n+    extends EmbedValueHandler\r\n+    implements RelationId {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (ElementEmbedValueHandler.class);\r\n+\r\n+    private ValueMapping _vm = null;\r\n+    private Column[] _cols = null;\r\n+    private Object[] _args = null;\r\n+    private int _nullIdx = -1;\r\n+    private boolean _synthetic = false;\r\n+\r\n+    public Column[] map(ValueMapping vm, String name, ColumnIO io,\r\n+        boolean adapt) {\r\n+        LinkedList cols = new LinkedList();\r\n+        LinkedList args = new LinkedList();\r\n+        super.map(vm, name, io, adapt, cols, args);\r\n+\r\n+        ValueMappingInfo vinfo = vm.getValueInfo();\r\n+        Column nullInd = vinfo.getNullIndicatorColumn(vm, name,\r\n+            vm.getFieldMapping().getTable(), adapt);\r\n+        if (nullInd != null)\r\n+            vm.setColumns(new Column[]{ nullInd });\r\n+\r\n+        // record index of null indicator column and whether it is synthetic\r\n+        if (nullInd != null) {\r\n+            _nullIdx = cols.indexOf(nullInd);\r\n+            if (_nullIdx == -1) {\r\n+                cols.addFirst(nullInd);\r\n+                args.addFirst(null);\r\n+                _nullIdx = 0;\r\n+                _synthetic = true;\r\n+            }\r\n+        }\r\n+\r\n+        _vm = vm;\r\n+        _cols = (Column[]) cols.toArray(new Column[cols.size()]);\r\n+        _args = args.toArray();\r\n+        return _cols;\r\n+    }\r\n+\r\n+    public boolean objectValueRequiresLoad(ValueMapping vm) {\r\n+        return true;\r\n+    }\r\n+\r\n+    public Object getResultArgument(ValueMapping vm) {\r\n+        return _args;\r\n+    }\r\n+\r\n+    public Object toDataStoreValue(ValueMapping vm, Object val,\r\n+        JDBCStore store) {\r\n+        OpenJPAStateManager em = store.getContext().getStateManager(val);\r\n+        Object rval = null;\r\n+        if (_cols.length > 1)\r\n+            rval = new Object[_cols.length];\r\n+\r\n+        // set null indicator column\r\n+        int idx = 0;\r\n+        if (_synthetic) {\r\n+            Object cval = ((EmbeddedClassStrategy) vm.getEmbeddedMapping().\r\n+                getStrategy()).getNullIndicatorValue(em);\r\n+            if (_cols.length == 1)\r\n+                return cval;\r\n+            ((Object[]) rval)[idx++] = cval;\r\n+        }\r\n+\r\n+        return super.toDataStoreValue(em, vm, store, _cols, rval, idx);\r\n+    }\r\n+\r\n+    public Object toObjectValue(ValueMapping vm, Object val,\r\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch)\r\n+        throws SQLException {\r\n+        if (sm == null)\r\n+            throw new InvalidStateException(_loc.get(\"cant-project-owned\",\r\n+                vm));\r\n+\r\n+        // check null indicator first\r\n+        if (_nullIdx != -1) {\r\n+            Object nval;\r\n+            if (_cols.length == 1)\r\n+                nval = val;\r\n+            else\r\n+                nval = ((Object[]) val)[_nullIdx];\r\n+            if (((EmbeddedClassStrategy) vm.getEmbeddedMapping().\r\n+                getStrategy()).indicatesNull(nval))\r\n+                return null;\r\n+        }\r\n+\r\n+        // create embedded instance\r\n+        OpenJPAStateManager em = store.getContext().embed(null, null, sm, vm);\r\n+        int idx = (_synthetic) ? 1 : 0;\r\n+        super.toObjectValue(em, vm, val, store, fetch, _cols, idx);\r\n+\r\n+        // after loading everything from result, load the rest of the\r\n+        // configured fields\r\n+        em.load(fetch);\r\n+        return em.getManagedInstance();\r\n+    }\r\n+\r\n+    /////////////////////////////\r\n+    // RelationId implementation\r\n+    /////////////////////////////\r\n+\r\n+    public Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col) {\r\n+        return toRelationDataStoreValue(sm, col, 0);\r\n+    }\r\n+\r\n+    /**\r\n+     * Recursive helper.\r\n+     */\r\n+    private Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col,\r\n+        int idx) {\r\n+        FieldMapping field = findField(col, idx);\r\n+        if (field == null)\r\n+            throw new InternalException();\r\n+\r\n+        if (field.getHandler() instanceof RelationId)\r\n+            return ((RelationId) field.getStrategy()).\r\n+                toRelationDataStoreValue(sm, col);\r\n+        if (field.getStrategy() instanceof RelationId)\r\n+            return ((RelationId) field.getStrategy()).\r\n+                toRelationDataStoreValue(sm, col);\r\n+        return toRelationDataStoreValue(sm, col, field.getIndex() + 1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Find the first field mapping that uses the given column starting with\r\n+     * the given field index.\r\n+     */\r\n+    private FieldMapping findField(Column col, int idx) {\r\n+        FieldMapping[] fms = _vm.getEmbeddedMapping().getFieldMappings();\r\n+        Column[] cols;\r\n+        for (int i = idx; i < fms.length; i++) {\r\n+            if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\r\n+                continue;\r\n+            cols = ((Embeddable) fms[i]).getColumns();\r\n+            for (int j = 0; j < cols.length; j++)\r\n+                if (cols[j] == col)\r\n+                    return fms[i];\r\n+        }\r\n+        return null;\r\n+\t}\r\n+}\r"},{"sha":"57232a4bc772ea16b0d5bdd503b91afe1177d629","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -165,7 +165,8 @@ public void insert(OpenJPAStateManager owner, OpenJPAStateManager sm,\n         FieldMapping[] fields = field.getEmbeddedMapping().getFieldMappings();\n         for (int i = 0; i < fields.length; i++)\n             if (!Boolean.TRUE.equals(fields[i].isCustomInsert(em, store)))\n-                fields[i].insert(em, store, rm);\n+                if (!fields[i].isPrimaryKey())\n+                    fields[i].insert(em, store, rm);\n \n         if (field.getColumnIO().isInsertable(0, true))\n             setNullIndicatorColumn(sm, row);\n@@ -409,14 +410,13 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         //### we selected the embedded object fields and load the object\n         //### immediately; this will be inefficient when the embedded object\n         //### was not selected after all\n-\n         StoreContext ctx = store.getContext();\n         OpenJPAStateManager em = ctx.embed(null, null, sm, field);\n         sm.storeObject(field.getIndex(), em.getManagedInstance());\n \n         FieldMapping[] fields = field.getEmbeddedMapping().getFieldMappings();\n         Object eres, processed;\n-        boolean loaded = false;\n+        boolean needsLoad = false;\n         for (int i = 0; i < fields.length; i++) {\n             eres = res.getEager(fields[i]);\n             res.startDataRequest(fields[i]);\n@@ -428,18 +428,24 @@ else if (eres != null) {\n                         fields[i].loadEagerParallel(em, store, fetch, eres);\n                     if (processed != eres)\n                         res.putEager(fields[i], processed);\n-                } else\n+                } else {\n                     fields[i].load(em, store, fetch, res);\n-                loaded |= em.getLoaded().get(i);\n+                }\n+                needsLoad = needsLoad || (!em.getLoaded().get(i) && \n+                    fetch.requiresFetch(fields[i])\n+                        == FetchConfiguration.FETCH_LOAD);\n             } finally {\n                 res.endDataRequest();\n             }\n         }\n \n-        // after loading everything from result, load the rest of the\n-        // configured fields\n-        if (loaded)\n-            em.load(fetch);\n+        // After loading everything from result, load the rest of the\n+        // configured fields if anything is missing.\n+        if (needsLoad && \n+            fetch.requiresFetch(field.getFieldMetaData()) == \n+                JDBCFetchConfiguration.FETCH_LOAD) {\n+          em.load(fetch);\n+        }\n     }\n \n     /**\n@@ -582,8 +588,8 @@ public OpenJPAStateManager getOwner() {\n             return _owner;\n         }\n \n-        public ValueMetaData getOwnerMetaData() {\n-            return _vmd;\n+        public int getOwnerIndex() {\n+            return _vmd.getFieldMetaData().getIndex();\n         }\n \n         public boolean isEmbedded() {"},{"sha":"4d2cf63d6190ff0ce877b670c3ebb3ad141d04f4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","previous_filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java"},{"sha":"d39d24c6216f5fdc985f8f54390fb89dbcfb794e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FullClassStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -76,6 +76,7 @@ public void map(boolean adapt) {\n             Column id = new Column();\n             id.setName(\"id\");\n             id.setJavaType(JavaTypes.LONG);\n+            id.setComment(\"datastore id\");\n             if (cls.getIdentityStrategy() == ValueStrategies.AUTOASSIGN)\n                 id.setAutoAssigned(true);\n             id.setNotNull(true);"},{"sha":"21861e4509dfc3a3c36072592b3c5cd03e834767","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","status":"added","additions":250,"deletions":0,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,250 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.util.*;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.schema.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+\r\n+/**\r\n+ * <p>Mapping for a collection of values in a separate table controlled by a\r\n+ * {@link ValueHandler}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0, 1.1.0\r\n+ */\r\n+public class HandlerCollectionTableFieldStrategy\r\n+    extends StoreCollectionFieldStrategy\r\n+    implements LRSCollectionFieldStrategy {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (HandlerCollectionTableFieldStrategy.class);\r\n+\r\n+    private Column[] _cols = null;\r\n+    private ColumnIO _io = null;\r\n+    private boolean _load = false;\r\n+    private boolean _lob = false;\r\n+    private boolean _embed = false;\r\n+\r\n+    public FieldMapping getFieldMapping() {\r\n+        return field;\r\n+    }\r\n+\r\n+    public ClassMapping[] getIndependentElementMappings(boolean traverse) {\r\n+        return ClassMapping.EMPTY_MAPPINGS;\r\n+    }\r\n+\r\n+    public Column[] getElementColumns(ClassMapping elem) {\r\n+        return _cols;\r\n+    }\r\n+\r\n+    public ForeignKey getJoinForeignKey(ClassMapping elem) {\r\n+        return field.getJoinForeignKey();\r\n+    }\r\n+\r\n+    public void selectElement(Select sel, ClassMapping elem, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins joins) {\r\n+        sel.select(_cols, joins);\r\n+    }\r\n+\r\n+    public Object loadElement(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        return HandlerStrategies.loadObject(field.getElementMapping(),\r\n+            sm, store, fetch, res, joins, _cols, _load);\r\n+    }\r\n+\r\n+    protected Joins join(Joins joins, ClassMapping elem) {\r\n+        return join(joins, false);\r\n+    }\r\n+\r\n+    public Joins joinElementRelation(Joins joins, ClassMapping elem) {\r\n+        return joinRelation(joins, false, false);\r\n+    }\r\n+\r\n+    protected Proxy newLRSProxy() {\r\n+        return new LRSProxyCollection(this);\r\n+    }\r\n+\r\n+    public void map(boolean adapt) {\r\n+        if (field.getTypeCode() != JavaTypes.COLLECTION\r\n+            && field.getTypeCode() != JavaTypes.ARRAY)\r\n+            throw new MetaDataException(_loc.get(\"not-coll\", field));\r\n+\r\n+        assertNotMappedBy();\r\n+        field.getValueInfo().assertNoSchemaComponents(field, !adapt);\r\n+        field.getKeyMapping().getValueInfo().assertNoSchemaComponents\r\n+            (field.getKey(), !adapt);\r\n+\r\n+        ValueMapping elem = field.getElementMapping();\r\n+        if (elem.getHandler() == null)\r\n+            throw new MetaDataException(_loc.get(\"no-handler\", elem));\r\n+\r\n+        field.mapJoin(adapt, true);\r\n+        _io = new ColumnIO();\r\n+        _cols = HandlerStrategies.map(elem, \"element\", _io, adapt);\r\n+\r\n+        FieldMappingInfo finfo = field.getMappingInfo();\r\n+        Column orderCol = finfo.getOrderColumn(field, field.getTable(), adapt);\r\n+        field.setOrderColumn(orderCol);\r\n+        field.setOrderColumnIO(finfo.getColumnIO());\r\n+        field.mapPrimaryKey(adapt);\r\n+    }\r\n+\r\n+    public void initialize() {\r\n+        for (int i = 0; !_lob && i < _cols.length; i++)\r\n+            _lob = _cols[i].isLob();\r\n+\r\n+        ValueMapping elem = field.getElementMapping();\r\n+        _embed = elem.getEmbeddedMetaData() != null;\r\n+        _load = elem.getHandler().objectValueRequiresLoad(elem);\r\n+    }\r\n+\r\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        insert(sm, store, rm, sm.fetchObject(field.getIndex()));\r\n+    }\r\n+\r\n+    private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\r\n+        Object vals)\r\n+        throws SQLException {\r\n+        Collection coll;\r\n+        if (field.getTypeCode() == JavaTypes.ARRAY)\r\n+            coll = JavaTypes.toList(vals, field.getElement().getType(),\r\n+                false);\r\n+        else\r\n+            coll = (Collection) vals;\r\n+        if (coll == null || coll.isEmpty())\r\n+            return;\r\n+\r\n+        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\r\n+        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\r\n+            sm);\r\n+\r\n+        ValueMapping elem = field.getElementMapping();\r\n+        Column order = field.getOrderColumn();\r\n+        boolean setOrder = field.getOrderColumnIO().isInsertable(order, false);\r\n+        int idx = 0;\r\n+        for (Iterator itr = coll.iterator(); itr.hasNext(); idx++) {\r\n+            HandlerStrategies.set(elem, itr.next(), store, row, _cols,\r\n+                _io, true);\r\n+            if (setOrder)\r\n+                row.setInt(order, idx);\r\n+            rm.flushSecondaryRow(row);\r\n+        }\r\n+    }\r\n+\r\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Object obj = sm.fetchObject(field.getIndex());\r\n+        ChangeTracker ct = null;\r\n+        if (obj instanceof Proxy) {\r\n+            Proxy proxy = (Proxy) obj;\r\n+            if (Proxies.isOwner(proxy, sm, field.getIndex()))\r\n+                ct = proxy.getChangeTracker();\r\n+        }\r\n+\r\n+        // if no fine-grained change tracking then just delete and reinsert\r\n+        if (ct == null || !ct.isTracking()) {\r\n+            delete(sm, store, rm);\r\n+            insert(sm, store, rm, obj);\r\n+            return;\r\n+        }\r\n+\r\n+        // delete the removes\r\n+        ValueMapping elem = field.getElementMapping();\r\n+        Collection rem = ct.getRemoved();\r\n+        if (!rem.isEmpty()) {\r\n+            Row delRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_DELETE);\r\n+            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+            for (Iterator itr = rem.iterator(); itr.hasNext();) {\r\n+                HandlerStrategies.where(elem, itr.next(), store, delRow,\r\n+                    _cols);\r\n+                rm.flushSecondaryRow(delRow);\r\n+            }\r\n+        }\r\n+\r\n+        // insert the adds\r\n+        Collection add = ct.getAdded();\r\n+        if (!add.isEmpty()) {\r\n+            Row addRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_INSERT);\r\n+            addRow.setForeignKey(field.getJoinForeignKey(),\r\n+                field.getJoinColumnIO(), sm);\r\n+\r\n+            int seq = ct.getNextSequence();\r\n+            Column order = field.getOrderColumn();\r\n+            boolean setOrder = field.getOrderColumnIO().isInsertable(order,\r\n+                false);\r\n+            for (Iterator itr = add.iterator(); itr.hasNext(); seq++) {\r\n+                HandlerStrategies.set(elem, itr.next(), store, addRow, _cols,\r\n+                    _io, true);\r\n+                if (setOrder)\r\n+                    addRow.setInt(order, seq);\r\n+                rm.flushSecondaryRow(addRow);\r\n+            }\r\n+            if (order != null)\r\n+                ct.setNextSequence(seq);\r\n+        }\r\n+    }\r\n+\r\n+    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Row row = rm.getAllRows(field.getTable(), Row.ACTION_DELETE);\r\n+        row.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+        rm.flushAllRows(row);\r\n+    }\r\n+\r\n+    public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch) {\r\n+        // can't do any combined select with lobs, since they don't allow\r\n+        // select distinct.  cant select eager parallel on embedded, because\r\n+        // during parallel result processing the owning sm won't be available\r\n+        // for each elem\r\n+        if (_lob || (_embed && type == Select.EAGER_PARALLEL))\r\n+            return 0;\r\n+        return super.supportsSelect(sel, type, sm, store, fetch);\r\n+    }\r\n+\r\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\r\n+        return HandlerStrategies.toDataStoreValue(field.getElementMapping(),\r\n+            val, _cols, store);\r\n+    }\r\n+\r\n+    public Joins join(Joins joins, boolean forceOuter) {\r\n+        return field.join(joins, forceOuter, true);\r\n+    }\r\n+\r\n+    public Joins joinRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        if (traverse)\r\n+            HandlerStrategies.assertJoinable(field.getElementMapping());\r\n+        return joins;\r\n+    }\r\n+}\r"},{"sha":"a36c1ed2d16a9cb742ec7be6f6378e1bf07ccbe1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -157,7 +157,8 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n \n         if (sm != null && sm.getIntermediate(field.getIndex()) != null)\n             return -1;\n-        if (sel.isDistinct() && _lob && !field.isPrimaryKey())\n+        if (_lob && !field.isPrimaryKey() && (sel.isDistinct() ||\n+                eagerMode == JDBCFetchConfiguration.EAGER_NONE))\n             return -1;\n         sel.select(_cols, field.join(sel));\n         return 1;"},{"sha":"e7859a2c4dcf9600b45aebb58e0af1584b12b435","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,246 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.schema.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.lib.util.*;\r\n+import org.apache.openjpa.util.*;\r\n+\r\n+/**\r\n+ * Mapping for a map of keys and values both controlled by\r\n+ * {@link ValueHandler}s.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0, 1.1.0\r\n+ */\r\n+public class HandlerHandlerMapTableFieldStrategy\r\n+    extends MapTableFieldStrategy {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (HandlerHandlerMapTableFieldStrategy.class);\r\n+\r\n+    private Column[] _kcols = null;\r\n+    private ColumnIO _kio = null;\r\n+    private boolean _kload = false;\r\n+    private Column[] _vcols = null;\r\n+    private ColumnIO _vio = null;\r\n+    private boolean _vload = false;\r\n+\r\n+    public Column[] getKeyColumns(ClassMapping cls) {\r\n+        return _kcols;\r\n+    }\r\n+\r\n+    public Column[] getValueColumns(ClassMapping cls) {\r\n+        return _vcols;\r\n+    }\r\n+\r\n+    public void selectKey(Select sel, ClassMapping cls, OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\r\n+        sel.select(_kcols, joins);\r\n+    }\r\n+\r\n+    public void selectValue(Select sel, ClassMapping cls,\r\n+        OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\r\n+        sel.select(_vcols, joins);\r\n+    }\r\n+\r\n+    public Result[] getResults(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins[] joins, boolean lrs)\r\n+        throws SQLException {\r\n+        Select sel = store.getSQLFactory().newSelect();\r\n+        sel.setLRS(lrs);\r\n+        sel.select(_kcols);\r\n+        sel.select(_vcols);\r\n+        sel.whereForeignKey(field.getJoinForeignKey(), sm.getObjectId(),\r\n+            field.getDefiningMapping(), store);\r\n+        Result res = sel.execute(store, fetch);\r\n+        return new Result[]{ res, res };\r\n+    }\r\n+\r\n+    public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        return HandlerStrategies.loadObject(field.getKeyMapping(),\r\n+            sm, store, fetch, res, joins, _kcols, _kload);\r\n+    }\r\n+\r\n+    public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        return HandlerStrategies.loadObject(field.getElementMapping(),\r\n+            sm, store, fetch, res, joins, _vcols, _vload);\r\n+    }\r\n+\r\n+    public void map(boolean adapt) {\r\n+        super.map(adapt);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        if (key.getHandler() == null)\r\n+            throw new MetaDataException(_loc.get(\"no-handler\", key));\r\n+        ValueMapping val = field.getElementMapping();\r\n+        if (val.getHandler() == null)\r\n+            throw new MetaDataException(_loc.get(\"no-handler\", val));\r\n+        assertNotMappedBy();\r\n+\r\n+        field.mapJoin(adapt, true);\r\n+        _kio = new ColumnIO();\r\n+        DBDictionary dict = field.getMappingRepository().getDBDictionary();\r\n+        _kcols = HandlerStrategies.map(key, \r\n+            dict.getValidColumnName(\"key\", field.getTable()), _kio, adapt);\r\n+\r\n+        _vio = new ColumnIO();\r\n+        _vcols = HandlerStrategies.map(val, \"value\", _vio, adapt);\r\n+        field.mapPrimaryKey(adapt);\r\n+    }\r\n+\r\n+    public void initialize() {\r\n+        _kload = field.getKeyMapping().getHandler().\r\n+            objectValueRequiresLoad(field.getKeyMapping());\r\n+        _vload = field.getElementMapping().getHandler().\r\n+            objectValueRequiresLoad(field.getElementMapping());\r\n+    }\r\n+\r\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        insert(sm, store, rm, (Map) sm.fetchObject(field.getIndex()));\r\n+    }\r\n+\r\n+    private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\r\n+        Map map)\r\n+        throws SQLException {\r\n+        if (map == null || map.isEmpty())\r\n+            return;\r\n+\r\n+        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\r\n+        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\r\n+            sm);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ValueMapping val = field.getElementMapping();\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            HandlerStrategies.set(key, entry.getKey(), store, row, _kcols,\r\n+                _kio, true);\r\n+            HandlerStrategies.set(val, entry.getValue(), store, row, _vcols,\r\n+                _vio, true);\r\n+            rm.flushSecondaryRow(row);\r\n+        }\r\n+    }\r\n+\r\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Map map = (Map) sm.fetchObject(field.getIndex());\r\n+        ChangeTracker ct = null;\r\n+        if (map instanceof Proxy) {\r\n+            Proxy proxy = (Proxy) map;\r\n+            if (Proxies.isOwner(proxy, sm, field.getIndex()))\r\n+                ct = proxy.getChangeTracker();\r\n+        }\r\n+\r\n+        // if no fine-grained change tracking then just delete and reinsert\r\n+        if (ct == null || !ct.isTracking()) {\r\n+            delete(sm, store, rm);\r\n+            insert(sm, store, rm, map);\r\n+            return;\r\n+        }\r\n+\r\n+        // delete the removes\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        Collection rem = ct.getRemoved();\r\n+        if (!rem.isEmpty()) {\r\n+            Row delRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_DELETE);\r\n+            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+            for (Iterator itr = rem.iterator(); itr.hasNext();) {\r\n+                HandlerStrategies.where(key, itr.next(), store, delRow,\r\n+                    _kcols);\r\n+                rm.flushSecondaryRow(delRow);\r\n+            }\r\n+        }\r\n+\r\n+        // insert the adds\r\n+        ValueMapping val = field.getElementMapping();\r\n+        Collection add = ct.getAdded();\r\n+        Object mkey;\r\n+        if (!add.isEmpty()) {\r\n+            Row addRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_INSERT);\r\n+            addRow.setForeignKey(field.getJoinForeignKey(),\r\n+                field.getJoinColumnIO(), sm);\r\n+\r\n+            for (Iterator itr = add.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                HandlerStrategies.set(key, mkey, store, addRow, _kcols,\r\n+                    _kio, true);\r\n+                HandlerStrategies.set(val, map.get(mkey), store, addRow,\r\n+                    _vcols, _vio, true);\r\n+                rm.flushSecondaryRow(addRow);\r\n+            }\r\n+        }\r\n+\r\n+        // update the changes\r\n+        Collection change = ct.getChanged();\r\n+        if (!change.isEmpty()) {\r\n+            Row changeRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_UPDATE);\r\n+            changeRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+\r\n+            for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                HandlerStrategies.where(key, mkey, store, changeRow, _kcols);\r\n+                HandlerStrategies.set(val, map.get(mkey), store, changeRow,\r\n+                    _vcols, _vio, true);\r\n+                rm.flushSecondaryRow(changeRow);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\r\n+        return HandlerStrategies.toDataStoreValue(field.getElementMapping(),\r\n+            val, _vcols, store);\r\n+    }\r\n+\r\n+    public Object toKeyDataStoreValue(Object val, JDBCStore store) {\r\n+        return HandlerStrategies.toDataStoreValue(field.getKeyMapping(), val,\r\n+            _kcols, store);\r\n+    }\r\n+\r\n+    public Joins joinRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        if (traverse)\r\n+            HandlerStrategies.assertJoinable(field.getElementMapping());\r\n+        return joins;\r\n+    }\r\n+\r\n+    public Joins joinKeyRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        if (traverse)\r\n+            HandlerStrategies.assertJoinable(field.getKeyMapping());\r\n+        return joins;\r\n+    }\r\n+}\r"},{"sha":"a931b4c0c85a92ea3551190ba2be7a1583c7670b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","status":"added","additions":315,"deletions":0,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerRelationMapTableFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,315 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.util.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.schema.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+\r\n+/**\r\n+ * <p>Mapping for a map whose keys are controlled by a {@link ValueHandler}\r\n+ * and whose values are relations to other persistent objects.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0, 1.1.0\r\n+ */\r\n+public class HandlerRelationMapTableFieldStrategy\r\n+    extends MapTableFieldStrategy {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (HandlerRelationMapTableFieldStrategy.class);\r\n+\r\n+    private Column[] _kcols = null;\r\n+    private ColumnIO _kio = null;\r\n+    private boolean _kload = false;\r\n+\r\n+    public Column[] getKeyColumns(ClassMapping cls) {\r\n+        return _kcols;\r\n+    }\r\n+\r\n+    public Column[] getValueColumns(ClassMapping cls) {\r\n+        return field.getElementMapping().getColumns();\r\n+    }\r\n+\r\n+    public void selectKey(Select sel, ClassMapping key, OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\r\n+        sel.select(_kcols, joins);\r\n+    }\r\n+\r\n+    public void selectValue(Select sel, ClassMapping val,\r\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch, \r\n+        Joins joins) {\r\n+        sel.select(val, field.getElementMapping().getSelectSubclasses(),\r\n+            store, fetch, JDBCFetchConfiguration.EAGER_NONE, joins);\r\n+    }\r\n+\r\n+    public Result[] getResults(final OpenJPAStateManager sm,\r\n+        final JDBCStore store, final JDBCFetchConfiguration fetch,\r\n+        final int eagerMode, final Joins[] resJoins, boolean lrs)\r\n+        throws SQLException {\r\n+        ValueMapping elem = field.getElementMapping();\r\n+        final ClassMapping[] vals = elem.getIndependentTypeMappings();\r\n+        Union union = store.getSQLFactory().newUnion(vals.length);\r\n+        if (fetch.getSubclassFetchMode(elem.getTypeMapping())\r\n+            != JDBCFetchConfiguration.EAGER_JOIN)\r\n+            union.abortUnion();\r\n+        union.setLRS(lrs);\r\n+        union.select(new Union.Selector() {\r\n+            public void select(Select sel, int idx) {\r\n+                sel.select(_kcols);\r\n+                sel.whereForeignKey(field.getJoinForeignKey(),\r\n+                    sm.getObjectId(), field.getDefiningMapping(), store);\r\n+\r\n+                Joins joins = joinValueRelation(sel.newJoins(), vals[idx]);\r\n+                sel.select(vals[idx], field.getElementMapping().\r\n+                    getSelectSubclasses(), store, fetch, eagerMode, joins);\r\n+\r\n+                //### cheat: result joins only care about the relation path;\r\n+                //### thus we can use first mapping of union only\r\n+                if (idx == 0)\r\n+                    resJoins[1] = joins;\r\n+            }\r\n+        });\r\n+        Result res = union.execute(store, fetch);\r\n+        return new Result[]{ res, res };\r\n+    }\r\n+\r\n+    public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        return HandlerStrategies.loadObject(field.getKeyMapping(),\r\n+            sm, store, fetch, res, joins, _kcols, _kload);\r\n+    }\r\n+\r\n+    public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        ClassMapping val = res.getBaseMapping();\r\n+        if (val == null)\r\n+            val = field.getElementMapping().getIndependentTypeMappings()[0];\r\n+        return res.load(val, store, fetch, joins);\r\n+    }\r\n+\r\n+    public Joins joinValueRelation(Joins joins, ClassMapping val) {\r\n+        ValueMapping vm = field.getElementMapping();\r\n+        return joins.joinRelation(field.getName(), vm.getForeignKey(val), val,\r\n+            vm.getSelectSubclasses(), false, false);\r\n+    }\r\n+\r\n+    public void map(boolean adapt) {\r\n+        super.map(adapt);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        if (key.getHandler() == null)\r\n+            throw new MetaDataException(_loc.get(\"no-handler\", key));\r\n+        ValueMapping val = field.getElementMapping();\r\n+        if (val.getTypeCode() != JavaTypes.PC || val.isEmbeddedPC())\r\n+            throw new MetaDataException(_loc.get(\"not-relation\", val));\r\n+        assertNotMappedBy();\r\n+\r\n+        field.mapJoin(adapt, true);\r\n+        _kio = new ColumnIO();\r\n+        DBDictionary dict = field.getMappingRepository().getDBDictionary();\r\n+        _kcols = HandlerStrategies.map(key, \r\n+            dict.getValidColumnName(\"key\", field.getTable()), _kio, adapt);\r\n+\r\n+        if (val.getTypeMapping().isMapped()) {\r\n+            ValueMappingInfo vinfo = val.getValueInfo();\r\n+            ForeignKey fk = vinfo.getTypeJoin(val, \"value\", false, adapt);\r\n+            val.setForeignKey(fk);\r\n+            val.setColumnIO(vinfo.getColumnIO());\r\n+        } else\r\n+            RelationStrategies.mapRelationToUnmappedPC(val, \"value\", adapt);\r\n+\r\n+        val.mapConstraints(\"value\", adapt);\r\n+        field.mapPrimaryKey(adapt);\r\n+    }\r\n+\r\n+    public void initialize() {\r\n+        _kload = field.getKeyMapping().getHandler().\r\n+            objectValueRequiresLoad(field.getKeyMapping());\r\n+    }\r\n+\r\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        insert(sm, store, rm, (Map) sm.fetchObject(field.getIndex()));\r\n+    }\r\n+\r\n+    private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\r\n+        Map map)\r\n+        throws SQLException {\r\n+        if (map == null || map.isEmpty())\r\n+            return;\r\n+\r\n+        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\r\n+        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\r\n+            sm);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ValueMapping val = field.getElementMapping();\r\n+        StoreContext ctx = store.getContext();\r\n+        OpenJPAStateManager valsm;\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            HandlerStrategies.set(key, entry.getKey(), store, row, _kcols,\r\n+                _kio, true);\r\n+            valsm = RelationStrategies.getStateManager(entry.getValue(),\r\n+                ctx);\r\n+            val.setForeignKey(row, valsm);\r\n+            rm.flushSecondaryRow(row);\r\n+        }\r\n+    }\r\n+\r\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Map map = (Map) sm.fetchObject(field.getIndex());\r\n+        ChangeTracker ct = null;\r\n+        if (map instanceof Proxy) {\r\n+            Proxy proxy = (Proxy) map;\r\n+            if (Proxies.isOwner(proxy, sm, field.getIndex()))\r\n+                ct = proxy.getChangeTracker();\r\n+        }\r\n+\r\n+        // if no fine-grained change tracking then just delete and reinsert\r\n+        if (ct == null || !ct.isTracking()) {\r\n+            delete(sm, store, rm);\r\n+            insert(sm, store, rm, map);\r\n+            return;\r\n+        }\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ValueMapping val = field.getElementMapping();\r\n+        StoreContext ctx = store.getContext();\r\n+        OpenJPAStateManager valsm;\r\n+\r\n+        // update the changes; note that we have to featureSelection changes as\r\n+        // delete-then-insert if we have a foreign key action, because\r\n+        // secondary row updates aren't part of the constraint graph\r\n+        Collection change = ct.getChanged();\r\n+        boolean canChange = val.getForeignKey().isLogical();\r\n+        Object mkey;\r\n+        if (canChange && !change.isEmpty()) {\r\n+            Row changeRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_UPDATE);\r\n+            changeRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+\r\n+            for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                HandlerStrategies.where(key, mkey, store, changeRow, _kcols);\r\n+                valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\r\n+                val.setForeignKey(changeRow, valsm);\r\n+                rm.flushSecondaryRow(changeRow);\r\n+            }\r\n+        }\r\n+\r\n+        // delete the removes\r\n+        Collection rem = ct.getRemoved();\r\n+        if (!rem.isEmpty() || (!canChange && !change.isEmpty())) {\r\n+            Row delRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_DELETE);\r\n+            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+\r\n+            for (Iterator itr = rem.iterator(); itr.hasNext();) {\r\n+                HandlerStrategies.where(key, itr.next(), store, delRow,\r\n+                    _kcols);\r\n+                rm.flushSecondaryRow(delRow);\r\n+            }\r\n+            if (!canChange && !change.isEmpty()) {\r\n+                for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                    HandlerStrategies.where(key, itr.next(), store, delRow,\r\n+                        _kcols);\r\n+                    rm.flushSecondaryRow(delRow);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        // insert the adds\r\n+        Collection add = ct.getAdded();\r\n+        if (!add.isEmpty() || (!canChange && !change.isEmpty())) {\r\n+            Row addRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_INSERT);\r\n+            addRow.setForeignKey(field.getJoinForeignKey(),\r\n+                field.getJoinColumnIO(), sm);\r\n+\r\n+            for (Iterator itr = add.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                HandlerStrategies.set(key, mkey, store, addRow, _kcols,\r\n+                    _kio, true);\r\n+                valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\r\n+                val.setForeignKey(addRow, valsm);\r\n+                rm.flushSecondaryRow(addRow);\r\n+            }\r\n+            if (!canChange && !change.isEmpty()) {\r\n+                for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                    mkey = itr.next();\r\n+                    HandlerStrategies.set(key, mkey, store, addRow, _kcols,\r\n+                        _kio, true);\r\n+                    valsm = RelationStrategies.getStateManager(map.get(mkey),\r\n+                        ctx);\r\n+                    val.setForeignKey(addRow, valsm);\r\n+                    rm.flushSecondaryRow(addRow);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public Joins joinRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        ValueMapping val = field.getElementMapping();\r\n+        ClassMapping[] clss = val.getIndependentTypeMappings();\r\n+        if (clss.length != 1) {\r\n+            if (traverse)\r\n+                throw RelationStrategies.unjoinable(val);\r\n+            return joins;\r\n+        }\r\n+        if (forceOuter)\r\n+            return joins.outerJoinRelation(field.getName(),\r\n+                val.getForeignKey(clss[0]), clss[0], val.getSelectSubclasses(),\r\n+                false, false);\r\n+        return joins.joinRelation(field.getName(),\r\n+            val.getForeignKey(clss[0]), clss[0], val.getSelectSubclasses(), \r\n+            false, false);\r\n+    }\r\n+\r\n+    public Joins joinKeyRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        if (traverse)\r\n+            HandlerStrategies.assertJoinable(field.getKeyMapping());\r\n+        return joins;\r\n+    }\r\n+\r\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\r\n+        return RelationStrategies.toDataStoreValue(field.getElementMapping(),\r\n+            val, store);\r\n+    }\r\n+\r\n+    public Object toKeyDataStoreValue(Object val, JDBCStore store) {\r\n+        return HandlerStrategies.toDataStoreValue(field.getKeyMapping(), val,\r\n+            _kcols, store);\r\n+    }\r\n+}\r"},{"sha":"d105060dd0197b49187204efa192ac67b30e4b5c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -112,7 +112,8 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n             && base.getJoinablePCSubclassMappings().length == 0))\n             return base.getDescribedType();\n \n-        Object cls = res.getObject(disc.getColumns()[0], -1, null);\n+        Object cls =\n+                res.getObject(disc.getColumns()[0], disc.getJavaType(), null);\n         return getClass(cls, store);\n     }\n "},{"sha":"9a1a0ad24cb6e5cea86dc0c8e12d647e9c7500cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"added","additions":219,"deletions":0,"changes":219,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,219 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.io.InputStream;\r\n+import java.io.Reader;\r\n+import java.sql.SQLException;\r\n+import java.sql.Types;\r\n+\r\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\r\n+import org.apache.openjpa.jdbc.sql.Result;\r\n+import org.apache.openjpa.jdbc.sql.Row;\r\n+import org.apache.openjpa.jdbc.sql.RowManager;\r\n+import org.apache.openjpa.jdbc.sql.Select;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+\r\n+/**\r\n+ * Direct mapping from a stream value to a column.\r\n+ *\r\n+ * @author Ignacio Andreu\r\n+ * @since 1.1.0\r\n+ */\r\n+public class LobFieldStrategy extends AbstractFieldStrategy {\r\n+\r\n+    private int fieldType;\r\n+    private boolean isBlob;\r\n+\r\n+    public void map(boolean adapt) {\r\n+        assertNotMappedBy();\r\n+        field.mapJoin(adapt, false);\r\n+        field.getKeyMapping().getValueInfo().assertNoSchemaComponents\r\n+            (field.getKey(), !adapt);\r\n+        field.getElementMapping().getValueInfo().assertNoSchemaComponents\r\n+            (field.getElement(), !adapt);\r\n+        field.setStream(true);\r\n+        ValueMappingInfo vinfo = field.getValueInfo();\r\n+        vinfo.assertNoJoin(field, true);\r\n+        vinfo.assertNoForeignKey(field, !adapt);\r\n+        Column tmpCol = new Column();\r\n+        tmpCol.setName(field.getName());\r\n+        tmpCol.setType(fieldType);\r\n+        tmpCol.setJavaType(field.getTypeCode());\r\n+        \r\n+        tmpCol.setSize(-1);\r\n+\r\n+        Column[] cols = vinfo.getColumns(field, field.getName(),\r\n+            new Column[]{ tmpCol }, field.getTable(), adapt);\r\n+\r\n+        field.setColumns(cols);\r\n+        field.setColumnIO(vinfo.getColumnIO());\r\n+        field.mapConstraints(field.getName(), adapt);\r\n+        field.mapPrimaryKey(adapt);\r\n+    }\r\n+\r\n+    public Boolean isCustomInsert(OpenJPAStateManager sm, JDBCStore store) {\r\n+        return null;\r\n+    }\r\n+\r\n+    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Select sel = createSelect(sm, store);\r\n+        store.getDBDictionary().deleteStream(store, sel);\r\n+    }\r\n+    \r\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Object ob = toDataStoreValue(sm.fetchObjectField\r\n+            (field.getIndex()), store);\r\n+        Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\r\n+        if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n+            Select sel = createSelect(sm, store);\r\n+            if (isBlob) {\r\n+                store.getDBDictionary().insertBlobForStreamingLoad\r\n+                    (row, field.getColumns()[0], store, ob, sel);\r\n+            } else {\r\n+                store.getDBDictionary().insertClobForStreamingLoad\r\n+                    (row, field.getColumns()[0], ob);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void customInsert(OpenJPAStateManager sm, JDBCStore store)\r\n+        throws SQLException {\r\n+        Object ob = toDataStoreValue(sm.fetchObjectField\r\n+            (field.getIndex()), store);\r\n+        if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n+            if (ob != null) {\r\n+                Select sel = createSelect(sm, store);\r\n+                if (isBlob) {\r\n+                    store.getDBDictionary().updateBlob\r\n+                        (sel, store, (InputStream)ob);\r\n+                } else {\r\n+                    store.getDBDictionary().updateClob\r\n+                        (sel, store, (Reader)ob);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    public Boolean isCustomUpdate(OpenJPAStateManager sm, JDBCStore store) {\r\n+        return null;\r\n+    }\r\n+\r\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Object ob = toDataStoreValue(sm.fetchObjectField\r\n+            (field.getIndex()), store);\r\n+        if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\r\n+            Select sel = createSelect(sm, store);\r\n+            if (isBlob) {\r\n+                store.getDBDictionary().insertBlobForStreamingLoad\r\n+                    (row, field.getColumns()[0], store, ob, sel);\r\n+            } else {\r\n+                store.getDBDictionary().insertClobForStreamingLoad\r\n+                    (row, field.getColumns()[0], sel);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void customUpdate(OpenJPAStateManager sm, JDBCStore store)\r\n+        throws SQLException {\r\n+        Object ob = toDataStoreValue(sm.fetchObjectField\r\n+                (field.getIndex()), store);\r\n+        if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n+            if (ob != null) {\r\n+                Select sel = createSelect(sm, store);\r\n+                if (isBlob) {\r\n+                    store.getDBDictionary().updateBlob\r\n+                        (sel, store, (InputStream)ob);\r\n+                } else {\r\n+                    store.getDBDictionary().updateClob\r\n+                        (sel, store, (Reader)ob);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch) {\r\n+        if (type == Select.TYPE_JOINLESS && sel.isSelected(field.getTable()))\r\n+            return 1;\r\n+        return 0;\r\n+    }\r\n+\r\n+    public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, int eagerMode) {\r\n+        sel.select(field.getColumns()[0], field.join(sel));\r\n+        return 1;\r\n+    }\r\n+\r\n+    public void load(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res) throws SQLException {\r\n+        Column col = field.getColumns()[0];\r\n+        if (res.contains(col)) {\r\n+            if (isBlob) {\r\n+                sm.storeObject(field.getIndex(), res.getLOBStream(store, col));\r\n+            } else {\r\n+                sm.storeObject(field.getIndex(), res.getCharacterStream(col));\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    protected void assertNotMappedBy() {\r\n+        if (field != null && field.getMappedBy() != null)\r\n+            throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    public void setFieldMapping(FieldMapping owner) {\r\n+        field = owner;\r\n+        if (owner.getElementMapping().getMappingRepository().getDBDictionary()\r\n+            instanceof PostgresDictionary) {\r\n+            fieldType = Types.INTEGER;\r\n+            isBlob = true;\r\n+            field.setTypeCode(JavaTypes.INT);\r\n+        } else {\r\n+            if (owner.getType().isAssignableFrom(InputStream.class)) {\r\n+                isBlob = true;\r\n+                fieldType = Types.BLOB;\r\n+            } else if (owner.getType().isAssignableFrom(Reader.class)) {\r\n+                isBlob = false;\r\n+                fieldType = Types.CLOB;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private Select createSelect(OpenJPAStateManager sm, JDBCStore store) {\r\n+        Select sel = store.getSQLFactory().newSelect();\r\n+        sel.select(field.getColumns()[0]);\r\n+        sel.selectPrimaryKey(field.getDefiningMapping());\r\n+        sel.wherePrimaryKey\r\n+            (sm.getObjectId(), field.getDefiningMapping(), store);\r\n+        sel.setLob(true);\r\n+        return sel;\r\n+    }\r\n+    \r\n+}\r"},{"sha":"e5cf3a6b335b2ffaa2a1807f5bf6e9642fd68600","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -187,7 +187,8 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, int eagerMode) {\n-        if (sel.isDistinct())\n+        if (sel.isDistinct() || \n+            eagerMode == JDBCFetchConfiguration.EAGER_NONE)\n             return -1;\n         sel.select(field.getColumns()[0], field.join(sel));\n         return 1;"},{"sha":"89ba3c5835c489508db8409058b4afde830a0f48","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NanoPrecisionTimestampVersionStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import org.apache.openjpa.lib.util.TimestampHelper;\r\n+\r\n+/**\r\n+ * Uses a timestamp for optimistic versioning with nanosecond\r\n+ * precision.\r\n+ *\r\n+ * @author Albert Lee\r\n+ */\r\n+public class NanoPrecisionTimestampVersionStrategy\r\n+    extends TimestampVersionStrategy {\r\n+\r\n+    public static final String ALIAS = \"nano-timestamp\";\r\n+\r\n+    public String getAlias() {\r\n+        return ALIAS;\r\n+    }\r\n+\r\n+    protected Object nextVersion(Object version) {\r\n+        return TimestampHelper.getNanoPrecisionTimestamp();\r\n+    }\r\n+}\r"},{"sha":"1436431282a037f7cda92e95aa1a0ccb9efd3af5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -409,9 +409,11 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         // clone it for a to-many eager select can result in a clone that\n         // produces invalid SQL\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n+        boolean forceInner = fetch.hasFetchInnerJoin(field.getFullName(false)) ?\n+                true : false;\n         sel.select(cls, field.getSelectSubclasses(), store, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN,\n-            eagerJoin(sel.newJoins(), cls, false));\n+            eagerJoin(sel.newJoins(), cls, forceInner));\n     }\n \n     /**"},{"sha":"cc2c1eb5834beda96e35fb9a77cf0431b4710493","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","status":"added","additions":290,"deletions":0,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationHandlerMapTableFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,290 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.util.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.schema.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+\r\n+/**\r\n+ * <p>Mapping for a map whose keys are relations to other persistent objects\r\n+ * and whose values are controlled by a {@link ValueHandler}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0, 1.1.0\r\n+ */\r\n+public class RelationHandlerMapTableFieldStrategy\r\n+    extends MapTableFieldStrategy {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (RelationHandlerMapTableFieldStrategy.class);\r\n+\r\n+    private Column[] _vcols = null;\r\n+    private ColumnIO _vio = null;\r\n+    private boolean _vload = false;\r\n+\r\n+    public Column[] getKeyColumns(ClassMapping cls) {\r\n+        return field.getKeyMapping().getColumns();\r\n+    }\r\n+\r\n+    public Column[] getValueColumns(ClassMapping cls) {\r\n+        return _vcols;\r\n+    }\r\n+\r\n+    public void selectKey(Select sel, ClassMapping key, OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\r\n+        sel.select(key, field.getKeyMapping().getSelectSubclasses(),\r\n+            store, fetch, JDBCFetchConfiguration.EAGER_NONE, joins);\r\n+    }\r\n+\r\n+    public void selectValue(Select sel, ClassMapping val,\r\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch, \r\n+        Joins joins) {\r\n+        sel.select(_vcols, joins);\r\n+    }\r\n+\r\n+    public Result[] getResults(final OpenJPAStateManager sm,\r\n+        final JDBCStore store, final JDBCFetchConfiguration fetch,\r\n+        final int eagerMode, final Joins[] resJoins, boolean lrs)\r\n+        throws SQLException {\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        final ClassMapping[] keys = key.getIndependentTypeMappings();\r\n+        Union union = store.getSQLFactory().newUnion(keys.length);\r\n+        if (fetch.getSubclassFetchMode(key.getTypeMapping()) \r\n+            != JDBCFetchConfiguration.EAGER_JOIN)\r\n+            union.abortUnion();\r\n+        union.setLRS(lrs);\r\n+        union.select(new Union.Selector() {\r\n+            public void select(Select sel, int idx) {\r\n+                sel.select(_vcols);\r\n+                sel.whereForeignKey(field.getJoinForeignKey(),\r\n+                    sm.getObjectId(), field.getDefiningMapping(), store);\r\n+\r\n+                Joins joins = joinKeyRelation(sel.newJoins(), keys[idx]);\r\n+                sel.select(keys[idx], field.getKeyMapping().\r\n+                    getSelectSubclasses(), store, fetch, eagerMode, joins);\r\n+\r\n+                //### cheat: result joins only care about the relation path;\r\n+                //### thus we can use first mapping of union only\r\n+                if (idx == 0)\r\n+                    resJoins[0] = joins;\r\n+            }\r\n+        });\r\n+        Result res = union.execute(store, fetch);\r\n+        return new Result[]{ res, res };\r\n+    }\r\n+\r\n+    public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        ClassMapping key = res.getBaseMapping();\r\n+        if (key == null)\r\n+            key = field.getKeyMapping().getIndependentTypeMappings()[0];\r\n+        return res.load(key, store, fetch, joins);\r\n+    }\r\n+\r\n+    public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        return HandlerStrategies.loadObject(field.getElementMapping(),\r\n+            sm, store, fetch, res, joins, _vcols, _vload);\r\n+    }\r\n+\r\n+    public Joins joinKeyRelation(Joins joins, ClassMapping key) {\r\n+        ValueMapping vm = field.getKeyMapping();\r\n+        return joins.joinRelation(field.getName(), vm.getForeignKey(key), key,\r\n+            vm.getSelectSubclasses(), false, false);\r\n+    }\r\n+\r\n+    public void map(boolean adapt) {\r\n+        super.map(adapt);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        if (key.getTypeCode() != JavaTypes.PC || key.isEmbeddedPC())\r\n+            throw new MetaDataException(_loc.get(\"not-relation\", key));\r\n+        ValueMapping val = field.getElementMapping();\r\n+        if (val.getHandler() == null)\r\n+            throw new MetaDataException(_loc.get(\"no-handler\", val));\r\n+        assertNotMappedBy();\r\n+\r\n+        field.mapJoin(adapt, true);\r\n+        _vio = new ColumnIO();\r\n+        _vcols = HandlerStrategies.map(val, \"value\", _vio, adapt);\r\n+\r\n+        if (key.getTypeMapping().isMapped()) {\r\n+            ValueMappingInfo vinfo = key.getValueInfo();\r\n+            ForeignKey fk = vinfo.getTypeJoin(key, \"key\", false, adapt);\r\n+            key.setForeignKey(fk);\r\n+            key.setColumnIO(vinfo.getColumnIO());\r\n+        } else\r\n+            RelationStrategies.mapRelationToUnmappedPC(key, \"key\", adapt);\r\n+\r\n+        key.mapConstraints(\"key\", adapt);\r\n+        field.mapPrimaryKey(adapt);\r\n+    }\r\n+\r\n+    public void initialize() {\r\n+        _vload = field.getElementMapping().getHandler().\r\n+            objectValueRequiresLoad(field.getElementMapping());\r\n+    }\r\n+\r\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        insert(sm, store, rm, (Map) sm.fetchObject(field.getIndex()));\r\n+    }\r\n+\r\n+    private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\r\n+        Map map)\r\n+        throws SQLException {\r\n+        if (map == null || map.isEmpty())\r\n+            return;\r\n+\r\n+        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\r\n+        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\r\n+            sm);\r\n+\r\n+        ValueMapping val = field.getElementMapping();\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        StoreContext ctx = store.getContext();\r\n+        OpenJPAStateManager keysm;\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            keysm = RelationStrategies.getStateManager(entry.getKey(), ctx);\r\n+            key.setForeignKey(row, keysm);\r\n+            HandlerStrategies.set(val, entry.getValue(), store, row, _vcols,\r\n+                _vio, true);\r\n+            rm.flushSecondaryRow(row);\r\n+        }\r\n+    }\r\n+\r\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Map map = (Map) sm.fetchObject(field.getIndex());\r\n+        ChangeTracker ct = null;\r\n+        if (map instanceof Proxy) {\r\n+            Proxy proxy = (Proxy) map;\r\n+            if (Proxies.isOwner(proxy, sm, field.getIndex()))\r\n+                ct = proxy.getChangeTracker();\r\n+        }\r\n+\r\n+        // if no fine-grained change tracking then just delete and reinsert\r\n+        if (ct == null || !ct.isTracking()) {\r\n+            delete(sm, store, rm);\r\n+            insert(sm, store, rm, map);\r\n+            return;\r\n+        }\r\n+\r\n+        // delete the removes\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        StoreContext ctx = store.getContext();\r\n+        Collection rem = ct.getRemoved();\r\n+        OpenJPAStateManager keysm;\r\n+        if (!rem.isEmpty()) {\r\n+            Row delRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_DELETE);\r\n+            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+            for (Iterator itr = rem.iterator(); itr.hasNext();) {\r\n+                keysm = RelationStrategies.getStateManager(itr.next(), ctx);\r\n+                key.whereForeignKey(delRow, keysm);\r\n+                rm.flushSecondaryRow(delRow);\r\n+            }\r\n+        }\r\n+\r\n+        // insert the adds\r\n+        ValueMapping val = field.getElementMapping();\r\n+        Collection add = ct.getAdded();\r\n+        Object mkey;\r\n+        if (!add.isEmpty()) {\r\n+            Row addRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_INSERT);\r\n+            addRow.setForeignKey(field.getJoinForeignKey(),\r\n+                field.getJoinColumnIO(), sm);\r\n+\r\n+            for (Iterator itr = add.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                keysm = RelationStrategies.getStateManager(mkey, ctx);\r\n+                key.setForeignKey(addRow, keysm);\r\n+                HandlerStrategies.set(val, map.get(mkey), store, addRow,\r\n+                    _vcols, _vio, true);\r\n+                rm.flushSecondaryRow(addRow);\r\n+            }\r\n+        }\r\n+\r\n+        // update the changes\r\n+        Collection change = ct.getChanged();\r\n+        if (!change.isEmpty()) {\r\n+            Row changeRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_UPDATE);\r\n+            changeRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+\r\n+            for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                keysm = RelationStrategies.getStateManager(mkey, ctx);\r\n+                key.whereForeignKey(changeRow, keysm);\r\n+                HandlerStrategies.set(val, map.get(mkey), store, changeRow,\r\n+                    _vcols, _vio, true);\r\n+                rm.flushSecondaryRow(changeRow);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public Joins joinRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        if (traverse)\r\n+            HandlerStrategies.assertJoinable(field.getElementMapping());\r\n+        return joins;\r\n+    }\r\n+\r\n+    public Joins joinKeyRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ClassMapping[] clss = key.getIndependentTypeMappings();\r\n+        if (clss.length != 1) {\r\n+            if (traverse)\r\n+                throw RelationStrategies.unjoinable(field.getKeyMapping());\r\n+            return joins;\r\n+        }\r\n+        if (forceOuter)\r\n+            return joins.outerJoinRelation(field.getName(),\r\n+                key.getForeignKey(clss[0]), clss[0], key.getSelectSubclasses(),\r\n+                false, false);\r\n+        return joins.joinRelation(field.getName(),\r\n+            key.getForeignKey(clss[0]), clss[0], key.getSelectSubclasses(),\r\n+            false, false);\r\n+    }\r\n+\r\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\r\n+        return HandlerStrategies.toDataStoreValue(field.getElementMapping(),\r\n+            val, _vcols, store);\r\n+    }\r\n+\r\n+    public Object toKeyDataStoreValue(Object val, JDBCStore store) {\r\n+        return RelationStrategies.toDataStoreValue(field.getKeyMapping(), val,\r\n+            store);\r\n+    }\r\n+}\r"},{"sha":"60770b6cfeb3ecb2f617e29636c7aa95c7ba0261","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","status":"added","additions":375,"deletions":0,"changes":375,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationRelationMapTableFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,375 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.meta.strats;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.util.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.schema.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+\r\n+/**\r\n+ * <p>Mapping for a map whose keys and values are both relations to other\r\n+ * persistent objects.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0, 1.1.0\r\n+ */\r\n+public class RelationRelationMapTableFieldStrategy\r\n+    extends MapTableFieldStrategy {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (RelationRelationMapTableFieldStrategy.class);\r\n+\r\n+    private String _keyRelationName = null;\r\n+\r\n+    public Column[] getKeyColumns(ClassMapping cls) {\r\n+        return field.getKeyMapping().getColumns();\r\n+    }\r\n+\r\n+    public Column[] getValueColumns(ClassMapping cls) {\r\n+        return field.getElementMapping().getColumns();\r\n+    }\r\n+\r\n+    public void selectKey(Select sel, ClassMapping key, OpenJPAStateManager sm,\r\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\r\n+        sel.select(key, field.getKeyMapping().getSelectSubclasses(),\r\n+            store, fetch, JDBCFetchConfiguration.EAGER_NONE, joins);\r\n+    }\r\n+\r\n+    public void selectValue(Select sel, ClassMapping val,\r\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch, \r\n+        Joins joins) {\r\n+        sel.select(val, field.getElementMapping().getSelectSubclasses(),\r\n+            store, fetch, JDBCFetchConfiguration.EAGER_NONE, joins);\r\n+    }\r\n+\r\n+    public Result[] getResults(final OpenJPAStateManager sm,\r\n+        final JDBCStore store, final JDBCFetchConfiguration fetch,\r\n+        final int eagerMode, final Joins[] resJoins, boolean lrs)\r\n+        throws SQLException {\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        final ClassMapping[] keys = key.getIndependentTypeMappings();\r\n+        Union kunion = store.getSQLFactory().newUnion(keys.length);\r\n+        if (fetch.getSubclassFetchMode(key.getTypeMapping())\r\n+            != JDBCFetchConfiguration.EAGER_JOIN)\r\n+            kunion.abortUnion();\r\n+        kunion.setLRS(lrs);\r\n+        kunion.select(new Union.Selector() {\r\n+            public void select(Select sel, int idx) {\r\n+                sel.whereForeignKey(field.getJoinForeignKey(),\r\n+                    sm.getObjectId(), field.getDefiningMapping(), store);\r\n+\r\n+                // order before select in case we're faking union with\r\n+                // multiple selects; order vals used to merge results\r\n+                Joins joins = joinKeyRelation(sel.newJoins(), keys[idx]);\r\n+                sel.orderBy(field.getKeyMapping().getColumns(), true, true);\r\n+                sel.select(keys[idx], field.getKeyMapping().\r\n+                    getSelectSubclasses(), store, fetch, eagerMode, joins);\r\n+\r\n+                //### cheat: result joins only care about the relation path;\r\n+                //### thus we can use first mapping of union only\r\n+                if (idx == 0)\r\n+                    resJoins[0] = joins;\r\n+            }\r\n+        });\r\n+\r\n+        ValueMapping val = field.getElementMapping();\r\n+        final ClassMapping[] vals = val.getIndependentTypeMappings();\r\n+        Union vunion = store.getSQLFactory().newUnion(vals.length);\r\n+        if (fetch.getSubclassFetchMode(val.getTypeMapping())\r\n+            != JDBCFetchConfiguration.EAGER_JOIN)\r\n+            vunion.abortUnion();\r\n+        vunion.setLRS(lrs);\r\n+        vunion.select(new Union.Selector() {\r\n+            public void select(Select sel, int idx) {\r\n+                sel.whereForeignKey(field.getJoinForeignKey(),\r\n+                    sm.getObjectId(), field.getDefiningMapping(), store);\r\n+\r\n+                // order before select in case we're faking union with\r\n+                // multiple selects; order vals used to merge results\r\n+                Joins joins = joinValueRelation(sel.newJoins(), vals[idx]);\r\n+                sel.orderBy(field.getKeyMapping().getColumns(), true, true);\r\n+                sel.select(vals[idx], field.getElementMapping().\r\n+                    getSelectSubclasses(), store, fetch, eagerMode, joins);\r\n+\r\n+                //### cheat: result joins only care about the relation path;\r\n+                //### thus we can use first mapping of union only\r\n+                if (idx == 0)\r\n+                    resJoins[1] = joins;\r\n+            }\r\n+        });\r\n+\r\n+        Result kres = null;\r\n+        Result vres = null;\r\n+        try {\r\n+            kres = kunion.execute(store, fetch);\r\n+            vres = vunion.execute(store, fetch);\r\n+            return new Result[]{ kres, vres };\r\n+        } catch (SQLException se) {\r\n+            if (kres != null)\r\n+                kres.close();\r\n+            if (vres != null)\r\n+                vres.close();\r\n+            throw se;\r\n+        }\r\n+    }\r\n+\r\n+    public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        ClassMapping key = res.getBaseMapping();\r\n+        if (key == null)\r\n+            key = field.getKeyMapping().getIndependentTypeMappings()[0];\r\n+        return res.load(key, store, fetch, joins);\r\n+    }\r\n+\r\n+    public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\r\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\r\n+        throws SQLException {\r\n+        ClassMapping val = res.getBaseMapping();\r\n+        if (val == null)\r\n+            val = field.getElementMapping().getIndependentTypeMappings()[0];\r\n+        return res.load(val, store, fetch, joins);\r\n+    }\r\n+\r\n+    public Joins joinKeyRelation(Joins joins, ClassMapping key) {\r\n+        ValueMapping vm = field.getKeyMapping();\r\n+        return joins.joinRelation(_keyRelationName, vm.getForeignKey(key), key,\r\n+            vm.getSelectSubclasses(), false, false);\r\n+    }\r\n+\r\n+    public Joins joinValueRelation(Joins joins, ClassMapping val) {\r\n+        ValueMapping vm = field.getElementMapping();\r\n+        return joins.joinRelation(field.getName(), vm.getForeignKey(val), val,\r\n+            vm.getSelectSubclasses(), false, false);\r\n+    }\r\n+\r\n+    public void map(boolean adapt) {\r\n+        super.map(adapt);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        if (key.getTypeCode() != JavaTypes.PC || key.isEmbeddedPC())\r\n+            throw new MetaDataException(_loc.get(\"not-relation\", key));\r\n+        ValueMapping val = field.getElementMapping();\r\n+        if (val.getTypeCode() != JavaTypes.PC || val.isEmbeddedPC())\r\n+            throw new MetaDataException(_loc.get(\"not-relation\", val));\r\n+        assertNotMappedBy();\r\n+\r\n+        field.mapJoin(adapt, true);\r\n+        mapTypeJoin(key, \"key\", adapt);\r\n+        mapTypeJoin(val, \"value\", adapt);\r\n+\r\n+        field.mapPrimaryKey(adapt);\r\n+    }\r\n+\r\n+    /**\r\n+     * Map the given value's join to its persistent type.\r\n+     */\r\n+    private void mapTypeJoin(ValueMapping vm, String name, boolean adapt) {\r\n+        if (vm.getTypeMapping().isMapped()) {\r\n+            ValueMappingInfo vinfo = vm.getValueInfo();\r\n+            ForeignKey fk = vinfo.getTypeJoin(vm, name, false, adapt);\r\n+            vm.setForeignKey(fk);\r\n+            vm.setColumnIO(vinfo.getColumnIO());\r\n+        } else\r\n+            RelationStrategies.mapRelationToUnmappedPC(vm, name, adapt);\r\n+        vm.mapConstraints(name, adapt);\r\n+    }\r\n+\r\n+    public void initialize() {\r\n+        _keyRelationName = field.getName() + \":key\";\r\n+    }\r\n+\r\n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        insert(sm, rm, (Map) sm.fetchObject(field.getIndex()));\r\n+    }\r\n+\r\n+    private void insert(OpenJPAStateManager sm, RowManager rm, Map map)\r\n+        throws SQLException {\r\n+        if (map == null || map.isEmpty())\r\n+            return;\r\n+\r\n+        Row row = rm.getSecondaryRow(field.getTable(), Row.ACTION_INSERT);\r\n+        row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\r\n+            sm);\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ValueMapping val = field.getElementMapping();\r\n+        StoreContext ctx = sm.getContext();\r\n+        OpenJPAStateManager keysm, valsm;\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            keysm = RelationStrategies.getStateManager(entry.getKey(), ctx);\r\n+            valsm = RelationStrategies.getStateManager(entry.getValue(), ctx);\r\n+            key.setForeignKey(row, keysm);\r\n+            val.setForeignKey(row, valsm);\r\n+            rm.flushSecondaryRow(row);\r\n+        }\r\n+    }\r\n+\r\n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Map map = (Map) sm.fetchObject(field.getIndex());\r\n+        ChangeTracker ct = null;\r\n+        if (map instanceof Proxy) {\r\n+            Proxy proxy = (Proxy) map;\r\n+            if (Proxies.isOwner(proxy, sm, field.getIndex()))\r\n+                ct = proxy.getChangeTracker();\r\n+        }\r\n+\r\n+        // if no fine-grained change tracking then just delete and reinsert\r\n+        if (ct == null || !ct.isTracking()) {\r\n+            delete(sm, store, rm);\r\n+            insert(sm, rm, map);\r\n+            return;\r\n+        }\r\n+\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ValueMapping val = field.getElementMapping();\r\n+        StoreContext ctx = store.getContext();\r\n+        OpenJPAStateManager keysm, valsm;\r\n+\r\n+        // update the changes; note that we have to featureSelection changes as\r\n+        // delete-then-insert if we have a foreign key action, because\r\n+        // secondary row updates aren't part of the constraint graph\r\n+        Collection change = ct.getChanged();\r\n+        boolean canChange = val.getForeignKey().isLogical();\r\n+        Object mkey;\r\n+        if (canChange && !change.isEmpty()) {\r\n+            Row changeRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_UPDATE);\r\n+            changeRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+\r\n+            for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                keysm = RelationStrategies.getStateManager(mkey, ctx);\r\n+                valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\r\n+                key.whereForeignKey(changeRow, keysm);\r\n+                val.setForeignKey(changeRow, valsm);\r\n+                rm.flushSecondaryRow(changeRow);\r\n+            }\r\n+        }\r\n+\r\n+        // delete the removes\r\n+        Collection rem = ct.getRemoved();\r\n+        if (!rem.isEmpty() || (!canChange && !change.isEmpty())) {\r\n+            Row delRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_DELETE);\r\n+            delRow.whereForeignKey(field.getJoinForeignKey(), sm);\r\n+\r\n+            for (Iterator itr = rem.iterator(); itr.hasNext();) {\r\n+                keysm = RelationStrategies.getStateManager(itr.next(), ctx);\r\n+                key.whereForeignKey(delRow, keysm);\r\n+                rm.flushSecondaryRow(delRow);\r\n+            }\r\n+            if (!canChange && !change.isEmpty()) {\r\n+                for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                    keysm = RelationStrategies.getStateManager(itr.next(),\r\n+                        ctx);\r\n+                    key.whereForeignKey(delRow, keysm);\r\n+                    rm.flushSecondaryRow(delRow);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        // insert the adds\r\n+        Collection add = ct.getAdded();\r\n+        if (!add.isEmpty() || (!canChange && !change.isEmpty())) {\r\n+            Row addRow = rm.getSecondaryRow(field.getTable(),\r\n+                Row.ACTION_INSERT);\r\n+            addRow.setForeignKey(field.getJoinForeignKey(),\r\n+                field.getJoinColumnIO(), sm);\r\n+\r\n+            for (Iterator itr = add.iterator(); itr.hasNext();) {\r\n+                mkey = itr.next();\r\n+                keysm = RelationStrategies.getStateManager(mkey, ctx);\r\n+                valsm = RelationStrategies.getStateManager(map.get(mkey), ctx);\r\n+                key.setForeignKey(addRow, keysm);\r\n+                val.setForeignKey(addRow, valsm);\r\n+                rm.flushSecondaryRow(addRow);\r\n+            }\r\n+            if (!canChange && !change.isEmpty()) {\r\n+                for (Iterator itr = change.iterator(); itr.hasNext();) {\r\n+                    mkey = itr.next();\r\n+                    keysm = RelationStrategies.getStateManager(mkey, ctx);\r\n+                    valsm = RelationStrategies.getStateManager(map.get(mkey),\r\n+                        ctx);\r\n+                    key.setForeignKey(addRow, keysm);\r\n+                    val.setForeignKey(addRow, valsm);\r\n+                    rm.flushSecondaryRow(addRow);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public Joins joinRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        ValueMapping val = field.getElementMapping();\r\n+        ClassMapping[] clss = val.getIndependentTypeMappings();\r\n+        if (clss.length != 1) {\r\n+            if (traverse)\r\n+                throw RelationStrategies.unjoinable(val);\r\n+            return joins;\r\n+        }\r\n+        if (forceOuter)\r\n+            return joins.outerJoinRelation(field.getName(),\r\n+                val.getForeignKey(clss[0]), clss[0], val.getSelectSubclasses(),\r\n+                false, false);\r\n+        return joins.joinRelation(field.getName(),\r\n+            val.getForeignKey(clss[0]), clss[0], val.getSelectSubclasses(),\r\n+            false, false);\r\n+    }\r\n+\r\n+    public Joins joinKeyRelation(Joins joins, boolean forceOuter,\r\n+        boolean traverse) {\r\n+        ValueMapping key = field.getKeyMapping();\r\n+        ClassMapping[] clss = key.getIndependentTypeMappings();\r\n+        if (clss.length != 1) {\r\n+            if (traverse)\r\n+                throw RelationStrategies.unjoinable(key);\r\n+            return joins;\r\n+        }\r\n+        if (forceOuter)\r\n+            return joins.outerJoinRelation(field.getName(),\r\n+                key.getForeignKey(clss[0]), clss[0], key.getSelectSubclasses(),\r\n+                false, false);\r\n+        return joins.joinRelation(_keyRelationName,\r\n+            key.getForeignKey(clss[0]), clss[0], key.getSelectSubclasses(), \r\n+            false, false);\r\n+    }\r\n+\r\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\r\n+        return RelationStrategies.toDataStoreValue(field.getElementMapping(),\r\n+            val, store);\r\n+    }\r\n+\r\n+    public Object toKeyDataStoreValue(Object val, JDBCStore store) {\r\n+        return RelationStrategies.toDataStoreValue(field.getKeyMapping(),\r\n+            val, store);\r\n+    }\r\n+}\r"},{"sha":"20bf4d29732fd360f5e352e883cec427746e559c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -24,7 +24,6 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -168,10 +167,13 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         // we limit further eager fetches to joins, because after this point\n         // the select has been modified such that parallel clones may produce\n         // invalid sql\n+        boolean outer = field.getNullValue() != FieldMapping.NULL_EXCEPTION;\n+        // force inner join for inner join fetch \n+        if (fetch.hasFetchInnerJoin(field.getFullName(false)))\n+            outer = false;\n         selectEager(sel, getDefaultElementMapping(true), sm, store, fetch, \n             JDBCFetchConfiguration.EAGER_JOIN, false,\n-            field.getNullValue()\n-                != FieldMapping.NULL_EXCEPTION);\n+            outer);\n     }\n \n     public boolean isEagerSelectToMany() {\n@@ -470,7 +472,7 @@ public void select(Select sel, int idx) {\n         // load values\n         Result res = union.execute(store, fetch);\n         try {\n-            int seq = 0;\n+            int seq = -1;\n             while (res.next()) {\n                 if (ct != null && field.getOrderColumn() != null)\n                     seq = res.getInt(field.getOrderColumn());"},{"sha":"7008ec062300ae41a88ab8d1d2b35dea9ff52082","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","previous_filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java"},{"sha":"45dedec18f7173217fd4e3fd6d196dcca3f62c5f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -72,7 +72,8 @@\n     private int _index = 0;\n     private boolean _pk = false;\n     private VersionStrategy _versionStrategy = null;\n-    \n+    private String _comment = null;\n+\n     /**\n      * Default constructor.\n      */\n@@ -180,6 +181,14 @@ public void setTableName(String name) {\n         _tableName = name;\n         _fullName = null;\n     }\n+    \n+    /**\n+     * Reset the table name with the fully qualified table name which\n+     * includes the schema name\n+     */\n+    public void resetTableName(String name) {\n+        _tableName = name;\n+    }\n \n     /**\n      * The column's schema name.\n@@ -725,4 +734,16 @@ public VersionStrategy getVersionStrategy() {\n     public void setVersionStrategy(VersionStrategy strategy) {\n         this._versionStrategy = strategy;\n     }\n+\n+    public boolean hasComment() {\n+        return _comment != null && !_comment.equalsIgnoreCase(_name);\n+    }\n+\n+    public String getComment() {\n+        return _comment;\n+    }\n+\n+    public void setComment(String comment) {\n+        _comment = comment;\n+    }\n }"},{"sha":"a807f847d37a6ae6388d3e789aceb82e2fc48836","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -163,7 +163,8 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n             }\n \n             // logging decorator\n-            LoggingConnectionDecorator lcd = new LoggingConnectionDecorator();\n+            LoggingConnectionDecorator lcd =\n+                new LoggingConnectionDecorator();\n             Configurations.configureInstance(lcd, conf, opts);\n             lcd.getLogs().setJDBCLog(jdbcLog);\n             lcd.getLogs().setSQLLog(sqlLog);\n@@ -189,6 +190,7 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n         DataSource inner = ds.getInnermostDelegate();\n         if (inner instanceof DriverDataSource)\n             ((DriverDataSource) inner).initDBDictionary(dict);\n+        Connection conn = null;\n \n         try {\n             // add the dictionary as a warning handler on the logging\n@@ -219,9 +221,26 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n \n             // allow the dbdictionary to decorate the connection further\n             ds.addDecorator(dict);\n+            \n+            // ensure dbdictionary to process connectedConfiguration()\n+            if (!factory2)\n+                conn = ds.getConnection(conf.getConnectionUserName(), conf\n+                        .getConnectionPassword());\n+            else\n+                conn = ds.getConnection(conf.getConnection2UserName(), conf\n+                        .getConnection2Password());\n+\n             return ds;\n         } catch (Exception e) {\n             throw new StoreException(e).setFatal(true);\n+        } finally {\n+            if (conn != null)\n+                try {\n+                    conn.close();\n+                } catch (SQLException se) {\n+                    // ignore any exception since the connection is not going\n+                    // to be used anyway\n+                }\n         }\n     }\n "},{"sha":"57f0a74a29bedb386443f0587152bd3236886c1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -93,11 +93,11 @@ public void setColumns(Column[] cols) {\n      * Add a column to the constraint.\n      */\n     public void addColumn(Column col) {\n-        if (col == null || !ObjectUtils.equals(col.getTable(), getTable()))\n+    \tif (col == null)\n             throw new InvalidStateException(_loc.get(\"table-mismatch\",\n                 col == null ? null : col.getTable(),\n                 col == null ? null : getTable()));\n-\n+    \t\n         if (_colList == null)\n             _colList = new ArrayList(3);\n         else if (_colList.contains(col))"},{"sha":"46e8b82cbdd32812653a4b7e22378aa30a81d2ad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -20,9 +20,9 @@\n \n /**\n  * Factory for {@link SchemaGroup}s. Users can plug in their own factory\n- * implementation, or rely on the ones provided. Most schema factoryies\n+ * implementation, or rely on the ones provided. Most schema factories\n  * will probably implement {@link org.apache.openjpa.lib.conf.Configurable} to\n- * receive the system congiguration on construction.\n+ * receive the system configuration on construction.\n  *\n  * @author Abe White\n  */"},{"sha":"1e4b188be7bf8468d823c0d37e8d7ab0d64bfbf4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -819,8 +819,10 @@ public void generateSequences(String schemaName, String sequenceName,\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"gen-seqs\", schemaName, sequenceName));\n \n+        // since all the sequences are generated under the default schema\n+        // therefore, we can use the null schemaname to search\n         Sequence[] seqs = _dict.getSequences(meta, conn.getCatalog(),\n-            schemaName, sequenceName, conn);\n+            null, sequenceName, conn);\n \n         SchemaGroup group = getSchemaGroup();\n         Schema schema;"},{"sha":"a5d7fd3f3deb485ad9caf1df1db0183492d8a3d6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","status":"modified","additions":67,"deletions":2,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -186,6 +186,42 @@ public Table findTable(String name) {\n         return null;\n     }\n \n+    /**\n+     * Find the table with the given name in the group, using '.' as the catalog\n+     * separator. Returns null if no table found.\n+     */\n+    public Table findTable(Schema inSchema, String name) {\n+        if (name == null)\n+            return null;\n+\n+        int dotIdx = name.indexOf('.');\n+        if (dotIdx != -1) {\n+            String schemaName = name.substring(0, dotIdx);\n+            name = name.substring(dotIdx + 1);\n+            Schema schema = getSchema(schemaName);\n+            if (schema != null)\n+                return schema.getTable(name);\n+        } else {\n+            Schema[] schemas = getSchemas();\n+            for (int i = 0; i < schemas.length; i++) {\n+                Table tab = schemas[i].getTable(name);\n+                // if a table is found and it has the same schema\n+                // as the input schema , it means that the table\n+                // exists. However, if the input schema is null,\n+                // then we assume that there is only one table for the\n+                // db default schema, in this case, table exists..\n+                // We can't handle the case that one entity has schema name\n+                // and other entity does not have schema name but both entities\n+                // map to the same table.\n+                if (tab != null\n+                        && (schemas[i] == inSchema || inSchema.getName() == null))\n+                    return tab;\n+\n+            }\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Return true if the given sequence is known to exist. While\n      * {@link #findSequence} may exhibit dynamic behavior in some schema group\n@@ -242,8 +278,37 @@ public Sequence findSequence(String name) {\n     }\n \n     /**\n-     * Find all foreign keys exported by a given primary key (all foreign\n-     * keys that link to the primary key).\n+     * Find the sequence with the given name in the group, using '.' as the\n+     * catalog separator. Returns null if no sequence found.\n+     */\n+    public Sequence findSequence(Schema inSchema, String name) {\n+        if (name == null)\n+            return null;\n+\n+        int dotIdx = name.indexOf('.');\n+        if (dotIdx != -1) {\n+            String schemaName = name.substring(0, dotIdx);\n+            name = name.substring(dotIdx + 1);\n+            Schema schema = getSchema(schemaName);\n+            if (schema != null)\n+                return schema.getSequence(name);\n+        } else {\n+            Schema[] schemas = getSchemas();\n+            Sequence seq;\n+            for (int i = 0; i < schemas.length; i++) {\n+                seq = schemas[i].getSequence(name);\n+                if ((seq != null)\n+                        && (schemas[i] == inSchema || inSchema.getName() == null))\n+                    return seq;\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find all foreign keys exported by a given primary key (all foreign keys\n+     * that link to the primary key).\n      */\n     public ForeignKey[] findExportedForeignKeys(PrimaryKey pk) {\n         if (pk == null)"},{"sha":"37b99b2ddcbc1db145d4e663513e33f77db6032a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -450,7 +450,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             for (int i = 0; i < schemas.length; i++) {\n                 seqs = schemas[i].getSequences();\n                 for (int j = 0; j < seqs.length; j++) {\n-                    if (db.findSequence(seqs[j]) != null)\n+                    if (db.findSequence(schemas[i], seqs[j].getFullName()) != null)\n                         continue;\n \n                     if (createSequence(seqs[j])) {\n@@ -473,7 +473,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n                 cols = tabs[j].getColumns();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                 for (int k = 0; k < cols.length; k++) {\n                     if (dbTable != null) {\n                         col = dbTable.getColumn(cols[k].getName());\n@@ -500,7 +500,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n                 tabs = schemas[i].getTables();\n                 for (int j = 0; j < tabs.length; j++) {\n                     pk = tabs[j].getPrimaryKey();\n-                    dbTable = db.findTable(tabs[j]);\n+                    dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                     if (pk != null && !pk.isLogical() && dbTable != null) {\n                         if (dbTable.getPrimaryKey() == null\n                             && addPrimaryKey(pk))\n@@ -520,7 +520,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n-                if (db.findTable(tabs[j]) != null)\n+                if (db.findTable(schemas[i], tabs[j].getFullName()) != null)\n                     continue;\n \n                 if (createTable(tabs[j])) {\n@@ -546,7 +546,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 idxs = tabs[j].getIndexes();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                 for (int k = 0; k < idxs.length; k++) {\n                     if (dbTable != null) {\n                         idx = findIndex(dbTable, idxs[k]);\n@@ -596,7 +596,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 fks = tabs[j].getForeignKeys();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i],tabs[j].getFullName());\n                 for (int k = 0; k < fks.length; k++) {\n                     if (!fks[k].isLogical() && dbTable != null) {\n                         fk = findForeignKey(dbTable, fks[k]);\n@@ -1333,14 +1333,20 @@ private void handleException(SQLException sql)\n     public static void main(String[] args)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"tool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return SchemaTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"tool-usage\"));\n     }\n \n     /**\n@@ -1351,9 +1357,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws IOException, SQLException {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         Flags flags = new Flags();\n         flags.dropTables = opts.removeBooleanProperty\n             (\"dropTables\", \"dt\", flags.dropTables);"},{"sha":"a79522a7d0bfc5d0c8e339944005acfb772934cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -60,6 +60,7 @@\n     private ForeignKey[] _fks = null;\n     private Index[] _idxs = null;\n     private Unique[] _unqs = null;\n+    private String _comment = null;\n \n     /**\n      * Default constructor.\n@@ -498,7 +499,7 @@ public ForeignKey importForeignKey(ForeignKey fk) {\n      * Return the table's indexes.\n      */\n     public Index[] getIndexes() {\n-        if (_idxs == null)\n+        if (_idxs == null || _idxs.length == 0)\n             _idxs = (_idxMap == null) ? Schemas.EMPTY_INDEXES : (Index[])\n                 _idxMap.values().toArray(new Index[_idxMap.size()]);\n         return _idxs;\n@@ -689,4 +690,16 @@ public int compareTo(Object other) {\n     public String toString() {\n         return getFullName();\n     }\n+\n+    public boolean hasComment() {\n+        return _comment != null && !_comment.equalsIgnoreCase(_name);\n+    }\n+\n+    public String getComment() {\n+        return _comment;\n+    }\n+\n+    public void setComment(String comment) {\n+        _comment = comment;\n+    }\n }"},{"sha":"df21bcf4ba369d3f9032fb1906fe84282752055f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -449,14 +449,20 @@ private Connection getConnection()\n     public static void main(String[] args)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"sch-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return TableSchemaFactory.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"sch-usage\"));\n     }\n \n     /**\n@@ -467,9 +473,6 @@ public static void main(String[] args)\n     public static boolean run(JDBCConfiguration conf, String[] args,\n         Options opts)\n         throws IOException, SQLException {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         String action = opts.removeProperty(\"action\", \"a\", null);\n         Configurations.populateConfiguration(conf, opts);\n         return run(conf, action);"},{"sha":"af138d57a1327bb52de4cfa23f0cad144551fa66","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":35,"deletions":14,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -26,6 +26,8 @@\n public abstract class AbstractDB2Dictionary\n     extends DBDictionary {\n \n+    public int varcharCastLength = 1000;\n+\n     public AbstractDB2Dictionary() {\n         numericTypeName = \"DOUBLE\";\n         bitTypeName = \"SMALLINT\";\n@@ -36,11 +38,13 @@ public AbstractDB2Dictionary() {\n \n         // DB2-based databases have restrictions on having uncast parameters\n         // in string functions\n-        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(1000)))\";\n-        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(1000)))\";\n+        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength\n+            + \")))\";\n+        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength\n+            + \")))\";\n         stringLengthFunction = \"LENGTH({0})\";\n-        concatenateFunction = \"(CAST({0} AS VARCHAR(1000)))||\"\n-            + \"(CAST({1} AS VARCHAR(1000)))\";\n+        concatenateFunction = \"(CAST({0} AS VARCHAR(\" + varcharCastLength\n+            + \")))||(CAST({1} AS VARCHAR(1000)))\";\n \n         trimLeadingFunction = \"LTRIM({0})\";\n         trimTrailingFunction = \"RTRIM({0})\";\n@@ -74,9 +78,11 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(LOCATE(CAST((\");\n         find.appendTo(buf);\n-        buf.append(\") AS VARCHAR(1000)), CAST((\");\n+        buf.append(\") AS VARCHAR(\").append(Integer.toString(varcharCastLength))\n+            .append(\")), CAST((\");\n         str.appendTo(buf);\n-        buf.append(\") AS VARCHAR(1000))\");\n+        buf.append(\") AS VARCHAR(\").append(Integer.toString(varcharCastLength))\n+            .append(\"))\");\n         if (start != null) {\n             buf.append(\", CAST((\");\n             start.appendTo(buf);\n@@ -89,15 +95,30 @@ public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n         buf.append(\"SUBSTR(CAST((\");\n         str.appendTo(buf);\n-        buf.append(\") AS VARCHAR(1000)), CAST((\");\n-        start.appendTo(buf);\n-        buf.append(\") AS INTEGER) + 1\");\n-        if (end != null) {\n-            buf.append(\", CAST((\");\n-            end.appendTo(buf);\n-            buf.append(\") AS INTEGER) - CAST((\");\n+        buf.append(\") AS VARCHAR(\").append(Integer.toString(varcharCastLength))\n+            .append(\")), \");\n+        if (start.getValue() instanceof Number) {\n+            long startLong = toLong(start);\n+            buf.append(Long.toString(startLong + 1));\n+        } else {\n+            buf.append(\"CAST((\");\n             start.appendTo(buf);\n-            buf.append(\") AS INTEGER)\");\n+            buf.append(\") AS INTEGER) + 1\");\n+        }\n+        if (end != null) {\n+            buf.append(\", \");\n+            if (start.getValue() instanceof Number\n+                && end.getValue() instanceof Number) {\n+                long startLong = toLong(start);\n+                long endLong = toLong(end);\n+                buf.append(Long.toString(endLong - startLong));\n+            } else {\n+                buf.append(\"CAST((\");\n+                end.appendTo(buf);\n+                buf.append(\") AS INTEGER) - CAST((\");\n+                start.appendTo(buf);\n+                buf.append(\") AS INTEGER)\");\n+            }\n         }\n         buf.append(\")\");\n     }"},{"sha":"ed780bef0c6d17eea673676bc79233054b306bcd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.UnsupportedException;\n+\n import serp.util.Strings;\n \n /**\n@@ -341,12 +342,23 @@ public InputStream getBinaryStream(Column col, Joins joins)\n         return getBinaryStreamInternal(translate(col, joins), joins);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException {\n+        return getLOBStreamInternal(store, translate(obj, null), null);\n+    }\n+\n     protected InputStream getBinaryStreamInternal(Object obj, Joins joins)\n         throws SQLException {\n         return (InputStream) checkNull(getObjectInternal(obj,\n             JavaSQLTypes.BINARY_STREAM, null, joins));\n     }\n \n+    protected InputStream getLOBStreamInternal(JDBCStore store, Object obj,\n+        Joins joins) throws SQLException {\n+        return (InputStream) checkNull(getStreamInternal(store, obj,\n+            JavaSQLTypes.BINARY_STREAM, null, joins));\n+    }\n+    \n     public Blob getBlob(Object obj)\n         throws SQLException {\n         return getBlobInternal(translate(obj, null), null);\n@@ -670,6 +682,9 @@ protected abstract Object getObjectInternal(Object obj, int metaType,\n         Object arg, Joins joins)\n         throws SQLException;\n \n+    protected abstract Object getStreamInternal(JDBCStore store, Object obj,\n+            int metaType, Object arg, Joins joins) throws SQLException;\n+    \n     public Object getSQLObject(Object obj, Map map)\n         throws SQLException {\n         return getSQLObjectInternal(translate(obj, null), map, null);"},{"sha":"fffef75b9f4685038a0cb1f5ef9d1324ab2ffa63","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -108,31 +108,32 @@ else if (colType == Types.BLOB)\n             super.setNull(stmnt, idx, colType, col);\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         // cannot use a value here, since SQLServer does not support\n         // bound parameters in a \"TOP\" clause\n         buf.append(\" TOP \").append(Long.toString(end));\n     }\n \n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n-        buf.append(\"SUBSTRING(\");\n-        str.appendTo(buf);\n-        buf.append(\", \");\n-        start.appendTo(buf);\n-        buf.append(\" + 1, \");\n-        if (end != null) {\n-            buf.append(\"(\");\n-            end.appendTo(buf);\n-            buf.append(\")\");\n-        } else {\n+        if (end != null)\n+            super.substring(buf, str, start, end);\n+        else {\n+            // ### it would be good to change this logic as in DBDictionary to\n+            // ### simplify the generated SQL\n+            buf.append(\"SUBSTRING(\");\n+            str.appendTo(buf);\n+            buf.append(\", \");\n+            start.appendTo(buf);\n+            buf.append(\" + 1, \");\n             buf.append(\"LEN(\");\n             str.appendTo(buf);\n             buf.append(\")\");\n+            buf.append(\" - (\");\n+            start.appendTo(buf);\n+            buf.append(\"))\");\n         }\n-        buf.append(\" - (\");\n-        start.appendTo(buf);\n-        buf.append(\"))\");\n     }\n \n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,"},{"sha":"735c9d499485dce0f6bc6510a893fd6af3ae07f5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -63,6 +63,8 @@ public AccessDictionary() {\n         supportsForeignKeys = false;\n         supportsDeferredConstraints = false;\n         maxIndexesPerTable = 32;\n+\n+        substringFunctionName = \"MID\";\n     }\n \n     public void setLong(PreparedStatement stmnt, int idx, long val, Column col)\n@@ -75,22 +77,5 @@ public void setLong(PreparedStatement stmnt, int idx, long val, Column col)\n         else\n             stmnt.setDouble(idx, val);\n     }\n-\n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(\"MID(\");\n-        str.appendTo(buf);\n-        buf.append(\", (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - \");\n-            start.appendTo(buf);\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n }\n "},{"sha":"8dea6ced5bc6d8bb26e66902e421bb384af8766d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":164,"deletions":41,"changes":205,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -31,12 +31,17 @@\n import org.apache.openjpa.jdbc.kernel.exps.Lit;\r\n import org.apache.openjpa.jdbc.kernel.exps.Param;\r\n import org.apache.openjpa.jdbc.kernel.exps.Val;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n import org.apache.openjpa.kernel.Filters;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n import org.apache.openjpa.util.UnsupportedException;\r\n+\r\n import serp.util.Strings;\r\n \r\n /**\r\n@@ -50,12 +55,12 @@\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n     protected int db2ServerType = 0;\r\n-    protected static final int db2ISeriesV5R3OrEarlier = 1;\r\n-    protected static final int db2UDBV81OrEarlier = 2;\r\n-    protected static final int db2ZOSV8xOrLater = 3;\r\n-    protected static final int db2UDBV82OrLater = 4;\r\n-    protected static final int db2ISeriesV5R4OrLater = 5;\r\n-\tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n+    public static final int db2ISeriesV5R3OrEarlier = 1;\r\n+    public static final int db2UDBV81OrEarlier = 2;\r\n+    public static final int db2ZOSV8xOrLater = 3;\r\n+    public static final int db2UDBV82OrLater = 4;\r\n+    public static final int db2ISeriesV5R4OrLater = 5;\r\n+\tprivate static final String forUpdate = \"FOR UPDATE\";\r\n     private static final String withRSClause = \"WITH RS\";\r\n     private static final String withRRClause = \"WITH RR\";\r\n     private static final String useKeepUpdateLockClause\r\n@@ -67,6 +72,8 @@\n     protected String databaseProductVersion = null;\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n+    \r\n+    private int defaultBatchLimit = 100;\r\n \r\n     public DB2Dictionary() {\r\n         platform = \"DB2\";\r\n@@ -94,7 +101,7 @@ public DB2Dictionary() {\n             \"LONG VARCHAR FOR BIT DATA\", \"LONG VARCHAR\", \"LONG VARGRAPHIC\",\r\n         }));\r\n         systemSchemas = new String(\r\n-                \"SYSCAT, SYSIBM, SYSSTAT, SYSIBMADM, SYSTOOLS\");\r\n+                \"SYSCAT,SYSIBM,SYSSTAT,SYSIBMADM,SYSTOOLS\");\r\n         maxConstraintNameLength = 18;\r\n         maxIndexNameLength = 18;\r\n         maxColumnNameLength = 30;\r\n@@ -139,6 +146,10 @@ public DB2Dictionary() {\n             \"TYPE\", \"UNDO\", \"UNTIL\", \"VALIDPROC\", \"VARIABLE\", \"VARIANT\", \"VCAT\",\r\n             \"VOLUMES\", \"WHILE\", \"WLM\", \"YEARS\",\r\n         }));\r\n+        \r\n+        super.setBatchLimit(defaultBatchLimit);\r\n+        \r\n+        selectWordSet.add(\"WITH\");\r\n     }\r\n \r\n     public boolean supportsRandomAccessResultSet(Select sel,\r\n@@ -147,11 +158,41 @@ public boolean supportsRandomAccessResultSet(Select sel,\n             && super.supportsRandomAccessResultSet(sel, forUpdate);\r\n     }\r\n \r\n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\r\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\r\n+        boolean subselect) {\r\n         // appends the literal range string, since DB2 is unable to handle\r\n         // a bound parameter for it\r\n-        buf.append(\" FETCH FIRST \").append(Long.toString(end)).\r\n-            append(\" ROWS ONLY\");\r\n+        // do not generate FETCH FIRST clause for subselect\r\n+        if (!subselect)\r\n+            buf.append(\" FETCH FIRST \").append(Long.toString(end)).\r\n+                append(\" ROWS ONLY\");\r\n+    }\r\n+\r\n+    protected void appendSelect(SQLBuffer selectSQL, Object alias, Select sel,\r\n+        int idx) {\r\n+        // if this is a literal value, add a cast...\r\n+        Object val = sel.getSelects().get(idx);\r\n+        if (val instanceof Lit)\r\n+            selectSQL.append(\"CAST(\");\r\n+\r\n+        // ... and add the select per super's behavior...\r\n+        super.appendSelect(selectSQL, alias, sel, idx);\r\n+\r\n+        // ... and finish the cast\r\n+        if (val instanceof Lit) {\r\n+            Class c = ((Lit) val).getType();\r\n+            int javaTypeCode = JavaTypes.getTypeCode(c);\r\n+            int jdbcTypeCode = getJDBCType(javaTypeCode, false);\r\n+            String typeName = getTypeName(jdbcTypeCode);\r\n+            selectSQL.append(\" AS \" + typeName);\r\n+\r\n+            // if the literal is a string, use the default char col size\r\n+            // in the cast statement.\r\n+            if (String.class.equals(c))\r\n+                selectSQL.append(\"(\" + characterColumnSize + \")\");\r\n+\r\n+            selectSQL.append(\")\");\r\n+        }\r\n     }\r\n \r\n     public String[] getCreateSequenceSQL(Sequence seq) {\r\n@@ -271,6 +312,10 @@ else if (isDB2UDBV82OrLater())\n             break;\r\n         case db2ISeriesV5R3OrEarlier:\r\n         case db2ISeriesV5R4OrLater:\r\n+            lastGeneratedKeyQuery = \"SELECT IDENTITY_VAL_LOCAL() FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n+            nextSequenceQuery = \"SELECT NEXTVAL FOR {0} FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n             validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n                 + \"QSYS2.SYSTABLES\";\r\n             sequenceSQL = \"SELECT SEQUENCE_SCHEMA, \"\r\n@@ -286,9 +331,12 @@ else if (isDB2UDBV82OrLater())\n      * updateClause and isolationLevel hints\r\n      */\r\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\r\n-        boolean forUpdate) {\r\n+        boolean isForUpdate, Select sel) {\r\n         int isolationLevel;\r\n-        StringBuffer forUpdateString = new StringBuffer();\r\n+        // For db2UDBV81OrEarlier and db2ISeriesV5R3OrEarlier:\r\n+        // \"optimize for\" clause appears before \"for update\" clause.\r\n+        StringBuffer forUpdateString = new StringBuffer(\r\n+            getOptimizeClause(sel));\r\n         try {\r\n             // Determine the isolationLevel; the fetch\r\n             // configuration data overrides the persistence.xml value\r\n@@ -297,16 +345,15 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n             else\r\n                 isolationLevel = conf.getTransactionIsolationConstant();\r\n \r\n-            if (forUpdate) {\r\n+            if (isForUpdate) {\r\n                 switch(db2ServerType) {\r\n                 case db2ISeriesV5R3OrEarlier:\r\n                 case db2UDBV81OrEarlier:\r\n-                    if (isolationLevel ==\r\n-                        Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(forUpdateOfClause);\r\n-                    } else\r\n-                        forUpdateString.append(\" \").append(forUpdateOfClause);\r\n+                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE)\r\n+                        forUpdateString.append(\" \").append(forUpdateClause);\r\n+                    else \r\n+                        forUpdateString.append(\" \").append(forUpdate)\r\n+                            .append(\" \").append(withRSClause);\r\n                     break;\r\n                 case db2ZOSV8xOrLater:\r\n                 case db2UDBV82OrLater:\r\n@@ -341,48 +388,50 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         return forUpdateString.toString();\r\n     }\r\n \r\n-    public boolean isDB2UDBV82OrLater() throws SQLException {\r\n+    public boolean isDB2UDBV82OrLater() {\r\n         boolean match = false;\r\n-        if ((databaseProductVersion.indexOf(\"SQL\") != -1\r\n+        if (databaseProductName != null &&\r\n+            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n             && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n             match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8xOrLater()\r\n-       throws SQLException {\r\n+    public boolean isDB2ZOSV8xOrLater() {\r\n        boolean match = false;\r\n-       if ((databaseProductVersion.indexOf(\"DSN\") != -1\r\n+       if (databaseProductName != null &&\r\n+           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n            && maj >= 8)\r\n            match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R3OrEarlier()\r\n-       throws SQLException {\r\n+    public boolean isDB2ISeriesV5R3OrEarlier() {\r\n        boolean match = false;\r\n-       if (databaseProductName.indexOf(\"AS\") != -1\r\n+       if (databaseProductName != null &&\r\n+           databaseProductName.indexOf(\"AS\") != -1\r\n            && ((maj == 5 && min <=3) || maj < 5))\r\n            match = true;\r\n        return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R4OrLater()\r\n-       throws SQLException {\r\n+    public boolean isDB2ISeriesV5R4OrLater() {\r\n        boolean match = false;\r\n-       if (databaseProductName.indexOf(\"AS\") != -1\r\n+       if (databaseProductName != null &&\r\n+           databaseProductName.indexOf(\"AS\") != -1\r\n            && (maj >=6 || (maj == 5 && min >=4)))\r\n            match = true;\r\n       return match;\r\n     }\r\n \r\n-    public boolean isDB2UDBV81OrEarlier() throws SQLException {\r\n+    public boolean isDB2UDBV81OrEarlier() {\r\n         boolean match = false;\r\n-        if ((databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-           || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-           ((maj == 8 && min <= 1) || maj < 8))\r\n+        if (databaseProductName != null &&\r\n+            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n+            ((maj == 8 && min <= 1) || maj < 8))\r\n             match = true;\r\n         return match;\r\n     }\r\n@@ -438,17 +487,16 @@ private void getProductVersionMajorMinor() {\n         }\r\n     }\r\n \r\n-    public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n-        JDBCFetchConfiguration fetch) {\r\n-        SQLBuffer buf = super.toSelect(sel, forUpdate, fetch);\r\n-\r\n-        if (sel.getExpectedResultCount() > 0) {\r\n+    protected String getOptimizeClause(Select sel) {\r\n+        if (sel != null && sel.getExpectedResultCount() > 0) {\r\n+            StringBuffer buf = new StringBuffer();\r\n             buf.append(\" \").append(optimizeClause).append(\" \")\r\n                 .append(String.valueOf(sel.getExpectedResultCount()))\r\n                 .append(\" \").append(rowClause);\r\n+            return buf.toString();\r\n         }\r\n \r\n-        return buf;\r\n+        return \"\";\r\n     }\r\n \r\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\r\n@@ -646,11 +694,27 @@ private String addCastAsString(String func, String target,\n     public String addCastAsType(String func, Val val) {\r\n         String fstring = null;\r\n         String type = getTypeName(getJDBCType(JavaTypes.getTypeCode(val\r\n-                .getType()), false));\r\n+            .getType()), false));\r\n+        if (String.class.equals(val.getType()))\r\n+            type = type + \"(\" + characterColumnSize + \")\";\r\n         fstring = \"CAST(? AS \" + type + \")\";\r\n         return fstring;\r\n     }\r\n \r\n+    /**\r\n+     * Return the batch limit. If the batchLimit is -1, change it to 100 for\r\n+     * best performance\r\n+     */\r\n+    public int getBatchLimit() {\r\n+        int limit = super.getBatchLimit();\r\n+        if (limit == UNLIMITED) {\r\n+            limit = defaultBatchLimit;\r\n+            if (log.isTraceEnabled())\r\n+                log.trace(_loc.get(\"batch_unlimit\", String.valueOf(limit)));\r\n+        }\r\n+        return limit;\r\n+    }\r\n+\r\n     /**\r\n      * Return the correct CAST function syntax\r\n      * \r\n@@ -696,4 +760,63 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         }\r\n         buf.append(\") - 1)\");\r\n     }\r\n+    \r\n+    /** \r\n+     * Cast the specified value to the specified type.\r\n+     *\r\n+     * @param buf the buffer to append the cast to\r\n+     * @param val the value to cast\r\n+     * @param type the type of the case, e.g. {@link Types#NUMERIC}\r\n+     */\r\n+    public void appendCast(SQLBuffer buf, FilterValue val, int type) {\r\n+\r\n+        // Convert the cast function: \"CAST({0} AS {1})\"\r\n+        int firstParam = castFunction.indexOf(\"{0}\");\r\n+        String pre = castFunction.substring(0, firstParam); // \"CAST(\"\r\n+        String mid = castFunction.substring(firstParam + 3);\r\n+        int secondParam = mid.indexOf(\"{1}\");\r\n+        String post;\r\n+        if (secondParam > -1) {\r\n+            post = mid.substring(secondParam + 3); // \")\"\r\n+            mid = mid.substring(0, secondParam); // \" AS \"\r\n+        } else\r\n+            post = \"\";\r\n+\r\n+        // No need to add CAST if the value is a constant\r\n+        if (val instanceof Lit || val instanceof Param) {\r\n+            buf.append(pre);\r\n+            val.appendTo(buf);\r\n+            buf.append(mid);\r\n+            buf.append(getTypeName(type));\r\n+            appendLength(buf, type);\r\n+            buf.append(post);\r\n+        } else {\r\n+            val.appendTo(buf);\r\n+            String sqlString = buf.getSQL(false);\r\n+            if (sqlString.endsWith(\"?\")) {\r\n+                // case \"(?\" - convert to \"CAST(? AS type\"\r\n+                String typeName = getTypeName(type);\r\n+                if (String.class.equals(val.getType()))\r\n+                    typeName = typeName + \"(\" + characterColumnSize + \")\";\r\n+                String str = \"CAST(? AS \" + typeName + \")\";\r\n+                buf.replaceSqlString(sqlString.length() - 1,\r\n+                        sqlString.length(), str);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an index if necessary for some database tables\r\n+     */\r\n+    public void createIndexIfNecessary(Schema schema, String table,\r\n+            Column pkColumn) {\r\n+        if (isDB2ZOSV8xOrLater()) {\r\n+            // build the index for the sequence tables\r\n+            // the index name will the fully qualified table name + _IDX\r\n+            Table tab = schema.getTable(table);\r\n+            Index idx = tab.addIndex(tab.getFullName() + \"_IDX\");\r\n+            idx.setUnique(true);\r\n+            idx.addColumn(pkColumn);\r\n+        }\r\n+    }\r\n }\r"},{"sha":"de2a6127faf3d85ed2fe7fc69fd77292bc8b3c60","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":671,"deletions":103,"changes":774,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -20,9 +20,11 @@\n \n import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.CharArrayReader;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.io.OutputStream;\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.Writer;\n@@ -58,7 +60,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.HashMap;\n+\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -68,8 +70,6 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n-import org.apache.openjpa.jdbc.kernel.exps.Lit;\n-import org.apache.openjpa.jdbc.kernel.exps.Param;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -86,6 +86,7 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -94,15 +95,19 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Localizer.Message;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.Serialization;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n-import org.apache.openjpa.util.InvalidStateException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -124,6 +129,9 @@\n     public static final String CONS_NAME_BEFORE = \"before\";\n     public static final String CONS_NAME_MID = \"mid\";\n     public static final String CONS_NAME_AFTER = \"after\";\n+    \n+    public int blobBufferSize = 50000;\n+    public int clobBufferSize = 50000;\n \n     protected static final int RANGE_POST_SELECT = 0;\n     protected static final int RANGE_PRE_DISTINCT = 1;\n@@ -140,13 +148,26 @@\n     protected static final int NAME_ANY = 0;\n     protected static final int NAME_TABLE = 1;\n     protected static final int NAME_SEQUENCE = 2;\n+    \n+    protected static final int UNLIMITED = -1;\n+    protected static final int NO_BATCH = 0;\n \n     private static final String ZERO_DATE_STR =\n         \"'\" + new java.sql.Date(0) + \"'\";\n     private static final String ZERO_TIME_STR = \"'\" + new Time(0) + \"'\";\n     private static final String ZERO_TIMESTAMP_STR =\n         \"'\" + new Timestamp(0) + \"'\";\n \n+    public static final List EMPTY_STRING_LIST = Arrays.asList(new String[]{});\n+    public static final List[] SQL_STATE_CODES = \n+    \t{EMPTY_STRING_LIST,                     // 0: Default\n+    \t Arrays.asList(new String[]{\"41000\"}),  // 1: LOCK\n+    \t EMPTY_STRING_LIST,                     // 2: OBJECT_NOT_FOUND\n+    \t EMPTY_STRING_LIST,                     // 3: OPTIMISTIC\n+    \t Arrays.asList(new String[]{\"23000\"}),  // 4: REFERENTIAL_INTEGRITY\n+    \t EMPTY_STRING_LIST                      // 5: OBJECT_EXISTS\n+    \t}; \n+                                              \n     private static final Localizer _loc = Localizer.forPackage\n         (DBDictionary.class);\n \n@@ -175,9 +196,11 @@\n     public boolean supportsDefaultUpdateAction = true;\n     public boolean supportsAlterTableWithAddColumn = true;\n     public boolean supportsAlterTableWithDropColumn = true;\n+    public boolean supportsComments = false;\n     public String reservedWords = null;\n     public String systemSchemas = null;\n     public String systemTables = null;\n+    public String selectWords = null;\n     public String fixedSizeTypeNames = null;\n     public String schemaCase = SCHEMA_CASE_UPPER;\n \n@@ -209,6 +232,7 @@\n     public boolean supportsSelectEndIndex = false;\n     public int rangePosition = RANGE_POST_SELECT;\n     public boolean requiresAliasForSubselect = false;\n+    public boolean requiresTargetForDelete = false;\n     public boolean allowsAliasInBulkClause = true;\n     public boolean supportsMultipleNontransactionalResultSets = true;\n     public String searchStringEscape = \"\\\\\";\n@@ -310,6 +334,13 @@\n     protected final Set systemSchemaSet = new HashSet();\n     protected final Set systemTableSet = new HashSet();\n     protected final Set fixedSizeTypeNameSet = new HashSet();\n+    protected final Set typeModifierSet = new HashSet();\n+\n+    /**\n+     * If a native query begins with any of the values found here then it will\n+     * be treated as a select statement.  \n+     */\n+    protected final Set selectWordSet = new HashSet();\n \n     // when we store values that lose precion, track the types so that the\n     // first time it happens we can warn the user\n@@ -320,13 +351,21 @@\n     private Method _setString = null;\n     private Method _setCharStream = null;\n \n+    // batchLimit value:\n+    // -1 = unlimited\n+    // 0  = no batch\n+    // any positive number = batch limit\n+    public int batchLimit = NO_BATCH;\n+    \n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n             \"BIGINT\", \"BIT\", \"BLOB\", \"CLOB\", \"DATE\", \"DECIMAL\", \"DISTINCT\",\n             \"DOUBLE\", \"FLOAT\", \"INTEGER\", \"JAVA_OBJECT\", \"NULL\", \"NUMERIC\",\n             \"OTHER\", \"REAL\", \"REF\", \"SMALLINT\", \"STRUCT\", \"TIME\", \"TIMESTAMP\",\n             \"TINYINT\",\n         }));\n+        \n+        selectWordSet.add(\"SELECT\");\n     }\n \n     /**\n@@ -448,6 +487,11 @@ public InputStream getBinaryStream(ResultSet rs, int column)\n         return rs.getBinaryStream(column);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n+        int column) throws SQLException {\n+        return rs.getBinaryStream(column);\n+    }\n+    \n     /**\n      * Convert the specified column of the SQL ResultSet to the proper\n      * java type.\n@@ -1532,7 +1576,7 @@ public String getTypeName(int type) {\n                 return bitTypeName;\n             case Types.BLOB:\n                 return blobTypeName;\n-            case 16: // JDK 1.4 introduces Types.BOOLEAN, whose value is 16\n+            case Types.BOOLEAN:\n                 return booleanTypeName;\n             case Types.CHAR:\n                 return charTypeName;\n@@ -1593,6 +1637,14 @@ public String getTypeName(int type) {\n      * override this method to return the unaltered type name for columns of\n      * those types (or add the type names to the\n      * <code>fixedSizeTypeNameSet</code>).\n+     * \n+     * <P>Some databases support \"type modifiers\" for example the unsigned\n+     * \"modifier\" in MySQL. In these cases the size should go between the type \n+     * and the \"modifier\", instead of after the modifier. For example \n+     * CREATE table FOO ( myint INT (10) UNSIGNED . . .) instead of \n+     * CREATE table FOO ( myint INT UNSIGNED (10) . . .).\n+     * Type modifiers should be added to <code>typeModifierSet</code> in \n+     * subclasses. \n      */\n     protected String appendSize(Column col, String typeName) {\n         if (fixedSizeTypeNameSet.contains(typeName.toUpperCase()))\n@@ -1610,19 +1662,61 @@ protected String appendSize(Column col, String typeName) {\n             size = buf.toString();\n         }\n \n-        int idx = typeName.indexOf(\"{0}\");\n-        if (idx == -1 && size != null)\n-            return typeName + size;\n-        if (idx == -1)\n-            return typeName;\n+        return insertSize(typeName, size);\n+    }\n \n-        // replace '{0}' with size\n-        String ret = typeName.substring(0, idx);\n-        if (size != null)\n-            ret = ret + size;\n-        if (typeName.length() > idx + 3)\n-            ret = ret + typeName.substring(idx + 3);\n-        return ret;\n+    /**\n+     * Helper method that inserts a size clause for a given SQL type. \n+     * \n+     * @see appendSize\n+     * \n+     * @param typeName  The SQL type ie INT\n+     * @param size      The size clause ie (10)\n+     * @return          The typeName + size clause. Usually the size clause will \n+     *                  be appended to typeName. If the typeName contains a \n+     *                  marker : {0} or if typeName contains a modifier the \n+     *                  size clause will be inserted appropriately.   \n+     */\n+    protected String insertSize(String typeName, String size) {\n+    \tif (StringUtils.isEmpty(size)) {\n+            int idx = typeName.indexOf(\"{0}\");\n+            if (idx != -1) {\n+                return typeName.substring(0, idx);\n+            }\n+            return typeName;\n+        }\n+    \t\n+        int idx = typeName.indexOf(\"{0}\");\n+        if (idx != -1) {\n+            // replace '{0}' with size\n+            String ret = typeName.substring(0, idx);\n+            if (size != null)\n+                ret = ret + size;\n+            if (typeName.length() > idx + 3)\n+                ret = ret + typeName.substring(idx + 3);\n+            return ret;\n+        }\n+        if (!typeModifierSet.isEmpty()) {\n+            String s;\n+            idx = typeName.length();\n+            int curIdx = -1;\n+            for (Iterator i = typeModifierSet.iterator(); i.hasNext();) {\n+                s = (String) i.next();\n+                if (typeName.toUpperCase().indexOf(s) != -1) {\n+                    curIdx = typeName.toUpperCase().indexOf(s);\n+                    if (curIdx != -1 && curIdx < idx) {\n+                        idx = curIdx;\n+                    }\n+                }\n+            }\n+            if(idx != typeName.length()) {\n+                String ret = typeName.substring(0, idx);\n+                ret = ret + size;\n+                ret = ret + ' ' + typeName.substring(idx);\n+                return ret;\n+            }\n+        }\n+        return typeName + size;\n     }\n \n     ///////////\n@@ -1740,7 +1834,7 @@ public SQLBuffer toSelectCount(Select sel) {\n         from.append(\"(\");\n         from.append(toSelect(subSelect, null, subFrom, where,\n             sel.getGrouping(), sel.getHaving(), null, sel.isDistinct(),\n-            false, sel.getStartIndex(), sel.getEndIndex()));\n+            false, sel.getStartIndex(), sel.getEndIndex(), true));\n         from.append(\")\");\n         if (requiresAliasForSubselect)\n             from.append(\" \").append(Select.FROM_SELECT_ALIAS);\n@@ -1780,8 +1874,16 @@ public SQLBuffer toUpdate(ClassMapping mapping, Select sel,\n     protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         JDBCStore store, Object[] params, Map updateParams) {\n         SQLBuffer sql = new SQLBuffer(this);\n-        if (updateParams == null)\n+        if (updateParams == null) {\n+          if (requiresTargetForDelete) {\n+            sql.append(\"DELETE \");\n+            SQLBuffer deleteTargets = getDeleteTargets(sel);\n+            sql.append(deleteTargets);\n+            sql.append(\" FROM \");\n+          } else {\n             sql.append(\"DELETE FROM \");\n+          }\n+        }\n         else\n             sql.append(\"UPDATE \");\n         sel.addJoinClassConditions();\n@@ -1877,6 +1979,28 @@ protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         return sql;\n     }\n \n+    protected SQLBuffer getDeleteTargets(Select sel) {\n+      SQLBuffer deleteTargets = new SQLBuffer(this);\n+      Collection aliases = sel.getTableAliases();\n+      // Assumes aliases are of the form \"TABLENAME t0\"\n+      for (Iterator itr = aliases.iterator(); itr.hasNext();) {\n+        String tableAlias = itr.next().toString();\n+        int spaceIndex = tableAlias.indexOf(' ');\n+        if (spaceIndex > 0 && spaceIndex < tableAlias.length() - 1) {\n+          if (allowsAliasInBulkClause) {\n+            deleteTargets.append(tableAlias.substring(spaceIndex + 1));\n+          } else {\n+            deleteTargets.append(tableAlias.substring(0, spaceIndex));\n+          }\n+        } else {\n+          deleteTargets.append(tableAlias);\n+        }\n+        if (itr.hasNext())\n+          deleteTargets.append(\", \");\n+      }      \n+      return deleteTargets;      \n+    }\n+\n     protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         Object[] params, Map updateParams, boolean allowAlias) {\n         if (updateParams == null || updateParams.size() == 0)\n@@ -1895,19 +2019,26 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n \n         for (Iterator i = updateParams.entrySet().iterator(); i.hasNext();) {\n             Map.Entry next = (Map.Entry) i.next();\n-            FieldMapping fmd = (FieldMapping) next.getKey();\n+            Path path = (Path) next.getKey();\n+            FieldMapping fmd = (FieldMapping) path.last();\n \n             if (fmd.isVersion())\n                 augmentUpdates = false;\n \n             Val val = (Val) next.getValue();\n \n             Column col = fmd.getColumns()[0];\n-            sql.append(col.getName());\n+            if (allowAlias) {\n+              sql.append(sel.getColumnAlias(col));\n+            } else {\n+              sql.append(col.getName());  \n+            }            \n             sql.append(\" = \");\n \n             ExpState state = val.initialize(sel, ctx, 0);\n-            val.calculateValue(sel, ctx, state, null, null);\n+            // JDBC Paths are always PCPaths; PCPath implements Val\n+            ExpState pathState = ((Val) path).initialize(sel, ctx, 0);\n+            calculateValue(val, sel, ctx, state, path, pathState);\n \n             // append the value with a null for the Select; i\n             // indicates that the\n@@ -1920,9 +2051,9 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         }\n \n         if (augmentUpdates) {\n-            ClassMapping meta =\n-                ((FieldMapping) updateParams.keySet().iterator().next())\n-                    .getDeclaringMapping();\n+            Path path = (Path) updateParams.keySet().iterator().next();\n+            FieldMapping fm = (FieldMapping) path.last();\n+            ClassMapping meta = fm.getDeclaringMapping();\n             Map updates = meta.getVersion().getBulkUpdateValues();\n             for (Iterator iter = updates.entrySet().iterator();\n                 iter.hasNext(); ) {\n@@ -1996,7 +2127,7 @@ public SQLBuffer toSelect(Select sel, boolean forUpdate,\n         SQLBuffer where = getWhere(sel, update);\n         return toSelect(select, fetch, from, where, sel.getGrouping(),\n             sel.getHaving(), ordering, sel.isDistinct(), forUpdate,\n-            sel.getStartIndex(), sel.getEndIndex());\n+            sel.getStartIndex(), sel.getEndIndex(), sel);\n     }\n \n     /**\n@@ -2184,19 +2315,55 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         boolean distinct, boolean forUpdate, long start, long end) {\n         return toOperation(getSelectOperation(fetch), selects, from, where,\n             group, having, order, distinct, start, end,\n-            getForUpdateClause(fetch, forUpdate));\n+            getForUpdateClause(fetch, forUpdate, null));\n+    }\n+\n+    /**\n+     * Combine the given components into a SELECT statement.\n+     */\n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        boolean subselect) {\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n+            group, having, order, distinct, start, end,\n+            getForUpdateClause(fetch, forUpdate, null), subselect);\n+    }\n+    \n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+            SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+            SQLBuffer having, SQLBuffer order,\n+            boolean distinct, boolean forUpdate, long start, long end,\n+            boolean subselect, boolean checkTableForUpdate) {\n+            return toOperation(getSelectOperation(fetch), selects, from, where,\n+                group, having, order, distinct, start, end,\n+                getForUpdateClause(fetch, forUpdate, null), subselect, checkTableForUpdate);\n+        }\n+\n+    /**\n+     * Combine the given components into a SELECT statement.\n+     */\n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        Select sel) {\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n+            group, having, order, distinct, start, end,\n+            getForUpdateClause(fetch, forUpdate, sel));\n     }\n \n     /**\n      * Get the update clause for the query based on the\n      * updateClause and isolationLevel hints\n      */\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n-        boolean forUpdate) {\n+        boolean isForUpdate, Select sel) {\n         if (fetch != null && fetch.getIsolation() != -1) {\n             throw new InvalidStateException(_loc.get(\n                 \"isolation-level-config-not-supported\", getClass().getName()));\n-        } else if (forUpdate && !simulateLocking) {\n+        } else if (isForUpdate && !simulateLocking) {\n             assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n             return forUpdateClause;\n         } else {\n@@ -2214,23 +2381,51 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n     /**\n      * Return the SQL for the given selecting operation.\n      */\n-    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+    public SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n         SQLBuffer order, boolean distinct, long start, long end,\n         String forUpdateClause) {\n+        return toOperation(op, selects, from, where, group, having, order,\n+            distinct, start, end, forUpdateClause, false);\n+    }\n+    \n+    /**\n+     * Return the SQL for the given selecting operation.\n+     */\n+    public SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause, boolean subselect) {\n+        return toOperation(op, selects, from, where, group, having, order,\n+                distinct, start, end, forUpdateClause, subselect, false);\n+    }\n+\n+    /**\n+     * Return the SQL for the given selecting operation.\n+     */\n+    private SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause, boolean subselect, boolean checkTableForUpdate) {\n         SQLBuffer buf = new SQLBuffer(this);\n         buf.append(op);\n \n         boolean range = start != 0 || end != Long.MAX_VALUE;\n         if (range && rangePosition == RANGE_PRE_DISTINCT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         if (distinct)\n             buf.append(\" DISTINCT\");\n         if (range && rangePosition == RANGE_POST_DISTINCT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n \n         buf.append(\" \").append(selects).append(\" FROM \").append(from);\n \n+        if (checkTableForUpdate\n+                && (StringUtils.isEmpty(forUpdateClause) && !StringUtils\n+                        .isEmpty(tableForUpdateClause))) {\n+            buf.append(\" \").append(tableForUpdateClause);\n+        }\n+\n         if (where != null && !where.isEmpty())\n             buf.append(\" WHERE \").append(where);\n         if (group != null && !group.isEmpty())\n@@ -2242,19 +2437,20 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         if (order != null && !order.isEmpty())\n             buf.append(\" ORDER BY \").append(order);\n         if (range && rangePosition == RANGE_POST_SELECT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         if (forUpdateClause != null)\n             buf.append(\" \").append(forUpdateClause);\n         if (range && rangePosition == RANGE_POST_LOCK)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         return buf;\n     }\n \n     /**\n      * If this dictionary can select ranges,\n      * use this method to append the range SQL.\n      */\n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n     }\n \n     /**\n@@ -2272,18 +2468,30 @@ protected SQLBuffer getSelects(Select sel, boolean distinctIdentifiers,\n             aliases = sel.getSelectAliases();\n \n         Object alias;\n-        for (Iterator itr = aliases.iterator(); itr.hasNext();) {\n-            alias = itr.next();\n-            if (alias instanceof SQLBuffer)\n-                selectSQL.append((SQLBuffer) alias);\n-            else\n-                selectSQL.append(alias.toString());\n-            if (itr.hasNext())\n+        for (int i = 0; i < aliases.size(); i++) {\n+            alias = aliases.get(i);\n+            appendSelect(selectSQL, alias, sel, i);\n+            if (i < aliases.size() - 1)\n                 selectSQL.append(\", \");\n         }\n         return selectSQL;\n     }\n \n+    /**\n+     * Append <code>elem</code> to <code>selectSQL</code>.\n+     * @param selectSQL The SQLBuffer to append to.\n+     * @param alias A {@link SQLBuffer} or a {@link String} to append.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected void appendSelect(SQLBuffer selectSQL, Object elem, Select sel,\n+        int idx) {\n+        if (elem instanceof SQLBuffer)\n+            selectSQL.append((SQLBuffer) elem);\n+        else\n+            selectSQL.append(elem.toString());\n+    }\n+\n     /**\n      * Returns true if a \"FOR UPDATE\" clause can be used for the specified\n      * Select object.\n@@ -2355,21 +2563,38 @@ public void assertSupport(boolean feature, String property) {\n      */\n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n-        buf.append(substringFunctionName).append(\"((\");\n+        buf.append(substringFunctionName).append(\"(\");\n         str.appendTo(buf);\n-        buf.append(\"), (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - (\");\n+        buf.append(\", \");\n+        if (start.getValue() instanceof Number) {\n+            long startLong = toLong(start);\n+            buf.append(Long.toString(startLong + 1));\n+        } else {\n+            buf.append(\"(\");\n             start.appendTo(buf);\n-            buf.append(\"))\");\n+            buf.append(\" + 1)\");\n+        }\n+        if (end != null) {\n+            buf.append(\", \");\n+            if (start.getValue() instanceof Number\n+                && end.getValue() instanceof Number) {\n+                long startLong = toLong(start);\n+                long endLong = toLong(end);\n+                buf.append(Long.toString(endLong - startLong));\n+            } else {\n+                end.appendTo(buf);\n+                buf.append(\" - (\");\n+                start.appendTo(buf);\n+                buf.append(\")\");\n+            }\n         }\n         buf.append(\")\");\n     }\n \n+    long toLong(FilterValue litValue) {\n+        return ((Number) litValue.getValue()).longValue();\n+    }\n+\n     /**\n      * Invoke this database's indexOf function.\n      *\n@@ -2518,7 +2743,7 @@ protected void appendNumericCast(SQLBuffer buf, FilterValue val) {\n      * @param val the value to cast\n      * @param type the type of the case, e.g. {@link Types#NUMERIC}\n      */\n-    public void appendCast(SQLBuffer buf, FilterValue val, int type) {\n+    public void appendCast(SQLBuffer buf, Object val, int type) {\n         // Convert the cast function: \"CAST({0} AS {1})\"\n         int firstParam = castFunction.indexOf(\"{0}\");\n         String pre = castFunction.substring(0, firstParam); // \"CAST(\"\n@@ -2532,7 +2757,12 @@ public void appendCast(SQLBuffer buf, FilterValue val, int type) {\n             post = \"\";\n \n         buf.append(pre);\n-        val.appendTo(buf);\n+        if (val instanceof FilterValue)\n+            ((FilterValue) val).appendTo(buf);\n+        else if (val instanceof SQLBuffer)\n+            buf.append(((SQLBuffer) val));\n+        else\n+            buf.append(val.toString());\n         buf.append(mid);\n         buf.append(getTypeName(type));\n         appendLength(buf, type);\n@@ -2625,12 +2855,24 @@ public String getValidSequenceName(String name, Schema schema) {\n \n     /**\n      * Make any necessary changes to the given column name to make it valid\n-     * for the current DB.\n+     * for the current DB.  The column name will be made unique for the\n+     * specified table.\n      */\n     public String getValidColumnName(String name, Table table) {\n+        return getValidColumnName(name, table, true);\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given column name to make it valid\n+     * for the current DB.  If checkForUniqueness is true, the column name will \n+     * be made unique for the specified table.\n+     */\n+    public String getValidColumnName(String name, Table table,\n+        boolean checkForUniqueness) {\n         while (name.startsWith(\"_\"))\n             name = name.substring(1);\n-        return makeNameValid(name, table, maxColumnNameLength, NAME_ANY);\n+        return makeNameValid(name, table, maxColumnNameLength, NAME_ANY,\n+            checkForUniqueness);\n     }\n \n     /**\n@@ -2737,6 +2979,20 @@ private static boolean stripVowel(StringBuffer name) {\n      */\n     protected String makeNameValid(String name, NameSet set, int maxLen,\n         int nameType) {\n+        return makeNameValid(name, set, maxLen, nameType, true);\n+    }\n+\n+    /**\n+     * Shortens the given name to the given maximum length, then checks that\n+     * it is not a reserved word. If it is reserved, appends a \"0\". If\n+     * the name conflicts with an existing schema component and uniqueness\n+     * checking is enabled, the last character is replace with '0', then \n+     * '1', etc. \n+     * Note that the given max len may be 0 if the database metadata is \n+     * incomplete.\n+     */\n+    protected String makeNameValid(String name, NameSet set, int maxLen,\n+        int nameType, boolean checkForUniqueness) {\n         if (maxLen < 1)\n             maxLen = 255;\n         if (name.length() > maxLen)\n@@ -2748,7 +3004,7 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n         }\n \n         // now make sure the name is unique\n-        if (set != null) {\n+        if (set != null && checkForUniqueness) {\n             outer:\n             for (int version = 1, chars = 1; true; version++) {\n                 // for table names, we check for the table itself in case the\n@@ -2787,36 +3043,57 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n      */\n     public String[] getCreateTableSQL(Table table) {\n         StringBuffer buf = new StringBuffer();\n-        buf.append(\"CREATE TABLE \").append(getFullName(table, false)).\n-            append(\" (\");\n-\n-        Column[] cols = table.getColumns();\n-        for (int i = 0; i < cols.length; i++) {\n-            if (i > 0)\n-                buf.append(\", \");\n-            buf.append(getDeclareColumnSQL(cols[i], false));\n+        buf.append(\"CREATE TABLE \").append(getFullName(table, false));\n+        if (supportsComments && table.hasComment()) {\n+            buf.append(\" \");\n+            comment(buf, table.getComment());\n+            buf.append(\"\\n    (\");\n+        } else {\n+            buf.append(\" (\");\n         }\n \n+        // do this before getting the columns so we know how to handle\n+        // the last comma\n+        StringBuffer endBuf = new StringBuffer();\n         PrimaryKey pk = table.getPrimaryKey();\n         String pkStr;\n         if (pk != null) {\n             pkStr = getPrimaryKeyConstraintSQL(pk);\n             if (pkStr != null)\n-                buf.append(\", \").append(pkStr);\n+                endBuf.append(pkStr);\n         }\n \n         Unique[] unqs = table.getUniques();\n         String unqStr;\n         for (int i = 0; i < unqs.length; i++) {\n             unqStr = getUniqueConstraintSQL(unqs[i]);\n-            if (unqStr != null)\n-                buf.append(\", \").append(unqStr);\n+            if (unqStr != null) {\n+                if (endBuf.length() > 0)\n+                    endBuf.append(\", \");\n+                endBuf.append(unqStr);\n+            }\n         }\n \n+        Column[] cols = table.getColumns();\n+        for (int i = 0; i < cols.length; i++) {\n+            buf.append(getDeclareColumnSQL(cols[i], false));\n+            if (i < cols.length - 1 || endBuf.length() > 0)\n+                buf.append(\", \");\n+            if (supportsComments && cols[i].hasComment()) {\n+                comment(buf, cols[i].getComment());\n+                buf.append(\"\\n    \");\n+            }\n+        }\n+\n+        buf.append(endBuf.toString());\n         buf.append(\")\");\n         return new String[]{ buf.toString() };\n     }\n \n+    protected StringBuffer comment(StringBuffer buf, String comment) {\n+        return buf.append(\"-- \").append(comment);\n+    }\n+\n     /**\n      * Return a series of SQL statements to drop the given table. Indexes\n      * will be dropped separately. Returns\n@@ -3038,7 +3315,7 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             return null;\n         if (fk.getDeleteAction() == ForeignKey.ACTION_NONE)\n             return null;\n-        if (fk.isDeferred() && !supportsDeferredConstraints)\n+        if (fk.isDeferred() && !supportsDeferredForeignKeyConstraints())\n             return null;\n         if (!supportsDeleteAction(fk.getDeleteAction())\n             || !supportsUpdateAction(fk.getUpdateAction()))\n@@ -3075,14 +3352,24 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             buf.append(\" ON UPDATE \").append(upAction);\n         if (fk.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredForeignKeyConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (fk.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(fk.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred foreign key constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredForeignKeyConstraints() {\n+        return supportsDeferredConstraints;\n+    }\n+\n     /**\n      * Return the name of the given foreign key action.\n      */\n@@ -3151,7 +3438,7 @@ public boolean supportsUpdateAction(int action) {\n      */\n     protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n-            || (unq.isDeferred() && !supportsDeferredConstraints))\n+            || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n \n         StringBuffer buf = new StringBuffer();\n@@ -3165,14 +3452,24 @@ protected String getUniqueConstraintSQL(Unique unq) {\n             append(\")\");\n         if (unq.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredUniqueConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (unq.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(unq.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred unique constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredUniqueConstraints() {\n+        return supportsDeferredConstraints;\n+    }\n+\n     /////////////////////\n     // Database metadata\n     /////////////////////\n@@ -3282,30 +3579,28 @@ protected Table newTable(ResultSet tableMeta)\n         if (str == null)\n             return new Sequence[0];\n \n-        PreparedStatement stmnt = conn.prepareStatement(str);\n+        PreparedStatement stmnt = prepareStatement(conn, str);        \n         ResultSet rs = null;\n         try {\n             int idx = 1;\n             if (schemaName != null)\n-                stmnt.setString(idx++, schemaName);\n+                stmnt.setString(idx++, schemaName.toUpperCase());\n             if (sequenceName != null)\n                 stmnt.setString(idx++, sequenceName);\n \n-            rs = stmnt.executeQuery();\n-            List seqList = new ArrayList();\n-            while (rs.next())\n-                seqList.add(newSequence(rs));\n-            return (Sequence[]) seqList.toArray(new Sequence[seqList.size()]);\n-        } finally {\n+            rs = executeQuery(conn, stmnt, str);\n+            return getSequence(rs);            \n+         } finally {\n             if (rs != null)\n                 try {\n                     rs.close();\n                 } catch (SQLException se) {\n                 }\n-            try {\n-                stmnt.close();\n-            } catch (SQLException se) {\n-            }\n+            if (stmnt != null)    \n+                try {\n+                    stmnt.close();\n+                } catch (SQLException se) {\n+                }\n         }\n     }\n \n@@ -3567,11 +3862,11 @@ protected ForeignKey newForeignKey(ResultSet fkMeta)\n         fk.setPrimaryKeySchemaName(fkMeta.getString(\"PKTABLE_SCHEM\"));\n         fk.setPrimaryKeyTableName(fkMeta.getString(\"PKTABLE_NAME\"));\n         fk.setPrimaryKeyColumnName(fkMeta.getString(\"PKCOLUMN_NAME\"));\n-        fk.setKeySequence(fkMeta.getInt(\"KEY_SEQ\"));\n-        fk.setDeferred(fkMeta.getInt(\"DEFERRABILITY\")\n+        fk.setKeySequence(fkMeta.getShort(\"KEY_SEQ\"));\n+        fk.setDeferred(fkMeta.getShort(\"DEFERRABILITY\")\n             == DatabaseMetaData.importedKeyInitiallyDeferred);\n \n-        int del = fkMeta.getInt(\"DELETE_RULE\");\n+        int del = fkMeta.getShort(\"DELETE_RULE\");\n         switch (del) {\n             case DatabaseMetaData.importedKeySetNull:\n                 fk.setDeleteAction(ForeignKey.ACTION_NULL);\n@@ -3631,13 +3926,21 @@ protected String convertSchemaCase(String objectName) {\n         if (objectName == null)\n             return null;\n \n-        if (SCHEMA_CASE_LOWER.equals(schemaCase))\n+        String scase = getSchemaCase();\n+        if (SCHEMA_CASE_LOWER.equals(scase))\n             return objectName.toLowerCase();\n-        if (SCHEMA_CASE_PRESERVE.equals(schemaCase))\n+        if (SCHEMA_CASE_PRESERVE.equals(scase))\n             return objectName;\n         return objectName.toUpperCase();\n     }\n-\n+    \n+    /**\n+     * Return DB specific schemaCase \n+     */\n+    public String getSchemaCase(){\n+        return schemaCase;\n+    }\n+        \n     /**\n      * Prepared the connection for metadata operations.\n      */\n@@ -3678,20 +3981,16 @@ public Object getGeneratedKey(Column col, Connection conn)\n             });\n         }\n \n-        PreparedStatement stmnt = conn.prepareStatement(query);\n+        PreparedStatement stmnt = prepareStatement(conn, query);\n         ResultSet rs = null;\n         try {\n-            rs = stmnt.executeQuery();\n-            if (!rs.next())\n-                throw new StoreException(_loc.get(\"no-genkey\"));\n-            Object key = rs.getObject(1);\n-            if (key == null)\n-                log.warn(_loc.get(\"invalid-genkey\", col));\n-            return key;\n+            rs = executeQuery(conn, stmnt, query);\n+            return getKey(rs, col);\n         } finally {\n             if (rs != null)\n                 try { rs.close(); } catch (SQLException se) {}\n-            try { stmnt.close(); } catch (SQLException se) {} \n+            if (stmnt != null)    \n+                try { stmnt.close(); } catch (SQLException se) {} \n         }\n     }\n \n@@ -3779,10 +4078,14 @@ public void endConfiguration() {\n         if (fixedSizeTypeNames != null)\n             fixedSizeTypeNameSet.addAll(Arrays.asList(Strings.split\n                 (fixedSizeTypeNames.toUpperCase(), \",\", 0)));\n-\n+        \n         // if user has unset sequence sql, null it out so we know sequences\n         // aren't supported\n         nextSequenceQuery = StringUtils.trimToNull(nextSequenceQuery);\n+        \n+        if (selectWords != null)\n+            selectWordSet.addAll(Arrays.asList(Strings.split(selectWords\n+                    .toUpperCase(), \",\", 0)));\n     }\n \n     //////////////////////////////////////\n@@ -3843,12 +4146,35 @@ public void handleWarning(SQLWarning warning)\n      */\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n-        if (causes.length > 0 && \"23000\".equals(causes[0].getSQLState()))\n-            return new ReferentialIntegrityException(msg).\n-                setFailedObject(failed).setNestedThrowables(causes);\n+    \tif (causes != null && causes.length > 0) {\n+    \t\tOpenJPAException ret = SQLExceptions.narrow(msg, causes[0], this);\n+    \t\tret.setFailedObject(failed).setNestedThrowables(causes);\n+    \t\treturn ret;\n+    \t}\n         return new StoreException(msg).setFailedObject(failed).\n             setNestedThrowables(causes);\n     }\n+    \n+    /**\n+     * Gets the list of String, each represents an error that can help \n+     * to narrow down a SQL exception to specific type of StoreException.<br>\n+     * For example, error code <code>\"23000\"</code> represents referential\n+     * integrity violation and hence can be narrowed down to \n+     * {@link ReferentialIntegrityException} rather than more general\n+     * {@link StoreException}.<br>\n+     * JDBC Drivers are not uniform in return values of SQLState for the same\n+     * error and hence each database specific Dictionary can specialize.<br>\n+     * \n+     * \n+     * @return an <em>unmodifiable</em> list of Strings representing supposedly \n+     * uniform SQL States for a given type of StoreException. \n+     * Default behavior is to return an empty list.\n+     */\n+    public List/*<String>*/ getSQLStates(int exceptionType) {\n+    \tif (exceptionType>=0 && exceptionType<SQL_STATE_CODES.length)\n+    \t\treturn SQL_STATE_CODES[exceptionType];\n+    \treturn EMPTY_STRING_LIST;\n+    }\n \n     /**\n      * Closes the specified {@link DataSource} and releases any\n@@ -3883,6 +4209,117 @@ public String getVersionColumn(Column column, String tableAlias) {\n         return column.toString();\n     }\n     \n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n+        if (ob != null) {\n+            row.setBinaryStream(col, \n+                new ByteArrayInputStream(new byte[0]), 0);\n+        } else {\n+            row.setNull(col);\n+        }\n+    }\n+    \n+    public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n+    throws SQLException {\n+        if (ob != null) {\n+        row.setCharacterStream(col,\n+                new CharArrayReader(new char[0]), 0);\n+        } else {\n+            row.setNull(col);\n+        }\n+    }\n+    \n+    public void updateBlob(Select sel, JDBCStore store, InputStream is)\n+        throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        Connection conn = store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE,\n+                ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            Blob blob = res.getBlob(1);\n+            OutputStream os = blob.setBinaryStream(1);\n+            copy(is, os);\n+            os.close();\n+            res.updateBlob(1, blob);\n+            res.updateRow();\n+\n+        } catch (IOException ioe) {\n+            throw new StoreException(ioe);\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+    }\n+    \n+    public void updateClob(Select sel, JDBCStore store, Reader reader)\n+        throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        Connection conn = store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE,\n+                ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            Clob clob = res.getClob(1);\n+            Writer writer = clob.setCharacterStream(1);\n+            copy(reader, writer);\n+            writer.close();\n+            res.updateClob(1, clob);\n+            res.updateRow();\n+\n+        } catch (IOException ioe) {\n+            throw new StoreException(ioe);\n+        } finally {\n+            if (res != null) \n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null) \n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null) \n+                try { conn.close (); } catch (SQLException e) {}\n+        }    \n+    }\n+    \n+    protected long copy(InputStream in, OutputStream out) throws IOException {\n+        byte[] copyBuffer = new byte[blobBufferSize];\n+        long bytesCopied = 0;\n+        int read = -1;\n+\n+        while ((read = in.read(copyBuffer, 0, copyBuffer.length)) != -1) {\n+            out.write(copyBuffer, 0, read);\n+            bytesCopied += read;\n+        }\n+        return bytesCopied;\n+    }\n+    \n+    protected long copy(Reader reader, Writer writer) throws IOException {\n+        char[] copyBuffer = new char[clobBufferSize];\n+        long bytesCopied = 0;\n+        int read = -1;\n+\n+        while ((read = reader.read(copyBuffer, 0, copyBuffer.length)) != -1) {\n+            writer.write(copyBuffer, 0, read);\n+            bytesCopied += read;\n+        }\n+\n+        return bytesCopied;\n+    }\n+    \n     /**\n      * Attach CAST to the current function if necessary\n      * \n@@ -3893,5 +4330,136 @@ public String getVersionColumn(Column column, String tableAlias) {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n-   \n+    \n+    /**\n+     * Create an index if necessary for some database tables\n+     */\n+    public void createIndexIfNecessary(Schema schema, String table,\n+            Column pkColumn) {\n+    }\n+    \n+    /**\n+     * Return the batchLimit\n+     */\n+    public int getBatchLimit(){\n+        return batchLimit;\n+    }\n+    \n+    /**\n+     * Set the batchLimit value\n+     */\n+    public void setBatchLimit(int limit){\n+        batchLimit = limit;\n+    }\n+    \n+    /**\n+     * Validate the batch process. In some cases, we can't batch the statements\n+     * due to some restrictions. For example, if the GeneratedType=IDENTITY,\n+     * we have to disable the batch process because we need to get the ID value\n+     * right away for the in-memory entity to use.\n+     */\n+    public boolean validateBatchProcess(RowImpl row, Column[] autoAssign,\n+            OpenJPAStateManager  sm, ClassMapping cmd ) {\n+        boolean disableBatch = false;\n+        if (getBatchLimit()== 0) return false;\n+        if (autoAssign != null && sm != null) {\n+            FieldMetaData[] fmd = cmd.getPrimaryKeyFields();\n+            int i = 0;\n+            while (!disableBatch && i < fmd.length) {\n+                if (fmd[i].getValueStrategy() == ValueStrategies.AUTOASSIGN)\n+                    disableBatch = true;\n+                i++;\n+            }\n+        }\n+        // go to each Dictionary to validate the batch capability\n+        if (!disableBatch)\n+            disableBatch = validateDBSpecificBatchProcess(disableBatch, row, \n+                autoAssign, sm, cmd);\n+        return disableBatch;\n+    }\n+    \n+    /**\n+     * Allow each Dictionary to validate its own batch process. \n+     */\n+    public boolean validateDBSpecificBatchProcess (boolean disableBatch, \n+            RowImpl row, Column[] autoAssign, \n+            OpenJPAStateManager  sm, ClassMapping cmd ) {\n+        return disableBatch;\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing query.\n+     */\n+    protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt, String sql \n+        ) throws SQLException {\n+        return stmnt.executeQuery();\n+    }\n+            \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(Connection conn, String sql)\n+        throws SQLException {\n+        return conn.prepareStatement(sql);\n+    }    \n+ \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of getting sequence from the result set.\n+     */\n+    protected Sequence[] getSequence(ResultSet rs) throws SQLException {\n+        List seqList = new ArrayList();\n+        while (rs != null && rs.next())\n+            seqList.add(newSequence(rs));\n+        return (Sequence[]) seqList.toArray(new Sequence[seqList.size()]);\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of getting key from the result set.\n+     */\n+    protected Object getKey (ResultSet rs, Column col) throws SQLException {\n+        if (!rs.next())\n+            throw new StoreException(_loc.get(\"no-genkey\"));\n+        Object key = rs.getObject(1);\n+        if (key == null)\n+            log.warn(_loc.get(\"invalid-genkey\", col));\n+        return key;        \n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of calculating value.\n+     */\n+    protected void calculateValue(Val val, Select sel, ExpContext ctx, \n+        ExpState state, Path path, ExpState pathState) {\n+        val.calculateValue(sel, ctx, state, (Val) path, pathState);\n+    }\n+\n+    /**\n+     * Determine whether the provided <code>sql</code> may be treated as a \n+     * select statement on this database.\n+     *  \n+     * @param sql   A sql statement. \n+     * \n+     * @return true if <code>sql</code> represents a select statement.\n+     */\n+    public boolean isSelect(String sql) {\n+        Iterator i = selectWordSet.iterator();\n+        String cur;\n+        while (i.hasNext()) {\n+            cur = (String) i.next();\n+            if (sql.length() >= cur.length()\n+                    && sql.substring(0, cur.length()).equalsIgnoreCase(cur)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n+        //Do nothing\n+    }\n }"},{"sha":"aa67411190c4b9331070eb00bdec2da96cf22575","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -216,9 +216,9 @@ private static String dictionaryClassForString(String prod\n         // test h2 in a special way, because there's a decent chance the string \n         // h2 could appear in the URL of another database\n         if (prod.indexOf(\"jdbc:h2:\") != -1)\n-            return H2Dictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"h2\");\n         if (prod.indexOf(\"h2 database\") != -1)\n-            return H2Dictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"h2\");\n         // test db2 last, because there's a decent chance this string could\n         // appear in the URL of another database (like if the db is named\n         // \"testdb2\" or something)"},{"sha":"f79307f88fdf64b9eac28265da8c9303e805d5d8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":32,"deletions":3,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -20,9 +20,14 @@\n \n import java.sql.DriverManager;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n+\n import javax.sql.DataSource;\n \n+import org.apache.openjpa.util.StoreException;\n+\n /**\n  * Dictionary for Apache Derby (formerly Cloudscape).\n  */\n@@ -42,9 +47,9 @@ public DerbyDictionary() {\n         substringFunctionName = \"SUBSTR\";\n \n         maxConstraintNameLength = 18;\n-        maxIndexNameLength = 18;\n+        maxIndexNameLength = 128;\n         maxColumnNameLength = 30;\n-        maxTableNameLength = 18;\n+        maxTableNameLength = 128;\n \n         useGetBytesForBlobs = true;\n         useSetBytesForBlobs = true;\n@@ -56,14 +61,16 @@ public DerbyDictionary() {\n         requiresCastForMathFunctions = true;\n         requiresCastForComparisons = true;\n \n+        supportsComments = true;\n+\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n             \"BIGINT\", \"INTEGER\",\n         }));\n         reservedWordSet.addAll(Arrays.asList(new String[]{\n             \"ALIAS\", \"BIGINT\", \"BOOLEAN\", \"CALL\", \"CLASS\",\n             \"COPY\", \"DB2J_DEBUG\", \"EXECUTE\", \"EXPLAIN\",\n             \"FILE\", \"FILTER\", \"GETCURRENTCONNECTION\", \"INDEX\",\n-            \"INSTANCEOF\", \"METHOD\", \"NEW\", \"OFF\", \"OUT\", \"PROPERTIES\",\n+            \"INSTANCEOF\", \"KEY\", \"METHOD\", \"NEW\", \"OFF\", \"OUT\", \"PROPERTIES\",\n             \"PUBLICATION\", \"RECOMPILE\", \"REFRESH\", \"RENAME\",\n             \"RUNTIMESTATISTICS\", \"STATEMENT\", \"STATISTICS\",\n             \"TIMING\", \"WAIT\", \"XML\",\n@@ -93,4 +100,26 @@ public void closeDataSource(DataSource dataSource) {\n             }\n         }\n     }\n+    \n+    /**\n+     * Adds extra SQLState code that Derby JDBC Driver uses. In JDBC 4.0,\n+     * SQLState will follow either XOPEN or SQL 2003 convention. A compliant\n+     * driver can be queries via DatabaseMetaData.getSQLStateType() to detect\n+     * the convention type.<br>\n+     * This method is overwritten to highlight that a) the SQL State is ideally\n+     * uniform across JDBC Drivers but not practically and b) the overwritten\n+     * method must crate a new list to return as the super classes list is\n+     * unmodifable.\n+     */\n+    public List getSQLStates(int exceptionType) {\n+    \tList original = super.getSQLStates(exceptionType);\n+    \tif (exceptionType == StoreException.LOCK) {\n+    \t\t// Can not add new codes to unmodifable list of the super class\n+    \t\tList newStates = new ArrayList(original);\n+    \t\tnewStates.add(\"40XL1\");\n+    \t\treturn newStates;\n+    \t}\n+    \treturn original;\n+    }\n+    \n }"},{"sha":"75a6b6ed38ad8a379381c3621453343fa3f7f9da","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":2,"deletions":19,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -68,7 +68,6 @@ public H2Dictionary() {\n         rangePosition = RANGE_POST_LOCK;\n         supportsDeferredConstraints = false;\n \n-        useGetObjectForBlobs = true;\n         blobTypeName = \"BLOB\";\n         doubleTypeName = \"DOUBLE\";\n \n@@ -185,30 +184,14 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return cols;\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);\n         if (start != 0)\n             buf.append(\" OFFSET \").appendValue(start);\n     }\n \n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(\"SUBSTR(\");\n-        str.appendTo(buf);\n-        buf.append(\", (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - \");\n-            start.appendTo(buf);\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n-\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(POSITION(\");"},{"sha":"6914b21cf10e3c3c461271eebf2463676adc47d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":3,"deletions":19,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -193,7 +193,7 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return buf.toString();\n     }\n \n-    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+    public SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n         SQLBuffer order, boolean distinct, long start, long end,\n         String forUpdateClause) {\n@@ -250,7 +250,8 @@ public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n         }\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         // HSQL doesn't parameters in range\n         buf.append(\" LIMIT \").append(String.valueOf(start)).append(\" \");\n         if (end == Long.MAX_VALUE)\n@@ -259,23 +260,6 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n             buf.append(String.valueOf(end - start));\n     }\n \n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(substringFunctionName).append(\"((\");\n-        str.appendTo(buf);\n-        buf.append(\"), (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            appendNumericCast(buf, end);\n-            buf.append(\" - (\");\n-            appendNumericCast(buf, start);\n-            buf.append(\"))\");\n-        }\n-        buf.append(\")\");\n-    }\n-\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(LOCATE(\");"},{"sha":"e03b63d0e98bfde3098c117b1652072ba871a83b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -96,9 +96,6 @@ public InformixDictionary() {\n         maxIndexNameLength = 18;\n         maxConstraintNameLength = 18;\n \n-        // Informix uses a non-standard \":\" to separate schema and table names\n-        catalogSeparator = \":\";\n-\n         // informix supports \"CLOB\" type, but any attempt to insert\n         // into them raises: \"java.sql.SQLException: Can't convert fromnull\"\n         useGetStringForClobs = true;\n@@ -111,7 +108,8 @@ public InformixDictionary() {\n         blobTypeName = \"BYTE\";\n         doubleTypeName = \"NUMERIC(32,20)\";\n         dateTypeName = \"DATE\";\n-        timestampTypeName = \"DATE\";\n+        timeTypeName = \"DATETIME HOUR TO SECOND\";\n+        timestampTypeName = \"DATETIME YEAR TO SECOND\";\n         doubleTypeName = \"NUMERIC(32,20)\";\n         floatTypeName = \"REAL\";\n         bigintTypeName = \"NUMERIC(32,0)\";"},{"sha":"680f5dd24651d8b9e4bc4bb400258725365e3c90","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -447,6 +447,10 @@ public Collection getTableAliases() {\n             return sel.getTableAliases();\n         }\n \n+        public List getSelects() {\n+            return sel.getSelects();\n+        }\n+\n         public List getSelectAliases() {\n             return sel.getSelectAliases();\n         }"},{"sha":"26c77f06bf7b28be28743ffddccd33cb30b3e803","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -252,6 +252,11 @@ public InputStream getBinaryStream(Object obj)\n         return _res[_idx].getBinaryStream(obj);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException {\n+        return _res[_idx].getLOBStream(store, obj);\n+    }\n+    \n     public Blob getBlob(Object obj)\n         throws SQLException {\n         return _res[_idx].getBlob(obj);"},{"sha":"29579fbd26c38451ee26d328ad0a9dc8e6839172","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":72,"deletions":4,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n@@ -51,7 +53,7 @@\n     /**\n      * Whether the driver automatically deserializes blobs.\n      */\n-    public boolean driverDeserializesBlobs = true;\n+    public boolean driverDeserializesBlobs = false;\n \n     /**\n      * Whether to inline multi-table bulk-delete operations into MySQL's \n@@ -70,11 +72,10 @@ public MySQLDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_MID;\n         supportsMultipleNontransactionalResultSets = false;\n-        supportsSubselect = false; // old versions\n         requiresAliasForSubselect = true; // new versions\n+        requiresTargetForDelete = true;\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n-        allowsAliasInBulkClause = false;\n \n         concatenateFunction = \"CONCAT({0},{1})\";\n \n@@ -107,6 +108,71 @@ public MySQLDictionary() {\n \n         // MySQL requires double-escape for strings\n         searchStringEscape = \"\\\\\\\\\";\n+\n+        typeModifierSet.addAll(Arrays.asList(new String[] { \"UNSIGNED\",\n+            \"ZEROFILL\" }));\n+    }\n+\n+    public void connectedConfiguration(Connection conn) throws SQLException {\n+        super.connectedConfiguration(conn);\n+\n+        DatabaseMetaData metaData = conn.getMetaData();\n+        // The product version looks like 4.1.3-nt\n+        String productVersion = metaData.getDatabaseProductVersion();\n+        // The driver version looks like mysql-connector-java-3.1.11 (...)\n+        String driverVersion = metaData.getDriverVersion();\n+\n+        try {\n+            int[] versions = getMajorMinorVersions(productVersion);\n+            int maj = versions[0];\n+            int min = versions[1];\n+            if (maj < 4 || (maj == 4 && min < 1)) {\n+                supportsSubselect = false;\n+                allowsAliasInBulkClause = false;\n+            }\n+\n+            versions = getMajorMinorVersions(driverVersion);\n+            maj = versions[0];\n+            if (maj < 5) {\n+                driverDeserializesBlobs = true;\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // we don't understand the version format.\n+            // That is ok. We just take the default values.\n+        }\n+    }\n+\n+    private static int[] getMajorMinorVersions(String versionStr)\n+        throws IllegalArgumentException {\n+        int beginIndex = 0;\n+        int endIndex = 0;\n+\n+        versionStr = versionStr.trim();\n+        char[] charArr = versionStr.toCharArray();\n+        for (int i = 0; i < charArr.length; i++) {\n+            if (Character.isDigit(charArr[i])) {\n+                beginIndex = i;\n+                break;\n+            }\n+        }\n+\n+        for (int i = beginIndex+1; i < charArr.length; i++) {\n+            if (charArr[i] != '.' && !Character.isDigit(charArr[i])) {\n+                endIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (endIndex < beginIndex)\n+            throw new IllegalArgumentException();\n+\n+        String[] arr = versionStr.substring(beginIndex, endIndex).split(\"\\\\.\");\n+        if (arr.length < 2)\n+            throw new IllegalArgumentException();\n+\n+        int maj = Integer.parseInt(arr[0]);\n+        int min = Integer.parseInt(arr[1]);\n+        return new int[]{maj, min};\n     }\n \n     public String[] getCreateTableSQL(Table table) {\n@@ -162,7 +228,8 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n         }\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         buf.append(\" LIMIT \").appendValue(start).append(\", \");\n         if (end == Long.MAX_VALUE)\n             buf.appendValue(Long.MAX_VALUE);\n@@ -175,6 +242,7 @@ protected Column newColumn(ResultSet colMeta)\n         Column col = super.newColumn(colMeta);\n         if (col.isNotNull() && \"0\".equals(col.getDefaultString()))\n             col.setDefaultString(null);\n+\n         return col;\n     }\n "},{"sha":"1b98475414c66fadc60fc450f81a7f45818f35f4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":39,"deletions":31,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -45,10 +45,12 @@\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n+\n import serp.util.Numbers;\n \n /**\n@@ -106,6 +108,9 @@\n     private Method _putBytes = null;\n     private Method _putString = null;\n     private Method _putChars = null;\n+    \n+    // batch limit\n+    private int defaultBatchLimit = 100;\n \n     public OracleDictionary() {\n         platform = \"Oracle\";\n@@ -155,6 +160,10 @@ public OracleDictionary() {\n             \"LONG\", \"MAXEXTENTS\", \"MINUS\", \"MODE\", \"NOAUDIT\", \"NOCOMPRESS\",\n             \"NOWAIT\", \"OFFLINE\", \"ONLINE\", \"PCTFREE\", \"ROW\",\n         }));\n+\n+        substringFunctionName = \"SUBSTR\";\n+        super.setBatchLimit(defaultBatchLimit);\n+        selectWordSet.add(\"WITH\");\n     }\n \n     public void endConfiguration() {\n@@ -189,15 +198,14 @@ public void connectedConfiguration(Connection conn)\n                 int release = Integer.parseInt(productVersion);\n                 \n                 // warn sql92\n-                if (release == 8) {\n+                if (release <= 8) {\n                     if (joinSyntax == SYNTAX_SQL92 && log.isWarnEnabled())\n                         log.warn(_loc.get(\"oracle-syntax\"));\n                     joinSyntax = SYNTAX_DATABASE;\n                     dateTypeName = \"DATE\"; // added oracle 9\n                     timestampTypeName = \"DATE\"; // added oracle 9\n                     supportsXMLColumn = false;\n                 }\n-                else \n                     // select of an xml column requires \".getStringVal()\"\n                     // suffix. eg. t0.xmlcol.getStringVal()\n                     getStringVal = \".getStringVal()\";\n@@ -352,7 +360,8 @@ public SQLBuffer toNativeJoin(Join join) {\n     public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         SQLBuffer tables, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n-        boolean distinct, boolean forUpdate, long start, long end) {\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        Select sel) {\n         if (!_checkedUpdateBug) {\n             ensureDriverVendor();\n             if (forUpdate && _driverBehavior == BEHAVE_DATADIRECT31)\n@@ -363,7 +372,7 @@ public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         // if no range, use standard select\n         if (start == 0 && end == Long.MAX_VALUE)\n             return super.toSelect(select, fetch, tables, where, group, having,\n-                order, distinct, forUpdate, 0, Long.MAX_VALUE);\n+                order, distinct, forUpdate, 0, Long.MAX_VALUE, sel);\n \n         // if no skip, ordering, or distinct can use rownum directly\n         SQLBuffer buf = new SQLBuffer(this);\n@@ -372,17 +381,18 @@ public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n                 buf.append(where).append(\" AND \");\n             buf.append(\"ROWNUM <= \").appendValue(end);\n             return super.toSelect(select, fetch, tables, buf, group, having,\n-                order, distinct, forUpdate, 0, Long.MAX_VALUE);\n+                order, distinct, forUpdate, 0, Long.MAX_VALUE, sel);\n         }\n \n         // if there is ordering, skip, or distinct we have to use subselects\n-        SQLBuffer sel = super.toSelect(select, fetch, tables, where,\n-            group, having, order, distinct, forUpdate, 0, Long.MAX_VALUE);\n+        SQLBuffer newsel = super.toSelect(select, fetch, tables, where,\n+            group, having, order, distinct, forUpdate, 0, Long.MAX_VALUE,\n+            sel);\n \n         // if no skip, can use single nested subselect\n         if (start == 0) {\n             buf.append(getSelectOperation(fetch) + \" * FROM (\");\n-            buf.append(sel);\n+            buf.append(newsel);\n             buf.append(\") WHERE ROWNUM <= \").appendValue(end);\n             return buf;\n         }\n@@ -391,7 +401,7 @@ public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         // where conditions on the rownum\n         buf.append(getSelectOperation(fetch)\n             + \" * FROM (SELECT r.*, ROWNUM RNUM FROM (\");\n-        buf.append(sel);\n+        buf.append(newsel);\n         buf.append(\") r\");\n         if (end != Long.MAX_VALUE)\n             buf.append(\" WHERE ROWNUM <= \").appendValue(end);\n@@ -423,23 +433,6 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n         return select;\n     }\n \n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(\"SUBSTR(\");\n-        str.appendTo(buf);\n-        buf.append(\", (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - \");\n-            start.appendTo(buf);\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n-\n     public void setString(PreparedStatement stmnt, int idx, String val,\n         Column col)\n         throws SQLException {\n@@ -467,7 +460,6 @@ public void setString(PreparedStatement stmnt, int idx, String val,\n                                     (\"oracle.jdbc.OraclePreparedStatement\").\n                                     getField(\"FORM_NCHAR\").get(null)\n                             });\n-                    return;\n                 } catch (Exception e) {\n                     log.warn(e);\n                 }\n@@ -1004,25 +996,27 @@ private static void invokePutLobMethod(Method method, Object target,\n         }\n     }\n \n-    private static Clob getEmptyClob()\n+    private Clob getEmptyClob()\n         throws SQLException {\n         if (EMPTY_CLOB != null)\n             return EMPTY_CLOB;\n         try {\n-            return EMPTY_CLOB = (Clob) Class.forName(\"oracle.sql.CLOB\").\n+            return EMPTY_CLOB = (Clob) Class.forName(\"oracle.sql.CLOB\",true, \n+                    Thread.currentThread().getContextClassLoader()).\n                 getMethod(\"empty_lob\", new Class[0]).\n                 invoke(null, new Object[0]);\n         } catch (Exception e) {\n             throw new SQLException(e.getMessage());\n         }\n     }\n \n-    private static Blob getEmptyBlob()\n+    private Blob getEmptyBlob()\n         throws SQLException {\n         if (EMPTY_BLOB != null)\n             return EMPTY_BLOB;\n         try {\n-            return EMPTY_BLOB = (Blob) Class.forName(\"oracle.sql.BLOB\").\n+            return EMPTY_BLOB = (Blob) Class.forName(\"oracle.sql.BLOB\",true, \n+                    Thread.currentThread().getContextClassLoader()).\n                 getMethod(\"empty_lob\", new Class[0]).\n                 invoke(null, new Object[0]);\n         } catch (Exception e) {\n@@ -1097,4 +1091,18 @@ private void appendXmlExtractValue(SQLBuffer buf, FilterValue val) {\n         val.appendTo(buf);\n         buf.append(\"')\");\n     }\n+    \n+    public void insertBlobForStreamingLoad(Row row, Column col, Object ob)\n+        throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n+        row.setNull(col);\n+    }\n+    \n+    public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n+        throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n+        row.setNull(col);\n+    }\n }"},{"sha":"2aaf95d3b2d8984a788ae13d9fd242c4c0601ea6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":166,"deletions":5,"changes":171,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -29,13 +32,19 @@\n import java.util.Arrays;\n import java.util.Date;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.StoreException;\n+import org.postgresql.PGConnection;\n+import org.postgresql.largeobject.LargeObject;\n+import org.postgresql.largeobject.LargeObjectManager;\n \n /**\n  * Dictionary for Postgres.\n@@ -94,10 +103,11 @@ public PostgresDictionary() {\n         // PostgreSQL requires double-escape for strings\n         searchStringEscape = \"\\\\\\\\\";\n \n-        maxTableNameLength = 31;\n-        maxColumnNameLength = 31;\n-        maxIndexNameLength = 31;\n-        maxConstraintNameLength = 31;\n+        maxTableNameLength = 63;\n+        maxColumnNameLength = 63;\n+        maxIndexNameLength = 63;\n+        maxConstraintNameLength = 63;\n+        maxAutoAssignNameLength = 63;\n         schemaCase = SCHEMA_CASE_LOWER;\n         rangePosition = RANGE_POST_LOCK;\n         requiresAliasForSubselect = true;\n@@ -240,7 +250,8 @@ public void setNull(PreparedStatement stmnt, int idx, int colType,\n         stmnt.setNull(idx, colType);\n     }\n \n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);\n         if (start != 0)\n@@ -271,6 +282,11 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         return sql;\n     }\n \n+    protected boolean supportsDeferredUniqueConstraints() {\n+        // Postgres only supports deferred foreign key constraints.\n+        return false;\n+    }\n+\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         if (schemaName == null && sequenceName == null)\n             return allSequencesSQL;\n@@ -312,6 +328,151 @@ public Connection decorate(Connection conn)\n         return new PostgresConnection(super.decorate(conn), this);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n+        int column) throws SQLException {\n+        DelegatingConnection conn = (DelegatingConnection)store\n+            .getConnection();\n+        conn.setAutoCommit(false);\n+        LargeObjectManager lom = ((PGConnection)conn.getInnermostDelegate())\n+        .getLargeObjectAPI();\n+        if (rs.getInt(column) != -1) {\n+            LargeObject lo = lom.open(rs.getInt(column));\n+            return lo.getInputStream();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n+        if (row.getAction() == Row.ACTION_INSERT) {\n+            insertPostgresBlob(row, col, store, ob);\n+        } else if (row.getAction() == Row.ACTION_UPDATE) {\n+            updatePostgresBlob(row, col, store, ob, sel);\n+        }\n+    }\n+\n+    private void insertPostgresBlob(Row row, Column col, JDBCStore store,\n+        Object ob) throws SQLException {\n+        if (ob != null) {\n+            col.setType(Types.INTEGER);\n+            DelegatingConnection conn = (DelegatingConnection)store\n+            .getConnection();\n+            try {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection) conn.getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                // The create method is valid in versions previous 8.3\n+                // in 8.3 this methos is deprecated, use createLO\n+                int oid = lom.create();\n+                LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                OutputStream os = lo.getOutputStream();\n+                copy((InputStream)ob, os);\n+                lo.close();\n+                row.setInt(col, oid);\n+            } catch (IOException ioe) {\n+                throw new StoreException(ioe);\n+            } finally {\n+                conn.close();\n+            }\n+        } else {\n+            row.setInt(col, -1);\n+        }\n+    }\n+    \n+    private void updatePostgresBlob(Row row, Column col, JDBCStore store,\n+        Object ob, Select sel) throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        DelegatingConnection conn = \n+            (DelegatingConnection) store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            int oid = res.getInt(1);\n+            if (oid != -1) {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection)conn\n+                    .getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                if (ob != null) {\n+                    LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                    OutputStream os = lo.getOutputStream();\n+                    copy((InputStream)ob, os);\n+                    lo.close();\n+                } else {\n+                    lom.delete(oid);\n+                    row.setInt(col, -1);\n+                }\n+            } else {\n+                if (ob != null) {\n+                    conn.setAutoCommit(false);\n+                    PGConnection pgconn = (PGConnection)conn\n+                        .getInnermostDelegate();\n+                    LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                    oid = lom.create();\n+                    LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                    OutputStream os = lo.getOutputStream();\n+                    copy((InputStream)ob, os);\n+                    lo.close();\n+                    row.setInt(col, oid);\n+                }\n+            }\n+\n+        } catch (IOException ioe) {\n+            throw new StoreException(ioe);\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+\n+    }\n+    \n+    public void updateBlob(Select sel, JDBCStore store, InputStream is)\n+        throws SQLException {\n+        //Do nothing\n+    }\n+\n+    public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        DelegatingConnection conn = \n+            (DelegatingConnection) store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            int oid = res.getInt(1);\n+            if (oid != -1) {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection)conn\n+                    .getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                lom.delete(oid);\n+            }\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+    }\n+    \n     /**\n      * Connection wrapper to work around the postgres empty result set bug.\n      */"},{"sha":"5eb3c417280cbc40504185f30022d8589edec6b0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -212,7 +212,9 @@ public BigInteger getBigInteger(Object obj)\n      */\n     public InputStream getBinaryStream(Object obj)\n         throws SQLException;\n-\n+    \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException;\n     /**\n      * Return the value stored in the given column or id; may not be supported\n      * by results that are not backed by a SQL result set."},{"sha":"2398c7fd0a8cdf6617c65ab13b3631150246568e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.meta.JavaTypes;\n+\n import serp.util.Numbers;\n \n /**\n@@ -91,6 +92,17 @@ public ResultSetResult(Connection conn, Statement stmnt,\n         setStore(store);\n     }\n \n+    /**\n+     * Constructor.\n+     */\n+    public ResultSetResult(Connection conn,\n+        ResultSet rs, DBDictionary dict) {\n+        _conn = conn;\n+        _stmnt = null;\n+        _rs = rs;\n+        _dict = dict;\n+    }\n+\n     /**\n      * JDBC 2 constructor. Relies on being able to retrieve the statement\n      * from the result set, and the connection from the statement.\n@@ -334,6 +346,11 @@ protected long getLongInternal(Object obj, Joins joins)\n         return _dict.getLong(_rs, ((Number) obj).intValue());\n     }\n \n+    protected Object getStreamInternal(JDBCStore store, Object obj,\n+        int metaTypeCode, Object arg, Joins joins) throws SQLException {\n+        return getLOBStreamInternal(store, obj, joins);\n+    }\n+    \n     protected Object getObjectInternal(Object obj, int metaTypeCode,\n         Object arg, Joins joins)\n         throws SQLException {\n@@ -487,4 +504,9 @@ protected int findObject(Object obj, Joins joins)\n             return 0;\n         }\n     }\n+  \n+    protected InputStream getLOBStreamInternal(JDBCStore store, Object obj,\n+        Joins joins) throws SQLException {\n+        return _dict.getLOBStream(store, _rs, ((Number) obj).intValue());\n+    }\n }"},{"sha":"ce012a8b45e5ce053cae86de1c0baaef1466e760","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -20,7 +20,6 @@\n \n import java.io.InputStream;\n import java.io.Reader;\n-import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Array;\n@@ -57,10 +56,10 @@\n public class RowImpl\n     implements Row, Cloneable {\n \n-    protected static final Object NULL = new Object();\n+    public static final Object NULL = new Object();\n     protected static final int VALID = 2 << 0;\n \n-    private static final int RAW = Integer.MIN_VALUE;\n+    public static final int RAW = Integer.MIN_VALUE;\n \n     protected byte flags = 0;\n     private final Column[] _cols;\n@@ -950,4 +949,12 @@ public void copyInto(RowImpl row, boolean whereOnly) {\n         if (isValid())\n             row.setValid(true);\n     }\n+    \n+    public Object[] getVals() {\n+        return _vals;\n+    }\n+    \n+    public int[] getTypes() {\n+        return _types;\n+    }\n }"},{"sha":"386245bcf7df3edbe6b63c4aa0125abb22abaa5e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -606,6 +606,17 @@ public void addCastForParam(String oper, Val val) {\n         }\n     }\n \n+    /**\n+     * Replace current buffer string with the new string\n+     * \n+     * @param start replace start position\n+     * @param end replace end position\n+     * @param newString\n+     */\n+    public void replaceSqlString(int start, int end, String newString) {\n+        _sql.replace(start, end, newString);\n+    }\n+    \n     /**\n      * Represents a subselect.\n      */\n@@ -630,4 +641,12 @@ public Subselect clone(int sqlIndex, int paramIndex) {\n             return sub;\n         }\n     }\n+    \n+    public void setParameters(List params) {\n+        _params = params;\n+    }\n+    \n+    public List getColumns() {\n+        return _cols;\n+    }\n }"},{"sha":"134f02bdcf1eafbae6f8e7c52de292e699597001","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":34,"deletions":1,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -23,7 +23,12 @@\n import java.util.List;\n \n import org.apache.openjpa.lib.util.Localizer.Message;\n+import org.apache.openjpa.util.LockException;\n+import org.apache.openjpa.util.ObjectExistsException;\n+import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.StoreException;\n \n /**\n@@ -96,7 +101,7 @@ public static OpenJPAException getStore(String msg, SQLException se,\n                 setNestedThrowables(ses);\n         return dict.newStoreException(msg, ses, failed);\n     }\n-\n+    \n     /**\n      * Returns an array of {@link SQLException} instances for the\n      * specified exception.\n@@ -112,4 +117,32 @@ public static OpenJPAException getStore(String msg, SQLException se,\n         }\n         return (SQLException[]) errs.toArray(new SQLException[errs.size()]);\n     }\n+    \n+    /**\n+     * Narrows the given SQLException to a specific type of \n+     * {@link StoreException#getSubtype() StoreException} by analyzing the\n+     * SQLState code supplied by SQLException. Each database-specific \n+     * {@link DBDictionary dictionary} can supply a set of error codes that will\n+     * map to a specific specific type of StoreException via \n+     * {@link DBDictionary#getSQLStates(int) getSQLStates()} method.\n+     * The default behavior is to return generic {@link StoreException \n+     * StoreException}.\n+     */\n+    public static OpenJPAException narrow(String msg, SQLException se, \n+    \t\tDBDictionary dict) {\n+        String e = se.getSQLState();\n+        if (dict.getSQLStates(StoreException.LOCK).contains(e)) \n+            return new LockException(msg);\n+        else if (dict.getSQLStates(StoreException.OBJECT_EXISTS).contains(e))\n+            return new ObjectExistsException(msg);\n+        else if (dict.getSQLStates(StoreException.OBJECT_NOT_FOUND).contains(e))\n+            return new ObjectNotFoundException(msg);\n+        else if (dict.getSQLStates(StoreException.OPTIMISTIC).contains(e))\n+            return new OptimisticException(msg);\n+        else if (dict.getSQLStates(StoreException.REFERENTIAL_INTEGRITY)\n+        \t\t.contains(e)) \n+            return new ReferentialIntegrityException(msg);\n+        else\n+            return new StoreException(msg);\n+    }\n }"},{"sha":"18ac7cc65cb0d2ec3b27c5400d7857bed8446d1f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -42,6 +42,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (SQLServerDictionary.class);\n \n+    private String schemaCase = SCHEMA_CASE_PRESERVE;\n     /**\n      * Flag whether to treat UNIQUEIDENTIFIER as VARBINARY or VARCHAR\n      */\n@@ -230,4 +231,11 @@ private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n         appendLength(buf, type);\n         buf.append(\"')\");\n     }\n+    \n+    /**\n+     * Return DB specific schemaCase\n+     */\n+    public String getSchemaCase() {\n+        return schemaCase;\n+    }\n }"},{"sha":"599a34f86a11936268b5d57fcd15baf8e1804717","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -149,6 +149,14 @@\n      */\n     public Collection getTableAliases();\n \n+    /**\n+     * Return the actual {@link Val}s and {@link Column}s that were\n+     * selected, in the order that they were selected.\n+     *\n+     * @since 1.1.0\n+     */\n+    public List getSelects();\n+\n     /**\n      * Return the aliases of all selected columns and all selected buffers,\n      * in the order they were selected. Each alias may be either a string"},{"sha":"6d0da80711acc39198c8961e9fec5e529aaec5e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":94,"deletions":34,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -297,10 +297,11 @@ public int getCount(JDBCStore store)\n         try {\n             SQLBuffer sql = toSelectCount();\n             conn = store.getConnection();\n-            stmnt = sql.prepareStatement(conn);\n-            rs = stmnt.executeQuery();\n-            rs.next();\n-            return rs.getInt(1);\n+            stmnt = prepareStatement(conn, sql, null, \n+                ResultSet.TYPE_FORWARD_ONLY, \n+                ResultSet.CONCUR_READ_ONLY, false);\n+            rs = executeQuery(conn, stmnt, sql, false, store);\n+            return getCount(rs);\n         } finally {\n             if (rs != null)\n                 try { rs.close(); } catch (SQLException se) {}\n@@ -342,31 +343,21 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         }\n \n         SQLBuffer sql = toSelect(forUpdate, fetch);\n-        int rsType = (isLRS() && supportsRandomAccess(forUpdate))\n+        boolean isLRS = isLRS();\n+        int rsType = (isLRS && supportsRandomAccess(forUpdate))\n             ? -1 : ResultSet.TYPE_FORWARD_ONLY;\n         Connection conn = store.getConnection();\n         PreparedStatement stmnt = null;\n         ResultSet rs = null;\n         try {\n-            if (isLRS())\n-                stmnt = sql.prepareStatement(conn, fetch, rsType, -1);\n+            if (isLRS) \n+                stmnt = prepareStatement(conn, sql, fetch, rsType, -1, true); \n             else\n-                stmnt = sql.prepareStatement(conn, rsType, -1);\n-\n-            // if this is a locking select and the lock timeout is greater than\n-            // the configured query timeout, use the lock timeout\n-            if (forUpdate && _dict.supportsQueryTimeout && fetch != null \n-                && fetch.getLockTimeout() > stmnt.getQueryTimeout() * 1000) {\n-                int timeout = fetch.getLockTimeout();\n-                if (timeout < 1000) {\n-                    timeout = 1000; \n-                    Log log = _conf.getLog(JDBCConfiguration.LOG_JDBC);\n-                    if (log.isWarnEnabled())\n-                        log.warn(_loc.get(\"millis-query-timeout\"));\n-                }\n-                stmnt.setQueryTimeout(fetch.getLockTimeout() / 1000);\n-            }\n-            rs = stmnt.executeQuery();\n+                stmnt = prepareStatement(conn, sql, null, rsType, -1, false);\n+            \n+            setTimeout(stmnt, forUpdate, fetch);\n+            \n+            rs = executeQuery(conn, stmnt, sql, isLRS, store);\n         } catch (SQLException se) {\n             // clean up statement\n             if (stmnt != null)\n@@ -375,17 +366,8 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n             throw se;\n         }\n \n-        SelectResult res = new SelectResult(conn, stmnt, rs, _dict);\n-        res.setSelect(this);\n-        res.setStore(store);\n-        res.setLocking(forUpdate);\n-        try {\n-            addEagerResults(res, this, store, fetch);\n-        } catch (SQLException se) {\n-            res.close();\n-            throw se;\n-        }\n-        return res;\n+        return getEagerResult(conn, stmnt, rs, store, fetch, forUpdate, \n+            sql.getSQL());\n     }\n \n     /**\n@@ -423,6 +405,80 @@ private static void addEagerResults(SelectResult res, SelectImpl sel,\n         }\n     }\n \n+\n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(Connection conn, \n+        SQLBuffer sql, JDBCFetchConfiguration fetch, int rsType, \n+        int rsConcur, boolean isLRS) throws SQLException {\n+        if (fetch == null)\n+            return sql.prepareStatement(conn, rsType, rsConcur);\n+        else\n+            return sql.prepareStatement(conn, fetch, rsType, -1);\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of setting query timeout.\n+     */\n+    protected void setTimeout(PreparedStatement stmnt, boolean forUpdate,\n+        JDBCFetchConfiguration fetch) throws SQLException {\n+        // if this is a locking select and the lock timeout is greater than\n+        // the configured query timeout, use the lock timeout\n+        if (forUpdate && _dict.supportsQueryTimeout && fetch != null \n+            && fetch.getLockTimeout() > stmnt.getQueryTimeout() * 1000) {\n+            int timeout = fetch.getLockTimeout();\n+            if (timeout < 1000) {\n+                timeout = 1000; \n+                Log log = _conf.getLog(JDBCConfiguration.LOG_JDBC);\n+                if (log.isWarnEnabled())\n+                    log.warn(_loc.get(\"millis-query-timeout\"));\n+            }\n+            stmnt.setQueryTimeout(timeout / 1000);\n+        }\n+    }\n+\n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing query.\n+     */\n+    protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt, \n+        SQLBuffer sql, boolean isLRS, JDBCStore store) throws SQLException {\n+        return stmnt.executeQuery();\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of getting count from the result set.\n+     */\n+    protected int getCount(ResultSet rs) throws SQLException {\n+        rs.next();\n+        return rs.getInt(1);\n+    }\n+    \n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of executing eager selects.\n+     */\n+    protected Result getEagerResult(Connection conn, \n+        PreparedStatement stmnt, ResultSet rs, JDBCStore store, \n+        JDBCFetchConfiguration fetch, boolean forUpdate, String sqlStr) \n+        throws SQLException {\n+        SelectResult res = new SelectResult(conn, stmnt, rs, _dict);\n+        res.setSelect(this);\n+        res.setStore(store);\n+        res.setLocking(forUpdate);\n+        try {\n+            addEagerResults(res, this, store, fetch);\n+        } catch (SQLException se) {\n+            res.close();\n+            throw se;\n+        }\n+        return res;\n+    }\n+\n     /////////////////////////\n     // Select implementation\n     /////////////////////////\n@@ -505,6 +561,10 @@ public Collection getTableAliases() {\n         return (_tables == null) ? Collections.EMPTY_SET : _tables.values();\n     }\n \n+    public List getSelects() {\n+        return Collections.unmodifiableList(_selects);\n+    }\n+\n     public List getSelectAliases() {\n         return _selects.getAliases(false, _outer != null);\n     }"},{"sha":"636a8f5c4cc3332ce98f4fedb7c2f81ab792d15a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -82,6 +82,7 @@ public SybaseDictionary() {\n \n         supportsLockingWithDistinctClause = false;\n         supportsNullTableForGetColumns = false;\n+        requiresAliasForSubselect = true;\n         requiresAutoCommitForMetaData = true;\n \n         maxTableNameLength = 30;"},{"sha":"d48c00946867f2c06759f752b84de53d73df3158","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -238,8 +238,8 @@ ConnectionURL-values: jdbc:JSQLConnect://<hostname>/database=<database>,\\\n \tjdbc:dbaw://<hostname>:8889/<database>\n \n connecting-for-dictionary: OpenJPA will now connect to the database to attempt \\\n-    to determine what type of database dictionary to use.  To prevent this \\\n-\tconnection in the future, set your openjpa.jdbc.DBDictionary \\\n+    to determine what type of database dictionary to use. You may prevent this \\\n+\tconnection in the future by setting your openjpa.jdbc.DBDictionary \\\n     configuration property to the appropriate value for your database (see \\\n     the documentation for available values).\n map-factory: Using mapping factory \"{0}\"."},{"sha":"b259060bdb5912decdba4bd689346e5c6d4193fd","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -110,3 +110,7 @@ no-nullable-fk: No nullable foreign key found to resolve circular flush\\n\\\n \tis nullable (optional).\n graph-not-cycle-free: A circular flush dependency has been found after all \\\n     circular dependencies should have been resolved.\n+batch_limit: The batch limit is set to {0}.\n+batch_update_info: ExecuteBatch command returns update count {0} for \\\n+\tstatement {1}.\n+    "},{"sha":"bcd8de3e06a8ac577fd13eaaa1e77d062f3f2e94","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -56,7 +56,7 @@ generic-num-cols: For \"{0}\", expected {1} column(s), but found {2}.\n generic-no-col-name: No column name was given for \"{0}\".\n generic-bad-col-name: \"{0}\" declares column \"{1}\", but this column does not \\\n \texist in table \"{2}\".\n-generic-incompat-col: \"{0}\" declares a column \"{1}\" whose jdbc-type is not \\\n+generic-incompat-col: \"{0}\" declares a column \"{1}\" whose JDBC type is not \\\n \tcompatible with the expected type \"{2}\".\n generic-bad-col: \"{0}\" declares a column that is not compatible with the \\\n \texpected type \"{1}\".  Column details:\\n{2}\n@@ -66,7 +66,7 @@ datastoreid-no-col-name: No datastore identity column name was given for \"{0}\".\n datastoreid-bad-col-name: Type \"{0}\" declares datastore identity column \"{1}\", \\\n \tbut this column does not exist in table \"{2}\".\n datastoreid-incompat-col: Type \"{0}\" declares a datastore identity column \\\n-\t\"{1}\" whose jdbc-type is not compatible with the expected type \"{2}\".\n+\t\"{1}\" whose JDBC type is not compatible with the expected type \"{2}\".\n datastoreid-bad-col: Type \"{0}\" declares a datastore identity column that is \\\n \tnot compatible with the expected type \"{1}\".  Column details:\\n{2}\n nondfg-field-orderable: Cannot order \"{0}\" on \"{1}\", because that field is not \\\n@@ -77,16 +77,16 @@ order-conflict: Field \"{0}\" declares both a synthetic ordering column and \\\n order-no-col-name: No order column name was given for \"{0}\".\n order-bad-col-name: \"{0}\" declares order column \"{1}\", but this column does \\\n \tnot exist in table \"{2}\".\n-order-incompat-col: \"{0}\" declares an order column \"{1}\" whose jdbc-type is \\\n+order-incompat-col: \"{0}\" declares an order column \"{1}\" whose JDBC type is \\\n \tnot compatible with the expected type \"{2}\".\n order-bad-col: \"{0}\" declares an order column column that is not compatible \\\n \twith the expected type \"{1}\".  Column details:\\n{2}\n-null-ind-no-col-name: No null-indicator column name was given for \"{0}\".\n-null-ind-bad-col-name: \"{0}\" declares null-indicator column \"{1}\", but this \\\n+null-ind-no-col-name: No null indicator column name was given for \"{0}\".\n+null-ind-bad-col-name: \"{0}\" declares null indicator column \"{1}\", but this \\\n \tcolumn does not exist in table \"{2}\".\n-null-ind-incompat-col: \"{0}\" declares a null-indicator column \"{1}\" whose \\\n-\tjdbc-type is not compatible with the expected type \"{2}\".\n-null-ind-bad-col: \"{0}\" declares a null-indicator column column that is not \\\n+null-ind-incompat-col: \"{0}\" declares a null indicator column \"{1}\" whose \\\n+\tJDBC type is not compatible with the expected type \"{2}\".\n+null-ind-bad-col: \"{0}\" declares a null indicator column column that is not \\\n \tcompatible with the expected type \"{1}\".  Column details:\\n{2}\n generic-no-index-cols: \"{0}\" declares an index, but has no columns.\n generic-index-exists: \"{0}\" marks its columns as explicitly not indexed, but \\\n@@ -262,7 +262,7 @@ col-wrong-table: When mapping \"{0}\" to table \"{1}\", found a column mapped to \\\n \tillegal table \"{2}\".\n target-wrong-cls: When mapping \"{0}\", found join with a target-field in class \\\n \t\"{1}\".  This class does not match the expected source or target mappings \\\n-\tfor the join (\"{2}\", \"{3}\").\n+\tfor the join of (\"{2}\", \"{3}\").\n no-equiv-mapped-by: \"{0}\" does not have a valid mapping.  It declares that it \\\n \tis mapped by \"{2}\", but \"{1}\", a subclass of its declared type, does not \\\n \tinherit that relation field.\n@@ -355,7 +355,7 @@ revtool-running: The reverse mapping tool will run on the database.  The tool \\\n \tis gathering schema information; this process may take some time.  Enable \\\n \tthe org.apache.openjpa.jdbc.Schema logging category to see messages about schema data.\n revtool-running-file: The reverse mapping tool will run on schema file \"{0}\".\n-revtool-map: Calculating reverse mappings.\n+revtool-map: ReverseMappingTool : generating classes.\n revtool-write-code: Writing generated class source code.\n revtool-write-appid: Writing generated application identity classes.\n revtool-write-metadata: Writing generated metadata."},{"sha":"b3146a4891c00f9b703bbd887b873a86da3d600d","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -168,4 +168,5 @@ isolation-level-config-not-supported: This DBDictionary does not support \\\n millis-query-timeout: JDBC locking does not support millisecond-granularity \\\n     timeouts.  Use timeouts that are multiples of 1000 for even second values.\n db-not-supported: The database product \"{0}\", version \"{1}\" is not officially supported.\n-    \n\\ No newline at end of file\n+stream-exception: Unexpected error recovering the row to stream the LOB.\n+batch_unlimit: The batch limit was changed from unlimit (-1) to {0}. \n\\ No newline at end of file"},{"sha":"2c82d0a2e5311045e0921fc4c5010561e360b8f1","filename":"openjpa-kernel-5/pom.xml","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-kernel-5/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-kernel-5/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/pom.xml?ref=56f6b437909815b1974c391d6496a1c4c5f87382","patch":"@@ -1,70 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n- \n- http://www.apache.org/licenses/LICENSE-2.0\n- \n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.   \n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <groupId>org.apache.openjpa</groupId>\n-    <artifactId>openjpa-kernel-5</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA Kernel 1.5</name>\n-    <description>OpenJPA Kernel 1.5</description>\n-    <url>http://openjpa.apache.org</url>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-parent</artifactId>\n-        <version>1.0.0-SNAPSHOT</version>\n-    </parent>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-kernel</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>compile</scope>\n-        </dependency>\n-    </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n-            <!-- create enhancer pre-main attribute -->\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <configuration>\n-                    <archive>\n-                        <manifestEntries>\n-                            <Premain-Class>\n-                                org.apache.openjpa.enhance.InstrumentationFactory\n-                            </Premain-Class>\n-                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n-                        </manifestEntries>\n-                    </archive>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-</project>"},{"sha":"5255fff246981cd99325ee0b3569b5c2571a4e91","filename":"openjpa-kernel/pom.xml","status":"modified","additions":4,"deletions":32,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -30,28 +30,8 @@\n     <parent>\r\n         <groupId>org.apache.openjpa</groupId>\r\n         <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.0.0-SNAPSHOT</version>\r\n+        <version>1.1.0</version>\r\n     </parent>\r\n-    <profiles>\r\n-        <profile>\r\n-            <id>java14-validate</id>\r\n-            <activation><property><name>java14.jar</name></property></activation>\r\n-            <build>\r\n-                <pluginManagement>\r\n-                    <plugins>\r\n-                        <plugin>\r\n-                            <artifactId>maven-compiler-plugin</artifactId>\r\n-                            <configuration>\r\n-                                <compilerArguments>\r\n-                                    <bootclasspath>${java14.jar}</bootclasspath>\r\n-                                </compilerArguments>\r\n-                            </configuration>\r\n-                        </plugin>\r\n-                    </plugins>\r\n-                </pluginManagement>\r\n-            </build>\r\n-        </profile>\r\n-    </profiles>\r\n     <dependencies>\r\n         <dependency>\r\n             <groupId>org.apache.openjpa</groupId>\r\n@@ -62,25 +42,16 @@\n         <dependency>\r\n             <groupId>org.apache.geronimo.specs</groupId>\r\n             <artifactId>geronimo-jms_1.1_spec</artifactId>\r\n-            <version>1.0.1</version>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-j2ee-connector_1.5_spec</artifactId>\r\n-            <version>1.0.1</version>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n         <dependency>\r\n             <groupId>org.apache.geronimo.specs</groupId>\r\n             <artifactId>geronimo-jta_1.1_spec</artifactId>\r\n-            <version>1.1</version>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n         <dependency>\r\n             <groupId>commons-pool</groupId>\r\n             <artifactId>commons-pool</artifactId>\r\n-            <version>1.3</version>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n     </dependencies>\r\n@@ -89,13 +60,14 @@\n             <plugin>\r\n                 <artifactId>maven-compiler-plugin</artifactId>\r\n                 <configuration>\r\n-                    <source>1.4</source>\r\n-                    <target>1.4</target>\r\n+                    <source>1.5</source>\r\n+                    <target>1.5</target>\r\n                 </configuration>\r\n             </plugin>\r\n             <plugin>\r\n                 <groupId>org.codehaus.mojo</groupId>\r\n                 <artifactId>javacc-maven-plugin</artifactId>\r\n+                <version>2.1</version>\r\n                 <executions>\r\n                     <execution>\r\n                         <id>jjtree-jpql</id>\r"},{"sha":"7851de74d54f24496e54917077a160d25aab09b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -40,9 +40,9 @@\n  * {@link Bootstrap#getBrokerFactory()} bootstrapping mechanism, to facilitate\n  * the process of creating a subclass of {@link AbstractStoreManager}. New\n  * store manager implementations need not extend this class. Instead, set the\n- * <code>org.apache.openjpa.BrokerFactory</code> configuration property to\n+ * <code>openjpa.BrokerFactory</code> configuration property to\n  * <code>abstractstore</code>,\n- * and set the <code>org.apache.openjpa.abstractstore.AbstractStoreManager</code>\n+ * and set the <code>openjpa.abstractstore.AbstractStoreManager</code>\n  * configuration property to the full class name of your implementation.\n  *  Additionally, you can optionally create your own\n  * <code>BrokerFactory</code> implementation. However, we recommend that you\n@@ -71,15 +71,16 @@\n      * Factory method for obtaining a possibly-pooled {@link BrokerFactory}\n      * from properties. Invoked from {@link Bootstrap#getBrokerFactory()}.\n      */\n-    public static AbstractStoreBrokerFactory getInstance\n-        (ConfigurationProvider cp) {\n+    public static AbstractStoreBrokerFactory getInstance(\n+        ConfigurationProvider cp) {\n+        Object key = toPoolKey(cp.getProperties());\n         AbstractStoreBrokerFactory factory = (AbstractStoreBrokerFactory)\n-            getPooledFactory(cp.getProperties());\n+            getPooledFactoryForKey(key);\n         if (factory != null)\n             return factory;\n \n         factory = newInstance(cp);\n-        factory.pool();\n+        factory.pool(key, factory);\n         return factory;\n     }\n "},{"sha":"ee0db6ca06c1bc12aba1d8d5f5e108fde3bae2ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -52,16 +52,32 @@ public BrokerValue() {\n \n     public Object newInstance(String clsName, Class type, Configuration conf,\n         boolean fatal) {\n+        getTemplateBroker(clsName, type, conf, fatal);\n+\n+        try {\n+            return _templateBroker.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new InternalException(e);\n+        }\n+    }\n+\n+    public Class<? extends BrokerImpl> getTemplateBrokerType(Configuration c) {\n+        return getTemplateBroker(getClassName(), BrokerImpl.class, c, true)\n+            .getClass();\n+    }\n+\n+    private BrokerImpl getTemplateBroker(String clsName, Class type,\n+        Configuration conf, boolean fatal) {\n+        if (clsName == null || !clsName.equals(getClassName()))\n+            throw new IllegalArgumentException(\"clsName != configured value '\"\n+                + getClassName() + \"'\");\n+\n         // This is not synchronized. If there are concurrent invocations\n         // while _templateBroker is null, we'll just end up with extra\n         // template brokers, which will get safely garbage collected.\n         if (_templateBroker == null)\n             _templateBroker = (BrokerImpl) super.newInstance(clsName, type,\n                 conf, fatal);\n-        try {\n-            return _templateBroker.clone();\n-        } catch (CloneNotSupportedException e) {\n-            throw new InternalException(e);\n-        }\n+        return _templateBroker;\n     }\n }"},{"sha":"7d6c43d2a8ea953f6f8c7ab72889bc8ebf7cf055","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshaller.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+\r\n+/**\r\n+ * Responsible for marshalling and unmarshalling objects between memory and\r\n+ * durable cache.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface CacheMarshaller {\r\n+\r\n+    /**\r\n+     * Load and return an instance of the type handled by this marshaller.\r\n+     * If the type implements {@link Configurable}, then this method will invoke\r\n+     * {@link Configurable#setConfiguration}, \r\n+     * {@link Configurable#startConfiguration()}, and\r\n+     * {@link Configurable#endConfiguration()} on the instance before returning.\r\n+     */\r\n+    public Object load();\r\n+\r\n+    /**\r\n+     * Store <code>o</code> into the cache.\r\n+     */\r\n+    public void store(Object o);\r\n+\r\n+    /**\r\n+     * The id that this marshaller is responsible for.\r\n+     * A value for this parameter is required.\r\n+     */\r\n+    public void setId(String id);\r\n+\r\n+    /**\r\n+     * The id that this marshaller is responsible for.\r\n+     */\r\n+    public String getId();\r\n+\r\n+    /**\r\n+     * The {@link ValidationPolicy} that this marshaller should use.\r\n+     * A value for this parameter is required. The class will be instantiated\r\n+     * via the {@link org.apache.openjpa.lib.conf.Configurations} mechanism, ensuring that if the class\r\n+     * implements {@link Configurable} or {@link org.apache.openjpa.lib.conf.GenericConfigurable}, it will\r\n+     * be taken through the appropriate lifecycle.\r\n+     */\r\n+    public void setValidationPolicy(String policy)\r\n+        throws InstantiationException, IllegalAccessException;\r\n+\r\n+    /**\r\n+     * Validation policies are responsible for computing whether or not a\r\n+     * cached data structure is valid for the current context.\r\n+     * <p/>\r\n+     * <code>getValidCachedData(getCacheableData(o), conf)</code> should\r\n+     * return an object equivalent to <code>o</code> in the expected case.\r\n+     * <p/>\r\n+     * Implementations of this class will often also implement\r\n+     * {@link Configurable} in order to receive the current\r\n+     * {@link Configuration}.\r\n+     */\r\n+    public interface ValidationPolicy {\r\n+        /**\r\n+         * Returns an object that this policy considers to be valid, based\r\n+         * on <code>o</code>. If <code>o</code> is not valid, this method\r\n+         * will return <code>null</code>.\r\n+         */\r\n+        public Object getValidData(Object o);\r\n+\r\n+        /**\r\n+         * Return an object that the {@link CacheMarshaller} should store.\r\n+         */\r\n+        public Object getCacheableData(Object o);\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"c552ccd6d0a21b694f65acfb82ebeb9e0b39ad62","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","status":"added","additions":253,"deletions":0,"changes":253,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,253 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.io.BufferedInputStream;\r\n+import java.io.BufferedOutputStream;\r\n+import java.io.File;\r\n+import java.io.FileOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.OutputStream;\r\n+import java.net.URL;\r\n+import java.util.Enumeration;\r\n+import java.util.List;\r\n+import java.util.ArrayList;\r\n+\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InternalException;\r\n+\r\n+/**\r\n+ * Default {@link CacheMarshaller} implementation that writes data\r\n+ * to a specified file and reads data from a specified file or URL.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class CacheMarshallerImpl\r\n+    implements CacheMarshaller, Configurable {\r\n+\r\n+    private static final Localizer _loc =\r\n+        Localizer.forPackage(CacheMarshallerImpl.class);\r\n+\r\n+    private String _id;\r\n+    private ValidationPolicy _validationPolicy;\r\n+    private OpenJPAConfiguration _conf;\r\n+    private Log _log;\r\n+    private File _outputFile;\r\n+    private URL _inputURL;\r\n+\r\n+    // temporary storage for resource location specification\r\n+    private String _inputResourceLocation;\r\n+    \r\n+    private boolean _consumeErrors = true;\r\n+\r\n+    public Object load() {\r\n+        if (_inputURL == null) {\r\n+            _log.trace(_loc.get(\"cache-marshaller-no-inputs\", getId()));\r\n+            return null;\r\n+        }\r\n+\r\n+        Object o = null;\r\n+        ObjectInputStream in = null;\r\n+        try {\r\n+            in = new ObjectInputStream(new BufferedInputStream(\r\n+                _inputURL.openStream()));\r\n+\r\n+            o = in.readObject();\r\n+            o = _validationPolicy.getValidData(o);\r\n+\r\n+            if (o != null && o.getClass().isArray()) {\r\n+                Object[] array = (Object[]) o;\r\n+                for (int i = 0; i < array.length; i++)\r\n+                    configure(array[i]);\r\n+            } else {\r\n+                configure(o);\r\n+            }\r\n+\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(_loc.get(\"cache-marshaller-loaded\",\r\n+                    o == null ? null : o.getClass().getName(), _inputURL));\r\n+        } catch (Exception e) {\r\n+            if (_consumeErrors) {\r\n+                if (_log.isWarnEnabled())\r\n+                    _log.warn(_loc.get(\"cache-marshaller-load-exception-ignore\",\r\n+                        _inputURL), e);\r\n+            } else {\r\n+                throw new InternalException(\r\n+                    _loc.get(\"cache-marshaller-load-exception-fatal\",\r\n+                        _inputURL),\r\n+                    e);\r\n+            }\r\n+        } finally {\r\n+            if (in != null)\r\n+                try { in.close(); } catch (IOException e) { }\r\n+        }\r\n+\r\n+        return o;\r\n+    }\r\n+\r\n+    private void configure(Object o) {\r\n+        if (o instanceof Configurable) {\r\n+            ((Configurable) o).setConfiguration(_conf);\r\n+            ((Configurable) o).startConfiguration();\r\n+            ((Configurable) o).endConfiguration();\r\n+        }\r\n+    }\r\n+\r\n+    public void store(Object o) {\r\n+        if (_outputFile == null) {\r\n+            _log.trace(_loc.get(\"cache-marshaller-no-output-file\", getId()));\r\n+            return;\r\n+        }\r\n+        OutputStream out = null;\r\n+        try {\r\n+            out = new FileOutputStream(_outputFile);\r\n+            ObjectOutputStream oos =\r\n+                new ObjectOutputStream(new BufferedOutputStream(out));\r\n+            Object toStore = _validationPolicy.getCacheableData(o);\r\n+            oos.writeObject(toStore);\r\n+            oos.flush();\r\n+            out.flush();\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(_loc.get(\"cache-marshaller-stored\",\r\n+                    o.getClass().getName(), _outputFile));\r\n+        } catch (Exception e) {\r\n+            if (_consumeErrors) {\r\n+                if (_log.isWarnEnabled())\r\n+                    _log.warn(_loc.get(\"cache-marshaller-store-exception\",\r\n+                        o.getClass().getName(), _outputFile), e);\r\n+            } else {\r\n+                throw new InternalException(\r\n+                    _loc.get(\"cache-marshaller-store-exception\",\r\n+                        o.getClass().getName(), _outputFile),\r\n+                    e);\r\n+            }\r\n+        } finally {\r\n+            if (out != null) {\r\n+                try { out.close(); } catch (IOException ioe) { }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void setOutputFile(File file) {\r\n+        _outputFile = file;\r\n+    }\r\n+\r\n+    public File getOutputFile() {\r\n+        return _outputFile;\r\n+    }\r\n+\r\n+    public void setInputURL(URL url) {\r\n+        _inputURL = url;\r\n+    }\r\n+\r\n+    public void setInputResource(String resource) {\r\n+        _inputResourceLocation = resource;\r\n+    }\r\n+\r\n+    public void setConsumeSerializationErrors(boolean consume) {\r\n+        _consumeErrors = consume;\r\n+    }\r\n+\r\n+    public String getId() {\r\n+        return _id;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        _id = id;\r\n+    }\r\n+\r\n+    public void setValidationPolicy(String policy)\r\n+        throws InstantiationException, IllegalAccessException {\r\n+        String name = Configurations.getClassName(policy);\r\n+        String props = Configurations.getProperties(policy);\r\n+        _validationPolicy = (ValidationPolicy)\r\n+            Configurations.newInstance(name, _conf, props, null);\r\n+    }\r\n+\r\n+    public ValidationPolicy getValidationPolicy() {\r\n+        return _validationPolicy;\r\n+    }\r\n+\r\n+    public void setConfiguration(Configuration conf) {\r\n+        _conf = (OpenJPAConfiguration) conf;\r\n+        _log = conf.getConfigurationLog();\r\n+    }\r\n+\r\n+    public void startConfiguration() {\r\n+    }\r\n+\r\n+    public void endConfiguration() {\r\n+        if (_inputResourceLocation != null && _inputURL != null)\r\n+            throw new IllegalStateException(\r\n+                _loc.get(\"cache-marshaller-input-url-and-resource-specified\")\r\n+                    .getMessage());\r\n+        if (_inputResourceLocation != null)\r\n+            setInputUrlFromResourceLocation();\r\n+\r\n+        if (_validationPolicy == null)\r\n+            throw new IllegalStateException(\r\n+                _loc.get(\"cache-marshaller-null-validation-policy\",\r\n+                    getClass().getName()).getMessage());\r\n+        if (_id == null)\r\n+            throw new IllegalStateException(\r\n+                _loc.get(\"cache-marshaller-null-id\",\r\n+                    getClass().getName()).getMessage());\r\n+    }\r\n+\r\n+    private void setInputUrlFromResourceLocation() {\r\n+        try {\r\n+            ClassLoader cl = _conf.getClassResolverInstance()\r\n+                .getClassLoader(getClass(), null);\r\n+            List list = new ArrayList();\r\n+            for (Enumeration e = cl.getResources(_inputResourceLocation);\r\n+                e.hasMoreElements(); )\r\n+                list.add(e);\r\n+\r\n+            if (list.size() > 1) {\r\n+                if (_consumeErrors) {\r\n+                    if (_log.isWarnEnabled())\r\n+                        _log.warn(_loc.get(\r\n+                            \"cache-marshaller-multiple-resources-warn\",\r\n+                            getId(), _inputResourceLocation, list)\r\n+                            .getMessage());\r\n+                } else {\r\n+                    throw new IllegalStateException(\r\n+                        _loc.get(\"cache-marshaller-multiple-resources\",\r\n+                            getId(), _inputResourceLocation, list)\r\n+                            .getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            if (!list.isEmpty())\r\n+                _inputURL = (URL) list.get(0);\r\n+        } catch (IOException ioe) {\r\n+            IllegalStateException ise = new IllegalStateException(\r\n+                _loc.get(\"cache-marshaller-bad-url\", getId(),\r\n+                    _inputResourceLocation).getMessage());\r\n+            ise.initCause(ioe);\r\n+            throw ise;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"c1276f97d1687ea1f79c1ae5d342e309186e23d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallersValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.conf.PluginListValue;\r\n+import org.apache.openjpa.conf.NoOpCacheMarshaller;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+\r\n+/**\r\n+ * A configuration value for handling and accessing cache marshallers.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class CacheMarshallersValue\r\n+    extends PluginListValue {\r\n+\r\n+    private static final String KEY = \"CacheMarshallers\";\r\n+    private static final CacheMarshaller NO_OP_CACHE_MARSHALLER\r\n+        = new NoOpCacheMarshaller();\r\n+    private static final Localizer _loc =\r\n+        Localizer.forPackage(CacheMarshallersValue.class);\r\n+\r\n+    private Configuration _conf;\r\n+    private Map _marshallers;\r\n+    private boolean _initialized;\r\n+\r\n+    public CacheMarshallersValue(Configuration conf) {\r\n+        super(KEY);\r\n+        _conf = conf;\r\n+        setAlias(\"default\", CacheMarshallerImpl.class.getName());\r\n+        setAlias(\"none\", null);\r\n+        setDefault(\"none\");\r\n+        setString(\"none\");\r\n+        setScope(getClass());\r\n+    }\r\n+\r\n+    public Object instantiate(Class elemType, Configuration conf,\r\n+        boolean fatal) {\r\n+        CacheMarshaller[] ms = (CacheMarshaller[])\r\n+            super.instantiate(elemType, conf, fatal);\r\n+        if (ms != null) {\r\n+            _marshallers = new HashMap();\r\n+            for (int i = 0; i < ms.length; i++) {\r\n+                String mid = ms[i].getId();\r\n+                if (mid != null)\r\n+                    _marshallers.put(mid, ms[i]);\r\n+            }\r\n+        } else {\r\n+            _marshallers = null;\r\n+        }\r\n+        return ms;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the {@link CacheMarshaller} to use for caching metadata of id\r\n+     * <code>id</code>. If no marshaller exists for the id, returns\r\n+     * {@link NoOpCacheMarshaller}.\r\n+     */\r\n+    public CacheMarshaller getMarshallerById(String id) {\r\n+        initialize();\r\n+\r\n+        CacheMarshaller cm = (CacheMarshaller) _marshallers.get(id);\r\n+        if (cm == null) {\r\n+            if (getLog().isTraceEnabled())\r\n+                getLog().trace(_loc.get(\"cache-marshaller-not-found\", id));\r\n+            return NO_OP_CACHE_MARSHALLER;\r\n+        } else {\r\n+            if (getLog().isTraceEnabled())\r\n+                getLog().trace(_loc.get(\"cache-marshaller-found\", id,\r\n+                    cm.getClass().getName()));\r\n+            return cm;\r\n+        }\r\n+    }\r\n+\r\n+    private Log getLog() {\r\n+        return _conf.getConfigurationLog();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the {@link CacheMarshaller} to use for caching metadata of id\r\n+     * <code>id</code>. If no marshaller exists for the id, returns\r\n+     * {@link NoOpCacheMarshaller}.\r\n+     */\r\n+    public static CacheMarshaller getMarshallerById(Configuration c, String id){\r\n+        CacheMarshallersValue v =\r\n+            ((OpenJPAConfigurationImpl) c).cacheMarshallerPlugins;\r\n+        return v.getMarshallerById(id);\r\n+    }\r\n+\r\n+    public Map getInstancesAsMap() {\r\n+        return _marshallers;\r\n+    }\r\n+\r\n+    protected synchronized void initialize() {\r\n+        if (!_initialized) {\r\n+            instantiate(CacheMarshaller.class, _conf);\r\n+            _initialized = true;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"c054895ecb40c7a907af6da793301a412dde9dc3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":112,"deletions":2,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -23,13 +23,39 @@\n  */\n public class Compatibility {\n \n+    /**\n+     * If a JPQL statement is not compliant with the JPA specification,\n+     * fail to parse it.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static final int JPQL_STRICT = 0;\n+\n+    /**\n+     * If a JPQL statement is not compliant with the JPA specification,\n+     * warn the first time that statement is parsed.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static final int JPQL_WARN = 1;\n+\n+    /**\n+     * Allow non-compliant extensions of JPQL.\n+     * \n+     * @since 1.1.0\n+     */\n+    public static final int JPQL_EXTENDED = 2;\n+\n     private boolean _strictIdValues = false;\n     private boolean _hollowLookups = true;\n     private boolean _checkStore = false;\n     private boolean _copyIds = false;\n     private boolean _closeOnCommit = true;\n     private boolean _quotedNumbers = false;\n     private boolean _nonOptimisticVersionCheck = false;\n+    private int _jpql = JPQL_WARN;\n+    private boolean _storeMapCollectionInEntityAsBlob = false;\n+    private boolean _flushBeforeDetach = true; \n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -146,8 +172,7 @@ public void setCloseOnManagedCommit(boolean close) {\n      * in a datastore transaction. Version of OpenJPA prior to 0.4.1 always\n      * forced a version check.\n      */\n-    public void setNonOptimisticVersionCheck\n-        (boolean nonOptimisticVersionCheck) {\n+    public void setNonOptimisticVersionCheck(boolean nonOptimisticVersionCheck){\n         _nonOptimisticVersionCheck = nonOptimisticVersionCheck;\n     }\n \n@@ -159,4 +184,89 @@ public void setCloseOnManagedCommit(boolean close) {\n     public boolean getNonOptimisticVersionCheck() {\n         return _nonOptimisticVersionCheck;\n     }\n+\n+    /**\n+     * Whether or not JPQL extensions are allowed. Defaults to\n+     * {@link #JPQL_STRICT}.\n+     *\n+     * @since 1.1.0\n+     * @see #JPQL_WARN\n+     * @see #JPQL_STRICT\n+     * @see #JPQL_EXTENDED\n+     */\n+    public int getJPQL() {\n+        return _jpql;\n+    }\n+\n+    /**\n+     * Whether or not JPQL extensions are allowed. Possible values: \"warn\",\n+     * \"strict\", \"extended\".\n+     *\n+     * @since 1.1.0\n+     * @see #JPQL_WARN\n+     * @see #JPQL_STRICT\n+     * @see #JPQL_EXTENDED\n+     */\n+    public void setJPQL(String jpql) {\n+        if (\"warn\".equals(jpql))\n+            _jpql = JPQL_WARN;\n+        else if (\"strict\".equals(jpql))\n+            _jpql = JPQL_STRICT;\n+        else if (\"extended\".equals(jpql))\n+            _jpql = JPQL_EXTENDED;\n+        else\n+            throw new IllegalArgumentException(jpql);\n+    }\n+\n+    /**\n+     * Whether if map and collection in entity are stored as blob.\n+     * Defaults to <code>false</code>.\n+     *\n+     * @since 1.1.0 \n+     */\n+\n+    public boolean getStoreMapCollectionInEntityAsBlob() {\n+        return _storeMapCollectionInEntityAsBlob;\n+    }\n+\n+    /**\n+     * Whether if map and collection in entity are stored as blob.\n+     * Defaults to <code>false</code>.\n+     *\n+     * @since 1.1.0 \n+     */\n+    public void setStoreMapCollectionInEntityAsBlob(boolean storeAsBlob) {\n+        _storeMapCollectionInEntityAsBlob = storeAsBlob;\n+    }\n+    \n+    /**\n+     * Whether OpenJPA should flush changes before detaching or serializing an\n+     * entity. In JPA this is usually false, but other persistence frameworks\n+     * (ie JDO) may expect it to be true.\n+     * <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.\n+     * \n+     * @since 1.0.3\n+     * @since 1.2.0\n+     * @return true if changes should be flushed, otherwise false.\n+     */\n+    public boolean getFlushBeforeDetach() {\n+        return _flushBeforeDetach;\n+    }\n+\n+    /**\n+     * Whether OpenJPA should flush changes before detaching or serializing an\n+     * entity. In JPA this is usually false, but other persistence frameworks\n+     * (ie JDO) may expect it to be true.\n+     * <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.\n+     * \n+     * @param beforeDetach if true changes will be flushed before detaching or \n+     * serializing an entity.\n+     * \n+     * @since 1.0.3\n+     * @since 1.2.0\n+     */\n+    public void setFlushBeforeDetach(boolean beforeDetach) {\n+        _flushBeforeDetach = beforeDetach;\n+    }\n+\n }"},{"sha":"6762bd9614112d55a14eecc0dfca8bd8126dd486","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","status":"added","additions":202,"deletions":0,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,202 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.kernel.Bootstrap;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.lib.util.Options;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.meta.QueryMetaData;\r\n+import org.apache.openjpa.meta.SequenceMetaData;\r\n+\r\n+/**\r\n+ * Performs maintenance tasks on the metadata caches accessible via the\r\n+ * {@link CacheMarshaller} architecture.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class MetaDataCacheMaintenance {\r\n+\r\n+    private final BrokerFactory factory;\r\n+    private final OpenJPAConfiguration conf;\r\n+    private final boolean devpath;\r\n+    private Log log;\r\n+\r\n+    public static void main(String[] args) {\r\n+        Options opts = new Options();\r\n+        args = opts.setFromCmdLine(args);\r\n+        boolean devpath = opts.getBooleanProperty(\"scanDevPath\", \"ScanDevPath\",\r\n+            true);\r\n+\r\n+        ConfigurationProvider cp = new MapConfigurationProvider(opts);\r\n+        BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\r\n+        try {\r\n+            MetaDataCacheMaintenance maint = new MetaDataCacheMaintenance(\r\n+                factory, devpath);\r\n+\r\n+            if (args.length != 1) {\r\n+                usage();\r\n+                return;\r\n+            }\r\n+\r\n+            if (\"store\".equals(args[0]))\r\n+                maint.store();\r\n+            else if (\"dump\".equals(args[0]))\r\n+                maint.dump();\r\n+            else\r\n+                usage();\r\n+        } finally {\r\n+            factory.close();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @deprecated logging is routed to the logging system now.\r\n+     */\r\n+    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath,\r\n+        boolean verbose) {\r\n+        this(factory, devpath);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param factory The {@link BrokerFactory} for which cached metadata\r\n+     * should be built.\r\n+     * @param devpath Whether or not to scan the development environment paths\r\n+     * to find persistent types to store.\r\n+     */\r\n+    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath) {\r\n+        this.factory = factory;\r\n+        this.conf = factory.getConfiguration();\r\n+        this.devpath = devpath;\r\n+        this.log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\r\n+    }\r\n+\r\n+    public void setLog(Log log) {\r\n+        this.log = log;\r\n+    }\r\n+\r\n+    private static int usage() {\r\n+        System.err.println(\"Usage: java MetaDataCacheMaintenance \" +\r\n+            \"[-scanDevPath t|f] [-<openjpa.PropertyName> value] store | dump\");\r\n+        return -1;\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata repository for the factory that this instance was\r\n+     * constructed with will be serialized, along with any query\r\n+     * compilations etc. that have been created for the factory.\r\n+     */\r\n+    public void store() {\r\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\r\n+        repos.setSourceMode(MetaDataRepository.MODE_ALL);\r\n+        Collection types = repos.loadPersistentTypes(devpath, null);\r\n+        for (Iterator iter = types.iterator(); iter.hasNext(); )\r\n+            repos.getMetaData((Class) iter.next(), null, true);\r\n+\r\n+        loadQueries();\r\n+\r\n+        log.info(\"The following data will be stored: \");\r\n+        log(repos, conf.getQueryCompilationCacheInstance());\r\n+\r\n+        CacheMarshallersValue.getMarshallerById(conf, getClass().getName())\r\n+            .store(new Object[] {\r\n+                repos, conf.getQueryCompilationCacheInstance()\r\n+            });\r\n+    }\r\n+\r\n+    private void loadQueries() {\r\n+        Broker broker = factory.newBroker();\r\n+        try {\r\n+            QueryMetaData[] qmds =\r\n+                conf.getMetaDataRepositoryInstance().getQueryMetaDatas();\r\n+            for (int i = 0; i < qmds.length; i++)\r\n+                loadQuery(broker, qmds[i]);\r\n+        } finally {\r\n+            broker.close();\r\n+        }\r\n+    }\r\n+\r\n+    private void loadQuery(Broker broker, QueryMetaData qmd) {\r\n+        try {\r\n+            Query q = broker.newQuery(qmd.getLanguage(), null);\r\n+            qmd.setInto(q);\r\n+            q.compile();\r\n+        } catch (Exception e) {\r\n+            if (log.isTraceEnabled()) {\r\n+                log.warn(\"Skipping named query \" + qmd.getName() + \": \"\r\n+                    + e.getMessage(), e);\r\n+            } else {\r\n+                log.warn(\"Skipping named query \" + qmd.getName() + \": \"\r\n+                    + e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void dump() {\r\n+        Object[] os = (Object[])\r\n+            CacheMarshallersValue.getMarshallerById(conf, getClass().getName())\r\n+            .load();\r\n+        if (os == null) {\r\n+            log.info(\"No cached data was found\");\r\n+            return;\r\n+        }\r\n+        MetaDataRepository repos = (MetaDataRepository) os[0];\r\n+        Map qcc = (Map) os[1];\r\n+\r\n+        log.info(\"The following data was found: \");\r\n+        log(repos, qcc);\r\n+    }\r\n+\r\n+    private void log(MetaDataRepository repos, Map qcc) {\r\n+        ClassMetaData[] metas = repos.getMetaDatas();\r\n+        log.info(\"  Types: \" + metas.length);\r\n+        if (log.isTraceEnabled())\r\n+            for (int i = 0; i < metas.length; i++)\r\n+                log.trace(\"    \" + metas[i].getDescribedType().getName());\r\n+\r\n+        QueryMetaData[] qmds = repos.getQueryMetaDatas();\r\n+        log.info(\"  Queries: \" + qmds.length);\r\n+        if (log.isTraceEnabled())\r\n+            for (int i = 0; i < qmds.length; i++)\r\n+                log.trace(\"    \" + qmds[i].getName() + \": \"\r\n+                    + qmds[i].getQueryString());\r\n+\r\n+        SequenceMetaData[] smds = repos.getSequenceMetaDatas();\r\n+        log.info(\"  Sequences: \" + smds.length);\r\n+        if (log.isTraceEnabled())\r\n+            for (int i = 0; i < smds.length; i++)\r\n+                log.trace(\"    \" + smds[i].getName());\r\n+\r\n+        log.info(\"  Compiled queries: \"\r\n+            + (qcc == null ? \"0\" : \"\" + qcc.size()));\r\n+        if (log.isTraceEnabled() && qcc != null)\r\n+            for (Iterator iter = qcc.keySet().iterator(); iter.hasNext(); )\r\n+                log.trace(\"    \" + iter.next());\r\n+    }\r\n+}\r"},{"sha":"10f6a2198df8e48f2a5e3808c3afcf10ed86190a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,74 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.conf.PluginValue;\r\n+import org.apache.openjpa.conf.CacheMarshallersValue;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+\r\n+/**\r\n+ * A {@link PluginValue} that interacts with the {@link CacheMarshaller}\r\n+ * to cache the metadata repository between executions.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class MetaDataRepositoryValue\r\n+    extends PluginValue {\r\n+\r\n+    private static final String KEY = \"MetaDataRepository\";\r\n+\r\n+    public MetaDataRepositoryValue() {\r\n+        super(KEY, false);\r\n+        String[] aliases = new String[] {\r\n+            \"default\",\r\n+            MetaDataRepository.class.getName()\r\n+        };\r\n+        setAliases(aliases);\r\n+        setDefault(aliases[0]);\r\n+        setString(aliases[0]);\r\n+    }\r\n+\r\n+    public Object instantiate(Class type, Configuration c, boolean fatal) {\r\n+        MetaDataRepository repos = null;\r\n+        OpenJPAConfiguration conf = (OpenJPAConfiguration) c;\r\n+\r\n+        Object[] os = (Object[]) CacheMarshallersValue.getMarshallerById(\r\n+            conf, MetaDataCacheMaintenance.class.getName())\r\n+            .load();\r\n+        if (os != null) {\r\n+            repos = (MetaDataRepository) os[0];\r\n+            if (os[1] != null)\r\n+                // It's a bit odd that we do this in MetaDataRepositoryValue.\r\n+                // We need to serialize all the various bits of configuration\r\n+                // together; maybe we can move the caching logic somewhere\r\n+                // else?\r\n+                conf.getQueryCompilationCacheInstance().putAll((Map) os[1]);\r\n+        }\r\n+\r\n+        if (repos == null)\r\n+            return super.instantiate(type, c, fatal);\r\n+        else\r\n+            return repos;\r\n+    }\r\n+\r\n+\r\n+}\r"},{"sha":"af9e39019ec4629b8b97125bd1f68fb6a37177e8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/NoOpCacheMarshaller.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+/**\r\n+ * Implementation of {@link CacheMarshaller} that does nothing.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class NoOpCacheMarshaller\r\n+    implements CacheMarshaller {\r\n+\r\n+    private String id;\r\n+\r\n+    public Object load() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setValidationPolicy(String policy) {\r\n+    }\r\n+\r\n+    public void store(Object o) {\r\n+    }\r\n+}\r"},{"sha":"7c3d744b0cdfd54a61e42a6aa22cb00b30ac6062","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":71,"deletions":8,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -611,6 +611,14 @@\n      * @since 0.3.0\n      */\n     public MetaDataRepository getMetaDataRepositoryInstance();\n+    \n+    /**\n+     * Returns true if a metaDataRepository has been created for this \n+     * configuration.\n+     * \n+     * @since 1.1.0 1.0.1\n+     */\n+    public boolean metaDataRepositoryAvailable();\n \n     /**\n      * Create a new empty metadata repository of the configured type.\n@@ -1389,31 +1397,86 @@\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry();\n \n     /**\n-     * Return the {@link org.apache.openjpa.event.BrokerFactoryEventManager} associated with this\n-     * configuration.\n+     * Return the {@link org.apache.openjpa.event.BrokerFactoryEventManager}\n+     * associated with this configuration.\n      *\n      * @since 1.0.0\n      */\n     public BrokerFactoryEventManager getBrokerFactoryEventManager();\n \n     /**\n-     * Whether or not runtime class optimization is enabled.\n+     * Specifies how OpenJPA handles unenhanced types. Possible values are:\n+     * <ul>\n+     * <li><code>supported</code>: Runtime optimization of persistent types\n+     * is available. This is the default</li>\n+     * <li><code>unsupported</code>: Runtime optimization of persistent types\n+     * is not available. An exception will be thrown if the system loads with\n+     * persistent types that are not enhanced.</li>\n+     * <li><code>warn</code>: Runtime optimization of persistent types is\n+     * not available, but no exception will be thrown initially. A warning will\n+     * be logged instead. It is likely that the system will fail at a later\n+     * point. This might be suitable for environments with complex classloader\n+     * configurations.</li>\n+     * </ul>\n      *\n      * @since 1.0.0\n      */\n-    public boolean getRuntimeClassOptimization();\n+    public String getRuntimeUnenhancedClasses();\n \n     /**\n-     * Whether or not runtime class optimization is enabled.\n+     * Specifies how OpenJPA handles unenhanced types.\n      *\n+     * @see {@link #getRuntimeUnenhancedClasses()}\n      * @since 1.0.0\n      */\n-    public void setRuntimeClassOptimization(Boolean enabled);\n+    public void setRuntimeUnenhancedClasses(String mode);\n \n     /**\n-     * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n+     * Return the runtime class optimization setting as one of the\n+     * following symbolic constants:\n+     * <ul>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#SUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#UNSUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#WARN}</li>\n+     * </ul>\n      *\n      * @since 1.0.0\n      */\n-    public void setRuntimeClassOptimization(boolean enabled);\n+    public int getRuntimeUnenhancedClassesConstant();\n+\n+    /**\n+     * Set the runtime class optimization setting as one of the\n+     * following symbolic constants:\n+     * <ul>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#SUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#UNSUPPORTED}</li>\n+     * <li>{@link RuntimeUnenhancedClasssesModes#WARN}</li>\n+     * </ul>\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setRuntimeUnenhancedClasses(int mode);\n+\n+    /**\n+     * A comma-separted list of the plugin strings specifying the\n+     * {@link CacheMarshaller}s to use.\n+     *\n+     * @since 1.1.0\n+     */\n+    public String getCacheMarshallers();\n+\n+    /**\n+     * A comma-separted list of the plugin strings specifying the\n+     * {@link CacheMarshaller}s to use.\n+     *\n+     * @since 1.1.0\n+     */\n+    public void setCacheMarshallers(String marshallers);\n+\n+    /**\n+     * Return the cache marshaller listeners.\n+     *\n+     * @since 1.1.0 \n+     */\n+    public Map getCacheMarshallerInstances();\n }"},{"sha":"fdba8e4eb7148ad8c55c8ec383ca67fb0767532b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":63,"deletions":101,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -53,6 +53,7 @@\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n+import org.apache.openjpa.enhance.RuntimeUnenhancedClasssesModes;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n@@ -75,7 +76,7 @@\n \n     // openjpa properties\n     public ObjectValue classResolverPlugin;\n-    public ObjectValue brokerPlugin;\n+    public BrokerValue brokerPlugin;\n     public ObjectValue dataCachePlugin;\n     public ObjectValue dataCacheManagerPlugin;\n     public IntValue dataCacheTimeout;\n@@ -131,7 +132,8 @@\n     public ObjectValue orphanedKeyPlugin;\n     public ObjectValue compatibilityPlugin;\n     public QueryCompilationCacheValue queryCompilationCachePlugin;\n-    public BooleanValue runtimeClassOptimization;\n+    public IntValue runtimeUnenhancedClasses;\n+    public CacheMarshallersValue cacheMarshallerPlugins;\n \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -209,6 +211,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dataCacheTimeout = addInt(\"DataCacheTimeout\");\n         dataCacheTimeout.setDefault(\"-1\");\n         dataCacheTimeout.set(-1);\n+        dataCacheTimeout.setDynamic(true);\n \n         queryCachePlugin = addPlugin(\"QueryCache\", true);\n         aliases = new String[] { \n@@ -294,19 +297,20 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         mapping = addString(\"Mapping\");\n         metaFactoryPlugin = addPlugin(\"MetaDataFactory\", false);\n \n-        metaRepositoryPlugin = addPlugin(\"MetaDataRepository\", false);\n-        aliases =\n-            new String[] { \"default\",\n-                \"org.apache.openjpa.meta.MetaDataRepository\" };\n-        metaRepositoryPlugin.setAliases(aliases);\n-        metaRepositoryPlugin.setDefault(aliases[0]);\n-        metaRepositoryPlugin.setString(aliases[0]);\n+        metaRepositoryPlugin = (ObjectValue)\n+            addValue(new MetaDataRepositoryValue());\n \n         connectionFactory = addObject(\"ConnectionFactory\");\n         connectionFactory.setInstantiatingGetter(\"getConnectionFactory\");\n \n         connectionFactory2 = addObject(\"ConnectionFactory2\");\n         connectionFactory2.setInstantiatingGetter(\"getConnectionFactory2\");\n+        // This is done because this plug-in may get initialized very lazily\n+        // when the runtime needs it for flush or a sequence. To keep it\n+        // dynamic allows it to be set even when the configuration is frozen\n+        connectionFactory.setDynamic(true);\n+        connectionFactory2.setDynamic(true);\n+\n \n         connectionUserName = addString(\"ConnectionUserName\");\n         connectionPassword = addString(\"ConnectionPassword\");\n@@ -387,6 +391,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         fetchBatchSize = addInt(\"FetchBatchSize\");\n         fetchBatchSize.setDefault(\"-1\");\n         fetchBatchSize.set(-1);\n+        fetchBatchSize.setDynamic(true);\n \n         maxFetchDepth = addInt(\"MaxFetchDepth\");\n         maxFetchDepth.setDefault(\"-1\");\n@@ -410,7 +415,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         lockTimeout = addInt(\"LockTimeout\");\n         lockTimeout.setDefault(\"-1\");\n         lockTimeout.set(-1);\n-\n+        lockTimeout.setDynamic(true);\n+        \n         readLockLevel = addInt(\"ReadLockLevel\");\n         aliases =\n             new String[] {\n@@ -480,9 +486,21 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"getQueryCompilationCacheInstance\");\n         addValue(queryCompilationCachePlugin);\n         \n-        runtimeClassOptimization = addBoolean(\"RuntimeClassOptimization\");\n-        runtimeClassOptimization.setDefault(\"true\");\n-        runtimeClassOptimization.set(true);\n+        runtimeUnenhancedClasses = addInt(\"RuntimeUnenhancedClasses\");\n+        runtimeUnenhancedClasses.setAliases(new String[] {\n+            \"supported\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.SUPPORTED),\n+            \"unsupported\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.UNSUPPORTED),\n+            \"warn\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.WARN),\n+        });\n+        runtimeUnenhancedClasses.setDefault(\"supported\");\n+        runtimeUnenhancedClasses.setString(\"supported\");\n+        runtimeUnenhancedClasses.setAliasListComprehensive(true);\n+\n+        cacheMarshallerPlugins = (CacheMarshallersValue)\n+            addValue(new CacheMarshallersValue(this));\n \n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n@@ -532,7 +550,6 @@ public boolean setSpecification(String spec) {\n     }\n \n     public void setClassResolver(String classResolver) {\n-        assertNotReadOnly();\n         classResolverPlugin.setString(classResolver);\n     }\n \n@@ -541,7 +558,6 @@ public String getClassResolver() {\n     }\n \n     public void setClassResolver(ClassResolver classResolver) {\n-        assertNotReadOnly();\n         classResolverPlugin.set(classResolver);\n     }\n \n@@ -552,7 +568,6 @@ public ClassResolver getClassResolverInstance() {\n     }\n \n     public void setBrokerFactory(String factory) {\n-        assertNotReadOnly();\n         brokerFactoryPlugin.setString(factory);\n     }\n \n@@ -561,7 +576,6 @@ public String getBrokerFactory() {\n     }\n \n     public void setBrokerImpl(String broker) {\n-        assertNotReadOnly();\n         brokerPlugin.setString(broker);\n     }\n \n@@ -578,7 +592,6 @@ public BrokerImpl newBrokerInstance(String user, String pass) {\n     }\n \n     public void setDataCacheManager(String mgr) {\n-        assertNotReadOnly();\n         dataCacheManagerPlugin.setString(mgr);\n     }\n \n@@ -587,7 +600,6 @@ public String getDataCacheManager() {\n     }\n \n     public void setDataCacheManager(DataCacheManager dcm) {\n-        assertNotReadOnly();\n         if (dcm != null)\n             dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n         dataCacheManagerPlugin.set(dcm);\n@@ -605,7 +617,6 @@ public DataCacheManager getDataCacheManagerInstance() {\n     }\n \n     public void setDataCache(String dataCache) {\n-        assertNotReadOnly();\n         dataCachePlugin.setString(dataCache);\n     }\n \n@@ -614,7 +625,6 @@ public String getDataCache() {\n     }\n \n     public void setDataCacheTimeout(int dataCacheTimeout) {\n-        assertNotReadOnly();\n         this.dataCacheTimeout.set(dataCacheTimeout);\n     }\n \n@@ -628,7 +638,6 @@ public int getDataCacheTimeout() {\n     }\n \n     public void setQueryCache(String queryCache) {\n-        assertNotReadOnly();\n         queryCachePlugin.setString(queryCache);\n     }\n \n@@ -649,7 +658,6 @@ public void setDynamicDataStructs(Boolean dynamic) {\n     }\n \n     public void setLockManager(String lockManager) {\n-        assertNotReadOnly();\n         lockManagerPlugin.setString(lockManager);\n     }\n \n@@ -666,7 +674,6 @@ public LockManager newLockManagerInstance() {\n     }\n \n     public void setInverseManager(String inverseManager) {\n-        assertNotReadOnly();\n         inverseManagerPlugin.setString(inverseManager);\n     }\n \n@@ -680,7 +687,6 @@ public InverseManager newInverseManagerInstance() {\n     }\n \n     public void setSavepointManager(String savepointManager) {\n-        assertNotReadOnly();\n         savepointManagerPlugin.setString(savepointManager);\n     }\n \n@@ -695,7 +701,6 @@ public SavepointManager getSavepointManagerInstance() {\n     }\n \n     public void setOrphanedKeyAction(String action) {\n-        assertNotReadOnly();\n         orphanedKeyPlugin.setString(action);\n     }\n \n@@ -710,12 +715,10 @@ public OrphanedKeyAction getOrphanedKeyActionInstance() {\n     }\n \n     public void setOrphanedKeyAction(OrphanedKeyAction action) {\n-        assertNotReadOnly();\n         orphanedKeyPlugin.set(action);\n     }\n \n     public void setRemoteCommitProvider(String remoteCommitProvider) {\n-        assertNotReadOnly();\n         remoteProviderPlugin.setString(remoteCommitProvider);\n     }\n \n@@ -729,7 +732,6 @@ public RemoteCommitProvider newRemoteCommitProviderInstance() {\n \n     public void setRemoteCommitEventManager(\n         RemoteCommitEventManager remoteEventManager) {\n-        assertNotReadOnly();\n         this.remoteEventManager = remoteEventManager;\n         remoteProviderPlugin.configureEventManager(remoteEventManager);\n     }\n@@ -743,7 +745,6 @@ public RemoteCommitEventManager getRemoteCommitEventManager() {\n     }\n \n     public void setTransactionMode(String transactionMode) {\n-        assertNotReadOnly();\n         this.transactionMode.setString(transactionMode);\n     }\n \n@@ -752,7 +753,6 @@ public String getTransactionMode() {\n     }\n \n     public void setTransactionModeManaged(boolean managed) {\n-        assertNotReadOnly();\n         transactionMode.set(managed);\n     }\n \n@@ -761,7 +761,6 @@ public boolean isTransactionModeManaged() {\n     }\n \n     public void setManagedRuntime(String managedRuntime) {\n-        assertNotReadOnly();\n         managedRuntimePlugin.setString(managedRuntime);\n     }\n \n@@ -770,7 +769,6 @@ public String getManagedRuntime() {\n     }\n \n     public void setManagedRuntime(ManagedRuntime managedRuntime) {\n-        assertNotReadOnly();\n         managedRuntimePlugin.set(managedRuntime);\n     }\n \n@@ -781,7 +779,6 @@ public ManagedRuntime getManagedRuntimeInstance() {\n     }\n \n     public void setProxyManager(String proxyManager) {\n-        assertNotReadOnly();\n         proxyManagerPlugin.setString(proxyManager);\n     }\n \n@@ -790,7 +787,6 @@ public String getProxyManager() {\n     }\n \n     public void setProxyManager(ProxyManager proxyManager) {\n-        assertNotReadOnly();\n         proxyManagerPlugin.set(proxyManager);\n     }\n \n@@ -801,7 +797,6 @@ public ProxyManager getProxyManagerInstance() {\n     }\n \n     public void setMapping(String mapping) {\n-        assertNotReadOnly();\n         this.mapping.setString(mapping);\n     }\n \n@@ -810,7 +805,6 @@ public String getMapping() {\n     }\n \n     public void setMetaDataFactory(String meta) {\n-        assertNotReadOnly();\n         this.metaFactoryPlugin.setString(meta);\n     }\n \n@@ -824,7 +818,6 @@ public MetaDataFactory newMetaDataFactoryInstance() {\n     }\n \n     public void setMetaDataRepository(String meta) {\n-        assertNotReadOnly();\n         this.metaRepositoryPlugin.setString(meta);\n     }\n \n@@ -833,7 +826,6 @@ public String getMetaDataRepository() {\n     }\n \n     public void setMetaDataRepository(MetaDataRepository meta) {\n-        assertNotReadOnly();\n         metaRepository = meta;\n     }\n \n@@ -842,14 +834,17 @@ public MetaDataRepository getMetaDataRepositoryInstance() {\n             metaRepository = newMetaDataRepositoryInstance();\n         return metaRepository;\n     }\n+    \n+    public boolean metaDataRepositoryAvailable(){ \n+        return metaRepository != null; \n+    }\n \n     public MetaDataRepository newMetaDataRepositoryInstance() {\n         return (MetaDataRepository) metaRepositoryPlugin.instantiate(\n             MetaDataRepository.class, this);\n     }\n \n     public void setConnectionUserName(String connectionUserName) {\n-        assertNotReadOnly();\n         this.connectionUserName.setString(connectionUserName);\n     }\n \n@@ -858,7 +853,6 @@ public String getConnectionUserName() {\n     }\n \n     public void setConnectionPassword(String connectionPassword) {\n-        assertNotReadOnly();\n         this.connectionPassword.setString(connectionPassword);\n     }\n \n@@ -867,7 +861,6 @@ public String getConnectionPassword() {\n     }\n \n     public void setConnectionURL(String connectionURL) {\n-        assertNotReadOnly();\n         this.connectionURL.setString(connectionURL);\n     }\n \n@@ -876,7 +869,6 @@ public String getConnectionURL() {\n     }\n \n     public void setConnectionDriverName(String driverName) {\n-        assertNotReadOnly();\n         this.connectionDriverName.setString(driverName);\n     }\n \n@@ -885,7 +877,6 @@ public String getConnectionDriverName() {\n     }\n \n     public void setConnectionProperties(String connectionProperties) {\n-        assertNotReadOnly();\n         this.connectionProperties.setString(connectionProperties);\n     }\n \n@@ -895,7 +886,6 @@ public String getConnectionProperties() {\n \n     public void setConnectionFactoryProperties(\n         String connectionFactoryProperties) {\n-        assertNotReadOnly();\n         this.connectionFactoryProperties.setString(connectionFactoryProperties);\n     }\n \n@@ -908,7 +898,6 @@ public String getConnectionFactoryMode() {\n     }\n \n     public void setConnectionFactoryMode(String mode) {\n-        assertNotReadOnly();\n         connectionFactoryMode.setString(mode);\n     }\n \n@@ -917,12 +906,10 @@ public boolean isConnectionFactoryModeManaged() {\n     }\n \n     public void setConnectionFactoryModeManaged(boolean managed) {\n-        assertNotReadOnly();\n         connectionFactoryMode.set(managed);\n     }\n \n     public void setConnectionFactoryName(String connectionFactoryName) {\n-        assertNotReadOnly();\n         this.connectionFactoryName.setString(connectionFactoryName);\n     }\n \n@@ -931,7 +918,6 @@ public String getConnectionFactoryName() {\n     }\n \n     public void setConnectionFactory(Object factory) {\n-        assertNotReadOnly();\n         connectionFactory.set(factory);\n     }\n \n@@ -949,11 +935,14 @@ private Object lookupConnectionFactory(String name) {\n         name = StringUtils.trimToNull(name);\n         if (name == null)\n             return null;\n-        return Configurations.lookup(name);\n+        try {\n+        \treturn Configurations.lookup(name);\n+        } catch (Exception ex) {\n+        \treturn null;\n+        }\n     }\n \n     public void setConnection2UserName(String connection2UserName) {\n-        assertNotReadOnly();\n         this.connection2UserName.setString(connection2UserName);\n     }\n \n@@ -962,7 +951,6 @@ public String getConnection2UserName() {\n     }\n \n     public void setConnection2Password(String connection2Password) {\n-        assertNotReadOnly();\n         this.connection2Password.setString(connection2Password);\n     }\n \n@@ -971,7 +959,6 @@ public String getConnection2Password() {\n     }\n \n     public void setConnection2URL(String connection2URL) {\n-        assertNotReadOnly();\n         this.connection2URL.setString(connection2URL);\n     }\n \n@@ -980,7 +967,6 @@ public String getConnection2URL() {\n     }\n \n     public void setConnection2DriverName(String driverName) {\n-        assertNotReadOnly();\n         this.connection2DriverName.setString(driverName);\n     }\n \n@@ -989,7 +975,6 @@ public String getConnection2DriverName() {\n     }\n \n     public void setConnection2Properties(String connection2Properties) {\n-        assertNotReadOnly();\n         this.connection2Properties.setString(connection2Properties);\n     }\n \n@@ -999,7 +984,6 @@ public String getConnection2Properties() {\n \n     public void setConnectionFactory2Properties(\n         String connectionFactory2Properties) {\n-        assertNotReadOnly();\n         this.connectionFactory2Properties\n             .setString(connectionFactory2Properties);\n     }\n@@ -1009,7 +993,6 @@ public String getConnectionFactory2Properties() {\n     }\n \n     public void setConnectionFactory2Name(String connectionFactory2Name) {\n-        assertNotReadOnly();\n         this.connectionFactory2Name.setString(connectionFactory2Name);\n     }\n \n@@ -1018,7 +1001,6 @@ public String getConnectionFactory2Name() {\n     }\n \n     public void setConnectionFactory2(Object factory) {\n-        assertNotReadOnly();\n         connectionFactory2.set(factory);\n     }\n \n@@ -1030,7 +1012,6 @@ public Object getConnectionFactory2() {\n     }\n \n     public void setOptimistic(boolean optimistic) {\n-        assertNotReadOnly();\n         this.optimistic.set(optimistic);\n     }\n \n@@ -1044,7 +1025,6 @@ public boolean getOptimistic() {\n     }\n \n     public void setAutoClear(String clear) {\n-        assertNotReadOnly();\n         autoClear.setString(clear);\n     }\n \n@@ -1053,7 +1033,6 @@ public String getAutoClear() {\n     }\n \n     public void setAutoClear(int clear) {\n-        assertNotReadOnly();\n         autoClear.set(clear);\n     }\n \n@@ -1062,7 +1041,6 @@ public int getAutoClearConstant() {\n     }\n \n     public void setRetainState(boolean retainState) {\n-        assertNotReadOnly();\n         this.retainState.set(retainState);\n     }\n \n@@ -1076,7 +1054,6 @@ public boolean getRetainState() {\n     }\n \n     public void setRestoreState(String restoreState) {\n-        assertNotReadOnly();\n         this.restoreState.setString(restoreState);\n     }\n \n@@ -1085,7 +1062,6 @@ public String getRestoreState() {\n     }\n \n     public void setRestoreState(int restoreState) {\n-        assertNotReadOnly();\n         this.restoreState.set(restoreState);\n     }\n \n@@ -1094,7 +1070,6 @@ public int getRestoreStateConstant() {\n     }\n \n     public void setAutoDetach(String autoDetach) {\n-        assertNotReadOnly();\n         this.autoDetach.setString(autoDetach);\n     }\n \n@@ -1111,7 +1086,6 @@ public int getAutoDetachConstant() {\n     }\n \n     public void setDetachState(String detachState) {\n-        assertNotReadOnly();\n         detachStatePlugin.setString(detachState);\n     }\n \n@@ -1120,7 +1094,6 @@ public String getDetachState() {\n     }\n \n     public void setDetachState(DetachOptions detachState) {\n-        assertNotReadOnly();\n         detachStatePlugin.set(detachState);\n     }\n \n@@ -1131,7 +1104,6 @@ public DetachOptions getDetachStateInstance() {\n     }\n \n     public void setIgnoreChanges(boolean ignoreChanges) {\n-        assertNotReadOnly();\n         this.ignoreChanges.set(ignoreChanges);\n     }\n \n@@ -1145,7 +1117,6 @@ public boolean getIgnoreChanges() {\n     }\n \n     public void setNontransactionalRead(boolean nontransactionalRead) {\n-        assertNotReadOnly();\n         this.nontransactionalRead.set(nontransactionalRead);\n     }\n \n@@ -1159,7 +1130,6 @@ public boolean getNontransactionalRead() {\n     }\n \n     public void setNontransactionalWrite(boolean nontransactionalWrite) {\n-        assertNotReadOnly();\n         this.nontransactionalWrite.set(nontransactionalWrite);\n     }\n \n@@ -1173,7 +1143,6 @@ public boolean getNontransactionalWrite() {\n     }\n \n     public void setMultithreaded(boolean multithreaded) {\n-        assertNotReadOnly();\n         this.multithreaded.set(multithreaded);\n     }\n \n@@ -1187,7 +1156,6 @@ public boolean getMultithreaded() {\n     }\n \n     public void setFetchBatchSize(int fetchBatchSize) {\n-        assertNotReadOnly();\n         this.fetchBatchSize.set(fetchBatchSize);\n     }\n \n@@ -1201,7 +1169,6 @@ public int getFetchBatchSize() {\n     }\n \n     public void setMaxFetchDepth(int maxFetchDepth) {\n-        assertNotReadOnly();\n         this.maxFetchDepth.set(maxFetchDepth);\n     }\n \n@@ -1215,7 +1182,6 @@ public int getMaxFetchDepth() {\n     }\n \n     public void setFetchGroups(String fetchGroups) {\n-        assertNotReadOnly();\n         this.fetchGroups.setString(fetchGroups);\n     }\n \n@@ -1232,7 +1198,6 @@ public void setFetchGroups(String[] fetchGroups) {\n     }\n \n     public void setFlushBeforeQueries(String flush) {\n-        assertNotReadOnly();\n         flushBeforeQueries.setString(flush);\n     }\n \n@@ -1241,7 +1206,6 @@ public String getFlushBeforeQueries() {\n     }\n \n     public void setFlushBeforeQueries(int flush) {\n-        assertNotReadOnly();\n         flushBeforeQueries.set(flush);\n     }\n \n@@ -1250,7 +1214,6 @@ public int getFlushBeforeQueriesConstant() {\n     }\n \n     public void setLockTimeout(int timeout) {\n-        assertNotReadOnly();\n         lockTimeout.set(timeout);\n     }\n \n@@ -1264,7 +1227,6 @@ public int getLockTimeout() {\n     }\n \n     public void setReadLockLevel(String level) {\n-        assertNotReadOnly();\n         readLockLevel.setString(level);\n     }\n \n@@ -1273,7 +1235,6 @@ public String getReadLockLevel() {\n     }\n \n     public void setReadLockLevel(int level) {\n-        assertNotReadOnly();\n         readLockLevel.set(level);\n     }\n \n@@ -1282,7 +1243,6 @@ public int getReadLockLevelConstant() {\n     }\n \n     public void setWriteLockLevel(String level) {\n-        assertNotReadOnly();\n         writeLockLevel.setString(level);\n     }\n \n@@ -1291,7 +1251,6 @@ public String getWriteLockLevel() {\n     }\n \n     public void setWriteLockLevel(int level) {\n-        assertNotReadOnly();\n         writeLockLevel.set(level);\n     }\n \n@@ -1300,7 +1259,6 @@ public int getWriteLockLevelConstant() {\n     }\n \n     public void setSequence(String sequence) {\n-        assertNotReadOnly();\n         seqPlugin.setString(sequence);\n     }\n \n@@ -1309,7 +1267,6 @@ public String getSequence() {\n     }\n \n     public void setSequence(Seq seq) {\n-        assertNotReadOnly();\n         seqPlugin.set(seq);\n     }\n \n@@ -1320,7 +1277,6 @@ public Seq getSequenceInstance() {\n     }\n \n     public void setConnectionRetainMode(String connectionRetainMode) {\n-        assertNotReadOnly();\n         this.connectionRetainMode.setString(connectionRetainMode);\n     }\n \n@@ -1329,7 +1285,6 @@ public String getConnectionRetainMode() {\n     }\n \n     public void setConnectionRetainMode(int connectionRetainMode) {\n-        assertNotReadOnly();\n         this.connectionRetainMode.set(connectionRetainMode);\n     }\n \n@@ -1338,7 +1293,6 @@ public int getConnectionRetainModeConstant() {\n     }\n \n     public void setFilterListeners(String filterListeners) {\n-        assertNotReadOnly();\n         filterListenerPlugins.setString(filterListeners);\n     }\n \n@@ -1347,7 +1301,6 @@ public String getFilterListeners() {\n     }\n \n     public void setFilterListeners(FilterListener[] listeners) {\n-        assertNotReadOnly();\n         filterListenerPlugins.set(listeners);\n     }\n \n@@ -1358,7 +1311,6 @@ public void setFilterListeners(FilterListener[] listeners) {\n     }\n \n     public void setAggregateListeners(String aggregateListeners) {\n-        assertNotReadOnly();\n         aggregateListenerPlugins.setString(aggregateListeners);\n     }\n \n@@ -1367,7 +1319,6 @@ public String getAggregateListeners() {\n     }\n \n     public void setAggregateListeners(AggregateListener[] listeners) {\n-        assertNotReadOnly();\n         aggregateListenerPlugins.set(listeners);\n     }\n \n@@ -1378,7 +1329,6 @@ public void setAggregateListeners(AggregateListener[] listeners) {\n     }\n \n     public void setRetryClassRegistration(boolean retry) {\n-        assertNotReadOnly();\n         retryClassRegistration.set(retry);\n     }\n \n@@ -1427,23 +1377,39 @@ public BrokerFactoryEventManager getBrokerFactoryEventManager() {\n         return _brokerFactoryEventManager;\n     }\n \n-    public boolean getRuntimeClassOptimization() {\n-        return runtimeClassOptimization.get();\n+    public String getRuntimeUnenhancedClasses() {\n+        return runtimeUnenhancedClasses.getString();\n+    }\n+\n+    public int getRuntimeUnenhancedClassesConstant() {\n+        return runtimeUnenhancedClasses.get();\n+    }\n+\n+    public void setRuntimeUnenhancedClasses(int mode) {\n+        runtimeUnenhancedClasses.set(mode);\n+    }\n+\n+    public void setRuntimeUnenhancedClasses(String mode) {\n+        runtimeUnenhancedClasses.setString(mode);\n     }\n \n-    public void setRuntimeClassOptimization(Boolean enabled) {\n-        setRuntimeClassOptimization(enabled.booleanValue());\n+    public String getCacheMarshallers() {\n+        return cacheMarshallerPlugins.getString();\n     }\n \n-    public void setRuntimeClassOptimization(boolean enabled) {\n-        assertNotReadOnly();\n-        runtimeClassOptimization.set(enabled);\n+    public void setCacheMarshallers(String marshallers) {\n+        cacheMarshallerPlugins.setString(marshallers);\n+    }\n+\n+    public Map getCacheMarshallerInstances() {\n+        return cacheMarshallerPlugins.getInstancesAsMap();\n     }\n \n     public void instantiateAll() {\n         super.instantiateAll();\n         getMetaDataRepositoryInstance();\n         getRemoteCommitEventManager();\n+        cacheMarshallerPlugins.initialize();\n     }\n \n     protected void preClose() {\n@@ -1455,8 +1421,4 @@ protected void preClose() {\n     public Log getConfigurationLog() {\n         return getLog(LOG_RUNTIME);\n     }\n-    \n-    public Value[] getDynamicValues() {\n-    \treturn new Value[] { dataCacheTimeout, fetchBatchSize, lockTimeout };\n-    }\n }"},{"sha":"4d89d3eadbbefa7144d57b337ef71aebe7e3447c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -45,8 +45,21 @@\n     public static final String REVISION_NUMBER;\n \n     static {\n-        Package pack = OpenJPAVersion.class.getPackage();\n-        String vers = pack == null ? null : pack.getImplementationVersion();\n+        Properties revisionProps = new Properties();\n+        try {\n+            InputStream in = OpenJPAVersion.class.getResourceAsStream\n+                (\"/META-INF/org.apache.openjpa.revision.properties\");\n+            if (in != null) {\n+                try {\n+                    revisionProps.load(in);\n+                } finally {\n+                    in.close();\n+                }\n+            }\n+        } catch (Exception e) {\n+        }\n+\n+        String vers = revisionProps.getProperty(\"openjpa.version\");\n         if (vers == null || \"\".equals(vers.trim()))\n             vers = \"0.0.0\";\n         VERSION_NUMBER = vers;\n@@ -71,21 +84,7 @@\n             patch = 0;\n         }\n \n-        String revision = \"\";\n-        try {\n-            InputStream in = OpenJPAVersion.class.getResourceAsStream\n-                (\"/META-INF/org.apache.openjpa.revision.properties\");\n-            if (in != null) {\n-                try {\n-                    Properties props = new Properties();\n-                    props.load(in);\n-                    revision = props.getProperty(\"revision.number\");\n-                } finally {\n-                    in.close();\n-                }\n-            }\n-        } catch (Exception e) {\n-        }\n+        String revision = revisionProps.getProperty(\"revision.number\");\n \n         MAJOR_RELEASE = major;\n         MINOR_RELEASE = minor;"},{"sha":"6cad968c6bda1d584bcc6e4a41b04b0a182d94f8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersionAndConfigurationTypeValidationPolicy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import org.apache.openjpa.conf.CacheMarshaller.ValidationPolicy;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+\r\n+/**\r\n+ * Compute validity based on whether or not the cached data is from the same\r\n+ * version of Kodo as the current install. This also checks OpenJPA version\r\n+ * information in case the OpenJPA jars were independently updated.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class OpenJPAVersionAndConfigurationTypeValidationPolicy\r\n+    implements ValidationPolicy, Configurable {\r\n+\r\n+    private String confClassName;\r\n+\r\n+    public Object getCacheableData(Object o) {\r\n+        return new Object[] {\r\n+            OpenJPAVersion.VERSION_ID,\r\n+            confClassName,\r\n+            o,\r\n+        };\r\n+    }\r\n+\r\n+    public Object getValidData(Object o) {\r\n+        Object[] array = (Object[]) o;\r\n+        if (array.length != 3)\r\n+            return null;\r\n+\r\n+        if (OpenJPAVersion.VERSION_ID.equals(array[0])\r\n+            && confClassName.equals(array[1]))\r\n+            return array[2];\r\n+        else\r\n+            return null;\r\n+    }\r\n+\r\n+    public void setConfiguration(Configuration conf) {\r\n+        confClassName = conf.getClass().getName();\r\n+    }\r\n+\r\n+    public void startConfiguration() {\r\n+    }\r\n+\r\n+    public void endConfiguration() {\r\n+    }\r\n+}\r"},{"sha":"b504a60e2ad4db18b5b976ae246664c08a395dd8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -24,8 +24,8 @@\n \r\n import org.apache.openjpa.lib.conf.Configuration;\r\n import org.apache.openjpa.lib.conf.PluginValue;\r\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentMap;\r\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.lib.util.ParseException;\r\n import org.apache.openjpa.util.CacheMap;\r\n \r\n /**\r\n@@ -58,6 +58,18 @@ public Object newInstance(String clsName, Class type,\n         \r\n         try {\r\n             map = (Map) super.newInstance(clsName, type, conf, fatal);\r\n+        } catch (ParseException pe) {\r\n+            // OPENJPA256: this class differs from most plugins in that\r\n+            // the plugin type is the standard java interface Map.class (rather\r\n+            // than an openjpa-specific interface), which means that the\r\n+            // ClassLoader used to load the implementation will be the system\r\n+            // class loader; this presents a problem if OpenJPA is not in the\r\n+            // system classpath, so work around the problem by catching\r\n+            // the ParseException (which is what we wrap the\r\n+            // ClassNotFoundException in) and try again, this time using\r\n+            // this class' ClassLoader.\r\n+            map = (Map) super.newInstance(clsName,\r\n+                QueryCompilationCacheValue.class, conf, fatal);\r\n         } catch (IllegalArgumentException iae) {\r\n             // OPENJPA256: this class differs from most plugins in that\r\n             // the plugin type is the standard java interface Map.class (rather\r\n@@ -74,7 +86,9 @@ public Object newInstance(String clsName, Class type,\n \r\n         if (map != null && !(map instanceof Hashtable)\r\n             && !(map instanceof CacheMap)\r\n-            && !(map instanceof ConcurrentMap))\r\n+            && !(map instanceof\r\n+                    org.apache.openjpa.lib.util.concurrent.ConcurrentMap)\r\n+            && !(map instanceof java.util.concurrent.ConcurrentMap))\r\n             map = Collections.synchronizedMap(map);\r\n         return map;\r\n \t}\r"},{"sha":"9e7c732b14e56a491e1ce784e2fd07db134cc72b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":455,"deletions":455,"changes":910,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,455 +1,455 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.datacache;\n-\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.event.RemoteCommitEvent;\n-import org.apache.openjpa.event.RemoteCommitListener;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n-\n-/**\n- * Abstract {@link DataCache} implementation that provides various\n- * statistics, logging, and timeout functionality common across cache\n- * implementations.\n- *\n- * @author Patrick Linskey\n- * @author Abe White\n- */\n-public abstract class AbstractDataCache\n-    extends AbstractConcurrentEventManager\n-    implements DataCache, Configurable {\n-\n-    private static final BitSet EMPTY_BITSET = new BitSet(0);\n-\n-    private static final Localizer s_loc =\n-        Localizer.forPackage(AbstractDataCache.class);\n-\n-    /**\n-     * The configuration set by the system.\n-     */\n-    protected OpenJPAConfiguration conf;\n-\n-    /**\n-     * The log to use.\n-     */\n-    protected Log log;\n-\n-    private String _name = null;\n-    private boolean _closed = false;\n-    private String _schedule = null;\n-\n-    public String getName() {\n-        return _name;\n-    }\n-\n-    public void setName(String name) {\n-        _name = name;\n-    }\n-\n-    public String getEvictionSchedule() {\n-        return _schedule;\n-    }\n-\n-    public void setEvictionSchedule(String s) {\n-        _schedule = s;\n-    }\n-\n-    public void initialize(DataCacheManager manager) {\n-        if (_schedule != null && !\"\".equals(_schedule)) {\n-            DataCacheScheduler scheduler = manager.getDataCacheScheduler();\n-            if (scheduler != null)\n-                scheduler.scheduleEviction(this, _schedule);\n-        }\n-    }\n-\n-    public void commit(Collection additions, Collection newUpdates,\n-        Collection existingUpdates, Collection deletes) {\n-        // remove all objects in deletes list\n-        removeAllInternal(deletes);\n-\n-        // next, add all the new additions\n-        putAllInternal(additions);\n-        putAllInternal(newUpdates);\n-\n-        // possibly add the existing updates, depending on the\n-        // semantics of the cache, as dictated by recacheUpdates()\n-        if (recacheUpdates())\n-            putAllInternal(existingUpdates);\n-\n-        if (log.isTraceEnabled()) {\n-            Collection addIds = new ArrayList(additions.size());\n-            Collection upIds = new ArrayList(newUpdates.size());\n-            Collection exIds = new ArrayList(existingUpdates.size());\n-\n-            for (Iterator iter = additions.iterator(); iter.hasNext();)\n-                addIds.add(((DataCachePCData) iter.next()).getId());\n-            for (Iterator iter = newUpdates.iterator(); iter.hasNext();)\n-                upIds.add(((DataCachePCData) iter.next()).getId());\n-            for (Iterator iter = existingUpdates.iterator(); iter.hasNext();)\n-                exIds.add(((DataCachePCData) iter.next()).getId());\n-\n-            log.trace(s_loc.get(\"cache-commit\",\n-                new Object[]{ addIds, upIds, exIds, deletes }));\n-        }\n-    }\n-\n-    public boolean contains(Object key) {\n-        DataCachePCData o = getInternal(key);\n-        if (o != null && o.isTimedOut()) {\n-            o = null;\n-            removeInternal(key);\n-            if (log.isTraceEnabled())\n-                log.trace(s_loc.get(\"cache-timeout\", key));\n-        }\n-        return o != null;\n-    }\n-\n-    public BitSet containsAll(Collection keys) {\n-        if (keys.isEmpty())\n-            return EMPTY_BITSET;\n-\n-        BitSet set = new BitSet(keys.size());\n-        int i = 0;\n-        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\n-            if (contains(iter.next()))\n-                set.set(i);\n-        return set;\n-    }\n-\n-    public DataCachePCData get(Object key) {\n-        DataCachePCData o = getInternal(key);\n-        if (o != null && o.isTimedOut()) {\n-            o = null;\n-            removeInternal(key);\n-            if (log.isTraceEnabled())\n-                log.trace(s_loc.get(\"cache-timeout\", key));\n-        }\n-\n-        if (log.isTraceEnabled()) {\n-            if (o == null)\n-                log.trace(s_loc.get(\"cache-miss\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-hit\", key));\n-        }\n-\n-        return o;\n-    }\n-\n-    public DataCachePCData put(DataCachePCData data) {\n-        DataCachePCData o = putInternal(data.getId(), data);\n-        if (log.isTraceEnabled())\n-            log.trace(s_loc.get(\"cache-put\", data.getId()));\n-        return (o == null || o.isTimedOut()) ? null : o;\n-    }\n-\n-    public void update(DataCachePCData data) {\n-        if (recacheUpdates())\n-            putInternal(data.getId(), data);\n-    }\n-\n-    public DataCachePCData remove(Object key) {\n-        DataCachePCData o = removeInternal(key);\n-        if (o != null && o.isTimedOut())\n-            o = null;\n-        if (log.isTraceEnabled()) {\n-            if (o == null)\n-                log.trace(s_loc.get(\"cache-remove-miss\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-remove-hit\", key));\n-        }\n-        return o;\n-    }\n-\n-    public BitSet removeAll(Collection keys) {\n-        if (keys.isEmpty())\n-            return EMPTY_BITSET;\n-\n-        BitSet set = new BitSet(keys.size());\n-        int i = 0;\n-        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\n-            if (remove(iter.next()) != null)\n-                set.set(i);\n-        return set;\n-    }\n-\n-    /**\n-     * Remove the objects of the given class from the cache.\n-     */\n-    public void removeAll(Class cls, boolean subClasses) {\n-        removeAllInternal(cls, subClasses);\n-    }\n-\n-    public boolean pin(Object key) {\n-        boolean bool = pinInternal(key);\n-        if (log.isTraceEnabled()) {\n-            if (bool)\n-                log.trace(s_loc.get(\"cache-pin-hit\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-pin-miss\", key));\n-        }\n-        return bool;\n-    }\n-\n-    public BitSet pinAll(Collection keys) {\n-        if (keys.isEmpty())\n-            return EMPTY_BITSET;\n-\n-        BitSet set = new BitSet(keys.size());\n-        int i = 0;\n-        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\n-            if (pin(iter.next()))\n-                set.set(i);\n-        return set;\n-    }\n-\n-    public void pinAll(Class cls, boolean subs) {\n-        if (log.isWarnEnabled())\n-            log.warn(s_loc.get(\"cache-class-pin\", getName()));\n-    }\n-\n-    public boolean unpin(Object key) {\n-        boolean bool = unpinInternal(key);\n-        if (log.isTraceEnabled()) {\n-            if (bool)\n-                log.trace(s_loc.get(\"cache-unpin-hit\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-unpin-miss\", key));\n-        }\n-        return bool;\n-    }\n-\n-    public BitSet unpinAll(Collection keys) {\n-        if (keys.isEmpty())\n-            return EMPTY_BITSET;\n-\n-        BitSet set = new BitSet(keys.size());\n-        int i = 0;\n-        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\n-            if (unpin(iter.next()))\n-                set.set(i);\n-        return set;\n-    }\n-\n-    public void unpinAll(Class cls, boolean subs) {\n-        if (log.isWarnEnabled())\n-            log.warn(s_loc.get(\"cache-class-unpin\", getName()));\n-    }\n-\n-    public void clear() {\n-        clearInternal();\n-        if (log.isTraceEnabled())\n-            log.trace(s_loc.get(\"cache-clear\", getName()));\n-    }\n-\n-    public void close() {\n-        close(true);\n-    }\n-\n-    protected void close(boolean clear) {\n-        if (!_closed) {\n-            if (clear)\n-                clearInternal();\n-            _closed = true;\n-        }\n-    }\n-\n-    public boolean isClosed() {\n-        return _closed;\n-    }\n-\n-    public void addExpirationListener(ExpirationListener listen) {\n-        addListener(listen);\n-    }\n-\n-    public boolean removeExpirationListener(ExpirationListener listen) {\n-        return removeListener(listen);\n-    }\n-\n-    public String toString() {\n-        return \"[\" + super.toString() + \":\" + _name + \"]\";\n-    }\n-\n-    /**\n-     * This method is part of the {@link RemoteCommitListener} interface. If\n-     * your cache subclass relies on OpenJPA for clustering support, make it\n-     * implement <code>RemoteCommitListener</code>. This method will take\n-     * care of invalidating entries from remote commits.\n-     */\n-    public void afterCommit(RemoteCommitEvent event) {\n-        if (_closed)\n-            return;\n-\n-        if (event.getPayloadType() == RemoteCommitEvent.PAYLOAD_EXTENTS) {\n-            removeAllTypeNamesInternal(event.getUpdatedTypeNames());\n-            removeAllTypeNamesInternal(event.getDeletedTypeNames());\n-        } else {\n-            // drop all the committed OIDs, excepting brand\n-            // new OIDs. brand new OIDs either won't be in\n-            // the cache, or if they are, will be more up to date\n-            removeAllInternal(event.getUpdatedObjectIds());\n-            removeAllInternal(event.getDeletedObjectIds());\n-        }\n-    }\n-\n-    /**\n-     * Invoke when a key is removed from this cache. Propagates the\n-     * expiration event on to all expiration listeners registered\n-     * with this class.\n-     */\n-    protected void keyRemoved(Object key, boolean expired) {\n-        // Notify any expiration listeners of the expiration.\n-        if (hasListeners())\n-            fireEvent(new ExpirationEvent(this, key, expired));\n-\n-        if (expired && log.isTraceEnabled())\n-            log.trace(s_loc.get(\"cache-expired\", key));\n-    }\n-\n-    /**\n-     * Return <code>true</code> if updates to data already in the\n-     * cache (either in {@link #commit} or the {@link #update})\n-     * should be put back into the cache. Returns false by default.\n-     */\n-    protected boolean recacheUpdates() {\n-        return false;\n-    }\n-\n-    /**\n-     * Return the object for the given oid.\n-     */\n-    protected abstract DataCachePCData getInternal(Object oid);\n-\n-    /**\n-     * Add the given object to the cache, returning the old object under the\n-     * given oid.\n-     */\n-    protected abstract DataCachePCData putInternal(Object oid,\n-        DataCachePCData pc);\n-\n-    /**\n-     * All all of the given objects to the cache.\n-     */\n-    protected void putAllInternal(Collection pcs) {\n-        DataCachePCData pc;\n-        for (Iterator iter = pcs.iterator(); iter.hasNext();) {\n-            pc = (DataCachePCData) iter.next();\n-            putInternal(pc.getId(), pc);\n-        }\n-    }\n-\n-    /**\n-     * Remove the object under the given oid from the cache.\n-     */\n-    protected abstract DataCachePCData removeInternal(Object oid);\n-\n-    /**\n-     * Evict objects in cache by class.\n-     */\n-    protected abstract void removeAllInternal(Class cls, boolean subclasses);\n-\n-    /**\n-     * Remove all objects under the given oids from the cache.\n-     */\n-    protected void removeAllInternal(Collection oids) {\n-        for (Iterator iter = oids.iterator(); iter.hasNext();)\n-            removeInternal(iter.next());\n-    }\n-\n-    /**\n-     * Remove all objects of the given class names from the cache.\n-     */\n-    protected void removeAllTypeNamesInternal(Collection classNames) {\n-        Collection classes = Caches.addTypesByName(conf, classNames, null);\n-        if (classes == null)\n-            return;\n-\n-        Class cls;\n-        for (Iterator iter = classes.iterator(); iter.hasNext();) {\n-            cls = (Class) iter.next();\n-            if (log.isTraceEnabled())\n-                log.trace(s_loc.get(\"cache-removeclass\", cls.getName()));\n-            removeAllInternal(cls, false);\n-        }\n-    }\n-\n-    /**\n-     * Clear the cache.\n-     */\n-    protected abstract void clearInternal();\n-\n-    /**\n-     * Pin an object to the cache.\n-     */\n-    protected abstract boolean pinInternal(Object oid);\n-\n-    /**\n-     * Unpin an object from the cache.\n-     */\n-    protected abstract boolean unpinInternal(Object oid);\n-\n-    // ---------- Configurable implementation ----------\n-\n-    public void setConfiguration(Configuration conf) {\n-        this.conf = (OpenJPAConfiguration) conf;\n-        this.log = conf.getLog(OpenJPAConfiguration.LOG_DATACACHE);\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-        if (_name == null)\n-            setName(NAME_DEFAULT);\n-    }\n-\n-    // ---------- AbstractEventManager implementation ----------\n-\n-    protected void fireEvent(Object event, Object listener) {\n-        ExpirationListener listen = (ExpirationListener) listener;\n-        ExpirationEvent ev = (ExpirationEvent) event;\n-        try {\n-            listen.onExpire(ev);\n-        } catch (Exception e) {\n-            if (log.isWarnEnabled())\n-                log.warn(s_loc.get(\"exp-listener-ex\"), e);\n-\t\t}\n-\t}\n-\n-    /**\n-     * Returns the objects for the given key List.\n-     */\n-    public Map getAll(List keys) {\n-        Map resultMap = new HashMap(keys.size());\n-        for(int i=0; i<keys.size(); i++)\n-            resultMap.put(keys.get(i), get(keys.get(i)));\n-        return resultMap;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.datacache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.BitSet;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.event.RemoteCommitEvent;\r\n+import org.apache.openjpa.event.RemoteCommitListener;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\r\n+\r\n+/**\r\n+ * Abstract {@link DataCache} implementation that provides various\r\n+ * statistics, logging, and timeout functionality common across cache\r\n+ * implementations.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class AbstractDataCache\r\n+    extends AbstractConcurrentEventManager\r\n+    implements DataCache, Configurable {\r\n+\r\n+    private static final BitSet EMPTY_BITSET = new BitSet(0);\r\n+\r\n+    private static final Localizer s_loc =\r\n+        Localizer.forPackage(AbstractDataCache.class);\r\n+\r\n+    /**\r\n+     * The configuration set by the system.\r\n+     */\r\n+    protected OpenJPAConfiguration conf;\r\n+\r\n+    /**\r\n+     * The log to use.\r\n+     */\r\n+    protected Log log;\r\n+\r\n+    private String _name = null;\r\n+    private boolean _closed = false;\r\n+    private String _schedule = null;\r\n+\r\n+    public String getName() {\r\n+        return _name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        _name = name;\r\n+    }\r\n+\r\n+    public String getEvictionSchedule() {\r\n+        return _schedule;\r\n+    }\r\n+\r\n+    public void setEvictionSchedule(String s) {\r\n+        _schedule = s;\r\n+    }\r\n+\r\n+    public void initialize(DataCacheManager manager) {\r\n+        if (_schedule != null && !\"\".equals(_schedule)) {\r\n+            DataCacheScheduler scheduler = manager.getDataCacheScheduler();\r\n+            if (scheduler != null)\r\n+                scheduler.scheduleEviction(this, _schedule);\r\n+        }\r\n+    }\r\n+\r\n+    public void commit(Collection additions, Collection newUpdates,\r\n+        Collection existingUpdates, Collection deletes) {\r\n+        // remove all objects in deletes list\r\n+        removeAllInternal(deletes);\r\n+\r\n+        // next, add all the new additions\r\n+        putAllInternal(additions);\r\n+        putAllInternal(newUpdates);\r\n+\r\n+        // possibly add the existing updates, depending on the\r\n+        // semantics of the cache, as dictated by recacheUpdates()\r\n+        if (recacheUpdates())\r\n+            putAllInternal(existingUpdates);\r\n+\r\n+        if (log.isTraceEnabled()) {\r\n+            Collection addIds = new ArrayList(additions.size());\r\n+            Collection upIds = new ArrayList(newUpdates.size());\r\n+            Collection exIds = new ArrayList(existingUpdates.size());\r\n+\r\n+            for (Iterator iter = additions.iterator(); iter.hasNext();)\r\n+                addIds.add(((DataCachePCData) iter.next()).getId());\r\n+            for (Iterator iter = newUpdates.iterator(); iter.hasNext();)\r\n+                upIds.add(((DataCachePCData) iter.next()).getId());\r\n+            for (Iterator iter = existingUpdates.iterator(); iter.hasNext();)\r\n+                exIds.add(((DataCachePCData) iter.next()).getId());\r\n+\r\n+            log.trace(s_loc.get(\"cache-commit\",\r\n+                new Object[]{ addIds, upIds, exIds, deletes }));\r\n+        }\r\n+    }\r\n+\r\n+    public boolean contains(Object key) {\r\n+        DataCachePCData o = getInternal(key);\r\n+        if (o != null && o.isTimedOut()) {\r\n+            o = null;\r\n+            removeInternal(key);\r\n+            if (log.isTraceEnabled())\r\n+                log.trace(s_loc.get(\"cache-timeout\", key));\r\n+        }\r\n+        return o != null;\r\n+    }\r\n+\r\n+    public BitSet containsAll(Collection keys) {\r\n+        if (keys.isEmpty())\r\n+            return EMPTY_BITSET;\r\n+\r\n+        BitSet set = new BitSet(keys.size());\r\n+        int i = 0;\r\n+        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\r\n+            if (contains(iter.next()))\r\n+                set.set(i);\r\n+        return set;\r\n+    }\r\n+\r\n+    public DataCachePCData get(Object key) {\r\n+        DataCachePCData o = getInternal(key);\r\n+        if (o != null && o.isTimedOut()) {\r\n+            o = null;\r\n+            removeInternal(key);\r\n+            if (log.isTraceEnabled())\r\n+                log.trace(s_loc.get(\"cache-timeout\", key));\r\n+        }\r\n+\r\n+        if (log.isTraceEnabled()) {\r\n+            if (o == null)\r\n+                log.trace(s_loc.get(\"cache-miss\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-hit\", key));\r\n+        }\r\n+\r\n+        return o;\r\n+    }\r\n+\r\n+    public DataCachePCData put(DataCachePCData data) {\r\n+        DataCachePCData o = putInternal(data.getId(), data);\r\n+        if (log.isTraceEnabled())\r\n+            log.trace(s_loc.get(\"cache-put\", data.getId()));\r\n+        return (o == null || o.isTimedOut()) ? null : o;\r\n+    }\r\n+\r\n+    public void update(DataCachePCData data) {\r\n+        if (recacheUpdates())\r\n+            putInternal(data.getId(), data);\r\n+    }\r\n+\r\n+    public DataCachePCData remove(Object key) {\r\n+        DataCachePCData o = removeInternal(key);\r\n+        if (o != null && o.isTimedOut())\r\n+            o = null;\r\n+        if (log.isTraceEnabled()) {\r\n+            if (o == null)\r\n+                log.trace(s_loc.get(\"cache-remove-miss\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-remove-hit\", key));\r\n+        }\r\n+        return o;\r\n+    }\r\n+\r\n+    public BitSet removeAll(Collection keys) {\r\n+        if (keys.isEmpty())\r\n+            return EMPTY_BITSET;\r\n+\r\n+        BitSet set = new BitSet(keys.size());\r\n+        int i = 0;\r\n+        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\r\n+            if (remove(iter.next()) != null)\r\n+                set.set(i);\r\n+        return set;\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the objects of the given class from the cache.\r\n+     */\r\n+    public void removeAll(Class cls, boolean subClasses) {\r\n+        removeAllInternal(cls, subClasses);\r\n+    }\r\n+\r\n+    public boolean pin(Object key) {\r\n+        boolean bool = pinInternal(key);\r\n+        if (log.isTraceEnabled()) {\r\n+            if (bool)\r\n+                log.trace(s_loc.get(\"cache-pin-hit\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-pin-miss\", key));\r\n+        }\r\n+        return bool;\r\n+    }\r\n+\r\n+    public BitSet pinAll(Collection keys) {\r\n+        if (keys.isEmpty())\r\n+            return EMPTY_BITSET;\r\n+\r\n+        BitSet set = new BitSet(keys.size());\r\n+        int i = 0;\r\n+        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\r\n+            if (pin(iter.next()))\r\n+                set.set(i);\r\n+        return set;\r\n+    }\r\n+\r\n+    public void pinAll(Class cls, boolean subs) {\r\n+        if (log.isWarnEnabled())\r\n+            log.warn(s_loc.get(\"cache-class-pin\", getName()));\r\n+    }\r\n+\r\n+    public boolean unpin(Object key) {\r\n+        boolean bool = unpinInternal(key);\r\n+        if (log.isTraceEnabled()) {\r\n+            if (bool)\r\n+                log.trace(s_loc.get(\"cache-unpin-hit\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-unpin-miss\", key));\r\n+        }\r\n+        return bool;\r\n+    }\r\n+\r\n+    public BitSet unpinAll(Collection keys) {\r\n+        if (keys.isEmpty())\r\n+            return EMPTY_BITSET;\r\n+\r\n+        BitSet set = new BitSet(keys.size());\r\n+        int i = 0;\r\n+        for (Iterator iter = keys.iterator(); iter.hasNext(); i++)\r\n+            if (unpin(iter.next()))\r\n+                set.set(i);\r\n+        return set;\r\n+    }\r\n+\r\n+    public void unpinAll(Class cls, boolean subs) {\r\n+        if (log.isWarnEnabled())\r\n+            log.warn(s_loc.get(\"cache-class-unpin\", getName()));\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        clearInternal();\r\n+        if (log.isTraceEnabled())\r\n+            log.trace(s_loc.get(\"cache-clear\", getName()));\r\n+    }\r\n+\r\n+    public void close() {\r\n+        close(true);\r\n+    }\r\n+\r\n+    protected void close(boolean clear) {\r\n+        if (!_closed) {\r\n+            if (clear)\r\n+                clearInternal();\r\n+            _closed = true;\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isClosed() {\r\n+        return _closed;\r\n+    }\r\n+\r\n+    public void addExpirationListener(ExpirationListener listen) {\r\n+        addListener(listen);\r\n+    }\r\n+\r\n+    public boolean removeExpirationListener(ExpirationListener listen) {\r\n+        return removeListener(listen);\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"[\" + super.toString() + \":\" + _name + \"]\";\r\n+    }\r\n+\r\n+    /**\r\n+     * This method is part of the {@link RemoteCommitListener} interface. If\r\n+     * your cache subclass relies on OpenJPA for clustering support, make it\r\n+     * implement <code>RemoteCommitListener</code>. This method will take\r\n+     * care of invalidating entries from remote commits.\r\n+     */\r\n+    public void afterCommit(RemoteCommitEvent event) {\r\n+        if (_closed)\r\n+            return;\r\n+\r\n+        if (event.getPayloadType() == RemoteCommitEvent.PAYLOAD_EXTENTS) {\r\n+            removeAllTypeNamesInternal(event.getUpdatedTypeNames());\r\n+            removeAllTypeNamesInternal(event.getDeletedTypeNames());\r\n+        } else {\r\n+            // drop all the committed OIDs, excepting brand\r\n+            // new OIDs. brand new OIDs either won't be in\r\n+            // the cache, or if they are, will be more up to date\r\n+            removeAllInternal(event.getUpdatedObjectIds());\r\n+            removeAllInternal(event.getDeletedObjectIds());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Invoke when a key is removed from this cache. Propagates the\r\n+     * expiration event on to all expiration listeners registered\r\n+     * with this class.\r\n+     */\r\n+    protected void keyRemoved(Object key, boolean expired) {\r\n+        // Notify any expiration listeners of the expiration.\r\n+        if (hasListeners())\r\n+            fireEvent(new ExpirationEvent(this, key, expired));\r\n+\r\n+        if (expired && log.isTraceEnabled())\r\n+            log.trace(s_loc.get(\"cache-expired\", key));\r\n+    }\r\n+\r\n+    /**\r\n+     * Return <code>true</code> if updates to data already in the\r\n+     * cache (either in {@link #commit} or the {@link #update})\r\n+     * should be put back into the cache. Returns false by default.\r\n+     */\r\n+    protected boolean recacheUpdates() {\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the object for the given oid.\r\n+     */\r\n+    protected abstract DataCachePCData getInternal(Object oid);\r\n+\r\n+    /**\r\n+     * Add the given object to the cache, returning the old object under the\r\n+     * given oid.\r\n+     */\r\n+    protected abstract DataCachePCData putInternal(Object oid,\r\n+        DataCachePCData pc);\r\n+\r\n+    /**\r\n+     * All all of the given objects to the cache.\r\n+     */\r\n+    protected void putAllInternal(Collection pcs) {\r\n+        DataCachePCData pc;\r\n+        for (Iterator iter = pcs.iterator(); iter.hasNext();) {\r\n+            pc = (DataCachePCData) iter.next();\r\n+            putInternal(pc.getId(), pc);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the object under the given oid from the cache.\r\n+     */\r\n+    protected abstract DataCachePCData removeInternal(Object oid);\r\n+\r\n+    /**\r\n+     * Evict objects in cache by class.\r\n+     */\r\n+    protected abstract void removeAllInternal(Class cls, boolean subclasses);\r\n+\r\n+    /**\r\n+     * Remove all objects under the given oids from the cache.\r\n+     */\r\n+    protected void removeAllInternal(Collection oids) {\r\n+        for (Iterator iter = oids.iterator(); iter.hasNext();)\r\n+            removeInternal(iter.next());\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove all objects of the given class names from the cache.\r\n+     */\r\n+    protected void removeAllTypeNamesInternal(Collection classNames) {\r\n+        Collection classes = Caches.addTypesByName(conf, classNames, null);\r\n+        if (classes == null)\r\n+            return;\r\n+\r\n+        Class cls;\r\n+        for (Iterator iter = classes.iterator(); iter.hasNext();) {\r\n+            cls = (Class) iter.next();\r\n+            if (log.isTraceEnabled())\r\n+                log.trace(s_loc.get(\"cache-removeclass\", cls.getName()));\r\n+            removeAllInternal(cls, false);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Clear the cache.\r\n+     */\r\n+    protected abstract void clearInternal();\r\n+\r\n+    /**\r\n+     * Pin an object to the cache.\r\n+     */\r\n+    protected abstract boolean pinInternal(Object oid);\r\n+\r\n+    /**\r\n+     * Unpin an object from the cache.\r\n+     */\r\n+    protected abstract boolean unpinInternal(Object oid);\r\n+\r\n+    // ---------- Configurable implementation ----------\r\n+\r\n+    public void setConfiguration(Configuration conf) {\r\n+        this.conf = (OpenJPAConfiguration) conf;\r\n+        this.log = conf.getLog(OpenJPAConfiguration.LOG_DATACACHE);\r\n+    }\r\n+\r\n+    public void startConfiguration() {\r\n+    }\r\n+\r\n+    public void endConfiguration() {\r\n+        if (_name == null)\r\n+            setName(NAME_DEFAULT);\r\n+    }\r\n+\r\n+    // ---------- AbstractEventManager implementation ----------\r\n+\r\n+    protected void fireEvent(Object event, Object listener) {\r\n+        ExpirationListener listen = (ExpirationListener) listener;\r\n+        ExpirationEvent ev = (ExpirationEvent) event;\r\n+        try {\r\n+            listen.onExpire(ev);\r\n+        } catch (Exception e) {\r\n+            if (log.isWarnEnabled())\r\n+                log.warn(s_loc.get(\"exp-listener-ex\"), e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+    /**\r\n+     * Returns the objects for the given key List.\r\n+     */\r\n+    public Map getAll(List keys) {\r\n+        Map resultMap = new HashMap(keys.size());\r\n+        for(int i=0; i<keys.size(); i++)\r\n+            resultMap.put(keys.get(i), get(keys.get(i)));\r\n+        return resultMap;\r\n+    }\r\n+}\r"},{"sha":"6adbd8bc58e4e1ef1e2ea28e14188d64e73280e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":322,"deletions":322,"changes":644,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,322 +1,322 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.datacache;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.event.RemoteCommitEvent;\n-import org.apache.openjpa.event.RemoteCommitListener;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.MetaDataRepository;\n-import org.apache.openjpa.util.Id;\n-\n-/**\n- * Abstract {@link QueryCache} implementation that provides various\n- * statistics, logging, and timeout functionality common across cache\n- * implementations.\n- *\n- * @author Patrick Linskey\n- * @author Abe White\n- */\n-public abstract class AbstractQueryCache\n-    extends AbstractConcurrentEventManager \n-    implements QueryCache, Configurable {\n-\n-    private static final Localizer s_loc =\n-        Localizer.forPackage(AbstractQueryCache.class);\n-\n-    /**\n-     * The configuration set by the system.\n-     */\n-    protected OpenJPAConfiguration conf;\n-\n-    /**\n-     * The log to use.\n-     */\n-    protected Log log;\n-\n-    private boolean _closed = false;\n-\n-    public void initialize(DataCacheManager manager) {\n-    }\n-\n-    public void onTypesChanged(TypesChangedEvent ev) {\n-        writeLock();\n-        Collection keys = null;\n-        try {\n-            if (hasListeners())\n-                fireEvent(ev);\n-            keys = keySet();\n-        } finally {\n-            writeUnlock();\n-        }\n-\n-        QueryKey qk;\n-        List removes = null;\n-        for (Iterator iter = keys.iterator(); iter.hasNext();) {\n-            qk = (QueryKey) iter.next();\n-            if (qk.changeInvalidatesQuery(ev.getTypes())) {\n-                if (removes == null)\n-                    removes = new ArrayList();\n-                removes.add(qk);\n-            }\n-        }\n-        if (removes != null)\n-            removeAllInternal(removes);\n-    }\n-\n-    public QueryResult get(QueryKey key) {\n-        QueryResult o = getInternal(key);\n-        if (o != null && o.isTimedOut()) {\n-            o = null;\n-            removeInternal(key);\n-            if (log.isTraceEnabled())\n-                log.trace(s_loc.get(\"cache-timeout\", key));\n-        }\n-\n-        if (log.isTraceEnabled()) {\n-            if (o == null)\n-                log.trace(s_loc.get(\"cache-miss\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-hit\", key));\n-        }\n-        return o;\n-    }\n-\n-    public QueryResult put(QueryKey qk, QueryResult oids) {\n-        QueryResult o = putInternal(qk, oids);\n-        if (log.isTraceEnabled())\n-            log.trace(s_loc.get(\"cache-put\", qk));\n-        return (o == null || o.isTimedOut()) ? null : o;\n-    }\n-\n-    public QueryResult remove(QueryKey key) {\n-        QueryResult o = removeInternal(key);\n-        if (o != null && o.isTimedOut())\n-            o = null;\n-        if (log.isTraceEnabled()) {\n-            if (o == null)\n-                log.trace(s_loc.get(\"cache-remove-miss\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-remove-hit\", key));\n-        }\n-        return o;\n-    }\n-\n-    public boolean pin(QueryKey key) {\n-        boolean bool = pinInternal(key);\n-        if (log.isTraceEnabled()) {\n-            if (bool)\n-                log.trace(s_loc.get(\"cache-pin-hit\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-pin-miss\", key));\n-        }\n-        return bool;\n-    }\n-\n-    public boolean unpin(QueryKey key) {\n-        boolean bool = unpinInternal(key);\n-        if (log.isTraceEnabled()) {\n-            if (bool)\n-                log.trace(s_loc.get(\"cache-unpin-hit\", key));\n-            else\n-                log.trace(s_loc.get(\"cache-unpin-miss\", key));\n-        }\n-        return bool;\n-    }\n-\n-    public void clear() {\n-        clearInternal();\n-        if (log.isTraceEnabled())\n-            log.trace(s_loc.get(\"cache-clear\", \"<query-cache>\"));\n-    }\n-\n-    public void close() {\n-        close(true);\n-    }\n-\n-    protected void close(boolean clear) {\n-        if (!_closed) {\n-            if (clear)\n-                clearInternal();\n-            _closed = true;\n-        }\n-    }\n-\n-    public boolean isClosed() {\n-        return _closed;\n-    }\n-\n-    public void addTypesChangedListener(TypesChangedListener listen) {\n-        addListener(listen);\n-    }\n-\n-    public boolean removeTypesChangedListener(TypesChangedListener listen) {\n-        return removeListener(listen);\n-    }\n-\n-    /**\n-     * This method is part of the {@link RemoteCommitListener} interface. If\n-     * your cache subclass relies on OpenJPA for clustering support, make it\n-     * implement <code>RemoteCommitListener</code>. This method will take\n-     * care of invalidating entries from remote commits, by delegating to\n-     * {@link #onTypesChanged}.\n-     */\n-    public void afterCommit(RemoteCommitEvent event) {\n-        if (_closed)\n-            return;\n-\n-        // drop all committed classes\n-        Set classes = Caches.addTypesByName(conf,\n-            event.getPersistedTypeNames(), null);\n-        if (event.getPayloadType() == RemoteCommitEvent.PAYLOAD_EXTENTS) {\n-            classes = Caches.addTypesByName(conf, event.getUpdatedTypeNames(),\n-                classes);\n-            classes = Caches.addTypesByName(conf, event.getDeletedTypeNames(),\n-                classes);\n-        } else {\n-            classes = addTypes(event.getUpdatedObjectIds(), classes);\n-            classes = addTypes(event.getDeletedObjectIds(), classes);\n-        }\n-        if (classes != null)\n-            onTypesChanged(new TypesChangedEvent(this, classes));\n-    }\n-\n-    /**\n-     * Build up a set of classes for the given oids.\n-     */\n-    private Set addTypes(Collection oids, Set classes) {\n-        if (oids.isEmpty())\n-            return classes;\n-        if (classes == null)\n-            classes = new HashSet();\n-\n-        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\n-        ClassMetaData meta;\n-        Object oid;\n-        for (Iterator itr = oids.iterator(); itr.hasNext();) {\n-            oid = itr.next();\n-            if (oid instanceof Id)\n-                classes.add(((Id) oid).getType());\n-            else {\n-                // ok if no metadata for oid; that just means the pc type\n-                // probably hasn't been loaded into this JVM yet, and therefore\n-                // there's no chance that it's in the cache anyway\n-                meta = repos.getMetaData(oid, null, false);\n-                if (meta != null)\n-                    classes.add(meta.getDescribedType());\n-            }\n-        }\n-        return classes;\n-    }\n-\n-    /**\n-     * Return a threadsafe view of the keys in this cache. This collection\n-     * must be iterable without risk of concurrent modification exceptions.\n-     * It does not have to implement contains() efficiently or use set\n-     * semantics.\n-     */\n-    protected abstract Collection keySet();\n-\n-    /**\n-     * Return the list for the given key.\n-     */\n-    protected abstract QueryResult getInternal(QueryKey qk);\n-\n-    /**\n-     * Add the given result to the cache, returning the old result under the\n-     * given key.\n-     */\n-    protected abstract QueryResult putInternal(QueryKey qk, QueryResult oids);\n-\n-    /**\n-     * Remove the result under the given key from the cache.\n-     */\n-    protected abstract QueryResult removeInternal(QueryKey qk);\n-\n-    /**\n-     * Remove all results under the given keys from the cache.\n-     */\n-    protected void removeAllInternal(Collection qks) {\n-        for (Iterator iter = qks.iterator(); iter.hasNext();)\n-            removeInternal((QueryKey) iter.next());\n-    }\n-\n-    /**\n-     * Clear the cache.\n-     */\n-    protected abstract void clearInternal();\n-\n-    /**\n-     * Pin an object to the cache.\n-     */\n-    protected abstract boolean pinInternal(QueryKey qk);\n-\n-    /**\n-     * Unpin an object from the cache.\n-     */\n-    protected abstract boolean unpinInternal(QueryKey qk);\n-\n-    // ---------- Configurable implementation ----------\n-\n-    public void setConfiguration(Configuration conf) {\n-        this.conf = (OpenJPAConfiguration) conf;\n-        this.log = conf.getLog(OpenJPAConfiguration.LOG_DATACACHE);\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-    }\n-\n-    // ---------- AbstractEventManager implementation ----------\n-\n-    protected void fireEvent(Object event, Object listener) {\n-        TypesChangedListener listen = (TypesChangedListener) listener;\n-        TypesChangedEvent ev = (TypesChangedEvent) event;\n-        try {\n-            listen.onTypesChanged(ev);\n-        } catch (Exception e) {\n-            if (log.isWarnEnabled())\n-                log.warn(s_loc.get(\"exp-listener-ex\"), e);\n-        }\n-    }\n-\n-    /**\n-     * Individual query results will be registered as types changed\n-     * listeners. We want such query results to be gc'd once\n-     * the only reference is held by the list of expiration listeners.\n-     */\n-    protected Collection newListenerCollection() {\n-        return new ConcurrentReferenceHashSet (ConcurrentReferenceHashSet.WEAK);\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.datacache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.event.RemoteCommitEvent;\r\n+import org.apache.openjpa.event.RemoteCommitListener;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+/**\r\n+ * Abstract {@link QueryCache} implementation that provides various\r\n+ * statistics, logging, and timeout functionality common across cache\r\n+ * implementations.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class AbstractQueryCache\r\n+    extends AbstractConcurrentEventManager \r\n+    implements QueryCache, Configurable {\r\n+\r\n+    private static final Localizer s_loc =\r\n+        Localizer.forPackage(AbstractQueryCache.class);\r\n+\r\n+    /**\r\n+     * The configuration set by the system.\r\n+     */\r\n+    protected OpenJPAConfiguration conf;\r\n+\r\n+    /**\r\n+     * The log to use.\r\n+     */\r\n+    protected Log log;\r\n+\r\n+    private boolean _closed = false;\r\n+\r\n+    public void initialize(DataCacheManager manager) {\r\n+    }\r\n+\r\n+    public void onTypesChanged(TypesChangedEvent ev) {\r\n+        writeLock();\r\n+        Collection keys = null;\r\n+        try {\r\n+            if (hasListeners())\r\n+                fireEvent(ev);\r\n+            keys = keySet();\r\n+        } finally {\r\n+            writeUnlock();\r\n+        }\r\n+\r\n+        QueryKey qk;\r\n+        List removes = null;\r\n+        for (Iterator iter = keys.iterator(); iter.hasNext();) {\r\n+            qk = (QueryKey) iter.next();\r\n+            if (qk.changeInvalidatesQuery(ev.getTypes())) {\r\n+                if (removes == null)\r\n+                    removes = new ArrayList();\r\n+                removes.add(qk);\r\n+            }\r\n+        }\r\n+        if (removes != null)\r\n+            removeAllInternal(removes);\r\n+    }\r\n+\r\n+    public QueryResult get(QueryKey key) {\r\n+        QueryResult o = getInternal(key);\r\n+        if (o != null && o.isTimedOut()) {\r\n+            o = null;\r\n+            removeInternal(key);\r\n+            if (log.isTraceEnabled())\r\n+                log.trace(s_loc.get(\"cache-timeout\", key));\r\n+        }\r\n+\r\n+        if (log.isTraceEnabled()) {\r\n+            if (o == null)\r\n+                log.trace(s_loc.get(\"cache-miss\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-hit\", key));\r\n+        }\r\n+        return o;\r\n+    }\r\n+\r\n+    public QueryResult put(QueryKey qk, QueryResult oids) {\r\n+        QueryResult o = putInternal(qk, oids);\r\n+        if (log.isTraceEnabled())\r\n+            log.trace(s_loc.get(\"cache-put\", qk));\r\n+        return (o == null || o.isTimedOut()) ? null : o;\r\n+    }\r\n+\r\n+    public QueryResult remove(QueryKey key) {\r\n+        QueryResult o = removeInternal(key);\r\n+        if (o != null && o.isTimedOut())\r\n+            o = null;\r\n+        if (log.isTraceEnabled()) {\r\n+            if (o == null)\r\n+                log.trace(s_loc.get(\"cache-remove-miss\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-remove-hit\", key));\r\n+        }\r\n+        return o;\r\n+    }\r\n+\r\n+    public boolean pin(QueryKey key) {\r\n+        boolean bool = pinInternal(key);\r\n+        if (log.isTraceEnabled()) {\r\n+            if (bool)\r\n+                log.trace(s_loc.get(\"cache-pin-hit\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-pin-miss\", key));\r\n+        }\r\n+        return bool;\r\n+    }\r\n+\r\n+    public boolean unpin(QueryKey key) {\r\n+        boolean bool = unpinInternal(key);\r\n+        if (log.isTraceEnabled()) {\r\n+            if (bool)\r\n+                log.trace(s_loc.get(\"cache-unpin-hit\", key));\r\n+            else\r\n+                log.trace(s_loc.get(\"cache-unpin-miss\", key));\r\n+        }\r\n+        return bool;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        clearInternal();\r\n+        if (log.isTraceEnabled())\r\n+            log.trace(s_loc.get(\"cache-clear\", \"<query-cache>\"));\r\n+    }\r\n+\r\n+    public void close() {\r\n+        close(true);\r\n+    }\r\n+\r\n+    protected void close(boolean clear) {\r\n+        if (!_closed) {\r\n+            if (clear)\r\n+                clearInternal();\r\n+            _closed = true;\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isClosed() {\r\n+        return _closed;\r\n+    }\r\n+\r\n+    public void addTypesChangedListener(TypesChangedListener listen) {\r\n+        addListener(listen);\r\n+    }\r\n+\r\n+    public boolean removeTypesChangedListener(TypesChangedListener listen) {\r\n+        return removeListener(listen);\r\n+    }\r\n+\r\n+    /**\r\n+     * This method is part of the {@link RemoteCommitListener} interface. If\r\n+     * your cache subclass relies on OpenJPA for clustering support, make it\r\n+     * implement <code>RemoteCommitListener</code>. This method will take\r\n+     * care of invalidating entries from remote commits, by delegating to\r\n+     * {@link #onTypesChanged}.\r\n+     */\r\n+    public void afterCommit(RemoteCommitEvent event) {\r\n+        if (_closed)\r\n+            return;\r\n+\r\n+        // drop all committed classes\r\n+        Set classes = Caches.addTypesByName(conf,\r\n+            event.getPersistedTypeNames(), null);\r\n+        if (event.getPayloadType() == RemoteCommitEvent.PAYLOAD_EXTENTS) {\r\n+            classes = Caches.addTypesByName(conf, event.getUpdatedTypeNames(),\r\n+                classes);\r\n+            classes = Caches.addTypesByName(conf, event.getDeletedTypeNames(),\r\n+                classes);\r\n+        } else {\r\n+            classes = addTypes(event.getUpdatedObjectIds(), classes);\r\n+            classes = addTypes(event.getDeletedObjectIds(), classes);\r\n+        }\r\n+        if (classes != null)\r\n+            onTypesChanged(new TypesChangedEvent(this, classes));\r\n+    }\r\n+\r\n+    /**\r\n+     * Build up a set of classes for the given oids.\r\n+     */\r\n+    private Set addTypes(Collection oids, Set classes) {\r\n+        if (oids.isEmpty())\r\n+            return classes;\r\n+        if (classes == null)\r\n+            classes = new HashSet();\r\n+\r\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\r\n+        ClassMetaData meta;\r\n+        Object oid;\r\n+        for (Iterator itr = oids.iterator(); itr.hasNext();) {\r\n+            oid = itr.next();\r\n+            if (oid instanceof Id)\r\n+                classes.add(((Id) oid).getType());\r\n+            else {\r\n+                // ok if no metadata for oid; that just means the pc type\r\n+                // probably hasn't been loaded into this JVM yet, and therefore\r\n+                // there's no chance that it's in the cache anyway\r\n+                meta = repos.getMetaData(oid, null, false);\r\n+                if (meta != null)\r\n+                    classes.add(meta.getDescribedType());\r\n+            }\r\n+        }\r\n+        return classes;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a threadsafe view of the keys in this cache. This collection\r\n+     * must be iterable without risk of concurrent modification exceptions.\r\n+     * It does not have to implement contains() efficiently or use set\r\n+     * semantics.\r\n+     */\r\n+    protected abstract Collection keySet();\r\n+\r\n+    /**\r\n+     * Return the list for the given key.\r\n+     */\r\n+    protected abstract QueryResult getInternal(QueryKey qk);\r\n+\r\n+    /**\r\n+     * Add the given result to the cache, returning the old result under the\r\n+     * given key.\r\n+     */\r\n+    protected abstract QueryResult putInternal(QueryKey qk, QueryResult oids);\r\n+\r\n+    /**\r\n+     * Remove the result under the given key from the cache.\r\n+     */\r\n+    protected abstract QueryResult removeInternal(QueryKey qk);\r\n+\r\n+    /**\r\n+     * Remove all results under the given keys from the cache.\r\n+     */\r\n+    protected void removeAllInternal(Collection qks) {\r\n+        for (Iterator iter = qks.iterator(); iter.hasNext();)\r\n+            removeInternal((QueryKey) iter.next());\r\n+    }\r\n+\r\n+    /**\r\n+     * Clear the cache.\r\n+     */\r\n+    protected abstract void clearInternal();\r\n+\r\n+    /**\r\n+     * Pin an object to the cache.\r\n+     */\r\n+    protected abstract boolean pinInternal(QueryKey qk);\r\n+\r\n+    /**\r\n+     * Unpin an object from the cache.\r\n+     */\r\n+    protected abstract boolean unpinInternal(QueryKey qk);\r\n+\r\n+    // ---------- Configurable implementation ----------\r\n+\r\n+    public void setConfiguration(Configuration conf) {\r\n+        this.conf = (OpenJPAConfiguration) conf;\r\n+        this.log = conf.getLog(OpenJPAConfiguration.LOG_DATACACHE);\r\n+    }\r\n+\r\n+    public void startConfiguration() {\r\n+    }\r\n+\r\n+    public void endConfiguration() {\r\n+    }\r\n+\r\n+    // ---------- AbstractEventManager implementation ----------\r\n+\r\n+    protected void fireEvent(Object event, Object listener) {\r\n+        TypesChangedListener listen = (TypesChangedListener) listener;\r\n+        TypesChangedEvent ev = (TypesChangedEvent) event;\r\n+        try {\r\n+            listen.onTypesChanged(ev);\r\n+        } catch (Exception e) {\r\n+            if (log.isWarnEnabled())\r\n+                log.warn(s_loc.get(\"exp-listener-ex\"), e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Individual query results will be registered as types changed\r\n+     * listeners. We want such query results to be gc'd once\r\n+     * the only reference is held by the list of expiration listeners.\r\n+     */\r\n+    protected Collection newListenerCollection() {\r\n+        return new ConcurrentReferenceHashSet (ConcurrentReferenceHashSet.WEAK);\r\n+\t}\r\n+}\r"},{"sha":"130e97fa41df7d209e6c9feb67c3cbc906351eea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","status":"modified","additions":63,"deletions":2,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -20,10 +20,11 @@\n \n import java.util.BitSet;\n \n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.AbstractPCData;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCData;\n import org.apache.openjpa.kernel.PCDataImpl;\n+import org.apache.openjpa.kernel.PCState;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -119,9 +120,69 @@ public synchronized void store(OpenJPAStateManager sm, BitSet fields) {\n         super.store(sm, fields);\n     }\n \n+    /**\n+     * Store field-level information from the given state manager.\n+     * Special process of checking if the cached collection data is out of order.\n+     */\n+    protected void storeField(OpenJPAStateManager sm, FieldMetaData fmd) {\n+        if (fmd.getManagement() != fmd.MANAGE_PERSISTENT)\n+            return;\n+        int index = fmd.getIndex();\n+\n+        // if the field is a collection and has \"order by\" set, don't cache\n+        // it if this store is coming from a create or update (i.e., only\n+        // enlist in cache if this is coming from a database read).\n+        if (fmd.getOrders().length > 0) {\n+            if (sm.getPCState() == PCState.PNEW)\n+                return;\n+            if (sm.getPCState() == PCState.PDIRTY) {\n+                clearData(index);\n+                return;\n+            }\n+        }\n+\n+        super.storeField(sm, fmd);\n+\n+        // If this field is used in \"order by\", we need to invalidate cache\n+        // for the collection that refer to this field.\n+        if ((sm.getPCState() == PCState.PDIRTY) && fmd.isUsedInOrderBy()) {\n+            clearInverseRelationCache(sm, fmd);\n+        }\n+    }\n+\n+    /**\n+     * Check if this field is in use of \"order by\" by other field collections\n+     * in inverse relation. If it is, clear the other field cache because it\n+     * could be out of order.\n+     */\n+    protected void clearInverseRelationCache(OpenJPAStateManager sm,\n+        FieldMetaData fmd) {\n+        ClassMetaData cmd = sm.getMetaData();\n+        FieldMetaData[] fields = cmd.getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            FieldMetaData[] inverses = fields[i].getInverseMetaDatas();\n+            if (inverses.length == 0)\n+                continue;\n+            for (int j = 0; j < inverses.length; j++) {\n+                if (inverses[j].getOrderDeclaration()\n+                    .indexOf(fmd.getName()) != -1) {\n+                    DataCache cache = sm.getMetaData().getDataCache();\n+                    Object oid = sm.getContext().getObjectId(sm.fetch(i));\n+                    DataCachePCData data = cache == null ? null\n+                        : cache.get(oid);\n+                    if ((data != null) &&\n+                        (data instanceof DataCachePCDataImpl)) {\n+                        ((DataCachePCDataImpl) data)\n+                            .clearData(inverses[j].getIndex());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     protected Object toData(FieldMetaData fmd, Object val, StoreContext ctx) {\n         // avoid caching large result set fields\n-        if (fmd.isLRS())\n+        if (fmd.isLRS() || fmd.isStream())\n             return NULL;\n         return super.toData(fmd, val, ctx);\n     }"},{"sha":"6224fe80c510fc51211971195b338796e746c23d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":248,"deletions":245,"changes":493,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,245 +1,248 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.datacache;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.StringTokenizer;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n-import org.apache.openjpa.util.InvalidStateException;\n-import org.apache.openjpa.util.UserException;\n-import serp.util.Strings;\n-\n-/**\n- * Cron-style cache eviction. Understands schedules based on cron format:\n- * <code>minute hour mday month wday</code>\n- * For example:\n- * <code>15,30 6,19 2,10 1 2 </code>\n- * Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n- * of January when its a Monday.\n- *\n- * @author Steve Kim\n- */\n-public class DataCacheScheduler\n-    implements Runnable {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (DataCacheScheduler.class);\n-\n-    private Map _caches = new ConcurrentHashMap();\n-    private boolean _stop = false;\n-    private int _interval = 2;\n-    private Log _log;\n-    private Thread _thread;\n-\n-    public DataCacheScheduler(OpenJPAConfiguration conf) {\n-        _log = conf.getLogFactory().getLog(OpenJPAConfiguration.LOG_DATACACHE);\n-    }\n-\n-    /**\n-     * The interval time in minutes between cache checks. Defaults to 2.\n-     */\n-    public int getInterval() {\n-        return _interval;\n-    }\n-\n-    /**\n-     * The interval time in minutes between cache checks. Defaults to 2.\n-     */\n-    public void setInterval(int interval) {\n-        _interval = interval;\n-    }\n-\n-    /**\n-     * Stop the associated thread if there and stop the current runnable.\n-     */\n-    public synchronized void stop() {\n-        _stop = true;\n-    }\n-\n-    private boolean isStopped() {\n-        return _stop;\n-    }\n-\n-    /**\n-     * Schedule the given cache for eviction. Starts the scheduling thread\n-     * if not started.\n-     */\n-    public synchronized void scheduleEviction(DataCache cache, String times) {\n-        if (times == null)\n-            return;\n-\n-        Schedule schedule = new Schedule(times);\n-        _caches.put(cache, schedule);\n-        _stop = false;\n-        if (_thread == null) {\n-            _thread = new Thread(this, _loc.get(\"scheduler-name\").getMessage());\n-            _thread.setDaemon(true);\n-            _thread.start();\n-            if (_log.isTraceEnabled())\n-                _log.trace(_loc.get(\"scheduler-start\", _thread.getName()));\n-        }\n-    }\n-\n-    /**\n-     * Remove the given cache from scheduling.\n-     */\n-    public synchronized void removeFromSchedule(DataCache cache) {\n-        _caches.remove(cache);\n-        if (_caches.size() == 0)\n-            stop();\n-    }\n-\n-    public void run() {\n-        if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"scheduler-interval\", _interval + \"\"));\n-\n-        Date lastRun = new Date();\n-        DateFormat fom = new SimpleDateFormat(\"E HH:mm:ss\");\n-        while (!isStopped()) {\n-            try {\n-                Thread.sleep(_interval * 60 * 1000);\n-\n-                Date now = new Date();\n-                DataCache cache;\n-                Schedule schedule;\n-                Map.Entry entry;\n-                for (Iterator i = _caches.entrySet().iterator(); i.hasNext();) {\n-                    entry = (Map.Entry) i.next();\n-                    cache = (DataCache) entry.getKey();\n-                    schedule = (Schedule) entry.getValue();\n-                    if (schedule.matches(lastRun, now)) {\n-                        if (_log.isTraceEnabled())\n-                            _log.trace(_loc.get(\"scheduler-clear\",\n-                                cache.getName(), fom.format(now)));\n-                        evict(cache);\n-                    }\n-                }\n-                lastRun = now;\n-            } catch (Exception e) {\n-                throw new InvalidStateException(_loc.get(\"scheduler-fail\"), e).\n-                    setFatal(true);\n-            }\n-        }\n-\n-        _log.info(_loc.get(\"scheduler-stop\"));\n-        synchronized (this) {\n-            if (isStopped())\n-                _thread = null; // be sure to deref the thread so it can restart\n-        }\n-    }\n-\n-    protected void evict(DataCache cache) {\n-        cache.clear();\n-    }\n-\n-    /**\n-     * Simple class which represents the given time schedule.\n-     */\n-    private static class Schedule {\n-\n-        static final int[] WILDCARD = new int[0];\n-        static final int[] UNITS = {\n-            Calendar.MONTH,\n-            Calendar.DAY_OF_MONTH,\n-            Calendar.DAY_OF_WEEK,\n-            Calendar.HOUR_OF_DAY,\n-            Calendar.MINUTE\n-        };\n-        final int[] month;\n-        final int[] dayOfMonth;\n-        final int[] dayOfWeek;\n-        final int[] hour;\n-        final int[] min;\n-\n-        public Schedule(String date) {\n-            StringTokenizer token = new StringTokenizer(date, \" \\t\");\n-            if (token.countTokens() != 5)\n-                throw new UserException(_loc.get(\"bad-count\", date)).\n-                    setFatal(true);\n-            try {\n-                min = parse(token.nextToken(), 0, 60);\n-                hour = parse(token.nextToken(), 0, 24);\n-                dayOfMonth = parse(token.nextToken(), 1, 31);\n-                month = parse(token.nextToken(), 1, 13);\n-                dayOfWeek = parse(token.nextToken(), 1, 8);\n-            } catch (Throwable t) {\n-                throw new UserException(_loc.get(\"bad-schedule\", date), t).\n-                    setFatal(true);\n-            }\n-        }\n-\n-        private int[] parse(String token, int min, int max) {\n-            if (\"*\".equals(token.trim()))\n-                return WILDCARD;\n-            String[] tokens = Strings.split(token, \",\", 0);\n-            int [] times = new int[tokens.length];\n-            for (int i = 0; i < tokens.length; i++) {\n-                try {\n-                    times[i] = Integer.parseInt(tokens[i]);\n-                } catch (Throwable t) {\n-                    throw new UserException(_loc.get(\"not-number\", token)).\n-                        setFatal(true);\n-                }\n-                if (times[i] < min || times[i] >= max)\n-                    throw new UserException(_loc.get(\"not-range\", token,\n-                        String.valueOf(min), String.valueOf(max))).\n-                        setFatal(true);\n-            }\n-            return times;\n-        }\n-\n-        boolean matches(Date last, Date now) {\n-            Calendar time = Calendar.getInstance();\n-            time.setTime(now);\n-            time.set(Calendar.SECOND, 0);\n-            time.set(Calendar.MILLISECOND, 0);\n-\n-            int[][] all =\n-                new int[][]{ month, dayOfMonth, dayOfWeek, hour, min };\n-            return matches(last, now, time, all, 0);\n-        }\n-\n-        private boolean matches(Date last, Date now, Calendar time,\n-            int[][] times, int depth) {\n-            if (depth == UNITS.length) {\n-                Date compare = time.getTime();\n-                return compare.compareTo(last) >= 0 &&\n-                    compare.compareTo(now) < 0;\n-            }\n-\n-            if (times[depth] != WILDCARD) {\n-                for (int i = 0; i < times[depth].length; i++) {\n-                    time.set(UNITS[depth], times[depth][i]);\n-                    if (matches(last, now, time, times, depth + 1))\n-                        return true;\n-                }\n-            }\n-            return matches(last, now, time, times, depth + 1);\n-\t\t}\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.datacache;\r\n+\r\n+import java.security.AccessController;\r\n+import java.text.DateFormat;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.StringTokenizer;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.util.InvalidStateException;\r\n+import org.apache.openjpa.util.UserException;\r\n+import serp.util.Strings;\r\n+\r\n+/**\r\n+ * Cron-style cache eviction. Understands schedules based on cron format:\r\n+ * <code>minute hour mday month wday</code>\r\n+ * For example:\r\n+ * <code>15,30 6,19 2,10 1 2 </code>\r\n+ * Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\r\n+ * of January when its a Monday.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class DataCacheScheduler\r\n+    implements Runnable {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (DataCacheScheduler.class);\r\n+\r\n+    private Map _caches = new ConcurrentHashMap();\r\n+    private boolean _stop = false;\r\n+    private int _interval = 2;\r\n+    private Log _log;\r\n+    private Thread _thread;\r\n+\r\n+    public DataCacheScheduler(OpenJPAConfiguration conf) {\r\n+        _log = conf.getLogFactory().getLog(OpenJPAConfiguration.LOG_DATACACHE);\r\n+    }\r\n+\r\n+    /**\r\n+     * The interval time in minutes between cache checks. Defaults to 2.\r\n+     */\r\n+    public int getInterval() {\r\n+        return _interval;\r\n+    }\r\n+\r\n+    /**\r\n+     * The interval time in minutes between cache checks. Defaults to 2.\r\n+     */\r\n+    public void setInterval(int interval) {\r\n+        _interval = interval;\r\n+    }\r\n+\r\n+    /**\r\n+     * Stop the associated thread if there and stop the current runnable.\r\n+     */\r\n+    public synchronized void stop() {\r\n+        _stop = true;\r\n+    }\r\n+\r\n+    private boolean isStopped() {\r\n+        return _stop;\r\n+    }\r\n+\r\n+    /**\r\n+     * Schedule the given cache for eviction. Starts the scheduling thread\r\n+     * if not started.\r\n+     */\r\n+    public synchronized void scheduleEviction(DataCache cache, String times) {\r\n+        if (times == null)\r\n+            return;\r\n+\r\n+        Schedule schedule = new Schedule(times);\r\n+        _caches.put(cache, schedule);\r\n+        _stop = false;\r\n+        if (_thread == null) {\r\n+            _thread = (Thread) AccessController.doPrivileged(J2DoPrivHelper\r\n+                .newDaemonThreadAction(this, _loc.get(\"scheduler-name\")\r\n+                    .getMessage()));\r\n+            _thread.start();\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(_loc.get(\"scheduler-start\", _thread.getName()));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the given cache from scheduling.\r\n+     */\r\n+    public synchronized void removeFromSchedule(DataCache cache) {\r\n+        _caches.remove(cache);\r\n+        if (_caches.size() == 0)\r\n+            stop();\r\n+    }\r\n+\r\n+    public void run() {\r\n+        if (_log.isTraceEnabled())\r\n+            _log.trace(_loc.get(\"scheduler-interval\", _interval + \"\"));\r\n+\r\n+        Date lastRun = new Date();\r\n+        DateFormat fom = new SimpleDateFormat(\"E HH:mm:ss\");\r\n+        while (!isStopped()) {\r\n+            try {\r\n+                Thread.sleep(_interval * 60 * 1000);\r\n+\r\n+                Date now = new Date();\r\n+                DataCache cache;\r\n+                Schedule schedule;\r\n+                Map.Entry entry;\r\n+                for (Iterator i = _caches.entrySet().iterator(); i.hasNext();) {\r\n+                    entry = (Map.Entry) i.next();\r\n+                    cache = (DataCache) entry.getKey();\r\n+                    schedule = (Schedule) entry.getValue();\r\n+                    if (schedule.matches(lastRun, now)) {\r\n+                        if (_log.isTraceEnabled())\r\n+                            _log.trace(_loc.get(\"scheduler-clear\",\r\n+                                cache.getName(), fom.format(now)));\r\n+                        evict(cache);\r\n+                    }\r\n+                }\r\n+                lastRun = now;\r\n+            } catch (Exception e) {\r\n+                throw new InvalidStateException(_loc.get(\"scheduler-fail\"), e).\r\n+                    setFatal(true);\r\n+            }\r\n+        }\r\n+\r\n+        _log.info(_loc.get(\"scheduler-stop\"));\r\n+        synchronized (this) {\r\n+            if (isStopped())\r\n+                _thread = null; // be sure to deref the thread so it can restart\r\n+        }\r\n+    }\r\n+\r\n+    protected void evict(DataCache cache) {\r\n+        cache.clear();\r\n+    }\r\n+\r\n+    /**\r\n+     * Simple class which represents the given time schedule.\r\n+     */\r\n+    private static class Schedule {\r\n+\r\n+        static final int[] WILDCARD = new int[0];\r\n+        static final int[] UNITS = {\r\n+            Calendar.MONTH,\r\n+            Calendar.DAY_OF_MONTH,\r\n+            Calendar.DAY_OF_WEEK,\r\n+            Calendar.HOUR_OF_DAY,\r\n+            Calendar.MINUTE\r\n+        };\r\n+        final int[] month;\r\n+        final int[] dayOfMonth;\r\n+        final int[] dayOfWeek;\r\n+        final int[] hour;\r\n+        final int[] min;\r\n+\r\n+        public Schedule(String date) {\r\n+            StringTokenizer token = new StringTokenizer(date, \" \\t\");\r\n+            if (token.countTokens() != 5)\r\n+                throw new UserException(_loc.get(\"bad-count\", date)).\r\n+                    setFatal(true);\r\n+            try {\r\n+                min = parse(token.nextToken(), 0, 60);\r\n+                hour = parse(token.nextToken(), 0, 24);\r\n+                dayOfMonth = parse(token.nextToken(), 1, 31);\r\n+                month = parse(token.nextToken(), 1, 13);\r\n+                dayOfWeek = parse(token.nextToken(), 1, 8);\r\n+            } catch (Throwable t) {\r\n+                throw new UserException(_loc.get(\"bad-schedule\", date), t).\r\n+                    setFatal(true);\r\n+            }\r\n+        }\r\n+\r\n+        private int[] parse(String token, int min, int max) {\r\n+            if (\"*\".equals(token.trim()))\r\n+                return WILDCARD;\r\n+            String[] tokens = Strings.split(token, \",\", 0);\r\n+            int [] times = new int[tokens.length];\r\n+            for (int i = 0; i < tokens.length; i++) {\r\n+                try {\r\n+                    times[i] = Integer.parseInt(tokens[i]);\r\n+                } catch (Throwable t) {\r\n+                    throw new UserException(_loc.get(\"not-number\", token)).\r\n+                        setFatal(true);\r\n+                }\r\n+                if (times[i] < min || times[i] >= max)\r\n+                    throw new UserException(_loc.get(\"not-range\", token,\r\n+                        String.valueOf(min), String.valueOf(max))).\r\n+                        setFatal(true);\r\n+            }\r\n+            return times;\r\n+        }\r\n+\r\n+        boolean matches(Date last, Date now) {\r\n+            Calendar time = Calendar.getInstance();\r\n+            time.setTime(now);\r\n+            time.set(Calendar.SECOND, 0);\r\n+            time.set(Calendar.MILLISECOND, 0);\r\n+\r\n+            int[][] all =\r\n+                new int[][]{ month, dayOfMonth, dayOfWeek, hour, min };\r\n+            return matches(last, now, time, all, 0);\r\n+        }\r\n+\r\n+        private boolean matches(Date last, Date now, Calendar time,\r\n+            int[][] times, int depth) {\r\n+            if (depth == UNITS.length) {\r\n+                Date compare = time.getTime();\r\n+                return compare.compareTo(last) >= 0 &&\r\n+                    compare.compareTo(now) < 0;\r\n+            }\r\n+\r\n+            if (times[depth] != WILDCARD) {\r\n+                for (int i = 0; i < times[depth].length; i++) {\r\n+                    time.set(UNITS[depth], times[depth][i]);\r\n+                    if (matches(last, now, time, times, depth + 1))\r\n+                        return true;\r\n+                }\r\n+            }\r\n+            return matches(last, now, time, times, depth + 1);\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"c3c7dbe1230846327e72482c51c371138ca91622","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -26,8 +26,8 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n import org.apache.openjpa.enhance.PCDataGenerator;\n import org.apache.openjpa.kernel.DelegatingStoreManager;\n@@ -260,16 +260,26 @@ private void updateCaches() {\n      */\n     private void transformToVersionSafePCDatas(DataCache cache,\n         List holders) {\n-        PCDataHolder holder;\n-        DataCachePCData oldpc;\n-        for (ListIterator iter = holders.listIterator(); iter.hasNext();) {\n-            holder = (PCDataHolder) iter.next();\n-            oldpc = cache.get(holder.sm.getObjectId());\n+\n+        Map<Object,Integer> ids = new HashMap<Object,Integer>(holders.size());\n+        // this list could be removed if DataCache.getAll() took a Collection\n+        List idList = new ArrayList(holders.size());\n+        int i = 0;\n+        for (PCDataHolder holder : (List<PCDataHolder>) holders) {\n+            ids.put(holder.sm.getObjectId(), i++);\n+            idList.add(holder.sm.getObjectId());\n+        }\n+\n+        Map<Object,DataCachePCData> pcdatas = cache.getAll(idList);\n+        for (Entry<Object,DataCachePCData> entry : pcdatas.entrySet()) {\n+            Integer index = ids.get(entry.getKey());\n+            DataCachePCData oldpc = entry.getValue();\n+            PCDataHolder holder = (PCDataHolder) holders.get(index);\n             if (oldpc != null && compareVersion(holder.sm,\n                 holder.sm.getVersion(), oldpc.getVersion()) == VERSION_EARLIER)\n-                iter.remove();\n+                holders.remove(index);\n             else\n-                iter.set(holder.pcdata);\n+                holders.set(index, holder.pcdata);\n         }\n     }\n \n@@ -380,6 +390,9 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             return false;\n         if (!_ctx.getPopulateDataCache())\n             return true;\n+        // Do not load changes into cache if the instance has been flushed\n+        if (sm.isFlushed())\n+            return true;\n \n         // make sure that we're not trying to cache an old version\n         cache.writeLock();"},{"sha":"da65baa92cfdd6288c061eefdfdf33f746c3a05d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -109,7 +109,7 @@ private List checkCache(QueryKey qk) {\n         if (qk == null)\n             return null;\n         FetchConfiguration fetch = getContext().getFetchConfiguration();\n-        if (!fetch.getEnlistInQueryCache())\n+        if (!fetch.getQueryCacheEnabled())\n             return null;\n         if (fetch.getReadLockLevel() > LockLevels.LOCK_NONE)\n             return null;\n@@ -128,6 +128,9 @@ private List checkCache(QueryKey qk) {\n             // using it because of the individual by-oid lookups\n             ClassMetaData meta = _repos.getMetaData(getContext().\n                 getCandidateType(), _sctx.getClassLoader(), true);\n+            if (meta.getDataCache() == null)\n+                return null;\n+\n             BitSet idxs = meta.getDataCache().containsAll(res);\n \n             // eventually we should optimize this to figure out how many objects\n@@ -333,9 +336,11 @@ private void clearAccessPath(StoreQuery q) {\n                 (q.getContext(), classes));\n \n             // evict from the data cache\n-            for (int i = 0; i < cmd.length; i++)\n-                cmd[i].getDataCache().removeAll(\n-                    cmd[i].getDescribedType(), true);\n+            for (int i = 0; i < cmd.length; i++) {\n+                if (cmd[i].getDataCache() != null)\n+                    cmd[i].getDataCache().removeAll(\n+                        cmd[i].getDescribedType(), true);\n+            }\n         }\n \n         public Number executeDelete(StoreQuery q, Object[] params) {"},{"sha":"74116ec4c76f7dd0813c1e1fe257e9b2357260c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -328,18 +328,14 @@ public void endConfiguration() {\n                 ctx.close();\n             }\n \n-            ClassLoader loader = _conf.getClassResolverInstance()\n-                .getClassLoader(getClass(), null);\n-\n             Class extendedJTATransaction = Class.forName(\n-                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\n-                loader);\n+                    \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\");\n+            Class synchronizationCallback = Class.forName(\n+                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\");\n \n             _registerSync = extendedJTATransaction.getMethod(\n-                \"registerSynchronizationCallbackForCurrentTran\",\n-                new Class[] { Class.forName(\n-                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\n-                    true, loader) });\n+                    \"registerSynchronizationCallbackForCurrentTran\",\n+                    new Class[] { synchronizationCallback });\n             _getGlobalId = extendedJTATransaction.\n                 getMethod(\"getGlobalId\", null);\n         } catch (Exception e) {"},{"sha":"a4e968dade96b105d9b6612e6c9603f294406d63","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -75,7 +75,7 @@\n     private static final String TOKENIZER_CUSTOM = \"Tokenizer\";\n     private static final String TOKENIZER_STD = \"StringTokenizer\";\n \n-    private static Localizer _loc = Localizer.forPackage\n+    private static final Localizer _loc = Localizer.forPackage\n         (ApplicationIdTool.class);\n \n     private final Log _log;\n@@ -1282,14 +1282,21 @@ private CodeFormat newCodeFormat() {\n     public static void main(String[] args)\n         throws IOException, ClassNotFoundException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"appid-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts)\n+                throws ClassNotFoundException, IOException {\n+                OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+                try {\n+                    return ApplicationIdTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.err.println(_loc.get(\"appid-usage\"));\n     }\n \n     /**\n@@ -1299,9 +1306,6 @@ public static void main(String[] args)\n     public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Options opts)\n         throws IOException, ClassNotFoundException {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         Flags flags = new Flags();\n         flags.ignoreErrors = opts.removeBooleanProperty\n             (\"ignoreErrors\", \"i\", flags.ignoreErrors);"},{"sha":"fa76f87bea5bec925be8ae667cfe484d765fb8f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -55,14 +55,15 @@\n     /**\r\n      * For each element in <code>classes</code>, this method will redefine\r\n      * all the element's methods such that field accesses are intercepted\r\n-     * in-line.\r\n+     * in-line. If {@link #canRedefineClasses()} returns <code>false</code>,\r\n+     * this method is a no-op.\r\n      */\r\n     public static void redefineClasses(OpenJPAConfiguration conf,\r\n         final Map<Class,byte[]> classes) {\r\n-        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n-        if (classes == null || classes.size() == 0)\r\n+        if (classes == null || classes.size() == 0 || !canRedefineClasses())\r\n             return;\r\n \r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n         Instrumentation inst = null;\r\n         ClassFileTransformer t = null;\r\n         try {\r","previous_filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ClassRedefiner.java"},{"sha":"505b5ff25e5777465e8ebc1530798393c94295d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","previous_filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java"},{"sha":"53cc3c137eb884e96b6ed48a0b9479bc522965b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"renamed","additions":94,"deletions":15,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,24 +18,30 @@\n  */\r\n package org.apache.openjpa.enhance;\r\n \r\n+import java.io.File;\r\n import java.io.IOException;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n import java.util.HashMap;\r\n+import java.util.HashSet;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.util.BytecodeWriter;\r\n import org.apache.openjpa.lib.util.JavaVersions;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.Files;\r\n+import org.apache.openjpa.lib.util.Localizer.Message;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.FieldMetaData;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.GeneratedClasses;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.util.UserException;\r\n import serp.bytecode.BCClass;\r\n@@ -78,32 +84,41 @@\n             return null;\r\n         if (classes.size() == 0)\r\n             return Collections.EMPTY_LIST;\r\n-        if (!conf.getRuntimeClassOptimization()) {\r\n+\r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n+        if (conf.getRuntimeUnenhancedClassesConstant()\r\n+            != RuntimeUnenhancedClasssesModes.SUPPORTED) {\r\n             Collection unenhanced = new ArrayList();\r\n             for (Class cls : classes)\r\n                 if (!PersistenceCapable.class.isAssignableFrom(cls))\r\n                     unenhanced.add(cls);\r\n-            if (unenhanced.size() > 0)\r\n-                throw new UserException(_loc.get(\r\n-                    \"runtime-optimization-disabled\", unenhanced));\r\n+            if (unenhanced.size() > 0) {\r\n+                Message msg = _loc.get(\"runtime-optimization-disabled\",\r\n+                    unenhanced);\r\n+                if (conf.getRuntimeUnenhancedClassesConstant()\r\n+                    == RuntimeUnenhancedClasssesModes.WARN)\r\n+                    log.warn(msg);\r\n+                else\r\n+                    throw new UserException(msg);\r\n+            }\r\n             return null;\r\n         }\r\n \r\n-        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n         boolean redefine = ClassRedefiner.canRedefineClasses();\r\n         if (redefine)\r\n-            log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r\n+            log.info(_loc.get(\"enhance-and-subclass-and-redef-start\",\r\n                 classes));\r\n         else\r\n-            log.info(_loc.get(\"enhance-and-subclass-and-redef-start\",\r\n+            log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r\n                 classes));\r\n \r\n         final Map<Class, byte[]> map = new HashMap<Class, byte[]>();\r\n         final List subs = new ArrayList(classes.size());\r\n         final List ints = new ArrayList(classes.size());\r\n+        Set<Class> unspecified = null;\r\n         for (Iterator iter = classes.iterator(); iter.hasNext(); ) {\r\n             final Class cls = (Class) iter.next();\r\n-            final PCEnhancer enhancer = new PCEnhancer(conf, cls);\r\n+            final PCEnhancer enhancer = new PCEnhancer(conf, cls); \r\n \r\n             enhancer.setBytecodeWriter(new BytecodeWriter() {\r\n                 public void write(BCClass bc) throws IOException {\r\n@@ -123,15 +138,24 @@ public void write(BCClass bc) throws IOException {\n             // reconfiguration at the end of this method.\r\n             configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n \r\n-            enhancer.run();\r\n-            try {\r\n-                enhancer.record();\r\n-            } catch (IOException e) {\r\n-                // our impl of BytecodeWriter doesn't throw IOException\r\n-                throw new InternalException(e);\r\n+            unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n+                classes, unspecified);\r\n+\r\n+            int runResult = enhancer.run();\r\n+            if (runResult == PCEnhancer.ENHANCE_PC) {\r\n+                try {\r\n+                    enhancer.record();\r\n+                } catch (IOException e) {\r\n+                    // our impl of BytecodeWriter doesn't throw IOException\r\n+                    throw new InternalException(e);\r\n+                }\r\n             }\r\n         }\r\n \r\n+        if (unspecified != null && !unspecified.isEmpty())\r\n+            throw new UserException(_loc.get(\"unspecified-unenhanced-types\",\r\n+                classes, unspecified));\r\n+\r\n         ClassRedefiner.redefineClasses(conf, map);\r\n         for (Class cls : map.keySet()) {\r\n             setIntercepting(conf, envLoader, cls);\r\n@@ -145,6 +169,41 @@ public void write(BCClass bc) throws IOException {\n         return subs;\r\n     }\r\n \r\n+    private static Set<Class> collectRelatedUnspecifiedTypes(ClassMetaData meta,\r\n+        Collection<? extends Class> classes, Set<Class> unspecified) {\r\n+        unspecified = collectUnspecifiedType(meta.getPCSuperclass(), classes,\r\n+            unspecified);\r\n+\r\n+        for (FieldMetaData fmd : meta.getFields()) {\r\n+            if (fmd.isTransient())\r\n+                continue;\r\n+            if (fmd.isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getType(), classes,\r\n+                    unspecified);\r\n+            if (fmd.getElement() != null && fmd.getElement().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getElement().getType(),\r\n+                    classes, unspecified);\r\n+            if (fmd.getKey() != null && fmd.getKey().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getKey().getType(),\r\n+                    classes, unspecified);\r\n+            if (fmd.getValue() != null && fmd.getValue().isTypePC())\r\n+                unspecified = collectUnspecifiedType(fmd.getValue().getType(),\r\n+                    classes, unspecified);\r\n+        }\r\n+        return unspecified;\r\n+    }\r\n+\r\n+    private static Set<Class> collectUnspecifiedType(Class cls,\r\n+        Collection<? extends Class> classes, Set<Class> unspecified) {\r\n+        if (cls != null && !classes.contains(cls)\r\n+            && !ImplHelper.isManagedType(null, cls)) {\r\n+            if (unspecified == null)\r\n+                unspecified = new HashSet<Class>();\r\n+            unspecified.add(cls);\r\n+        }\r\n+        return unspecified;\r\n+    }\r\n+\r\n     private static void configureMetaData(OpenJPAConfiguration conf,\r\n         ClassLoader envLoader, Class cls, boolean redefineAvailable) {\r\n         ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r\n@@ -192,10 +251,14 @@ private static void write(BCClass bc, PCEnhancer enhancer,\n             // but do set the metadata accordingly.\r\n             if (enhancer.isAlreadyRedefined())\r\n                 ints.add(bc.getType());\r\n-            else if (JavaVersions.VERSION >= 5)\r\n+            else if (JavaVersions.VERSION >= 5) {\r\n                 map.put(bc.getType(), bc.toByteArray());\r\n+                debugBytecodes(bc);\r\n+            }\r\n         } else {\r\n             if (!enhancer.isAlreadySubclassed()) {\r\n+                debugBytecodes(bc);\r\n+                \r\n                 // this is the new subclass\r\n                 ClassLoader loader = GeneratedClasses.getMostDerivedLoader(\r\n                     cls, PersistenceCapable.class);\r\n@@ -204,6 +267,22 @@ else if (JavaVersions.VERSION >= 5)\n         }\r\n     }\r\n \r\n+    private static void debugBytecodes(BCClass bc) throws IOException {\r\n+        // Write the bytecodes to disk for debugging purposes.\r\n+        if (\"true\".equals(System.getProperty(\r\n+            ManagedClassSubclasser.class.getName() + \".dumpBytecodes\")))\r\n+        {\r\n+            File tmp = new File(System.getProperty(\"java.io.tmpdir\"));\r\n+            File dir = new File(tmp, \"openjpa\");\r\n+            dir = new File(dir, \"pcsubclasses\");\r\n+            dir.mkdirs();\r\n+            dir = Files.getPackageFile(dir, bc.getPackageName(), true);\r\n+            File f = new File(dir, bc.getClassName() + \".class\");\r\n+            System.err.println(\"Writing to \" + f);\r\n+            bc.write(f);\r\n+        }\r\n+    }\r\n+\r\n     private static void setIntercepting(OpenJPAConfiguration conf,\r\n         ClassLoader envLoader, Class cls) {\r\n         ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r","previous_filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java"},{"sha":"b564a06625c319705be539b2b95998f0ae13d4d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"renamed","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -116,6 +116,18 @@ public PCClassFileTransformer(MetaDataRepository repos,\n             return null;\n \n         _transforming = true;\n+\n+        return transform0(className, redef, bytes);\n+    }\n+\n+    /**\n+     * We have to split the transform method into two methods to avoid\n+     * ClassCircularityError when executing method using pure-JIT JVMs\n+     * such as JRockit.\n+     */\n+    private byte[] transform0(String className, Class redef, byte[] bytes)\n+        throws IllegalClassFormatException {\n+\n         try {\n             Boolean enhance = needsEnhance(className, redef, bytes);\n             if (enhance != null && _log.isTraceEnabled())","previous_filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java"},{"sha":"8c189ee45efc67b140616a8e02a0d777eb65bb5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":1077,"deletions":1077,"changes":2154,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,1077 +1,1077 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.enhance;\n-\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.kernel.AbstractPCData;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.PCData;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.util.InternalException;\n-import serp.bytecode.BCClass;\n-import serp.bytecode.BCField;\n-import serp.bytecode.BCMethod;\n-import serp.bytecode.Code;\n-import serp.bytecode.Constants;\n-import serp.bytecode.ExceptionHandler;\n-import serp.bytecode.Instruction;\n-import serp.bytecode.JumpInstruction;\n-import serp.bytecode.LookupSwitchInstruction;\n-\n-/**\n- * Generates {@link PCData} instances which avoid primitve wrappers\n- * to optimize memory use and performance at the cost of slightly higher\n- * startup time.\n- *\n- * @author Steve Kim\n- * @nojavadoc\n- * @since 0.3.2\n- */\n-public class PCDataGenerator\n-    extends DynamicStorageGenerator {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (PCDataGenerator.class);\n-\n-    protected static final String POSTFIX = \"$openjpapcdata\";\n-\n-    private final Map _generated = new ConcurrentHashMap();\n-    private final OpenJPAConfiguration _conf;\n-    private final Log _log;\n-\n-    public PCDataGenerator(OpenJPAConfiguration conf) {\n-        _conf = conf;\n-        _log = _conf.getLogFactory().getLog(OpenJPAConfiguration.LOG_ENHANCE);\n-    }\n-\n-    /**\n-     * Return the configuration.\n-     */\n-    public OpenJPAConfiguration getConfiguration() {\n-        return _conf;\n-    }\n-\n-    /**\n-     * Return a {@link PCData} instance for the given oid and metadata.\n-     */\n-    public PCData generatePCData(Object oid, ClassMetaData meta) {\n-        if (meta == null)\n-            return null;\n-        Class type = meta.getDescribedType();\n-        DynamicStorage storage = (DynamicStorage) _generated.get(type);\n-        if (storage == null) {\n-            storage = generateStorage(meta);\n-            _generated.put(type, storage);\n-            if (_log.isTraceEnabled())\n-                _log.trace(_loc.get(\"pcdata-created\", type.getName(), meta));\n-        }\n-        DynamicPCData data = (DynamicPCData) storage.newInstance();\n-        data.setId(oid);\n-        data.setStorageGenerator(this);\n-        finish(data, meta);\n-        return data;\n-    }\n-\n-    /**\n-     * Actually generate the factory instance.\n-     */\n-    private DynamicStorage generateStorage(ClassMetaData meta) {\n-        if (_log.isTraceEnabled())\n-            _log.trace(_loc.get(\"pcdata-generate\", meta));\n-\n-        FieldMetaData[] fields = meta.getFields();\n-        int[] types = new int[fields.length];\n-        for (int i = 0; i < types.length; i++)\n-            types[i] = replaceType(fields[i]);\n-        return generateStorage(types, meta);\n-    }\n-\n-    /**\n-     * Perform any final actions before the pcdata is returned to client code.\n-     */\n-    protected void finish(DynamicPCData data, ClassMetaData meta) {\n-    }\n-\n-    protected int getCreateFieldMethods(int typeCode) {\n-        if (typeCode >= JavaTypes.OBJECT)\n-            return POLICY_SILENT;\n-        // don't bother creating set/get<Primitive> methods\n-        return POLICY_EMPTY;\n-    }\n-\n-    protected void declareClasses(BCClass bc) {\n-        super.declareClasses(bc);\n-        bc.declareInterface(DynamicPCData.class);\n-        bc.setSuperclass(AbstractPCData.class);\n-    }\n-\n-    protected final String getClassName(Object obj) {\n-        return getUniqueName(((ClassMetaData) obj).getDescribedType());\n-    }\n-\n-    /**\n-     * Creates a unique name for the given type's pcdata implementation.\n-     */\n-    protected String getUniqueName(Class type) {\n-        return type.getName() + \"$\" + System.identityHashCode(type) + POSTFIX;\n-    }\n-\n-    protected final void decorate(Object obj, BCClass bc, int[] types) {\n-        super.decorate(obj, bc, types);\n-        ClassMetaData meta = (ClassMetaData) obj;\n-\n-        enhanceConstructor(bc);\n-        addBaseFields(bc);\n-        addImplDataMethods(bc, meta);\n-        addFieldImplDataMethods(bc, meta);\n-        addVersionMethods(bc);\n-        addGetType(bc, meta);\n-        addLoadMethod(bc, meta);\n-        addLoadWithFieldsMethod(bc, meta);\n-        addStoreMethods(bc, meta);\n-        addNewEmbedded(bc);\n-        addGetData(bc);\n-        decorate(bc, meta);\n-    }\n-\n-    /**\n-     * Apply additional decoration to generated class.\n-     */\n-    protected void decorate(BCClass bc, ClassMetaData meta) {\n-    }\n-\n-    /**\n-     * Enhance constructor to initialize fields\n-     */\n-    private void enhanceConstructor(BCClass bc) {\n-        BCMethod cons = bc.getDeclaredMethod(\"<init>\", (String[]) null);\n-        Code code = cons.getCode(false);\n-        code.afterLast();\n-        code.previous();\n-\n-        // private BitSet loaded = new BitSet();\n-        BCField loaded = addBeanField(bc, \"loaded\", BitSet.class);\n-        loaded.setFinal(true);\n-        code.aload().setThis();\n-        code.anew().setType(BitSet.class);\n-        code.dup();\n-        code.constant().setValue(bc.getFields().length);\n-        code.invokespecial().setMethod(BitSet.class, \"<init>\", void.class,\n-            new Class[]{ int.class });\n-        code.putfield().setField(loaded);\n-\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    /**\n-     * Have to load the type since it may not be available to the\n-     * same classloader (i.e. rar vs. ear). The context classloader\n-     * (i.e. the user app classloader) should be fine.\n-     */\n-    private void addGetType(BCClass bc, ClassMetaData meta) {\n-        BCField type = bc.declareField(\"type\", Class.class);\n-        type.setStatic(true);\n-        type.makePrivate();\n-        // public Class getType() {\n-        BCMethod getter = bc.declareMethod(\"getType\", Class.class, null);\n-        getter.makePublic();\n-        Code code = getter.getCode(true);\n-        // if (type == null) {\n-        // \t\ttry {\n-        // \t\t\ttype = Class.forName\n-        // \t\t\t\t(meta.getDescribedType().getName(), true,\n-        // \t\t\t\tThread.currentThread().getContextClassLoader());\n-        // \t\t} catch (ClassNotFoundException cnfe) {\n-        // \t\t\tthrow new InternalException();\n-        // \t\t}\n-        // }\n-        code.getstatic().setField(type);\n-\n-        Collection jumps = new LinkedList();\n-        jumps.add(code.ifnonnull());\n-        ExceptionHandler handler = code.addExceptionHandler();\n-\n-        handler.setTryStart(code.constant().setValue\n-            (meta.getDescribedType().getName()));\n-        code.constant().setValue(true);\n-        code.invokestatic().setMethod(Thread.class, \"currentThread\",\n-            Thread.class, null);\n-        code.invokevirtual().setMethod(Thread.class, \"getContextClassLoader\",\n-            ClassLoader.class, null);\n-        code.invokestatic().setMethod(Class.class, \"forName\", Class.class,\n-            new Class[]{ String.class, boolean.class, ClassLoader.class });\n-        code.putstatic().setField(type);\n-        Instruction go2 = code.go2();\n-        jumps.add(go2);\n-        handler.setTryEnd(go2);\n-        handler.setCatch(ClassNotFoundException.class);\n-        handler.setHandlerStart(throwException\n-            (code, InternalException.class));\n-        setTarget(code.getstatic().setField(type), jumps);\n-        code.areturn();\n-\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    /**\n-     * Declare standard dynamic pcdata fields.\n-     */\n-    private void addBaseFields(BCClass bc) {\n-        addBeanField(bc, \"id\", Object.class);\n-        BCField field = addBeanField(bc, \"storageGenerator\",\n-            PCDataGenerator.class);\n-        field.setAccessFlags(field.getAccessFlags()\n-            | Constants.ACCESS_TRANSIENT);\n-    }\n-\n-    /**\n-     * Add methods for loading and storing class-level impl data.\n-     */\n-    private void addImplDataMethods(BCClass bc, ClassMetaData meta) {\n-        // void storeImplData(OpenJPAStateManager);\n-        BCMethod meth = bc.declareMethod(\"storeImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-        Code code = meth.getCode(true);\n-\n-        BCField impl = null;\n-        if (!usesImplData(meta))\n-            code.vreturn();\n-        else {\n-            // if (sm.isImplDataCacheable())\n-            // \t\tsetImplData(sm.getImplData());\n-            impl = addBeanField(bc, \"implData\", Object.class);\n-            code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"isImplDataCacheable\", boolean.class, null);\n-            JumpInstruction ifins = code.ifeq();\n-            code.aload().setThis();\n-            code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getImplData\", Object.class, null);\n-            code.invokevirtual().setMethod(\"setImplData\", void.class,\n-                new Class[]{ Object.class });\n-            ifins.setTarget(code.vreturn());\n-        }\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-\n-        // void loadImplData(OpenJPAStateManager);\n-        meth = bc.declareMethod(\"loadImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-        code = meth.getCode(true);\n-        if (!usesImplData(meta))\n-            code.vreturn();\n-        else {\n-            // if (sm.getImplData() == null && implData != null)\n-            // \t\tsm.setImplData(impl, true);\n-            code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getImplData\", Object.class, null);\n-            JumpInstruction ifins = code.ifnonnull();\n-            code.aload().setThis();\n-            code.getfield().setField(impl);\n-            JumpInstruction ifins2 = code.ifnull();\n-            code.aload().setParam(0);\n-            code.aload().setThis();\n-            code.getfield().setField(impl);\n-            code.constant().setValue(true);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"setImplData\", void.class,\n-                new Class[]{ Object.class, boolean.class });\n-            Instruction ins = code.vreturn();\n-            ifins.setTarget(ins);\n-            ifins2.setTarget(ins);\n-        }\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    /**\n-     * Add methods for loading and storing class-level impl data.\n-     */\n-    private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n-        // public void loadImplData(OpenJPAStateManager sm, int i)\n-        BCMethod meth = bc.declareMethod(\"loadImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class, int.class });\n-        meth.makePrivate();\n-        Code code = meth.getCode(true);\n-\n-        int count = countImplDataFields(meta);\n-        BCField impl = null;\n-        if (count == 0)\n-            code.vreturn();\n-        else {\n-            // Object[] fieldImpl\n-            impl = bc.declareField(\"fieldImpl\", Object[].class);\n-            impl.makePrivate();\n-\n-            // if (fieldImpl != null)\n-            code.aload().setThis();\n-            code.getfield().setField(impl);\n-            JumpInstruction ifins = code.ifnonnull();\n-            code.vreturn();\n-\n-            // Object obj = null;\n-            int obj = code.getNextLocalsIndex();\n-            ifins.setTarget(code.constant().setNull());\n-            code.astore().setLocal(obj);\n-\n-            // establish switch target, then move before it\n-            Instruction target = code.aload().setLocal(obj);\n-            code.previous();\n-\n-            // switch(i)\n-            code.iload().setParam(1);\n-            LookupSwitchInstruction lswitch = code.lookupswitch();\n-            FieldMetaData[] fields = meta.getFields();\n-            int cacheable = 0;\n-            for (int i = 0; i < fields.length; i++) {\n-                if (!usesImplData(fields[i]))\n-                    continue;\n-                // case x: obj = fieldImpl[y]; break;\n-                lswitch.addCase(i, code.aload().setThis());\n-                code.getfield().setField(impl);\n-                code.constant().setValue(cacheable++);\n-                code.aaload();\n-                code.astore().setLocal(obj);\n-                code.go2().setTarget(target);\n-            }\n-            lswitch.setDefaultTarget(target);\n-\n-            // if (obj != null)\n-            code.next();    // jump back over target\n-            ifins = code.ifnonnull();\n-            code.vreturn();\n-\n-            // sm.setImplData(index, impl);\n-            ifins.setTarget(code.aload().setParam(0));\n-            code.iload().setParam(1);\n-            code.aload().setLocal(obj);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"setImplData\", void.class,\n-                new Class[]{ int.class, Object.class });\n-            code.vreturn();\n-        }\n-        code.calculateMaxLocals();\n-        code.calculateMaxStack();\n-\n-        // void storeImplData(OpenJPAStateManager sm, int index, boolean loaded)\n-        meth = bc.declareMethod(\"storeImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class, int.class, boolean.class });\n-        code = meth.getCode(true);\n-        if (count == 0)\n-            code.vreturn();\n-        else {\n-            // int arrIdx = -1;\n-            // switch(index)\n-            int arrIdx = code.getNextLocalsIndex();\n-            code.constant().setValue(-1);\n-            code.istore().setLocal(arrIdx);\n-            code.iload().setParam(1);\n-            LookupSwitchInstruction lswitch = code.lookupswitch();\n-\n-            // establish switch target, then move before it\n-            Instruction switchTarget = code.iload().setLocal(arrIdx);\n-            code.previous();\n-\n-            FieldMetaData[] fields = meta.getFields();\n-            int cacheable = 0;\n-            for (int i = 0; i < fields.length; i++) {\n-                if (!usesImplData(fields[i]))\n-                    continue;\n-                // case x: arrIdx = y; break;\n-                lswitch.addCase(i, code.constant().setValue(cacheable++));\n-                code.istore().setLocal(arrIdx);\n-                code.go2().setTarget(switchTarget);\n-            }\n-            lswitch.setDefaultTarget(switchTarget);\n-            code.next();    // step over switch target\n-\n-            // if (arrIdx != -1)\n-            code.constant().setValue(-1);\n-            JumpInstruction ifins = code.ificmpne();\n-            code.vreturn();\n-\n-            // create null target, then move before it\n-            Instruction nullTarget = code.aload().setThis();\n-            code.previous();\n-\n-            // if (loaded)\n-            ifins.setTarget(code.iload().setParam(2));\n-            code.ifeq().setTarget(nullTarget);\n-\n-            // Object obj = sm.getImplData(index)\n-            int obj = code.getNextLocalsIndex();\n-            code.aload().setParam(0);\n-            code.iload().setParam(1);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getImplData\", Object.class, new Class[]{ int.class });\n-            code.astore().setLocal(obj);\n-\n-            // if (obj != null)\n-            code.aload().setLocal(obj);\n-            code.ifnull().setTarget(nullTarget);\n-\n-            // if (fieldImpl == null)\n-            // \t\tfieldImpl = new Object[fields];\n-            code.aload().setThis();\n-            code.getfield().setField(impl);\n-            ifins = code.ifnonnull();\n-            code.aload().setThis();\n-            code.constant().setValue(count);\n-            code.anewarray().setType(Object.class);\n-            code.putfield().setField(impl);\n-\n-            // fieldImpl[arrIdx] = obj;\n-            // return;\n-            ifins.setTarget(code.aload().setThis());\n-            code.getfield().setField(impl);\n-            code.iload().setLocal(arrIdx);\n-            code.aload().setLocal(obj);\n-            code.aastore();\n-            code.vreturn();\n-\n-            // if (fieldImpl != null)\n-            // \t\tfieldImpl[index] = null;\n-            code.next(); // step over nullTarget\n-            code.getfield().setField(impl);\n-            ifins = code.ifnonnull();\n-            code.vreturn();\n-            ifins.setTarget(code.aload().setThis());\n-            code.getfield().setField(impl);\n-            code.iload().setLocal(arrIdx);\n-            code.constant().setNull();\n-            code.aastore();\n-            code.vreturn();\n-        }\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    /**\n-     * Add methods for loading and storing version data.\n-     */\n-    protected void addVersionMethods(BCClass bc) {\n-        // void storeVersion(OpenJPAStateManager sm);\n-        addBeanField(bc, \"version\", Object.class);\n-        BCMethod meth = bc.declareMethod(\"storeVersion\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-        Code code = meth.getCode(true);\n-\n-        // version = sm.getVersion();\n-        code.aload().setThis();\n-        code.aload().setParam(0);\n-        code.invokeinterface()\n-            .setMethod(OpenJPAStateManager.class, \"getVersion\",\n-                Object.class, null);\n-        code.putfield().setField(\"version\", Object.class);\n-        code.vreturn();\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-\n-        // void loadVersion(OpenJPAStateManager sm)\n-        meth = bc.declareMethod(\"loadVersion\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-        code = meth.getCode(true);\n-\n-        // if (sm.getVersion() == null)\n-        // \t\tsm.setVersion(version);\n-        code.aload().setParam(0);\n-        code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-            \"getVersion\", Object.class, null);\n-        JumpInstruction ifins = code.ifnonnull();\n-        code.aload().setParam(0);\n-        code.aload().setThis();\n-        code.getfield().setField(\"version\", Object.class);\n-        code.invokeinterface()\n-            .setMethod(OpenJPAStateManager.class, \"setVersion\",\n-                void.class, new Class[]{ Object.class });\n-        ifins.setTarget(code.vreturn());\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n-        // public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n-        // \t\tObject context)\n-        Code code = addLoadMethod(bc, false);\n-        FieldMetaData[] fmds = meta.getFields();\n-        Collection jumps = new LinkedList();\n-        Collection jumps2;\n-\t\t\n-        int local = code.getNextLocalsIndex();\n-        code.constant().setNull();\n-        code.astore().setLocal(local);\n-        int inter = code.getNextLocalsIndex();\n-        code.constant().setNull();\n-        code.astore().setLocal(inter);\n-\n-        int objectCount = 0;\n-        boolean intermediate;\n-        for (int i = 0; i < fmds.length; i++) {\n-            jumps2 = new LinkedList();\n-            intermediate = usesIntermediate(fmds[i]);\n-            setTarget(code.aload().setThis(), jumps);\n-            // if (loaded.get(i)) or (!loaded.get(i)) depending on inter resp\n-            code.getfield().setField(\"loaded\", BitSet.class);\n-            code.constant().setValue(i);\n-            code.invokevirtual().setMethod(BitSet.class, \"get\",\n-                boolean.class, new Class[]{ int.class });\n-            jumps.add(code.ifne());\n-\n-            if (intermediate)\n-                addLoadIntermediate(code, i, objectCount, jumps2, inter);\n-            jumps2.add(code.go2());\n-\n-            // if (fetch.requiresFetch(fmds[i])!=FetchConfiguration.FETCH_NONE)\n-            setTarget(code.aload().setParam(1), jumps);\n-            code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getMetaData\", ClassMetaData.class, null);\n-            code.constant().setValue(fmds[i].getIndex());\n-            code.invokevirtual().setMethod(ClassMetaData.class,\n-                \"getField\", FieldMetaData.class, new Class[]{int.class});\n-            code.invokeinterface().setMethod (FetchConfiguration.class, \n-                \"requiresFetch\", int.class, new Class[]{FieldMetaData.class});\n-            code.constant().setValue(FetchConfiguration.FETCH_NONE);\n-            jumps2.add(code.ificmpeq());\n-            addLoad(bc, code, fmds[i], objectCount, local, false);\n-\n-            jumps = jumps2;\n-            if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\n-                objectCount++;\n-        }\n-        setTarget(code.vreturn(), jumps);\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    private void addLoadWithFieldsMethod(BCClass bc, ClassMetaData meta) {\n-        Code code = addLoadMethod(bc, true);\n-        // public void load(OpenJPAStateManager sm, BitSet fields,\n-        // \t\tFetchConfiguration fetch, Object conn)\n-        FieldMetaData[] fmds = meta.getFields();\n-        Collection jumps = new LinkedList();\n-        Collection jumps2;\n-        int objectCount = 0;\n-        boolean intermediate;\n-        int local = code.getNextLocalsIndex();\n-        code.constant().setNull();\n-        code.astore().setLocal(local);\n-        int inter = code.getNextLocalsIndex();\n-        code.constant().setNull();\n-        code.astore().setLocal(inter);\n-\n-        for (int i = 0; i < fmds.length; i++) {\n-            jumps2 = new LinkedList();\n-            intermediate = usesIntermediate(fmds[i]);\n-            // if (fields.get(i))\n-            // {\n-            // \t\tif (loaded.get(i))\n-            setTarget(code.aload().setParam(1), jumps);\n-            code.constant().setValue(i);\n-            code.invokevirtual().setMethod(BitSet.class, \"get\",\n-                boolean.class, new Class[]{ int.class });\n-            jumps2.add(code.ifeq());\n-            code.aload().setThis();\n-            code.getfield().setField(\"loaded\", BitSet.class);\n-            code.constant().setValue(i);\n-            code.invokevirtual().setMethod(BitSet.class, \"get\",\n-                boolean.class, new Class[]{ int.class });\n-            if (intermediate)\n-                jumps.add(code.ifeq());\n-            else\n-                jumps2.add(code.ifeq());\n-\n-            addLoad(bc, code, fmds[i], objectCount, local, true);\n-            if (usesImplData(fmds[i])) {\n-                // loadImplData(sm, i);\n-                code.aload().setThis();\n-                code.aload().setParam(0);\n-                code.constant().setValue(i);\n-                code.invokevirtual().setMethod(\"loadImplData\", void.class,\n-                    new Class[]{ OpenJPAStateManager.class, int.class });\n-            }\n-\n-            // fields.clear(i);\n-            code.aload().setParam(1);\n-            code.constant().setValue(i);\n-            code.invokevirtual().setMethod(BitSet.class, \"clear\", void.class,\n-                new Class[] { int.class });\n-\n-            jumps2.add(code.go2());\n-\n-            if (intermediate)\n-                setTarget(addLoadIntermediate\n-                    (code, i, objectCount, jumps2, inter), jumps);\n-\n-            jumps = jumps2;\n-            if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\n-                objectCount++;\n-        }\n-        setTarget(code.vreturn(), jumps);\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n-    /**\n-     * Declare and start the base load method.\n-     */\n-    private Code addLoadMethod(BCClass bc, boolean fields) {\n-        Class[] args = null;\n-        if (fields)\n-            args = new Class[]{ OpenJPAStateManager.class, BitSet.class,\n-                FetchConfiguration.class, Object.class };\n-        else\n-            args = new Class[]{ OpenJPAStateManager.class,\n-                FetchConfiguration.class, Object.class };\n-        BCMethod load = bc.declareMethod(\"load\", void.class, args);\n-        Code code = load.getCode(true);\n-\n-        //loadVersion(sm);\n-        code.aload().setThis();\n-        code.aload().setParam(0);\n-        code.invokevirtual().setMethod(\"loadVersion\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-\n-        //loadImplData(sm);\n-        code.aload().setThis();\n-        code.aload().setParam(0);\n-        code.invokevirtual().setMethod(\"loadImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-        return code;\n-    }\n-\n-    /**\n-     * Add the field load.\n-     */\n-    private Instruction addLoad(BCClass bc, Code code, FieldMetaData fmd,\n-        int objectCount, int local, boolean fields) {\n-        int index = fmd.getIndex();\n-        int typeCode = replaceType(fmd);\n-        Instruction first;\n-        if (typeCode < JavaTypes.OBJECT) {\n-            // sm.store<type>(i, field<i>)\n-            Class type = forType(fmd.getTypeCode());\n-            first = code.aload().setParam(0);\n-            code.constant().setValue(index);\n-            code.aload().setThis();\n-            code.getfield().setField(getFieldName(index), type);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"store\" + StringUtils.capitalize(type.getName()),\n-                void.class, new Class[]{ int.class, type });\n-        } else {\n-            // fmd = sm.getMetaData().getField(i);\n-            int offset = fields ? 1 : 0;\n-            first = code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getMetaData\", ClassMetaData.class, null);\n-            code.constant().setValue(fmd.getIndex());\n-            code.invokevirtual().setMethod(ClassMetaData.class, \"getField\",\n-                FieldMetaData.class, new Class[]{ int.class });\n-            code.astore().setLocal(local);\n-            // sm.storeField(i, toField(sm, fmd, objects[objectCount],\n-            // \t\tfetch, context);\n-            code.aload().setParam(0);\n-            code.constant().setValue(index);\n-            code.aload().setThis();\n-            code.aload().setParam(0);\n-            code.aload().setLocal(local);\n-            code.aload().setThis();\n-            code.getfield().setField(\"objects\", Object[].class);\n-            code.constant().setValue(objectCount);\n-            code.aaload();\n-            code.aload().setParam(1 + offset);\n-            code.aload().setParam(2 + offset);\n-            code.invokevirtual().setMethod(bc.getName(), \"toField\",\n-                Object.class.getName(), toStrings(new Class[]{ \n-                OpenJPAStateManager.class, FieldMetaData.class,\n-                Object.class, FetchConfiguration.class, Object.class }));\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"storeField\", void.class,\n-                new Class[]{ int.class, Object.class });\n-        }\n-        return first;\n-    }\n-\n-    /**\n-     * Load intermediate data if possible.\n-     */\n-    private Instruction addLoadIntermediate(Code code, int index,\n-        int objectCount, Collection jumps2, int inter) {\n-        // {\n-        // \t\tObject inter = objects[objectCount];\n-        Instruction first = code.aload().setThis();\n-        code.getfield().setField(\"objects\", Object[].class);\n-        code.constant().setValue(objectCount);\n-        code.aaload();\n-        code.astore().setLocal(inter);\n-        // \t\tif (inter != null && !sm.getLoaded().get(index))\n-        code.aload().setLocal(inter);\n-        jumps2.add(code.ifnull());\n-        code.aload().setParam(0);\n-        code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-            \"getLoaded\", BitSet.class, null);\n-        code.constant().setValue(index);\n-        code.invokevirtual().setMethod(BitSet.class, \"get\",\n-            boolean.class, new Class[]{ int.class });\n-        jumps2.add(code.ifne());\n-        //\t\t\tsm.setIntermediate(index, inter);\n-        //\t}  // end else\n-        code.aload().setParam(0);\n-        code.constant().setValue(index);\n-        code.aload().setLocal(inter);\n-        code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-            \"setIntermediate\", void.class,\n-            new Class[]{ int.class, Object.class });\n-        return first;\n-    }\n-\n-    private void addStoreMethods(BCClass bc, ClassMetaData meta) {\n-        // i.e. void store(OpenJPAStateManager sm, BitSet fields);\n-        addStoreMethod(bc, meta, true);\n-        // i.e. void store(OpenJPAStateManager sm);\n-        addStoreMethod(bc, meta, false);\n-    }\n-\n-    private void addStoreMethod(BCClass bc, ClassMetaData meta,\n-        boolean fields) {\n-        BCMethod store;\n-        if (fields)\n-            store = bc.declareMethod(\"store\", void.class,\n-                new Class[]{ OpenJPAStateManager.class, BitSet.class });\n-        else\n-            store = bc.declareMethod(\"store\", void.class,\n-                new Class[]{ OpenJPAStateManager.class });\n-        Code code = store.getCode(true);\n-\n-        // initialize();\n-        code.aload().setThis();\n-        code.invokevirtual().setMethod(\"initialize\", void.class, null);\n-\n-        // storeVersion(sm);\n-        code.aload().setThis();\n-        code.aload().setParam(0);\n-        code.invokevirtual().setMethod(\"storeVersion\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-\n-        // storeImplData(sm);\n-        code.aload().setThis();\n-        code.aload().setParam(0);\n-        code.invokevirtual().setMethod(\"storeImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-\n-        FieldMetaData[] fmds = meta.getFields();\n-        Collection jumps = new LinkedList();\n-        int objectCount = 0;\n-        for (int i = 0; i < fmds.length; i++) {\n-            if (fields) {\n-                //  if (fields != null && fields.get(index))\n-                setTarget(code.aload().setParam(1), jumps);\n-                jumps.add(code.ifnull());\n-                code.aload().setParam(1);\n-                code.constant().setValue(i);\n-                code.invokevirtual().setMethod(BitSet.class, \"get\",\n-                    boolean.class, new Class[]{ int.class });\n-                jumps.add(code.ifeq());\n-            } else {\n-                // if (sm.getLoaded().get(index)))\n-                setTarget(code.aload().setParam(0), jumps);\n-                code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                    \"getLoaded\", BitSet.class, null);\n-                code.constant().setValue(i);\n-                code.invokevirtual().setMethod(BitSet.class, \"get\",\n-                    boolean.class, new Class[]{ int.class });\n-                jumps.add(code.ifeq());\n-            }\n-            addStore(bc, code, fmds[i], objectCount);\n-            if (usesIntermediate(fmds[i])) {\n-                JumpInstruction elseIns = code.go2();\n-                // else if (!loaded.get(index))\n-                setTarget(code.aload().setThis(), jumps);\n-                jumps.add(elseIns);\n-                code.getfield().setField(\"loaded\", BitSet.class);\n-                code.constant().setValue(i);\n-                code.invokevirtual().setMethod(BitSet.class, \"get\",\n-                    boolean.class, new Class[]{ int.class });\n-                jumps.add(code.ifne());\n-                // Object val = sm.getIntermediate(index);\n-                // if (val != null)\n-                // \t\tobjects[objectCount] = val;\n-                code.aload().setParam(0);\n-                code.constant().setValue(i);\n-                code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                    \"getIntermediate\", Object.class, new Class[]{ int.class });\n-                int local = code.getNextLocalsIndex();\n-                code.astore().setLocal(local);\n-                code.aload().setLocal(local);\n-                jumps.add(code.ifnull());\n-                code.aload().setThis();\n-                code.getfield().setField(\"objects\", Object[].class);\n-                code.constant().setValue(objectCount);\n-                code.aload().setLocal(local);\n-                code.aastore();\n-            }\n-            if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\n-                objectCount++;\n-        }\n-        setTarget(code.vreturn(), jumps);\n-        code.calculateMaxLocals();\n-        code.calculateMaxStack();\n-    }\n-\n-    private void addStore(BCClass bc, Code code, FieldMetaData fmd,\n-        int objectCount) {\n-        int typeCode = replaceType(fmd);\n-        int index = fmd.getIndex();\n-        if (typeCode < JavaTypes.OBJECT) {\n-            Class type = forType(typeCode);\n-            // field<i> = sm.fetch<Type>(index)\n-            code.aload().setThis();\n-            code.aload().setParam(0);\n-            code.constant().setValue(index);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"fetch\" + StringUtils.capitalize(type.getName()), type,\n-                new Class[]{ int.class });\n-            code.putfield().setField(getFieldName(index), type);\n-            code.aload().setThis();\n-            code.getfield().setField(\"loaded\", BitSet.class);\n-            code.constant().setValue(index);\n-            code.invokevirtual().setMethod(BitSet.class, \"set\", void.class,\n-                new Class[]{ int.class });\n-        } else {\n-            // Object val = toData(sm.getMetaData().getField(index),\n-            // \t\tsm.fetchField(index, false), sm.getContext());\n-            int local = code.getNextLocalsIndex();\n-            code.aload().setThis();\n-            code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getMetaData\", ClassMetaData.class, null);\n-            code.constant().setValue(fmd.getIndex());\n-            code.invokevirtual().setMethod(ClassMetaData.class,\n-                \"getField\", FieldMetaData.class, new Class[]{ int.class });\n-            code.aload().setParam(0);\n-            code.constant().setValue(fmd.getIndex());\n-            code.constant().setValue(false);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"fetchField\", Object.class, new Class[]\n-                { int.class, boolean.class });\n-            code.aload().setParam(0);\n-            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                \"getContext\", StoreContext.class, null);\n-            code.invokevirtual().setMethod(bc.getName(), \"toData\",\n-                Object.class.getName(), toStrings(new Class []{\n-                FieldMetaData.class, Object.class, StoreContext.class }));\n-            code.astore().setLocal(local);\n-\n-            // if (val == NULL) {\n-            // \t\tval = null;\n-            // \t\tloaded.clear(index);\n-            // \t} else\n-            // \t\tloaded.set(index);\n-            // \tobjects[objectCount] = val;\n-            code.aload().setLocal(local);\n-            code.getstatic().setField(AbstractPCData.class, \"NULL\",\n-                Object.class);\n-            JumpInstruction ifins = code.ifacmpne();\n-            code.constant().setNull();\n-            code.astore().setLocal(local);\n-            code.aload().setThis();\n-            code.getfield().setField(\"loaded\", BitSet.class);\n-            code.constant().setValue(index);\n-            code.invokevirtual().setMethod(BitSet.class, \"clear\", void.class,\n-                new Class[]{ int.class });\n-            JumpInstruction go2 = code.go2();\n-            ifins.setTarget(code.aload().setThis());\n-            code.getfield().setField(\"loaded\", BitSet.class);\n-            code.constant().setValue(index);\n-            code.invokevirtual().setMethod(BitSet.class, \"set\", void.class,\n-                new Class[]{ int.class });\n-            go2.setTarget(code.aload().setThis());\n-            code.getfield().setField(\"objects\", Object[].class);\n-            code.constant().setValue(objectCount);\n-            code.aload().setLocal(local);\n-            code.aastore();\n-        }\n-        if (!usesImplData(fmd))\n-            return;\n-\n-        // storeImplData(sm, i, loaded.get(i);\n-        code.aload().setThis();\n-        code.aload().setParam(0);\n-        code.constant().setValue(index);\n-        code.aload().setThis();\n-        code.getfield().setField(\"loaded\", BitSet.class);\n-        code.constant().setValue(index);\n-        code.invokevirtual().setMethod(BitSet.class, \"get\", boolean.class,\n-            new Class[]{ int.class });\n-        code.invokevirtual().setMethod(\"storeImplData\", void.class,\n-            new Class[]{ OpenJPAStateManager.class, int.class, boolean.class });\n-    }\n-\n-    private void addNewEmbedded(BCClass bc) {\n-        // void newEmbeddedPCData(OpenJPAStateManager embedded)\n-        BCMethod meth = bc.declareMethod(\"newEmbeddedPCData\", PCData.class,\n-            new Class[]{ OpenJPAStateManager.class });\n-        Code code = meth.getCode(true);\n-        // return getStorageGenerator().generatePCData\n-        // \t\t(sm.getId(), sm.getMetaData());\n-        code.aload().setThis();\n-        code.getfield().setField(\"storageGenerator\", PCDataGenerator.class);\n-        code.aload().setParam(0);\n-        code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-            \"getId\", Object.class, null);\n-        code.aload().setParam(0);\n-        code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-            \"getMetaData\", ClassMetaData.class, null);\n-        code.invokevirtual().setMethod(PCDataGenerator.class,\n-            \"generatePCData\", PCData.class, new Class[]\n-            { Object.class, ClassMetaData.class });\n-        code.areturn();\n-        code.calculateMaxLocals();\n-        code.calculateMaxStack();\n-    }\n-\n-    private void addGetData(BCClass bc) {\n-        // return getObjectField(i);\n-        BCMethod method = bc.declareMethod(\"getData\", Object.class,\n-            new Class[]{ int.class });\n-        Code code = method.getCode(true);\n-        code.aload().setThis();\n-        code.iload().setParam(0);\n-        code.invokevirtual().setMethod(\"getObject\", Object.class,\n-            new Class[]{ int.class });\n-        code.areturn();\n-        code.calculateMaxLocals();\n-        code.calculateMaxStack();\n-    }\n-\n-    /////////////\n-    // Utilities\n-    /////////////\n-\n-    /**\n-     * Return a valid {@link JavaTypes} constant for the given field\n-     */\n-    protected int replaceType(FieldMetaData fmd) {\n-        if (usesIntermediate(fmd))\n-            return JavaTypes.OBJECT;\n-        return fmd.getTypeCode();\n-    }\n-\n-    /**\n-     * Whether the given field uses a cacheable intermediate value.\n-     */\n-    protected boolean usesIntermediate(FieldMetaData fmd) {\n-        return fmd.usesIntermediate();\n-    }\n-\n-    /**\n-     * Whether the given type might have cacheable class-level impl data.\n-     */\n-    protected boolean usesImplData(ClassMetaData meta) {\n-        return true;\n-    }\n-\n-    /**\n-     * Whether the given field might have cacheable impl data.\n-     */\n-    protected boolean usesImplData(FieldMetaData fmd) {\n-        return fmd.usesImplData() == null;\n-    }\n-\n-    /**\n-     * The number of fields with cacheable impl data.\n-     */\n-    private int countImplDataFields(ClassMetaData meta) {\n-        FieldMetaData[] fmds = meta.getFields();\n-        int count = 0;\n-        for (int i = 0; i < fmds.length; i++)\n-            if (usesImplData(fmds[i]))\n-                count++;\n-        return count;\n-    }\n-\n-    /**\n-     * Add method which defers to AbstractPCData.\n-     */\n-    protected void callAbstractPCData(BCClass bc, String name, Class retType,\n-        Class[] args) {\n-        BCMethod meth = bc.declareMethod(name, retType, args);\n-        Code code = meth.getCode(true);\n-        code.aload().setThis();\n-        for (int i = 0; i < args.length; i++)\n-            code.xload().setParam(i).setType(args[i]);\n-        code.invokevirtual().setMethod(AbstractPCData.class, name, retType,\n-            args);\n-        if (!void.class.equals(retType))\n-            code.xreturn().setType(retType);\n-        code.calculateMaxLocals();\n-        code.calculateMaxStack();\n-    }\n-\n-    /**\n-     * Set the collection of {@link JumpInstruction}s to the given instruction,\n-     * clearing the collection in the process.\n-     */\n-    protected void setTarget(Instruction ins, Collection jumps) {\n-        for (Iterator it = jumps.iterator(); it.hasNext();)\n-            ((JumpInstruction) it.next()).setTarget(ins);\n-        jumps.clear();\n-    }\n-\n-    /**\n-     * Transform the given array of classes to strings.\n-     */\n-    private static String[] toStrings(Class[] cls) {\n-        String[] strings = new String[cls.length];\n-        for (int i = 0; i < strings.length; i++)\n-            strings[i] = cls[i].getName();\n-        return strings;\n-    }\n-\n-    /**\n-     * Dynamic {@link PCData}s generated will implement this interface\n-     * to simplify initialization.\n-     */\n-    public static interface DynamicPCData extends PCData {\n-\n-        public void setId(Object oid);\n-\n-        public PCDataGenerator getStorageGenerator();\n-\n-        public void setStorageGenerator (PCDataGenerator generator);\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.util.BitSet;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.AbstractPCData;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.PCData;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.BCField;\r\n+import serp.bytecode.BCMethod;\r\n+import serp.bytecode.Code;\r\n+import serp.bytecode.Constants;\r\n+import serp.bytecode.ExceptionHandler;\r\n+import serp.bytecode.Instruction;\r\n+import serp.bytecode.JumpInstruction;\r\n+import serp.bytecode.LookupSwitchInstruction;\r\n+\r\n+/**\r\n+ * Generates {@link PCData} instances which avoid primitve wrappers\r\n+ * to optimize memory use and performance at the cost of slightly higher\r\n+ * startup time.\r\n+ *\r\n+ * @author Steve Kim\r\n+ * @nojavadoc\r\n+ * @since 0.3.2\r\n+ */\r\n+public class PCDataGenerator\r\n+    extends DynamicStorageGenerator {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (PCDataGenerator.class);\r\n+\r\n+    protected static final String POSTFIX = \"$openjpapcdata\";\r\n+\r\n+    private final Map _generated = new ConcurrentHashMap();\r\n+    private final OpenJPAConfiguration _conf;\r\n+    private final Log _log;\r\n+\r\n+    public PCDataGenerator(OpenJPAConfiguration conf) {\r\n+        _conf = conf;\r\n+        _log = _conf.getLogFactory().getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the configuration.\r\n+     */\r\n+    public OpenJPAConfiguration getConfiguration() {\r\n+        return _conf;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a {@link PCData} instance for the given oid and metadata.\r\n+     */\r\n+    public PCData generatePCData(Object oid, ClassMetaData meta) {\r\n+        if (meta == null)\r\n+            return null;\r\n+        Class type = meta.getDescribedType();\r\n+        DynamicStorage storage = (DynamicStorage) _generated.get(type);\r\n+        if (storage == null) {\r\n+            storage = generateStorage(meta);\r\n+            _generated.put(type, storage);\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(_loc.get(\"pcdata-created\", type.getName(), meta));\r\n+        }\r\n+        DynamicPCData data = (DynamicPCData) storage.newInstance();\r\n+        data.setId(oid);\r\n+        data.setStorageGenerator(this);\r\n+        finish(data, meta);\r\n+        return data;\r\n+    }\r\n+\r\n+    /**\r\n+     * Actually generate the factory instance.\r\n+     */\r\n+    private DynamicStorage generateStorage(ClassMetaData meta) {\r\n+        if (_log.isTraceEnabled())\r\n+            _log.trace(_loc.get(\"pcdata-generate\", meta));\r\n+\r\n+        FieldMetaData[] fields = meta.getFields();\r\n+        int[] types = new int[fields.length];\r\n+        for (int i = 0; i < types.length; i++)\r\n+            types[i] = replaceType(fields[i]);\r\n+        return generateStorage(types, meta);\r\n+    }\r\n+\r\n+    /**\r\n+     * Perform any final actions before the pcdata is returned to client code.\r\n+     */\r\n+    protected void finish(DynamicPCData data, ClassMetaData meta) {\r\n+    }\r\n+\r\n+    protected int getCreateFieldMethods(int typeCode) {\r\n+        if (typeCode >= JavaTypes.OBJECT)\r\n+            return POLICY_SILENT;\r\n+        // don't bother creating set/get<Primitive> methods\r\n+        return POLICY_EMPTY;\r\n+    }\r\n+\r\n+    protected void declareClasses(BCClass bc) {\r\n+        super.declareClasses(bc);\r\n+        bc.declareInterface(DynamicPCData.class);\r\n+        bc.setSuperclass(AbstractPCData.class);\r\n+    }\r\n+\r\n+    protected final String getClassName(Object obj) {\r\n+        return getUniqueName(((ClassMetaData) obj).getDescribedType());\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a unique name for the given type's pcdata implementation.\r\n+     */\r\n+    protected String getUniqueName(Class type) {\r\n+        return type.getName() + \"$\" + System.identityHashCode(type) + POSTFIX;\r\n+    }\r\n+\r\n+    protected final void decorate(Object obj, BCClass bc, int[] types) {\r\n+        super.decorate(obj, bc, types);\r\n+        ClassMetaData meta = (ClassMetaData) obj;\r\n+\r\n+        enhanceConstructor(bc);\r\n+        addBaseFields(bc);\r\n+        addImplDataMethods(bc, meta);\r\n+        addFieldImplDataMethods(bc, meta);\r\n+        addVersionMethods(bc);\r\n+        addGetType(bc, meta);\r\n+        addLoadMethod(bc, meta);\r\n+        addLoadWithFieldsMethod(bc, meta);\r\n+        addStoreMethods(bc, meta);\r\n+        addNewEmbedded(bc);\r\n+        addGetData(bc);\r\n+        decorate(bc, meta);\r\n+    }\r\n+\r\n+    /**\r\n+     * Apply additional decoration to generated class.\r\n+     */\r\n+    protected void decorate(BCClass bc, ClassMetaData meta) {\r\n+    }\r\n+\r\n+    /**\r\n+     * Enhance constructor to initialize fields\r\n+     */\r\n+    private void enhanceConstructor(BCClass bc) {\r\n+        BCMethod cons = bc.getDeclaredMethod(\"<init>\", (String[]) null);\r\n+        Code code = cons.getCode(false);\r\n+        code.afterLast();\r\n+        code.previous();\r\n+\r\n+        // private BitSet loaded = new BitSet();\r\n+        BCField loaded = addBeanField(bc, \"loaded\", BitSet.class);\r\n+        loaded.setFinal(true);\r\n+        code.aload().setThis();\r\n+        code.anew().setType(BitSet.class);\r\n+        code.dup();\r\n+        code.constant().setValue(bc.getFields().length);\r\n+        code.invokespecial().setMethod(BitSet.class, \"<init>\", void.class,\r\n+            new Class[]{ int.class });\r\n+        code.putfield().setField(loaded);\r\n+\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    /**\r\n+     * Have to load the type since it may not be available to the\r\n+     * same classloader (i.e. rar vs. ear). The context classloader\r\n+     * (i.e. the user app classloader) should be fine.\r\n+     */\r\n+    private void addGetType(BCClass bc, ClassMetaData meta) {\r\n+        BCField type = bc.declareField(\"type\", Class.class);\r\n+        type.setStatic(true);\r\n+        type.makePrivate();\r\n+        // public Class getType() {\r\n+        BCMethod getter = bc.declareMethod(\"getType\", Class.class, null);\r\n+        getter.makePublic();\r\n+        Code code = getter.getCode(true);\r\n+        // if (type == null) {\r\n+        // \t\ttry {\r\n+        // \t\t\ttype = Class.forName\r\n+        // \t\t\t\t(meta.getDescribedType().getName(), true,\r\n+        // \t\t\t\tThread.currentThread().getContextClassLoader());\r\n+        // \t\t} catch (ClassNotFoundException cnfe) {\r\n+        // \t\t\tthrow new InternalException();\r\n+        // \t\t}\r\n+        // }\r\n+        code.getstatic().setField(type);\r\n+\r\n+        Collection jumps = new LinkedList();\r\n+        jumps.add(code.ifnonnull());\r\n+        ExceptionHandler handler = code.addExceptionHandler();\r\n+\r\n+        handler.setTryStart(code.constant().setValue\r\n+            (meta.getDescribedType().getName()));\r\n+        code.constant().setValue(true);\r\n+        code.invokestatic().setMethod(Thread.class, \"currentThread\",\r\n+            Thread.class, null);\r\n+        code.invokevirtual().setMethod(Thread.class, \"getContextClassLoader\",\r\n+            ClassLoader.class, null);\r\n+        code.invokestatic().setMethod(Class.class, \"forName\", Class.class,\r\n+            new Class[]{ String.class, boolean.class, ClassLoader.class });\r\n+        code.putstatic().setField(type);\r\n+        Instruction go2 = code.go2();\r\n+        jumps.add(go2);\r\n+        handler.setTryEnd(go2);\r\n+        handler.setCatch(ClassNotFoundException.class);\r\n+        handler.setHandlerStart(throwException\r\n+            (code, InternalException.class));\r\n+        setTarget(code.getstatic().setField(type), jumps);\r\n+        code.areturn();\r\n+\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    /**\r\n+     * Declare standard dynamic pcdata fields.\r\n+     */\r\n+    private void addBaseFields(BCClass bc) {\r\n+        addBeanField(bc, \"id\", Object.class);\r\n+        BCField field = addBeanField(bc, \"storageGenerator\",\r\n+            PCDataGenerator.class);\r\n+        field.setAccessFlags(field.getAccessFlags()\r\n+            | Constants.ACCESS_TRANSIENT);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add methods for loading and storing class-level impl data.\r\n+     */\r\n+    private void addImplDataMethods(BCClass bc, ClassMetaData meta) {\r\n+        // void storeImplData(OpenJPAStateManager);\r\n+        BCMethod meth = bc.declareMethod(\"storeImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+        Code code = meth.getCode(true);\r\n+\r\n+        BCField impl = null;\r\n+        if (!usesImplData(meta))\r\n+            code.vreturn();\r\n+        else {\r\n+            // if (sm.isImplDataCacheable())\r\n+            // \t\tsetImplData(sm.getImplData());\r\n+            impl = addBeanField(bc, \"implData\", Object.class);\r\n+            code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"isImplDataCacheable\", boolean.class, null);\r\n+            JumpInstruction ifins = code.ifeq();\r\n+            code.aload().setThis();\r\n+            code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getImplData\", Object.class, null);\r\n+            code.invokevirtual().setMethod(\"setImplData\", void.class,\r\n+                new Class[]{ Object.class });\r\n+            ifins.setTarget(code.vreturn());\r\n+        }\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+\r\n+        // void loadImplData(OpenJPAStateManager);\r\n+        meth = bc.declareMethod(\"loadImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+        code = meth.getCode(true);\r\n+        if (!usesImplData(meta))\r\n+            code.vreturn();\r\n+        else {\r\n+            // if (sm.getImplData() == null && implData != null)\r\n+            // \t\tsm.setImplData(impl, true);\r\n+            code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getImplData\", Object.class, null);\r\n+            JumpInstruction ifins = code.ifnonnull();\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(impl);\r\n+            JumpInstruction ifins2 = code.ifnull();\r\n+            code.aload().setParam(0);\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(impl);\r\n+            code.constant().setValue(true);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"setImplData\", void.class,\r\n+                new Class[]{ Object.class, boolean.class });\r\n+            Instruction ins = code.vreturn();\r\n+            ifins.setTarget(ins);\r\n+            ifins2.setTarget(ins);\r\n+        }\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    /**\r\n+     * Add methods for loading and storing class-level impl data.\r\n+     */\r\n+    private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\r\n+        // public void loadImplData(OpenJPAStateManager sm, int i)\r\n+        BCMethod meth = bc.declareMethod(\"loadImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class, int.class });\r\n+        meth.makePrivate();\r\n+        Code code = meth.getCode(true);\r\n+\r\n+        int count = countImplDataFields(meta);\r\n+        BCField impl = null;\r\n+        if (count == 0)\r\n+            code.vreturn();\r\n+        else {\r\n+            // Object[] fieldImpl\r\n+            impl = bc.declareField(\"fieldImpl\", Object[].class);\r\n+            impl.makePrivate();\r\n+\r\n+            // if (fieldImpl != null)\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(impl);\r\n+            JumpInstruction ifins = code.ifnonnull();\r\n+            code.vreturn();\r\n+\r\n+            // Object obj = null;\r\n+            int obj = code.getNextLocalsIndex();\r\n+            ifins.setTarget(code.constant().setNull());\r\n+            code.astore().setLocal(obj);\r\n+\r\n+            // establish switch target, then move before it\r\n+            Instruction target = code.aload().setLocal(obj);\r\n+            code.previous();\r\n+\r\n+            // switch(i)\r\n+            code.iload().setParam(1);\r\n+            LookupSwitchInstruction lswitch = code.lookupswitch();\r\n+            FieldMetaData[] fields = meta.getFields();\r\n+            int cacheable = 0;\r\n+            for (int i = 0; i < fields.length; i++) {\r\n+                if (!usesImplData(fields[i]))\r\n+                    continue;\r\n+                // case x: obj = fieldImpl[y]; break;\r\n+                lswitch.addCase(i, code.aload().setThis());\r\n+                code.getfield().setField(impl);\r\n+                code.constant().setValue(cacheable++);\r\n+                code.aaload();\r\n+                code.astore().setLocal(obj);\r\n+                code.go2().setTarget(target);\r\n+            }\r\n+            lswitch.setDefaultTarget(target);\r\n+\r\n+            // if (obj != null)\r\n+            code.next();    // jump back over target\r\n+            ifins = code.ifnonnull();\r\n+            code.vreturn();\r\n+\r\n+            // sm.setImplData(index, impl);\r\n+            ifins.setTarget(code.aload().setParam(0));\r\n+            code.iload().setParam(1);\r\n+            code.aload().setLocal(obj);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"setImplData\", void.class,\r\n+                new Class[]{ int.class, Object.class });\r\n+            code.vreturn();\r\n+        }\r\n+        code.calculateMaxLocals();\r\n+        code.calculateMaxStack();\r\n+\r\n+        // void storeImplData(OpenJPAStateManager sm, int index, boolean loaded)\r\n+        meth = bc.declareMethod(\"storeImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class, int.class, boolean.class });\r\n+        code = meth.getCode(true);\r\n+        if (count == 0)\r\n+            code.vreturn();\r\n+        else {\r\n+            // int arrIdx = -1;\r\n+            // switch(index)\r\n+            int arrIdx = code.getNextLocalsIndex();\r\n+            code.constant().setValue(-1);\r\n+            code.istore().setLocal(arrIdx);\r\n+            code.iload().setParam(1);\r\n+            LookupSwitchInstruction lswitch = code.lookupswitch();\r\n+\r\n+            // establish switch target, then move before it\r\n+            Instruction switchTarget = code.iload().setLocal(arrIdx);\r\n+            code.previous();\r\n+\r\n+            FieldMetaData[] fields = meta.getFields();\r\n+            int cacheable = 0;\r\n+            for (int i = 0; i < fields.length; i++) {\r\n+                if (!usesImplData(fields[i]))\r\n+                    continue;\r\n+                // case x: arrIdx = y; break;\r\n+                lswitch.addCase(i, code.constant().setValue(cacheable++));\r\n+                code.istore().setLocal(arrIdx);\r\n+                code.go2().setTarget(switchTarget);\r\n+            }\r\n+            lswitch.setDefaultTarget(switchTarget);\r\n+            code.next();    // step over switch target\r\n+\r\n+            // if (arrIdx != -1)\r\n+            code.constant().setValue(-1);\r\n+            JumpInstruction ifins = code.ificmpne();\r\n+            code.vreturn();\r\n+\r\n+            // create null target, then move before it\r\n+            Instruction nullTarget = code.aload().setThis();\r\n+            code.previous();\r\n+\r\n+            // if (loaded)\r\n+            ifins.setTarget(code.iload().setParam(2));\r\n+            code.ifeq().setTarget(nullTarget);\r\n+\r\n+            // Object obj = sm.getImplData(index)\r\n+            int obj = code.getNextLocalsIndex();\r\n+            code.aload().setParam(0);\r\n+            code.iload().setParam(1);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getImplData\", Object.class, new Class[]{ int.class });\r\n+            code.astore().setLocal(obj);\r\n+\r\n+            // if (obj != null)\r\n+            code.aload().setLocal(obj);\r\n+            code.ifnull().setTarget(nullTarget);\r\n+\r\n+            // if (fieldImpl == null)\r\n+            // \t\tfieldImpl = new Object[fields];\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(impl);\r\n+            ifins = code.ifnonnull();\r\n+            code.aload().setThis();\r\n+            code.constant().setValue(count);\r\n+            code.anewarray().setType(Object.class);\r\n+            code.putfield().setField(impl);\r\n+\r\n+            // fieldImpl[arrIdx] = obj;\r\n+            // return;\r\n+            ifins.setTarget(code.aload().setThis());\r\n+            code.getfield().setField(impl);\r\n+            code.iload().setLocal(arrIdx);\r\n+            code.aload().setLocal(obj);\r\n+            code.aastore();\r\n+            code.vreturn();\r\n+\r\n+            // if (fieldImpl != null)\r\n+            // \t\tfieldImpl[index] = null;\r\n+            code.next(); // step over nullTarget\r\n+            code.getfield().setField(impl);\r\n+            ifins = code.ifnonnull();\r\n+            code.vreturn();\r\n+            ifins.setTarget(code.aload().setThis());\r\n+            code.getfield().setField(impl);\r\n+            code.iload().setLocal(arrIdx);\r\n+            code.constant().setNull();\r\n+            code.aastore();\r\n+            code.vreturn();\r\n+        }\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    /**\r\n+     * Add methods for loading and storing version data.\r\n+     */\r\n+    protected void addVersionMethods(BCClass bc) {\r\n+        // void storeVersion(OpenJPAStateManager sm);\r\n+        addBeanField(bc, \"version\", Object.class);\r\n+        BCMethod meth = bc.declareMethod(\"storeVersion\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+        Code code = meth.getCode(true);\r\n+\r\n+        // version = sm.getVersion();\r\n+        code.aload().setThis();\r\n+        code.aload().setParam(0);\r\n+        code.invokeinterface()\r\n+            .setMethod(OpenJPAStateManager.class, \"getVersion\",\r\n+                Object.class, null);\r\n+        code.putfield().setField(\"version\", Object.class);\r\n+        code.vreturn();\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+\r\n+        // void loadVersion(OpenJPAStateManager sm)\r\n+        meth = bc.declareMethod(\"loadVersion\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+        code = meth.getCode(true);\r\n+\r\n+        // if (sm.getVersion() == null)\r\n+        // \t\tsm.setVersion(version);\r\n+        code.aload().setParam(0);\r\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+            \"getVersion\", Object.class, null);\r\n+        JumpInstruction ifins = code.ifnonnull();\r\n+        code.aload().setParam(0);\r\n+        code.aload().setThis();\r\n+        code.getfield().setField(\"version\", Object.class);\r\n+        code.invokeinterface()\r\n+            .setMethod(OpenJPAStateManager.class, \"setVersion\",\r\n+                void.class, new Class[]{ Object.class });\r\n+        ifins.setTarget(code.vreturn());\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    private void addLoadMethod(BCClass bc, ClassMetaData meta) {\r\n+        // public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\r\n+        // \t\tObject context)\r\n+        Code code = addLoadMethod(bc, false);\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        Collection jumps = new LinkedList();\r\n+        Collection jumps2;\r\n+\t\t\r\n+        int local = code.getNextLocalsIndex();\r\n+        code.constant().setNull();\r\n+        code.astore().setLocal(local);\r\n+        int inter = code.getNextLocalsIndex();\r\n+        code.constant().setNull();\r\n+        code.astore().setLocal(inter);\r\n+\r\n+        int objectCount = 0;\r\n+        boolean intermediate;\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            jumps2 = new LinkedList();\r\n+            intermediate = usesIntermediate(fmds[i]);\r\n+            setTarget(code.aload().setThis(), jumps);\r\n+            // if (loaded.get(i)) or (!loaded.get(i)) depending on inter resp\r\n+            code.getfield().setField(\"loaded\", BitSet.class);\r\n+            code.constant().setValue(i);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+                boolean.class, new Class[]{ int.class });\r\n+            jumps.add(code.ifne());\r\n+\r\n+            if (intermediate)\r\n+                addLoadIntermediate(code, i, objectCount, jumps2, inter);\r\n+            jumps2.add(code.go2());\r\n+\r\n+            // if (fetch.requiresFetch(fmds[i])!=FetchConfiguration.FETCH_NONE)\r\n+            setTarget(code.aload().setParam(1), jumps);\r\n+            code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getMetaData\", ClassMetaData.class, null);\r\n+            code.constant().setValue(fmds[i].getIndex());\r\n+            code.invokevirtual().setMethod(ClassMetaData.class,\r\n+                \"getField\", FieldMetaData.class, new Class[]{int.class});\r\n+            code.invokeinterface().setMethod (FetchConfiguration.class, \r\n+                \"requiresFetch\", int.class, new Class[]{FieldMetaData.class});\r\n+            code.constant().setValue(FetchConfiguration.FETCH_NONE);\r\n+            jumps2.add(code.ificmpeq());\r\n+            addLoad(bc, code, fmds[i], objectCount, local, false);\r\n+\r\n+            jumps = jumps2;\r\n+            if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\r\n+                objectCount++;\r\n+        }\r\n+        setTarget(code.vreturn(), jumps);\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    private void addLoadWithFieldsMethod(BCClass bc, ClassMetaData meta) {\r\n+        Code code = addLoadMethod(bc, true);\r\n+        // public void load(OpenJPAStateManager sm, BitSet fields,\r\n+        // \t\tFetchConfiguration fetch, Object conn)\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        Collection jumps = new LinkedList();\r\n+        Collection jumps2;\r\n+        int objectCount = 0;\r\n+        boolean intermediate;\r\n+        int local = code.getNextLocalsIndex();\r\n+        code.constant().setNull();\r\n+        code.astore().setLocal(local);\r\n+        int inter = code.getNextLocalsIndex();\r\n+        code.constant().setNull();\r\n+        code.astore().setLocal(inter);\r\n+\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            jumps2 = new LinkedList();\r\n+            intermediate = usesIntermediate(fmds[i]);\r\n+            // if (fields.get(i))\r\n+            // {\r\n+            // \t\tif (loaded.get(i))\r\n+            setTarget(code.aload().setParam(1), jumps);\r\n+            code.constant().setValue(i);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+                boolean.class, new Class[]{ int.class });\r\n+            jumps2.add(code.ifeq());\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(\"loaded\", BitSet.class);\r\n+            code.constant().setValue(i);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+                boolean.class, new Class[]{ int.class });\r\n+            if (intermediate)\r\n+                jumps.add(code.ifeq());\r\n+            else\r\n+                jumps2.add(code.ifeq());\r\n+\r\n+            addLoad(bc, code, fmds[i], objectCount, local, true);\r\n+            if (usesImplData(fmds[i])) {\r\n+                // loadImplData(sm, i);\r\n+                code.aload().setThis();\r\n+                code.aload().setParam(0);\r\n+                code.constant().setValue(i);\r\n+                code.invokevirtual().setMethod(\"loadImplData\", void.class,\r\n+                    new Class[]{ OpenJPAStateManager.class, int.class });\r\n+            }\r\n+\r\n+            // fields.clear(i);\r\n+            code.aload().setParam(1);\r\n+            code.constant().setValue(i);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"clear\", void.class,\r\n+                new Class[] { int.class });\r\n+\r\n+            jumps2.add(code.go2());\r\n+\r\n+            if (intermediate)\r\n+                setTarget(addLoadIntermediate\r\n+                    (code, i, objectCount, jumps2, inter), jumps);\r\n+\r\n+            jumps = jumps2;\r\n+            if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\r\n+                objectCount++;\r\n+        }\r\n+        setTarget(code.vreturn(), jumps);\r\n+        code.calculateMaxStack();\r\n+        code.calculateMaxLocals();\r\n+    }\r\n+\r\n+    /**\r\n+     * Declare and start the base load method.\r\n+     */\r\n+    private Code addLoadMethod(BCClass bc, boolean fields) {\r\n+        Class[] args = null;\r\n+        if (fields)\r\n+            args = new Class[]{ OpenJPAStateManager.class, BitSet.class,\r\n+                FetchConfiguration.class, Object.class };\r\n+        else\r\n+            args = new Class[]{ OpenJPAStateManager.class,\r\n+                FetchConfiguration.class, Object.class };\r\n+        BCMethod load = bc.declareMethod(\"load\", void.class, args);\r\n+        Code code = load.getCode(true);\r\n+\r\n+        //loadVersion(sm);\r\n+        code.aload().setThis();\r\n+        code.aload().setParam(0);\r\n+        code.invokevirtual().setMethod(\"loadVersion\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+\r\n+        //loadImplData(sm);\r\n+        code.aload().setThis();\r\n+        code.aload().setParam(0);\r\n+        code.invokevirtual().setMethod(\"loadImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+        return code;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add the field load.\r\n+     */\r\n+    private Instruction addLoad(BCClass bc, Code code, FieldMetaData fmd,\r\n+        int objectCount, int local, boolean fields) {\r\n+        int index = fmd.getIndex();\r\n+        int typeCode = replaceType(fmd);\r\n+        Instruction first;\r\n+        if (typeCode < JavaTypes.OBJECT) {\r\n+            // sm.store<type>(i, field<i>)\r\n+            Class type = forType(fmd.getTypeCode());\r\n+            first = code.aload().setParam(0);\r\n+            code.constant().setValue(index);\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(getFieldName(index), type);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"store\" + StringUtils.capitalize(type.getName()),\r\n+                void.class, new Class[]{ int.class, type });\r\n+        } else {\r\n+            // fmd = sm.getMetaData().getField(i);\r\n+            int offset = fields ? 1 : 0;\r\n+            first = code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getMetaData\", ClassMetaData.class, null);\r\n+            code.constant().setValue(fmd.getIndex());\r\n+            code.invokevirtual().setMethod(ClassMetaData.class, \"getField\",\r\n+                FieldMetaData.class, new Class[]{ int.class });\r\n+            code.astore().setLocal(local);\r\n+            // sm.storeField(i, toField(sm, fmd, objects[objectCount],\r\n+            // \t\tfetch, context);\r\n+            code.aload().setParam(0);\r\n+            code.constant().setValue(index);\r\n+            code.aload().setThis();\r\n+            code.aload().setParam(0);\r\n+            code.aload().setLocal(local);\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(\"objects\", Object[].class);\r\n+            code.constant().setValue(objectCount);\r\n+            code.aaload();\r\n+            code.aload().setParam(1 + offset);\r\n+            code.aload().setParam(2 + offset);\r\n+            code.invokevirtual().setMethod(bc.getName(), \"toField\",\r\n+                Object.class.getName(), toStrings(new Class[]{ \r\n+                OpenJPAStateManager.class, FieldMetaData.class,\r\n+                Object.class, FetchConfiguration.class, Object.class }));\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"storeField\", void.class,\r\n+                new Class[]{ int.class, Object.class });\r\n+        }\r\n+        return first;\r\n+    }\r\n+\r\n+    /**\r\n+     * Load intermediate data if possible.\r\n+     */\r\n+    private Instruction addLoadIntermediate(Code code, int index,\r\n+        int objectCount, Collection jumps2, int inter) {\r\n+        // {\r\n+        // \t\tObject inter = objects[objectCount];\r\n+        Instruction first = code.aload().setThis();\r\n+        code.getfield().setField(\"objects\", Object[].class);\r\n+        code.constant().setValue(objectCount);\r\n+        code.aaload();\r\n+        code.astore().setLocal(inter);\r\n+        // \t\tif (inter != null && !sm.getLoaded().get(index))\r\n+        code.aload().setLocal(inter);\r\n+        jumps2.add(code.ifnull());\r\n+        code.aload().setParam(0);\r\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+            \"getLoaded\", BitSet.class, null);\r\n+        code.constant().setValue(index);\r\n+        code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+            boolean.class, new Class[]{ int.class });\r\n+        jumps2.add(code.ifne());\r\n+        //\t\t\tsm.setIntermediate(index, inter);\r\n+        //\t}  // end else\r\n+        code.aload().setParam(0);\r\n+        code.constant().setValue(index);\r\n+        code.aload().setLocal(inter);\r\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+            \"setIntermediate\", void.class,\r\n+            new Class[]{ int.class, Object.class });\r\n+        return first;\r\n+    }\r\n+\r\n+    private void addStoreMethods(BCClass bc, ClassMetaData meta) {\r\n+        // i.e. void store(OpenJPAStateManager sm, BitSet fields);\r\n+        addStoreMethod(bc, meta, true);\r\n+        // i.e. void store(OpenJPAStateManager sm);\r\n+        addStoreMethod(bc, meta, false);\r\n+    }\r\n+\r\n+    private void addStoreMethod(BCClass bc, ClassMetaData meta,\r\n+        boolean fields) {\r\n+        BCMethod store;\r\n+        if (fields)\r\n+            store = bc.declareMethod(\"store\", void.class,\r\n+                new Class[]{ OpenJPAStateManager.class, BitSet.class });\r\n+        else\r\n+            store = bc.declareMethod(\"store\", void.class,\r\n+                new Class[]{ OpenJPAStateManager.class });\r\n+        Code code = store.getCode(true);\r\n+\r\n+        // initialize();\r\n+        code.aload().setThis();\r\n+        code.invokevirtual().setMethod(\"initialize\", void.class, null);\r\n+\r\n+        // storeVersion(sm);\r\n+        code.aload().setThis();\r\n+        code.aload().setParam(0);\r\n+        code.invokevirtual().setMethod(\"storeVersion\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+\r\n+        // storeImplData(sm);\r\n+        code.aload().setThis();\r\n+        code.aload().setParam(0);\r\n+        code.invokevirtual().setMethod(\"storeImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        Collection jumps = new LinkedList();\r\n+        int objectCount = 0;\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            if (fields) {\r\n+                //  if (fields != null && fields.get(index))\r\n+                setTarget(code.aload().setParam(1), jumps);\r\n+                jumps.add(code.ifnull());\r\n+                code.aload().setParam(1);\r\n+                code.constant().setValue(i);\r\n+                code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+                    boolean.class, new Class[]{ int.class });\r\n+                jumps.add(code.ifeq());\r\n+            } else {\r\n+                // if (sm.getLoaded().get(index)))\r\n+                setTarget(code.aload().setParam(0), jumps);\r\n+                code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                    \"getLoaded\", BitSet.class, null);\r\n+                code.constant().setValue(i);\r\n+                code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+                    boolean.class, new Class[]{ int.class });\r\n+                jumps.add(code.ifeq());\r\n+            }\r\n+            addStore(bc, code, fmds[i], objectCount);\r\n+            if (usesIntermediate(fmds[i])) {\r\n+                JumpInstruction elseIns = code.go2();\r\n+                // else if (!loaded.get(index))\r\n+                setTarget(code.aload().setThis(), jumps);\r\n+                jumps.add(elseIns);\r\n+                code.getfield().setField(\"loaded\", BitSet.class);\r\n+                code.constant().setValue(i);\r\n+                code.invokevirtual().setMethod(BitSet.class, \"get\",\r\n+                    boolean.class, new Class[]{ int.class });\r\n+                jumps.add(code.ifne());\r\n+                // Object val = sm.getIntermediate(index);\r\n+                // if (val != null)\r\n+                // \t\tobjects[objectCount] = val;\r\n+                code.aload().setParam(0);\r\n+                code.constant().setValue(i);\r\n+                code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                    \"getIntermediate\", Object.class, new Class[]{ int.class });\r\n+                int local = code.getNextLocalsIndex();\r\n+                code.astore().setLocal(local);\r\n+                code.aload().setLocal(local);\r\n+                jumps.add(code.ifnull());\r\n+                code.aload().setThis();\r\n+                code.getfield().setField(\"objects\", Object[].class);\r\n+                code.constant().setValue(objectCount);\r\n+                code.aload().setLocal(local);\r\n+                code.aastore();\r\n+            }\r\n+            if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\r\n+                objectCount++;\r\n+        }\r\n+        setTarget(code.vreturn(), jumps);\r\n+        code.calculateMaxLocals();\r\n+        code.calculateMaxStack();\r\n+    }\r\n+\r\n+    private void addStore(BCClass bc, Code code, FieldMetaData fmd,\r\n+        int objectCount) {\r\n+        int typeCode = replaceType(fmd);\r\n+        int index = fmd.getIndex();\r\n+        if (typeCode < JavaTypes.OBJECT) {\r\n+            Class type = forType(typeCode);\r\n+            // field<i> = sm.fetch<Type>(index)\r\n+            code.aload().setThis();\r\n+            code.aload().setParam(0);\r\n+            code.constant().setValue(index);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"fetch\" + StringUtils.capitalize(type.getName()), type,\r\n+                new Class[]{ int.class });\r\n+            code.putfield().setField(getFieldName(index), type);\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(\"loaded\", BitSet.class);\r\n+            code.constant().setValue(index);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"set\", void.class,\r\n+                new Class[]{ int.class });\r\n+        } else {\r\n+            // Object val = toData(sm.getMetaData().getField(index),\r\n+            // \t\tsm.fetchField(index, false), sm.getContext());\r\n+            int local = code.getNextLocalsIndex();\r\n+            code.aload().setThis();\r\n+            code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getMetaData\", ClassMetaData.class, null);\r\n+            code.constant().setValue(fmd.getIndex());\r\n+            code.invokevirtual().setMethod(ClassMetaData.class,\r\n+                \"getField\", FieldMetaData.class, new Class[]{ int.class });\r\n+            code.aload().setParam(0);\r\n+            code.constant().setValue(fmd.getIndex());\r\n+            code.constant().setValue(false);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"fetchField\", Object.class, new Class[]\r\n+                { int.class, boolean.class });\r\n+            code.aload().setParam(0);\r\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+                \"getContext\", StoreContext.class, null);\r\n+            code.invokevirtual().setMethod(bc.getName(), \"toData\",\r\n+                Object.class.getName(), toStrings(new Class []{\r\n+                FieldMetaData.class, Object.class, StoreContext.class }));\r\n+            code.astore().setLocal(local);\r\n+\r\n+            // if (val == NULL) {\r\n+            // \t\tval = null;\r\n+            // \t\tloaded.clear(index);\r\n+            // \t} else\r\n+            // \t\tloaded.set(index);\r\n+            // \tobjects[objectCount] = val;\r\n+            code.aload().setLocal(local);\r\n+            code.getstatic().setField(AbstractPCData.class, \"NULL\",\r\n+                Object.class);\r\n+            JumpInstruction ifins = code.ifacmpne();\r\n+            code.constant().setNull();\r\n+            code.astore().setLocal(local);\r\n+            code.aload().setThis();\r\n+            code.getfield().setField(\"loaded\", BitSet.class);\r\n+            code.constant().setValue(index);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"clear\", void.class,\r\n+                new Class[]{ int.class });\r\n+            JumpInstruction go2 = code.go2();\r\n+            ifins.setTarget(code.aload().setThis());\r\n+            code.getfield().setField(\"loaded\", BitSet.class);\r\n+            code.constant().setValue(index);\r\n+            code.invokevirtual().setMethod(BitSet.class, \"set\", void.class,\r\n+                new Class[]{ int.class });\r\n+            go2.setTarget(code.aload().setThis());\r\n+            code.getfield().setField(\"objects\", Object[].class);\r\n+            code.constant().setValue(objectCount);\r\n+            code.aload().setLocal(local);\r\n+            code.aastore();\r\n+        }\r\n+        if (!usesImplData(fmd))\r\n+            return;\r\n+\r\n+        // storeImplData(sm, i, loaded.get(i);\r\n+        code.aload().setThis();\r\n+        code.aload().setParam(0);\r\n+        code.constant().setValue(index);\r\n+        code.aload().setThis();\r\n+        code.getfield().setField(\"loaded\", BitSet.class);\r\n+        code.constant().setValue(index);\r\n+        code.invokevirtual().setMethod(BitSet.class, \"get\", boolean.class,\r\n+            new Class[]{ int.class });\r\n+        code.invokevirtual().setMethod(\"storeImplData\", void.class,\r\n+            new Class[]{ OpenJPAStateManager.class, int.class, boolean.class });\r\n+    }\r\n+\r\n+    private void addNewEmbedded(BCClass bc) {\r\n+        // void newEmbeddedPCData(OpenJPAStateManager embedded)\r\n+        BCMethod meth = bc.declareMethod(\"newEmbeddedPCData\", PCData.class,\r\n+            new Class[]{ OpenJPAStateManager.class });\r\n+        Code code = meth.getCode(true);\r\n+        // return getStorageGenerator().generatePCData\r\n+        // \t\t(sm.getId(), sm.getMetaData());\r\n+        code.aload().setThis();\r\n+        code.getfield().setField(\"storageGenerator\", PCDataGenerator.class);\r\n+        code.aload().setParam(0);\r\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+            \"getId\", Object.class, null);\r\n+        code.aload().setParam(0);\r\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class,\r\n+            \"getMetaData\", ClassMetaData.class, null);\r\n+        code.invokevirtual().setMethod(PCDataGenerator.class,\r\n+            \"generatePCData\", PCData.class, new Class[]\r\n+            { Object.class, ClassMetaData.class });\r\n+        code.areturn();\r\n+        code.calculateMaxLocals();\r\n+        code.calculateMaxStack();\r\n+    }\r\n+\r\n+    private void addGetData(BCClass bc) {\r\n+        // return getObjectField(i);\r\n+        BCMethod method = bc.declareMethod(\"getData\", Object.class,\r\n+            new Class[]{ int.class });\r\n+        Code code = method.getCode(true);\r\n+        code.aload().setThis();\r\n+        code.iload().setParam(0);\r\n+        code.invokevirtual().setMethod(\"getObject\", Object.class,\r\n+            new Class[]{ int.class });\r\n+        code.areturn();\r\n+        code.calculateMaxLocals();\r\n+        code.calculateMaxStack();\r\n+    }\r\n+\r\n+    /////////////\r\n+    // Utilities\r\n+    /////////////\r\n+\r\n+    /**\r\n+     * Return a valid {@link JavaTypes} constant for the given field\r\n+     */\r\n+    protected int replaceType(FieldMetaData fmd) {\r\n+        if (usesIntermediate(fmd))\r\n+            return JavaTypes.OBJECT;\r\n+        return fmd.getTypeCode();\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the given field uses a cacheable intermediate value.\r\n+     */\r\n+    protected boolean usesIntermediate(FieldMetaData fmd) {\r\n+        return fmd.usesIntermediate();\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the given type might have cacheable class-level impl data.\r\n+     */\r\n+    protected boolean usesImplData(ClassMetaData meta) {\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the given field might have cacheable impl data.\r\n+     */\r\n+    protected boolean usesImplData(FieldMetaData fmd) {\r\n+        return fmd.usesImplData() == null;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of fields with cacheable impl data.\r\n+     */\r\n+    private int countImplDataFields(ClassMetaData meta) {\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        int count = 0;\r\n+        for (int i = 0; i < fmds.length; i++)\r\n+            if (usesImplData(fmds[i]))\r\n+                count++;\r\n+        return count;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add method which defers to AbstractPCData.\r\n+     */\r\n+    protected void callAbstractPCData(BCClass bc, String name, Class retType,\r\n+        Class[] args) {\r\n+        BCMethod meth = bc.declareMethod(name, retType, args);\r\n+        Code code = meth.getCode(true);\r\n+        code.aload().setThis();\r\n+        for (int i = 0; i < args.length; i++)\r\n+            code.xload().setParam(i).setType(args[i]);\r\n+        code.invokevirtual().setMethod(AbstractPCData.class, name, retType,\r\n+            args);\r\n+        if (!void.class.equals(retType))\r\n+            code.xreturn().setType(retType);\r\n+        code.calculateMaxLocals();\r\n+        code.calculateMaxStack();\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the collection of {@link JumpInstruction}s to the given instruction,\r\n+     * clearing the collection in the process.\r\n+     */\r\n+    protected void setTarget(Instruction ins, Collection jumps) {\r\n+        for (Iterator it = jumps.iterator(); it.hasNext();)\r\n+            ((JumpInstruction) it.next()).setTarget(ins);\r\n+        jumps.clear();\r\n+    }\r\n+\r\n+    /**\r\n+     * Transform the given array of classes to strings.\r\n+     */\r\n+    private static String[] toStrings(Class[] cls) {\r\n+        String[] strings = new String[cls.length];\r\n+        for (int i = 0; i < strings.length; i++)\r\n+            strings[i] = cls[i].getName();\r\n+        return strings;\r\n+    }\r\n+\r\n+    /**\r\n+     * Dynamic {@link PCData}s generated will implement this interface\r\n+     * to simplify initialization.\r\n+     */\r\n+    public static interface DynamicPCData extends PCData {\r\n+\r\n+        public void setId(Object oid);\r\n+\r\n+        public PCDataGenerator getStorageGenerator();\r\n+\r\n+        public void setStorageGenerator (PCDataGenerator generator);\r\n+\t}\r\n+}\r"},{"sha":"5b056f92864ff432639da4395de86ffa7504ae5d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":234,"deletions":89,"changes":323,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -47,7 +47,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n@@ -65,6 +64,8 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n@@ -117,7 +118,10 @@\n     public static final int ENHANCE_INTERFACE = 2 << 1;\n     public static final int ENHANCE_PC = 2 << 2;\n \n-    private static final String PRE = \"pc\";\n+    public static final String PRE = \"pc\";\n+    public static final String ISDETACHEDSTATEDEFINITIVE = PRE \n+        + \"isDetachedStateDefinitive\";\n+\n     private static final Class PCTYPE = PersistenceCapable.class;\n     private static final String SM = PRE + \"StateManager\";\n     private static final Class SMTYPE = StateManager.class;\n@@ -175,7 +179,9 @@\n     private boolean _bcsConfigured = false;\n \n     /**\n-     * Constructor. Supply configuration and type to enhance.\n+     * Constructor. Supply configuration and type to enhance. This will look\n+     * up the metadata for <code>type</code> from <code>conf</code>'s\n+     * repository.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n         this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n@@ -184,12 +190,14 @@ public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n     }\n \n     /**\n-     * Constructor. Supply configuration and type to enhance.\n+     * Constructor. Supply configuration and type to enhance. This will look\n+     * up the metadata for <code>meta</code> by converting back to a class\n+     * and then loading from <code>conf</code>'s repository.\n      */\n-    public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n+    public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData meta) {\n         this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n-            .loadProjectClassAction(new Project(), type.getDescribedType())),\n-            type.getRepository());\n+            .loadProjectClassAction(new Project(), meta.getDescribedType())),\n+            meta.getRepository());\n     }\n \n     /**\n@@ -240,11 +248,71 @@ public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n         _meta = _repos.getMetaData(type.getType(), loader, false);\n     }\n \n+    /**\n+     * Constructor. Supply repository. The repository's configuration will\n+     * be used, and the metadata passed in will be used as-is without doing\n+     * any additional lookups. This is useful when running the enhancer\n+     * during metadata load.\n+     *\n+     * @param repos a metadata repository to use for metadata access,\n+     * or null to create a new reporitory; the repository\n+     * from the given configuration isn't used by default\n+     * because the configuration might be an\n+     * implementation-specific subclass whose metadata\n+     * required more than just base metadata files\n+     * @param type the bytecode representation fo the type to\n+     * enhance; this can be created from any stream or file\n+     * @param meta the metadata to use for processing this type.\n+     *\n+     * @since 1.1.0\n+     */\n+    public PCEnhancer(MetaDataRepository repos, BCClass type,\n+        ClassMetaData meta) {\n+        _managedType = type;\n+        _pc = type;\n+\n+        _log = repos.getConfiguration()\n+            .getLog(OpenJPAConfiguration.LOG_ENHANCE);\n+\n+        _repos = repos;\n+        _meta = meta;\n+    }\n+\n     static String toPCSubclassName(Class cls) {\n         return Strings.getPackageName(PCEnhancer.class) + \".\"\n             + cls.getName().replace('.', '$') + \"$pcsubclass\";\n     }\n \n+    /**\n+     * Whether or not <code>className</code> is the name for a\n+     * dynamically-created persistence-capable subclass.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static boolean isPCSubclassName(String className) {\n+        return className.startsWith(Strings.getPackageName(PCEnhancer.class))\n+            && className.endsWith(\"$pcsubclass\");\n+    }\n+\n+    /**\n+     * If <code>className</code> is a dynamically-created persistence-capable\n+     * subclass name, returns the name of the class that it subclasses.\n+     * Otherwise, returns <code>className</code>.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static String toManagedTypeName(String className) {\n+        if (isPCSubclassName(className)) {\n+            className = className.substring(\n+                Strings.getPackageName(PCEnhancer.class).length() + 1);\n+            className = className.substring(0, className.lastIndexOf(\"$\"));\n+            // this is not correct for nested PCs\n+            className = className.replace('$', '.');\n+        }\n+        \n+        return className;\n+    }\n+\n     /**\n      * Constructor. Supply configuration, type, and metadata.\n      */\n@@ -422,7 +490,7 @@ public int run() {\n \n         try {\n             // if managed interface, skip\n-            if (_managedType.isInterface())\n+            if (_pc.isInterface())\n                 return ENHANCE_INTERFACE;\n \n             // check if already enhanced\n@@ -467,7 +535,8 @@ public int run() {\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n-            throw new GeneralException(e);\n+            throw new GeneralException(_loc.get(\"enhance-error\",\n+                _managedType.getType().getName(), e.getMessage()), e);\n         }\n     }\n \n@@ -494,8 +563,6 @@ private void configureBCs() {\n                 } else {\n                     _isAlreadySubclassed = true;\n                 }\n-            } else {\n-                _pc = _managedType;\n             }\n \n             _bcsConfigured = true;\n@@ -695,8 +762,8 @@ private static BCField findField(BCMethod meth, Instruction template,\n \n         BCField field = null, cur;\n         Instruction templateIns, prevIns, earlierIns;\n-        int backupCount = 3;\n         while (code.searchForward(template)) {\n+            int backupCount = 3;\n             templateIns = code.previous();\n             if (!code.hasPrevious())\n                 return null;\n@@ -2070,6 +2137,18 @@ private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n                     code.invokevirtual().setMethod(StringId.class, \"getId\",\n                         String.class, null);\n                     break;\n+                case JavaTypes.BIGDECIMAL:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(BigDecimalId.class);\n+                    code.invokevirtual().setMethod(BigDecimalId.class, \"getId\",\n+                        BigDecimalId.class, null);\n+                    break;\n+                case JavaTypes.BIGINTEGER:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(BigIntegerId.class);\n+                    code.invokevirtual().setMethod(BigIntegerId.class, \"getId\",\n+                        BigIntegerId.class, null);\n+                    break;\n                 default:\n                     code.aload().setLocal(oid);\n                     code.checkcast().setType(ObjectId.class);\n@@ -2612,8 +2691,10 @@ private void addStaticInitializer() {\n             }\n \n             // pcPCSuperclass = <superClass>;\n-            code.classconstant().setClass(getType(_meta.\n-                getPCSuperclassMetaData()));\n+            // this intentionally calls getDescribedType() directly\n+            // instead of PCEnhancer.getType()\n+            code.classconstant().setClass(\n+                _meta.getPCSuperclassMetaData().getDescribedType());\n             code.putstatic().setField(SUPER, Class.class);\n         }\n \n@@ -2654,7 +2735,7 @@ private void addStaticInitializer() {\n         // PCRegistry.register (cls,\n         //\tpcFieldNames, pcFieldTypes, pcFieldFlags,\n         //  pcPCSuperclass, alias, new XXX ());\n-        code.classconstant().setClass(_managedType);\n+        code.classconstant().setClass(_meta.getDescribedType());\n         code.getstatic().setField(PRE + \"FieldNames\", String[].class);\n         code.getstatic().setField(PRE + \"FieldTypes\", Class[].class);\n         code.getstatic().setField(PRE + \"FieldFlags\", byte[].class);\n@@ -2717,6 +2798,9 @@ private void addSerializationCode() {\n             return;\n \n         if (getCreateSubclass()) {\n+            // ##### what should happen if a type is Externalizable? It looks\n+            // ##### like Externalizable classes will not be serialized as PCs\n+            // ##### based on this logic.\n             if (!Externalizable.class.isAssignableFrom(\n                 _meta.getDescribedType()))\n                 addSubclassSerializationCode();\n@@ -2736,7 +2820,10 @@ private void addSerializationCode() {\n             } catch (Throwable t) {\n                 // last-chance catch for bug #283 (which can happen\n                 // in a variety of ClassLoading environments)\n-                _log.warn(_loc.get(\"enhance-uid-access\", _meta), t);\n+                if (_log.isTraceEnabled())\n+                    _log.warn(_loc.get(\"enhance-uid-access\", _meta), t);\n+                else\n+                    _log.warn(_loc.get(\"enhance-uid-access\", _meta));\n             }\n \n             // if we couldn't access the serialVersionUID, we will have to\n@@ -2915,27 +3002,45 @@ private void modifyReadObjectMethod(BCMethod method, boolean full) {\n      */\n     private void addIsDetachedMethod()\n         throws NoSuchMethodException {\n-        // public boolean pcIsDetached ()\n+        // public boolean pcIsDetached()\n         BCMethod method = _pc.declareMethod(PRE + \"IsDetached\",\n             Boolean.class, null);\n         method.makePublic();\n         Code code = method.getCode(true);\n-        writeIsDetachedMethod(code);\n+        boolean needsDefinitiveMethod = writeIsDetachedMethod(code);\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        if (!needsDefinitiveMethod) \n+            return;\n+\n+        // private boolean pcIsDetachedStateDefinitive()\n+        //   return false;\n+        // auxilliary enhancers may change the return value of this method\n+        // if their specs consider detached state definitive\n+        method = _pc.declareMethod(ISDETACHEDSTATEDEFINITIVE, boolean.class,\n+            null);\n+        method.makePrivate();\n+        code = method.getCode(true);\n+        code.constant().setValue(false);\n+        code.ireturn();\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n     }\n \n     /**\n      * Creates the body of the pcIsDetached() method to determine if an\n      * instance is detached.\n+     *\n+     * @return true if we need a pcIsDetachedStateDefinitive method, false\n+     * otherwise\n      */\n-    private void writeIsDetachedMethod(Code code)\n+    private boolean writeIsDetachedMethod(Code code)\n         throws NoSuchMethodException {\n         // not detachable: return Boolean.FALSE\n         if (!_meta.isDetachable()) {\n             code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n             code.areturn();\n-            return;\n+            return false;\n         }\n \n         // if (sm != null)\n@@ -2983,7 +3088,7 @@ private void writeIsDetachedMethod(Code code)\n                 ifins.setTarget(target);\n                 notdeser.setTarget(target);\n                 code.areturn();\n-                return;\n+                return false;\n             }\n         }\n \n@@ -2993,9 +3098,9 @@ private void writeIsDetachedMethod(Code code)\n         if (notdeser != null)\n             notdeser.setTarget(target);\n \n-        // allow users with version fields to manually construct a \"detached\"\n-        // instance, so check version before taking into account non-existent\n-        // detached state\n+        // allow users with version or auto-assigned pk fields to manually \n+        // construct a \"detached\" instance, so check these before taking into \n+        // account non-existent detached state\n \n         // consider detached if version is non-default\n         FieldMetaData version = _meta.getVersionField();\n@@ -3010,41 +3115,13 @@ private void writeIsDetachedMethod(Code code)\n             ifins.setTarget(code.getstatic().setField(Boolean.class, \"FALSE\",\n                 Boolean.class));\n             code.areturn();\n-            return;\n-        }\n-\n-        // no detached state: if instance uses detached state and it's not\n-        // synthetic or the instance is not serializable or the state isn't\n-        // transient, must not be detached\n-        if (state == null\n-            && (!ClassMetaData.SYNTHETIC.equals(_meta.getDetachedState())\n-            || !Serializable.class.isAssignableFrom(_meta.getDescribedType())\n-            || !_repos.getConfiguration().getDetachStateInstance().\n-            isDetachedStateTransient())) {\n-            // return Boolean.FALSE\n-            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n-            code.areturn();\n-            return;\n-        }\n-\n-        // no detached state: if instance uses detached state (and must be\n-        // synthetic and transient in serializable instance at this point),\n-        // not detached if state not set to DESERIALIZED\n-        if (state == null) {\n-            // if (pcGetDetachedState () == null) // instead of DESERIALIZED\n-            //     return Boolean.FALSE;\n-            loadManagedInstance(code, false);\n-            code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n-                Object.class, null);\n-            ifins = code.ifnonnull();\n-            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n-            code.areturn();\n-            ifins.setTarget(code.nop());\n+            return false;\n         }\n \n         // consider detached if auto-genned primary keys are non-default\n         ifins = null;\n         JumpInstruction ifins2 = null;\n+        boolean hasAutoAssignedPK = false;\n         if (state != Boolean.TRUE\n             && _meta.getIdentityType() == ClassMetaData.ID_APPLICATION) {\n             // for each pk field:\n@@ -3078,13 +3155,65 @@ private void writeIsDetachedMethod(Code code)\n             }\n         }\n \n-        // give up; we just don't know\n-        target = code.constant().setNull();\n+        // create artificial target to simplify\n+        target = code.nop();\n         if (ifins != null)\n             ifins.setTarget(target);\n         if (ifins2 != null)\n             ifins2.setTarget(target);\n+\n+        // if has auto-assigned pk and we get to this point, must have default\n+        // value, so must be new instance\n+        if (hasAutoAssignedPK) {\n+            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+            code.areturn();\n+            return false;\n+        }\n+\n+        // if detached state is not definitive, just give up now and return\n+        // null so that the runtime will perform a DB lookup to determine\n+        // whether we're detached or new\n+        code.aload().setThis();\n+        code.invokespecial().setMethod(ISDETACHEDSTATEDEFINITIVE, boolean.class,\n+            null);\n+        ifins = code.ifne();\n+        code.constant().setNull();\n+        code.areturn();\n+        ifins.setTarget(code.nop());\n+\n+        // no detached state: if instance uses detached state and it's not\n+        // synthetic or the instance is not serializable or the state isn't\n+        // transient, must not be detached\n+        if (state == null\n+            && (!ClassMetaData.SYNTHETIC.equals(_meta.getDetachedState())\n+            || !Serializable.class.isAssignableFrom(_meta.getDescribedType())\n+            || !_repos.getConfiguration().getDetachStateInstance().\n+            isDetachedStateTransient())) {\n+            // return Boolean.FALSE\n+            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+            code.areturn();\n+            return true;\n+        }\n+\n+        // no detached state: if instance uses detached state (and must be\n+        // synthetic and transient in serializable instance at this point),\n+        // not detached if state not set to DESERIALIZED\n+        if (state == null) {\n+            // if (pcGetDetachedState () == null) // instead of DESERIALIZED\n+            //     return Boolean.FALSE;\n+            loadManagedInstance(code, false);\n+            code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n+                Object.class, null);\n+            ifins = code.ifnonnull();\n+            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+            code.areturn();\n+            ifins.setTarget(code.nop());\n+        }\n+\n+        // give up; we just don't know\n+        code.constant().setNull();\n         code.areturn();\n+        return true;\n     }\n \n     /**\n@@ -3577,19 +3706,19 @@ private void getfield(Code code, BCClass declarer, String attrName) {\n         // first, see if we can convert the attribute name to a field name\n         String fieldName = toBackingFieldName(attrName);\n \n-        // next, find the field in the managed type.\n-        BCField[] fields = (BCField[]) AccessController\n-            .doPrivileged(J2DoPrivHelper.getBCClassFieldsAction(_managedType,\n-                fieldName)); \n+        // next, find the field in the managed type hierarchy\n         BCField field = null;\n-        for (int i = 0; i < fields.length; i++) {\n-            field = fields[i];\n-            // if we reach a field declared in this type, then this is the\n-            // most-masking field, and is the one that we want.\n-            // ##### probably should walk up the hierarchy, or check that\n-            // ##### serp does that.\n-            if (fields[i].getDeclarer() == declarer) {\n-                break;\n+        outer: for (BCClass bc = _pc; bc != null; bc = bc.getSuperclassBC()) {\n+            BCField[] fields = (BCField[]) AccessController\n+                .doPrivileged(J2DoPrivHelper.getBCClassFieldsAction(bc,\n+                    fieldName));\n+            for (int i = 0; i < fields.length; i++) {\n+                field = fields[i];\n+                // if we reach a field declared in this type, then this is the\n+                // most-masking field, and is the one that we want.\n+                if (fields[i].getDeclarer() == declarer) {\n+                    break outer;\n+                }\n             }\n         }\n \n@@ -3662,7 +3791,7 @@ private void putfield(Code code, BCClass declarer, String attrName,\n      */\n     private String toBackingFieldName(String name) {\n         if (_meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n-            && _attrsToFields.containsKey(name))\n+            && _attrsToFields != null && _attrsToFields.containsKey(name))\n             name = (String) _attrsToFields.get(name);\n         return name;\n     }\n@@ -3672,10 +3801,13 @@ private String toBackingFieldName(String name) {\n      * attribute name for the backing field <code>name</code>.\n      */\n     private String fromBackingFieldName(String name) {\n-        if (_meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n-            && _fieldsToAttrs.containsKey(name))\n-            name = (String) _fieldsToAttrs.get(name);\n-        return name;\n+        // meta is null when doing persistence-aware enhancement\n+        if (_meta != null\n+            && _meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n+            && _fieldsToAttrs != null && _fieldsToAttrs.containsKey(name))\n+            return (String) _fieldsToAttrs.get(name);\n+        else\n+            return name;\n     }\n \n     /**\n@@ -4247,17 +4379,29 @@ private static void transferCodeAttributes(BCMethod from, BCMethod to) {\n      * not be enhanced. Thus, it is safe to invoke the enhancer on classes\n      * that are already enhanced.\n      */\n-    public static void main(String[] args)\n-        throws IOException {\n+    public static void main(String[] args) {\n         Options opts = new Options();\n         args = opts.setFromCmdLine(args);\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"enhance-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        if (!run(args, opts))\n+            System.err.println(_loc.get(\"enhance-usage\"));\n+    }\n+\n+    /**\n+     * Run the tool. Returns false if invalid options given. Runs against all\n+     * the persistence units defined in the resource to parse.\n+     */\n+    public static boolean run(final String[] args, Options opts) {\n+        return Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws IOException {\n+                OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+                try {\n+                    return PCEnhancer.run(conf, args, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n     }\n \n     /**\n@@ -4266,9 +4410,6 @@ public static void main(String[] args)\n     public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Options opts)\n         throws IOException {\n-        if (opts.containsKey(\"help\") || opts.containsKey(\"-help\"))\n-            return false;\n-\n         Flags flags = new Flags();\n         flags.directory = Files.getFile(opts.removeProperty(\"directory\", \"d\",\n             null), null);\n@@ -4280,8 +4421,12 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             (\"enforcePropertyRestrictions\", \"epr\",\n                 flags.enforcePropertyRestrictions);\n \n+        // for unit testing\n+        BytecodeWriter writer = (BytecodeWriter) opts.get(\n+            PCEnhancer.class.getName() + \"#bytecodeWriter\");\n+\n         Configurations.populateConfiguration(conf, opts);\n-        return run(conf, args, flags, null, null, null);\n+        return run(conf, args, flags, null, writer, null);\n     }\n \n     /**\n@@ -4305,7 +4450,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n \n         Log log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\n         Collection classes;\n-        if (args.length == 0) {\n+        if (args == null || args.length == 0) {\n             log.info(_loc.get(\"running-all-classes\"));\n             classes = repos.getPersistentTypeNames(true, loader);\n             if (classes == null) {\n@@ -4320,7 +4465,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             for (int i = 0; i < args.length; i++)\n                 classes.addAll(Arrays.asList(cap.parseTypes(args[i])));\n         }\n-        \n+\n         Project project = new Project();\n         BCClass bc;\n         PCEnhancer enhancer;\n@@ -4331,7 +4476,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n                 log.trace(_loc.get(\"enhance-running\", o));\n \n             if (o instanceof String)\n-                bc = project.loadClass((String) o);\n+                bc = project.loadClass((String) o, loader);\n             else\n                 bc = project.loadClass((Class) o);\n             enhancer = new PCEnhancer(conf, bc, repos, loader);"},{"sha":"71e1978320c4773b242aa8a120af1182bf4bbd09","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"renamed","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -23,10 +23,10 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.util.ClassResolver;\n \n /**\n@@ -45,13 +45,13 @@\n  * <p>By default, if specified, the agent runs the OpenJPA enhancer on\n  * all classes listed in the first persistence unit as they are loaded,\n  * and redefines all other persistent classes when they are encountered.\n- * To disable enhancement and rely solely on the redefinition logic, set\n- * the RuntimeEnhancement flag to false. To disable redefinition and rely\n- * solely on pre-deployment or runtime enhancement, set the\n- * RuntimeRedefinition flag to false.\n+ * To disable enhancement at class-load time and rely solely on the\n+ * redefinition logic, set the ClassLoadEnhancement flag to false. To\n+ * disable redefinition and rely solely on pre-deployment or class-load\n+ * enhancement, set the RuntimeRedefinition flag to false.\n  * </p>\n  *\n- * <p><code>java -javaagent:openjpa.jar=RuntimeEnhancement=false</code></p>\n+ * <p><code>java -javaagent:openjpa.jar=ClassLoadEnhancement=false</code></p>\n  *\n  * @author Abe White\n  * @author Patrick Linskey\n@@ -61,19 +61,34 @@\n     public static void premain(String args, Instrumentation inst) {\n         Options opts = Configurations.parseProperties(args);\n \n-        if (opts.getBooleanProperty(\n-            \"RuntimeEnhancement\", \"runtimeEnhancement\", true))\n-            registerRuntimeEnhancer(inst, opts);\n+        if (opts.containsKey(\"ClassLoadEnhancement\") ||\n+            opts.containsKey(\"classLoadEnhancement\")) {\n+            if (opts.getBooleanProperty(\n+                \"ClassLoadEnhancement\", \"classLoadEnhancement\", true))\n+                registerClassLoadEnhancer(inst, opts);\n+        }\n+        else if (opts.containsKey(\"RuntimeEnhancement\") ||\n+            opts.containsKey(\"runtimeEnhancement\")) {\n+            // Deprecated property setting\n+            if (opts.getBooleanProperty(\n+                \"RuntimeEnhancement\", \"runtimeEnhancement\", true))\n+                registerClassLoadEnhancer(inst, opts);\n+        } else {\n+            // if neither is set, then we should be turning it on. We need this\n+            // logic instead of just a getBooleanProperty() because of the\n+            // backwards-compat logic flow.\n+            registerClassLoadEnhancer(inst, opts);\n+        }\n \n-        if (opts.getBooleanProperty(\"RuntimeRedefinition\",\n-            \"runtimeRedefinition\", true)) {\n+        if (opts.getBooleanProperty(\n+            \"RuntimeRedefinition\", \"runtimeRedefinition\", true)) {\n             InstrumentationFactory.setInstrumentation(inst);\n         } else {\n             InstrumentationFactory.setDynamicallyInstallAgent(false);\n         }\n     }\n \n-    private static void registerRuntimeEnhancer(Instrumentation inst,\n+    private static void registerClassLoadEnhancer(Instrumentation inst,\n         Options opts) {\n         OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n         Configurations.populateConfiguration(conf, opts);\n@@ -94,7 +109,7 @@ public ClassLoader getClassLoader(Class context, ClassLoader env) {\n                 return tmpLoader;\n             }\n         });\n-        conf.setReadOnly(true);\n+        conf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n         conf.instantiateAll(); // avoid threading issues\n \n         PCClassFileTransformer transformer = new PCClassFileTransformer","previous_filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java"},{"sha":"9d5b213ff7f59726016d7f2ae7b07449b5b9958a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":288,"deletions":276,"changes":564,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,276 +1,288 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.enhance;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.Map;\n-\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.ReferenceMap;\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * Tracks registered persistence-capable classes.\n- *\n- * @since 0.4.0\n- * @author Abe White\n- */\n-public class PCRegistry {\n-    // DO NOT ADD ADDITIONAL DEPENDENCIES TO THIS CLASS\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (PCRegistry.class);\n-\n-    // map of pc classes to meta structs; weak so the VM can GC classes\n-    private static final Map _metas = new ConcurrentReferenceHashMap\n-        (ReferenceMap.WEAK, ReferenceMap.HARD);\n-\n-    // register class listeners\n-    private static final Collection _listeners = new LinkedList();\n-\n-    /**\n-     * Register a {@link RegisterClassListener}.\n-     */\n-    public static void addRegisterClassListener(RegisterClassListener rcl) {\n-        if (rcl == null)\n-            return;\n-\n-        // we have to be positive that every listener gets notified for\n-        // every class, so lots of locking\n-        synchronized (_listeners) {\n-            _listeners.add(rcl);\n-        }\n-        synchronized (_metas) {\n-            for (Iterator itr = _metas.keySet().iterator(); itr.hasNext();)\n-                rcl.register((Class) itr.next());\n-        }\n-    }\n-\n-    /**\n-     * Removes a {@link RegisterClassListener}.\n-     */\n-    public static void removeRegisterClassListener(RegisterClassListener rcl) {\n-        synchronized (_listeners) {\n-            _listeners.remove(rcl);\n-        }\n-    }\n-\n-    /**\n-     * Get the field names for a <code>PersistenceCapable</code> class.\n-     */\n-    public static String[] getFieldNames(Class pcClass) {\n-        Meta meta = getMeta(pcClass);\n-        return meta.fieldNames;\n-    }\n-\n-    /**\n-     * Get the field types for a <code>PersistenceCapable</code> class.\n-     */\n-    public static Class[] getFieldTypes(Class pcClass) {\n-        Meta meta = getMeta(pcClass);\n-        return meta.fieldTypes;\n-    }\n-\n-    /**\n-     * Return the persistent superclass for a <code>PersistenceCapable</code>\n-     * class, or null if none. The superclass may or may not implement\n-     * {@link PersistenceCapable}, depending on the access type of the class.\n-     */\n-    public static Class getPersistentSuperclass(Class pcClass) {\n-        Meta meta = getMeta(pcClass);\n-        return meta.pcSuper;\n-    }\n-\n-    /**\n-     * Create a new instance of the class and assign its state manager.\n-     * The new instance has its flags set to <code>LOAD_REQUIRED</code>.\n-     */\n-    public static PersistenceCapable newInstance(Class pcClass,\n-        StateManager sm, boolean clear) {\n-        Meta meta = getMeta(pcClass);\n-        return (meta.pc == null) ? null : meta.pc.pcNewInstance(sm, clear);\n-    }\n-\n-    /**\n-     * Create a new instance of the class and assign its state manager and oid.\n-     * The new instance has its flags set to <code>LOAD_REQUIRED</code>.\n-     */\n-    public static PersistenceCapable newInstance(Class pcClass,\n-        StateManager sm, Object oid, boolean clear) {\n-        Meta meta = getMeta(pcClass);\n-        return (meta.pc == null) ? null : meta.pc.pcNewInstance(sm, oid, clear);\n-    }\n-\n-    /**\n-     * Create a new identity object for the given\n-     * <code>PersistenceCapable</code> class.\n-     */\n-    public static Object newObjectId(Class pcClass) {\n-        Meta meta = getMeta(pcClass);\n-        return (meta.pc == null) ? null : meta.pc.pcNewObjectIdInstance();\n-    }\n-\n-    /**\n-     * Create a new identity object for the given\n-     * <code>PersistenceCapable</code> class, using the <code>String</code>\n-     * form of the constructor.\n-     */\n-    public static Object newObjectId(Class pcClass, String str) {\n-        Meta meta = getMeta(pcClass);\n-        return (meta.pc == null) ? null : meta.pc.pcNewObjectIdInstance(str);\n-    }\n-\n-    /**\n-     * Return the alias for the given type.\n-     */\n-    public static String getTypeAlias(Class pcClass) {\n-        return getMeta(pcClass).alias;\n-    }\n-\n-    /**\n-     * Copy fields from an outside source to the key fields in the identity\n-     * object.\n-     */\n-    public static void copyKeyFieldsToObjectId(Class pcClass, FieldSupplier fm,\n-        Object oid) {\n-        Meta meta = getMeta(pcClass);\n-        if (meta.pc == null)\n-            throw new UserException(_loc.get(\"copy-no-id\", pcClass));\n-\n-        meta.pc.pcCopyKeyFieldsToObjectId(fm, oid);\n-    }\n-\n-    /**\n-     * Copy fields to an outside source from the key fields in the identity\n-     * object.\n-     */\n-    public static void copyKeyFieldsFromObjectId(Class pcClass,\n-        FieldConsumer fm, Object oid) {\n-        Meta meta = getMeta(pcClass);\n-        if (meta.pc == null)\n-            throw new UserException(_loc.get(\"copy-no-id\", pcClass));\n-\n-        meta.pc.pcCopyKeyFieldsFromObjectId(fm, oid);\n-    }\n-\n-    /**\n-     * Register metadata by class.\n-     *\n-     * @param fieldTypes managed field types\n-     * @param fieldFlags managed field flags\n-     * @param sup the most immediate persistent superclass\n-     * @param pcClass the <code>PersistenceCapable</code> class\n-     * @param fieldNames managed field names\n-     * @param alias the class alias\n-     * @param pc an instance of the class, if not abstract\n-     */\n-    public static void register(Class pcClass, String[] fieldNames,\n-        Class[] fieldTypes, byte[] fieldFlags, Class sup, String alias,\n-        PersistenceCapable pc) {\n-        if (pcClass == null)\n-            throw new NullPointerException();\n-\n-        // we have to be positive that every listener gets notified for\n-        // every class, so lots of locking\n-        Meta meta = new Meta(pc, fieldNames, fieldTypes, sup, alias);\n-        synchronized (_metas) {\n-            _metas.put(pcClass, meta);\n-        }\n-        synchronized (_listeners) {\n-            for (Iterator i = _listeners.iterator(); i.hasNext();)\n-                ((RegisterClassListener) i.next()).register(pcClass);\n-        }\n-    }\n-\n-    /**\n-     * De-Register all metadata associated with the given ClassLoader. \n-     * Allows ClassLoaders to be garbage collected.\n-     *\n-     * @param cl the ClassLoader\n-     */\n-    public static void deRegister(ClassLoader cl) {\n-        synchronized (_metas) {\n-            for (Iterator i = _metas.keySet().iterator(); i.hasNext();) {\n-                Class pcClass = (Class) i.next();\n-                if (pcClass.getClassLoader() == cl) {\n-                    _metas.remove(pcClass);\n-                }\n-            }\n-        }\n-    }\n-    \n-    /**\n-     * Returns a collection of class objects of the registered\n-     * persistence-capable classes.\n-     */\n-    public static Collection getRegisteredTypes() {\n-        return Collections.unmodifiableCollection(_metas.keySet());\n-    }\n-\n-    /**\n-     * Returns <code>true</code> if <code>cls</code> is already registered.\n-     */\n-    public static boolean isRegistered(Class cls) {\n-        return _metas.containsKey(cls);\n-    }\n-\n-    /**\n-     * Look up the metadata for a <code>PersistenceCapable</code> class.\n-     */\n-    private static Meta getMeta(Class pcClass) {\n-        Meta ret = (Meta) _metas.get(pcClass);\n-        if (ret == null)\n-            throw new IllegalStateException(_loc.get(\"no-meta\", pcClass).\n-                getMessage());\n-        return ret;\n-    }\n-\n-    /**\n-     * Listener for persistent class registration events.\n-     */\n-    public static interface RegisterClassListener {\n-\n-        public void register(Class cls);\n-    }\n-\n-    /**\n-     * This is a helper class to manage metadata per persistence-capable class.\n-     */\n-    private static class Meta {\n-\n-        public final PersistenceCapable pc;\n-        public final String[] fieldNames;\n-        public final Class[] fieldTypes;\n-        public final Class pcSuper;\n-        public final String alias;\n-\n-        public Meta(PersistenceCapable pc, String[] fieldNames,\n-            Class[] fieldTypes, Class pcSuper, String alias) {\n-            this.pc = pc;\n-            this.fieldNames = fieldNames;\n-            this.fieldTypes = fieldTypes;\n-            this.pcSuper = pcSuper;\n-\t\t\tthis.alias = alias;\n-\t\t}\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.ReferenceMap;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\r\n+import org.apache.openjpa.util.UserException;\r\n+import org.apache.openjpa.util.InvalidStateException;\r\n+\r\n+/**\r\n+ * Tracks registered persistence-capable classes.\r\n+ *\r\n+ * @since 0.4.0\r\n+ * @author Abe White\r\n+ */\r\n+public class PCRegistry {\r\n+    // DO NOT ADD ADDITIONAL DEPENDENCIES TO THIS CLASS\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (PCRegistry.class);\r\n+\r\n+    // map of pc classes to meta structs; weak so the VM can GC classes\r\n+    private static final Map _metas = new ConcurrentReferenceHashMap\r\n+        (ReferenceMap.WEAK, ReferenceMap.HARD);\r\n+\r\n+    // register class listeners\r\n+    private static final Collection _listeners = new LinkedList();\r\n+\r\n+    /**\r\n+     * Register a {@link RegisterClassListener}.\r\n+     */\r\n+    public static void addRegisterClassListener(RegisterClassListener rcl) {\r\n+        if (rcl == null)\r\n+            return;\r\n+\r\n+        // we have to be positive that every listener gets notified for\r\n+        // every class, so lots of locking\r\n+        synchronized (_listeners) {\r\n+            _listeners.add(rcl);\r\n+        }\r\n+        synchronized (_metas) {\r\n+            for (Iterator itr = _metas.keySet().iterator(); itr.hasNext();)\r\n+                rcl.register((Class) itr.next());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Removes a {@link RegisterClassListener}.\r\n+     */\r\n+    public static void removeRegisterClassListener(RegisterClassListener rcl) {\r\n+        synchronized (_listeners) {\r\n+            _listeners.remove(rcl);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the field names for a <code>PersistenceCapable</code> class.\r\n+     */\r\n+    public static String[] getFieldNames(Class pcClass) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return meta.fieldNames;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the field types for a <code>PersistenceCapable</code> class.\r\n+     */\r\n+    public static Class[] getFieldTypes(Class pcClass) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return meta.fieldTypes;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the persistent superclass for a <code>PersistenceCapable</code>\r\n+     * class, or null if none. The superclass may or may not implement\r\n+     * {@link PersistenceCapable}, depending on the access type of the class.\r\n+     */\r\n+    public static Class getPersistentSuperclass(Class pcClass) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return meta.pcSuper;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new instance of the class and assign its state manager.\r\n+     * The new instance has its flags set to <code>LOAD_REQUIRED</code>.\r\n+     */\r\n+    public static PersistenceCapable newInstance(Class pcClass,\r\n+        StateManager sm, boolean clear) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return (meta.pc == null) ? null : meta.pc.pcNewInstance(sm, clear);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new instance of the class and assign its state manager and oid.\r\n+     * The new instance has its flags set to <code>LOAD_REQUIRED</code>.\r\n+     */\r\n+    public static PersistenceCapable newInstance(Class pcClass,\r\n+        StateManager sm, Object oid, boolean clear) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return (meta.pc == null) ? null : meta.pc.pcNewInstance(sm, oid, clear);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the persistence-capable type for <code>type</code>. This might\r\n+     * be a generated subclass of <code>type</code>.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    public static Class getPCType(Class type) {\r\n+        Meta meta = getMeta(type);\r\n+        return (meta.pc == null) ? null : meta.pc.getClass();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new identity object for the given\r\n+     * <code>PersistenceCapable</code> class.\r\n+     */\r\n+    public static Object newObjectId(Class pcClass) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return (meta.pc == null) ? null : meta.pc.pcNewObjectIdInstance();\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new identity object for the given\r\n+     * <code>PersistenceCapable</code> class, using the <code>String</code>\r\n+     * form of the constructor.\r\n+     */\r\n+    public static Object newObjectId(Class pcClass, String str) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        return (meta.pc == null) ? null : meta.pc.pcNewObjectIdInstance(str);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the alias for the given type.\r\n+     */\r\n+    public static String getTypeAlias(Class pcClass) {\r\n+        return getMeta(pcClass).alias;\r\n+    }\r\n+\r\n+    /**\r\n+     * Copy fields from an outside source to the key fields in the identity\r\n+     * object.\r\n+     */\r\n+    public static void copyKeyFieldsToObjectId(Class pcClass, FieldSupplier fm,\r\n+        Object oid) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        if (meta.pc == null)\r\n+            throw new UserException(_loc.get(\"copy-no-id\", pcClass));\r\n+\r\n+        meta.pc.pcCopyKeyFieldsToObjectId(fm, oid);\r\n+    }\r\n+\r\n+    /**\r\n+     * Copy fields to an outside source from the key fields in the identity\r\n+     * object.\r\n+     */\r\n+    public static void copyKeyFieldsFromObjectId(Class pcClass,\r\n+        FieldConsumer fm, Object oid) {\r\n+        Meta meta = getMeta(pcClass);\r\n+        if (meta.pc == null)\r\n+            throw new UserException(_loc.get(\"copy-no-id\", pcClass));\r\n+\r\n+        meta.pc.pcCopyKeyFieldsFromObjectId(fm, oid);\r\n+    }\r\n+\r\n+    /**\r\n+     * Register metadata by class.\r\n+     *\r\n+     * @param fieldTypes managed field types\r\n+     * @param fieldFlags managed field flags\r\n+     * @param sup the most immediate persistent superclass\r\n+     * @param pcClass the <code>PersistenceCapable</code> class\r\n+     * @param fieldNames managed field names\r\n+     * @param alias the class alias\r\n+     * @param pc an instance of the class, if not abstract\r\n+     */\r\n+    public static void register(Class pcClass, String[] fieldNames,\r\n+        Class[] fieldTypes, byte[] fieldFlags, Class sup, String alias,\r\n+        PersistenceCapable pc) {\r\n+        if (pcClass == null)\r\n+            throw new NullPointerException();\r\n+\r\n+        // we have to be positive that every listener gets notified for\r\n+        // every class, so lots of locking\r\n+        Meta meta = new Meta(pc, fieldNames, fieldTypes, sup, alias);\r\n+        synchronized (_metas) {\r\n+            _metas.put(pcClass, meta);\r\n+        }\r\n+        synchronized (_listeners) {\r\n+            for (Iterator i = _listeners.iterator(); i.hasNext();)\r\n+                ((RegisterClassListener) i.next()).register(pcClass);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * De-Register all metadata associated with the given ClassLoader. \r\n+     * Allows ClassLoaders to be garbage collected.\r\n+     *\r\n+     * @param cl the ClassLoader\r\n+     */\r\n+    public static void deRegister(ClassLoader cl) {\r\n+        synchronized (_metas) {\r\n+            for (Iterator i = _metas.keySet().iterator(); i.hasNext();) {\r\n+                Class pcClass = (Class) i.next();\r\n+                if (pcClass.getClassLoader() == cl) {\r\n+                    _metas.remove(pcClass);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns a collection of class objects of the registered\r\n+     * persistence-capable classes.\r\n+     */\r\n+    public static Collection getRegisteredTypes() {\r\n+        return Collections.unmodifiableCollection(_metas.keySet());\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns <code>true</code> if <code>cls</code> is already registered.\r\n+     */\r\n+    public static boolean isRegistered(Class cls) {\r\n+        return _metas.containsKey(cls);\r\n+    }\r\n+\r\n+    /**\r\n+     * Look up the metadata for a <code>PersistenceCapable</code> class.\r\n+     */\r\n+    private static Meta getMeta(Class pcClass) {\r\n+        Meta ret = (Meta) _metas.get(pcClass);\r\n+        if (ret == null)\r\n+            throw new IllegalStateException(_loc.get(\"no-meta\", pcClass).\r\n+                getMessage());\r\n+        return ret;\r\n+    }\r\n+\r\n+    /**\r\n+     * Listener for persistent class registration events.\r\n+     */\r\n+    public static interface RegisterClassListener {\r\n+\r\n+        public void register(Class cls);\r\n+    }\r\n+\r\n+    /**\r\n+     * This is a helper class to manage metadata per persistence-capable class.\r\n+     */\r\n+    private static class Meta {\r\n+\r\n+        public final PersistenceCapable pc;\r\n+        public final String[] fieldNames;\r\n+        public final Class[] fieldTypes;\r\n+        public final Class pcSuper;\r\n+        public final String alias;\r\n+\r\n+        public Meta(PersistenceCapable pc, String[] fieldNames,\r\n+            Class[] fieldTypes, Class pcSuper, String alias) {\r\n+            this.pc = pc;\r\n+            this.fieldNames = fieldNames;\r\n+            this.fieldTypes = fieldTypes;\r\n+            this.pcSuper = pcSuper;\r\n+\t\t\tthis.alias = alias;\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"85ecedbf1169d63c6d6bd632bc09262218fc2f77","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RedefinitionHelper.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,8 +18,15 @@\n  */\r\n package org.apache.openjpa.enhance;\r\n \r\n+import java.lang.reflect.InvocationHandler;\r\n+import java.lang.reflect.Proxy;\r\n+import java.lang.reflect.Method;\r\n+import java.lang.reflect.Field;\r\n+\r\n import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n import org.apache.openjpa.kernel.StateManagerImpl;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.ImplHelper;\r\n \r\n /**\r\n@@ -185,4 +192,46 @@ public static void settingField(Object o, int idx, Object cur,\n             sm.settingObjectField(pc, idx, cur, next,\r\n                 OpenJPAStateManager.SET_USER);\r\n     }\r\n+\r\n+    /**\r\n+     * Create a container instance that will delegate back to the state\r\n+     * manager to emulate lazy loading. This is used by PC subclasses for\r\n+     * unenhanced types that could not be redefined, and thus do not have\r\n+     * field-interception capabilities. Do this for all collection and\r\n+     * map field types, even if they are in the dfg, in case the fetch\r\n+     * groups are reset at runtime.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    public static void assignLazyLoadProxies(StateManagerImpl sm) {\r\n+        FieldMetaData[] fmds = sm.getMetaData().getFields();\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            switch (fmds[i].getTypeCode()) {\r\n+                case JavaTypes.COLLECTION:\r\n+                case JavaTypes.MAP:\r\n+                    PersistenceCapable pc = sm.getPersistenceCapable();\r\n+                    Field field = (Field) fmds[i].getBackingMember();\r\n+                    Reflection.set(pc, field,\r\n+                        newLazyLoadingProxy(fmds[i].getDeclaredType(), i, sm));\r\n+                    break;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static Object newLazyLoadingProxy(Class type, final int idx,\r\n+        final StateManagerImpl sm) {\r\n+        InvocationHandler handler = new InvocationHandler() {\r\n+\r\n+            public Object invoke(Object proxy, Method method, Object[] args)\r\n+                throws Throwable {\r\n+                // this will replace the field in the instance, so the dynamic\r\n+                // proxy should only be called the first time a\r\n+                // lazy-load-proxied field is used in normal usage.\r\n+                Object delegate = sm.fetch(idx);\r\n+                return method.invoke(delegate, args);\r\n+            }\r\n+        };\r\n+        return Proxy.newProxyInstance(type.getClassLoader(),\r\n+            new Class[] { type }, handler);\r\n+    }\r\n }\r"},{"sha":"869c5e81ff3c35ee28d684eadae4ab7318572f2e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","status":"modified","additions":68,"deletions":34,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ReflectingPersistenceCapable.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,17 +18,23 @@\n  */\r\n package org.apache.openjpa.enhance;\r\n \r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.Serializable;\r\n import java.lang.reflect.Field;\r\n import java.lang.reflect.Method;\r\n \r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.StateManagerImpl;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.ApplicationIds;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.util.ObjectId;\r\n-import org.apache.openjpa.kernel.StateManagerImpl;\r\n \r\n /**\r\n  * Implementation of the {@link PersistenceCapable} interface that can handle\r\n@@ -38,12 +44,19 @@\n  * @since 1.0.0\r\n  */\r\n public class ReflectingPersistenceCapable\r\n-    implements PersistenceCapable, ManagedInstanceProvider {\r\n+    implements PersistenceCapable, ManagedInstanceProvider, Serializable {\r\n \r\n     private Object o;\r\n     private StateManager sm;\r\n-    private PersistenceCapable pcSubclassInstance;\r\n-    private ClassMetaData meta;\r\n+\r\n+    // this will be reconstituted in readObject()\r\n+    private transient PersistenceCapable pcSubclassInstance;\r\n+\r\n+    // this will reconstituted by a call to pcReplaceStateManager() by the\r\n+    // instance that has a reference to the deserialized data\r\n+    private transient ClassMetaData meta;\r\n+\r\n+    private boolean serializationUserVisible = true;\r\n \r\n     public ReflectingPersistenceCapable(Object o, OpenJPAConfiguration conf) {\r\n         this.o = o;\r\n@@ -70,48 +83,50 @@ public StateManager pcGetStateManager() {\n \r\n     public void pcReplaceStateManager(StateManager sm) {\r\n         this.sm = sm;\r\n+        if (meta == null && sm instanceof OpenJPAStateManager)\r\n+            meta = ((OpenJPAStateManager) sm).getMetaData();\r\n     }\r\n \r\n     public void pcProvideField(int i) {\r\n+        Object value = getValue(i, o);\r\n         switch (meta.getField(i).getTypeCode()) {\r\n             case JavaTypes.BOOLEAN:\r\n-                sm.providedBooleanField(this, i,\r\n-                    ((Boolean) getValue(i, o)).booleanValue());\r\n+                sm.providedBooleanField(this, i, value == null ? false :\r\n+                    ((Boolean) value).booleanValue());\r\n                 break;\r\n             case JavaTypes.BYTE:\r\n-                sm.providedByteField(this, i,\r\n-                    ((Byte) getValue(i, o)).byteValue());\r\n+                sm.providedByteField(this, i, value == null ? 0 :\r\n+                    ((Byte) value).byteValue());\r\n                 break;\r\n             case JavaTypes.CHAR:\r\n-                sm.providedCharField(this, i,\r\n-                    ((Character) getValue(i, o)).charValue());\r\n+                sm.providedCharField(this, i, value == null ? 0 :\r\n+                    ((Character) value).charValue());\r\n                 break;\r\n             case JavaTypes.DOUBLE:\r\n-                sm.providedDoubleField(this, i,\r\n-                    ((Double) getValue(i, o)).doubleValue());\r\n+                sm.providedDoubleField(this, i, value == null ? 0 :\r\n+                    ((Double) value).doubleValue());\r\n                 break;\r\n             case JavaTypes.FLOAT:\r\n-                sm.providedFloatField(this, i,\r\n-                    ((Float) getValue(i, o)).floatValue());\r\n+                sm.providedFloatField(this, i, value == null ? 0 :\r\n+                    ((Float) value).floatValue());\r\n                 break;\r\n             case JavaTypes.INT:\r\n-                sm.providedIntField(this, i,\r\n-                    ((Integer) getValue(i, o)).intValue());\r\n+                sm.providedIntField(this, i, value == null ? 0 :\r\n+                    ((Integer) value).intValue());\r\n                 break;\r\n             case JavaTypes.LONG:\r\n-                sm.providedLongField(this, i,\r\n-                    ((Long) getValue(i, o)).longValue());\r\n+                sm.providedLongField(this, i, value == null ? 0 :\r\n+                    ((Long) value).longValue());\r\n                 break;\r\n             case JavaTypes.SHORT:\r\n-                sm.providedShortField(this, i,\r\n-                    ((Short) getValue(i, o)).shortValue());\r\n+                sm.providedShortField(this, i, value == null ? 0 :\r\n+                    ((Short) value).shortValue());\r\n                 break;\r\n             case JavaTypes.STRING:\r\n-                sm.providedStringField(this, i,\r\n-                    (String) getValue(i, o));\r\n+                sm.providedStringField(this, i, (String) value);\r\n                 break;\r\n             default:\r\n-                sm.providedObjectField(this, i, getValue(i, o));\r\n+                sm.providedObjectField(this, i, value);\r\n                 break;\r\n         }\r\n     }\r\n@@ -169,6 +184,10 @@ public void pcCopyField(Object fromObject, int i) {\n     }\r\n \r\n     public void pcCopyFields(Object fromObject, int[] fieldIndices) {\r\n+        if (fromObject instanceof ReflectingPersistenceCapable)\r\n+            fromObject = ((ReflectingPersistenceCapable) fromObject)\r\n+                .getManagedInstance();\r\n+        \r\n         for(int i = 0; i < fieldIndices.length; i++)\r\n             pcCopyField(fromObject, fieldIndices[i]);\r\n     }\r\n@@ -305,21 +324,23 @@ public void pcSetDetachedState(Object state) {\n         // ##### we can implement this if a state field has been set\r\n     }\r\n \r\n+    public void pcSetSerializationUserVisible(boolean userVisible) {\r\n+        serializationUserVisible = userVisible;\r\n+    }\r\n+\r\n+    public boolean pcIsSerializationUserVisible() {\r\n+        return serializationUserVisible;\r\n+    }\r\n+\r\n     public Object getManagedInstance() {\r\n         return o;\r\n     }\r\n \r\n     private Object getValue(int i, Object o) {\r\n         if (meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY) {\r\n-            if (!meta.isIntercepting()) {\r\n-                Method meth = Reflection.findGetter(meta.getDescribedType(),\r\n-                    meta.getField(i).getName(), true);\r\n-                return Reflection.get(o, meth);\r\n-            } else {\r\n-                Field field = Reflection.findField(meta.getDescribedType(),\r\n-                    toFieldName(i), true);\r\n-                return Reflection.get(o, field);\r\n-            }\r\n+            Field field = Reflection.findField(meta.getDescribedType(),\r\n+                toFieldName(i), true);\r\n+            return Reflection.get(o, field);\r\n         } else {\r\n             Field field = (Field) meta.getField(i).getBackingMember();\r\n             return Reflection.get(o, field);\r\n@@ -350,4 +371,17 @@ private void setValue(int i, Object o, Object val) {\n             Reflection.set(o, field, val);\r\n         }\r\n     }\r\n+\r\n+    private void writeObject(ObjectOutputStream out) throws IOException {\r\n+        out.defaultWriteObject();\r\n+        out.writeObject(meta.getDescribedType());\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws ClassNotFoundException, IOException {\r\n+        in.defaultReadObject();\r\n+        Class type = (Class) in.readObject();\r\n+        pcSubclassInstance = PCRegistry.newInstance(type, null, false);\r\n+        ImplHelper.registerPersistenceCapable(this);\r\n+    }\r\n }\r"},{"sha":"bd8996873458f0bd3db944aa85be774b224ab229","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":42,"deletions":7,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -112,27 +112,62 @@ public static Method findSetter(Class cls, String prop, Class param,\n      * Invokes <code>cls.getDeclaredMethods()</code>, and returns the method\n      * that matches the <code>name</code> and <code>param</code> arguments.\n      * Avoids the exception thrown by <code>Class.getDeclaredMethod()</code>\n-     * for performance reasons. <code>param</code> may be null.\n+     * for performance reasons. <code>param</code> may be null. Additionally,\n+     * if there are multiple methods with different return types, this will\n+     * return the method defined in the least-derived class.\n      *\n      * @since 0.9.8\n      */\n-    private static Method getDeclaredMethod(Class cls, String name,\n+    static Method getDeclaredMethod(Class cls, String name,\n         Class param) {\n         Method[] methods = (Method[]) AccessController.doPrivileged(\n             J2DoPrivHelper.getDeclaredMethodsAction(cls));\n+        Method candidate = null;\n         for (int i = 0 ; i < methods.length; i++) {\n     \t    if (name.equals(methods[i].getName())) {\n                 Class[] methodParams = methods[i].getParameterTypes();\n                 if (param == null && methodParams.length == 0)\n-                    return methods[i];\n-                if (param != null && methodParams.length == 1\n+                    candidate = mostDerived(methods[i], candidate);\n+                else if (param != null && methodParams.length == 1\n                     && param.equals(methodParams[0]))\n-                    return methods[i];\n+                    candidate = mostDerived(methods[i], candidate);\n             }\n         }\n-        return null;\n+        return candidate;\n+    }\n+\n+    static Method mostDerived(Method meth1, Method meth2) {\n+        if (meth1 == null)\n+            return meth2;\n+        if (meth2 == null)\n+            return meth1;\n+        \n+        Class cls2 = meth2.getDeclaringClass();\n+        Class cls1 = meth1.getDeclaringClass();\n+\n+        if (cls1.equals(cls2)) {\n+            Class ret1 = meth1.getReturnType();\n+            Class ret2 = meth2.getReturnType();\n+            if (ret1.isAssignableFrom(ret2))\n+                return meth2;\n+            else if (ret2.isAssignableFrom(ret1))\n+                return meth1;\n+            else\n+                throw new IllegalArgumentException(\n+                    _loc.get(\"most-derived-unrelated-same-type\", meth1, meth2)\n+                        .getMessage());\n+        } else {\n+            if (cls1.isAssignableFrom(cls2))\n+                return meth2;\n+            else if (cls2.isAssignableFrom(cls1))\n+                return meth1;\n+            else\n+                throw new IllegalArgumentException(\n+                    _loc.get(\"most-derived-unrelated\", meth1, meth2)\n+                        .getMessage());\n+        }\n     }\n-    \n+\n     /**\n      * Return the field with the given name, optionally throwing an exception\n      * if none."},{"sha":"73a16b20967c270f9a4e06fac6116586f8ee7e9e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Possible values for the <code>openjpa.RuntimeUnenhancedClasses</code>\r\n+ * configuration setting.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface RuntimeUnenhancedClassesModes {\r\n+    public final static int SUPPORTED = 0;\r\n+    public final static int UNSUPPORTED = 1;\r\n+    public final static int WARN = 2;\r\n+}\n\\ No newline at end of file"},{"sha":"8066b3791db6a0b7ed68f73e22039c47e49b6dca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Possible values for the <code>openjpa.RuntimeUnenhancedClasses</code>\r\n+ * configuration setting.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface RuntimeUnenhancedClasssesModes {\r\n+    public final static int SUPPORTED = 0;\r\n+    public final static int UNSUPPORTED = 1;\r\n+    public final static int WARN = 2;\r\n+}\r"},{"sha":"39ada6c18bcae64908600bd1d911d3c3a924378e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","status":"modified","additions":28,"deletions":19,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -64,7 +64,8 @@\n     private TopicConnection _connection;\n     private TopicSession _session;\n     private TopicPublisher _publisher;\n-\n+    private ClassLoader _appClassLoader;\n+    \n     /**\n      * Sets the JMS Topic name. Defaults to\n      * <code>topic/OpenJPACommitProviderTopic</code>.\n@@ -151,10 +152,11 @@ public void close() {\n      */\n     public void endConfiguration() {\n         super.endConfiguration();\n+        _appClassLoader = Thread.currentThread().getContextClassLoader();\n         connect();\n     }\n \n-    private void connect() {\n+    protected void connect() {\n         try {\n             Context ctx = newContext();\n             TopicConnectionFactory tcf =\n@@ -204,29 +206,36 @@ public void onMessage(Message m) {\n                             _topicName, m.getClass().getName()));\n                     return;\n                 }\n-\n-                ObjectMessage om = (ObjectMessage) m;\n-                Object o;\n+                \n+                ClassLoader saveCls = Thread.currentThread()\n+                    .getContextClassLoader();\n                 try {\n-                    o = om.getObject();\n+                    if (saveCls != _appClassLoader)\n+                        Thread.currentThread().setContextClassLoader(\n+                            _appClassLoader);\n+                    ObjectMessage om = (ObjectMessage) m;\n+                    Object o = om.getObject();\n+\n+                    if (o instanceof RemoteCommitEvent) {\n+                    \tif (log.isTraceEnabled())\n+                    \t\tlog.trace(s_loc.get(\"jms-received-update\",\n+                    \t\t\t\t_topicName));\n+\n+                    \tRemoteCommitEvent rce = (RemoteCommitEvent) o;\n+                    \tfireEvent(rce);\n+                    } else {\n+                    \tif (log.isWarnEnabled())\n+                    \t\tlog.warn(s_loc.get(\"jms-receive-error-2\",\n+                    \t\t\t\to.getClass().getName(), _topicName));\n+                    }\n                 } catch (JMSException jmse) {\n                     if (log.isWarnEnabled())\n                         log.warn(s_loc.get(\"jms-receive-error-1\"), jmse);\n-                    return;\n+                } finally {\n+                    if (saveCls != _appClassLoader)\n+                        Thread.currentThread().setContextClassLoader(saveCls);\n                 }\n \n-                if (o instanceof RemoteCommitEvent) {\n-                    if (log.isTraceEnabled())\n-                        log.trace(s_loc.get(\"jms-received-update\",\n-                            _topicName));\n-\n-                    RemoteCommitEvent rce = (RemoteCommitEvent) o;\n-                    fireEvent(rce);\n-                } else {\n-                    if (log.isWarnEnabled())\n-                        log.warn(s_loc.get(\"jms-receive-error-2\",\n-                            o.getClass().getName(), _topicName));\n-                }\n             }\n         };\n     }"},{"sha":"bb8cf0127e1405a196416071fc7289b258aa5d32","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -41,6 +41,12 @@\n      */\n     public static final int AFTER_PERSIST = 1;\n \n+    /**\n+     * Event type when an instance is made persistent, after the record has\n+     * been written to the store\n+     */\n+    public static final int AFTER_PERSIST_PERFORMED = 18;\n+\n     /**\n      * Event type when an instance is loaded.\n      */\n@@ -76,6 +82,12 @@\n      */\n     public static final int AFTER_DELETE = 8;\n \n+    /**\n+     * Event type when an instance is deleted, after the record has been\n+     * deleted from the store.\n+     */\n+    public static final int AFTER_DELETE_PERFORMED = 19;\n+\n     /**\n      * Event type when an instance is dirtied for the first time.\n      */\n@@ -121,19 +133,34 @@\n      */\n     public static final int AFTER_REFRESH = 17;\n \n+    /**\n+     * Event type when an instance is modified. This is not invoked for\n+     * PNEW records, but is invoked for PNEWFLUSHED.\n+     */\n+    public static final int BEFORE_UPDATE = 20;\n+\n+    /**\n+     * Event type when an instance is modified, after the change has been\n+     * sent to the store. This is not invoked for PNEW records, but is\n+     * invoked for PNEWFLUSHED records.\n+     */\n+    public static final int AFTER_UPDATE_PERFORMED = 21;\n+\n     /**\n      * Convenience array of all event types.\n      */\n     public static final int[] ALL_EVENTS = new int[]{\n         BEFORE_PERSIST,\n         AFTER_PERSIST,\n+        AFTER_PERSIST_PERFORMED,\n         AFTER_LOAD,\n         BEFORE_STORE,\n         AFTER_STORE,\n         BEFORE_CLEAR,\n         AFTER_CLEAR,\n         BEFORE_DELETE,\n         AFTER_DELETE,\n+        AFTER_DELETE_PERFORMED,\n         BEFORE_DIRTY,\n         AFTER_DIRTY,\n         BEFORE_DIRTY_FLUSHED,\n@@ -143,6 +170,8 @@\n         BEFORE_ATTACH,\n         AFTER_ATTACH,\n         AFTER_REFRESH,\n+        BEFORE_UPDATE,\n+        AFTER_UPDATE_PERFORMED,\n     };\n \n     private final int _type;"},{"sha":"6003ae0643efc2d07fef417013fbedc73c3ef34b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":64,"deletions":4,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.event;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -28,6 +29,9 @@\n \n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataDefaults;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InvalidStateException;\n \n /**\n  * Manager that can be used to track and notify listeners on lifecycle events.\n@@ -44,10 +48,13 @@\n  * @nojavadoc\n  */\n public class LifecycleEventManager\n-    implements CallbackModes {\n+    implements CallbackModes, Serializable {\n \n     private static final Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n \n+    private static final Localizer _loc = Localizer.forPackage(\n+        LifecycleEventManager.class);\n+\n     private Map _classListeners = null; // class -> listener list\n     private ListenerList _listeners = null;\n     private List _addListeners = new LinkedList();\n@@ -132,15 +139,18 @@ public synchronized void removeListener(Object listener) {\n      */\n     public boolean hasPersistListeners(Object source, ClassMetaData meta) {\n         return hasHandlers(source, meta, LifecycleEvent.BEFORE_PERSIST)\n-            || hasHandlers(source, meta, LifecycleEvent.AFTER_PERSIST);\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_PERSIST)\n+            || hasHandlers(source, meta,\n+                LifecycleEvent.AFTER_PERSIST_PERFORMED);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDeleteListeners(Object source, ClassMetaData meta) {\n         return hasHandlers(source, meta, LifecycleEvent.BEFORE_DELETE)\n-            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE);\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE_PERFORMED);\n     }\n \n     /**\n@@ -166,6 +176,14 @@ public boolean hasStoreListeners(Object source, ClassMetaData meta) {\n             || hasHandlers(source, meta, LifecycleEvent.AFTER_STORE);\n     }\n \n+    /**\n+     * Return whether there are listeners or callbacks for the given source.\n+     */\n+    public boolean hasUpdateListeners(Object source, ClassMetaData meta) {\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_UPDATE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_UPDATE_PERFORMED);\n+    }\n+\n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n@@ -470,6 +488,46 @@ else if (listener instanceof ListenerAdapter) {\n                                 ((AttachListener) listener).afterAttach(ev);\n                         }\n                         break;\n+\n+                    case LifecycleEvent.AFTER_PERSIST_PERFORMED:\n+                        if (responds || listener instanceof PostPersistListener)\n+                        {\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            ((PostPersistListener) listener)\n+                                .afterPersistPerformed(ev);\n+                        }\n+                        break;\n+                    case LifecycleEvent.BEFORE_UPDATE:\n+                    case LifecycleEvent.AFTER_UPDATE_PERFORMED:\n+                        if (responds || listener instanceof UpdateListener) {\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            if (type == LifecycleEvent.BEFORE_UPDATE)\n+                                ((UpdateListener) listener).beforeUpdate(ev);\n+                            else\n+                                ((UpdateListener) listener)\n+                                    .afterUpdatePerformed(ev);\n+                        }\n+                        break;\n+                    case LifecycleEvent.AFTER_DELETE_PERFORMED:\n+                        if (responds || listener instanceof PostDeleteListener){\n+                            if (mock)\n+                                return Boolean.TRUE;\n+                            if (ev == null)\n+                                ev = new LifecycleEvent(source, rel, type);\n+                            ((PostDeleteListener) listener)\n+                                .afterDeletePerformed(ev);\n+                        }\n+                        break;\n+                    default:\n+                        throw new InvalidStateException(\n+                            _loc.get(\"unknown-lifecycle-event\",\n+                                Integer.toString(type)));\n                 }\n             }\n             catch (Exception e) {\n@@ -568,8 +626,10 @@ private static int getEventTypes(Object listener) {\n                 types |= 2 << LifecycleEvent.BEFORE_DIRTY_FLUSHED;\n                 types |= 2 << LifecycleEvent.AFTER_DIRTY_FLUSHED;\n             }\n-            if (listener instanceof LoadListener)\n+            if (listener instanceof LoadListener) {\n                 types |= 2 << LifecycleEvent.AFTER_LOAD;\n+                types |= 2 << LifecycleEvent.AFTER_REFRESH;\n+            }\n             if (listener instanceof StoreListener) {\n                 types |= 2 << LifecycleEvent.BEFORE_STORE;\n                 types |= 2 << LifecycleEvent.AFTER_STORE;"},{"sha":"7273d0c0b51f5e3e31a480203c4e514db9d5cbd7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostDeleteListener.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface PostDeleteListener {\r\n+    \r\n+    /**\r\n+     * Receives notifications before an update is performed. Differs from\r\n+     * {@link DeleteListener#afterDelete(LifecycleEvent)} in that the latter\r\n+     * is called after the delete operation, whereas this is called after the\r\n+     * delete statements have been sent to the data store.\r\n+     */\r\n+    public void afterDeletePerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"76a54c7317ec89626d1bad313dae009880771d55","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PostPersistListener.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * @since 1.1.0\r\n+ */\r\n+public interface PostPersistListener {\r\n+\r\n+    /**\r\n+     * Receives notifications after a persist operation has been written to the\r\n+     * data store. Differs from {@link PersistListener#afterPersist} in that\r\n+     * the latter is called at the end of the persist() operation itself, not\r\n+     * after the flush.\r\n+     */\r\n+    public void afterPersistPerformed(LifecycleEvent event);\r\n+}\r"},{"sha":"4f87e14426c0a35b9258e6ac0543b7faf898195d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","status":"modified","additions":253,"deletions":253,"changes":506,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,253 +1,253 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.event;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Collections;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.util.Closeable;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n-import org.apache.openjpa.util.UserException;\n-\n-/**\n- * Manager that can be used to track and notify\n- * {@link RemoteCommitListener}s on remote commit events. If remote events\n- * are enabled, this manager should be installed as a transaction listener on\n- * all brokers so that it knows when commits are made.\n- *\n- * @author Patrick Linskey\n- * @author Abe White\n- * @since 0.3.0\n- */\n-public class RemoteCommitEventManager\n-    extends AbstractConcurrentEventManager\n-    implements EndTransactionListener, Closeable {\n-\n-    private static final Localizer _loc = Localizer.forPackage\n-        (RemoteCommitEventManager.class);\n-\n-    private final RemoteCommitProvider _provider;\n-    private boolean _transmitPersIds = false;\n-\n-    /**\n-     * Constructor. Supply configuration.\n-     */\n-    public RemoteCommitEventManager(OpenJPAConfiguration conf) {\n-        _provider = conf.newRemoteCommitProviderInstance();\n-        if (_provider != null) {\n-            _provider.setRemoteCommitEventManager(this);\n-        }\n-    }\n-\n-    /**\n-     * Return true if remote events are enabled.\n-     */\n-    public boolean areRemoteEventsEnabled() {\n-        return _provider != null;\n-    }\n-\n-    /**\n-     * Return the {@link RemoteCommitProvider} that this manager uses.\n-     *\n-     * @since 0.3.1\n-     */\n-    public RemoteCommitProvider getRemoteCommitProvider() {\n-        return _provider;\n-    }\n-\n-    /**\n-     * Whether the oids of added instances will be transmitted.\n-     */\n-    public boolean getTransmitPersistedObjectIds() {\n-        return _transmitPersIds;\n-    }\n-\n-    /**\n-     * Whether the oids of added instances will be transmitted.\n-     */\n-    public void setTransmitPersistedObjectIds(boolean transmit) {\n-        _transmitPersIds = transmit;\n-    }\n-\n-    /**\n-     * Adds an OpenJPA-internal listener to this RemoteCommitEventManager.\n-     * Listeners so registered will be fired before any that are registered\n-     * via {@link #addListener}. This means that the external listeners can\n-     * rely on internal caches and data structures being up-to-date by the\n-     * time that they are invoked.\n-     *\n-     * @since 1.0.0\n-     */\n-    public void addInternalListener(RemoteCommitListener listen) {\n-        if (_provider == null)\n-            throw new UserException(_loc.get(\"no-provider\"));\n-        ((List) _listeners).add(0, listen);\n-    }\n-\n-    public void addListener(RemoteCommitListener listen) {\n-        if (_provider == null)\n-            throw new UserException(_loc.get(\"no-provider\"));\n-        super.addListener(listen);\n-    }\n-\n-    /**\n-     * Close this manager and all registered listeners.\n-     */\n-    public void close() {\n-        if (_provider != null) {\n-            _provider.close();\n-            Collection listeners = getListeners();\n-            for (Iterator itr = listeners.iterator(); itr.hasNext();)\n-                ((RemoteCommitListener) itr.next()).close();\n-        }\n-    }\n-\n-    protected void fireEvent(Object event, Object listener) {\n-        RemoteCommitListener listen = (RemoteCommitListener) listener;\n-        RemoteCommitEvent ev = (RemoteCommitEvent) event;\n-        listen.afterCommit(ev);\n-    }\n-\n-    /**\n-     * Fire an event to local listeners only notifying them of a detected\n-     * stale record.\n-     *\n-     * @since 1.0.0\n-     */\n-    public void fireLocalStaleNotification(Object oid) {\n-        RemoteCommitEvent ev = new RemoteCommitEvent(\n-            RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION,\n-            null, null, Collections.singleton(oid), null);\n-        fireEvent(ev);\n-    }\n-\n-    //////////////////////////////////////\n-    // TransactionListener implementation\n-    //////////////////////////////////////\n-\n-    public void afterCommit(TransactionEvent event) {\n-        if (_provider != null) {\n-            RemoteCommitEvent rce = createRemoteCommitEvent(event);\n-            if (rce != null)\n-                _provider.broadcast(rce);\n-        }\n-    }\n-\n-    /**\n-     * Create a remote commit event from the given transaction event.\n-     */\n-    private RemoteCommitEvent createRemoteCommitEvent(TransactionEvent event) {\n-        Broker broker = (Broker) event.getSource();\n-        int payload;\n-        Collection persIds = null;\n-        Collection addClassNames = null;\n-        Collection updates = null;\n-        Collection deletes = null;\n-\n-        if (broker.isTrackChangesByType()) {\n-            payload = RemoteCommitEvent.PAYLOAD_EXTENTS;\n-            addClassNames = toClassNames(event.getPersistedTypes());\n-            updates = toClassNames(event.getUpdatedTypes());\n-            deletes = toClassNames(event.getDeletedTypes());\n-            if (addClassNames == null && updates == null && deletes == null)\n-                return null;\n-        } else {\n-            Collection trans = event.getTransactionalObjects();\n-            if (trans.isEmpty())\n-                return null;\n-\n-            payload = (_transmitPersIds)\n-                ? RemoteCommitEvent.PAYLOAD_OIDS_WITH_ADDS\n-                : RemoteCommitEvent.PAYLOAD_OIDS;\n-            Object oid;\n-            Object obj;\n-            OpenJPAStateManager sm;\n-            for (Iterator itr = trans.iterator(); itr.hasNext();) {\n-                obj = itr.next();\n-                sm = broker.getStateManager(obj);\n-\n-                if (sm == null || !sm.isPersistent() || !sm.isDirty())\n-                    continue;\n-                if (sm.isNew() && sm.isDeleted())\n-                    continue;\n-\n-                oid = sm.fetchObjectId();\n-                if (sm.isNew()) {\n-                    if (_transmitPersIds) {\n-                        if (persIds == null)\n-                            persIds = new ArrayList();\n-                        persIds.add(oid);\n-                    }\n-                    if (addClassNames == null)\n-                        addClassNames = new HashSet();\n-                    addClassNames.add(obj.getClass().getName());\n-                } else if (sm.isDeleted()) {\n-                    if (deletes == null)\n-                        deletes = new ArrayList();\n-                    deletes.add(oid);\n-                } else {\n-                    if (updates == null)\n-                        updates = new ArrayList();\n-                    updates.add(oid);\n-                }\n-            }\n-            if (addClassNames == null && updates == null && deletes == null)\n-                return null;\n-        }\n-        return new RemoteCommitEvent(payload, persIds, addClassNames, updates,\n-            deletes);\n-    }\n-\n-    /**\n-     * Transform a collection of classes to class names.\n-     */\n-    private static Collection toClassNames(Collection clss) {\n-        if (clss.isEmpty())\n-            return null;\n-\n-        List names = new ArrayList(clss);\n-        for (int i = 0; i < names.size(); i++)\n-            names.set(i, ((Class) names.get(i)).getName());\n-        return names;\n-    }\n-\n-    public void beforeCommit(TransactionEvent event) {\n-    }\n-\n-    public void afterRollback(TransactionEvent event) {\n-    }\n-\n-    public void afterCommitComplete(TransactionEvent event) {\n-    }\n-\n-    public void afterRollbackComplete(TransactionEvent event) {\n-    }\n-\n-    public void afterStateTransitions(TransactionEvent event)\n-\t{\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Collections;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+/**\r\n+ * Manager that can be used to track and notify\r\n+ * {@link RemoteCommitListener}s on remote commit events. If remote events\r\n+ * are enabled, this manager should be installed as a transaction listener on\r\n+ * all brokers so that it knows when commits are made.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @author Abe White\r\n+ * @since 0.3.0\r\n+ */\r\n+public class RemoteCommitEventManager\r\n+    extends AbstractConcurrentEventManager\r\n+    implements EndTransactionListener, Closeable {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (RemoteCommitEventManager.class);\r\n+\r\n+    private final RemoteCommitProvider _provider;\r\n+    private boolean _transmitPersIds = false;\r\n+\r\n+    /**\r\n+     * Constructor. Supply configuration.\r\n+     */\r\n+    public RemoteCommitEventManager(OpenJPAConfiguration conf) {\r\n+        _provider = conf.newRemoteCommitProviderInstance();\r\n+        if (_provider != null) {\r\n+            _provider.setRemoteCommitEventManager(this);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if remote events are enabled.\r\n+     */\r\n+    public boolean areRemoteEventsEnabled() {\r\n+        return _provider != null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the {@link RemoteCommitProvider} that this manager uses.\r\n+     *\r\n+     * @since 0.3.1\r\n+     */\r\n+    public RemoteCommitProvider getRemoteCommitProvider() {\r\n+        return _provider;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the oids of added instances will be transmitted.\r\n+     */\r\n+    public boolean getTransmitPersistedObjectIds() {\r\n+        return _transmitPersIds;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the oids of added instances will be transmitted.\r\n+     */\r\n+    public void setTransmitPersistedObjectIds(boolean transmit) {\r\n+        _transmitPersIds = transmit;\r\n+    }\r\n+\r\n+    /**\r\n+     * Adds an OpenJPA-internal listener to this RemoteCommitEventManager.\r\n+     * Listeners so registered will be fired before any that are registered\r\n+     * via {@link #addListener}. This means that the external listeners can\r\n+     * rely on internal caches and data structures being up-to-date by the\r\n+     * time that they are invoked.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public void addInternalListener(RemoteCommitListener listen) {\r\n+        if (_provider == null)\r\n+            throw new UserException(_loc.get(\"no-provider\"));\r\n+        ((List) _listeners).add(0, listen);\r\n+    }\r\n+\r\n+    public void addListener(RemoteCommitListener listen) {\r\n+        if (_provider == null)\r\n+            throw new UserException(_loc.get(\"no-provider\"));\r\n+        super.addListener(listen);\r\n+    }\r\n+\r\n+    /**\r\n+     * Close this manager and all registered listeners.\r\n+     */\r\n+    public void close() {\r\n+        if (_provider != null) {\r\n+            _provider.close();\r\n+            Collection listeners = getListeners();\r\n+            for (Iterator itr = listeners.iterator(); itr.hasNext();)\r\n+                ((RemoteCommitListener) itr.next()).close();\r\n+        }\r\n+    }\r\n+\r\n+    protected void fireEvent(Object event, Object listener) {\r\n+        RemoteCommitListener listen = (RemoteCommitListener) listener;\r\n+        RemoteCommitEvent ev = (RemoteCommitEvent) event;\r\n+        listen.afterCommit(ev);\r\n+    }\r\n+\r\n+    /**\r\n+     * Fire an event to local listeners only notifying them of a detected\r\n+     * stale record.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public void fireLocalStaleNotification(Object oid) {\r\n+        RemoteCommitEvent ev = new RemoteCommitEvent(\r\n+            RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION,\r\n+            null, null, Collections.singleton(oid), null);\r\n+        fireEvent(ev);\r\n+    }\r\n+\r\n+    //////////////////////////////////////\r\n+    // TransactionListener implementation\r\n+    //////////////////////////////////////\r\n+\r\n+    public void afterCommit(TransactionEvent event) {\r\n+        if (_provider != null) {\r\n+            RemoteCommitEvent rce = createRemoteCommitEvent(event);\r\n+            if (rce != null)\r\n+                _provider.broadcast(rce);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a remote commit event from the given transaction event.\r\n+     */\r\n+    private RemoteCommitEvent createRemoteCommitEvent(TransactionEvent event) {\r\n+        Broker broker = (Broker) event.getSource();\r\n+        int payload;\r\n+        Collection persIds = null;\r\n+        Collection addClassNames = null;\r\n+        Collection updates = null;\r\n+        Collection deletes = null;\r\n+\r\n+        if (broker.isTrackChangesByType()) {\r\n+            payload = RemoteCommitEvent.PAYLOAD_EXTENTS;\r\n+            addClassNames = toClassNames(event.getPersistedTypes());\r\n+            updates = toClassNames(event.getUpdatedTypes());\r\n+            deletes = toClassNames(event.getDeletedTypes());\r\n+            if (addClassNames == null && updates == null && deletes == null)\r\n+                return null;\r\n+        } else {\r\n+            Collection trans = event.getTransactionalObjects();\r\n+            if (trans.isEmpty())\r\n+                return null;\r\n+\r\n+            payload = (_transmitPersIds)\r\n+                ? RemoteCommitEvent.PAYLOAD_OIDS_WITH_ADDS\r\n+                : RemoteCommitEvent.PAYLOAD_OIDS;\r\n+            Object oid;\r\n+            Object obj;\r\n+            OpenJPAStateManager sm;\r\n+            for (Iterator itr = trans.iterator(); itr.hasNext();) {\r\n+                obj = itr.next();\r\n+                sm = broker.getStateManager(obj);\r\n+\r\n+                if (sm == null || !sm.isPersistent() || !sm.isDirty())\r\n+                    continue;\r\n+                if (sm.isNew() && sm.isDeleted())\r\n+                    continue;\r\n+\r\n+                oid = sm.fetchObjectId();\r\n+                if (sm.isNew()) {\r\n+                    if (_transmitPersIds) {\r\n+                        if (persIds == null)\r\n+                            persIds = new ArrayList();\r\n+                        persIds.add(oid);\r\n+                    }\r\n+                    if (addClassNames == null)\r\n+                        addClassNames = new HashSet();\r\n+                    addClassNames.add(obj.getClass().getName());\r\n+                } else if (sm.isDeleted()) {\r\n+                    if (deletes == null)\r\n+                        deletes = new ArrayList();\r\n+                    deletes.add(oid);\r\n+                } else {\r\n+                    if (updates == null)\r\n+                        updates = new ArrayList();\r\n+                    updates.add(oid);\r\n+                }\r\n+            }\r\n+            if (addClassNames == null && updates == null && deletes == null)\r\n+                return null;\r\n+        }\r\n+        return new RemoteCommitEvent(payload, persIds, addClassNames, updates,\r\n+            deletes);\r\n+    }\r\n+\r\n+    /**\r\n+     * Transform a collection of classes to class names.\r\n+     */\r\n+    private static Collection toClassNames(Collection clss) {\r\n+        if (clss.isEmpty())\r\n+            return null;\r\n+\r\n+        List names = new ArrayList(clss);\r\n+        for (int i = 0; i < names.size(); i++)\r\n+            names.set(i, ((Class) names.get(i)).getName());\r\n+        return names;\r\n+    }\r\n+\r\n+    public void beforeCommit(TransactionEvent event) {\r\n+    }\r\n+\r\n+    public void afterRollback(TransactionEvent event) {\r\n+    }\r\n+\r\n+    public void afterCommitComplete(TransactionEvent event) {\r\n+    }\r\n+\r\n+    public void afterRollbackComplete(TransactionEvent event) {\r\n+    }\r\n+\r\n+    public void afterStateTransitions(TransactionEvent event)\r\n+\t{\r\n+\t}\r\n+}\r"},{"sha":"c8a449a22371aa0c9f3b8a107b3f6258419317b9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","status":"modified","additions":65,"deletions":64,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,64 +1,65 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.event;\n-\n-import java.util.Iterator;\n-import java.util.Set;\n-\n-import org.apache.openjpa.lib.util.concurrent.ConcurrentHashSet;\n-\n-/**\n- * Single-JVM-only implementation of {@link RemoteCommitProvider}\n- * that listens for object modifications and propagates those changes\n- * to other SingleJVMRemoteCommitProviders in the same JVM. This is\n- * only useful for linking together multiple factories in the same\n- * JVM that are all loaded in the same classloader, which is a rare\n- * circumstance.\n- *\n- * @author Patrick Linskey\n- * @since 0.2.5.0\n- */\n-public class SingleJVMRemoteCommitProvider\n-    extends AbstractRemoteCommitProvider {\n-\n-    private static Set s_providers = new ConcurrentHashSet();\n-\n-    public SingleJVMRemoteCommitProvider() {\n-        s_providers.add(this);\n-    }\n-\n-    public void broadcast(RemoteCommitEvent event) {\n-        SingleJVMRemoteCommitProvider provider;\n-        for (Iterator iter = s_providers.iterator(); iter.hasNext();) {\n-            provider = (SingleJVMRemoteCommitProvider) iter.next();\n-\n-            // don't notify this object -- this provider's factory\n-            // should not be notified of commits that originated\n-            // with one of its brokers\n-            if (provider == this)\n-                continue;\n-\n-            provider.fireEvent(event);\n-        }\n-    }\n-\n-    public void close() {\n-        s_providers.remove(this);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import java.util.Iterator;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\r\n+\r\n+/**\r\n+ * Single-JVM-only implementation of {@link RemoteCommitProvider}\r\n+ * that listens for object modifications and propagates those changes\r\n+ * to other SingleJVMRemoteCommitProviders in the same JVM. This is\r\n+ * only useful for linking together multiple factories in the same\r\n+ * JVM that are all loaded in the same classloader, which is a rare\r\n+ * circumstance.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @since 0.2.5.0\r\n+ */\r\n+public class SingleJVMRemoteCommitProvider\r\n+    extends AbstractRemoteCommitProvider {\r\n+\r\n+    private static Set s_providers = new ConcurrentReferenceHashSet(\r\n+        ConcurrentReferenceHashSet.HARD);\r\n+\r\n+    public SingleJVMRemoteCommitProvider() {\r\n+        s_providers.add(this);\r\n+    }\r\n+\r\n+    public void broadcast(RemoteCommitEvent event) {\r\n+        SingleJVMRemoteCommitProvider provider;\r\n+        for (Iterator iter = s_providers.iterator(); iter.hasNext();) {\r\n+            provider = (SingleJVMRemoteCommitProvider) iter.next();\r\n+\r\n+            // don't notify this object -- this provider's factory\r\n+            // should not be notified of commits that originated\r\n+            // with one of its brokers\r\n+            if (provider == this)\r\n+                continue;\r\n+\r\n+            provider.fireEvent(event);\r\n+        }\r\n+    }\r\n+\r\n+    public void close() {\r\n+        s_providers.remove(this);\r\n+    }\r\n+}\r"},{"sha":"987cafaf0196195fa3805f52f169caac6ea61258","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","status":"modified","additions":948,"deletions":948,"changes":1896,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01","patch":"@@ -1,948 +1,948 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.event;\n-\n-import java.io.BufferedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.EOFException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.OutputStream;\n-import java.net.InetAddress;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n-import java.net.SocketException;\n-import java.net.UnknownHostException;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.List;\n-import java.util.Collections;\n-\n-import org.apache.commons.pool.PoolableObjectFactory;\n-import org.apache.commons.pool.impl.GenericObjectPool;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.GeneralException;\n-import org.apache.openjpa.util.InternalException;\n-import org.apache.openjpa.util.Serialization;\n-import org.apache.openjpa.lib.util.concurrent.ReentrantLock;\n-\n-import serp.util.Strings;\n-\n-/**\n- * TCP-based implementation of {@link RemoteCommitProvider} that\n- * listens for object modifications and propagates those changes to\n- * other RemoteCommitProviders over TCP sockets.\n- *\n- * @author Brian Leair\n- * @author Patrick Linskey\n- * @since 0.2.5.0\n- */\n-public class TCPRemoteCommitProvider\n-    extends AbstractRemoteCommitProvider\n-    implements Configurable {\n-\n-    private static final int DEFAULT_PORT = 5636;\n-\n-    private static final Localizer s_loc = Localizer.forPackage\n-        (TCPRemoteCommitProvider.class);\n-    private static long s_idSequence = System.currentTimeMillis();\n-\n-    //\tA map of listen ports to listeners in this JVM. We might\n-    //\twant to look into allowing same port, different interface --\n-    //\tthat is not currently possible in a single JVM.\n-    private static final Map s_portListenerMap = new HashMap();\n-\n-    private long _id;\n-    private byte[] _localhost;\n-    private int _port = DEFAULT_PORT;\n-    private int _maxActive = 2;\n-    private int _maxIdle = 2;\n-    private int _recoveryTimeMillis = 15000;\n-    private TCPPortListener _listener;\n-    private BroadcastQueue _broadcastQueue = new BroadcastQueue();\n-    private final List _broadcastThreads = Collections.synchronizedList(\n-        new LinkedList());\n-\n-    private ArrayList _addresses = new ArrayList();\n-    private ReentrantLock _addressesLock;\n-\n-    public TCPRemoteCommitProvider()\n-        throws UnknownHostException {\n-        // obtain a unique ID.\n-        synchronized (TCPRemoteCommitProvider.class) {\n-            _id = s_idSequence++;\n-        }\n-\n-        // cache the local IP address.\n-        _localhost = InetAddress.getLocalHost().getAddress();\n-        _addressesLock = new ReentrantLock();\n-        setNumBroadcastThreads(2);\n-    }\n-\n-    /**\n-     * The port that this provider should listen on.\n-     */\n-    public int getPort() {\n-        return _port;\n-    }\n-\n-    /**\n-     * The port that this provider should listen on. Set once only.\n-     */\n-    public void setPort(int port) {\n-        _port = port;\n-    }\n-\n-    /**\n-     * The number of milliseconds to wait before retrying\n-     * to reconnect to a peer after it becomes unreachable.\n-     */\n-    public void setRecoveryTimeMillis(int recoverytime) {\n-        _recoveryTimeMillis = recoverytime;\n-    }\n-\n-    /**\n-     * The number of milliseconds to wait before retrying\n-     * to reconnect to a peer after it becomes unreachable.\n-     */\n-    public int getRecoveryTimeMillis() {\n-        return _recoveryTimeMillis;\n-    }\n-\n-    /**\n-     * The maximum number of sockets that this provider can\n-     * simetaneously open to each peer in the cluster.\n-     */\n-    public void setMaxActive(int maxActive) {\n-        _maxActive = maxActive;\n-    }\n-\n-    /**\n-     * The maximum number of sockets that this provider can\n-     * simetaneously open to each peer in the cluster.\n-     */\n-    public int getMaxActive() {\n-        return _maxActive;\n-    }\n-\n-    /**\n-     * The number of idle sockets that this provider can keep open\n-     * to each peer in the cluster.\n-     */\n-    public void setMaxIdle(int maxIdle) {\n-        _maxIdle = maxIdle;\n-    }\n-\n-    /**\n-     * The number of idle sockets that this provider can keep open\n-     * to each peer in the cluster.\n-     */\n-    public int getMaxIdle() {\n-        return _maxIdle;\n-    }\n-\n-    /**\n-     * The number of worker threads that are used for\n-     * transmitting packets to peers in the cluster.\n-     */\n-    public void setNumBroadcastThreads(int numBroadcastThreads) {\n-        synchronized (_broadcastThreads) {\n-            int cur = _broadcastThreads.size();\n-            if (cur > numBroadcastThreads) {\n-                // Notify the extra worker threads so they stop themselves\n-                // Threads will not end until they send another pk.\n-                for (int i = numBroadcastThreads; i < cur; i++) {\n-                    BroadcastWorkerThread worker = (BroadcastWorkerThread)\n-                        _broadcastThreads.remove(0);\n-                    worker.setRunning(false);\n-                }\n-            } else if (cur < numBroadcastThreads) {\n-                // Create additional worker threads\n-                for (int i = cur; i < numBroadcastThreads; i++) {\n-                    BroadcastWorkerThread wt = new BroadcastWorkerThread();\n-                    wt.setDaemon(true);\n-                    wt.start();\n-                    _broadcastThreads.add(wt);\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * The number of worker threads that are used for\n-     * transmitting packets to peers in the cluster.\n-     */\n-    public int getNumBroadcastThreads() {\n-        return _broadcastThreads.size();\n-    }\n-\n-    /**\n-     * Sets the list of addresses of peers to which this provider will\n-     * send events to. The peers are semicolon-separated <code>names</code>\n-     * list in the form of \"myhost1:portA;myhost2:portB\".\n-     */\n-    public void setAddresses(String names)\n-        throws UnknownHostException {\n-        // NYI. Could look for equivalence of addresses and avoid\n-        // changing those that didn't change.\n-\n-        _addressesLock.lock();\n-        try {\n-            for (Iterator iter = _addresses.iterator(); iter.hasNext();) {\n-                ((HostAddress) iter.next()).close();\n-            }\n-            String[] toks = Strings.split(names, \";\", 0);\n-            _addresses = new ArrayList(toks.length);\n-\n-            InetAddress localhost = InetAddress.getLocalHost();\n-            String localhostName = localhost.getHostName();\n-\n-            for (int i = 0; i < toks.length; i++) {\n-                String host = toks[i];\n-                String hostname;\n-                int tmpPort;\n-                int colon = host.indexOf(':');\n-                if (colon != -1) {\n-                    hostname = host.substring(0, colon);\n-                    tmpPort = Integer.parseInt(host.substring(colon + 1));\n-                } else {\n-                    hostname = host;\n-                    tmpPort = DEFAULT_PORT;\n-                }\n-                InetAddress tmpAddress = (InetAddress) AccessController\n-                    .doPrivileged(J2DoPrivHelper.getByNameAction(hostname)); \n-\n-                // bleair: For each address we would rather make use of\n-                // the jdk1.4 isLinkLocalAddress () || isLoopbackAddress ().\n-                // (Though in practice on win32 they don't work anyways!)\n-                // Instead we will check hostname. Not perfect, but\n-                // it will match often enough (people will typically\n-                // use the DNS machine names and be cutting/pasting.)\n-                if (localhostName.equals(hostname)) {\n-                    // This string matches the hostname for for ourselves, we\n-                    // don't actually need to send ourselves messages.\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(s_loc.get(\"tcp-address-asself\",\n-                            tmpAddress.getHostName() + \":\" + tmpPort));\n-                    }\n-                } else {\n-                    HostAddress newAddress = new HostAddress(host);\n-                    _addresses.add(newAddress);\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(s_loc.get(\"tcp-address-set\",\n-                            newAddress._address.getHostName() + \":\"\n-                                + newAddress._port));\n-                    }\n-                }\n-            }\n-        } catch (PrivilegedActionException pae) {\n-            throw (UnknownHostException) pae.getException();\n-        } finally {\n-            _addressesLock.unlock();\n-        }\n-    }\n-\n-    // ---------- Configurable implementation ----------\n-\n-    /**\n-     * Subclasses that need to perform actions in\n-     * {@link Configurable#endConfiguration} must invoke this method.\n-     */\n-    public void endConfiguration() {\n-        super.endConfiguration();\n-        synchronized (s_portListenerMap) {\n-            // see if a listener exists for this port.\n-            _listener = (TCPPortListener) s_portListenerMap.get\n-                (String.valueOf(_port));\n-\n-            if (_listener == null ||\n-                (!_listener.isRunning() && _listener._port == _port)) {\n-                try {\n-                    _listener = new TCPPortListener(_port, log);\n-                    _listener.listen();\n-                    s_portListenerMap.put(String.valueOf(_port), _listener);\n-                } catch (Exception e) {\n-                    throw new GeneralException(s_loc.get(\"tcp-init-exception\",\n-                        String.valueOf(_port)), e).setFatal(true);\n-                }\n-            } else if (_listener.isRunning()) {\n-                if (_listener._port != _port) {\n-                    // this really shouldn't be able to happen.\n-                    throw new GeneralException(s_loc.get\n-                        (\"tcp-not-equal\", String.valueOf(_port))).\n-                        setFatal(true);\n-                }\n-            } else\n-                throw new InternalException(s_loc.get(\"tcp-listener-broken\"));\n-            _listener.addProvider(this);\n-        }\n-\n-        _addressesLock.lock();\n-        try {\n-            HostAddress curAddress;\n-            for (Iterator iter = _addresses.iterator();\n-                iter.hasNext();) {\n-                curAddress = (HostAddress) iter.next();\n-                curAddress.setMaxActive(_maxActive);\n-                curAddress.setMaxIdle(_maxIdle);\n-            }\n-        }\n-        finally {\n-            _addressesLock.unlock();\n-        }\n-    }\n-\n-    // ---------- RemoteCommitProvider implementation ----------\n-\n-    // pre 3.3.4\t= <no version number transmitted>\n-    // 3.3 Preview \t= 0x1428acfd;\n-    // 3.4 \t\t\t= 0x1428acff;\n-    private static final long PROTOCOL_VERSION = 0x1428acff;\n-\n-    public void broadcast(RemoteCommitEvent event) {\n-        try {\n-            // build a packet notifying other JVMs of object changes.\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            ObjectOutputStream oos = new ObjectOutputStream(baos);\n-\n-            oos.writeLong(PROTOCOL_VERSION);\n-            oos.writeLong(_id);\n-            oos.writeInt(_port);\n-            oos.writeObject(_localhost);\n-            oos.writeObject(event);\n-            oos.flush();\n-\n-            byte[] bytes = baos.toByteArray();\n-            baos.close();\n-            if (_broadcastThreads.isEmpty())\n-                sendUpdatePacket(bytes);\n-            else\n-                _broadcastQueue.addPacket(bytes);\n-        } catch (IOException ioe) {\n-            if (log.isWarnEnabled())\n-                log.warn(s_loc.get(\"tcp-payload-create-error\"), ioe);\n-        }\n-    }\n-\n-    /**\n-     * Sends a change notification packet to other machines in this\n-     * provider cluster.\n-     */\n-    private void sendUpdatePacket(byte[] bytes) {\n-        _addressesLock.lock();\n-        try {\n-            for (Iterator iter = _addresses.iterator(); iter.hasNext();)\n-                ((HostAddress) iter.next()).sendUpdatePacket(bytes);\n-        } finally {\n-            _addressesLock.unlock();\n-        }\n-    }\n-\n-    public void close() {\n-        if (_listener != null)\n-            _listener.removeProvider(this);\n-\n-        // Remove Broadcast Threads then close sockets.\n-        _broadcastQueue.close();\n-\n-        // Wait for _broadcastThreads to get cleaned up.\n-        while(!_broadcastThreads.isEmpty()) {\n-            try {\n-                Thread.sleep(500);\n-            } catch (InterruptedException ie) {\n-                // Ignore.\n-            }\n-        }\n-        \n-        _addressesLock.lock();\n-        try {\n-            for (Iterator iter = _addresses.iterator(); iter.hasNext();)\n-                ((HostAddress) iter.next()).close();\n-        } finally {\n-            _addressesLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * Utility class to hold messages to be sent. This\n-     * allows calls to broadcast () to return without\n-     * waiting for the send to complete.\n-     */\n-    private static class BroadcastQueue {\n-\n-        private LinkedList _packetQueue = new LinkedList();\n-        private boolean _closed = false;\n-\n-        public synchronized void close() {\n-            _closed = true;\n-            notifyAll();\n-        }\n-\n-        public synchronized boolean isClosed() {\n-            return _closed;\n-        }\n-\n-        public synchronized void addPacket(byte[] bytes) {\n-            _packetQueue.addLast(bytes);\n-            notify();\n-        }\n-\n-        /**\n-         * @return the bytes defining the packet to process, or\n-         * <code>null</code> if the queue is empty.\n-         */\n-        public synchronized byte[] removePacket()\n-            throws InterruptedException {\n-            // only wait if the queue is still open. This allows processing\n-            // of events in the queue to continue, while avoiding sleeping\n-            // during shutdown.\n-            while (!_closed && _packetQueue.isEmpty())\n-                wait();\n-            if (_packetQueue.isEmpty())\n-                return null;\n-            else\n-                return (byte[]) _packetQueue.removeFirst();\n-        }\n-    }\n-\n-    /**\n-     * Threads to broadcast packets placed in the {@link BroadcastQueue}.\n-     */\n-    private class BroadcastWorkerThread\n-        extends Thread {\n-\n-        private boolean _keepRunning = true;\n-\n-        public void run() {\n-            while (_keepRunning) {\n-                try {\n-                    // This will block until there is a packet to send, or\n-                    // until the queue is closed.\n-                    byte[] bytes = _broadcastQueue.removePacket();\n-                    if (bytes != null)\n-                        sendUpdatePacket(bytes);\n-                    else if (_broadcastQueue.isClosed())\n-                        _keepRunning = false;\n-                } catch (InterruptedException e) {\n-                    // End the thread.\n-                    break;\n-                }\n-            }\n-            remove();\n-        }\n-\n-        public void setRunning(boolean keepRunning) {\n-            _keepRunning = keepRunning;\n-        }\n-        \n-        private void remove() {\n-            _broadcastThreads.remove(this);\n-        }\n-    }\n-\n-    /**\n-     * Responsible for listening for incoming packets and processing them.\n-     */\n-    private static class TCPPortListener\n-        implements Runnable {\n-\n-        private final Log _log;\n-        private ServerSocket _receiveSocket;\n-        private Thread _acceptThread;\n-        private Set _receiverThreads = new HashSet();\n-        private final Set _providers = new HashSet();\n-\n-        /**\n-         * Cache the local IP address\n-         */\n-        private byte[] _localhost;\n-\n-        /**\n-         * The port that this listener should listen on. Configured\n-         * by TCPRemoteCommitProvider.\n-         */\n-        private int _port;\n-\n-        /**\n-         * Should be set to <code>true</code> once the listener is listening.\n-         */\n-        private boolean _isRunning = false;\n-\n-        /**\n-         * Construct a new TCPPortListener configured to use the specified port.\n-         */\n-        private TCPPortListener(int port, Log log)\n-            throws IOException {\n-            _port = port;\n-            _log = log;\n-            try {\n-                _receiveSocket = (ServerSocket) AccessController\n-                    .doPrivileged(J2DoPrivHelper.newServerSocketAction(_port));\n-            } catch (PrivilegedActionException pae) {\n-                throw (IOException) pae.getException();\n-            }\n-            _localhost = InetAddress.getLocalHost().getAddress();\n-\n-            if (_log.isTraceEnabled())\n-                _log.info(s_loc.get(\"tcp-start-listener\",\n-                    String.valueOf(_port)));\n-        }\n-\n-        private void listen() {\n-            _acceptThread = new Thread(this);\n-            _acceptThread.setDaemon(true);\n-            _acceptThread.start();\n-        }\n-\n-        /**\n-         * All providers added here will be notified of any incoming\n-         * provider messages. There will be one of these per\n-         * BrokerFactory in a given JVM.\n-         * {@link TCPRemoteCommitProvider#endConfiguration} invokes\n-         * <code>addProvider</code> with <code>this</code> upon\n-         * completion of configuration.\n-         */\n-        private void addProvider(TCPRemoteCommitProvider provider) {\n-            synchronized (_providers) {\n-                _providers.add(provider);\n-            }\n-        }\n-\n-        /**\n-         * Remove a provider from the list of providers to notify of\n-         * commit events.\n-         */\n-        private synchronized void removeProvider\n-            (TCPRemoteCommitProvider provider) {\n-            synchronized (_providers) {\n-                _providers.remove(provider);\n-\n-                // if the provider list is empty, shut down the thread.\n-                if (_providers.size() == 0) {\n-                    _isRunning = false;\n-                    try {\n-                        _receiveSocket.close();\n-                    } catch (IOException ioe) {\n-                        if (_log.isWarnEnabled())\n-                            _log.warn(s_loc.get(\"tcp-close-error\"), ioe);\n-                    }\n-                    _acceptThread.interrupt();\n-                }\n-            }\n-        }\n-\n-        private boolean isRunning() {\n-            synchronized (_providers) {\n-                return _isRunning;\n-            }\n-        }\n-\n-        public void run() {\n-            synchronized (_providers) {\n-                _isRunning = true;\n-            }\n-\n-            Socket s = null;\n-            while (_isRunning) {\n-                try {\n-                    s = null;\n-                    // Block, waiting to accept new connection from a peer\n-                    s = (Socket) AccessController.doPrivileged(J2DoPrivHelper\n-                        .acceptAction(_receiveSocket));\n-                    if (_log.isTraceEnabled()) {\n-                        _log.trace(s_loc.get(\"tcp-received-connection\",\n-                            s.getInetAddress().getHostAddress()\n-                                + \":\" + s.getPort()));\n-                    }\n-                    ReceiveSocketHandler sh = new ReceiveSocketHandler(s);\n-                    Thread receiverThread = new Thread(sh);\n-                    receiverThread.setDaemon(true);\n-                    receiverThread.start();\n-                    _receiverThreads.add(receiverThread);\n-                } catch (Exception e) {\n-                    if (e instanceof PrivilegedActionException)\n-                        e = ((PrivilegedActionException) e).getException();\n-                    if (!(e instanceof SocketException) || _isRunning)\n-                        if (_log.isWarnEnabled())\n-                            _log.warn(s_loc.get(\"tcp-accept-error\"), e);\n-\n-                    // Nominal case (InterruptedException) because close ()\n-                    // calls _acceptThread.interrupt ();\n-                    try {\n-                        if (s != null)\n-                            s.close();\n-                    } catch (Exception ee) {\n-                        if (_log.isWarnEnabled())\n-                            _log.warn(s_loc.get(\"tcp-close-error\"), e);\n-                    }\n-                }\n-            }\n-\n-            // We are done listening. Interrupt any worker threads.\n-            Thread worker;\n-            for (Iterator iter = _receiverThreads.iterator();\n-                iter.hasNext();) {\n-                worker = (Thread) iter.next();\n-                // FYI, the worker threads are blocked\n-                // reading from the socket's InputStream. InputStreams\n-                // aren't interruptable, so this interrupt isn't\n-                // really going to be delivered until something breaks\n-                // the InputStream.\n-                worker.interrupt();\n-            }\n-            synchronized (_providers) {\n-                try {\n-                    if (_isRunning)\n-                        _receiveSocket.close();\n-                } catch (Exception e) {\n-                    if (_log.isWarnEnabled())\n-                        _log.warn(s_loc.get(\"tcp-close-error\"), e);\n-                }\n-                _isRunning = false;\n-                if (_log.isTraceEnabled())\n-                    _log.trace(s_loc.get(\"tcp-close-listener\",\n-                        _port + \"\"));\n-            }\n-        }\n-\n-        /**\n-         * Utility class that acts as a worker thread to receive Events\n-         * from broadcasters.\n-         */\n-        private class ReceiveSocketHandler\n-            implements Runnable {\n-\n-            private InputStream _in;\n-            private Socket _s;\n-\n-            private ReceiveSocketHandler(Socket s) {\n-                // We are the receiving end and we don't send any messages\n-                // back to the broadcaster. Turn off Nagle's so that\n-                // we will send ack packets without waiting.\n-                _s = s;\n-                try {\n-                    _s.setTcpNoDelay(true);\n-                    _in = new BufferedInputStream(s.getInputStream());\n-                } catch (IOException ioe) {\n-                    if (_log.isInfoEnabled())\n-                        _log.info(s_loc.get(\"tcp-socket-option-error\"), ioe);\n-                    _s = null;\n-                } catch (Exception e) {\n-                    if (_log.isWarnEnabled())\n-                        _log.warn(s_loc.get(\"tcp-receive-error\"), e);\n-                    _s = null;\n-                }\n-            }\n-\n-            public void run() {\n-                if (_s == null)\n-                    return;\n-                while (_isRunning && _s != null) {\n-                    try {\n-                        // This will block our thread, waiting to read\n-                        // the next Event-object-message.\n-                        handle(_in);\n-                    } catch (EOFException eof) {\n-                        // EOFException raised when peer is properly\n-                        // closing its end.\n-                        if (_log.isTraceEnabled()) {\n-                            _log.trace(s_loc.get(\"tcp-close-socket\",\n-                                _s.getInetAddress().getHostAddress()\n-                                    + \":\" + _s.getPort()));\n-                        }\n-                        break;\n-                    } catch (Throwable e) {\n-                        if (_log.isWarnEnabled())\n-                            _log.warn(s_loc.get(\"tcp-receive-error\"), e);\n-                        break;\n-                    }\n-                }\n-                // We are done receiving on this socket and this worker\n-                // thread is terminating.\n-                try {\n-                    _in.close();\n-                    if (_s != null)\n-                        _s.close();\n-                } catch (IOException e) {\n-                    _log.warn(s_loc.get(\"tcp-close-socket-error\",\n-                        _s.getInetAddress().getHostAddress() + \":\"\n-                            + _s.getPort()), e);\n-                }\n-            }\n-\n-            /**\n-             * Process an {@link InputStream} containing objects written\n-             * by {@link TCPRemoteCommitProvider#broadcast(RemoteCommitEvent)}.\n-             */\n-            private void handle(InputStream in)\n-                throws IOException, ClassNotFoundException {\n-                // This will block waiting for the next\n-                ObjectInputStream ois = \n-                    new Serialization.ClassResolvingObjectInputStream(in);\n-\n-                long protocolVersion = ois.readLong();\n-                if (protocolVersion != PROTOCOL_VERSION) {\n-                    if (_log.isWarnEnabled()) {\n-                        _log.warn(s_loc.get(\"tcp-wrong-version-error\",\n-                            _s.getInetAddress().getHostAddress() + \":\"\n-                                + _s.getPort()));\n-                        return;\n-                    }\n-                }\n-\n-                long senderId = ois.readLong();\n-                int senderPort = ois.readInt();\n-                byte[] senderAddress = (byte[]) ois.readObject();\n-                RemoteCommitEvent rce = (RemoteCommitEvent) ois.readObject();\n-                if (_log.isTraceEnabled()) {\n-                    _log.trace(s_loc.get(\"tcp-received-event\",\n-                        _s.getInetAddress().getHostAddress() + \":\"\n-                            + _s.getPort()));\n-                }\n-\n-                boolean fromSelf = senderPort == _port &&\n-                    Arrays.equals(senderAddress, _localhost);\n-                TCPRemoteCommitProvider provider;\n-                synchronized (_providers) {\n-                    // bleair: We're iterating, but currenlty there can really\n-                    // only be a single provider.\n-                    for (Iterator iter = _providers.iterator();\n-                        iter.hasNext();) {\n-                        provider = (TCPRemoteCommitProvider) iter.next();\n-                        if (senderId != provider._id || !fromSelf)\n-                            provider.eventManager.fireEvent(rce);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Utility class to store an InetAddress and an int. Not using\n-     * InetSocketAddress because it's a JDK1.4 API. This also\n-     * provides a wrapper around the socket(s) associated with this address.\n-     */\n-    private class HostAddress {\n-\n-        private InetAddress _address;\n-        private int _port;\n-        private long _timeLastError; // millis\n-        private boolean _isAvailable; // is peer thought to be up\n-        private int _infosIssued = 0; // limit log entries\n-\n-        private GenericObjectPool _socketPool; // reusable open sockets\n-\n-        /**\n-         * Construct a new host address from a string of the form\n-         * \"host:port\" or of the form \"host\".\n-         */\n-        private HostAddress(String host)\n-            throws UnknownHostException {\n-            int colon = host.indexOf(':');\n-            try {\n-                if (colon != -1) {\n-                    _address = (InetAddress) AccessController\n-                        .doPrivileged(J2DoPrivHelper.getByNameAction(host\n-                            .substring(0, colon)));\n-                    _port = Integer.parseInt(host.substring(colon + 1));\n-                } else {\n-                    _address = (InetAddress) AccessController\n-                        .doPrivileged(J2DoPrivHelper.getByNameAction(host));\n-                    _port = DEFAULT_PORT;\n-                }\n-            } catch (PrivilegedActionException pae) {\n-                throw (UnknownHostException) pae.getException();\n-            }\n-            // -1 max wait == as long as it takes\n-            _socketPool = new GenericObjectPool\n-                (new SocketPoolableObjectFactory(), _maxActive,\n-                    GenericObjectPool.WHEN_EXHAUSTED_BLOCK, -1);\n-            _isAvailable = true;\n-        }\n-\n-        private void setMaxActive(int maxActive) {\n-            _socketPool.setMaxActive(maxActive);\n-        }\n-\n-        private void setMaxIdle(int maxIdle) {\n-            _socketPool.setMaxIdle(maxIdle);\n-        }\n-\n-        public void close() {\n-            // Close the pool of sockets to this peer. This\n-            // will close all sockets in the pool.\n-            try {\n-                _socketPool.close();\n-            } catch (Exception e) {\n-                if (log.isWarnEnabled()) {\n-                    log.warn(s_loc.get(\"tcp-close-pool-error\"), e);\n-                }\n-            }\n-        }\n-\n-        private void sendUpdatePacket(byte[] bytes) {\n-            if (!_isAvailable) {\n-                long now = System.currentTimeMillis();\n-                if (now - _timeLastError < _recoveryTimeMillis)\n-                    // Not enough time has passed since the last error\n-                    return;\n-            }\n-            Socket s = null;\n-            try {\n-                s = getSocket();\n-                OutputStream os = s.getOutputStream();\n-                os.write(bytes);\n-                os.flush();\n-\n-                if (log.isTraceEnabled()) {\n-                    log.trace(s_loc.get(\"tcp-sent-update\",\n-                        _address.getHostAddress() + \":\" + _port,\n-                        String.valueOf(s.getLocalPort())));\n-                }\n-                _isAvailable = true;\n-                _infosIssued = 0;\n-                // Return the socket to the pool; the socket is\n-                // still good.\n-                returnSocket(s);\n-            } catch (Exception e) {\n-                // There has been a problem sending to the peer.\n-                // The OS socket that was being used is can no longer\n-                // be used.\n-                if (s != null)\n-                    this.closeSocket(s);\n-                this.clearAllSockets();\n-\n-                if (_isAvailable) {\n-                    // Log a warning, the peer was up and has now gone down\n-                    if (log.isWarnEnabled()) {\n-                        log.warn(s_loc.get(\"tcp-send-error\",\n-                            _address.getHostAddress() + \":\" + _port), e);\n-                    }\n-                    _isAvailable = false;\n-                    // Once enough time has passed we will log another warning\n-                    _timeLastError = System.currentTimeMillis();\n-                } else {\n-                    long now = System.currentTimeMillis();\n-                    if (now - _timeLastError > _recoveryTimeMillis) {\n-                        if (_infosIssued < 5) {\n-                            // Enough time has passed, and peer is still down\n-                            _timeLastError = System.currentTimeMillis();\n-                            // We were trying to reestablish the connection,\n-                            // but we failed again. Log a message, but\n-                            // lower severity. This log will occur periodically\n-                            // for 5 times until the peer comes back.\n-                            if (log.isInfoEnabled()) {\n-                                log.info(s_loc.get(\"tcp-send-still-error\",\n-                                    _address.getHostAddress() + \":\"\n-                                        + _port), e);\n-                            }\n-                            _infosIssued++;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        private Socket getSocket()\n-            throws Exception {\n-            return (Socket) _socketPool.borrowObject();\n-        }\n-\n-        private void returnSocket(Socket s)\n-            throws Exception {\n-            _socketPool.returnObject(s);\n-        }\n-\n-        private void clearAllSockets() {\n-            _socketPool.clear();\n-        }\n-\n-        private void closeSocket(Socket s) {\n-            // All sockets come from the pool.\n-            // This socket is no longer usable, so delete it from the\n-            // pool.\n-            try {\n-                _socketPool.invalidateObject(s);\n-            } catch (Exception e) {\n-            }\n-        }\n-\n-        /**\n-         * Factory for pooled sockets.\n-         */\n-        private class SocketPoolableObjectFactory\n-            implements PoolableObjectFactory {\n-\n-            public Object makeObject()\n-                throws IOException {\n-                try {\n-                    Socket s = (Socket) AccessController\n-                        .doPrivileged(J2DoPrivHelper.newSocketAction(_address,\n-                            _port));\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(s_loc.get(\"tcp-open-connection\", _address\n-                            + \":\" + _port, \"\" + s.getLocalPort()));\n-                    }\n-                    return s;\n-                } catch (PrivilegedActionException pae) {\n-                    throw (IOException) pae.getException();\n-                }\n-            }\n-\n-            public void destroyObject(Object obj) {\n-                // silentClose ().\n-                try {\n-                    Socket s = (Socket) obj;\n-                    if (log.isTraceEnabled())\n-                        log.trace(s_loc.get(\"tcp-close-sending-socket\",\n-                            _address + \":\" + _port, \"\" + s.getLocalPort()));\n-                    s.close();\n-                } catch (Exception e) {\n-                    log.warn(s_loc.get(\"tcp-close-socket-error\",\n-                        _address.getHostAddress() + \":\" + _port), e);\n-                }\n-            }\n-\n-            public boolean validateObject(Object obj) {\n-                return true;\n-            }\n-\n-            public void activateObject (Object value)\n-\t\t\t{\n-\t\t\t}\n-\n-\t\t\tpublic void passivateObject (Object value)\n-\t\t\t{\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import java.io.BufferedInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.EOFException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.OutputStream;\r\n+import java.net.InetAddress;\r\n+import java.net.ServerSocket;\r\n+import java.net.Socket;\r\n+import java.net.SocketException;\r\n+import java.net.UnknownHostException;\r\n+import java.security.AccessController;\r\n+import java.security.PrivilegedActionException;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.List;\r\n+import java.util.Collections;\r\n+\r\n+import org.apache.commons.pool.PoolableObjectFactory;\r\n+import org.apache.commons.pool.impl.GenericObjectPool;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.GeneralException;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.Serialization;\r\n+import java.util.concurrent.locks.ReentrantLock;\r\n+\r\n+import serp.util.Strings;\r\n+\r\n+/**\r\n+ * TCP-based implementation of {@link RemoteCommitProvider} that\r\n+ * listens for object modifications and propagates those changes to\r\n+ * other RemoteCommitProviders over TCP sockets.\r\n+ *\r\n+ * @author Brian Leair\r\n+ * @author Patrick Linskey\r\n+ * @since 0.2.5.0\r\n+ */\r\n+public class TCPRemoteCommitProvider\r\n+    extends AbstractRemoteCommitProvider\r\n+    implements Configurable {\r\n+\r\n+    private static final int DEFAULT_PORT = 5636;\r\n+\r\n+    private static final Localizer s_loc = Localizer.forPackage\r\n+        (TCPRemoteCommitProvider.class);\r\n+    private static long s_idSequence = System.currentTimeMillis();\r\n+\r\n+    //\tA map of listen ports to listeners in this JVM. We might\r\n+    //\twant to look into allowing same port, different interface --\r\n+    //\tthat is not currently possible in a single JVM.\r\n+    private static final Map s_portListenerMap = new HashMap();\r\n+\r\n+    private long _id;\r\n+    private byte[] _localhost;\r\n+    private int _port = DEFAULT_PORT;\r\n+    private int _maxActive = 2;\r\n+    private int _maxIdle = 2;\r\n+    private int _recoveryTimeMillis = 15000;\r\n+    private TCPPortListener _listener;\r\n+    private BroadcastQueue _broadcastQueue = new BroadcastQueue();\r\n+    private final List _broadcastThreads = Collections.synchronizedList(\r\n+        new LinkedList());\r\n+\r\n+    private ArrayList _addresses = new ArrayList();\r\n+    private ReentrantLock _addressesLock;\r\n+\r\n+    public TCPRemoteCommitProvider()\r\n+        throws UnknownHostException {\r\n+        // obtain a unique ID.\r\n+        synchronized (TCPRemoteCommitProvider.class) {\r\n+            _id = s_idSequence++;\r\n+        }\r\n+\r\n+        // cache the local IP address.\r\n+        _localhost = InetAddress.getLocalHost().getAddress();\r\n+        _addressesLock = new ReentrantLock();\r\n+        setNumBroadcastThreads(2);\r\n+    }\r\n+\r\n+    /**\r\n+     * The port that this provider should listen on.\r\n+     */\r\n+    public int getPort() {\r\n+        return _port;\r\n+    }\r\n+\r\n+    /**\r\n+     * The port that this provider should listen on. Set once only.\r\n+     */\r\n+    public void setPort(int port) {\r\n+        _port = port;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of milliseconds to wait before retrying\r\n+     * to reconnect to a peer after it becomes unreachable.\r\n+     */\r\n+    public void setRecoveryTimeMillis(int recoverytime) {\r\n+        _recoveryTimeMillis = recoverytime;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of milliseconds to wait before retrying\r\n+     * to reconnect to a peer after it becomes unreachable.\r\n+     */\r\n+    public int getRecoveryTimeMillis() {\r\n+        return _recoveryTimeMillis;\r\n+    }\r\n+\r\n+    /**\r\n+     * The maximum number of sockets that this provider can\r\n+     * simetaneously open to each peer in the cluster.\r\n+     */\r\n+    public void setMaxActive(int maxActive) {\r\n+        _maxActive = maxActive;\r\n+    }\r\n+\r\n+    /**\r\n+     * The maximum number of sockets that this provider can\r\n+     * simetaneously open to each peer in the cluster.\r\n+     */\r\n+    public int getMaxActive() {\r\n+        return _maxActive;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of idle sockets that this provider can keep open\r\n+     * to each peer in the cluster.\r\n+     */\r\n+    public void setMaxIdle(int maxIdle) {\r\n+        _maxIdle = maxIdle;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of idle sockets that this provider can keep open\r\n+     * to each peer in the cluster.\r\n+     */\r\n+    public int getMaxIdle() {\r\n+        return _maxIdle;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of worker threads that are used for\r\n+     * transmitting packets to peers in the cluster.\r\n+     */\r\n+    public void setNumBroadcastThreads(int numBroadcastThreads) {\r\n+        synchronized (_broadcastThreads) {\r\n+            int cur = _broadcastThreads.size();\r\n+            if (cur > numBroadcastThreads) {\r\n+                // Notify the extra worker threads so they stop themselves\r\n+                // Threads will not end until they send another pk.\r\n+                for (int i = numBroadcastThreads; i < cur; i++) {\r\n+                    BroadcastWorkerThread worker = (BroadcastWorkerThread)\r\n+                        _broadcastThreads.remove(0);\r\n+                    worker.setRunning(false);\r\n+                }\r\n+            } else if (cur < numBroadcastThreads) {\r\n+                // Create additional worker threads\r\n+                for (int i = cur; i < numBroadcastThreads; i++) {\r\n+                    BroadcastWorkerThread wt = new BroadcastWorkerThread();\r\n+                    wt.setDaemon(true);\r\n+                    wt.start();\r\n+                    _broadcastThreads.add(wt);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of worker threads that are used for\r\n+     * transmitting packets to peers in the cluster.\r\n+     */\r\n+    public int getNumBroadcastThreads() {\r\n+        return _broadcastThreads.size();\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the list of addresses of peers to which this provider will\r\n+     * send events to. The peers are semicolon-separated <code>names</code>\r\n+     * list in the form of \"myhost1:portA;myhost2:portB\".\r\n+     */\r\n+    public void setAddresses(String names)\r\n+        throws UnknownHostException {\r\n+        // NYI. Could look for equivalence of addresses and avoid\r\n+        // changing those that didn't change.\r\n+\r\n+        _addressesLock.lock();\r\n+        try {\r\n+            for (Iterator iter = _addresses.iterator(); iter.hasNext();) {\r\n+                ((HostAddress) iter.next()).close();\r\n+            }\r\n+            String[] toks = Strings.split(names, \";\", 0);\r\n+            _addresses = new ArrayList(toks.length);\r\n+\r\n+            InetAddress localhost = InetAddress.getLocalHost();\r\n+            String localhostName = localhost.getHostName();\r\n+\r\n+            for (int i = 0; i < toks.length; i++) {\r\n+                String host = toks[i];\r\n+                String hostname;\r\n+                int tmpPort;\r\n+                int colon = host.indexOf(':');\r\n+                if (colon != -1) {\r\n+                    hostname = host.substring(0, colon);\r\n+                    tmpPort = Integer.parseInt(host.substring(colon + 1));\r\n+                } else {\r\n+                    hostname = host;\r\n+                    tmpPort = DEFAULT_PORT;\r\n+                }\r\n+                InetAddress tmpAddress = (InetAddress) AccessController\r\n+                    .doPrivileged(J2DoPrivHelper.getByNameAction(hostname)); \r\n+\r\n+                // bleair: For each address we would rather make use of\r\n+                // the jdk1.4 isLinkLocalAddress () || isLoopbackAddress ().\r\n+                // (Though in practice on win32 they don't work anyways!)\r\n+                // Instead we will check hostname. Not perfect, but\r\n+                // it will match often enough (people will typically\r\n+                // use the DNS machine names and be cutting/pasting.)\r\n+                if (localhostName.equals(hostname)) {\r\n+                    // This string matches the hostname for for ourselves, we\r\n+                    // don't actually need to send ourselves messages.\r\n+                    if (log.isTraceEnabled()) {\r\n+                        log.trace(s_loc.get(\"tcp-address-asself\",\r\n+                            tmpAddress.getHostName() + \":\" + tmpPort));\r\n+                    }\r\n+                } else {\r\n+                    HostAddress newAddress = new HostAddress(host);\r\n+                    _addresses.add(newAddress);\r\n+                    if (log.isTraceEnabled()) {\r\n+                        log.trace(s_loc.get(\"tcp-address-set\",\r\n+                            newAddress._address.getHostName() + \":\"\r\n+                                + newAddress._port));\r\n+                    }\r\n+                }\r\n+            }\r\n+        } catch (PrivilegedActionException pae) {\r\n+            throw (UnknownHostException) pae.getException();\r\n+        } finally {\r\n+            _addressesLock.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    // ---------- Configurable implementation ----------\r\n+\r\n+    /**\r\n+     * Subclasses that need to perform actions in\r\n+     * {@link Configurable#endConfiguration} must invoke this method.\r\n+     */\r\n+    public void endConfiguration() {\r\n+        super.endConfiguration();\r\n+        synchronized (s_portListenerMap) {\r\n+            // see if a listener exists for this port.\r\n+            _listener = (TCPPortListener) s_portListenerMap.get\r\n+                (String.valueOf(_port));\r\n+\r\n+            if (_listener == null ||\r\n+                (!_listener.isRunning() && _listener._port == _port)) {\r\n+                try {\r\n+                    _listener = new TCPPortListener(_port, log);\r\n+                    _listener.listen();\r\n+                    s_portListenerMap.put(String.valueOf(_port), _listener);\r\n+                } catch (Exception e) {\r\n+                    throw new GeneralException(s_loc.get(\"tcp-init-exception\",\r\n+                        String.valueOf(_port)), e).setFatal(true);\r\n+                }\r\n+            } else if (_listener.isRunning()) {\r\n+                if (_listener._port != _port) {\r\n+                    // this really shouldn't be able to happen.\r\n+                    throw new GeneralException(s_loc.get\r\n+                        (\"tcp-not-equal\", String.valueOf(_port))).\r\n+                        setFatal(true);\r\n+                }\r\n+            } else\r\n+                throw new InternalException(s_loc.get(\"tcp-listener-broken\"));\r\n+            _listener.addProvider(this);\r\n+        }\r\n+\r\n+        _addressesLock.lock();\r\n+        try {\r\n+            HostAddress curAddress;\r\n+            for (Iterator iter = _addresses.iterator();\r\n+                iter.hasNext();) {\r\n+                curAddress = (HostAddress) iter.next();\r\n+                curAddress.setMaxActive(_maxActive);\r\n+                curAddress.setMaxIdle(_maxIdle);\r\n+            }\r\n+        }\r\n+        finally {\r\n+            _addressesLock.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    // ---------- RemoteCommitProvider implementation ----------\r\n+\r\n+    // pre 3.3.4\t= <no version number transmitted>\r\n+    // 3.3 Preview \t= 0x1428acfd;\r\n+    // 3.4 \t\t\t= 0x1428acff;\r\n+    private static final long PROTOCOL_VERSION = 0x1428acff;\r\n+\r\n+    public void broadcast(RemoteCommitEvent event) {\r\n+        try {\r\n+            // build a packet notifying other JVMs of object changes.\r\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n+            ObjectOutputStream oos = new ObjectOutputStream(baos);\r\n+\r\n+            oos.writeLong(PROTOCOL_VERSION);\r\n+            oos.writeLong(_id);\r\n+            oos.writeInt(_port);\r\n+            oos.writeObject(_localhost);\r\n+            oos.writeObject(event);\r\n+            oos.flush();\r\n+\r\n+            byte[] bytes = baos.toByteArray();\r\n+            baos.close();\r\n+            if (_broadcastThreads.isEmpty())\r\n+                sendUpdatePacket(bytes);\r\n+            else\r\n+                _broadcastQueue.addPacket(bytes);\r\n+        } catch (IOException ioe) {\r\n+            if (log.isWarnEnabled())\r\n+                log.warn(s_loc.get(\"tcp-payload-create-error\"), ioe);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Sends a change notification packet to other machines in this\r\n+     * provider cluster.\r\n+     */\r\n+    private void sendUpdatePacket(byte[] bytes) {\r\n+        _addressesLock.lock();\r\n+        try {\r\n+            for (Iterator iter = _addresses.iterator(); iter.hasNext();)\r\n+                ((HostAddress) iter.next()).sendUpdatePacket(bytes);\r\n+        } finally {\r\n+            _addressesLock.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    public void close() {\r\n+        if (_listener != null)\r\n+            _listener.removeProvider(this);\r\n+\r\n+        // Remove Broadcast Threads then close sockets.\r\n+        _broadcastQueue.close();\r\n+\r\n+        // Wait for _broadcastThreads to get cleaned up.\r\n+        while(!_broadcastThreads.isEmpty()) {\r\n+            try {\r\n+                Thread.sleep(500);\r\n+            } catch (InterruptedException ie) {\r\n+                // Ignore.\r\n+            }\r\n+        }\r\n+        \r\n+        _addressesLock.lock();\r\n+        try {\r\n+            for (Iterator iter = _addresses.iterator(); iter.hasNext();)\r\n+                ((HostAddress) iter.next()).close();\r\n+        } finally {\r\n+            _addressesLock.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Utility class to hold messages to be sent. This\r\n+     * allows calls to broadcast () to return without\r\n+     * waiting for the send to complete.\r\n+     */\r\n+    private static class BroadcastQueue {\r\n+\r\n+        private LinkedList _packetQueue = new LinkedList();\r\n+        private boolean _closed = false;\r\n+\r\n+        public synchronized void close() {\r\n+            _closed = true;\r\n+            notifyAll();\r\n+        }\r\n+\r\n+        public synchronized boolean isClosed() {\r\n+            return _closed;\r\n+        }\r\n+\r\n+        public synchronized void addPacket(byte[] bytes) {\r\n+            _packetQueue.addLast(bytes);\r\n+            notify();\r\n+        }\r\n+\r\n+        /**\r\n+         * @return the bytes defining the packet to process, or\r\n+         * <code>null</code> if the queue is empty.\r\n+         */\r\n+        public synchronized byte[] removePacket()\r\n+            throws InterruptedException {\r\n+            // only wait if the queue is still open. This allows processing\r\n+            // of events in the queue to continue, while avoiding sleeping\r\n+            // during shutdown.\r\n+            while (!_closed && _packetQueue.isEmpty())\r\n+                wait();\r\n+            if (_packetQueue.isEmpty())\r\n+                return null;\r\n+            else\r\n+                return (byte[]) _packetQueue.removeFirst();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Threads to broadcast packets placed in the {@link BroadcastQueue}.\r\n+     */\r\n+    private class BroadcastWorkerThread\r\n+        extends Thread {\r\n+\r\n+        private boolean _keepRunning = true;\r\n+\r\n+        public void run() {\r\n+            while (_keepRunning) {\r\n+                try {\r\n+                    // This will block until there is a packet to send, or\r\n+                    // until the queue is closed.\r\n+                    byte[] bytes = _broadcastQueue.removePacket();\r\n+                    if (bytes != null)\r\n+                        sendUpdatePacket(bytes);\r\n+                    else if (_broadcastQueue.isClosed())\r\n+                        _keepRunning = false;\r\n+                } catch (InterruptedException e) {\r\n+                    // End the thread.\r\n+                    break;\r\n+                }\r\n+            }\r\n+            remove();\r\n+        }\r\n+\r\n+        public void setRunning(boolean keepRunning) {\r\n+            _keepRunning = keepRunning;\r\n+        }\r\n+        \r\n+        private void remove() {\r\n+            _broadcastThreads.remove(this);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Responsible for listening for incoming packets and processing them.\r\n+     */\r\n+    private static class TCPPortListener\r\n+        implements Runnable {\r\n+\r\n+        private final Log _log;\r\n+        private ServerSocket _receiveSocket;\r\n+        private Thread _acceptThread;\r\n+        private Set _receiverThreads = new HashSet();\r\n+        private final Set _providers = new HashSet();\r\n+\r\n+        /**\r\n+         * Cache the local IP address\r\n+         */\r\n+        private byte[] _localhost;\r\n+\r\n+        /**\r\n+         * The port that this listener should listen on. Configured\r\n+         * by TCPRemoteCommitProvider.\r\n+         */\r\n+        private int _port;\r\n+\r\n+        /**\r\n+         * Should be set to <code>true</code> once the listener is listening.\r\n+         */\r\n+        private boolean _isRunning = false;\r\n+\r\n+        /**\r\n+         * Construct a new TCPPortListener configured to use the specified port.\r\n+         */\r\n+        private TCPPortListener(int port, Log log)\r\n+            throws IOException {\r\n+            _port = port;\r\n+            _log = log;\r\n+            try {\r\n+                _receiveSocket = (ServerSocket) AccessController\r\n+                    .doPrivileged(J2DoPrivHelper.newServerSocketAction(_port));\r\n+            } catch (PrivilegedActionException pae) {\r\n+                throw (IOException) pae.getException();\r\n+            }\r\n+            _localhost = InetAddress.getLocalHost().getAddress();\r\n+\r\n+            if (_log.isTraceEnabled())\r\n+                _log.info(s_loc.get(\"tcp-start-listener\",\r\n+                    String.valueOf(_port)));\r\n+        }\r\n+\r\n+        private void listen() {\r\n+            _acceptThread = new Thread(this);\r\n+            _acceptThread.setDaemon(true);\r\n+            _acceptThread.start();\r\n+        }\r\n+\r\n+        /**\r\n+         * All providers added here will be notified of any incoming\r\n+         * provider messages. There will be one of these per\r\n+         * BrokerFactory in a given JVM.\r\n+         * {@link TCPRemoteCommitProvider#endConfiguration} invokes\r\n+         * <code>addProvider</code> with <code>this</code> upon\r\n+         * completion of configuration.\r\n+         */\r\n+        private void addProvider(TCPRemoteCommitProvider provider) {\r\n+            synchronized (_providers) {\r\n+                _providers.add(provider);\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Remove a provider from the list of providers to notify of\r\n+         * commit events.\r\n+         */\r\n+        private synchronized void removeProvider\r\n+            (TCPRemoteCommitProvider provider) {\r\n+            synchronized (_providers) {\r\n+                _providers.remove(provider);\r\n+\r\n+                // if the provider list is empty, shut down the thread.\r\n+                if (_providers.size() == 0) {\r\n+                    _isRunning = false;\r\n+                    try {\r\n+                        _receiveSocket.close();\r\n+                    } catch (IOException ioe) {\r\n+                        if (_log.isWarnEnabled())\r\n+                            _log.warn(s_loc.get(\"tcp-close-error\"), ioe);\r\n+                    }\r\n+                    _acceptThread.interrupt();\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        private boolean isRunning() {\r\n+            synchronized (_providers) {\r\n+                return _isRunning;\r\n+            }\r\n+        }\r\n+\r\n+        public void run() {\r\n+            synchronized (_providers) {\r\n+                _isRunning = true;\r\n+            }\r\n+\r\n+            Socket s = null;\r\n+            while (_isRunning) {\r\n+                try {\r\n+                    s = null;\r\n+                    // Block, waiting to accept new connection from a peer\r\n+                    s = (Socket) AccessController.doPrivileged(J2DoPrivHelper\r\n+                        .acceptAction(_receiveSocket));\r\n+                    if (_log.isTraceEnabled()) {\r\n+                        _log.trace(s_loc.get(\"tcp-received-connection\",\r\n+                            s.getInetAddress().getHostAddress()\r\n+                                + \":\" + s.getPort()));\r\n+                    }\r\n+                    ReceiveSocketHandler sh = new ReceiveSocketHandler(s);\r\n+                    Thread receiverThread = new Thread(sh);\r\n+                    receiverThread.setDaemon(true);\r\n+                    receiverThread.start();\r\n+                    _receiverThreads.add(receiverThread);\r\n+                } catch (Exception e) {\r\n+                    if (e instanceof PrivilegedActionException)\r\n+                        e = ((PrivilegedActionException) e).getException();\r\n+                    if (!(e instanceof SocketException) || _isRunning)\r\n+                        if (_log.isWarnEnabled())\r\n+                            _log.warn(s_loc.get(\"tcp-accept-error\"), e);\r\n+\r\n+                    // Nominal case (InterruptedException) because close ()\r\n+                    // calls _acceptThread.interrupt ();\r\n+                    try {\r\n+                        if (s != null)\r\n+                            s.close();\r\n+                    } catch (Exception ee) {\r\n+                        if (_log.isWarnEnabled())\r\n+                            _log.warn(s_loc.get(\"tcp-close-error\"), e);\r\n+                    }\r\n+                }\r\n+            }\r\n+\r\n+            // We are done listening. Interrupt any worker threads.\r\n+            Thread worker;\r\n+            for (Iterator iter = _receiverThreads.iterator();\r\n+                iter.hasNext();) {\r\n+                worker = (Thread) iter.next();\r\n+                // FYI, the worker threads are blocked\r\n+                // reading from the socket's InputStream. InputStreams\r\n+                // aren't interruptable, so this interrupt isn't\r\n+                // really going to be delivered until something breaks\r\n+                // the InputStream.\r\n+                worker.interrupt();\r\n+            }\r\n+            synchronized (_providers) {\r\n+                try {\r\n+                    if (_isRunning)\r\n+                        _receiveSocket.close();\r\n+                } catch (Exception e) {\r\n+                    if (_log.isWarnEnabled())\r\n+                        _log.warn(s_loc.get(\"tcp-close-error\"), e);\r\n+                }\r\n+                _isRunning = false;\r\n+                if (_log.isTraceEnabled())\r\n+                    _log.trace(s_loc.get(\"tcp-close-listener\",\r\n+                        _port + \"\"));\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Utility class that acts as a worker thread to receive Events\r\n+         * from broadcasters.\r\n+         */\r\n+        private class ReceiveSocketHandler\r\n+            implements Runnable {\r\n+\r\n+            private InputStream _in;\r\n+            private Socket _s;\r\n+\r\n+            private ReceiveSocketHandler(Socket s) {\r\n+                // We are the receiving end and we don't send any messages\r\n+                // back to the broadcaster. Turn off Nagle's so that\r\n+                // we will send ack packets without waiting.\r\n+                _s = s;\r\n+                try {\r\n+                    _s.setTcpNoDelay(true);\r\n+                    _in = new BufferedInputStream(s.getInputStream());\r\n+                } catch (IOException ioe) {\r\n+                    if (_log.isInfoEnabled())\r\n+                        _log.info(s_loc.get(\"tcp-socket-option-error\"), ioe);\r\n+                    _s = null;\r\n+                } catch (Exception e) {\r\n+                    if (_log.isWarnEnabled())\r\n+                        _log.warn(s_loc.get(\"tcp-receive-error\"), e);\r\n+                    _s = null;\r\n+                }\r\n+            }\r\n+\r\n+            public void run() {\r\n+                if (_s == null)\r\n+                    return;\r\n+                while (_isRunning && _s != null) {\r\n+                    try {\r\n+                        // This will block our thread, waiting to read\r\n+                        // the next Event-object-message.\r\n+                        handle(_in);\r\n+                    } catch (EOFException eof) {\r\n+                        // EOFException raised when peer is properly\r\n+                        // closing its end.\r\n+                        if (_log.isTraceEnabled()) {\r\n+                            _log.trace(s_loc.get(\"tcp-close-socket\",\r\n+                                _s.getInetAddress().getHostAddress()\r\n+                                    + \":\" + _s.getPort()));\r\n+                        }\r\n+                        break;\r\n+                    } catch (Throwable e) {\r\n+                        if (_log.isWarnEnabled())\r\n+                            _log.warn(s_loc.get(\"tcp-receive-error\"), e);\r\n+                        break;\r\n+                    }\r\n+                }\r\n+                // We are done receiving on this socket and this worker\r\n+                // thread is terminating.\r\n+                try {\r\n+                    _in.close();\r\n+                    if (_s != null)\r\n+                        _s.close();\r\n+                } catch (IOException e) {\r\n+                    _log.warn(s_loc.get(\"tcp-close-socket-error\",\r\n+                        _s.getInetAddress().getHostAddress() + \":\"\r\n+                            + _s.getPort()), e);\r\n+                }\r\n+            }\r\n+\r\n+            /**\r\n+             * Process an {@link InputStream} containing objects written\r\n+             * by {@link TCPRemoteCommitProvider#broadcast(RemoteCommitEvent)}.\r\n+             */\r\n+            private void handle(InputStream in)\r\n+                throws IOException, ClassNotFoundException {\r\n+                // This will block waiting for the next\r\n+                ObjectInputStream ois = \r\n+                    new Serialization.ClassResolvingObjectInputStream(in);\r\n+\r\n+                long protocolVersion = ois.readLong();\r\n+                if (protocolVersion != PROTOCOL_VERSION) {\r\n+                    if (_log.isWarnEnabled()) {\r\n+                        _log.warn(s_loc.get(\"tcp-wrong-version-error\",\r\n+                            _s.getInetAddress().getHostAddress() + \":\"\r\n+                                + _s.getPort()));\r\n+                        return;\r\n+                    }\r\n+                }\r\n+\r\n+                long senderId = ois.readLong();\r\n+                int senderPort = ois.readInt();\r\n+                byte[] senderAddress = (byte[]) ois.readObject();\r\n+                RemoteCommitEvent rce = (RemoteCommitEvent) ois.readObject();\r\n+                if (_log.isTraceEnabled()) {\r\n+                    _log.trace(s_loc.get(\"tcp-received-event\",\r\n+                        _s.getInetAddress().getHostAddress() + \":\"\r\n+                            + _s.getPort()));\r\n+                }\r\n+\r\n+                boolean fromSelf = senderPort == _port &&\r\n+                    Arrays.equals(senderAddress, _localhost);\r\n+                TCPRemoteCommitProvider provider;\r\n+                synchronized (_providers) {\r\n+                    // bleair: We're iterating, but currenlty there can really\r\n+                    // only be a single provider.\r\n+                    for (Iterator iter = _providers.iterator();\r\n+                        iter.hasNext();) {\r\n+                        provider = (TCPRemoteCommitProvider) iter.next();\r\n+                        if (senderId != provider._id || !fromSelf)\r\n+                            provider.eventManager.fireEvent(rce);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Utility class to store an InetAddress and an int. Not using\r\n+     * InetSocketAddress because it's a JDK1.4 API. This also\r\n+     * provides a wrapper around the socket(s) associated with this address.\r\n+     */\r\n+    private class HostAddress {\r\n+\r\n+        private InetAddress _address;\r\n+        private int _port;\r\n+        private long _timeLastError; // millis\r\n+        private boolean _isAvailable; // is peer thought to be up\r\n+        private int _infosIssued = 0; // limit log entries\r\n+\r\n+        private GenericObjectPool _socketPool; // reusable open sockets\r\n+\r\n+        /**\r\n+         * Construct a new host address from a string of the form\r\n+         * \"host:port\" or of the form \"host\".\r\n+         */\r\n+        private HostAddress(String host)\r\n+            throws UnknownHostException {\r\n+            int colon = host.indexOf(':');\r\n+            try {\r\n+                if (colon != -1) {\r\n+                    _address = (InetAddress) AccessController\r\n+                        .doPrivileged(J2DoPrivHelper.getByNameAction(host\r\n+                            .substring(0, colon)));\r\n+                    _port = Integer.parseInt(host.substring(colon + 1));\r\n+                } else {\r\n+                    _address = (InetAddress) AccessController\r\n+                        .doPrivileged(J2DoPrivHelper.getByNameAction(host));\r\n+                    _port = DEFAULT_PORT;\r\n+                }\r\n+            } catch (PrivilegedActionException pae) {\r\n+                throw (UnknownHostException) pae.getException();\r\n+            }\r\n+            // -1 max wait == as long as it takes\r\n+            _socketPool = new GenericObjectPool\r\n+                (new SocketPoolableObjectFactory(), _maxActive,\r\n+                    GenericObjectPool.WHEN_EXHAUSTED_BLOCK, -1);\r\n+            _isAvailable = true;\r\n+        }\r\n+\r\n+        private void setMaxActive(int maxActive) {\r\n+            _socketPool.setMaxActive(maxActive);\r\n+        }\r\n+\r\n+        private void setMaxIdle(int maxIdle) {\r\n+            _socketPool.setMaxIdle(maxIdle);\r\n+        }\r\n+\r\n+        public void close() {\r\n+            // Close the pool of sockets to this peer. This\r\n+            // will close all sockets in the pool.\r\n+            try {\r\n+                _socketPool.close();\r\n+            } catch (Exception e) {\r\n+                if (log.isWarnEnabled()) {\r\n+                    log.warn(s_loc.get(\"tcp-close-pool-error\"), e);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        private void sendUpdatePacket(byte[] bytes) {\r\n+            if (!_isAvailable) {\r\n+                long now = System.currentTimeMillis();\r\n+                if (now - _timeLastError < _recoveryTimeMillis)\r\n+                    // Not enough time has passed since the last error\r\n+                    return;\r\n+            }\r\n+            Socket s = null;\r\n+            try {\r\n+                s = getSocket();\r\n+                OutputStream os = s.getOutputStream();\r\n+                os.write(bytes);\r\n+                os.flush();\r\n+\r\n+                if (log.isTraceEnabled()) {\r\n+                    log.trace(s_loc.get(\"tcp-sent-update\",\r\n+                        _address.getHostAddress() + \":\" + _port,\r\n+                        String.valueOf(s.getLocalPort())));\r\n+                }\r\n+                _isAvailable = true;\r\n+                _infosIssued = 0;\r\n+                // Return the socket to the pool; the socket is\r\n+                // still good.\r\n+                returnSocket(s);\r\n+            } catch (Exception e) {\r\n+                // There has been a problem sending to the peer.\r\n+                // The OS socket that was being used is can no longer\r\n+                // be used.\r\n+                if (s != null)\r\n+                    this.closeSocket(s);\r\n+                this.clearAllSockets();\r\n+\r\n+                if (_isAvailable) {\r\n+                    // Log a warning, the peer was up and has now gone down\r\n+                    if (log.isWarnEnabled()) {\r\n+                        log.warn(s_loc.get(\"tcp-send-error\",\r\n+                            _address.getHostAddress() + \":\" + _port), e);\r\n+                    }\r\n+                    _isAvailable = false;\r\n+                    // Once enough time has passed we will log another warning\r\n+                    _timeLastError = System.currentTimeMillis();\r\n+                } else {\r\n+                    long now = System.currentTimeMillis();\r\n+                    if (now - _timeLastError > _recoveryTimeMillis) {\r\n+                        if (_infosIssued < 5) {\r\n+                            // Enough time has passed, and peer is still down\r\n+                            _timeLastError = System.currentTimeMillis();\r\n+                            // We were trying to reestablish the connection,\r\n+                            // but we failed again. Log a message, but\r\n+                            // lower severity. This log will occur periodically\r\n+                            // for 5 times until the peer comes back.\r\n+                            if (log.isInfoEnabled()) {\r\n+                                log.info(s_loc.get(\"tcp-send-still-error\",\r\n+                                    _address.getHostAddress() + \":\"\r\n+                                        + _port), e);\r\n+                            }\r\n+                            _infosIssued++;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        private Socket getSocket()\r\n+            throws Exception {\r\n+            return (Socket) _socketPool.borrowObject();\r\n+        }\r\n+\r\n+        private void returnSocket(Socket s)\r\n+            throws Exception {\r\n+            _socketPool.returnObject(s);\r\n+        }\r\n+\r\n+        private void clearAllSockets() {\r\n+            _socketPool.clear();\r\n+        }\r\n+\r\n+        private void closeSocket(Socket s) {\r\n+            // All sockets come from the pool.\r\n+            // This socket is no longer usable, so delete it from the\r\n+            // pool.\r\n+            try {\r\n+                _socketPool.invalidateObject(s);\r\n+            } catch (Exception e) {\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Factory for pooled sockets.\r\n+         */\r\n+        private class SocketPoolableObjectFactory\r\n+            implements PoolableObjectFactory {\r\n+\r\n+            public Object makeObject()\r\n+                throws IOException {\r\n+                try {\r\n+                    Socket s = (Socket) AccessController\r\n+                        .doPrivileged(J2DoPrivHelper.newSocketAction(_address,\r\n+                            _port));\r\n+                    if (log.isTraceEnabled()) {\r\n+                        log.trace(s_loc.get(\"tcp-open-connection\", _address\r\n+                            + \":\" + _port, \"\" + s.getLocalPort()));\r\n+                    }\r\n+                    return s;\r\n+                } catch (PrivilegedActionException pae) {\r\n+                    throw (IOException) pae.getException();\r\n+                }\r\n+            }\r\n+\r\n+            public void destroyObject(Object obj) {\r\n+                // silentClose ().\r\n+                try {\r\n+                    Socket s = (Socket) obj;\r\n+                    if (log.isTraceEnabled())\r\n+                        log.trace(s_loc.get(\"tcp-close-sending-socket\",\r\n+                            _address + \":\" + _port, \"\" + s.getLocalPort()));\r\n+                    s.close();\r\n+                } catch (Exception e) {\r\n+                    log.warn(s_loc.get(\"tcp-close-socket-error\",\r\n+                        _address.getHostAddress() + \":\" + _port), e);\r\n+                }\r\n+            }\r\n+\r\n+            public boolean validateObject(Object obj) {\r\n+                return true;\r\n+            }\r\n+\r\n+            public void activateObject (Object value)\r\n+\t\t\t{\r\n+\t\t\t}\r\n+\r\n+\t\t\tpublic void passivateObject (Object value)\r\n+\t\t\t{\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"adcd0dd1b3672c26af8f24df965e11e7881590b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"b274521db182f31111753362c44adc133ad15974","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/UpdateListener.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"7659a9bc5208740017a2e674b9fa5fcb6fcbcb26","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"12f98b6484a006416b7332bfa9a8b339daf5d8f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"fa9e0f2a78081749d78b1aadbce325014746b8f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"e945eba5a8173d770370f8784e006b528173378d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"4695a325d1735045cc9281aef9f106858c5215dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"8e97520f1fd1b2072511a3d2f8f64b3922b979e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"dcbe31ecc42fece127fa3bc9e56aba9391459d43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"b821825c8b4aa5e713249658d476416517d7f007","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"51fc74de7e785bae8b940863b20de5d602dc154f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5476ee05ded870358111d5a614290f3b3e30e2ac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"174e70dcd5b856075a2df8d32df43fb3bca94971","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"e67abfb14544a32fce9f5fc64a3a8ab6d460512c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"dd7a8a759847ad0cc42c218b96d791ef01cfcd3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1fdfce43adec63d620615ed4121a271c03a48723","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"99700afa6bb151db13afe5bc2a7361806feeafec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"36371784c0363c4151b8eeee698d1b84d04b7d15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"99cdcaab6642a673675a9f86ae2f80a4089efbca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"3effd27e0d3a956e8d18b437ca4ddf9a6e7d5c08","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a6f44dc4386223b86642d2b36933eadb728e61c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"180084767a101fef0fb8e0b1ecb998809f25b63a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"9a8b0f45b1c4911b72dbe6238efacf964d297f53","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"b68890f6b4c2d5fe6509c4fa4625a5efc8042a88","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d303c0b456afd1f8a1e3fdb62a3408c61a804285","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5d863b858e01e06aa5dd33d9c6cc7c71494d20ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1d8d9d500463cae1353ca19afb0f1576a72b1127","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d9277e869e82c00d4b785ed38aba7b9f4690fa15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5fd16b1c09636a8297c2078e04d5960a8519b5b1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"58071387729de53b9a33912b8b29850b2864c6c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"ac357b5eb74cc058bad6a4349b2522a397ba78ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"be0361ee25c297a2def8ece2701049c89b76bbe6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"f2a74459846751595c9331119748bf68517f08ad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1c954f91399626a6c250b60c63bd449aa7712b8b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"db08d32a90c7d2b681da603687f7c086882e084e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"0943ab0b1506c4dd71bfbe9d564d195ea923d236","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"c770456acc9a6f349e0dd73e9fc6834ea845fef6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"669af3cf0d78317aebd482cd5a4ed0f89bf013b2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"264df7fe4416d7366e4bc997b6410d1687468299","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5809becce288f6fffa100bda2834b7158ceec8a1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"467efdbfd952e18aa6e886f69f0ac7adb4814546","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"12e18562756ee1c4cd65fa952818cd2d13927a83","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"79376fb717f684e500ec77e09c503c1762ba9259","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5f6fdd2b0e9de608c0f85548dcbface6b5b0daba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"26606eb15491d3bca6a748d8c840426fee6e93af","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"3210b0598ca31a550682609529495933b0b1de8c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1b5845769d80a1ba85922d93ec1d8be73f420fcf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"9b2b9bc02217b173c0e6a4b7f18a46a018f813ee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"de67d40aee3628e7897051fc6fe0f636cf65ea2b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"529b9f0d84b79fefc7ddb0394f741fa15e81a4a7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"95e9053a0ad3468683cb3ff778fc9f13454b797f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"c8317bee3b84d86b707888691df3e5033374095c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"2d6bfe5dcc6c48e857870ba27f56e65182bc0a70","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d56d783b728eb45963af9c4a9946f14d308345b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"f25dfb4f02bf34134c2b36f47e3f4a32468f6fb9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"74d1c020a649aad2d04e91b91a6640adbffb02a2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"37ad42064d2d4035ae6702092b28eee10961dc52","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1cc377cbed7d96160377aafcd285704e4c1fb0b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"eee99d6844191a5bbaf2fa17cd3edf63202ecb2e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"9048d2151ebf0cfc2639f2ffc499c727a2b48d17","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"8d4bcd457b196418511b2f143a509ba15e8fa72a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a77d7ba16282693e659e4048b5ae927a37aa5617","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"0606930f318dade8f61c25ecb73cb1293ceddf5a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"3ad9b279b2db690366a2c1c885c199159e39c299","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d146f0848187106bf1cc7acc0d1cc7d81020c951","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"f1da81f100e6b64fa336150a05f8b54ef2cd8188","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"c82129688691560397f3afbea017ce17a855de38","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d5100131aa68de4f1b70be49cd462dd2e0d430ea","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1254cd79c1104191ef829d37bf290d375182b8eb","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"f337f2628d72b402f8f183b612fa65f47a9ee77d","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestPCSubclassNameConversion.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestPCSubclassNameConversion.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestPCSubclassNameConversion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/enhance/TestPCSubclassNameConversion.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"32780d9765417d241b07c31023e0ffa8e69cd71d","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/meta/TestMemberProvider.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/meta/TestMemberProvider.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/meta/TestMemberProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/meta/TestMemberProvider.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"53fa96c2167f28ba218a810de75e22d1ee86a412","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a7626c68aee8f8eedb9a8f7caf828c38389d17f0","filename":"openjpa-lib/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"4700dbe2ddb82d25da315fcfe959e4b2eefb4771","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d9e4076cb15d8ab692b1dd78dbf98084dd651c61","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a00fd5be3e0eedcd31d1e95ccf79b72bf63d3017","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a64a022621814cc65fc2d3e4baf3eab612022016","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"c2854589cf34de03cecab8471aee1a3f363e5709","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"34e4c7711662ccb6dd02b4692a7b6931b83d9906","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"8a23ccb2be1b515c906617f55bc8120c9740e3e7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"0ea17b95e019e1d86279dbaf982fa37ef74db3a6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"93578493fa4416cca12e981b14b9ba4bd713f4c2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"915e9986f9276ce3b4bf34e141affdb816c61c94","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"e9dd08fdaa0abe87011137f8789b47862a1e3b9f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"92ad60fbabf845e5b1ea556656390712e734a3c9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"c72f91b26a36a114fa7c43985ce31ab5f1adadae","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"4a51a12c12ce10bdd3e5cb4ac839a41fbcc2d90c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1331abeaf3a1e9a72e9b1859ee3ed3501b3c39fe","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"257df1ac1ff92f2073b59e08f7937c4f2703a2fb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"ca3f6efcc3560e679ffbb89f2418bb06ee1f3cbd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"81269c9047c961ef47e24c487190bb1f0c52604a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"473a96b44a5e43150f8e5deb7cf6d5aaa261806a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"0f571cac1f5cac5d9ba041021caf12068285e10f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"52ed8f2208b08bb0c90667fdc1059f469e6cecab","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"c403e80382ff1be82898e20fdb0a845004b456c8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5753750091abd70680dc6452eb6e8b531c931286","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"0bc0d85cbdbc3f81b7fe169a6b035cb382c95b42","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"8cf5412976275f30c2c40a5c894f10d3ee02385e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"13fb9fced33084c1bf27189faddd87de8b8f1458","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a6ee36b401c8b26c29a14e54bd83eb699fa4ef10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d63f2365bc5c34c49f90ab3ba1ffbb7e819ecb95","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"57ae0cfe58f7fb88458cf1c51331457120487014","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"e6b80be820e2a9b39a88e713688bd7e5286c3ba8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"cf42913f326e999026c7fabdd31bedc25b4bf8ba","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a9d9b42866e01b2b7aa3bfb10f1f526883b08cb0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"33d4e438912953708cb08b0847853d17cf0b0e04","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a82b2f7f45bc93eef6995b41e6c6befc2b190c88","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"205d8466d8b4fc1f1475344ae0c294925cca7b96","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"9c5642b724c4775ac55d40ed973cac013ede265e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"e13b09feabe560c023afa5097cb78383d308f83b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"ddff2af56ab8f9a4e443d3ee300faffaa55f5dde","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"af7c203f17aafa9ef59269fa4134bc8f696239db","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"b28b1763d6e01bb2721483a25a474926ba15954f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"8aaa77939194d5c16cba4027fee8ebc34e59ab81","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"1c6e5a74283943b9a3640c77ab00215d4b2e88ce","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"e66adfbbca65e8f034a49e9d2e732f09d89ee13e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"7220ea975f0860f14ed742e3c78b59388ea0acba","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"5000350403403dfd13f264bb03af6a4e3528595d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"27185d88af14adf57eb27596c0bb63df24a77040","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"de3be63a8f06333f5f61cc5cd529f8d05a88ce07","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"a3694af9d92f3f3b65ca7c25238fe94330b9a0e7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"63895233253016aff4ec63b3b39f99b9ef407c81","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"d96d15aa8ba4f1791fdc45a348430407a0cd577b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"bf4089c269edfdc8474ef9705fd85c1b7c4216c0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"062fde7349b5236f00be8b55d7386a698d7d0200","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"5b431aeffcc78a376e7a4d7cd60378c40afddfca","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"5a781e4d53f44628ab6f9c4265bba5cc745d2085","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"08c6c3cc7cb13f1a220be2176cc25026a2debef9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"5275783c8e6234850a1255a2c1fe24ec3bd6b139","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"bd4b3ce34f77b89a21295d9cfeca0c7305be8223","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"c31e26ddcd1ec3546f8b101e744d4deab55d41ba","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"2dc17fc64a9c236bdc5a31239bf3b23e1a8b3317","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"06bf5f3f95105b174a94279cf1f1824603c43826","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"68df261741b50344de2ef897647e55cd0419f27d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/56f6b437909815b1974c391d6496a1c4c5f87382/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java?ref=56f6b437909815b1974c391d6496a1c4c5f87382"},{"sha":"abb9327fb111f930e5641bcd91a787c385804cbf","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"ea4d300bfd148643457e0f2d7c0db0bf927c83ad","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"0495c18519e646680e3da1c89f47cfebb33eadc0","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d976d2c7d8e7d9b3ea77dff84e4ae31ac56d538e","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"f182e714e9b2d7a986248fd3c262dfe53eb8f040","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"74857be9be44fe56e21f4cf559e8858646f7aa40","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"2fe0cbd3c0636af21a8ff6a7871f5386114f2879","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"62e88dbee2c41cbbd3fec44ac5634a9f094e4d75","filename":"openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"757a29a0662aec8027c64d1080f394159c417631","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"30e9b5e3503b520ff06d91325d9e9c3582c55fb9","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"6a17e8789b09d19d01d5d943eb74f0328a7ab56e","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"e2673dfa0512a1be92d2d16db19b82b1d5fa4562","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"04509ee5112be7446627cb4db9b0ad05a76ed32f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"d8bc48c2a076148541468ddd4b8ab0e7f8f68b39","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1b6e9ec3807b8dbd75edec5f5f4cc17ac3d31135","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1337aa168454dc7269a3ff340f968f2c3c9ba0c6","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"401a1f8f9525cd42dcc6e628697b9d6696660eec","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"a5ee2328eebafe7e27d1d032dafd9d86145f17b6","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"1061737b34a8a7bfb9274c8d2f9f8bf295de4758","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"},{"sha":"3bd708e5ea75c36744c8df1a92ca79be568abf39","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/26e8ada2aba91aaf77fe10c37b031a18c279bf01/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java?ref=26e8ada2aba91aaf77fe10c37b031a18c279bf01"}]}

