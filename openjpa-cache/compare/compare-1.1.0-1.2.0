{"url":"https://api.github.com/repos/apache/openjpa/compare/1.1.0...1.2.0","html_url":"https://github.com/apache/openjpa/compare/1.1.0...1.2.0","permalink_url":"https://github.com/apache/openjpa/compare/apache:26e8ada...apache:df58521","diff_url":"https://github.com/apache/openjpa/compare/1.1.0...1.2.0.diff","patch_url":"https://github.com/apache/openjpa/compare/1.1.0...1.2.0.patch","base_commit":{"sha":"26e8ada2aba91aaf77fe10c37b031a18c279bf01","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2ZThhZGEyYWJhOTFhYWY3N2ZlMTBjMzdiMDMxYTE4YzI3OWJmMDE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:50:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-19T18:50:55Z"},"message":"OPENJPA-559. Ported Mike's fix to 1.1.0.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.0@657916 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a3d3bc040fbc8b866fb5f3e45a27bc1e674140f3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a3d3bc040fbc8b866fb5f3e45a27bc1e674140f3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26e8ada2aba91aaf77fe10c37b031a18c279bf01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26e8ada2aba91aaf77fe10c37b031a18c279bf01","html_url":"https://github.com/apache/openjpa/commit/26e8ada2aba91aaf77fe10c37b031a18c279bf01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26e8ada2aba91aaf77fe10c37b031a18c279bf01/comments","author":null,"committer":null,"parents":[{"sha":"b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","url":"https://api.github.com/repos/apache/openjpa/commits/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc","html_url":"https://github.com/apache/openjpa/commit/b6c1d05ce48f9e0d85b073cbd5b9fc379918e2fc"}]},"merge_base_commit":{"sha":"ea8b942364fce79b0fae42b9ac94be7c3f58907b","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhOGI5NDIzNjRmY2U3OWIwZmFlNDJiOWFjOTRiZTdjM2Y1ODkwN2I=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-07T16:52:31Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-04-07T16:52:31Z"},"message":"Be a little more flexible on the exceptions thrown when persisting instances\nwith auto-generated keys already assigned values.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@645610 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"496366ef46f95020b8cb87cbf756a2b637f68e3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/496366ef46f95020b8cb87cbf756a2b637f68e3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b","html_url":"https://github.com/apache/openjpa/commit/ea8b942364fce79b0fae42b9ac94be7c3f58907b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b/comments","author":null,"committer":null,"parents":[{"sha":"9c19356c7c2b5690c8b487b4ee05ba92297847c4","url":"https://api.github.com/repos/apache/openjpa/commits/9c19356c7c2b5690c8b487b4ee05ba92297847c4","html_url":"https://github.com/apache/openjpa/commit/9c19356c7c2b5690c8b487b4ee05ba92297847c4"}]},"status":"diverged","ahead_by":190,"behind_by":61,"total_commits":190,"commits":[{"sha":"8803104f41504069e171cbe47c5e4fbc7fd63cb2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4MDMxMDRmNDE1MDQwNjllMTcxY2JlNDdjNWU0ZmJjN2ZkNjNjYjI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-08T19:40:02Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-08T19:40:02Z"},"message":"moved release number to 1.2.0-SNAPSHOT now that we've made a 1.1.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@646049 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89cb370c89843874f1b8a4ed20376261db957056","url":"https://api.github.com/repos/apache/openjpa/git/trees/89cb370c89843874f1b8a4ed20376261db957056"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8803104f41504069e171cbe47c5e4fbc7fd63cb2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8803104f41504069e171cbe47c5e4fbc7fd63cb2","html_url":"https://github.com/apache/openjpa/commit/8803104f41504069e171cbe47c5e4fbc7fd63cb2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8803104f41504069e171cbe47c5e4fbc7fd63cb2/comments","author":null,"committer":null,"parents":[{"sha":"ea8b942364fce79b0fae42b9ac94be7c3f58907b","url":"https://api.github.com/repos/apache/openjpa/commits/ea8b942364fce79b0fae42b9ac94be7c3f58907b","html_url":"https://github.com/apache/openjpa/commit/ea8b942364fce79b0fae42b9ac94be7c3f58907b"}]},{"sha":"5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxOTZhZTBiYzI3ZDRkNTBlZjQ2OGFhOWI1MzM0MTU1Yzg5YThkY2I=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T14:31:33Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T14:31:33Z"},"message":"OPENJPA-565 - Ignore duplicate NamedQuery definition and continue to parse the remaining entries in NamedQueries definition.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@646378 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"68fde894a55ccf3f7727137e06f3c31a0ea415e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/68fde894a55ccf3f7727137e06f3c31a0ea415e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","html_url":"https://github.com/apache/openjpa/commit/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb/comments","author":null,"committer":null,"parents":[{"sha":"8803104f41504069e171cbe47c5e4fbc7fd63cb2","url":"https://api.github.com/repos/apache/openjpa/commits/8803104f41504069e171cbe47c5e4fbc7fd63cb2","html_url":"https://github.com/apache/openjpa/commit/8803104f41504069e171cbe47c5e4fbc7fd63cb2"}]},{"sha":"50b81e6d7706d8f28aab8110086b1d7f114c1b45","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwYjgxZTZkNzcwNmQ4ZjI4YWFiODExMDA4NmIxZDdmMTE0YzFiNDU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-09T18:09:42Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-09T18:09:42Z"},"message":"OPENJPA-547 INNER JOIN FETCH query incorrectly generates LEFT join SQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@646455 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"271dcdea68233c12d8606861701cdfb738d53958","url":"https://api.github.com/repos/apache/openjpa/git/trees/271dcdea68233c12d8606861701cdfb738d53958"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45","html_url":"https://github.com/apache/openjpa/commit/50b81e6d7706d8f28aab8110086b1d7f114c1b45","comments_url":"https://api.github.com/repos/apache/openjpa/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45/comments","author":null,"committer":null,"parents":[{"sha":"5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","url":"https://api.github.com/repos/apache/openjpa/commits/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","html_url":"https://github.com/apache/openjpa/commit/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb"}]},{"sha":"810e401dbe638f655e9e72cd52e0209853a7a0b6","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxMGU0MDFkYmU2MzhmNjU1ZTllNzJjZDUyZTAyMDk4NTNhN2EwYjY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T23:27:47Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T23:27:47Z"},"message":"OPENJPA-565 - Add test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@646594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64b03579f7d09f19e2ca746f4502c325b2764c25","url":"https://api.github.com/repos/apache/openjpa/git/trees/64b03579f7d09f19e2ca746f4502c325b2764c25"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/810e401dbe638f655e9e72cd52e0209853a7a0b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/810e401dbe638f655e9e72cd52e0209853a7a0b6","html_url":"https://github.com/apache/openjpa/commit/810e401dbe638f655e9e72cd52e0209853a7a0b6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/810e401dbe638f655e9e72cd52e0209853a7a0b6/comments","author":null,"committer":null,"parents":[{"sha":"50b81e6d7706d8f28aab8110086b1d7f114c1b45","url":"https://api.github.com/repos/apache/openjpa/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45","html_url":"https://github.com/apache/openjpa/commit/50b81e6d7706d8f28aab8110086b1d7f114c1b45"}]},{"sha":"07cd1728a1148a37bb64216241d3bde4330ec5ba","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3Y2QxNzI4YTExNDhhMzdiYjY0MjE2MjQxZDNiZGU0MzMwZWM1YmE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-11T01:08:29Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-11T01:08:29Z"},"message":"OPENJPA-547 add test strings for FETCH JOINs\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@647026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"127f87ac392da1e4889ebd92962bd66c3bfe19da","url":"https://api.github.com/repos/apache/openjpa/git/trees/127f87ac392da1e4889ebd92962bd66c3bfe19da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07cd1728a1148a37bb64216241d3bde4330ec5ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07cd1728a1148a37bb64216241d3bde4330ec5ba","html_url":"https://github.com/apache/openjpa/commit/07cd1728a1148a37bb64216241d3bde4330ec5ba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07cd1728a1148a37bb64216241d3bde4330ec5ba/comments","author":null,"committer":null,"parents":[{"sha":"810e401dbe638f655e9e72cd52e0209853a7a0b6","url":"https://api.github.com/repos/apache/openjpa/commits/810e401dbe638f655e9e72cd52e0209853a7a0b6","html_url":"https://github.com/apache/openjpa/commit/810e401dbe638f655e9e72cd52e0209853a7a0b6"}]},{"sha":"31c47a6c04a3c7d024ccd1318ca06e7696c222e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxYzQ3YTZjMDRhM2M3ZDAyNGNjZDEzMThjYTA2ZTc2OTZjMjIyZTg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-15T15:12:11Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-15T15:12:11Z"},"message":"OPENJPA-570 - Model after the AnnotationPersistenceMetaDataParser.parsePackageAnnotations(), an extra test is performed in parseClassAnnotations() method for the Named*Quer* annotations to see if the MODE_QUERY has been performed before by examining the meta.getSourceMode() before the actualNamed*Queries() method is invoked.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@648275 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d9a4ff6ac02f18221a8ceb90850161cfa77bc1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d9a4ff6ac02f18221a8ceb90850161cfa77bc1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31c47a6c04a3c7d024ccd1318ca06e7696c222e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31c47a6c04a3c7d024ccd1318ca06e7696c222e8","html_url":"https://github.com/apache/openjpa/commit/31c47a6c04a3c7d024ccd1318ca06e7696c222e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31c47a6c04a3c7d024ccd1318ca06e7696c222e8/comments","author":null,"committer":null,"parents":[{"sha":"07cd1728a1148a37bb64216241d3bde4330ec5ba","url":"https://api.github.com/repos/apache/openjpa/commits/07cd1728a1148a37bb64216241d3bde4330ec5ba","html_url":"https://github.com/apache/openjpa/commit/07cd1728a1148a37bb64216241d3bde4330ec5ba"}]},{"sha":"fe45f77f038d058b28c4b667cf91e4e13161489f","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlNDVmNzdmMDM4ZDA1OGIyOGM0YjY2N2NmOTFlNGUxMzE2MTQ4OWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-17T18:41:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-17T18:41:25Z"},"message":"OPENJPA-542\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@649221 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"519a34a8137dad2a46dc56444ebf33147b65cb48","url":"https://api.github.com/repos/apache/openjpa/git/trees/519a34a8137dad2a46dc56444ebf33147b65cb48"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fe45f77f038d058b28c4b667cf91e4e13161489f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fe45f77f038d058b28c4b667cf91e4e13161489f","html_url":"https://github.com/apache/openjpa/commit/fe45f77f038d058b28c4b667cf91e4e13161489f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fe45f77f038d058b28c4b667cf91e4e13161489f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"31c47a6c04a3c7d024ccd1318ca06e7696c222e8","url":"https://api.github.com/repos/apache/openjpa/commits/31c47a6c04a3c7d024ccd1318ca06e7696c222e8","html_url":"https://github.com/apache/openjpa/commit/31c47a6c04a3c7d024ccd1318ca06e7696c222e8"}]},{"sha":"316ced44c4537a9c3b1e7e11a7e06a0038465a14","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNmNlZDQ0YzQ1MzdhOWMzYjFlN2UxMWE3ZTA2YTAwMzg0NjVhMTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-17T19:30:14Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-17T19:30:14Z"},"message":"fix line wrapping\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@649244 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ae109fad734abd37382f18922aca279403bdafc","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ae109fad734abd37382f18922aca279403bdafc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/316ced44c4537a9c3b1e7e11a7e06a0038465a14","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/316ced44c4537a9c3b1e7e11a7e06a0038465a14","html_url":"https://github.com/apache/openjpa/commit/316ced44c4537a9c3b1e7e11a7e06a0038465a14","comments_url":"https://api.github.com/repos/apache/openjpa/commits/316ced44c4537a9c3b1e7e11a7e06a0038465a14/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"fe45f77f038d058b28c4b667cf91e4e13161489f","url":"https://api.github.com/repos/apache/openjpa/commits/fe45f77f038d058b28c4b667cf91e4e13161489f","html_url":"https://github.com/apache/openjpa/commit/fe45f77f038d058b28c4b667cf91e4e13161489f"}]},{"sha":"a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzNWI1M2IyN2YxYWQ5YjcyYWMyYWU3MTUwMzFmNWRmY2NkOWIxZTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-20T18:09:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-20T18:09:19Z"},"message":"OPENJPA-442 committing patch provided by Teresa Kan\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@649947 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da2f6256450517aac86bca0967607b82f5481dc8","url":"https://api.github.com/repos/apache/openjpa/git/trees/da2f6256450517aac86bca0967607b82f5481dc8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9","html_url":"https://github.com/apache/openjpa/commit/a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"316ced44c4537a9c3b1e7e11a7e06a0038465a14","url":"https://api.github.com/repos/apache/openjpa/commits/316ced44c4537a9c3b1e7e11a7e06a0038465a14","html_url":"https://github.com/apache/openjpa/commit/316ced44c4537a9c3b1e7e11a7e06a0038465a14"}]},{"sha":"016f0bf61ecbfcacbbfe94a7bf5f3754440f7245","node_id":"MDY6Q29tbWl0MjA2MzY0OjAxNmYwYmY2MWVjYmZjYWNiYmZlOTRhN2JmNWYzNzU0NDQwZjcyNDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-20T19:09:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-20T19:09:19Z"},"message":"OPENJPA-442 deprecating and adding javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@649956 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8704bbb06e39a1bde515c418b5d3b03af7965b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8704bbb06e39a1bde515c418b5d3b03af7965b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/016f0bf61ecbfcacbbfe94a7bf5f3754440f7245","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/016f0bf61ecbfcacbbfe94a7bf5f3754440f7245","html_url":"https://github.com/apache/openjpa/commit/016f0bf61ecbfcacbbfe94a7bf5f3754440f7245","comments_url":"https://api.github.com/repos/apache/openjpa/commits/016f0bf61ecbfcacbbfe94a7bf5f3754440f7245/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9","url":"https://api.github.com/repos/apache/openjpa/commits/a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9","html_url":"https://github.com/apache/openjpa/commit/a35b53b27f1ad9b72ac2ae715031f5dfccd9b1e9"}]},{"sha":"a08388e8bedfe098bdd88919c935089af90469aa","node_id":"MDY6Q29tbWl0MjA2MzY0OmEwODM4OGU4YmVkZmUwOThiZGQ4ODkxOWM5MzUwODlhZjkwNDY5YWE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-04-21T14:52:28Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-04-21T14:52:28Z"},"message":"A couple of minor updates to a couple of slice-related messages.  Parameters passed in were not matching the message definitions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@650163 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de428667a94450859505a5f1694867c531236e9d","url":"https://api.github.com/repos/apache/openjpa/git/trees/de428667a94450859505a5f1694867c531236e9d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a08388e8bedfe098bdd88919c935089af90469aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a08388e8bedfe098bdd88919c935089af90469aa","html_url":"https://github.com/apache/openjpa/commit/a08388e8bedfe098bdd88919c935089af90469aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a08388e8bedfe098bdd88919c935089af90469aa/comments","author":null,"committer":null,"parents":[{"sha":"016f0bf61ecbfcacbbfe94a7bf5f3754440f7245","url":"https://api.github.com/repos/apache/openjpa/commits/016f0bf61ecbfcacbbfe94a7bf5f3754440f7245","html_url":"https://github.com/apache/openjpa/commit/016f0bf61ecbfcacbbfe94a7bf5f3754440f7245"}]},{"sha":"2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiYTE2YjQ4OGE5YmQyZmNhYjI4NjU4NzFlNDY5YTAwZjFkZDViMWM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-22T04:45:13Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-22T04:45:13Z"},"message":"Minor changes: 1) change a few constants from private to protected for use by sub-class. 2) add a couple of new constansts.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@650381 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"723fc04ae89277955395897af791aaa2f0f59582","url":"https://api.github.com/repos/apache/openjpa/git/trees/723fc04ae89277955395897af791aaa2f0f59582"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","html_url":"https://github.com/apache/openjpa/commit/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c/comments","author":null,"committer":null,"parents":[{"sha":"a08388e8bedfe098bdd88919c935089af90469aa","url":"https://api.github.com/repos/apache/openjpa/commits/a08388e8bedfe098bdd88919c935089af90469aa","html_url":"https://github.com/apache/openjpa/commit/a08388e8bedfe098bdd88919c935089af90469aa"}]},{"sha":"18a3db781b0e3275f83f9cd4b014c06f8f43af47","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4YTNkYjc4MWIwZTMyNzVmODNmOWNkNGIwMTRjMDZmOGY0M2FmNDc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-23T01:10:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-23T01:10:43Z"},"message":"OPENJPA-562, OPENJPA-536, OPENJPA-564, OPENJPA-536, OPENJPA-576, OPENJPA-577. Merging changes from 1.1.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@650714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7e4ab306c414204e1c50ae0727eae355db860a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7e4ab306c414204e1c50ae0727eae355db860a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47","html_url":"https://github.com/apache/openjpa/commit/18a3db781b0e3275f83f9cd4b014c06f8f43af47","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47/comments","author":null,"committer":null,"parents":[{"sha":"2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","url":"https://api.github.com/repos/apache/openjpa/commits/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","html_url":"https://github.com/apache/openjpa/commit/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c"}]},{"sha":"d78e76aa5addbfdfa92fa5fc93142c325c250ab1","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ3OGU3NmFhNWFkZGJmZGZhOTJmYTVmYzkzMTQyYzMyNWMyNTBhYjE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-24T14:08:31Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-24T14:08:31Z"},"message":"OPENJPA-567. Committing on behalf of Vikram Bhatia in trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@651271 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"20aa17b510132c00a54fc5e6dcbd4d7fc09fbd86","url":"https://api.github.com/repos/apache/openjpa/git/trees/20aa17b510132c00a54fc5e6dcbd4d7fc09fbd86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d78e76aa5addbfdfa92fa5fc93142c325c250ab1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d78e76aa5addbfdfa92fa5fc93142c325c250ab1","html_url":"https://github.com/apache/openjpa/commit/d78e76aa5addbfdfa92fa5fc93142c325c250ab1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d78e76aa5addbfdfa92fa5fc93142c325c250ab1/comments","author":null,"committer":null,"parents":[{"sha":"18a3db781b0e3275f83f9cd4b014c06f8f43af47","url":"https://api.github.com/repos/apache/openjpa/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47","html_url":"https://github.com/apache/openjpa/commit/18a3db781b0e3275f83f9cd4b014c06f8f43af47"}]},{"sha":"bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","node_id":"MDY6Q29tbWl0MjA2MzY0OmJkMmFmYzNmNzBiM2ZjOGYxZjEzMjQwM2RmYzdhZTk4ZmI1YTBhNjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-24T22:28:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-24T22:28:42Z"},"message":"OPENJPA-149 OPENJPA-159 Moving suspendJTA code to ManagedRuntime\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@651441 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f7b0d6359ca50986626a280d3ab83fc245dca0e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/f7b0d6359ca50986626a280d3ab83fc245dca0e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","html_url":"https://github.com/apache/openjpa/commit/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d78e76aa5addbfdfa92fa5fc93142c325c250ab1","url":"https://api.github.com/repos/apache/openjpa/commits/d78e76aa5addbfdfa92fa5fc93142c325c250ab1","html_url":"https://github.com/apache/openjpa/commit/d78e76aa5addbfdfa92fa5fc93142c325c250ab1"}]},{"sha":"a2beac443c14c6952394428b5a4ea065133e334a","node_id":"MDY6Q29tbWl0MjA2MzY0OmEyYmVhYzQ0M2MxNGM2OTUyMzk0NDI4YjVhNGVhMDY1MTMzZTMzNGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-24T23:27:40Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-24T23:27:40Z"},"message":"OPENJPA-149 OPENJPA-159 fix javadoc typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@651457 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f5838d519039fc04cfca50ce7f9206a46ce18f45","url":"https://api.github.com/repos/apache/openjpa/git/trees/f5838d519039fc04cfca50ce7f9206a46ce18f45"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a2beac443c14c6952394428b5a4ea065133e334a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a2beac443c14c6952394428b5a4ea065133e334a","html_url":"https://github.com/apache/openjpa/commit/a2beac443c14c6952394428b5a4ea065133e334a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a2beac443c14c6952394428b5a4ea065133e334a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","url":"https://api.github.com/repos/apache/openjpa/commits/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60","html_url":"https://github.com/apache/openjpa/commit/bd2afc3f70b3fc8f1f132403dfc7ae98fb5a0a60"}]},{"sha":"a5c80fd9e16d7a0fe47a3069b7435a4141165780","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1YzgwZmQ5ZTE2ZDdhMGZlNDdhMzA2OWI3NDM1YTQxNDExNjU3ODA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-26T19:27:36Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-26T19:27:36Z"},"message":"Slice module references jvm properties define in trunk's pom.xml, where surefire.jvm.args property is used instead of test.jvm.arguments. Also added suspend=n option.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@651849 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c0c2218376b0e79095e77717ee3b4a69a583b6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c0c2218376b0e79095e77717ee3b4a69a583b6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5c80fd9e16d7a0fe47a3069b7435a4141165780","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5c80fd9e16d7a0fe47a3069b7435a4141165780","html_url":"https://github.com/apache/openjpa/commit/a5c80fd9e16d7a0fe47a3069b7435a4141165780","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5c80fd9e16d7a0fe47a3069b7435a4141165780/comments","author":null,"committer":null,"parents":[{"sha":"a2beac443c14c6952394428b5a4ea065133e334a","url":"https://api.github.com/repos/apache/openjpa/commits/a2beac443c14c6952394428b5a4ea065133e334a","html_url":"https://github.com/apache/openjpa/commit/a2beac443c14c6952394428b5a4ea065133e334a"}]},{"sha":"78ff71749c19643a0b74f0a68e1c351f262106b3","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4ZmY3MTc0OWMxOTY0M2EwYjc0ZjBhNjhlMWMzNTFmMjYyMTA2YjM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-29T20:38:05Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-04-29T20:38:05Z"},"message":"OPENJPA-584\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@652090 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b78ff7d8288ff73ad8868ae219677fb5ab605d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b78ff7d8288ff73ad8868ae219677fb5ab605d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78ff71749c19643a0b74f0a68e1c351f262106b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78ff71749c19643a0b74f0a68e1c351f262106b3","html_url":"https://github.com/apache/openjpa/commit/78ff71749c19643a0b74f0a68e1c351f262106b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78ff71749c19643a0b74f0a68e1c351f262106b3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a5c80fd9e16d7a0fe47a3069b7435a4141165780","url":"https://api.github.com/repos/apache/openjpa/commits/a5c80fd9e16d7a0fe47a3069b7435a4141165780","html_url":"https://github.com/apache/openjpa/commit/a5c80fd9e16d7a0fe47a3069b7435a4141165780"}]},{"sha":"0f32d376687fd1515a4cd9b8953e14b666499e93","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmMzJkMzc2Njg3ZmQxNTE1YTRjZDliODk1M2UxNGI2NjY0OTllOTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-02T21:09:14Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-02T21:09:14Z"},"message":"OPENJPA-407 committing patch provided by Fay Wang and Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@652913 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0362c0dbf28751d482ee9737273ee5a8f879deb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/0362c0dbf28751d482ee9737273ee5a8f879deb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f32d376687fd1515a4cd9b8953e14b666499e93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f32d376687fd1515a4cd9b8953e14b666499e93","html_url":"https://github.com/apache/openjpa/commit/0f32d376687fd1515a4cd9b8953e14b666499e93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f32d376687fd1515a4cd9b8953e14b666499e93/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"78ff71749c19643a0b74f0a68e1c351f262106b3","url":"https://api.github.com/repos/apache/openjpa/commits/78ff71749c19643a0b74f0a68e1c351f262106b3","html_url":"https://github.com/apache/openjpa/commit/78ff71749c19643a0b74f0a68e1c351f262106b3"}]},{"sha":"14eeab2c00efc8df2ad15b35136e85c63852158c","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0ZWVhYjJjMDBlZmM4ZGYyYWQxNWIzNTEzNmU4NWM2Mzg1MjE1OGM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-04T03:26:24Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-04T03:26:24Z"},"message":"OPENJPA-573 JPQL: The combination LIKE ESCAPE does not accept parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@653176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cbc738b2270094590a51268bd0418bb2c9003af2","url":"https://api.github.com/repos/apache/openjpa/git/trees/cbc738b2270094590a51268bd0418bb2c9003af2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/14eeab2c00efc8df2ad15b35136e85c63852158c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/14eeab2c00efc8df2ad15b35136e85c63852158c","html_url":"https://github.com/apache/openjpa/commit/14eeab2c00efc8df2ad15b35136e85c63852158c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/14eeab2c00efc8df2ad15b35136e85c63852158c/comments","author":null,"committer":null,"parents":[{"sha":"0f32d376687fd1515a4cd9b8953e14b666499e93","url":"https://api.github.com/repos/apache/openjpa/commits/0f32d376687fd1515a4cd9b8953e14b666499e93","html_url":"https://github.com/apache/openjpa/commit/0f32d376687fd1515a4cd9b8953e14b666499e93"}]},{"sha":"40fec0073eed73711f9f92b334fe716929057434","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwZmVjMDA3M2VlZDczNzExZjlmOTJiMzM0ZmU3MTY5MjkwNTc0MzQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-05T15:27:52Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-05T15:27:52Z"},"message":"Exclude internal repository from RAT check, also update license.txt to mention WebSphere UOW jar\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@653499 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c328084ecbad6f2eea51f5b1d7cba777af8651f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c328084ecbad6f2eea51f5b1d7cba777af8651f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/40fec0073eed73711f9f92b334fe716929057434","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/40fec0073eed73711f9f92b334fe716929057434","html_url":"https://github.com/apache/openjpa/commit/40fec0073eed73711f9f92b334fe716929057434","comments_url":"https://api.github.com/repos/apache/openjpa/commits/40fec0073eed73711f9f92b334fe716929057434/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"14eeab2c00efc8df2ad15b35136e85c63852158c","url":"https://api.github.com/repos/apache/openjpa/commits/14eeab2c00efc8df2ad15b35136e85c63852158c","html_url":"https://github.com/apache/openjpa/commit/14eeab2c00efc8df2ad15b35136e85c63852158c"}]},{"sha":"efcc2577a608e944098c4aa727f4d4b0f5867585","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmY2MyNTc3YTYwOGU5NDQwOThjNGFhNzI3ZjRkNGIwZjU4Njc1ODU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-05T20:52:29Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-05T20:52:29Z"},"message":"OPENJPA-590 committing patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@653595 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"00933031f9c4a08b5ae842c22606fb1d985a5b00","url":"https://api.github.com/repos/apache/openjpa/git/trees/00933031f9c4a08b5ae842c22606fb1d985a5b00"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/efcc2577a608e944098c4aa727f4d4b0f5867585","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/efcc2577a608e944098c4aa727f4d4b0f5867585","html_url":"https://github.com/apache/openjpa/commit/efcc2577a608e944098c4aa727f4d4b0f5867585","comments_url":"https://api.github.com/repos/apache/openjpa/commits/efcc2577a608e944098c4aa727f4d4b0f5867585/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"40fec0073eed73711f9f92b334fe716929057434","url":"https://api.github.com/repos/apache/openjpa/commits/40fec0073eed73711f9f92b334fe716929057434","html_url":"https://github.com/apache/openjpa/commit/40fec0073eed73711f9f92b334fe716929057434"}]},{"sha":"a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","node_id":"MDY6Q29tbWl0MjA2MzY0OmEzMWRmYWEzMWY0MTgxOTU2Yjc0MzBmYjllYzU5MGI2OGZmZDJjOGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-07T19:34:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-07T19:34:26Z"},"message":"OPENJPA-591\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654227 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a55cfe26478f503f73d41e05561084ac10fa3817","url":"https://api.github.com/repos/apache/openjpa/git/trees/a55cfe26478f503f73d41e05561084ac10fa3817"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","html_url":"https://github.com/apache/openjpa/commit/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"efcc2577a608e944098c4aa727f4d4b0f5867585","url":"https://api.github.com/repos/apache/openjpa/commits/efcc2577a608e944098c4aa727f4d4b0f5867585","html_url":"https://github.com/apache/openjpa/commit/efcc2577a608e944098c4aa727f4d4b0f5867585"}]},{"sha":"33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzZTA5NGM2ZjFhYTRlOTAwYmQ1YTE0OWY4YjFkNzE4NjQwZDljMWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-07T21:06:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-07T21:06:16Z"},"message":"OPENJPA-586 Query parameter binding for externalized fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654272 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b517fc0c8d81e2d6e423c9c289072ae14703a5a6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b517fc0c8d81e2d6e423c9c289072ae14703a5a6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","html_url":"https://github.com/apache/openjpa/commit/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/comments","author":null,"committer":null,"parents":[{"sha":"a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","url":"https://api.github.com/repos/apache/openjpa/commits/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","html_url":"https://github.com/apache/openjpa/commit/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e"}]},{"sha":"63850bed0bf56ae1a6527cdf8efc8890cbeadbef","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzODUwYmVkMGJmNTZhZTFhNjUyN2NkZjhlZmM4ODkwY2JlYWRiZWY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-07T23:32:32Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-07T23:32:32Z"},"message":"OPENJPA-590 cleanup unused imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654324 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e1e1df607722a171c3f361028c277e0a76003551","url":"https://api.github.com/repos/apache/openjpa/git/trees/e1e1df607722a171c3f361028c277e0a76003551"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63850bed0bf56ae1a6527cdf8efc8890cbeadbef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63850bed0bf56ae1a6527cdf8efc8890cbeadbef","html_url":"https://github.com/apache/openjpa/commit/63850bed0bf56ae1a6527cdf8efc8890cbeadbef","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63850bed0bf56ae1a6527cdf8efc8890cbeadbef/comments","author":null,"committer":null,"parents":[{"sha":"33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","url":"https://api.github.com/repos/apache/openjpa/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","html_url":"https://github.com/apache/openjpa/commit/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b"}]},{"sha":"b796e1710f4572bee7e20f8e7c2851205ddbb8b2","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3OTZlMTcxMGY0NTcyYmVlN2UyMGY4ZTdjMjg1MTIwNWRkYmI4YjI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-08T00:18:11Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-08T00:18:11Z"},"message":"OPENJPA-574 DataCache entries not evicted when multiple OptimisticLockExceptions reported from backend DB.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a130c361697ae727962a4e6042794c56a3f77d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/3a130c361697ae727962a4e6042794c56a3f77d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b796e1710f4572bee7e20f8e7c2851205ddbb8b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b796e1710f4572bee7e20f8e7c2851205ddbb8b2","html_url":"https://github.com/apache/openjpa/commit/b796e1710f4572bee7e20f8e7c2851205ddbb8b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b796e1710f4572bee7e20f8e7c2851205ddbb8b2/comments","author":null,"committer":null,"parents":[{"sha":"63850bed0bf56ae1a6527cdf8efc8890cbeadbef","url":"https://api.github.com/repos/apache/openjpa/commits/63850bed0bf56ae1a6527cdf8efc8890cbeadbef","html_url":"https://github.com/apache/openjpa/commit/63850bed0bf56ae1a6527cdf8efc8890cbeadbef"}]},{"sha":"3f9dcdbb761fa29847e028db7cc6309966028659","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmOWRjZGJiNzYxZmEyOTg0N2UwMjhkYjdjYzYzMDk5NjYwMjg2NTk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-08T21:24:47Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-08T21:24:47Z"},"message":"OPENJPA-595 A common path() action in JPQL.jjt being used for Enum literal causes a simple aliase resolution to fail\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654626 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75bc08bc088c0f5f5b91446865f6798e5dc419e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/75bc08bc088c0f5f5b91446865f6798e5dc419e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f9dcdbb761fa29847e028db7cc6309966028659","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f9dcdbb761fa29847e028db7cc6309966028659","html_url":"https://github.com/apache/openjpa/commit/3f9dcdbb761fa29847e028db7cc6309966028659","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f9dcdbb761fa29847e028db7cc6309966028659/comments","author":null,"committer":null,"parents":[{"sha":"b796e1710f4572bee7e20f8e7c2851205ddbb8b2","url":"https://api.github.com/repos/apache/openjpa/commits/b796e1710f4572bee7e20f8e7c2851205ddbb8b2","html_url":"https://github.com/apache/openjpa/commit/b796e1710f4572bee7e20f8e7c2851205ddbb8b2"}]},{"sha":"b585833c0c69866d50fbc8edb441ae2364a50df6","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1ODU4MzNjMGM2OTg2NmQ1MGZiYzhlZGI0NDFhZTIzNjRhNTBkZjY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-08T21:31:31Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-08T21:31:31Z"},"message":"OPENJPA-574 DataCache entries not evicted when multiple OptimisticLockExceptions reported from backend DB.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654631 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d648f5bd86e86755b65fc16cc1059bdd4de7b53b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d648f5bd86e86755b65fc16cc1059bdd4de7b53b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b585833c0c69866d50fbc8edb441ae2364a50df6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b585833c0c69866d50fbc8edb441ae2364a50df6","html_url":"https://github.com/apache/openjpa/commit/b585833c0c69866d50fbc8edb441ae2364a50df6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b585833c0c69866d50fbc8edb441ae2364a50df6/comments","author":null,"committer":null,"parents":[{"sha":"3f9dcdbb761fa29847e028db7cc6309966028659","url":"https://api.github.com/repos/apache/openjpa/commits/3f9dcdbb761fa29847e028db7cc6309966028659","html_url":"https://github.com/apache/openjpa/commit/3f9dcdbb761fa29847e028db7cc6309966028659"}]},{"sha":"df0902d4cf600a5abf4172fa86e5b4d397e7aa6a","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmMDkwMmQ0Y2Y2MDBhNWFiZjQxNzJmYTg2ZTViNGQzOTdlN2FhNmE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-08T23:38:21Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-08T23:38:21Z"},"message":"OPENJPA-594 committing patch provided by Dinkar Rao\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654652 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70ba1bd5a2e2395b36f929bf3c60bb0b9a4229c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/70ba1bd5a2e2395b36f929bf3c60bb0b9a4229c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df0902d4cf600a5abf4172fa86e5b4d397e7aa6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df0902d4cf600a5abf4172fa86e5b4d397e7aa6a","html_url":"https://github.com/apache/openjpa/commit/df0902d4cf600a5abf4172fa86e5b4d397e7aa6a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df0902d4cf600a5abf4172fa86e5b4d397e7aa6a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b585833c0c69866d50fbc8edb441ae2364a50df6","url":"https://api.github.com/repos/apache/openjpa/commits/b585833c0c69866d50fbc8edb441ae2364a50df6","html_url":"https://github.com/apache/openjpa/commit/b585833c0c69866d50fbc8edb441ae2364a50df6"}]},{"sha":"31870894320c738e8d7776382892305d9b99b94d","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxODcwODk0MzIwYzczOGU4ZDc3NzYzODI4OTIzMDVkOWI5OWI5NGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-09T00:13:48Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-09T00:13:48Z"},"message":"OPENJPA-589 Can not retrieve M-to-M data when DataCache is on\ncommitting patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a871a1bd835effab0e730e7f907f1e17b975fb5","url":"https://api.github.com/repos/apache/openjpa/git/trees/7a871a1bd835effab0e730e7f907f1e17b975fb5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31870894320c738e8d7776382892305d9b99b94d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31870894320c738e8d7776382892305d9b99b94d","html_url":"https://github.com/apache/openjpa/commit/31870894320c738e8d7776382892305d9b99b94d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31870894320c738e8d7776382892305d9b99b94d/comments","author":null,"committer":null,"parents":[{"sha":"df0902d4cf600a5abf4172fa86e5b4d397e7aa6a","url":"https://api.github.com/repos/apache/openjpa/commits/df0902d4cf600a5abf4172fa86e5b4d397e7aa6a","html_url":"https://github.com/apache/openjpa/commit/df0902d4cf600a5abf4172fa86e5b4d397e7aa6a"}]},{"sha":"d35bc879cbce9b8a241efee9c9ebe62664605927","node_id":"MDY6Q29tbWl0MjA2MzY0OmQzNWJjODc5Y2JjZTliOGEyNDFlZmVlOWM5ZWJlNjI2NjQ2MDU5Mjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-09T15:32:49Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-09T15:32:49Z"},"message":"OPENJPA-149 remove maven warnings due to invalid pom\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654858 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32eff269f2bc22b0bd55feee28d08d1172d1cf39","url":"https://api.github.com/repos/apache/openjpa/git/trees/32eff269f2bc22b0bd55feee28d08d1172d1cf39"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d35bc879cbce9b8a241efee9c9ebe62664605927","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d35bc879cbce9b8a241efee9c9ebe62664605927","html_url":"https://github.com/apache/openjpa/commit/d35bc879cbce9b8a241efee9c9ebe62664605927","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d35bc879cbce9b8a241efee9c9ebe62664605927/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"31870894320c738e8d7776382892305d9b99b94d","url":"https://api.github.com/repos/apache/openjpa/commits/31870894320c738e8d7776382892305d9b99b94d","html_url":"https://github.com/apache/openjpa/commit/31870894320c738e8d7776382892305d9b99b94d"}]},{"sha":"01e08029e93ceb75f24297fc3471f3afe299620d","node_id":"MDY6Q29tbWl0MjA2MzY0OjAxZTA4MDI5ZTkzY2ViNzVmMjQyOTdmYzM0NzFmM2FmZTI5OTYyMGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-09T17:05:45Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-09T17:05:45Z"},"message":"OPENJPA-595 A common path() action in JPQL.jjt being used for Enum literal causes a simple aliase resolution to fail\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654885 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5cf941ff5452d34cdebee1ff40e33681ecdf66c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5cf941ff5452d34cdebee1ff40e33681ecdf66c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/01e08029e93ceb75f24297fc3471f3afe299620d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/01e08029e93ceb75f24297fc3471f3afe299620d","html_url":"https://github.com/apache/openjpa/commit/01e08029e93ceb75f24297fc3471f3afe299620d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/01e08029e93ceb75f24297fc3471f3afe299620d/comments","author":null,"committer":null,"parents":[{"sha":"d35bc879cbce9b8a241efee9c9ebe62664605927","url":"https://api.github.com/repos/apache/openjpa/commits/d35bc879cbce9b8a241efee9c9ebe62664605927","html_url":"https://github.com/apache/openjpa/commit/d35bc879cbce9b8a241efee9c9ebe62664605927"}]},{"sha":"5a16e92bd964f4e7afd08af2a133c83ef0be44a0","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMTZlOTJiZDk2NGY0ZTdhZmQwOGFmMmExMzNjODNlZjBiZTQ0YTA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-09T21:34:29Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-09T21:34:29Z"},"message":"OPENJPA-598 Make BatchingPreparedStatementManagerImpl more flexible and extensible, Sub-task of OPENJPA-477\nCommitting patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654942 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"051483bf75a4e3c421d6cc26869f7be89e45f99b","url":"https://api.github.com/repos/apache/openjpa/git/trees/051483bf75a4e3c421d6cc26869f7be89e45f99b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a16e92bd964f4e7afd08af2a133c83ef0be44a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a16e92bd964f4e7afd08af2a133c83ef0be44a0","html_url":"https://github.com/apache/openjpa/commit/5a16e92bd964f4e7afd08af2a133c83ef0be44a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a16e92bd964f4e7afd08af2a133c83ef0be44a0/comments","author":null,"committer":null,"parents":[{"sha":"01e08029e93ceb75f24297fc3471f3afe299620d","url":"https://api.github.com/repos/apache/openjpa/commits/01e08029e93ceb75f24297fc3471f3afe299620d","html_url":"https://github.com/apache/openjpa/commit/01e08029e93ceb75f24297fc3471f3afe299620d"}]},{"sha":"a63b6d3e73e2a71549e401015f6426bc5dd1a262","node_id":"MDY6Q29tbWl0MjA2MzY0OmE2M2I2ZDNlNzNlMmE3MTU0OWU0MDEwMTVmNjQyNmJjNWRkMWEyNjI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-05-12T22:14:56Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-05-12T22:14:56Z"},"message":"Remove company specific name in message file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@655669 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"156b19e8c7b16c228ab2535a705177e6d58f116d","url":"https://api.github.com/repos/apache/openjpa/git/trees/156b19e8c7b16c228ab2535a705177e6d58f116d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a63b6d3e73e2a71549e401015f6426bc5dd1a262","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a63b6d3e73e2a71549e401015f6426bc5dd1a262","html_url":"https://github.com/apache/openjpa/commit/a63b6d3e73e2a71549e401015f6426bc5dd1a262","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a63b6d3e73e2a71549e401015f6426bc5dd1a262/comments","author":null,"committer":null,"parents":[{"sha":"5a16e92bd964f4e7afd08af2a133c83ef0be44a0","url":"https://api.github.com/repos/apache/openjpa/commits/5a16e92bd964f4e7afd08af2a133c83ef0be44a0","html_url":"https://github.com/apache/openjpa/commit/5a16e92bd964f4e7afd08af2a133c83ef0be44a0"}]},{"sha":"c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyN2JlZDlkN2IzZDJmMTRlZGRjN2Q4Y2E0YTE1OWVlNTQ0YWE2NjE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T22:50:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-05-12T22:50:57Z"},"message":"OPENJPA-589. Committing test cases on behalf of Fay Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@655682 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8acd8be7df51b410d42539671cd0f31bf678c91d","url":"https://api.github.com/repos/apache/openjpa/git/trees/8acd8be7df51b410d42539671cd0f31bf678c91d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661","html_url":"https://github.com/apache/openjpa/commit/c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661/comments","author":null,"committer":null,"parents":[{"sha":"a63b6d3e73e2a71549e401015f6426bc5dd1a262","url":"https://api.github.com/repos/apache/openjpa/commits/a63b6d3e73e2a71549e401015f6426bc5dd1a262","html_url":"https://github.com/apache/openjpa/commit/a63b6d3e73e2a71549e401015f6426bc5dd1a262"}]},{"sha":"4ac794ee69824a61b24c9e6b64890be63514150e","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhYzc5NGVlNjk4MjRhNjFiMjRjOWU2YjY0ODkwYmU2MzUxNDE1MGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-13T12:52:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-13T12:52:57Z"},"message":"OPENJPA-589 updating testcase with Fay's changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@655842 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"043e99c1b68430edc1c298109d61eb4ab2c41c04","url":"https://api.github.com/repos/apache/openjpa/git/trees/043e99c1b68430edc1c298109d61eb4ab2c41c04"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4ac794ee69824a61b24c9e6b64890be63514150e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4ac794ee69824a61b24c9e6b64890be63514150e","html_url":"https://github.com/apache/openjpa/commit/4ac794ee69824a61b24c9e6b64890be63514150e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4ac794ee69824a61b24c9e6b64890be63514150e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661","url":"https://api.github.com/repos/apache/openjpa/commits/c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661","html_url":"https://github.com/apache/openjpa/commit/c27bed9d7b3d2f14eddc7d8ca4a159ee544aa661"}]},{"sha":"956065baa001a4c69149d666566e9343d173b4c7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk1NjA2NWJhYTAwMWE0YzY5MTQ5ZDY2NjU2NmU5MzQzZDE3M2I0Yzc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-14T06:18:18Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-14T06:18:18Z"},"message":"OPENJPA-574  fix  checkUpdateCount of (-2 SSUCCESS_NO_INFO) for Batching inserts in Oracle and DB2/ZOS.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@656114 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"497768c9c75b81633ff2bc4cbfbf6c407f08d459","url":"https://api.github.com/repos/apache/openjpa/git/trees/497768c9c75b81633ff2bc4cbfbf6c407f08d459"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/956065baa001a4c69149d666566e9343d173b4c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/956065baa001a4c69149d666566e9343d173b4c7","html_url":"https://github.com/apache/openjpa/commit/956065baa001a4c69149d666566e9343d173b4c7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/956065baa001a4c69149d666566e9343d173b4c7/comments","author":null,"committer":null,"parents":[{"sha":"4ac794ee69824a61b24c9e6b64890be63514150e","url":"https://api.github.com/repos/apache/openjpa/commits/4ac794ee69824a61b24c9e6b64890be63514150e","html_url":"https://github.com/apache/openjpa/commit/4ac794ee69824a61b24c9e6b64890be63514150e"}]},{"sha":"b4ac7e2f415bf1640c9b308da6763bb4952d2e0c","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0YWM3ZTJmNDE1YmYxNjQwYzliMzA4ZGE2NzYzYmI0OTUyZDJlMGM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-05-14T21:00:35Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-05-14T21:00:35Z"},"message":"OPENJPA-601 - Don't initialize datasource for build action.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@656431 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe5eb3dfe2eeb45543f193ea9414680d3e4de305","url":"https://api.github.com/repos/apache/openjpa/git/trees/fe5eb3dfe2eeb45543f193ea9414680d3e4de305"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4ac7e2f415bf1640c9b308da6763bb4952d2e0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4ac7e2f415bf1640c9b308da6763bb4952d2e0c","html_url":"https://github.com/apache/openjpa/commit/b4ac7e2f415bf1640c9b308da6763bb4952d2e0c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4ac7e2f415bf1640c9b308da6763bb4952d2e0c/comments","author":null,"committer":null,"parents":[{"sha":"956065baa001a4c69149d666566e9343d173b4c7","url":"https://api.github.com/repos/apache/openjpa/commits/956065baa001a4c69149d666566e9343d173b4c7","html_url":"https://github.com/apache/openjpa/commit/956065baa001a4c69149d666566e9343d173b4c7"}]},{"sha":"8c756bf65566e8ed69794a03c10716b1c3d83350","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjNzU2YmY2NTU2NmU4ZWQ2OTc5NGEwM2MxMDcxNmIxYzNkODMzNTA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-19T12:43:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-19T12:43:34Z"},"message":"OPENJPA-559 set SerialVersionUID to a value compatible with previous releases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@657813 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b1d076506b888a832b86cb776d4eb713af1fcc91","url":"https://api.github.com/repos/apache/openjpa/git/trees/b1d076506b888a832b86cb776d4eb713af1fcc91"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c756bf65566e8ed69794a03c10716b1c3d83350","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c756bf65566e8ed69794a03c10716b1c3d83350","html_url":"https://github.com/apache/openjpa/commit/8c756bf65566e8ed69794a03c10716b1c3d83350","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c756bf65566e8ed69794a03c10716b1c3d83350/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4ac7e2f415bf1640c9b308da6763bb4952d2e0c","url":"https://api.github.com/repos/apache/openjpa/commits/b4ac7e2f415bf1640c9b308da6763bb4952d2e0c","html_url":"https://github.com/apache/openjpa/commit/b4ac7e2f415bf1640c9b308da6763bb4952d2e0c"}]},{"sha":"3a5e61238d9e472053230df7a46e79f9ec3c3c37","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhNWU2MTIzOGQ5ZTQ3MjA1MzIzMGRmN2E0NmU3OWY5ZWMzYzNjMzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-20T10:51:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-20T10:51:42Z"},"message":"OPENJPA-213\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658197 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4f0d4a7de3a40f89acbbf26cba1c347ba40ead2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b4f0d4a7de3a40f89acbbf26cba1c347ba40ead2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37","html_url":"https://github.com/apache/openjpa/commit/3a5e61238d9e472053230df7a46e79f9ec3c3c37","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8c756bf65566e8ed69794a03c10716b1c3d83350","url":"https://api.github.com/repos/apache/openjpa/commits/8c756bf65566e8ed69794a03c10716b1c3d83350","html_url":"https://github.com/apache/openjpa/commit/8c756bf65566e8ed69794a03c10716b1c3d83350"}]},{"sha":"b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzZjg3YmExZWMwMjg4YzZiNmRhYmYyYzE1YzJhOGM1YzY2ZjljYzk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:17:04Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:17:04Z"},"message":"OPENJPA-596 ClassCastException during in-memory update with Informix IDS 10.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658541 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61d423456900af16386582e8e1f346977498bfc3","url":"https://api.github.com/repos/apache/openjpa/git/trees/61d423456900af16386582e8e1f346977498bfc3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9","html_url":"https://github.com/apache/openjpa/commit/b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9/comments","author":null,"committer":null,"parents":[{"sha":"3a5e61238d9e472053230df7a46e79f9ec3c3c37","url":"https://api.github.com/repos/apache/openjpa/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37","html_url":"https://github.com/apache/openjpa/commit/3a5e61238d9e472053230df7a46e79f9ec3c3c37"}]},{"sha":"99a69bef3315bc0434be8a54281b3f1802fbe6f8","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5YTY5YmVmMzMxNWJjMDQzNGJlOGE1NDI4MWIzZjE4MDJmYmU2Zjg=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:19:08Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:19:08Z"},"message":"OPENJPA-605 Informix will throw an exception when a unique index is explictily created on the primary key columns\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658542 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"12e7e2619e6392f0a753afc04defade98fbf8505","url":"https://api.github.com/repos/apache/openjpa/git/trees/12e7e2619e6392f0a753afc04defade98fbf8505"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99a69bef3315bc0434be8a54281b3f1802fbe6f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99a69bef3315bc0434be8a54281b3f1802fbe6f8","html_url":"https://github.com/apache/openjpa/commit/99a69bef3315bc0434be8a54281b3f1802fbe6f8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99a69bef3315bc0434be8a54281b3f1802fbe6f8/comments","author":null,"committer":null,"parents":[{"sha":"b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9","url":"https://api.github.com/repos/apache/openjpa/commits/b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9","html_url":"https://github.com/apache/openjpa/commit/b3f87ba1ec0288c6b6dabf2c15c2a8c5c66f9cc9"}]},{"sha":"689eec175b9b0743785fec5db31cada6bd1fea59","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4OWVlYzE3NWI5YjA3NDM3ODVmZWM1ZGIzMWNhZGE2YmQxZmVhNTk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:23:18Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:23:18Z"},"message":"OPENJPA-606 InformixDictionary default property setting incorrectly set. Also fixed SQL problems as described in the issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658544 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2eb46a40e216d6fbfbfb118a344ba8d26552249f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2eb46a40e216d6fbfbfb118a344ba8d26552249f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/689eec175b9b0743785fec5db31cada6bd1fea59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/689eec175b9b0743785fec5db31cada6bd1fea59","html_url":"https://github.com/apache/openjpa/commit/689eec175b9b0743785fec5db31cada6bd1fea59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/689eec175b9b0743785fec5db31cada6bd1fea59/comments","author":null,"committer":null,"parents":[{"sha":"99a69bef3315bc0434be8a54281b3f1802fbe6f8","url":"https://api.github.com/repos/apache/openjpa/commits/99a69bef3315bc0434be8a54281b3f1802fbe6f8","html_url":"https://github.com/apache/openjpa/commit/99a69bef3315bc0434be8a54281b3f1802fbe6f8"}]},{"sha":"b2bd03567df6a5f3b936f65288bd84df9ebeca97","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYmQwMzU2N2RmNmE1ZjNiOTM2ZjY1Mjg4YmQ4NGRmOWViZWNhOTc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T07:42:38Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T07:42:38Z"},"message":"OPENJPA-605 Informix will throw an exception when a unique index is explictily created on the primary key columns\nHelp committing new patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658576 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c9aa192417dd29219090ea1abcf9401113bbbdf3","url":"https://api.github.com/repos/apache/openjpa/git/trees/c9aa192417dd29219090ea1abcf9401113bbbdf3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2bd03567df6a5f3b936f65288bd84df9ebeca97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2bd03567df6a5f3b936f65288bd84df9ebeca97","html_url":"https://github.com/apache/openjpa/commit/b2bd03567df6a5f3b936f65288bd84df9ebeca97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2bd03567df6a5f3b936f65288bd84df9ebeca97/comments","author":null,"committer":null,"parents":[{"sha":"689eec175b9b0743785fec5db31cada6bd1fea59","url":"https://api.github.com/repos/apache/openjpa/commits/689eec175b9b0743785fec5db31cada6bd1fea59","html_url":"https://github.com/apache/openjpa/commit/689eec175b9b0743785fec5db31cada6bd1fea59"}]},{"sha":"b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyYmE0NGZjZmQzNjViMDNjMmU1M2U1Y2M0YWExMjI2YTBhN2Y3YTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-21T14:15:45Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-21T14:15:45Z"},"message":"Attaching javadoc and source jars to the release profile\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658699 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"537bbb4c5de94d95e4ddb5f719d1c160cde5dce5","url":"https://api.github.com/repos/apache/openjpa/git/trees/537bbb4c5de94d95e4ddb5f719d1c160cde5dce5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3","html_url":"https://github.com/apache/openjpa/commit/b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2bd03567df6a5f3b936f65288bd84df9ebeca97","url":"https://api.github.com/repos/apache/openjpa/commits/b2bd03567df6a5f3b936f65288bd84df9ebeca97","html_url":"https://github.com/apache/openjpa/commit/b2bd03567df6a5f3b936f65288bd84df9ebeca97"}]},{"sha":"11f4d0d7ad451519c662521d289c3853eb2cd61b","node_id":"MDY6Q29tbWl0MjA2MzY0OjExZjRkMGQ3YWQ0NTE1MTljNjYyNTIxZDI4OWMzODUzZWIyY2Q2MWI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-05-21T14:41:02Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-05-21T14:41:02Z"},"message":"OPENJPA-604 - Use English only locale for TRACE, INFO, WARN, ERROR and FATAL keywords in Log specification.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0eac3159289c145a8cc4e5a5c7ac2b4f26e504cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/0eac3159289c145a8cc4e5a5c7ac2b4f26e504cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11f4d0d7ad451519c662521d289c3853eb2cd61b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11f4d0d7ad451519c662521d289c3853eb2cd61b","html_url":"https://github.com/apache/openjpa/commit/11f4d0d7ad451519c662521d289c3853eb2cd61b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11f4d0d7ad451519c662521d289c3853eb2cd61b/comments","author":null,"committer":null,"parents":[{"sha":"b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3","url":"https://api.github.com/repos/apache/openjpa/commits/b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3","html_url":"https://github.com/apache/openjpa/commit/b2ba44fcfd365b03c2e53e5cc4aa1226a0a7f7a3"}]},{"sha":"47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3ZjY4MWE3YjUwNGMwYTVlYmVkNmU3YmNlNDRiY2QxZjdkMjM2YWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:30:25Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:30:25Z"},"message":"OPENJPA-607 Extraneous \"( )\" on DISTINCT, ALL, ANY results in SQL syntax errors on some database systems\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659027 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a608edf89a2f56fc9d6ea74dc56acb0b213efff9","url":"https://api.github.com/repos/apache/openjpa/git/trees/a608edf89a2f56fc9d6ea74dc56acb0b213efff9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae","html_url":"https://github.com/apache/openjpa/commit/47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae/comments","author":null,"committer":null,"parents":[{"sha":"11f4d0d7ad451519c662521d289c3853eb2cd61b","url":"https://api.github.com/repos/apache/openjpa/commits/11f4d0d7ad451519c662521d289c3853eb2cd61b","html_url":"https://github.com/apache/openjpa/commit/11f4d0d7ad451519c662521d289c3853eb2cd61b"}]},{"sha":"8a56c75597fbc4d7ff1291e1a7ab9947053b6180","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhNTZjNzU1OTdmYmM0ZDdmZjEyOTFlMWE3YWI5OTQ3MDUzYjYxODA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:34:23Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:34:23Z"},"message":"OPENJPA-606 Informix specific message for reporting that it  does not support \"LOCATE\" function\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d5c590c288c9820fe4d4a823c3c9650286f77a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d5c590c288c9820fe4d4a823c3c9650286f77a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a56c75597fbc4d7ff1291e1a7ab9947053b6180","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a56c75597fbc4d7ff1291e1a7ab9947053b6180","html_url":"https://github.com/apache/openjpa/commit/8a56c75597fbc4d7ff1291e1a7ab9947053b6180","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a56c75597fbc4d7ff1291e1a7ab9947053b6180/comments","author":null,"committer":null,"parents":[{"sha":"47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae","url":"https://api.github.com/repos/apache/openjpa/commits/47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae","html_url":"https://github.com/apache/openjpa/commit/47f681a7b504c0a5ebed6e7bce44bcd1f7d236ae"}]},{"sha":"72df500c6e4eb583bfc5dd826c7c343a800b8be2","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZGY1MDBjNmU0ZWI1ODNiZmM1ZGQ4MjZjN2MzNDNhODAwYjhiZTI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:39:21Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:39:21Z"},"message":"OPENJPA-574 Cached object in DataCache not evicted due to StatementBatching not reporting OptimisticException \nHandle  (-2) updateCount returned from Batching for Oracle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659030 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c304df9b3ecd3309cc55ea4a29708530498a4ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c304df9b3ecd3309cc55ea4a29708530498a4ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2","html_url":"https://github.com/apache/openjpa/commit/72df500c6e4eb583bfc5dd826c7c343a800b8be2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2/comments","author":null,"committer":null,"parents":[{"sha":"8a56c75597fbc4d7ff1291e1a7ab9947053b6180","url":"https://api.github.com/repos/apache/openjpa/commits/8a56c75597fbc4d7ff1291e1a7ab9947053b6180","html_url":"https://github.com/apache/openjpa/commit/8a56c75597fbc4d7ff1291e1a7ab9947053b6180"}]},{"sha":"dcada1323742967f4e066cc88ac1d9ed46f16102","node_id":"MDY6Q29tbWl0MjA2MzY0OmRjYWRhMTMyMzc0Mjk2N2Y0ZTA2NmNjODhhYzFkOWVkNDZmMTYxMDI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T08:05:00Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T08:05:00Z"},"message":"OPENJPA-574 Cached object in DataCache not evicted due to StatementBatching not reporting OptimisticException \nHandle  (-2) updateCount returned from Batching for Oracle.\nGot a ClassCasstException while testing multiple entries in DataCache needed to be removed due to OptimisticException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659036 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e1c63bf32a37461c3a4bfcb6de40ecd7586fac51","url":"https://api.github.com/repos/apache/openjpa/git/trees/e1c63bf32a37461c3a4bfcb6de40ecd7586fac51"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dcada1323742967f4e066cc88ac1d9ed46f16102","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dcada1323742967f4e066cc88ac1d9ed46f16102","html_url":"https://github.com/apache/openjpa/commit/dcada1323742967f4e066cc88ac1d9ed46f16102","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dcada1323742967f4e066cc88ac1d9ed46f16102/comments","author":null,"committer":null,"parents":[{"sha":"72df500c6e4eb583bfc5dd826c7c343a800b8be2","url":"https://api.github.com/repos/apache/openjpa/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2","html_url":"https://github.com/apache/openjpa/commit/72df500c6e4eb583bfc5dd826c7c343a800b8be2"}]},{"sha":"81fc3ab6051257667d115e120de98ed650d4d54d","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxZmMzYWI2MDUxMjU3NjY3ZDExNWUxMjBkZTk4ZWQ2NTBkNGQ1NGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T23:55:49Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T23:55:49Z"},"message":"OPENJPA-606 More changes to Informix specific properties in the InformixDictionary\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659317 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7746a508c14c553958eb08662c10206a2907cae","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7746a508c14c553958eb08662c10206a2907cae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/81fc3ab6051257667d115e120de98ed650d4d54d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/81fc3ab6051257667d115e120de98ed650d4d54d","html_url":"https://github.com/apache/openjpa/commit/81fc3ab6051257667d115e120de98ed650d4d54d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/81fc3ab6051257667d115e120de98ed650d4d54d/comments","author":null,"committer":null,"parents":[{"sha":"dcada1323742967f4e066cc88ac1d9ed46f16102","url":"https://api.github.com/repos/apache/openjpa/commits/dcada1323742967f4e066cc88ac1d9ed46f16102","html_url":"https://github.com/apache/openjpa/commit/dcada1323742967f4e066cc88ac1d9ed46f16102"}]},{"sha":"93e15d846c2338b979d8a08408bce95c31c4598f","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzZTE1ZDg0NmMyMzM4Yjk3OWQ4YTA4NDA4YmNlOTVjMzFjNDU5OGY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-23T02:14:35Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-23T02:14:35Z"},"message":"OPENJPA-574 fix a potential NullPointerException in checkUpdateCount for statement batching.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659364 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"53a93fcfceeb51f2de437d2a45ebd7cb6005d1e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/53a93fcfceeb51f2de437d2a45ebd7cb6005d1e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93e15d846c2338b979d8a08408bce95c31c4598f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93e15d846c2338b979d8a08408bce95c31c4598f","html_url":"https://github.com/apache/openjpa/commit/93e15d846c2338b979d8a08408bce95c31c4598f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93e15d846c2338b979d8a08408bce95c31c4598f/comments","author":null,"committer":null,"parents":[{"sha":"81fc3ab6051257667d115e120de98ed650d4d54d","url":"https://api.github.com/repos/apache/openjpa/commits/81fc3ab6051257667d115e120de98ed650d4d54d","html_url":"https://github.com/apache/openjpa/commit/81fc3ab6051257667d115e120de98ed650d4d54d"}]},{"sha":"534778acf8a25814e153af4ea88d636b011ab2c0","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzNDc3OGFjZjhhMjU4MTRlMTUzYWY0ZWE4OGQ2MzZiMDExYWIyYzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-23T21:35:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-23T21:35:32Z"},"message":"OPENJPA-610 Test cases to identify use cases where behavior differs because of DataCache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659669 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"478315e0282e010517d8f71a4975baaeeeb1129a","url":"https://api.github.com/repos/apache/openjpa/git/trees/478315e0282e010517d8f71a4975baaeeeb1129a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/534778acf8a25814e153af4ea88d636b011ab2c0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/534778acf8a25814e153af4ea88d636b011ab2c0","html_url":"https://github.com/apache/openjpa/commit/534778acf8a25814e153af4ea88d636b011ab2c0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/534778acf8a25814e153af4ea88d636b011ab2c0/comments","author":null,"committer":null,"parents":[{"sha":"93e15d846c2338b979d8a08408bce95c31c4598f","url":"https://api.github.com/repos/apache/openjpa/commits/93e15d846c2338b979d8a08408bce95c31c4598f","html_url":"https://github.com/apache/openjpa/commit/93e15d846c2338b979d8a08408bce95c31c4598f"}]},{"sha":"1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhZDIxZjYxNGMzZjQwY2JjMTE1ZmIxYWM0YzRhN2Q0N2I1OGQ0NTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-23T21:51:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-23T21:51:25Z"},"message":"OPENJPA-610 Adding some comments/formatting to the tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"905b8f6610c6f22545e9eb7b86371612da765a0d","url":"https://api.github.com/repos/apache/openjpa/git/trees/905b8f6610c6f22545e9eb7b86371612da765a0d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","html_url":"https://github.com/apache/openjpa/commit/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452/comments","author":null,"committer":null,"parents":[{"sha":"534778acf8a25814e153af4ea88d636b011ab2c0","url":"https://api.github.com/repos/apache/openjpa/commits/534778acf8a25814e153af4ea88d636b011ab2c0","html_url":"https://github.com/apache/openjpa/commit/534778acf8a25814e153af4ea88d636b011ab2c0"}]},{"sha":"8f97a2aea35130f6eea10fc12d210e5c6985a7e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmOTdhMmFlYTM1MTMwZjZlZWExMGZjMTJkMjEwZTVjNjk4NWE3ZTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-27T14:40:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-27T14:40:17Z"},"message":"Clear instances before running the tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@660536 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4e2b61eea54f6eb3789677d083c0abce7c3b8a6","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4e2b61eea54f6eb3789677d083c0abce7c3b8a6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f97a2aea35130f6eea10fc12d210e5c6985a7e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f97a2aea35130f6eea10fc12d210e5c6985a7e2","html_url":"https://github.com/apache/openjpa/commit/8f97a2aea35130f6eea10fc12d210e5c6985a7e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f97a2aea35130f6eea10fc12d210e5c6985a7e2/comments","author":null,"committer":null,"parents":[{"sha":"1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","url":"https://api.github.com/repos/apache/openjpa/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","html_url":"https://github.com/apache/openjpa/commit/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452"}]},{"sha":"45693d4e7ac426b9ea68565e7a04413a2c6d551d","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1NjkzZDRlN2FjNDI2YjllYTY4NTY1ZTdhMDQ0MTNhMmM2ZDU1MWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-27T22:45:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-27T22:45:01Z"},"message":"OPENJPA-610: refresh() hits database irrespective of clean/dirty state or current lock mode or active/inactive DataCache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@660753 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82870b335692efaea8045826a4b69460a394b561","url":"https://api.github.com/repos/apache/openjpa/git/trees/82870b335692efaea8045826a4b69460a394b561"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45693d4e7ac426b9ea68565e7a04413a2c6d551d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45693d4e7ac426b9ea68565e7a04413a2c6d551d","html_url":"https://github.com/apache/openjpa/commit/45693d4e7ac426b9ea68565e7a04413a2c6d551d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45693d4e7ac426b9ea68565e7a04413a2c6d551d/comments","author":null,"committer":null,"parents":[{"sha":"8f97a2aea35130f6eea10fc12d210e5c6985a7e2","url":"https://api.github.com/repos/apache/openjpa/commits/8f97a2aea35130f6eea10fc12d210e5c6985a7e2","html_url":"https://github.com/apache/openjpa/commit/8f97a2aea35130f6eea10fc12d210e5c6985a7e2"}]},{"sha":"2d217257d9a6e169d8ea1aea9e2f906192d16784","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkMjE3MjU3ZDlhNmUxNjlkOGVhMWFlYTllMmY5MDYxOTJkMTY3ODQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T00:55:10Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T00:55:10Z"},"message":"OPENJPA-614 set supportsTimestampNanos = false for SQLServer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@660767 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"abab5ac0ff37329bf647de992529d5129b03c45b","url":"https://api.github.com/repos/apache/openjpa/git/trees/abab5ac0ff37329bf647de992529d5129b03c45b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d217257d9a6e169d8ea1aea9e2f906192d16784","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d217257d9a6e169d8ea1aea9e2f906192d16784","html_url":"https://github.com/apache/openjpa/commit/2d217257d9a6e169d8ea1aea9e2f906192d16784","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d217257d9a6e169d8ea1aea9e2f906192d16784/comments","author":null,"committer":null,"parents":[{"sha":"45693d4e7ac426b9ea68565e7a04413a2c6d551d","url":"https://api.github.com/repos/apache/openjpa/commits/45693d4e7ac426b9ea68565e7a04413a2c6d551d","html_url":"https://github.com/apache/openjpa/commit/45693d4e7ac426b9ea68565e7a04413a2c6d551d"}]},{"sha":"c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f","node_id":"MDY6Q29tbWl0MjA2MzY0OmMxZTVmMjc3MjRmM2I0YTM5ZDk2MjRhODc1OGQ1NmMyYTNlZTZiMGY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T01:20:26Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T01:20:26Z"},"message":"OPENJPA-615 add trace to display connection properties default setting during DataSource initialization\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@660770 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"abe8e3712b2ca743b97cd3e75b3a8022b696b55e","url":"https://api.github.com/repos/apache/openjpa/git/trees/abe8e3712b2ca743b97cd3e75b3a8022b696b55e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f","html_url":"https://github.com/apache/openjpa/commit/c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f/comments","author":null,"committer":null,"parents":[{"sha":"2d217257d9a6e169d8ea1aea9e2f906192d16784","url":"https://api.github.com/repos/apache/openjpa/commits/2d217257d9a6e169d8ea1aea9e2f906192d16784","html_url":"https://github.com/apache/openjpa/commit/2d217257d9a6e169d8ea1aea9e2f906192d16784"}]},{"sha":"dbbd1236f235a86f672b3f21bedaf2ee5672b34c","node_id":"MDY6Q29tbWl0MjA2MzY0OmRiYmQxMjM2ZjIzNWE4NmY2NzJiM2YyMWJlZGFmMmVlNTY3MmIzNGM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T06:08:41Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T06:08:41Z"},"message":"OPENJPA-612 Add support for calculating update value in QueryImpl.updateInMemory\nHelp comitting patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@660825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d8e69264e22d977e8f9726ef6668e3f4b121a21","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d8e69264e22d977e8f9726ef6668e3f4b121a21"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dbbd1236f235a86f672b3f21bedaf2ee5672b34c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dbbd1236f235a86f672b3f21bedaf2ee5672b34c","html_url":"https://github.com/apache/openjpa/commit/dbbd1236f235a86f672b3f21bedaf2ee5672b34c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dbbd1236f235a86f672b3f21bedaf2ee5672b34c/comments","author":null,"committer":null,"parents":[{"sha":"c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f","url":"https://api.github.com/repos/apache/openjpa/commits/c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f","html_url":"https://github.com/apache/openjpa/commit/c1e5f27724f3b4a39d9624a8758d56c2a3ee6b0f"}]},{"sha":"faa0f26cddae6869271257634c6b5b74689fc345","node_id":"MDY6Q29tbWl0MjA2MzY0OmZhYTBmMjZjZGRhZTY4NjkyNzEyNTc2MzRjNmI1Yjc0Njg5ZmMzNDU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T22:19:31Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-28T22:19:31Z"},"message":"OPENJPA-612 Add support for calculating update value in QueryImpl.updateInMemory\nHelp comitting patch provided by Fay Wang\nAdd support for in-memory string function evulation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ac744a1ea0802d7120c3726ffacbeaae88b644e","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ac744a1ea0802d7120c3726ffacbeaae88b644e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/faa0f26cddae6869271257634c6b5b74689fc345","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/faa0f26cddae6869271257634c6b5b74689fc345","html_url":"https://github.com/apache/openjpa/commit/faa0f26cddae6869271257634c6b5b74689fc345","comments_url":"https://api.github.com/repos/apache/openjpa/commits/faa0f26cddae6869271257634c6b5b74689fc345/comments","author":null,"committer":null,"parents":[{"sha":"dbbd1236f235a86f672b3f21bedaf2ee5672b34c","url":"https://api.github.com/repos/apache/openjpa/commits/dbbd1236f235a86f672b3f21bedaf2ee5672b34c","html_url":"https://github.com/apache/openjpa/commit/dbbd1236f235a86f672b3f21bedaf2ee5672b34c"}]},{"sha":"93417f99e370124cf2e4dfc5a8988b14ae061eaf","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzNDE3Zjk5ZTM3MDEyNGNmMmU0ZGZjNWE4OTg4YjE0YWUwNjFlYWY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T03:51:34Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T03:51:34Z"},"message":"OPENJPA-617 Removed hardcoding platform string.\nalso relocated 2 jdbc trace messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b86bae2d763743cbabdda41f039f8b4af7e1ce8","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b86bae2d763743cbabdda41f039f8b4af7e1ce8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93417f99e370124cf2e4dfc5a8988b14ae061eaf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93417f99e370124cf2e4dfc5a8988b14ae061eaf","html_url":"https://github.com/apache/openjpa/commit/93417f99e370124cf2e4dfc5a8988b14ae061eaf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93417f99e370124cf2e4dfc5a8988b14ae061eaf/comments","author":null,"committer":null,"parents":[{"sha":"faa0f26cddae6869271257634c6b5b74689fc345","url":"https://api.github.com/repos/apache/openjpa/commits/faa0f26cddae6869271257634c6b5b74689fc345","html_url":"https://github.com/apache/openjpa/commit/faa0f26cddae6869271257634c6b5b74689fc345"}]},{"sha":"d1aa6a2c48ad00711befb7d237a435ddd1c3973a","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxYWE2YTJjNDhhZDAwNzExYmVmYjdkMjM3YTQzNWRkZDFjMzk3M2E=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T04:27:42Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T04:27:42Z"},"message":"OPENJPA-617 Removed hardcoding platform string.\na minor fix of the message text id from batch_update_success_count to batch-update-success-count.\nJust caught that immediately after last commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661207 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"075f37b59fbba5677dbc678af7bb65c45efbac69","url":"https://api.github.com/repos/apache/openjpa/git/trees/075f37b59fbba5677dbc678af7bb65c45efbac69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1aa6a2c48ad00711befb7d237a435ddd1c3973a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1aa6a2c48ad00711befb7d237a435ddd1c3973a","html_url":"https://github.com/apache/openjpa/commit/d1aa6a2c48ad00711befb7d237a435ddd1c3973a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1aa6a2c48ad00711befb7d237a435ddd1c3973a/comments","author":null,"committer":null,"parents":[{"sha":"93417f99e370124cf2e4dfc5a8988b14ae061eaf","url":"https://api.github.com/repos/apache/openjpa/commits/93417f99e370124cf2e4dfc5a8988b14ae061eaf","html_url":"https://github.com/apache/openjpa/commit/93417f99e370124cf2e4dfc5a8988b14ae061eaf"}]},{"sha":"48b1fb5a370ea5969116332cb486c95e4934c77d","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4YjFmYjVhMzcwZWE1OTY5MTE2MzMyY2I0ODZjOTVlNDkzNGM3N2Q=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T20:38:21Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T20:38:21Z"},"message":"OPENJPA-617 Add support for calculating update value in QueryImpl.updateInMemory\nHelp comitting patch provided by Fay Wang\nAdd support for in-memory math - sqrt, abs functions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bce16a1cb7fd76ce6d32a09aedf2a7293a0a7c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bce16a1cb7fd76ce6d32a09aedf2a7293a0a7c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/48b1fb5a370ea5969116332cb486c95e4934c77d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/48b1fb5a370ea5969116332cb486c95e4934c77d","html_url":"https://github.com/apache/openjpa/commit/48b1fb5a370ea5969116332cb486c95e4934c77d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/48b1fb5a370ea5969116332cb486c95e4934c77d/comments","author":null,"committer":null,"parents":[{"sha":"d1aa6a2c48ad00711befb7d237a435ddd1c3973a","url":"https://api.github.com/repos/apache/openjpa/commits/d1aa6a2c48ad00711befb7d237a435ddd1c3973a","html_url":"https://github.com/apache/openjpa/commit/d1aa6a2c48ad00711befb7d237a435ddd1c3973a"}]},{"sha":"89b296fd544c25a36d0abb11f6cd0b6333542068","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5YjI5NmZkNTQ0YzI1YTM2ZDBhYmIxMWY2Y2QwYjYzMzM1NDIwNjg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-29T21:53:51Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-29T21:53:51Z"},"message":"OPENJPA-610: OpenJPA internal exceptions are heuristically translated at facade-level to JPA-defined exception subtypes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661498 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7266c8453c909dbe5ccff243d17a64e9d89dcc2","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7266c8453c909dbe5ccff243d17a64e9d89dcc2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89b296fd544c25a36d0abb11f6cd0b6333542068","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89b296fd544c25a36d0abb11f6cd0b6333542068","html_url":"https://github.com/apache/openjpa/commit/89b296fd544c25a36d0abb11f6cd0b6333542068","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89b296fd544c25a36d0abb11f6cd0b6333542068/comments","author":null,"committer":null,"parents":[{"sha":"48b1fb5a370ea5969116332cb486c95e4934c77d","url":"https://api.github.com/repos/apache/openjpa/commits/48b1fb5a370ea5969116332cb486c95e4934c77d","html_url":"https://github.com/apache/openjpa/commit/48b1fb5a370ea5969116332cb486c95e4934c77d"}]},{"sha":"794305c2f1372a70cff0071ec71cc70b9ca9f78e","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5NDMwNWMyZjEzNzJhNzBjZmYwMDcxZWM3MWNjNzBiOWNhOWY3OGU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-30T18:10:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-30T18:10:50Z"},"message":"git-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661800 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67f5ab478d17fddcd2329ab6a458a1c77ca107b1","url":"https://api.github.com/repos/apache/openjpa/git/trees/67f5ab478d17fddcd2329ab6a458a1c77ca107b1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e","html_url":"https://github.com/apache/openjpa/commit/794305c2f1372a70cff0071ec71cc70b9ca9f78e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e/comments","author":null,"committer":null,"parents":[{"sha":"89b296fd544c25a36d0abb11f6cd0b6333542068","url":"https://api.github.com/repos/apache/openjpa/commits/89b296fd544c25a36d0abb11f6cd0b6333542068","html_url":"https://github.com/apache/openjpa/commit/89b296fd544c25a36d0abb11f6cd0b6333542068"}]},{"sha":"1fda19f8b7f147a70ac79b4ee642c032e2905a5d","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmZGExOWY4YjdmMTQ3YTcwYWM3OWI0ZWU2NDJjMDMyZTI5MDVhNWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-30T19:06:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-30T19:06:01Z"},"message":"OPENJPA-610: Correcting the @since version\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661817 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b2cfa9f462145a7364877cfa9f09a4fa31c5bf6","url":"https://api.github.com/repos/apache/openjpa/git/trees/1b2cfa9f462145a7364877cfa9f09a4fa31c5bf6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1fda19f8b7f147a70ac79b4ee642c032e2905a5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1fda19f8b7f147a70ac79b4ee642c032e2905a5d","html_url":"https://github.com/apache/openjpa/commit/1fda19f8b7f147a70ac79b4ee642c032e2905a5d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1fda19f8b7f147a70ac79b4ee642c032e2905a5d/comments","author":null,"committer":null,"parents":[{"sha":"794305c2f1372a70cff0071ec71cc70b9ca9f78e","url":"https://api.github.com/repos/apache/openjpa/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e","html_url":"https://github.com/apache/openjpa/commit/794305c2f1372a70cff0071ec71cc70b9ca9f78e"}]},{"sha":"8a80d753a31e71ce07f24e7069b7ff5e71e30c03","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhODBkNzUzYTMxZTcxY2UwN2YyNGU3MDY5YjdmZjVlNzFlMzBjMDM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-04T19:49:41Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-04T19:49:41Z"},"message":"OPENJPA-622 Informix -lock timieout, cursor not open problem for NonJTA datasource transaction RESOURCE_LOCAL in JEE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@663358 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97d8e1f955e1df4b9c5c659a0b5ade698b0be706","url":"https://api.github.com/repos/apache/openjpa/git/trees/97d8e1f955e1df4b9c5c659a0b5ade698b0be706"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a80d753a31e71ce07f24e7069b7ff5e71e30c03","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a80d753a31e71ce07f24e7069b7ff5e71e30c03","html_url":"https://github.com/apache/openjpa/commit/8a80d753a31e71ce07f24e7069b7ff5e71e30c03","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a80d753a31e71ce07f24e7069b7ff5e71e30c03/comments","author":null,"committer":null,"parents":[{"sha":"1fda19f8b7f147a70ac79b4ee642c032e2905a5d","url":"https://api.github.com/repos/apache/openjpa/commits/1fda19f8b7f147a70ac79b4ee642c032e2905a5d","html_url":"https://github.com/apache/openjpa/commit/1fda19f8b7f147a70ac79b4ee642c032e2905a5d"}]},{"sha":"ffbc73ffa6d85735666fd0ec98ae30f418d42d93","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmYmM3M2ZmYTZkODU3MzU2NjZmZDBlYzk4YWUzMGY0MThkNDJkOTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-09T16:51:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-09T16:51:55Z"},"message":"OPENJPA-629 trim schema name\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@665762 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab805a46fea98d514fb812fd6f78dd89a75f6fac","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab805a46fea98d514fb812fd6f78dd89a75f6fac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ffbc73ffa6d85735666fd0ec98ae30f418d42d93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ffbc73ffa6d85735666fd0ec98ae30f418d42d93","html_url":"https://github.com/apache/openjpa/commit/ffbc73ffa6d85735666fd0ec98ae30f418d42d93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ffbc73ffa6d85735666fd0ec98ae30f418d42d93/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a80d753a31e71ce07f24e7069b7ff5e71e30c03","url":"https://api.github.com/repos/apache/openjpa/commits/8a80d753a31e71ce07f24e7069b7ff5e71e30c03","html_url":"https://github.com/apache/openjpa/commit/8a80d753a31e71ce07f24e7069b7ff5e71e30c03"}]},{"sha":"a4d905f3455ee6b6f2a594baf1961cc73234fffe","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0ZDkwNWYzNDU1ZWU2YjZmMmE1OTRiYWYxOTYxY2M3MzIzNGZmZmU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-09T17:53:22Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-09T17:53:22Z"},"message":"OPENJPA-629 trim schema name for Informix only.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@665801 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b41f36e7e07c9dd740e35c82502f374e54eacd8","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b41f36e7e07c9dd740e35c82502f374e54eacd8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4d905f3455ee6b6f2a594baf1961cc73234fffe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4d905f3455ee6b6f2a594baf1961cc73234fffe","html_url":"https://github.com/apache/openjpa/commit/a4d905f3455ee6b6f2a594baf1961cc73234fffe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4d905f3455ee6b6f2a594baf1961cc73234fffe/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffbc73ffa6d85735666fd0ec98ae30f418d42d93","url":"https://api.github.com/repos/apache/openjpa/commits/ffbc73ffa6d85735666fd0ec98ae30f418d42d93","html_url":"https://github.com/apache/openjpa/commit/ffbc73ffa6d85735666fd0ec98ae30f418d42d93"}]},{"sha":"110e3ff4b02aa1482d3f0e931539bbf616b006bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMGUzZmY0YjAyYWExNDgyZDNmMGU5MzE1MzliYmY2MTZiMDA2YmM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-06-09T22:02:12Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-06-09T22:02:12Z"},"message":"OPENJPA-630 Enforce no statement batching support if batchlimit set to 1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@665915 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b76184daac68f1b6a5fa53c4013ae63301a474f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/b76184daac68f1b6a5fa53c4013ae63301a474f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/110e3ff4b02aa1482d3f0e931539bbf616b006bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/110e3ff4b02aa1482d3f0e931539bbf616b006bc","html_url":"https://github.com/apache/openjpa/commit/110e3ff4b02aa1482d3f0e931539bbf616b006bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/110e3ff4b02aa1482d3f0e931539bbf616b006bc/comments","author":null,"committer":null,"parents":[{"sha":"a4d905f3455ee6b6f2a594baf1961cc73234fffe","url":"https://api.github.com/repos/apache/openjpa/commits/a4d905f3455ee6b6f2a594baf1961cc73234fffe","html_url":"https://github.com/apache/openjpa/commit/a4d905f3455ee6b6f2a594baf1961cc73234fffe"}]},{"sha":"ddc42e807837f340306dbbf2e9f04255f8437539","node_id":"MDY6Q29tbWl0MjA2MzY0OmRkYzQyZTgwNzgzN2YzNDAzMDZkYmJmMmU5ZjA0MjU1Zjg0Mzc1Mzk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-10T14:45:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-10T14:45:59Z"},"message":"OPENJPA-631 provide detailed SQLException for batched statements that encountered error in DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666137 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b1a55087ed9deaafee5e23e730d9898679a0bc4","url":"https://api.github.com/repos/apache/openjpa/git/trees/3b1a55087ed9deaafee5e23e730d9898679a0bc4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ddc42e807837f340306dbbf2e9f04255f8437539","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ddc42e807837f340306dbbf2e9f04255f8437539","html_url":"https://github.com/apache/openjpa/commit/ddc42e807837f340306dbbf2e9f04255f8437539","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ddc42e807837f340306dbbf2e9f04255f8437539/comments","author":null,"committer":null,"parents":[{"sha":"110e3ff4b02aa1482d3f0e931539bbf616b006bc","url":"https://api.github.com/repos/apache/openjpa/commits/110e3ff4b02aa1482d3f0e931539bbf616b006bc","html_url":"https://github.com/apache/openjpa/commit/110e3ff4b02aa1482d3f0e931539bbf616b006bc"}]},{"sha":"63c48992274fce84b2c08bf8bbe6df024736557c","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzYzQ4OTkyMjc0ZmNlODRiMmMwOGJmOGJiZTZkZjAyNDczNjU1N2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-10T20:34:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-10T20:34:52Z"},"message":"OPENJPA-602: Avoid NPE when table-per-class inheritance staregy with an abstract root. See test cases for further details.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666314 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"48090ac043543b0f71cb630588299888f621af07","url":"https://api.github.com/repos/apache/openjpa/git/trees/48090ac043543b0f71cb630588299888f621af07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63c48992274fce84b2c08bf8bbe6df024736557c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63c48992274fce84b2c08bf8bbe6df024736557c","html_url":"https://github.com/apache/openjpa/commit/63c48992274fce84b2c08bf8bbe6df024736557c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63c48992274fce84b2c08bf8bbe6df024736557c/comments","author":null,"committer":null,"parents":[{"sha":"ddc42e807837f340306dbbf2e9f04255f8437539","url":"https://api.github.com/repos/apache/openjpa/commits/ddc42e807837f340306dbbf2e9f04255f8437539","html_url":"https://github.com/apache/openjpa/commit/ddc42e807837f340306dbbf2e9f04255f8437539"}]},{"sha":"d965db72710b34fb1547dc616caedaaf75af565e","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5NjVkYjcyNzEwYjM0ZmIxNTQ3ZGM2MTZjYWVkYWFmNzVhZjU2NWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-11T03:03:16Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-11T03:03:16Z"},"message":"OPENJPA-634 Batched updates resulted in SQLException was not propagated back to users application\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666512 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57f02d5c667309f16c156422a7da53a99778a648","url":"https://api.github.com/repos/apache/openjpa/git/trees/57f02d5c667309f16c156422a7da53a99778a648"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d965db72710b34fb1547dc616caedaaf75af565e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d965db72710b34fb1547dc616caedaaf75af565e","html_url":"https://github.com/apache/openjpa/commit/d965db72710b34fb1547dc616caedaaf75af565e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d965db72710b34fb1547dc616caedaaf75af565e/comments","author":null,"committer":null,"parents":[{"sha":"63c48992274fce84b2c08bf8bbe6df024736557c","url":"https://api.github.com/repos/apache/openjpa/commits/63c48992274fce84b2c08bf8bbe6df024736557c","html_url":"https://github.com/apache/openjpa/commit/63c48992274fce84b2c08bf8bbe6df024736557c"}]},{"sha":"f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxYWM2MjViMmM5MzFlZTFjYjk5ZTRlYjk4ZmRjYmQ4ZDUyM2I3ODE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-11T03:33:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-11T03:33:35Z"},"message":"OPENJPA-209: Detect identical instances being added to L1 cache multiple times during a load session.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666515 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21ce791fd7ddffcaa1f14362a22caaf949174398","url":"https://api.github.com/repos/apache/openjpa/git/trees/21ce791fd7ddffcaa1f14362a22caaf949174398"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781","html_url":"https://github.com/apache/openjpa/commit/f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781/comments","author":null,"committer":null,"parents":[{"sha":"d965db72710b34fb1547dc616caedaaf75af565e","url":"https://api.github.com/repos/apache/openjpa/commits/d965db72710b34fb1547dc616caedaaf75af565e","html_url":"https://github.com/apache/openjpa/commit/d965db72710b34fb1547dc616caedaaf75af565e"}]},{"sha":"545c6732c887dc77040eff00fc0dad89312d6729","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0NWM2NzMyYzg4N2RjNzcwNDBlZmYwMGZjMGRhZDg5MzEyZDY3Mjk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-11T09:48:06Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-11T09:48:06Z"},"message":"OPENJPA-634 Batched updates resulted in SQLException was not propagated back to users application\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666595 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70746a1b1b1faaef6fa4a3980a971a60a2fe3984","url":"https://api.github.com/repos/apache/openjpa/git/trees/70746a1b1b1faaef6fa4a3980a971a60a2fe3984"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/545c6732c887dc77040eff00fc0dad89312d6729","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/545c6732c887dc77040eff00fc0dad89312d6729","html_url":"https://github.com/apache/openjpa/commit/545c6732c887dc77040eff00fc0dad89312d6729","comments_url":"https://api.github.com/repos/apache/openjpa/commits/545c6732c887dc77040eff00fc0dad89312d6729/comments","author":null,"committer":null,"parents":[{"sha":"f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781","url":"https://api.github.com/repos/apache/openjpa/commits/f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781","html_url":"https://github.com/apache/openjpa/commit/f1ac625b2c931ee1cb99e4eb98fdcbd8d523b781"}]},{"sha":"981c023e0eef7b60570a59fc5ba992804f7bb7e8","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk4MWMwMjNlMGVlZjdiNjA1NzBhNTlmYzViYTk5MjgwNGY3YmI3ZTg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-11T16:48:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-11T16:48:56Z"},"message":"OPENJPA-633 updating pom.xml files to be compatible with the maven-release-plugin. There are a lot of formatting changes which are needed to prevent the plugin from removing our copyright header.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666731 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6632fa185e835c2b43af5468ae1ef1a37779265","url":"https://api.github.com/repos/apache/openjpa/git/trees/e6632fa185e835c2b43af5468ae1ef1a37779265"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/981c023e0eef7b60570a59fc5ba992804f7bb7e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/981c023e0eef7b60570a59fc5ba992804f7bb7e8","html_url":"https://github.com/apache/openjpa/commit/981c023e0eef7b60570a59fc5ba992804f7bb7e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/981c023e0eef7b60570a59fc5ba992804f7bb7e8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"545c6732c887dc77040eff00fc0dad89312d6729","url":"https://api.github.com/repos/apache/openjpa/commits/545c6732c887dc77040eff00fc0dad89312d6729","html_url":"https://github.com/apache/openjpa/commit/545c6732c887dc77040eff00fc0dad89312d6729"}]},{"sha":"b589da8070870f1ed50f8c50c715962323220ed6","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1ODlkYTgwNzA4NzBmMWVkNTBmOGM1MGM3MTU5NjIzMjMyMjBlZDY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:14:24Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:14:24Z"},"message":"OPENJPA-245. Backported r646082 to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f274ef8ad9305091de42012e79e9f614fa38c94","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f274ef8ad9305091de42012e79e9f614fa38c94"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b589da8070870f1ed50f8c50c715962323220ed6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b589da8070870f1ed50f8c50c715962323220ed6","html_url":"https://github.com/apache/openjpa/commit/b589da8070870f1ed50f8c50c715962323220ed6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b589da8070870f1ed50f8c50c715962323220ed6/comments","author":null,"committer":null,"parents":[{"sha":"981c023e0eef7b60570a59fc5ba992804f7bb7e8","url":"https://api.github.com/repos/apache/openjpa/commits/981c023e0eef7b60570a59fc5ba992804f7bb7e8","html_url":"https://github.com/apache/openjpa/commit/981c023e0eef7b60570a59fc5ba992804f7bb7e8"}]},{"sha":"4d668a44dd3ced73ac00d9846ed608423b3cb790","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkNjY4YTQ0ZGQzY2VkNzNhYzAwZDk4NDZlZDYwODQyM2IzY2I3OTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:20:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:20:27Z"},"message":"Backported r650989 to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666890 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df528444ee41a9a0d4b135cfe6ca98ef457182d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/df528444ee41a9a0d4b135cfe6ca98ef457182d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d668a44dd3ced73ac00d9846ed608423b3cb790","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d668a44dd3ced73ac00d9846ed608423b3cb790","html_url":"https://github.com/apache/openjpa/commit/4d668a44dd3ced73ac00d9846ed608423b3cb790","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d668a44dd3ced73ac00d9846ed608423b3cb790/comments","author":null,"committer":null,"parents":[{"sha":"b589da8070870f1ed50f8c50c715962323220ed6","url":"https://api.github.com/repos/apache/openjpa/commits/b589da8070870f1ed50f8c50c715962323220ed6","html_url":"https://github.com/apache/openjpa/commit/b589da8070870f1ed50f8c50c715962323220ed6"}]},{"sha":"8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmYjdjYTJiNWIxNzc3ZmNmOTZlMTIzMzY4YmEzZjRjMzFkYTZjYjU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:21:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:21:46Z"},"message":"Backported r651121 to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"924375e96a96c006db4a84c7a7067a72289f8d11","url":"https://api.github.com/repos/apache/openjpa/git/trees/924375e96a96c006db4a84c7a7067a72289f8d11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5","html_url":"https://github.com/apache/openjpa/commit/8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5/comments","author":null,"committer":null,"parents":[{"sha":"4d668a44dd3ced73ac00d9846ed608423b3cb790","url":"https://api.github.com/repos/apache/openjpa/commits/4d668a44dd3ced73ac00d9846ed608423b3cb790","html_url":"https://github.com/apache/openjpa/commit/4d668a44dd3ced73ac00d9846ed608423b3cb790"}]},{"sha":"96dd926f4ae1073067637009ed88cbe2a103e1fb","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2ZGQ5MjZmNGFlMTA3MzA2NzYzNzAwOWVkODhjYmUyYTEwM2UxZmI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:22:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:22:54Z"},"message":"OPENJPA-522. Backporting r652026 to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666894 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4f42267dd3c0697bdb6097797f41017a140b3c2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/4f42267dd3c0697bdb6097797f41017a140b3c2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/96dd926f4ae1073067637009ed88cbe2a103e1fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/96dd926f4ae1073067637009ed88cbe2a103e1fb","html_url":"https://github.com/apache/openjpa/commit/96dd926f4ae1073067637009ed88cbe2a103e1fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/96dd926f4ae1073067637009ed88cbe2a103e1fb/comments","author":null,"committer":null,"parents":[{"sha":"8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5","url":"https://api.github.com/repos/apache/openjpa/commits/8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5","html_url":"https://github.com/apache/openjpa/commit/8fb7ca2b5b1777fcf96e123368ba3f4c31da6cb5"}]},{"sha":"6f6634bbadcd9649e60474bce9c54473c4db34b6","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmNjYzNGJiYWRjZDk2NDllNjA0NzRiY2U5YzU0NDczYzRkYjM0YjY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:23:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:23:33Z"},"message":"OPENJPA-522. Backporting r652035 to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666895 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4447f98bf96fe1ddd4f51935c697bf84e5a863d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/4447f98bf96fe1ddd4f51935c697bf84e5a863d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f6634bbadcd9649e60474bce9c54473c4db34b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f6634bbadcd9649e60474bce9c54473c4db34b6","html_url":"https://github.com/apache/openjpa/commit/6f6634bbadcd9649e60474bce9c54473c4db34b6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f6634bbadcd9649e60474bce9c54473c4db34b6/comments","author":null,"committer":null,"parents":[{"sha":"96dd926f4ae1073067637009ed88cbe2a103e1fb","url":"https://api.github.com/repos/apache/openjpa/commits/96dd926f4ae1073067637009ed88cbe2a103e1fb","html_url":"https://github.com/apache/openjpa/commit/96dd926f4ae1073067637009ed88cbe2a103e1fb"}]},{"sha":"8db8e5302edd28abe8b5d324b43c9f89a273f3b7","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkYjhlNTMwMmVkZDI4YWJlOGI1ZDMyNGI0M2M5Zjg5YTI3M2YzYjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:27:18Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:27:18Z"},"message":"OPENJPA-544. Merge from ../active. svn merge -c 652523 ../active\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666897 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da9c5a72e6dd10ba82b68aef96d61dea831d9d22","url":"https://api.github.com/repos/apache/openjpa/git/trees/da9c5a72e6dd10ba82b68aef96d61dea831d9d22"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8db8e5302edd28abe8b5d324b43c9f89a273f3b7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8db8e5302edd28abe8b5d324b43c9f89a273f3b7","html_url":"https://github.com/apache/openjpa/commit/8db8e5302edd28abe8b5d324b43c9f89a273f3b7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8db8e5302edd28abe8b5d324b43c9f89a273f3b7/comments","author":null,"committer":null,"parents":[{"sha":"6f6634bbadcd9649e60474bce9c54473c4db34b6","url":"https://api.github.com/repos/apache/openjpa/commits/6f6634bbadcd9649e60474bce9c54473c4db34b6","html_url":"https://github.com/apache/openjpa/commit/6f6634bbadcd9649e60474bce9c54473c4db34b6"}]},{"sha":"547438ed18be883a33b5b8175ca0e72a8225c64c","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0NzQzOGVkMThiZTg4M2EzM2I1YjgxNzVjYTBlNzJhODIyNWM2NGM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:29:11Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:29:11Z"},"message":"OPENJPA-579, OPENJPA-585, OPENJPA-587, OPENJPA-588. Merge from ../active. svn merge -c 652987 ../active\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a033b3c64c707186af14a37c228375f66baeadce","url":"https://api.github.com/repos/apache/openjpa/git/trees/a033b3c64c707186af14a37c228375f66baeadce"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/547438ed18be883a33b5b8175ca0e72a8225c64c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/547438ed18be883a33b5b8175ca0e72a8225c64c","html_url":"https://github.com/apache/openjpa/commit/547438ed18be883a33b5b8175ca0e72a8225c64c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/547438ed18be883a33b5b8175ca0e72a8225c64c/comments","author":null,"committer":null,"parents":[{"sha":"8db8e5302edd28abe8b5d324b43c9f89a273f3b7","url":"https://api.github.com/repos/apache/openjpa/commits/8db8e5302edd28abe8b5d324b43c9f89a273f3b7","html_url":"https://github.com/apache/openjpa/commit/8db8e5302edd28abe8b5d324b43c9f89a273f3b7"}]},{"sha":"e8702b1ed361253335472ac7431d600890219bd6","node_id":"MDY6Q29tbWl0MjA2MzY0OmU4NzAyYjFlZDM2MTI1MzMzNTQ3MmFjNzQzMWQ2MDA4OTAyMTliZDY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:40:27Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:40:27Z"},"message":" Merge from ../active. svn merge -c 653000 ../active\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666900 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0cfc1bd884b7a1d6b21298541be37e73e1cd2145","url":"https://api.github.com/repos/apache/openjpa/git/trees/0cfc1bd884b7a1d6b21298541be37e73e1cd2145"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e8702b1ed361253335472ac7431d600890219bd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e8702b1ed361253335472ac7431d600890219bd6","html_url":"https://github.com/apache/openjpa/commit/e8702b1ed361253335472ac7431d600890219bd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e8702b1ed361253335472ac7431d600890219bd6/comments","author":null,"committer":null,"parents":[{"sha":"547438ed18be883a33b5b8175ca0e72a8225c64c","url":"https://api.github.com/repos/apache/openjpa/commits/547438ed18be883a33b5b8175ca0e72a8225c64c","html_url":"https://github.com/apache/openjpa/commit/547438ed18be883a33b5b8175ca0e72a8225c64c"}]},{"sha":"f17afddbd61836465de97ebc985a0170f062734f","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxN2FmZGRiZDYxODM2NDY1ZGU5N2ViYzk4NWEwMTcwZjA2MjczNGY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:43:11Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:43:11Z"},"message":" Merge from ../active. svn merge -c 652930 ../active\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666903 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"17db08e7b2fad115b0e570e43fe5193f2f8ee00d","url":"https://api.github.com/repos/apache/openjpa/git/trees/17db08e7b2fad115b0e570e43fe5193f2f8ee00d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f17afddbd61836465de97ebc985a0170f062734f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f17afddbd61836465de97ebc985a0170f062734f","html_url":"https://github.com/apache/openjpa/commit/f17afddbd61836465de97ebc985a0170f062734f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f17afddbd61836465de97ebc985a0170f062734f/comments","author":null,"committer":null,"parents":[{"sha":"e8702b1ed361253335472ac7431d600890219bd6","url":"https://api.github.com/repos/apache/openjpa/commits/e8702b1ed361253335472ac7431d600890219bd6","html_url":"https://github.com/apache/openjpa/commit/e8702b1ed361253335472ac7431d600890219bd6"}]},{"sha":"97a94847f6c6620b934255f2ecf30bb9493e11c5","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3YTk0ODQ3ZjZjNjYyMGI5MzQyNTVmMmVjZjMwYmI5NDkzZTExYzU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:46:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:46:28Z"},"message":"OPENJPA-130. Merge from ../branches/1.1.x. svn merge -c 653008 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed0bff5479ea411aae089dc5100a4839266be8d3","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed0bff5479ea411aae089dc5100a4839266be8d3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5","html_url":"https://github.com/apache/openjpa/commit/97a94847f6c6620b934255f2ecf30bb9493e11c5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5/comments","author":null,"committer":null,"parents":[{"sha":"f17afddbd61836465de97ebc985a0170f062734f","url":"https://api.github.com/repos/apache/openjpa/commits/f17afddbd61836465de97ebc985a0170f062734f","html_url":"https://github.com/apache/openjpa/commit/f17afddbd61836465de97ebc985a0170f062734f"}]},{"sha":"c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d","node_id":"MDY6Q29tbWl0MjA2MzY0OmM5YzZhYWRjODU5OWI4YjMzOTJkNGM1ZGJjNmI3YzliYTk2NzNlOGQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:48:33Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:48:33Z"},"message":"OPENJPA-417. Merged r653081 and r653085.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666906 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b0d70c3f43db0e0526fa83df84e51654915b262","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b0d70c3f43db0e0526fa83df84e51654915b262"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d","html_url":"https://github.com/apache/openjpa/commit/c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d/comments","author":null,"committer":null,"parents":[{"sha":"97a94847f6c6620b934255f2ecf30bb9493e11c5","url":"https://api.github.com/repos/apache/openjpa/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5","html_url":"https://github.com/apache/openjpa/commit/97a94847f6c6620b934255f2ecf30bb9493e11c5"}]},{"sha":"1ac94263ac362cf4a75b364588dda48529c2d12a","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhYzk0MjYzYWMzNjJjZjRhNzViMzY0NTg4ZGRhNDg1MjljMmQxMmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:49:12Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:49:12Z"},"message":" Merge from ../branches/1.1.x/. svn merge -c 653083 ../branches/1.1.x/\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666907 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f331ef72dc38f450b409335c1cbcb465dd220069","url":"https://api.github.com/repos/apache/openjpa/git/trees/f331ef72dc38f450b409335c1cbcb465dd220069"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ac94263ac362cf4a75b364588dda48529c2d12a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ac94263ac362cf4a75b364588dda48529c2d12a","html_url":"https://github.com/apache/openjpa/commit/1ac94263ac362cf4a75b364588dda48529c2d12a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ac94263ac362cf4a75b364588dda48529c2d12a/comments","author":null,"committer":null,"parents":[{"sha":"c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d","url":"https://api.github.com/repos/apache/openjpa/commits/c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d","html_url":"https://github.com/apache/openjpa/commit/c9c6aadc8599b8b3392d4c5dbc6b7c9ba9673e8d"}]},{"sha":"f183c42b90690fd31f7d1fd12cd92fbb0ef17459","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxODNjNDJiOTA2OTBmZDMxZjdkMWZkMTJjZDkyZmJiMGVmMTc0NTk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:50:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:50:05Z"},"message":" Merge from ../branches/1.1.x/. svn merge -c 653088 ../branches/1.1.x/\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666909 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"36c3ee45b923df60c104e3067c007f807392c70d","url":"https://api.github.com/repos/apache/openjpa/git/trees/36c3ee45b923df60c104e3067c007f807392c70d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f183c42b90690fd31f7d1fd12cd92fbb0ef17459","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f183c42b90690fd31f7d1fd12cd92fbb0ef17459","html_url":"https://github.com/apache/openjpa/commit/f183c42b90690fd31f7d1fd12cd92fbb0ef17459","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f183c42b90690fd31f7d1fd12cd92fbb0ef17459/comments","author":null,"committer":null,"parents":[{"sha":"1ac94263ac362cf4a75b364588dda48529c2d12a","url":"https://api.github.com/repos/apache/openjpa/commits/1ac94263ac362cf4a75b364588dda48529c2d12a","html_url":"https://github.com/apache/openjpa/commit/1ac94263ac362cf4a75b364588dda48529c2d12a"}]},{"sha":"753be68e244bc14ec66807ba6457d1fa2211d9c6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1M2JlNjhlMjQ0YmMxNGVjNjY4MDdiYTY0NTdkMWZhMjIxMWQ5YzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:52:31Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:52:31Z"},"message":"OPENJPA-231. Merging r655354 and r655592 from 1.1.x.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666912 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e231b01b7b6c8df8aed32e737e375a4592be3241","url":"https://api.github.com/repos/apache/openjpa/git/trees/e231b01b7b6c8df8aed32e737e375a4592be3241"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/753be68e244bc14ec66807ba6457d1fa2211d9c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/753be68e244bc14ec66807ba6457d1fa2211d9c6","html_url":"https://github.com/apache/openjpa/commit/753be68e244bc14ec66807ba6457d1fa2211d9c6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/753be68e244bc14ec66807ba6457d1fa2211d9c6/comments","author":null,"committer":null,"parents":[{"sha":"f183c42b90690fd31f7d1fd12cd92fbb0ef17459","url":"https://api.github.com/repos/apache/openjpa/commits/f183c42b90690fd31f7d1fd12cd92fbb0ef17459","html_url":"https://github.com/apache/openjpa/commit/f183c42b90690fd31f7d1fd12cd92fbb0ef17459"}]},{"sha":"1a45d110a24eb8b2d8f1189100bff289201b3b12","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhNDVkMTEwYTI0ZWI4YjJkOGYxMTg5MTAwYmZmMjg5MjAxYjNiMTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:55:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:55:03Z"},"message":"OPENJPA-130. Merging r655581 from 1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666914 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24e647f217033976527141a43771e6dd71cb9db4","url":"https://api.github.com/repos/apache/openjpa/git/trees/24e647f217033976527141a43771e6dd71cb9db4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12","html_url":"https://github.com/apache/openjpa/commit/1a45d110a24eb8b2d8f1189100bff289201b3b12","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12/comments","author":null,"committer":null,"parents":[{"sha":"753be68e244bc14ec66807ba6457d1fa2211d9c6","url":"https://api.github.com/repos/apache/openjpa/commits/753be68e244bc14ec66807ba6457d1fa2211d9c6","html_url":"https://github.com/apache/openjpa/commit/753be68e244bc14ec66807ba6457d1fa2211d9c6"}]},{"sha":"629977fb1c2a25ba7ce2dd38fe0062866f73b48f","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyOTk3N2ZiMWMyYTI1YmE3Y2UyZGQzOGZlMDA2Mjg2NmY3M2I0OGY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:55:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:55:46Z"},"message":"OPENJPA-597. Merge from ../branches/1.1.x. svn merge -c 655600 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666915 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70f0299e3aa4997f56e0848ab6ef71882a91396a","url":"https://api.github.com/repos/apache/openjpa/git/trees/70f0299e3aa4997f56e0848ab6ef71882a91396a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/629977fb1c2a25ba7ce2dd38fe0062866f73b48f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/629977fb1c2a25ba7ce2dd38fe0062866f73b48f","html_url":"https://github.com/apache/openjpa/commit/629977fb1c2a25ba7ce2dd38fe0062866f73b48f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/629977fb1c2a25ba7ce2dd38fe0062866f73b48f/comments","author":null,"committer":null,"parents":[{"sha":"1a45d110a24eb8b2d8f1189100bff289201b3b12","url":"https://api.github.com/repos/apache/openjpa/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12","html_url":"https://github.com/apache/openjpa/commit/1a45d110a24eb8b2d8f1189100bff289201b3b12"}]},{"sha":"5ee728e3327f4754f73381b10f13505bb243a27d","node_id":"MDY6Q29tbWl0MjA2MzY0OjVlZTcyOGUzMzI3ZjQ3NTRmNzMzODFiMTBmMTM1MDViYjI0M2EyN2Q=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:58:16Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:58:16Z"},"message":"OPENJPA-600. Merge from ../branches/1.1.x. svn merge -c 656006 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"16d0f8385eb577c9f11fc2b4549d7ea125298d6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/16d0f8385eb577c9f11fc2b4549d7ea125298d6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5ee728e3327f4754f73381b10f13505bb243a27d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5ee728e3327f4754f73381b10f13505bb243a27d","html_url":"https://github.com/apache/openjpa/commit/5ee728e3327f4754f73381b10f13505bb243a27d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5ee728e3327f4754f73381b10f13505bb243a27d/comments","author":null,"committer":null,"parents":[{"sha":"629977fb1c2a25ba7ce2dd38fe0062866f73b48f","url":"https://api.github.com/repos/apache/openjpa/commits/629977fb1c2a25ba7ce2dd38fe0062866f73b48f","html_url":"https://github.com/apache/openjpa/commit/629977fb1c2a25ba7ce2dd38fe0062866f73b48f"}]},{"sha":"12c0a094ee5976bf95253c04e5c3fb02f9221344","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyYzBhMDk0ZWU1OTc2YmY5NTI1M2MwNGU1YzNmYjAyZjkyMjEzNDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:59:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:59:15Z"},"message":" Merge from ../branches/1.1.x. svn merge -c 656796 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666919 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9b58933c0ce922e998fad6fd9c957457cdaa19f","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9b58933c0ce922e998fad6fd9c957457cdaa19f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/12c0a094ee5976bf95253c04e5c3fb02f9221344","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/12c0a094ee5976bf95253c04e5c3fb02f9221344","html_url":"https://github.com/apache/openjpa/commit/12c0a094ee5976bf95253c04e5c3fb02f9221344","comments_url":"https://api.github.com/repos/apache/openjpa/commits/12c0a094ee5976bf95253c04e5c3fb02f9221344/comments","author":null,"committer":null,"parents":[{"sha":"5ee728e3327f4754f73381b10f13505bb243a27d","url":"https://api.github.com/repos/apache/openjpa/commits/5ee728e3327f4754f73381b10f13505bb243a27d","html_url":"https://github.com/apache/openjpa/commit/5ee728e3327f4754f73381b10f13505bb243a27d"}]},{"sha":"06ab9692d54c04d83f7da4e940bed16be3c70783","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2YWI5NjkyZDU0YzA0ZDgzZjdkYTRlOTQwYmVkMTZiZTNjNzA3ODM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:59:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:59:44Z"},"message":" Merge from ../branches/1.1.x. svn merge -c 657148 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666920 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3411cb0c2a592b6ecda7dcbdf1a6a54e972827f3","url":"https://api.github.com/repos/apache/openjpa/git/trees/3411cb0c2a592b6ecda7dcbdf1a6a54e972827f3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/06ab9692d54c04d83f7da4e940bed16be3c70783","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/06ab9692d54c04d83f7da4e940bed16be3c70783","html_url":"https://github.com/apache/openjpa/commit/06ab9692d54c04d83f7da4e940bed16be3c70783","comments_url":"https://api.github.com/repos/apache/openjpa/commits/06ab9692d54c04d83f7da4e940bed16be3c70783/comments","author":null,"committer":null,"parents":[{"sha":"12c0a094ee5976bf95253c04e5c3fb02f9221344","url":"https://api.github.com/repos/apache/openjpa/commits/12c0a094ee5976bf95253c04e5c3fb02f9221344","html_url":"https://github.com/apache/openjpa/commit/12c0a094ee5976bf95253c04e5c3fb02f9221344"}]},{"sha":"90332224f77bea9341d080d76e7d06b31471697f","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMzMyMjI0Zjc3YmVhOTM0MWQwODBkNzZlN2QwNmIzMTQ3MTY5N2Y=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-12T00:00:06Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-12T00:00:06Z"},"message":" Merge from ../branches/1.1.x. svn merge -c 657162 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666921 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"865e086942f35c6091e8a2fdd3a368307925c383","url":"https://api.github.com/repos/apache/openjpa/git/trees/865e086942f35c6091e8a2fdd3a368307925c383"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90332224f77bea9341d080d76e7d06b31471697f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90332224f77bea9341d080d76e7d06b31471697f","html_url":"https://github.com/apache/openjpa/commit/90332224f77bea9341d080d76e7d06b31471697f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90332224f77bea9341d080d76e7d06b31471697f/comments","author":null,"committer":null,"parents":[{"sha":"06ab9692d54c04d83f7da4e940bed16be3c70783","url":"https://api.github.com/repos/apache/openjpa/commits/06ab9692d54c04d83f7da4e940bed16be3c70783","html_url":"https://github.com/apache/openjpa/commit/06ab9692d54c04d83f7da4e940bed16be3c70783"}]},{"sha":"ef098b3acdd46d28f91b162fdcfa027a9983866a","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmMDk4YjNhY2RkNDZkMjhmOTFiMTYyZmRjZmEwMjdhOTk4Mzg2NmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-12T00:01:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-12T00:01:46Z"},"message":"Merged part of r657897 from 1.1.x, excluding the pom changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666922 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8d1e96fcde9c5c0f0beb929faedfadce5d9dd49e","url":"https://api.github.com/repos/apache/openjpa/git/trees/8d1e96fcde9c5c0f0beb929faedfadce5d9dd49e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef098b3acdd46d28f91b162fdcfa027a9983866a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef098b3acdd46d28f91b162fdcfa027a9983866a","html_url":"https://github.com/apache/openjpa/commit/ef098b3acdd46d28f91b162fdcfa027a9983866a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef098b3acdd46d28f91b162fdcfa027a9983866a/comments","author":null,"committer":null,"parents":[{"sha":"90332224f77bea9341d080d76e7d06b31471697f","url":"https://api.github.com/repos/apache/openjpa/commits/90332224f77bea9341d080d76e7d06b31471697f","html_url":"https://github.com/apache/openjpa/commit/90332224f77bea9341d080d76e7d06b31471697f"}]},{"sha":"b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec","node_id":"MDY6Q29tbWl0MjA2MzY0OmIzYzdlODI5MGM2MWNmYzNjYTcyYTQ5NDdmMGVhMjhkNWRkMTc0ZWM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-12T00:02:34Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-12T00:02:34Z"},"message":" Merge from ../branches/1.1.x. svn merge -c 661090 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666923 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a6f0ef797a8539d2bad4e62c70a005266290314","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a6f0ef797a8539d2bad4e62c70a005266290314"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec","html_url":"https://github.com/apache/openjpa/commit/b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec/comments","author":null,"committer":null,"parents":[{"sha":"ef098b3acdd46d28f91b162fdcfa027a9983866a","url":"https://api.github.com/repos/apache/openjpa/commits/ef098b3acdd46d28f91b162fdcfa027a9983866a","html_url":"https://github.com/apache/openjpa/commit/ef098b3acdd46d28f91b162fdcfa027a9983866a"}]},{"sha":"0c346ba7ce5cb061ee8207193bc813140a39cc11","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjMzQ2YmE3Y2U1Y2IwNjFlZTgyMDcxOTNiYzgxMzE0MGEzOWNjMTE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-12T15:08:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-12T15:08:24Z"},"message":"OPENJPA-633. Updating deploy locations to use your home directory on people.apache.org.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@667126 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea13baef2a52c90063ccaf24e8fbbd9f6a1fada0","url":"https://api.github.com/repos/apache/openjpa/git/trees/ea13baef2a52c90063ccaf24e8fbbd9f6a1fada0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c346ba7ce5cb061ee8207193bc813140a39cc11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c346ba7ce5cb061ee8207193bc813140a39cc11","html_url":"https://github.com/apache/openjpa/commit/0c346ba7ce5cb061ee8207193bc813140a39cc11","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c346ba7ce5cb061ee8207193bc813140a39cc11/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec","url":"https://api.github.com/repos/apache/openjpa/commits/b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec","html_url":"https://github.com/apache/openjpa/commit/b3c7e8290c61cfc3ca72a4947f0ea28d5dd174ec"}]},{"sha":"514a4bb907c5e6bbab34a758008240347ef11830","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxNGE0YmI5MDdjNWU2YmJhYjM0YTc1ODAwODI0MDM0N2VmMTE4MzA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-13T00:23:56Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-13T00:23:56Z"},"message":"OPENJPA-634 Batched updates resulted in SQLException was not propagated back to users application\nfix OutOfMemoryException\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@667302 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d34e6613c29725f0fb9435014ccdfb84fbe9ad12","url":"https://api.github.com/repos/apache/openjpa/git/trees/d34e6613c29725f0fb9435014ccdfb84fbe9ad12"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/514a4bb907c5e6bbab34a758008240347ef11830","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/514a4bb907c5e6bbab34a758008240347ef11830","html_url":"https://github.com/apache/openjpa/commit/514a4bb907c5e6bbab34a758008240347ef11830","comments_url":"https://api.github.com/repos/apache/openjpa/commits/514a4bb907c5e6bbab34a758008240347ef11830/comments","author":null,"committer":null,"parents":[{"sha":"0c346ba7ce5cb061ee8207193bc813140a39cc11","url":"https://api.github.com/repos/apache/openjpa/commits/0c346ba7ce5cb061ee8207193bc813140a39cc11","html_url":"https://github.com/apache/openjpa/commit/0c346ba7ce5cb061ee8207193bc813140a39cc11"}]},{"sha":"71519b08080107dae13867c760f224a2cde54b5b","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxNTE5YjA4MDgwMTA3ZGFlMTM4NjdjNzYwZjIyNGEyY2RlNTRiNWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T01:58:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T01:58:49Z"},"message":"OPENJPA-610: Restored refresh() behavior for clean/new instances.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@667312 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9727ede5a4aeedcda0a9f7220ff1a3611092bb1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/9727ede5a4aeedcda0a9f7220ff1a3611092bb1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71519b08080107dae13867c760f224a2cde54b5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71519b08080107dae13867c760f224a2cde54b5b","html_url":"https://github.com/apache/openjpa/commit/71519b08080107dae13867c760f224a2cde54b5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71519b08080107dae13867c760f224a2cde54b5b/comments","author":null,"committer":null,"parents":[{"sha":"514a4bb907c5e6bbab34a758008240347ef11830","url":"https://api.github.com/repos/apache/openjpa/commits/514a4bb907c5e6bbab34a758008240347ef11830","html_url":"https://github.com/apache/openjpa/commit/514a4bb907c5e6bbab34a758008240347ef11830"}]},{"sha":"7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhYzgzMjFmMjdlY2VhNzlkZWQ1Y2ZhOGE3ZTIwYzY2NTZjMmU5MGQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T20:46:40Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T20:46:40Z"},"message":"OPENJPA-209,OPENJPA-210: Test for projection query with duplicate result\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@667647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"223b503ed05cb0f1adcac5e5f44cc4737966fe0a","url":"https://api.github.com/repos/apache/openjpa/git/trees/223b503ed05cb0f1adcac5e5f44cc4737966fe0a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","html_url":"https://github.com/apache/openjpa/commit/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/comments","author":null,"committer":null,"parents":[{"sha":"71519b08080107dae13867c760f224a2cde54b5b","url":"https://api.github.com/repos/apache/openjpa/commits/71519b08080107dae13867c760f224a2cde54b5b","html_url":"https://github.com/apache/openjpa/commit/71519b08080107dae13867c760f224a2cde54b5b"}]},{"sha":"e00c6e8f80434fd07b1dd438780cb3d964303392","node_id":"MDY6Q29tbWl0MjA2MzY0OmUwMGM2ZThmODA0MzRmZDA3YjFkZDQzODc4MGNiM2Q5NjQzMDMzOTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-16T19:29:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-16T19:29:24Z"},"message":"OPENJPA-625: remove Embedded collection members throws exception in PCData\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@668268 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb0d5b7457af41ae8c14ce61a3b31992bfa21ea8","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb0d5b7457af41ae8c14ce61a3b31992bfa21ea8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e00c6e8f80434fd07b1dd438780cb3d964303392","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e00c6e8f80434fd07b1dd438780cb3d964303392","html_url":"https://github.com/apache/openjpa/commit/e00c6e8f80434fd07b1dd438780cb3d964303392","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e00c6e8f80434fd07b1dd438780cb3d964303392/comments","author":null,"committer":null,"parents":[{"sha":"7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","url":"https://api.github.com/repos/apache/openjpa/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","html_url":"https://github.com/apache/openjpa/commit/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d"}]},{"sha":"a8e0dc180e8b360c4e72eca7c131b2826eceaedd","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4ZTBkYzE4MGU4YjM2MGM0ZTcyZWNhN2MxMzFiMjgyNmVjZWFlZGQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-17T20:07:12Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-17T20:07:12Z"},"message":"OPENJPA-458: Amplified SQL Exception processing. Introduced a new sql-error-state-codes.xml to specify database specific error code for different types of Store exceptions. This helps to narrow SQL exception to a specific errors which bubble up to user application.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@668814 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59febb1a561500748aaf26f623b0e6bbb71875a2","url":"https://api.github.com/repos/apache/openjpa/git/trees/59febb1a561500748aaf26f623b0e6bbb71875a2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","html_url":"https://github.com/apache/openjpa/commit/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd/comments","author":null,"committer":null,"parents":[{"sha":"e00c6e8f80434fd07b1dd438780cb3d964303392","url":"https://api.github.com/repos/apache/openjpa/commits/e00c6e8f80434fd07b1dd438780cb3d964303392","html_url":"https://github.com/apache/openjpa/commit/e00c6e8f80434fd07b1dd438780cb3d964303392"}]},{"sha":"689d1c5385c326b9ca71ee428e75957ff719dbcf","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4OWQxYzUzODVjMzI2YjljYTcxZWU0MjhlNzU5NTdmZjcxOWRiY2Y=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-17T21:36:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-17T21:36:25Z"},"message":"OPENJPA-633 updating rat plugin to alpha-3 and adding exceptions to release profile\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@668838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75d5753e8c3406abe75d902f8e8355531eca3c6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/75d5753e8c3406abe75d902f8e8355531eca3c6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/689d1c5385c326b9ca71ee428e75957ff719dbcf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/689d1c5385c326b9ca71ee428e75957ff719dbcf","html_url":"https://github.com/apache/openjpa/commit/689d1c5385c326b9ca71ee428e75957ff719dbcf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/689d1c5385c326b9ca71ee428e75957ff719dbcf/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a8e0dc180e8b360c4e72eca7c131b2826eceaedd","url":"https://api.github.com/repos/apache/openjpa/commits/a8e0dc180e8b360c4e72eca7c131b2826eceaedd","html_url":"https://github.com/apache/openjpa/commit/a8e0dc180e8b360c4e72eca7c131b2826eceaedd"}]},{"sha":"f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2MmVhMWFiMGQyOTIyMzc3MzY4Y2E1ZDMxYmJjYmVhNTdlY2JjM2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-18T23:25:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-18T23:25:59Z"},"message":"OPENJPA-533: Update query can set single-valued association to NULL or non-NULL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@669332 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7e6ee11401fa61e5a223472e7cd2c58b2a2a7c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7e6ee11401fa61e5a223472e7cd2c58b2a2a7c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","html_url":"https://github.com/apache/openjpa/commit/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c/comments","author":null,"committer":null,"parents":[{"sha":"689d1c5385c326b9ca71ee428e75957ff719dbcf","url":"https://api.github.com/repos/apache/openjpa/commits/689d1c5385c326b9ca71ee428e75957ff719dbcf","html_url":"https://github.com/apache/openjpa/commit/689d1c5385c326b9ca71ee428e75957ff719dbcf"}]},{"sha":"d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxYTE2NWJjNjEzZDU0YmQ5ZmY5YmFhMmNhMGZiY2E4MzA1YjcwZjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-19T00:40:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-19T00:40:17Z"},"message":"OPENJPA-112,OPENJPA-111: Early check for 1-based positional parameter and no named parameter in native query. Also more specific error message\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@669341 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"76d2074fd949bfc38a1dbe03b9a5d73abd4ef19c","url":"https://api.github.com/repos/apache/openjpa/git/trees/76d2074fd949bfc38a1dbe03b9a5d73abd4ef19c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0","html_url":"https://github.com/apache/openjpa/commit/d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0/comments","author":null,"committer":null,"parents":[{"sha":"f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","url":"https://api.github.com/repos/apache/openjpa/commits/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c","html_url":"https://github.com/apache/openjpa/commit/f62ea1ab0d2922377368ca5d31bbcbea57ecbc3c"}]},{"sha":"37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3Y2I0YWYzNWRlMjdjNzVhYzZmNWFjZmZhZWQwZjFiYTgyY2MxMmY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-19T01:41:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-19T01:41:32Z"},"message":"OPENJPA-581: Print WARN level message on JNDI lookup failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@669356 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fd00e277a863ff499ab8da40477fe29fd4e8101","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fd00e277a863ff499ab8da40477fe29fd4e8101"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","html_url":"https://github.com/apache/openjpa/commit/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f/comments","author":null,"committer":null,"parents":[{"sha":"d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0","url":"https://api.github.com/repos/apache/openjpa/commits/d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0","html_url":"https://github.com/apache/openjpa/commit/d1a165bc613d54bd9ff9baa2ca0fbca8305b70f0"}]},{"sha":"fb78813259657a71df227168478c9c0b9e5488ae","node_id":"MDY6Q29tbWl0MjA2MzY0OmZiNzg4MTMyNTk2NTdhNzFkZjIyNzE2ODQ3OGM5YzBiOWU1NDg4YWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-24T19:48:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-24T19:48:23Z"},"message":"OPENJPA-545 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@671319 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d18425429ddb1795586af088ff760f670864115","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d18425429ddb1795586af088ff760f670864115"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fb78813259657a71df227168478c9c0b9e5488ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fb78813259657a71df227168478c9c0b9e5488ae","html_url":"https://github.com/apache/openjpa/commit/fb78813259657a71df227168478c9c0b9e5488ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fb78813259657a71df227168478c9c0b9e5488ae/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","url":"https://api.github.com/repos/apache/openjpa/commits/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f","html_url":"https://github.com/apache/openjpa/commit/37cb4af35de27c75ac6f5acffaed0f1ba82cc12f"}]},{"sha":"976a5e1faf9df64b40ede8586c345def1454cf4e","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3NmE1ZTFmYWY5ZGY2NGI0MGVkZTg1ODZjMzQ1ZGVmMTQ1NGNmNGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-25T15:46:44Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-06-25T15:46:44Z"},"message":"OPENJPA-642 committing patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@671585 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"981905d83a6a9ef12bd47c458161af03625e5572","url":"https://api.github.com/repos/apache/openjpa/git/trees/981905d83a6a9ef12bd47c458161af03625e5572"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/976a5e1faf9df64b40ede8586c345def1454cf4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/976a5e1faf9df64b40ede8586c345def1454cf4e","html_url":"https://github.com/apache/openjpa/commit/976a5e1faf9df64b40ede8586c345def1454cf4e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/976a5e1faf9df64b40ede8586c345def1454cf4e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb78813259657a71df227168478c9c0b9e5488ae","url":"https://api.github.com/repos/apache/openjpa/commits/fb78813259657a71df227168478c9c0b9e5488ae","html_url":"https://github.com/apache/openjpa/commit/fb78813259657a71df227168478c9c0b9e5488ae"}]},{"sha":"82e61ba0d578fba28ae987cafdc29e3b211a45f7","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyZTYxYmEwZDU3OGZiYTI4YWU5ODdjYWZkYzI5ZTNiMjExYTQ1Zjc=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-06-26T19:31:20Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-06-26T19:31:20Z"},"message":"OPENJPA-637.  Reverting ConcurrentHashMap implementation per the patch provided by Jeremy Bauer.  A more complete, configurable implementation is being tracked via the related sub-task OPENJPA-643.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672003 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"099f95ac56067956f8ee0ac0daa07176d5a922a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/099f95ac56067956f8ee0ac0daa07176d5a922a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82e61ba0d578fba28ae987cafdc29e3b211a45f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82e61ba0d578fba28ae987cafdc29e3b211a45f7","html_url":"https://github.com/apache/openjpa/commit/82e61ba0d578fba28ae987cafdc29e3b211a45f7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82e61ba0d578fba28ae987cafdc29e3b211a45f7/comments","author":null,"committer":null,"parents":[{"sha":"976a5e1faf9df64b40ede8586c345def1454cf4e","url":"https://api.github.com/repos/apache/openjpa/commits/976a5e1faf9df64b40ede8586c345def1454cf4e","html_url":"https://github.com/apache/openjpa/commit/976a5e1faf9df64b40ede8586c345def1454cf4e"}]},{"sha":"e3dbdac15947253e9073840e3759603e82380188","node_id":"MDY6Q29tbWl0MjA2MzY0OmUzZGJkYWMxNTk0NzI1M2U5MDczODQwZTM3NTk2MDNlODIzODAxODg=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-26T19:38:30Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-26T19:38:30Z"},"message":"OPENJPA-644 Handle databaseProductVersion string from newer jcc driver for DB2 ISeries\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672008 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d13a477223eec9d93db00da40d443f6e6617d8bd","url":"https://api.github.com/repos/apache/openjpa/git/trees/d13a477223eec9d93db00da40d443f6e6617d8bd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e3dbdac15947253e9073840e3759603e82380188","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e3dbdac15947253e9073840e3759603e82380188","html_url":"https://github.com/apache/openjpa/commit/e3dbdac15947253e9073840e3759603e82380188","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e3dbdac15947253e9073840e3759603e82380188/comments","author":null,"committer":null,"parents":[{"sha":"82e61ba0d578fba28ae987cafdc29e3b211a45f7","url":"https://api.github.com/repos/apache/openjpa/commits/82e61ba0d578fba28ae987cafdc29e3b211a45f7","html_url":"https://github.com/apache/openjpa/commit/82e61ba0d578fba28ae987cafdc29e3b211a45f7"}]},{"sha":"2b3f7ec90c3a834917232f4cdf27d00d0f62905a","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiM2Y3ZWM5MGMzYTgzNDkxNzIzMmY0Y2RmMjdkMDBkMGY2MjkwNWE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-26T20:11:51Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-06-26T20:11:51Z"},"message":"OPENJPA-645 Date millisecond precision lost for Informix IDS and SQLServer\nCommit the patch provided by Dinkar Rao\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672017 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13a35ff8dfc8e7b4b992522f7029a8734cd16b84","url":"https://api.github.com/repos/apache/openjpa/git/trees/13a35ff8dfc8e7b4b992522f7029a8734cd16b84"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2b3f7ec90c3a834917232f4cdf27d00d0f62905a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2b3f7ec90c3a834917232f4cdf27d00d0f62905a","html_url":"https://github.com/apache/openjpa/commit/2b3f7ec90c3a834917232f4cdf27d00d0f62905a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2b3f7ec90c3a834917232f4cdf27d00d0f62905a/comments","author":null,"committer":null,"parents":[{"sha":"e3dbdac15947253e9073840e3759603e82380188","url":"https://api.github.com/repos/apache/openjpa/commits/e3dbdac15947253e9073840e3759603e82380188","html_url":"https://github.com/apache/openjpa/commit/e3dbdac15947253e9073840e3759603e82380188"}]},{"sha":"ff4a96e707337123c3e94ba641b504101dd05c79","node_id":"MDY6Q29tbWl0MjA2MzY0OmZmNGE5NmU3MDczMzcxMjNjM2U5NGJhNjQxYjUwNDEwMWRkMDVjNzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-26T22:04:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-26T22:04:06Z"},"message":"OPENJPA-340: Support for @UniqueConstraints on @TableGenerator, @SecondaryTable and @JoinTable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afcd44ad0ef11986c1b5eb8f1c6ca949c4100db7","url":"https://api.github.com/repos/apache/openjpa/git/trees/afcd44ad0ef11986c1b5eb8f1c6ca949c4100db7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ff4a96e707337123c3e94ba641b504101dd05c79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ff4a96e707337123c3e94ba641b504101dd05c79","html_url":"https://github.com/apache/openjpa/commit/ff4a96e707337123c3e94ba641b504101dd05c79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ff4a96e707337123c3e94ba641b504101dd05c79/comments","author":null,"committer":null,"parents":[{"sha":"2b3f7ec90c3a834917232f4cdf27d00d0f62905a","url":"https://api.github.com/repos/apache/openjpa/commits/2b3f7ec90c3a834917232f4cdf27d00d0f62905a","html_url":"https://github.com/apache/openjpa/commit/2b3f7ec90c3a834917232f4cdf27d00d0f62905a"}]},{"sha":"6868b1cc4a104a7224510ad5be5869372ffbe80c","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4NjhiMWNjNGExMDRhNzIyNDUxMGFkNWJlNTg2OTM3MmZmYmU4MGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-27T22:02:34Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-27T22:02:34Z"},"message":"OPENJPA-340: UniqueConstraint supported via XML Descriptors\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672406 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c65aebe3eeee2924de2dae5ceace7c7291ccc5dc","url":"https://api.github.com/repos/apache/openjpa/git/trees/c65aebe3eeee2924de2dae5ceace7c7291ccc5dc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c","html_url":"https://github.com/apache/openjpa/commit/6868b1cc4a104a7224510ad5be5869372ffbe80c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c/comments","author":null,"committer":null,"parents":[{"sha":"ff4a96e707337123c3e94ba641b504101dd05c79","url":"https://api.github.com/repos/apache/openjpa/commits/ff4a96e707337123c3e94ba641b504101dd05c79","html_url":"https://github.com/apache/openjpa/commit/ff4a96e707337123c3e94ba641b504101dd05c79"}]},{"sha":"d52998d0744c99c87110ae2657740eb20055b352","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1Mjk5OGQwNzQ0Yzk5Yzg3MTEwYWUyNjU3NzQwZWIyMDA1NWIzNTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-27T22:54:51Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-27T22:54:51Z"},"message":"OPENJPA-340: Formatting to 80 lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672416 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c31ce4c9fd63b15bee86a156eb20ec29fc06954","url":"https://api.github.com/repos/apache/openjpa/git/trees/3c31ce4c9fd63b15bee86a156eb20ec29fc06954"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d52998d0744c99c87110ae2657740eb20055b352","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d52998d0744c99c87110ae2657740eb20055b352","html_url":"https://github.com/apache/openjpa/commit/d52998d0744c99c87110ae2657740eb20055b352","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d52998d0744c99c87110ae2657740eb20055b352/comments","author":null,"committer":null,"parents":[{"sha":"6868b1cc4a104a7224510ad5be5869372ffbe80c","url":"https://api.github.com/repos/apache/openjpa/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c","html_url":"https://github.com/apache/openjpa/commit/6868b1cc4a104a7224510ad5be5869372ffbe80c"}]},{"sha":"54d1a24320ffae8bada3281bf28d28490de284c3","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0ZDFhMjQzMjBmZmFlOGJhZGEzMjgxYmYyOGQyODQ5MGRlMjg0YzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-01T00:02:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-01T00:02:11Z"},"message":"OPENJPA-340: Unique names are unique.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672960 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"981307a3e2facbff6f2d1227d8c7ef7e3f253667","url":"https://api.github.com/repos/apache/openjpa/git/trees/981307a3e2facbff6f2d1227d8c7ef7e3f253667"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/54d1a24320ffae8bada3281bf28d28490de284c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/54d1a24320ffae8bada3281bf28d28490de284c3","html_url":"https://github.com/apache/openjpa/commit/54d1a24320ffae8bada3281bf28d28490de284c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/54d1a24320ffae8bada3281bf28d28490de284c3/comments","author":null,"committer":null,"parents":[{"sha":"d52998d0744c99c87110ae2657740eb20055b352","url":"https://api.github.com/repos/apache/openjpa/commits/d52998d0744c99c87110ae2657740eb20055b352","html_url":"https://github.com/apache/openjpa/commit/d52998d0744c99c87110ae2657740eb20055b352"}]},{"sha":"bae08e93e4f310b5b6499c3ea4adc4f890761fc2","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhZTA4ZTkzZTRmMzEwYjViNjQ5OWMzZWE0YWRjNGY4OTA3NjFmYzI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-01T19:39:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-01T19:39:01Z"},"message":"Fix line length\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673188 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89234f84feada540f36174a4f7a130cba25bade0","url":"https://api.github.com/repos/apache/openjpa/git/trees/89234f84feada540f36174a4f7a130cba25bade0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bae08e93e4f310b5b6499c3ea4adc4f890761fc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bae08e93e4f310b5b6499c3ea4adc4f890761fc2","html_url":"https://github.com/apache/openjpa/commit/bae08e93e4f310b5b6499c3ea4adc4f890761fc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bae08e93e4f310b5b6499c3ea4adc4f890761fc2/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"54d1a24320ffae8bada3281bf28d28490de284c3","url":"https://api.github.com/repos/apache/openjpa/commits/54d1a24320ffae8bada3281bf28d28490de284c3","html_url":"https://github.com/apache/openjpa/commit/54d1a24320ffae8bada3281bf28d28490de284c3"}]},{"sha":"1aa44030d62809dd419f94f4d48dc353ee135952","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhYTQ0MDMwZDYyODA5ZGQ0MTlmOTRmNGQ0OGRjMzUzZWUxMzU5NTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-01T20:32:48Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-01T20:32:48Z"},"message":"OPENJPA-634 - Use only the exception collection in the prepared statement to collect batch flush exceptions. This will preserve the order of exceptions thrown by underlying batch operations during the update manager flush processing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673197 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8f9569caf9a89c76b9f1a60c3bd1e65b8afd81c","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8f9569caf9a89c76b9f1a60c3bd1e65b8afd81c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1aa44030d62809dd419f94f4d48dc353ee135952","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1aa44030d62809dd419f94f4d48dc353ee135952","html_url":"https://github.com/apache/openjpa/commit/1aa44030d62809dd419f94f4d48dc353ee135952","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1aa44030d62809dd419f94f4d48dc353ee135952/comments","author":null,"committer":null,"parents":[{"sha":"bae08e93e4f310b5b6499c3ea4adc4f890761fc2","url":"https://api.github.com/repos/apache/openjpa/commits/bae08e93e4f310b5b6499c3ea4adc4f890761fc2","html_url":"https://github.com/apache/openjpa/commit/bae08e93e4f310b5b6499c3ea4adc4f890761fc2"}]},{"sha":"de790be2adcdb631bc486f806ab42bef4e694ee0","node_id":"MDY6Q29tbWl0MjA2MzY0OmRlNzkwYmUyYWRjZGI2MzFiYzQ4NmY4MDZhYjQyYmVmNGU2OTRlZTA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-02T01:32:33Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-02T01:32:33Z"},"message":"OPENJPA-235 SQL reordering to avoid non-nullable foreign key constraint violations\nFix problem in deletion for foreign key on delete cascade.\nCommit openjpa-235-delete-cascade.patch provided by Fay Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673258 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e5705d3d70f2bceed2f7eed04548e998ff15c58","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e5705d3d70f2bceed2f7eed04548e998ff15c58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/de790be2adcdb631bc486f806ab42bef4e694ee0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/de790be2adcdb631bc486f806ab42bef4e694ee0","html_url":"https://github.com/apache/openjpa/commit/de790be2adcdb631bc486f806ab42bef4e694ee0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/de790be2adcdb631bc486f806ab42bef4e694ee0/comments","author":null,"committer":null,"parents":[{"sha":"1aa44030d62809dd419f94f4d48dc353ee135952","url":"https://api.github.com/repos/apache/openjpa/commits/1aa44030d62809dd419f94f4d48dc353ee135952","html_url":"https://github.com/apache/openjpa/commit/1aa44030d62809dd419f94f4d48dc353ee135952"}]},{"sha":"25a69ffe0a49d07e3db2533856737c7613d6d58c","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1YTY5ZmZlMGE0OWQwN2UzZGIyNTMzODU2NzM3Yzc2MTNkNmQ1OGM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-02T03:51:05Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-02T03:51:05Z"},"message":"OPENJPA-648 Table generator uses incorrect schema name\ncommit OPENJPA-648_1.2.0.patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673267 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"957a32c4c49c54fe63037e6d1cfc68f8cc5594c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/957a32c4c49c54fe63037e6d1cfc68f8cc5594c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/25a69ffe0a49d07e3db2533856737c7613d6d58c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/25a69ffe0a49d07e3db2533856737c7613d6d58c","html_url":"https://github.com/apache/openjpa/commit/25a69ffe0a49d07e3db2533856737c7613d6d58c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/25a69ffe0a49d07e3db2533856737c7613d6d58c/comments","author":null,"committer":null,"parents":[{"sha":"de790be2adcdb631bc486f806ab42bef4e694ee0","url":"https://api.github.com/repos/apache/openjpa/commits/de790be2adcdb631bc486f806ab42bef4e694ee0","html_url":"https://github.com/apache/openjpa/commit/de790be2adcdb631bc486f806ab42bef4e694ee0"}]},{"sha":"1ad09239b378a4c495a8a35cd61cda8b807b22d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhZDA5MjM5YjM3OGE0YzQ5NWE4YTM1Y2Q2MWNkYThiODA3YjIyZDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T19:50:37Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T19:50:37Z"},"message":"OPENJPA-647: ClassMetaData listens to value updates of dynamic property\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0e94b94dd4de09d92492f01e0940ef68d3f31c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0e94b94dd4de09d92492f01e0940ef68d3f31c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0","html_url":"https://github.com/apache/openjpa/commit/1ad09239b378a4c495a8a35cd61cda8b807b22d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0/comments","author":null,"committer":null,"parents":[{"sha":"25a69ffe0a49d07e3db2533856737c7613d6d58c","url":"https://api.github.com/repos/apache/openjpa/commits/25a69ffe0a49d07e3db2533856737c7613d6d58c","html_url":"https://github.com/apache/openjpa/commit/25a69ffe0a49d07e3db2533856737c7613d6d58c"}]},{"sha":"50aaa9764abc4c606488b1c0493403a351b6a26a","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwYWFhOTc2NGFiYzRjNjA2NDg4YjFjMDQ5MzQwM2EzNTFiNmEyNmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T20:00:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T20:00:49Z"},"message":"OPENJPA-647: Simple edit for 80-column format rule\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673479 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"91b203205aae918afc818e77fe5e7841ef410043","url":"https://api.github.com/repos/apache/openjpa/git/trees/91b203205aae918afc818e77fe5e7841ef410043"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/50aaa9764abc4c606488b1c0493403a351b6a26a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/50aaa9764abc4c606488b1c0493403a351b6a26a","html_url":"https://github.com/apache/openjpa/commit/50aaa9764abc4c606488b1c0493403a351b6a26a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/50aaa9764abc4c606488b1c0493403a351b6a26a/comments","author":null,"committer":null,"parents":[{"sha":"1ad09239b378a4c495a8a35cd61cda8b807b22d0","url":"https://api.github.com/repos/apache/openjpa/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0","html_url":"https://github.com/apache/openjpa/commit/1ad09239b378a4c495a8a35cd61cda8b807b22d0"}]},{"sha":"13e48971736a7727f65293895c175ef992c30d1e","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzZTQ4OTcxNzM2YTc3MjdmNjUyOTM4OTVjMTc1ZWY5OTJjMzBkMWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T20:26:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T20:26:48Z"},"message":"OPENJPA-647: Change cardinality of listeners for Value update so that ClassMetaData (and others) can sync with dynamic configuration changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673484 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"465052863e75e9dbc1e80ece643b1b90ef23bdf0","url":"https://api.github.com/repos/apache/openjpa/git/trees/465052863e75e9dbc1e80ece643b1b90ef23bdf0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13e48971736a7727f65293895c175ef992c30d1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13e48971736a7727f65293895c175ef992c30d1e","html_url":"https://github.com/apache/openjpa/commit/13e48971736a7727f65293895c175ef992c30d1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13e48971736a7727f65293895c175ef992c30d1e/comments","author":null,"committer":null,"parents":[{"sha":"50aaa9764abc4c606488b1c0493403a351b6a26a","url":"https://api.github.com/repos/apache/openjpa/commits/50aaa9764abc4c606488b1c0493403a351b6a26a","html_url":"https://github.com/apache/openjpa/commit/50aaa9764abc4c606488b1c0493403a351b6a26a"}]},{"sha":"2a588d6a2bcf8982dcc98aa0a8388740bfea8352","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhNTg4ZDZhMmJjZjg5ODJkY2M5OGFhMGE4Mzg4NzQwYmZlYTgzNTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-03T22:41:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-03T22:41:07Z"},"message":"OPENJPA-652: Formatting to be published base TestCases\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673855 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4476ac478d30010c0a9518f659b33a12915b9079","url":"https://api.github.com/repos/apache/openjpa/git/trees/4476ac478d30010c0a9518f659b33a12915b9079"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","html_url":"https://github.com/apache/openjpa/commit/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352/comments","author":null,"committer":null,"parents":[{"sha":"13e48971736a7727f65293895c175ef992c30d1e","url":"https://api.github.com/repos/apache/openjpa/commits/13e48971736a7727f65293895c175ef992c30d1e","html_url":"https://github.com/apache/openjpa/commit/13e48971736a7727f65293895c175ef992c30d1e"}]},{"sha":"c7a906314641bc2a3f7d997422028686938c1d55","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3YTkwNjMxNDY0MWJjMmEzZjdkOTk3NDIyMDI4Njg2OTM4YzFkNTU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-07T19:41:32Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-07T19:41:32Z"},"message":"OPENJPA-653 - Commit for Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@674609 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ac3d2eccd4c0b82003c239b4e12485d901884ef","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ac3d2eccd4c0b82003c239b4e12485d901884ef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c7a906314641bc2a3f7d997422028686938c1d55","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c7a906314641bc2a3f7d997422028686938c1d55","html_url":"https://github.com/apache/openjpa/commit/c7a906314641bc2a3f7d997422028686938c1d55","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c7a906314641bc2a3f7d997422028686938c1d55/comments","author":null,"committer":null,"parents":[{"sha":"2a588d6a2bcf8982dcc98aa0a8388740bfea8352","url":"https://api.github.com/repos/apache/openjpa/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","html_url":"https://github.com/apache/openjpa/commit/2a588d6a2bcf8982dcc98aa0a8388740bfea8352"}]},{"sha":"89e7531398352ba214faa845098ba773562bdc70","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5ZTc1MzEzOTgzNTJiYTIxNGZhYTg0NTA5OGJhNzczNTYyYmRjNzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T00:16:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T00:16:25Z"},"message":"Initialize Database Prodcut/Vendor name to empty string to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675387 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5263ad3f2776fe7e2b5c860033468684e36c6d53","url":"https://api.github.com/repos/apache/openjpa/git/trees/5263ad3f2776fe7e2b5c860033468684e36c6d53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89e7531398352ba214faa845098ba773562bdc70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89e7531398352ba214faa845098ba773562bdc70","html_url":"https://github.com/apache/openjpa/commit/89e7531398352ba214faa845098ba773562bdc70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89e7531398352ba214faa845098ba773562bdc70/comments","author":null,"committer":null,"parents":[{"sha":"c7a906314641bc2a3f7d997422028686938c1d55","url":"https://api.github.com/repos/apache/openjpa/commits/c7a906314641bc2a3f7d997422028686938c1d55","html_url":"https://github.com/apache/openjpa/commit/c7a906314641bc2a3f7d997422028686938c1d55"}]},{"sha":"07919b9becd533a113949dce397a2d6ba1879f69","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3OTE5YjliZWNkNTMzYTExMzk0OWRjZTM5N2EyZDZiYTE4NzlmNjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T23:56:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T23:56:07Z"},"message":"OPENJPA-657 Removing DOM 3 level methods in parsing XML\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"176933a4d8bb43144648ecece9c4a2f66758573c","url":"https://api.github.com/repos/apache/openjpa/git/trees/176933a4d8bb43144648ecece9c4a2f66758573c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07919b9becd533a113949dce397a2d6ba1879f69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07919b9becd533a113949dce397a2d6ba1879f69","html_url":"https://github.com/apache/openjpa/commit/07919b9becd533a113949dce397a2d6ba1879f69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07919b9becd533a113949dce397a2d6ba1879f69/comments","author":null,"committer":null,"parents":[{"sha":"89e7531398352ba214faa845098ba773562bdc70","url":"https://api.github.com/repos/apache/openjpa/commits/89e7531398352ba214faa845098ba773562bdc70","html_url":"https://github.com/apache/openjpa/commit/89e7531398352ba214faa845098ba773562bdc70"}]},{"sha":"cc85528f693f18b625aa6bfc94c19583028e4582","node_id":"MDY6Q29tbWl0MjA2MzY0OmNjODU1MjhmNjkzZjE4YjYyNWFhNmJmYzk0YzE5NTgzMDI4ZTQ1ODI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T13:48:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T13:48:50Z"},"message":"OPENJPA-656 : raise informational error on initial connection failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675952 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c52c3475e05fb6f903d32170abee388b3555978a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c52c3475e05fb6f903d32170abee388b3555978a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cc85528f693f18b625aa6bfc94c19583028e4582","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cc85528f693f18b625aa6bfc94c19583028e4582","html_url":"https://github.com/apache/openjpa/commit/cc85528f693f18b625aa6bfc94c19583028e4582","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cc85528f693f18b625aa6bfc94c19583028e4582/comments","author":null,"committer":null,"parents":[{"sha":"07919b9becd533a113949dce397a2d6ba1879f69","url":"https://api.github.com/repos/apache/openjpa/commits/07919b9becd533a113949dce397a2d6ba1879f69","html_url":"https://github.com/apache/openjpa/commit/07919b9becd533a113949dce397a2d6ba1879f69"}]},{"sha":"026c96d5138612108237ed46c9b015006ecdf5ce","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNmM5NmQ1MTM4NjEyMTA4MjM3ZWQ0NmM5YjAxNTAwNmVjZGY1Y2U=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T20:28:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T20:28:49Z"},"message":"OPENJPA-656: raise error messages with connection parameters on connect failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71b84359dc32324ac2e92f64e8facf1a0baef3a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/71b84359dc32324ac2e92f64e8facf1a0baef3a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/026c96d5138612108237ed46c9b015006ecdf5ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/026c96d5138612108237ed46c9b015006ecdf5ce","html_url":"https://github.com/apache/openjpa/commit/026c96d5138612108237ed46c9b015006ecdf5ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/026c96d5138612108237ed46c9b015006ecdf5ce/comments","author":null,"committer":null,"parents":[{"sha":"cc85528f693f18b625aa6bfc94c19583028e4582","url":"https://api.github.com/repos/apache/openjpa/commits/cc85528f693f18b625aa6bfc94c19583028e4582","html_url":"https://github.com/apache/openjpa/commit/cc85528f693f18b625aa6bfc94c19583028e4582"}]},{"sha":"85b0b0b45b143f28ba4422107708f77aa710b160","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1YjBiMGI0NWIxNDNmMjhiYTQ0MjIxMDc3MDhmNzdhYTcxMGIxNjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T21:14:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T21:14:42Z"},"message":"OPENJPA-656: reusing existing error message key from a different package\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676081 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f35fefdd82e354103ba22ffb77ca98633e7c124","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f35fefdd82e354103ba22ffb77ca98633e7c124"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85b0b0b45b143f28ba4422107708f77aa710b160","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85b0b0b45b143f28ba4422107708f77aa710b160","html_url":"https://github.com/apache/openjpa/commit/85b0b0b45b143f28ba4422107708f77aa710b160","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85b0b0b45b143f28ba4422107708f77aa710b160/comments","author":null,"committer":null,"parents":[{"sha":"026c96d5138612108237ed46c9b015006ecdf5ce","url":"https://api.github.com/repos/apache/openjpa/commits/026c96d5138612108237ed46c9b015006ecdf5ce","html_url":"https://github.com/apache/openjpa/commit/026c96d5138612108237ed46c9b015006ecdf5ce"}]},{"sha":"b2812a4cce25e17a52519036f3a7a66298a4d1ef","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyODEyYTRjY2UyNWUxN2E1MjUxOTAzNmYzYTdhNjYyOThhNGQxZWY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-14T03:46:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-14T03:46:44Z"},"message":"OPENJPA-51 Incorrect SQL with syntax error for JPQL subqueries\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676467 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da5063fde52c77dc25a9415ffcdf58d0da9bc744","url":"https://api.github.com/repos/apache/openjpa/git/trees/da5063fde52c77dc25a9415ffcdf58d0da9bc744"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b2812a4cce25e17a52519036f3a7a66298a4d1ef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b2812a4cce25e17a52519036f3a7a66298a4d1ef","html_url":"https://github.com/apache/openjpa/commit/b2812a4cce25e17a52519036f3a7a66298a4d1ef","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b2812a4cce25e17a52519036f3a7a66298a4d1ef/comments","author":null,"committer":null,"parents":[{"sha":"85b0b0b45b143f28ba4422107708f77aa710b160","url":"https://api.github.com/repos/apache/openjpa/commits/85b0b0b45b143f28ba4422107708f77aa710b160","html_url":"https://github.com/apache/openjpa/commit/85b0b0b45b143f28ba4422107708f77aa710b160"}]},{"sha":"436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzNmVlZmNiYmE4Y2MwZWI4ZDA5NjJiNjNhMmUwM2QzOTdmOWUxZWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T13:45:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T13:45:18Z"},"message":"@ElementJoinColumn attribute corrected\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676584 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2dfb8b133b822ce853ecf05a49681ebd7789b00a","url":"https://api.github.com/repos/apache/openjpa/git/trees/2dfb8b133b822ce853ecf05a49681ebd7789b00a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee","html_url":"https://github.com/apache/openjpa/commit/436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee/comments","author":null,"committer":null,"parents":[{"sha":"b2812a4cce25e17a52519036f3a7a66298a4d1ef","url":"https://api.github.com/repos/apache/openjpa/commits/b2812a4cce25e17a52519036f3a7a66298a4d1ef","html_url":"https://github.com/apache/openjpa/commit/b2812a4cce25e17a52519036f3a7a66298a4d1ef"}]},{"sha":"854eda8a197e09c206879aa84a64e84d9c075f72","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1NGVkYThhMTk3ZTA5YzIwNjg3OWFhODRhNjRlODRkOWMwNzVmNzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T14:33:59Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T14:33:59Z"},"message":"Skip dirty check for nontransactional, runtime-enhanced instances\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676604 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5abea31c146d2a7b287c59bcb43cb9f022bc354","url":"https://api.github.com/repos/apache/openjpa/git/trees/d5abea31c146d2a7b287c59bcb43cb9f022bc354"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/854eda8a197e09c206879aa84a64e84d9c075f72","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/854eda8a197e09c206879aa84a64e84d9c075f72","html_url":"https://github.com/apache/openjpa/commit/854eda8a197e09c206879aa84a64e84d9c075f72","comments_url":"https://api.github.com/repos/apache/openjpa/commits/854eda8a197e09c206879aa84a64e84d9c075f72/comments","author":null,"committer":null,"parents":[{"sha":"436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee","url":"https://api.github.com/repos/apache/openjpa/commits/436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee","html_url":"https://github.com/apache/openjpa/commit/436eefcbba8cc0eb8d0962b63a2e03d397f9e1ee"}]},{"sha":"94814adc3985f88f0c421af765f18abda50f2b69","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0ODE0YWRjMzk4NWY4OGYwYzQyMWFmNzY1ZjE4YWJkYTUwZjJiNjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T16:54:05Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T16:54:05Z"},"message":"Revert changes to exclude non-transactional states from dirty checking\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676642 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2dfb8b133b822ce853ecf05a49681ebd7789b00a","url":"https://api.github.com/repos/apache/openjpa/git/trees/2dfb8b133b822ce853ecf05a49681ebd7789b00a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94814adc3985f88f0c421af765f18abda50f2b69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94814adc3985f88f0c421af765f18abda50f2b69","html_url":"https://github.com/apache/openjpa/commit/94814adc3985f88f0c421af765f18abda50f2b69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94814adc3985f88f0c421af765f18abda50f2b69/comments","author":null,"committer":null,"parents":[{"sha":"854eda8a197e09c206879aa84a64e84d9c075f72","url":"https://api.github.com/repos/apache/openjpa/commits/854eda8a197e09c206879aa84a64e84d9c075f72","html_url":"https://github.com/apache/openjpa/commit/854eda8a197e09c206879aa84a64e84d9c075f72"}]},{"sha":"434319cfee6140b6eac8cc136f039de50de59b83","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzNDMxOWNmZWU2MTQwYjZlYWM4Y2MxMzZmMDM5ZGU1MGRlNTliODM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T20:46:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T20:46:18Z"},"message":"OPENJPA-659: Dirty checking fails for runtime enhanced classes. The original case reported the failure in a Spring-Tomcat-Weaver with Embdded field. But as TestSimpleUnenhancedQuery can raise the same failure in a simpler settings. The fix is related to initializing a SaveFieldManager conditional to having loaded fields at invocation of saveFields(). The fix removes the condition and ensures that a SaveFieldManager is assocaited even when saveFields() is invoked without any field loaded.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676727 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f340621b99a816c4def33e7b53b16576f4fd913","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f340621b99a816c4def33e7b53b16576f4fd913"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/434319cfee6140b6eac8cc136f039de50de59b83","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/434319cfee6140b6eac8cc136f039de50de59b83","html_url":"https://github.com/apache/openjpa/commit/434319cfee6140b6eac8cc136f039de50de59b83","comments_url":"https://api.github.com/repos/apache/openjpa/commits/434319cfee6140b6eac8cc136f039de50de59b83/comments","author":null,"committer":null,"parents":[{"sha":"94814adc3985f88f0c421af765f18abda50f2b69","url":"https://api.github.com/repos/apache/openjpa/commits/94814adc3985f88f0c421af765f18abda50f2b69","html_url":"https://github.com/apache/openjpa/commit/94814adc3985f88f0c421af765f18abda50f2b69"}]},{"sha":"89695ec253f59efcafe9aafb2d14afb6f6fc2edb","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5Njk1ZWMyNTNmNTllZmNhZmU5YWFmYjJkMTRhZmI2ZjZmYzJlZGI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-15T02:06:55Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-15T02:06:55Z"},"message":"OPENJPA-51 A  non-correlated subquery resulting SQL syntax error\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b6828b44e8d36cdc740db905c85bc4085918d49","url":"https://api.github.com/repos/apache/openjpa/git/trees/1b6828b44e8d36cdc740db905c85bc4085918d49"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89695ec253f59efcafe9aafb2d14afb6f6fc2edb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89695ec253f59efcafe9aafb2d14afb6f6fc2edb","html_url":"https://github.com/apache/openjpa/commit/89695ec253f59efcafe9aafb2d14afb6f6fc2edb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89695ec253f59efcafe9aafb2d14afb6f6fc2edb/comments","author":null,"committer":null,"parents":[{"sha":"434319cfee6140b6eac8cc136f039de50de59b83","url":"https://api.github.com/repos/apache/openjpa/commits/434319cfee6140b6eac8cc136f039de50de59b83","html_url":"https://github.com/apache/openjpa/commit/434319cfee6140b6eac8cc136f039de50de59b83"}]},{"sha":"6e3aca63ec90da0198073a1697a556dbe493cbc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlM2FjYTYzZWM5MGRhMDE5ODA3M2ExNjk3YTU1NmRiZTQ5M2NiYzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-16T03:55:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-16T03:55:45Z"},"message":"OPENJPA-349: Validate the row if auto-assigned identity happens to be only column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7871e5d0a451b0b83282d1811fefa3719ff6dc61","url":"https://api.github.com/repos/apache/openjpa/git/trees/7871e5d0a451b0b83282d1811fefa3719ff6dc61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6e3aca63ec90da0198073a1697a556dbe493cbc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6e3aca63ec90da0198073a1697a556dbe493cbc2","html_url":"https://github.com/apache/openjpa/commit/6e3aca63ec90da0198073a1697a556dbe493cbc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6e3aca63ec90da0198073a1697a556dbe493cbc2/comments","author":null,"committer":null,"parents":[{"sha":"89695ec253f59efcafe9aafb2d14afb6f6fc2edb","url":"https://api.github.com/repos/apache/openjpa/commits/89695ec253f59efcafe9aafb2d14afb6f6fc2edb","html_url":"https://github.com/apache/openjpa/commit/89695ec253f59efcafe9aafb2d14afb6f6fc2edb"}]},{"sha":"efdbbd7a92403727019425cf1441b621bcd45403","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmZGJiZDdhOTI0MDM3MjcwMTk0MjVjZjE0NDFiNjIxYmNkNDU0MDM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-16T03:59:33Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-16T03:59:33Z"},"message":"OPENJPA:365: Raise informative exception when user supplied id argument is wrong type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677147 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86ee58ac3c50827f951aa867df9c29cb058207a6","url":"https://api.github.com/repos/apache/openjpa/git/trees/86ee58ac3c50827f951aa867df9c29cb058207a6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/efdbbd7a92403727019425cf1441b621bcd45403","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/efdbbd7a92403727019425cf1441b621bcd45403","html_url":"https://github.com/apache/openjpa/commit/efdbbd7a92403727019425cf1441b621bcd45403","comments_url":"https://api.github.com/repos/apache/openjpa/commits/efdbbd7a92403727019425cf1441b621bcd45403/comments","author":null,"committer":null,"parents":[{"sha":"6e3aca63ec90da0198073a1697a556dbe493cbc2","url":"https://api.github.com/repos/apache/openjpa/commits/6e3aca63ec90da0198073a1697a556dbe493cbc2","html_url":"https://github.com/apache/openjpa/commit/6e3aca63ec90da0198073a1697a556dbe493cbc2"}]},{"sha":"fec65630fd5b0d6759b0d921e01e201ab8dd1c0b","node_id":"MDY6Q29tbWl0MjA2MzY0OmZlYzY1NjMwZmQ1YjBkNjc1OWIwZDkyMWUwMWUyMDFhYjhkZDFjMGI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-16T05:31:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-16T05:31:20Z"},"message":"OPENJPA-470: Use blockquote to highlight special classname syntax for SequenceGenerator attribute\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677161 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01bf100c093470f958628e81cc99653567765397","url":"https://api.github.com/repos/apache/openjpa/git/trees/01bf100c093470f958628e81cc99653567765397"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/fec65630fd5b0d6759b0d921e01e201ab8dd1c0b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/fec65630fd5b0d6759b0d921e01e201ab8dd1c0b","html_url":"https://github.com/apache/openjpa/commit/fec65630fd5b0d6759b0d921e01e201ab8dd1c0b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/fec65630fd5b0d6759b0d921e01e201ab8dd1c0b/comments","author":null,"committer":null,"parents":[{"sha":"efdbbd7a92403727019425cf1441b621bcd45403","url":"https://api.github.com/repos/apache/openjpa/commits/efdbbd7a92403727019425cf1441b621bcd45403","html_url":"https://github.com/apache/openjpa/commit/efdbbd7a92403727019425cf1441b621bcd45403"}]},{"sha":"948c38e3329d56fa751835dbe0f89d910f775d9f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0OGMzOGUzMzI5ZDU2ZmE3NTE4MzVkYmUwZjg5ZDkxMGY3NzVkOWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-17T00:09:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-17T00:09:55Z"},"message":"OPENJPA-633 setting consistent eol-style for pom.xml files in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7cd984a9834a0200772bb3bbae929dd68ad0588e","url":"https://api.github.com/repos/apache/openjpa/git/trees/7cd984a9834a0200772bb3bbae929dd68ad0588e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/948c38e3329d56fa751835dbe0f89d910f775d9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/948c38e3329d56fa751835dbe0f89d910f775d9f","html_url":"https://github.com/apache/openjpa/commit/948c38e3329d56fa751835dbe0f89d910f775d9f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/948c38e3329d56fa751835dbe0f89d910f775d9f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"fec65630fd5b0d6759b0d921e01e201ab8dd1c0b","url":"https://api.github.com/repos/apache/openjpa/commits/fec65630fd5b0d6759b0d921e01e201ab8dd1c0b","html_url":"https://github.com/apache/openjpa/commit/fec65630fd5b0d6759b0d921e01e201ab8dd1c0b"}]},{"sha":"c7e78fc80dc0a37f48de261b67f4ccba50338c5e","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3ZTc4ZmM4MGRjMGEzN2Y0OGRlMjYxYjY3ZjRjY2JhNTAzMzhjNWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-17T20:11:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-17T20:11:42Z"},"message":"OPENJPA-662: Allow version field values be loaded in projection query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677704 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca12826ee7a1698862f9eec24ec57239b97a5e45","url":"https://api.github.com/repos/apache/openjpa/git/trees/ca12826ee7a1698862f9eec24ec57239b97a5e45"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","html_url":"https://github.com/apache/openjpa/commit/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e/comments","author":null,"committer":null,"parents":[{"sha":"948c38e3329d56fa751835dbe0f89d910f775d9f","url":"https://api.github.com/repos/apache/openjpa/commits/948c38e3329d56fa751835dbe0f89d910f775d9f","html_url":"https://github.com/apache/openjpa/commit/948c38e3329d56fa751835dbe0f89d910f775d9f"}]},{"sha":"d58c648f8073db88c0cee62c3fb854caf4e8da65","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ1OGM2NDhmODA3M2RiODhjMGNlZTYyYzNmYjg1NGNhZjRlOGRhNjU=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-07-18T12:22:21Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-07-18T12:22:21Z"},"message":"Merged 677745 from 1.1.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677886 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c160005598349f4f980df4aca8503908b6cbdff","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c160005598349f4f980df4aca8503908b6cbdff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d58c648f8073db88c0cee62c3fb854caf4e8da65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d58c648f8073db88c0cee62c3fb854caf4e8da65","html_url":"https://github.com/apache/openjpa/commit/d58c648f8073db88c0cee62c3fb854caf4e8da65","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d58c648f8073db88c0cee62c3fb854caf4e8da65/comments","author":null,"committer":null,"parents":[{"sha":"c7e78fc80dc0a37f48de261b67f4ccba50338c5e","url":"https://api.github.com/repos/apache/openjpa/commits/c7e78fc80dc0a37f48de261b67f4ccba50338c5e","html_url":"https://github.com/apache/openjpa/commit/c7e78fc80dc0a37f48de261b67f4ccba50338c5e"}]},{"sha":"f9a27b57c51605ccb1b64a30c219c3790eb407a7","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5YTI3YjU3YzUxNjA1Y2NiMWI2NGEzMGMyMTljMzc5MGViNDA3YTc=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-07-18T13:28:57Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-07-18T13:28:57Z"},"message":"Merged from 1.1.x branch, changes and additions to DBDictionary property descriptions, revisions 675366,675368,675700,676592,677746\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@677901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"491b55dff79db00a434c32955c537c18d3090fcd","url":"https://api.github.com/repos/apache/openjpa/git/trees/491b55dff79db00a434c32955c537c18d3090fcd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f9a27b57c51605ccb1b64a30c219c3790eb407a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f9a27b57c51605ccb1b64a30c219c3790eb407a7","html_url":"https://github.com/apache/openjpa/commit/f9a27b57c51605ccb1b64a30c219c3790eb407a7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f9a27b57c51605ccb1b64a30c219c3790eb407a7/comments","author":null,"committer":null,"parents":[{"sha":"d58c648f8073db88c0cee62c3fb854caf4e8da65","url":"https://api.github.com/repos/apache/openjpa/commits/d58c648f8073db88c0cee62c3fb854caf4e8da65","html_url":"https://github.com/apache/openjpa/commit/d58c648f8073db88c0cee62c3fb854caf4e8da65"}]},{"sha":"b52e229a24eee5fa79a1c83e5b38f187ae691a54","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1MmUyMjlhMjRlZWU1ZmE3OWExYzgzZTViMzhmMTg3YWU2OTFhNTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-21T15:20:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-21T15:20:01Z"},"message":"OPENJPA-661 remove duplicate directories in assmebly.xml and remove extra readme file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678448 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0904ce5a1c94405594a491f6a22df0270e76a81e","url":"https://api.github.com/repos/apache/openjpa/git/trees/0904ce5a1c94405594a491f6a22df0270e76a81e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b52e229a24eee5fa79a1c83e5b38f187ae691a54","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b52e229a24eee5fa79a1c83e5b38f187ae691a54","html_url":"https://github.com/apache/openjpa/commit/b52e229a24eee5fa79a1c83e5b38f187ae691a54","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b52e229a24eee5fa79a1c83e5b38f187ae691a54/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f9a27b57c51605ccb1b64a30c219c3790eb407a7","url":"https://api.github.com/repos/apache/openjpa/commits/f9a27b57c51605ccb1b64a30c219c3790eb407a7","html_url":"https://github.com/apache/openjpa/commit/f9a27b57c51605ccb1b64a30c219c3790eb407a7"}]},{"sha":"ae2653996247585d74f41dc7e20e5d181a4c7835","node_id":"MDY6Q29tbWl0MjA2MzY0OmFlMjY1Mzk5NjI0NzU4NWQ3NGY0MWRjN2UyMGU1ZDE4MWE0Yzc4MzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-21T15:21:44Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-21T15:21:44Z"},"message":"OPENJPA-633 svn merge -c 677476 https://svn.apache.org/repos/asf/openjpa/branches/1.0.x. Merging docbook changes back to trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678449 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"716ff71e31cb749654a6aba096fec78106906858","url":"https://api.github.com/repos/apache/openjpa/git/trees/716ff71e31cb749654a6aba096fec78106906858"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ae2653996247585d74f41dc7e20e5d181a4c7835","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ae2653996247585d74f41dc7e20e5d181a4c7835","html_url":"https://github.com/apache/openjpa/commit/ae2653996247585d74f41dc7e20e5d181a4c7835","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ae2653996247585d74f41dc7e20e5d181a4c7835/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b52e229a24eee5fa79a1c83e5b38f187ae691a54","url":"https://api.github.com/repos/apache/openjpa/commits/b52e229a24eee5fa79a1c83e5b38f187ae691a54","html_url":"https://github.com/apache/openjpa/commit/b52e229a24eee5fa79a1c83e5b38f187ae691a54"}]},{"sha":"4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjMGJmMWJlMTBjYTUwY2Y4YTAyZmIyZTdjNThmZjUyZjg2MmNhNWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-21T17:55:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-21T17:55:17Z"},"message":"OPENJPA-207: Support multi-level derived identity. Enhancer has been modified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7869a8c7527b34cb255d9ca8bf3ffbb2213ae072","url":"https://api.github.com/repos/apache/openjpa/git/trees/7869a8c7527b34cb255d9ca8bf3ffbb2213ae072"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","html_url":"https://github.com/apache/openjpa/commit/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/comments","author":null,"committer":null,"parents":[{"sha":"ae2653996247585d74f41dc7e20e5d181a4c7835","url":"https://api.github.com/repos/apache/openjpa/commits/ae2653996247585d74f41dc7e20e5d181a4c7835","html_url":"https://github.com/apache/openjpa/commit/ae2653996247585d74f41dc7e20e5d181a4c7835"}]},{"sha":"b4c557d0c052726037f32430f038d059fc9aceaf","node_id":"MDY6Q29tbWl0MjA2MzY0OmI0YzU1N2QwYzA1MjcyNjAzN2YzMjQzMGYwMzhkMDU5ZmM5YWNlYWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-22T11:54:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-22T11:54:26Z"},"message":"OPENJPA-660: SQL Query Cache supports binding non-primary key parameters to cached SQL. Commit fix on behalf of Fay Wang. Original test case developed by Vikram Bhatia.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678722 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2dc9fd33fcae584b44cc5a3ae205f7fc7da99fa9","url":"https://api.github.com/repos/apache/openjpa/git/trees/2dc9fd33fcae584b44cc5a3ae205f7fc7da99fa9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b4c557d0c052726037f32430f038d059fc9aceaf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b4c557d0c052726037f32430f038d059fc9aceaf","html_url":"https://github.com/apache/openjpa/commit/b4c557d0c052726037f32430f038d059fc9aceaf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b4c557d0c052726037f32430f038d059fc9aceaf/comments","author":null,"committer":null,"parents":[{"sha":"4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","url":"https://api.github.com/repos/apache/openjpa/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","html_url":"https://github.com/apache/openjpa/commit/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f"}]},{"sha":"8cfa25c524d914ce02eef0df7435c8199931ff32","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjZmEyNWM1MjRkOTE0Y2UwMmVlZjBkZjc0MzVjODE5OTkzMWZmMzI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-22T17:41:30Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-22T17:41:30Z"},"message":"OPENJPA-241 Extra SQL on lazy CMR load\ncommit openjpa_241.patch on behalf of Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678828 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9578e617879b0ea745218096364a0877ea097b6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/9578e617879b0ea745218096364a0877ea097b6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8cfa25c524d914ce02eef0df7435c8199931ff32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8cfa25c524d914ce02eef0df7435c8199931ff32","html_url":"https://github.com/apache/openjpa/commit/8cfa25c524d914ce02eef0df7435c8199931ff32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8cfa25c524d914ce02eef0df7435c8199931ff32/comments","author":null,"committer":null,"parents":[{"sha":"b4c557d0c052726037f32430f038d059fc9aceaf","url":"https://api.github.com/repos/apache/openjpa/commits/b4c557d0c052726037f32430f038d059fc9aceaf","html_url":"https://github.com/apache/openjpa/commit/b4c557d0c052726037f32430f038d059fc9aceaf"}]},{"sha":"2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlZDY1NmEyYTBiZGY2YmM3MTlmYWI3ZDc4NzA5NzRmYmU4YjFmYmM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-07-22T23:54:44Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-07-22T23:54:44Z"},"message":"OPENJPA-458. Adding license header to new file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678950 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3069bfa57e44e66971a98d882b4c1c5dedc7a3ef","url":"https://api.github.com/repos/apache/openjpa/git/trees/3069bfa57e44e66971a98d882b4c1c5dedc7a3ef"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","html_url":"https://github.com/apache/openjpa/commit/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc/comments","author":null,"committer":null,"parents":[{"sha":"8cfa25c524d914ce02eef0df7435c8199931ff32","url":"https://api.github.com/repos/apache/openjpa/commits/8cfa25c524d914ce02eef0df7435c8199931ff32","html_url":"https://github.com/apache/openjpa/commit/8cfa25c524d914ce02eef0df7435c8199931ff32"}]},{"sha":"37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3ZDYxMGNhMmNjZjQ5OTQ3OWVhMGNmYjM2Y2E5MWZjYzVlMDk0NmU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-07-23T18:20:25Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-07-23T18:20:25Z"},"message":"Fix a bug in which joined classes using an application identity hierarchy\ncouldn't be loaded correctly as an inverse relation.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679152 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c1165a5d60486ff1be9f1dec11ef3544252a6be","url":"https://api.github.com/repos/apache/openjpa/git/trees/2c1165a5d60486ff1be9f1dec11ef3544252a6be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","html_url":"https://github.com/apache/openjpa/commit/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/comments","author":null,"committer":null,"parents":[{"sha":"2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","url":"https://api.github.com/repos/apache/openjpa/commits/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","html_url":"https://github.com/apache/openjpa/commit/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc"}]},{"sha":"98802147f761d93873462aa6aa0038a8926ec421","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk4ODAyMTQ3Zjc2MWQ5Mzg3MzQ2MmFhNmFhMDAzOGE4OTI2ZWM0MjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-24T01:36:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-24T01:36:44Z"},"message":"OPENJPA-241 Extra SQL on lazy CMR load\ncommit openjpa_241_1.patch on behalf of Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679261 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c16c438871375d770ac6f66dcd3f5031f18aa337","url":"https://api.github.com/repos/apache/openjpa/git/trees/c16c438871375d770ac6f66dcd3f5031f18aa337"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/98802147f761d93873462aa6aa0038a8926ec421","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/98802147f761d93873462aa6aa0038a8926ec421","html_url":"https://github.com/apache/openjpa/commit/98802147f761d93873462aa6aa0038a8926ec421","comments_url":"https://api.github.com/repos/apache/openjpa/commits/98802147f761d93873462aa6aa0038a8926ec421/comments","author":null,"committer":null,"parents":[{"sha":"37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","url":"https://api.github.com/repos/apache/openjpa/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","html_url":"https://github.com/apache/openjpa/commit/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e"}]},{"sha":"62a8c5c32fabb111044748457b86357df962f74b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyYThjNWMzMmZhYmIxMTEwNDQ3NDg0NTdiODYzNTdkZjk2MmY3NGI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-24T01:39:55Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-24T01:39:55Z"},"message":"OPENJPA-292 Extra JOIN on eager bi-directional relationship\ncommit openjpa_292_1.patch and testcase_241_292.patch on behalf of Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679262 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"067917966602d820c9fd2b0c883b979c8cbac8ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/067917966602d820c9fd2b0c883b979c8cbac8ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62a8c5c32fabb111044748457b86357df962f74b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62a8c5c32fabb111044748457b86357df962f74b","html_url":"https://github.com/apache/openjpa/commit/62a8c5c32fabb111044748457b86357df962f74b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62a8c5c32fabb111044748457b86357df962f74b/comments","author":null,"committer":null,"parents":[{"sha":"98802147f761d93873462aa6aa0038a8926ec421","url":"https://api.github.com/repos/apache/openjpa/commits/98802147f761d93873462aa6aa0038a8926ec421","html_url":"https://github.com/apache/openjpa/commit/98802147f761d93873462aa6aa0038a8926ec421"}]},{"sha":"388754a28024505a7d523f066c112537e94fa831","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4ODc1NGEyODAyNDUwNWE3ZDUyM2YwNjZjMTEyNTM3ZTk0ZmE4MzE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-07-24T15:38:40Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-07-24T15:38:40Z"},"message":"Add apache license headers.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679437 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c445a06b47153c9d37b103a597b389b03b16acb0","url":"https://api.github.com/repos/apache/openjpa/git/trees/c445a06b47153c9d37b103a597b389b03b16acb0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/388754a28024505a7d523f066c112537e94fa831","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/388754a28024505a7d523f066c112537e94fa831","html_url":"https://github.com/apache/openjpa/commit/388754a28024505a7d523f066c112537e94fa831","comments_url":"https://api.github.com/repos/apache/openjpa/commits/388754a28024505a7d523f066c112537e94fa831/comments","author":null,"committer":null,"parents":[{"sha":"62a8c5c32fabb111044748457b86357df962f74b","url":"https://api.github.com/repos/apache/openjpa/commits/62a8c5c32fabb111044748457b86357df962f74b","html_url":"https://github.com/apache/openjpa/commit/62a8c5c32fabb111044748457b86357df962f74b"}]},{"sha":"315cc2d1555925da6f62b808976792676ec2bcea","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNWNjMmQxNTU1OTI1ZGE2ZjYyYjgwODk3Njc5MjY3NmVjMmJjZWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-24T16:05:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-24T16:05:10Z"},"message":"OPENJPA-664: Check for length of schema component name during generation of SQL DDL generation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d92e053bda3afa8f7a81222c5d4deb916a367025","url":"https://api.github.com/repos/apache/openjpa/git/trees/d92e053bda3afa8f7a81222c5d4deb916a367025"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/315cc2d1555925da6f62b808976792676ec2bcea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/315cc2d1555925da6f62b808976792676ec2bcea","html_url":"https://github.com/apache/openjpa/commit/315cc2d1555925da6f62b808976792676ec2bcea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/315cc2d1555925da6f62b808976792676ec2bcea/comments","author":null,"committer":null,"parents":[{"sha":"388754a28024505a7d523f066c112537e94fa831","url":"https://api.github.com/repos/apache/openjpa/commits/388754a28024505a7d523f066c112537e94fa831","html_url":"https://github.com/apache/openjpa/commit/388754a28024505a7d523f066c112537e94fa831"}]},{"sha":"1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMTFlZTE2ZmY5ZmRiNzJjN2U1ZDEyZGQwYWZhZDZkZGRhMmJlNWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-24T18:45:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-24T18:45:44Z"},"message":"OPENJPA-665: Sets column i/o conditions accordingly when column is set as not nullable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679487 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"81931135b653398e45fa88ec72f9864e63ae72a1","url":"https://api.github.com/repos/apache/openjpa/git/trees/81931135b653398e45fa88ec72f9864e63ae72a1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","html_url":"https://github.com/apache/openjpa/commit/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/comments","author":null,"committer":null,"parents":[{"sha":"315cc2d1555925da6f62b808976792676ec2bcea","url":"https://api.github.com/repos/apache/openjpa/commits/315cc2d1555925da6f62b808976792676ec2bcea","html_url":"https://github.com/apache/openjpa/commit/315cc2d1555925da6f62b808976792676ec2bcea"}]},{"sha":"0ed72e477aede848019da088446361fc9d82dbf3","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlZDcyZTQ3N2FlZGU4NDgwMTlkYTA4ODQ0NjM2MWZjOWQ4MmRiZjM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-07-24T22:41:36Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-07-24T22:41:36Z"},"message":"moved docs, javadocs, and downloads output to openjpa-project, since it looks like trunk isn't including the top-level target/site dir anymore\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55b99fb7f024dc7346a6f6b0fc2b328d2d1139a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/55b99fb7f024dc7346a6f6b0fc2b328d2d1139a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0ed72e477aede848019da088446361fc9d82dbf3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0ed72e477aede848019da088446361fc9d82dbf3","html_url":"https://github.com/apache/openjpa/commit/0ed72e477aede848019da088446361fc9d82dbf3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0ed72e477aede848019da088446361fc9d82dbf3/comments","author":null,"committer":null,"parents":[{"sha":"1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","url":"https://api.github.com/repos/apache/openjpa/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","html_url":"https://github.com/apache/openjpa/commit/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c"}]},{"sha":"134b37a753e7d250109a61adcc04547c1611cef1","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzNGIzN2E3NTNlN2QyNTAxMDlhNjFhZGNjMDQ1NDdjMTYxMWNlZjE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-25T19:53:31Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-25T19:53:31Z"},"message":"OPENJPA-666\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679886 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"676b56b29069fb321d13b0dcf7b17fb25d9881f9","url":"https://api.github.com/repos/apache/openjpa/git/trees/676b56b29069fb321d13b0dcf7b17fb25d9881f9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/134b37a753e7d250109a61adcc04547c1611cef1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/134b37a753e7d250109a61adcc04547c1611cef1","html_url":"https://github.com/apache/openjpa/commit/134b37a753e7d250109a61adcc04547c1611cef1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/134b37a753e7d250109a61adcc04547c1611cef1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ed72e477aede848019da088446361fc9d82dbf3","url":"https://api.github.com/repos/apache/openjpa/commits/0ed72e477aede848019da088446361fc9d82dbf3","html_url":"https://github.com/apache/openjpa/commit/0ed72e477aede848019da088446361fc9d82dbf3"}]},{"sha":"997a094135bb07d9ae7f08764db4a18819eaf9b9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5N2EwOTQxMzViYjA3ZDlhZTdmMDg3NjRkYjRhMTg4MTllYWY5Yjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T16:46:02Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T16:46:02Z"},"message":"OPENJPA-667: Link configuration property to corresponding method in JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680396 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6cd3ea772588a176b9d85f04fbf640149e6be6d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/6cd3ea772588a176b9d85f04fbf640149e6be6d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/997a094135bb07d9ae7f08764db4a18819eaf9b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/997a094135bb07d9ae7f08764db4a18819eaf9b9","html_url":"https://github.com/apache/openjpa/commit/997a094135bb07d9ae7f08764db4a18819eaf9b9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/997a094135bb07d9ae7f08764db4a18819eaf9b9/comments","author":null,"committer":null,"parents":[{"sha":"134b37a753e7d250109a61adcc04547c1611cef1","url":"https://api.github.com/repos/apache/openjpa/commits/134b37a753e7d250109a61adcc04547c1611cef1","html_url":"https://github.com/apache/openjpa/commit/134b37a753e7d250109a61adcc04547c1611cef1"}]},{"sha":"2254791f9b374a141a09782c1ee06bdee567e923","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyNTQ3OTFmOWIzNzRhMTQxYTA5NzgyYzFlZTA2YmRlZTU2N2U5MjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T17:10:38Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T17:10:38Z"},"message":"OPENJPA-619: Typographical errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"17ae4b07892be9c29a64704680bd20b5f48278cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/17ae4b07892be9c29a64704680bd20b5f48278cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2254791f9b374a141a09782c1ee06bdee567e923","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2254791f9b374a141a09782c1ee06bdee567e923","html_url":"https://github.com/apache/openjpa/commit/2254791f9b374a141a09782c1ee06bdee567e923","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2254791f9b374a141a09782c1ee06bdee567e923/comments","author":null,"committer":null,"parents":[{"sha":"997a094135bb07d9ae7f08764db4a18819eaf9b9","url":"https://api.github.com/repos/apache/openjpa/commits/997a094135bb07d9ae7f08764db4a18819eaf9b9","html_url":"https://github.com/apache/openjpa/commit/997a094135bb07d9ae7f08764db4a18819eaf9b9"}]},{"sha":"72b5b4def8efa363969427f24d614d72905e648a","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyYjViNGRlZjhlZmEzNjM5Njk0MjdmMjRkNjE0ZDcyOTA1ZTY0OGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T17:29:15Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T17:29:15Z"},"message":"OPENJAP-664: Check length constraint onIndex name, not on the table on which index is created\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680413 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dee09dd331dca4ffd10022b5039d138653a78861","url":"https://api.github.com/repos/apache/openjpa/git/trees/dee09dd331dca4ffd10022b5039d138653a78861"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72b5b4def8efa363969427f24d614d72905e648a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72b5b4def8efa363969427f24d614d72905e648a","html_url":"https://github.com/apache/openjpa/commit/72b5b4def8efa363969427f24d614d72905e648a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72b5b4def8efa363969427f24d614d72905e648a/comments","author":null,"committer":null,"parents":[{"sha":"2254791f9b374a141a09782c1ee06bdee567e923","url":"https://api.github.com/repos/apache/openjpa/commits/2254791f9b374a141a09782c1ee06bdee567e923","html_url":"https://github.com/apache/openjpa/commit/2254791f9b374a141a09782c1ee06bdee567e923"}]},{"sha":"5fc632784f03b31ba961b2ee549f0f1ef5bc0d96","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmYzYzMjc4NGYwM2IzMWJhOTYxYjJlZTU0OWYwZjFlZjViYzBkOTY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T17:52:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T17:52:06Z"},"message":"OPENJPA-20: Clarify return of embedded instances as query result\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680421 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d39e9f16672337bafe7966cc7504ae17836ba15b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d39e9f16672337bafe7966cc7504ae17836ba15b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5fc632784f03b31ba961b2ee549f0f1ef5bc0d96","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5fc632784f03b31ba961b2ee549f0f1ef5bc0d96","html_url":"https://github.com/apache/openjpa/commit/5fc632784f03b31ba961b2ee549f0f1ef5bc0d96","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5fc632784f03b31ba961b2ee549f0f1ef5bc0d96/comments","author":null,"committer":null,"parents":[{"sha":"72b5b4def8efa363969427f24d614d72905e648a","url":"https://api.github.com/repos/apache/openjpa/commits/72b5b4def8efa363969427f24d614d72905e648a","html_url":"https://github.com/apache/openjpa/commit/72b5b4def8efa363969427f24d614d72905e648a"}]},{"sha":"3d81f8652f85ffc83d728c92fc2262c64c64e17c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkODFmODY1MmY4NWZmYzgzZDcyOGM5MmZjMjI2MmM2NGM2NGUxN2M=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-07-28T20:26:21Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-07-28T20:26:21Z"},"message":"OPENJPA-668.  Fixed up the orm.xml file that was used for testing so that it could pass the validation of the IBM JDK parser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680481 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4c0cda502697b2a91135e707877c1db852b64f8","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4c0cda502697b2a91135e707877c1db852b64f8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3d81f8652f85ffc83d728c92fc2262c64c64e17c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3d81f8652f85ffc83d728c92fc2262c64c64e17c","html_url":"https://github.com/apache/openjpa/commit/3d81f8652f85ffc83d728c92fc2262c64c64e17c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3d81f8652f85ffc83d728c92fc2262c64c64e17c/comments","author":null,"committer":null,"parents":[{"sha":"5fc632784f03b31ba961b2ee549f0f1ef5bc0d96","url":"https://api.github.com/repos/apache/openjpa/commits/5fc632784f03b31ba961b2ee549f0f1ef5bc0d96","html_url":"https://github.com/apache/openjpa/commit/5fc632784f03b31ba961b2ee549f0f1ef5bc0d96"}]},{"sha":"191f26d72d58b992ee7a6f82c6973681a3bdc275","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5MWYyNmQ3MmQ1OGI5OTJlZTdhNmY4MmM2OTczNjgxYTNiZGMyNzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:12:17Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:12:17Z"},"message":"OPENJPA-669 DBDictionary can specify the type of native sequences.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680501 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7072cb21c58630ac94e43cdefa4a038fd9875a1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7072cb21c58630ac94e43cdefa4a038fd9875a1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","html_url":"https://github.com/apache/openjpa/commit/191f26d72d58b992ee7a6f82c6973681a3bdc275","comments_url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d81f8652f85ffc83d728c92fc2262c64c64e17c","url":"https://api.github.com/repos/apache/openjpa/commits/3d81f8652f85ffc83d728c92fc2262c64c64e17c","html_url":"https://github.com/apache/openjpa/commit/3d81f8652f85ffc83d728c92fc2262c64c64e17c"}]},{"sha":"2374ea1c76fde593a621a8ff495b687d84ff75a1","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzNzRlYTFjNzZmZGU1OTNhNjIxYThmZjQ5NWI2ODdkODRmZjc1YTE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:19:56Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:19:56Z"},"message":"[maven-release-plugin]  copy for branch 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@680507 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"048b8a614971adeaeede9bc72736a08ed8ea93a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/048b8a614971adeaeede9bc72736a08ed8ea93a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2374ea1c76fde593a621a8ff495b687d84ff75a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2374ea1c76fde593a621a8ff495b687d84ff75a1","html_url":"https://github.com/apache/openjpa/commit/2374ea1c76fde593a621a8ff495b687d84ff75a1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2374ea1c76fde593a621a8ff495b687d84ff75a1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"191f26d72d58b992ee7a6f82c6973681a3bdc275","url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","html_url":"https://github.com/apache/openjpa/commit/191f26d72d58b992ee7a6f82c6973681a3bdc275"}]},{"sha":"bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","node_id":"MDY6Q29tbWl0MjA2MzY0OmJmMDRlNDViZmRlYmYxYTNjNzc2ODhkZDFkYTNkYzlmODE5ZTVlOWU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-30T01:18:06Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-30T01:18:06Z"},"message":"Fix typo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@680896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1847abc610904c1950184a37a19119e40305b461","url":"https://api.github.com/repos/apache/openjpa/git/trees/1847abc610904c1950184a37a19119e40305b461"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","html_url":"https://github.com/apache/openjpa/commit/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e/comments","author":null,"committer":null,"parents":[{"sha":"2374ea1c76fde593a621a8ff495b687d84ff75a1","url":"https://api.github.com/repos/apache/openjpa/commits/2374ea1c76fde593a621a8ff495b687d84ff75a1","html_url":"https://github.com/apache/openjpa/commit/2374ea1c76fde593a621a8ff495b687d84ff75a1"}]},{"sha":"12b4b769cc27b86edb92730786b642f20b591f3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyYjRiNzY5Y2MyN2I4NmVkYjkyNzMwNzg2YjY0MmYyMGI1OTFmM2M=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T02:59:45Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T02:59:45Z"},"message":"OPENJPA-187 Merging changes to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98e9630856039ad52be6374dd0a62b5ebf2aa171","url":"https://api.github.com/repos/apache/openjpa/git/trees/98e9630856039ad52be6374dd0a62b5ebf2aa171"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/12b4b769cc27b86edb92730786b642f20b591f3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/12b4b769cc27b86edb92730786b642f20b591f3c","html_url":"https://github.com/apache/openjpa/commit/12b4b769cc27b86edb92730786b642f20b591f3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/12b4b769cc27b86edb92730786b642f20b591f3c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","url":"https://api.github.com/repos/apache/openjpa/commits/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","html_url":"https://github.com/apache/openjpa/commit/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e"}]},{"sha":"23e858573d813f293b79e1f94ae3c77e4ad7fcb0","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzZTg1ODU3M2Q4MTNmMjkzYjc5ZTFmOTRhZTNjNzdlNGFkN2ZjYjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T15:35:59Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T15:35:59Z"},"message":"OPENJPA-670 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681396 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e3e25674e3740386dee62a3d8293e82c984c7be","url":"https://api.github.com/repos/apache/openjpa/git/trees/3e3e25674e3740386dee62a3d8293e82c984c7be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/23e858573d813f293b79e1f94ae3c77e4ad7fcb0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/23e858573d813f293b79e1f94ae3c77e4ad7fcb0","html_url":"https://github.com/apache/openjpa/commit/23e858573d813f293b79e1f94ae3c77e4ad7fcb0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/23e858573d813f293b79e1f94ae3c77e4ad7fcb0/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"12b4b769cc27b86edb92730786b642f20b591f3c","url":"https://api.github.com/repos/apache/openjpa/commits/12b4b769cc27b86edb92730786b642f20b591f3c","html_url":"https://github.com/apache/openjpa/commit/12b4b769cc27b86edb92730786b642f20b591f3c"}]},{"sha":"80f8bdedc309001d0fac15d489bf67b6b0767bb9","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwZjhiZGVkYzMwOTAwMWQwZmFjMTVkNDg5YmY2N2I2YjA3NjdiYjk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T19:04:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T19:04:12Z"},"message":"Updating CHANGES.txt and RELEASE-NOTES.html for 1.2.0 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"994521cf94c1fbc79b493a867bb4a4b574c41c68","url":"https://api.github.com/repos/apache/openjpa/git/trees/994521cf94c1fbc79b493a867bb4a4b574c41c68"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80f8bdedc309001d0fac15d489bf67b6b0767bb9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80f8bdedc309001d0fac15d489bf67b6b0767bb9","html_url":"https://github.com/apache/openjpa/commit/80f8bdedc309001d0fac15d489bf67b6b0767bb9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80f8bdedc309001d0fac15d489bf67b6b0767bb9/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"23e858573d813f293b79e1f94ae3c77e4ad7fcb0","url":"https://api.github.com/repos/apache/openjpa/commits/23e858573d813f293b79e1f94ae3c77e4ad7fcb0","html_url":"https://github.com/apache/openjpa/commit/23e858573d813f293b79e1f94ae3c77e4ad7fcb0"}]},{"sha":"f4a30b9911fc1a3cd0fe0b7300e87057be9f7064","node_id":"MDY6Q29tbWl0MjA2MzY0OmY0YTMwYjk5MTFmYzFhM2NkMGZlMGI3MzAwZTg3MDU3YmU5ZjcwNjQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T19:25:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T19:25:34Z"},"message":"OPENJPA-670 added missing license header to test class\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c6bafebf8f2452b9ea7751d8c84986e31281433","url":"https://api.github.com/repos/apache/openjpa/git/trees/3c6bafebf8f2452b9ea7751d8c84986e31281433"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f4a30b9911fc1a3cd0fe0b7300e87057be9f7064","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f4a30b9911fc1a3cd0fe0b7300e87057be9f7064","html_url":"https://github.com/apache/openjpa/commit/f4a30b9911fc1a3cd0fe0b7300e87057be9f7064","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f4a30b9911fc1a3cd0fe0b7300e87057be9f7064/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"80f8bdedc309001d0fac15d489bf67b6b0767bb9","url":"https://api.github.com/repos/apache/openjpa/commits/80f8bdedc309001d0fac15d489bf67b6b0767bb9","html_url":"https://github.com/apache/openjpa/commit/80f8bdedc309001d0fac15d489bf67b6b0767bb9"}]},{"sha":"6207aab9218660456ac3cb58c09a76767bf7099b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyMDdhYWI5MjE4NjYwNDU2YWMzY2I1OGMwOWE3Njc2N2JmNzA5OWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T20:21:11Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T20:21:11Z"},"message":"OPENJPA-20 fix typo in manual\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ff521392e62cef7d356b8193de55a613ee533a8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/ff521392e62cef7d356b8193de55a613ee533a8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6207aab9218660456ac3cb58c09a76767bf7099b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6207aab9218660456ac3cb58c09a76767bf7099b","html_url":"https://github.com/apache/openjpa/commit/6207aab9218660456ac3cb58c09a76767bf7099b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6207aab9218660456ac3cb58c09a76767bf7099b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f4a30b9911fc1a3cd0fe0b7300e87057be9f7064","url":"https://api.github.com/repos/apache/openjpa/commits/f4a30b9911fc1a3cd0fe0b7300e87057be9f7064","html_url":"https://github.com/apache/openjpa/commit/f4a30b9911fc1a3cd0fe0b7300e87057be9f7064"}]},{"sha":"33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzZmEwOWJjNDJjNGQ5ZTQxMWVhZWVhZmQ1NGNjZTRlMzJiMDRkZWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T21:11:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T21:11:23Z"},"message":"Updating changes and release notes for 1.2.0 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681498 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"583904425890d1112ccb31f88b33dafc6e877c5e","url":"https://api.github.com/repos/apache/openjpa/git/trees/583904425890d1112ccb31f88b33dafc6e877c5e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","html_url":"https://github.com/apache/openjpa/commit/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","comments_url":"https://api.github.com/repos/apache/openjpa/commits/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6207aab9218660456ac3cb58c09a76767bf7099b","url":"https://api.github.com/repos/apache/openjpa/commits/6207aab9218660456ac3cb58c09a76767bf7099b","html_url":"https://github.com/apache/openjpa/commit/6207aab9218660456ac3cb58c09a76767bf7099b"}]},{"sha":"9ac55e28f76740e986a383040f614482a83651e4","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhYzU1ZTI4Zjc2NzQwZTk4NmEzODMwNDBmNjE0NDgyYTgzNjUxZTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T22:40:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T22:40:55Z"},"message":"[maven-release-plugin] prepare release 1.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681527 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a56a15f3293febb1dffe18be6bf30d1257b3620","url":"https://api.github.com/repos/apache/openjpa/git/trees/4a56a15f3293febb1dffe18be6bf30d1257b3620"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ac55e28f76740e986a383040f614482a83651e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ac55e28f76740e986a383040f614482a83651e4","html_url":"https://github.com/apache/openjpa/commit/9ac55e28f76740e986a383040f614482a83651e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ac55e28f76740e986a383040f614482a83651e4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","url":"https://api.github.com/repos/apache/openjpa/commits/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","html_url":"https://github.com/apache/openjpa/commit/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded"}]},{"sha":"d157a1429985e19fa5e096a651511a6845521366","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxNTdhMTQyOTk4NWUxOWZhNWUwOTZhNjUxNTExYTY4NDU1MjEzNjY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T22:41:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T22:41:01Z"},"message":"[maven-release-plugin]  copy for tag 1.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.0@681528 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a56a15f3293febb1dffe18be6bf30d1257b3620","url":"https://api.github.com/repos/apache/openjpa/git/trees/4a56a15f3293febb1dffe18be6bf30d1257b3620"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d157a1429985e19fa5e096a651511a6845521366","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d157a1429985e19fa5e096a651511a6845521366","html_url":"https://github.com/apache/openjpa/commit/d157a1429985e19fa5e096a651511a6845521366","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d157a1429985e19fa5e096a651511a6845521366/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","url":"https://api.github.com/repos/apache/openjpa/commits/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded","html_url":"https://github.com/apache/openjpa/commit/33fa09bc42c4d9e411eaeeafd54cce4e32b04ded"}]},{"sha":"1697f1439ead778b4b27a8140a54bbd22ca15a8b","node_id":"MDY6Q29tbWl0MjA2MzY0OjE2OTdmMTQzOWVhZDc3OGI0YjI3YTgxNDBhNTRiYmQyMmNhMTVhOGI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T22:41:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T22:41:09Z"},"message":"[maven-release-plugin] prepare for next development iteration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681529 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"594c2139caa21e427f94839194c6c440fd20c467","url":"https://api.github.com/repos/apache/openjpa/git/trees/594c2139caa21e427f94839194c6c440fd20c467"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1697f1439ead778b4b27a8140a54bbd22ca15a8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1697f1439ead778b4b27a8140a54bbd22ca15a8b","html_url":"https://github.com/apache/openjpa/commit/1697f1439ead778b4b27a8140a54bbd22ca15a8b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1697f1439ead778b4b27a8140a54bbd22ca15a8b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ac55e28f76740e986a383040f614482a83651e4","url":"https://api.github.com/repos/apache/openjpa/commits/9ac55e28f76740e986a383040f614482a83651e4","html_url":"https://github.com/apache/openjpa/commit/9ac55e28f76740e986a383040f614482a83651e4"}]},{"sha":"f9c5b8aad99b882e3aac0736126ce091c0e32815","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5YzViOGFhZDk5Yjg4MmUzYWFjMDczNjEyNmNlMDkxYzBlMzI4MTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T19:19:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T19:19:01Z"},"message":"OPENJPA-485: Merging from trunk: ORDER BY clause in JPQL generates syntactically wrong SQL for TABLE_PER_CLASS inheritance hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"881abd8bdaa533434b25ed72cfb719dfdcb2edd1","url":"https://api.github.com/repos/apache/openjpa/git/trees/881abd8bdaa533434b25ed72cfb719dfdcb2edd1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815","html_url":"https://github.com/apache/openjpa/commit/f9c5b8aad99b882e3aac0736126ce091c0e32815","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815/comments","author":null,"committer":null,"parents":[{"sha":"1697f1439ead778b4b27a8140a54bbd22ca15a8b","url":"https://api.github.com/repos/apache/openjpa/commits/1697f1439ead778b4b27a8140a54bbd22ca15a8b","html_url":"https://github.com/apache/openjpa/commit/1697f1439ead778b4b27a8140a54bbd22ca15a8b"}]},{"sha":"65e054f66f1418a5ca1d44c00c899759ff8dbf5b","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1ZTA1NGY2NmYxNDE4YTVjYTFkNDRjMDBjODk5NzU5ZmY4ZGJmNWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T23:47:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T23:47:01Z"},"message":"OPENJPA-28: Merged from 1.3.0 trunk : GROUP BY clause on nested sub query should not appear on top-level query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681906 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee2de1917fd1a0a797dc5c90db2333cedaffdb80","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee2de1917fd1a0a797dc5c90db2333cedaffdb80"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/65e054f66f1418a5ca1d44c00c899759ff8dbf5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/65e054f66f1418a5ca1d44c00c899759ff8dbf5b","html_url":"https://github.com/apache/openjpa/commit/65e054f66f1418a5ca1d44c00c899759ff8dbf5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/65e054f66f1418a5ca1d44c00c899759ff8dbf5b/comments","author":null,"committer":null,"parents":[{"sha":"f9c5b8aad99b882e3aac0736126ce091c0e32815","url":"https://api.github.com/repos/apache/openjpa/commits/f9c5b8aad99b882e3aac0736126ce091c0e32815","html_url":"https://github.com/apache/openjpa/commit/f9c5b8aad99b882e3aac0736126ce091c0e32815"}]},{"sha":"1bee8f89102f3b043d3e5876b55ccb12dc277b52","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiZWU4Zjg5MTAyZjNiMDQzZDNlNTg3NmI1NWNjYjEyZGMyNzdiNTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-04T19:45:14Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-04T19:45:14Z"},"message":"OPENJPA-663 - Commit manual changes submitted by Jeremy Bauer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682479 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93f1cf3278ef4626bcc08cd48f2a17c473b31fbe","url":"https://api.github.com/repos/apache/openjpa/git/trees/93f1cf3278ef4626bcc08cd48f2a17c473b31fbe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1bee8f89102f3b043d3e5876b55ccb12dc277b52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1bee8f89102f3b043d3e5876b55ccb12dc277b52","html_url":"https://github.com/apache/openjpa/commit/1bee8f89102f3b043d3e5876b55ccb12dc277b52","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1bee8f89102f3b043d3e5876b55ccb12dc277b52/comments","author":null,"committer":null,"parents":[{"sha":"65e054f66f1418a5ca1d44c00c899759ff8dbf5b","url":"https://api.github.com/repos/apache/openjpa/commits/65e054f66f1418a5ca1d44c00c899759ff8dbf5b","html_url":"https://github.com/apache/openjpa/commit/65e054f66f1418a5ca1d44c00c899759ff8dbf5b"}]},{"sha":"6a3527cb27240872d343b00ae1809fd7b4cbc7eb","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhMzUyN2NiMjcyNDA4NzJkMzQzYjAwYWUxODA5ZmQ3YjRjYmM3ZWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T12:45:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T12:45:12Z"},"message":"Rollback 1.2.x branch to version 1.2.0-snapshot\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682696 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2fe067d15be4e51b96b17ba665ed935ad11f9522","url":"https://api.github.com/repos/apache/openjpa/git/trees/2fe067d15be4e51b96b17ba665ed935ad11f9522"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6a3527cb27240872d343b00ae1809fd7b4cbc7eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6a3527cb27240872d343b00ae1809fd7b4cbc7eb","html_url":"https://github.com/apache/openjpa/commit/6a3527cb27240872d343b00ae1809fd7b4cbc7eb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6a3527cb27240872d343b00ae1809fd7b4cbc7eb/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1bee8f89102f3b043d3e5876b55ccb12dc277b52","url":"https://api.github.com/repos/apache/openjpa/commits/1bee8f89102f3b043d3e5876b55ccb12dc277b52","html_url":"https://github.com/apache/openjpa/commit/1bee8f89102f3b043d3e5876b55ccb12dc277b52"}]},{"sha":"48ca5575d92df5cf2d073a0727cce41b1ccf7c1d","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4Y2E1NTc1ZDkyZGY1Y2YyZDA3M2EwNzI3Y2NlNDFiMWNjZjdjMWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T14:01:48Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T14:01:48Z"},"message":"OPENJPA-665 merge changes from revision 682610 to branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9de4574945577a4eaefb7365feaf1bcd0022caa","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9de4574945577a4eaefb7365feaf1bcd0022caa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/48ca5575d92df5cf2d073a0727cce41b1ccf7c1d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/48ca5575d92df5cf2d073a0727cce41b1ccf7c1d","html_url":"https://github.com/apache/openjpa/commit/48ca5575d92df5cf2d073a0727cce41b1ccf7c1d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/48ca5575d92df5cf2d073a0727cce41b1ccf7c1d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a3527cb27240872d343b00ae1809fd7b4cbc7eb","url":"https://api.github.com/repos/apache/openjpa/commits/6a3527cb27240872d343b00ae1809fd7b4cbc7eb","html_url":"https://github.com/apache/openjpa/commit/6a3527cb27240872d343b00ae1809fd7b4cbc7eb"}]},{"sha":"253e6ff70b079c440dd7b37071150e6e0ac486b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1M2U2ZmY3MGIwNzljNDQwZGQ3YjM3MDcxMTUwZTZlMGFjNDg2YjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T14:06:05Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T14:06:05Z"},"message":"OPENJPA-485 merge change from revision 682570 to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682716 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24cc4ad0cedbc460513759e8bcc44c0f980b5374","url":"https://api.github.com/repos/apache/openjpa/git/trees/24cc4ad0cedbc460513759e8bcc44c0f980b5374"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/253e6ff70b079c440dd7b37071150e6e0ac486b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/253e6ff70b079c440dd7b37071150e6e0ac486b0","html_url":"https://github.com/apache/openjpa/commit/253e6ff70b079c440dd7b37071150e6e0ac486b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/253e6ff70b079c440dd7b37071150e6e0ac486b0/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"48ca5575d92df5cf2d073a0727cce41b1ccf7c1d","url":"https://api.github.com/repos/apache/openjpa/commits/48ca5575d92df5cf2d073a0727cce41b1ccf7c1d","html_url":"https://github.com/apache/openjpa/commit/48ca5575d92df5cf2d073a0727cce41b1ccf7c1d"}]},{"sha":"0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","node_id":"MDY6Q29tbWl0MjA2MzY0OjBhYzFhMDIxMjlhMGQ5ZmJkOGJmZDUyNDgyYjE2ZmNhMjNiODJhYzY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T15:00:22Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T15:00:22Z"},"message":"Update assembly with correct javadoc location\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682734 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a8c1bfeca9309b23589eaac339849269af21b0b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a8c1bfeca9309b23589eaac339849269af21b0b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","html_url":"https://github.com/apache/openjpa/commit/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"253e6ff70b079c440dd7b37071150e6e0ac486b0","url":"https://api.github.com/repos/apache/openjpa/commits/253e6ff70b079c440dd7b37071150e6e0ac486b0","html_url":"https://github.com/apache/openjpa/commit/253e6ff70b079c440dd7b37071150e6e0ac486b0"}]},{"sha":"a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","node_id":"MDY6Q29tbWl0MjA2MzY0OmE4YTI2OWQ1YTMzZDFhM2IxMDRlZTQ2Mzk3OThhNjhmMWYwOWIwYTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T17:38:17Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-05T17:38:17Z"},"message":"OPENJPA-628. Revert changes from revision 610922 and add testcase.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@682822 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7834b67bdd066e5e9197aa7dd300f2be716b0b09","url":"https://api.github.com/repos/apache/openjpa/git/trees/7834b67bdd066e5e9197aa7dd300f2be716b0b09"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","html_url":"https://github.com/apache/openjpa/commit/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","url":"https://api.github.com/repos/apache/openjpa/commits/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6","html_url":"https://github.com/apache/openjpa/commit/0ac1a02129a0d9fbd8bfd52482b16fca23b82ac6"}]},{"sha":"b1d18a3556f278fd5b2f198393e0e6869980bb5e","node_id":"MDY6Q29tbWl0MjA2MzY0OmIxZDE4YTM1NTZmMjc4ZmQ1YjJmMTk4MzkzZTBlNjg2OTk4MGJiNWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-06T01:28:26Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-06T01:28:26Z"},"message":"OPENJPA-674 javaagent enhancer (PCEnhancerAgent) ignores persistence units after the first in persistence.xml\ncommitting PCEnhancerAgent.patch provided by Dinkar Rao\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb84dd01ec137ca033b0567f8e3fe398ba5e7f11","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb84dd01ec137ca033b0567f8e3fe398ba5e7f11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e","html_url":"https://github.com/apache/openjpa/commit/b1d18a3556f278fd5b2f198393e0e6869980bb5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e/comments","author":null,"committer":null,"parents":[{"sha":"a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","url":"https://api.github.com/repos/apache/openjpa/commits/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9","html_url":"https://github.com/apache/openjpa/commit/a8a269d5a33d1a3b104ee4639798a68f1f09b0a9"}]},{"sha":"c29f0d32af87eb95981ed45a6187306a93418260","node_id":"MDY6Q29tbWl0MjA2MzY0OmMyOWYwZDMyYWY4N2ViOTU5ODFlZDQ1YTYxODczMDZhOTM0MTgyNjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T15:32:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T15:32:26Z"},"message":"OPENJPA-676 close connection used for CONTIGUOUS or TRANSACTIONAL sequences\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683298 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b7fad0cd8e9d7f90ba1d9ee4330e94c59a6b4d03","url":"https://api.github.com/repos/apache/openjpa/git/trees/b7fad0cd8e9d7f90ba1d9ee4330e94c59a6b4d03"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c29f0d32af87eb95981ed45a6187306a93418260","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c29f0d32af87eb95981ed45a6187306a93418260","html_url":"https://github.com/apache/openjpa/commit/c29f0d32af87eb95981ed45a6187306a93418260","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c29f0d32af87eb95981ed45a6187306a93418260/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b1d18a3556f278fd5b2f198393e0e6869980bb5e","url":"https://api.github.com/repos/apache/openjpa/commits/b1d18a3556f278fd5b2f198393e0e6869980bb5e","html_url":"https://github.com/apache/openjpa/commit/b1d18a3556f278fd5b2f198393e0e6869980bb5e"}]},{"sha":"07cdf0b08704e5087a15f3350c3e5b50399cb4ea","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3Y2RmMGIwODcwNGU1MDg3YTE1ZjMzNTBjM2U1YjUwMzk5Y2I0ZWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T15:35:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T15:35:06Z"},"message":"OPENJPA-676 remove extraneous cast\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683300 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c1ddf22c62cea696caeebfb7e8af0ebb3389c75","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c1ddf22c62cea696caeebfb7e8af0ebb3389c75"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07cdf0b08704e5087a15f3350c3e5b50399cb4ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07cdf0b08704e5087a15f3350c3e5b50399cb4ea","html_url":"https://github.com/apache/openjpa/commit/07cdf0b08704e5087a15f3350c3e5b50399cb4ea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07cdf0b08704e5087a15f3350c3e5b50399cb4ea/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c29f0d32af87eb95981ed45a6187306a93418260","url":"https://api.github.com/repos/apache/openjpa/commits/c29f0d32af87eb95981ed45a6187306a93418260","html_url":"https://github.com/apache/openjpa/commit/c29f0d32af87eb95981ed45a6187306a93418260"}]},{"sha":"62ff7fa9c64b1431933fb0dd07a863c0d32be240","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyZmY3ZmE5YzY0YjE0MzE5MzNmYjBkZDA3YTg2M2MwZDMyYmUyNDA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T15:42:10Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T15:42:10Z"},"message":"OPENJPA-676 correct extra bracket.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683303 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9403c2b86d48e9d003a52a984f12a86709e89364","url":"https://api.github.com/repos/apache/openjpa/git/trees/9403c2b86d48e9d003a52a984f12a86709e89364"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240","html_url":"https://github.com/apache/openjpa/commit/62ff7fa9c64b1431933fb0dd07a863c0d32be240","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"07cdf0b08704e5087a15f3350c3e5b50399cb4ea","url":"https://api.github.com/repos/apache/openjpa/commits/07cdf0b08704e5087a15f3350c3e5b50399cb4ea","html_url":"https://github.com/apache/openjpa/commit/07cdf0b08704e5087a15f3350c3e5b50399cb4ea"}]},{"sha":"3966d7bded8da815e4ea9049470f37c2dae0b585","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5NjZkN2JkZWQ4ZGE4MTVlNGVhOTA0OTQ3MGYzN2MyZGFlMGI1ODU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:24Z"},"message":"[maven-release-plugin] prepare release 1.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683324 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","html_url":"https://github.com/apache/openjpa/commit/3966d7bded8da815e4ea9049470f37c2dae0b585","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"62ff7fa9c64b1431933fb0dd07a863c0d32be240","url":"https://api.github.com/repos/apache/openjpa/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240","html_url":"https://github.com/apache/openjpa/commit/62ff7fa9c64b1431933fb0dd07a863c0d32be240"}]},{"sha":"d6a0570c31c1c25957153a21058de5a4e1c40313","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ2YTA1NzBjMzFjMWMyNTk1NzE1M2EyMTA1OGRlNWE0ZTFjNDAzMTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:31Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:31Z"},"message":"[maven-release-plugin]  copy for tag 1.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.0@683325 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d6a0570c31c1c25957153a21058de5a4e1c40313","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d6a0570c31c1c25957153a21058de5a4e1c40313","html_url":"https://github.com/apache/openjpa/commit/d6a0570c31c1c25957153a21058de5a4e1c40313","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d6a0570c31c1c25957153a21058de5a4e1c40313/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d157a1429985e19fa5e096a651511a6845521366","url":"https://api.github.com/repos/apache/openjpa/commits/d157a1429985e19fa5e096a651511a6845521366","html_url":"https://github.com/apache/openjpa/commit/d157a1429985e19fa5e096a651511a6845521366"},{"sha":"62ff7fa9c64b1431933fb0dd07a863c0d32be240","url":"https://api.github.com/repos/apache/openjpa/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240","html_url":"https://github.com/apache/openjpa/commit/62ff7fa9c64b1431933fb0dd07a863c0d32be240"}]},{"sha":"df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmNTg1MjExYmJlNmY3NjczMmY1YTRiOWQ1ODZhN2MwZGQwYjJhMWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-14T13:51:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-14T13:51:24Z"},"message":"A    https://svn.apache.org/repos/asf/openjpa/tags/1.2.0\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.0@753657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","html_url":"https://github.com/apache/openjpa/commit/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d6a0570c31c1c25957153a21058de5a4e1c40313","url":"https://api.github.com/repos/apache/openjpa/commits/d6a0570c31c1c25957153a21058de5a4e1c40313","html_url":"https://github.com/apache/openjpa/commit/d6a0570c31c1c25957153a21058de5a4e1c40313"},{"sha":"3966d7bded8da815e4ea9049470f37c2dae0b585","url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","html_url":"https://github.com/apache/openjpa/commit/3966d7bded8da815e4ea9049470f37c2dae0b585"}]}],"files":[{"sha":"c74545e7b2dada6fc0d06e78d7245a57c8da6c3d","filename":"README.txt","status":"removed","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/ea8b942364fce79b0fae42b9ac94be7c3f58907b/README.txt","raw_url":"https://github.com/apache/openjpa/raw/ea8b942364fce79b0fae42b9ac94be7c3f58907b/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/README.txt?ref=ea8b942364fce79b0fae42b9ac94be7c3f58907b","patch":"@@ -1,4 +0,0 @@\n-Apache OpenJPA Project\n-======================\n-\n-For useful information, navigate to http://openjpa.apache.org"},{"sha":"ed218dc6cbe48e0ba9b00ea3e72fc6542c40553c","filename":"openjpa-all/pom.xml","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,18 +17,19 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n-        http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <artifactId>openjpa</artifactId>\n     <packaging>jar</packaging>\n     <name>OpenJPA Aggregate Jar</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n \n     <build>\n@@ -48,11 +49,10 @@\n                         <phase>process-classes</phase>\n                         <configuration>\n                             <tasks>\n-                                <unjar overwrite=\"false\"\n-                                    dest=\"${basedir}/target/classes\">\n+                                <unjar overwrite=\"false\" dest=\"${basedir}/target/classes\">\n                                     <fileset dir=\"${basedir}/..\">\n-                                        <include name=\"*/target/openjpa-*.jar\"/>\n-                                        <exclude name=\"*/target/openjpa-examples-*.jar\"/>\n+                                        <include name=\"*/target/openjpa-*.jar\" />\n+                                        <exclude name=\"*/target/openjpa-examples-*.jar\" />\n                                     </fileset>\n                                 </unjar>\n \n@@ -61,18 +61,18 @@\n                                     resources so they are aggregated\n                                 -->\n                                 <macrodef name=\"aggregate-file\">\n-                                   <attribute name=\"servicename\"/>\n+                                   <attribute name=\"servicename\" />\n                                     <sequential>\n                                         <echo>Building service: @{servicename}</echo>\n                                         <concat destfile=\"${basedir}/target/classes/META-INF/services/@{servicename}\">\n-                                            <fileset dir=\"${basedir}/..\" includes=\"*/src/main/resources/META-INF/services/@{servicename}\"/>\n+                                            <fileset dir=\"${basedir}/..\" includes=\"*/src/main/resources/META-INF/services/@{servicename}\" />\n                                         </concat>\n                                     </sequential>\n                                 </macrodef>\n \n-                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ProductDerivation\"/>\n-                                <aggregate-file servicename=\"javax.persistence.spi.PersistenceProvider\"/>\n-                                <aggregate-file servicename=\"org.apache.openjpa.kernel.exps.ExpressionParser\"/>\n+                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ProductDerivation\" />\n+                                <aggregate-file servicename=\"javax.persistence.spi.PersistenceProvider\" />\n+                                <aggregate-file servicename=\"org.apache.openjpa.kernel.exps.ExpressionParser\" />\n                             </tasks>\n                         </configuration>\n                         <goals>"},{"sha":"d26fb6ed2bc0d1513ed7abf0e4b51cad0778c640","filename":"openjpa-examples/pom.xml","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,9 +17,11 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-examples</artifactId>\n@@ -30,7 +32,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -81,21 +83,19 @@\n                         <configuration>\n                             <tasks>\n                                 <path id=\"cp\">\n-                                    <path refid=\"maven.test.classpath\"/>\n-                                    <path refid=\"maven.compile.classpath\"/>\n-                                    <path refid=\"maven.dependency.classpath\"/>\n+                                    <path refid=\"maven.test.classpath\" />\n+                                    <path refid=\"maven.compile.classpath\" />\n+                                    <path refid=\"maven.dependency.classpath\" />\n                                 </path>\n-\t\t\t\t\t\t\t\t<taskdef name=\"openjpac\" classname=\n-                                    \"org.apache.openjpa.ant.PCEnhancerTask\">\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\"/>\n+\t\t\t\t\t\t\t\t<taskdef name=\"openjpac\" classname= \"org.apache.openjpa.ant.PCEnhancerTask\">\n+\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\" />\n \t\t\t\t\t\t\t\t</taskdef>\n-                                <fileset id=\"enhance.path.ref\"\n-                                    dir=\"${project.build.testOutputDirectory}\">\n-                                    <include name=\"**/*.class\"/>\n+                                <fileset id=\"enhance.path.ref\" dir=\"${project.build.testOutputDirectory}\">\n+                                    <include name=\"**/*.class\" />\n                                 </fileset>\n \t\t\t\t\t\t\t\t<openjpac>\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\"/>\n-\t\t\t\t\t\t\t\t\t<fileset refid=\"enhance.path.ref\"/>\n+\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\" />\n+\t\t\t\t\t\t\t\t\t<fileset refid=\"enhance.path.ref\" />\n \t\t\t\t\t\t\t\t</openjpac>\n                             </tasks>\n                         </configuration>"},{"sha":"6a13eea8363d45cdd44fe42672b863f6581876ce","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":12,"deletions":18,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -26,18 +26,19 @@\n \n         mvn integration-test -Pexamples-profile\n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n-        http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <artifactId>examples</artifactId>\n     <packaging>pom</packaging>\n     <name>OpenJPA Examples Integration Tests</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n \n     <profiles>\n@@ -55,29 +56,23 @@\n                         <tasks>\n                         <echo>Running OpenJPA Examples</echo>\n \n-                        <property name=\"examples.base\"\n-                            value=\"${basedir}/target/examples\"/>\n-                        <mkdir dir=\"${examples.base}\"/>\n+                        <property name=\"examples.base\" value=\"${basedir}/target/examples\" />\n+                        <mkdir dir=\"${examples.base}\" />\n \n-                        <unzip overwrite=\"false\" dest=\"${examples.base}\"\n-                            src=\"../../target/site/downloads/apache-openjpa-${pom.version}-binary.zip\"/>\n+                        <unzip overwrite=\"false\" dest=\"${examples.base}\" src=\"../../target/site/downloads/apache-openjpa-${pom.version}-binary.zip\" />\n \n                         <path id=\"assembly.classpath\"> \n                             <fileset dir=\"${examples.base}\">\n-                                <include name=\"**/*.jar\"/>\n+                                <include name=\"**/*.jar\" />\n                             </fileset>\n                         </path>\n-                        <available\n-                            classname=\"org.apache.openjpa.conf.OpenJPAVersion\"\n-                            classpathref=\"assembly.classpath\"\n-                            property=\"unzip.success\"/>\n+                        <available classname=\"org.apache.openjpa.conf.OpenJPAVersion\" classpathref=\"assembly.classpath\" property=\"unzip.success\" />\n                         <fail unless=\"unzip.success\">\n                             Could not extract assembly.\n                         </fail>\n \n                         <subant inheritAll=\"false\" failonerror=\"true\">\n-                            <fileset dir=\"${examples.base}\"\n-                                includes=\"*/examples/*/build.xml\"/>\n+                            <fileset dir=\"${examples.base}\" includes=\"*/examples/*/build.xml\" />\n                         </subant>\n \n                         </tasks>\n@@ -101,4 +96,3 @@\n         </dependency>\n     </dependencies>\n </project>\n-"},{"sha":"9ce015d495438c92d0df1c66f985788070c24a7f","filename":"openjpa-integration/pom.xml","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,18 +17,19 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n-        http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <artifactId>openjpa-integration</artifactId>\n     <packaging>pom</packaging>\n     <name>OpenJPA Integration Tests</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"10a9f76618ae801fc44f423d9c28f571151c9855","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":65,"deletions":92,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -49,18 +49,19 @@\n     5. Run the TCK script\n     6. Parse the TCK result log to determine whether to fail the build or not\n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n-        http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <artifactId>tck</artifactId>\n     <packaging>pom</packaging>\n     <name>OpenJPA JPA TCK Integration Tests</name>\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n \n     <profiles>\n@@ -78,57 +79,49 @@\n                         <tasks>\n                         <echo>Running Sun JPA TCK</echo>\n \n-                        <property name=\"tck.zip\" value=\n-                            \"${settings.localRepository}/../privaterepos/jpa-1_0b-tck.zip\"/>\n-                         <available property=\"tck.available\" file=\"${tck.zip}\"/>\n+                        <property name=\"tck.zip\" value=\"${settings.localRepository}/../privaterepos/jpa-1_0b-tck.zip\" />\n+                         <available property=\"tck.available\" file=\"${tck.zip}\" />\n                         <fail unless=\"tck.available\">The TCK file ${tck.zip} does not exist. This file must be downloaded separately in order to be able to run the JPA TCK</fail>\n \n \n-                        <available property=\"tck.available\" file=\"${tck.zip}\"/>\n+                        <available property=\"tck.available\" file=\"${tck.zip}\" />\n                         <fail unless=\"tck.available\">The TCK file specific in the \"tck.zip\" system property (${tck.zip}) does not exist. This file must be downloaded separately in order to be able to run the JPA TCK</fail>\n \n-                        <property name=\"tck.base\"\n-                            value=\"${basedir}/target/tck\"/>\n-                        <property name=\"tck.dir\" value=\"${tck.base}/jpatck\"/>\n+                        <property name=\"tck.base\" value=\"${basedir}/target/tck\" />\n+                        <property name=\"tck.dir\" value=\"${tck.base}/jpatck\" />\n \n-                        <delete dir=\"${tck.dir}\"/>\n+                        <delete dir=\"${tck.dir}\" />\n \n-                        <unzip overwrite=\"false\"\n-                            src=\"${tck.zip}\" dest=\"${tck.base}\"/>\n+                        <unzip overwrite=\"false\" src=\"${tck.zip}\" dest=\"${tck.base}\" />\n \n                         <path id=\"cp\">\n-                            <path refid=\"maven.compile.classpath\"/>\n+                            <path refid=\"maven.compile.classpath\" />\n \n                             <!-- use official JPA API instead of GM's -->\n                             <fileset dir=\"${tck.dir}/lib\">\n-                                <include name=\"**/*.jar\"/>\n-                                <exclude name=\"**/geronimo-jpa*\"/>\n+                                <include name=\"**/*.jar\" />\n+                                <exclude name=\"**/geronimo-jpa*\" />\n                             </fileset>\n-                            <pathelement path=\"${java.class.path}\"/>\n-                            <pathelement path=\"${db.jar}\"/>\n+                            <pathelement path=\"${java.class.path}\" />\n+                            <pathelement path=\"${db.jar}\" />\n                         </path>\n-                        <pathconvert property=\"cp.property\" refid=\"cp\"/>\n+                        <pathconvert property=\"cp.property\" refid=\"cp\" />\n \n-                        <property name=\"db.name\" value=\"derby\"/>\n-                        <property name=\"db.driver\"\n-                            value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n-                        <property name=\"db.url\"\n-                            value=\"jdbc:derby:derby-database;create=true\"/>\n-                        <property name=\"db.username\" value=\"nousername\"/>\n-                        <property name=\"db.password\" value=\"nopassword\"/>\n+                        <property name=\"db.name\" value=\"derby\" />\n+                        <property name=\"db.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" />\n+                        <property name=\"db.url\" value=\"jdbc:derby:derby-database;create=true\" />\n+                        <property name=\"db.username\" value=\"nousername\" />\n+                        <property name=\"db.password\" value=\"nopassword\" />\n \n-                        <property name=\"openjpa.log.level\" value=\"WARN\"/>\n+                        <property name=\"openjpa.log.level\" value=\"WARN\" />\n \n-                        <property name=\"jpatck.pkg.dir\" value=\"com\"/>\n-                        <property name=\"jpatck.test\" value=\"\"/>\n+                        <property name=\"jpatck.pkg.dir\" value=\"com\" />\n+                        <property name=\"jpatck.test\" value=\"\" />\n \n-                        <property name=\"jpatck.work.dir\"\n-                            value=\"${tck.dir}/../work\"/>\n-                        <property name=\"tck.log\"\n-                            value=\"${tck.base}/openjpa-tck.log\"/>\n+                        <property name=\"jpatck.work.dir\" value=\"${tck.dir}/../work\" />\n+                        <property name=\"tck.log\" value=\"${tck.base}/openjpa-tck.log\" />\n \n-                        <property name=\"openjpa.properties\"\n-                            value=\"${tck.dir}/openjpa-provier.properties\"/>\n+                        <property name=\"openjpa.properties\" value=\"${tck.dir}/openjpa-provier.properties\" />\n \n                         <!-- create the OpenJPA properties for the TCK run -->\n                         <echo append=\"false\" file=\"${openjpa.properties}\">\n@@ -146,8 +139,7 @@ openjpa.jdbc.SchemaFactory: native(ForeignKeys=true)\n                         </echo>\n \n                         <!-- Append OpenJPA-specific configuration -->\n-                        <property name=\"jpatck.config\"\n-                            value=\"${tck.dir}/bin/ts.jte\"/>\n+                        <property name=\"jpatck.config\" value=\"${tck.dir}/bin/ts.jte\" />\n \n                         <echo append=\"false\" file=\"${jpatck.config}.tmp\">\n \n@@ -177,20 +169,18 @@ databaseName=${db.name}\n                         <!-- convert backslashes and known paths with spaces\n                             to get around a problem with the TCK testrunner \n                             on windows -->\n-                        <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" \n-                            replacefilterfile=\"windows-replacefilter.properties\"/>\n+                        <replace summary=\"yes\" file=\"${jpatck.config}.tmp\" replacefilterfile=\"windows-replacefilter.properties\" />\n                         <concat append=\"true\" destfile=\"${jpatck.config}\">\n-                            <fileset file=\"${jpatck.config}.tmp\"/>\n+                            <fileset file=\"${jpatck.config}.tmp\" />\n                         </concat>\n \n                         <path id=\"agent.path\">\n                             <fileset dir=\"../../openjpa-all/target\">\n-                                <include name=\"*.jar\"/>\n+                                <include name=\"*.jar\" />\n                             </fileset>\n                         </path>\n-                        <pathconvert dirsep=\"/\" property=\"agent\" \n-                            refid=\"agent.path\"/>\n-                        <property name=\"agent.properties\" value=\"\"/>\n+                        <pathconvert dirsep=\"/\" property=\"agent\" refid=\"agent.path\" />\n+                        <property name=\"agent.properties\" value=\"\" />\n                         <echo>AGENT: ${agent}${agent.properties}</echo>\n \n                         <!--\n@@ -201,49 +191,39 @@ databaseName=${db.name}\n                             persistent classes to work (like the SignatureTest)\n                         -->\n                         <replace file=\"${jpatck.config}\">\n-                            <replacefilter token=\"-javaagent:${jpa.home}/lib/toplink-essentials-agent.jar\" value=\"-javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\"/>\n+                            <replacefilter token=\"-javaagent:${jpa.home}/lib/toplink-essentials-agent.jar\" value=\"-javaagent:${agent}${agent.properties} -Dopenjpa.MetaDataFactory=jpa(DefaultAccessType=PROPERTY)\" />\n                         </replace>\n \n                         <!-- make a macro for the TCK harness launcher -->\n                         <macrodef name=\"tsant\">\n-                            <attribute name=\"buildfile\"/>\n-                            <attribute name=\"target\"/>\n+                            <attribute name=\"buildfile\" />\n+                            <attribute name=\"target\" />\n                             <sequential>\n-                                <java classname=\n-                                    \"org.apache.tools.ant.launch.Launcher\"\n-                                    fork=\"true\" failonerror=\"true\"\n-                                    dir=\"${tck.dir}/src\"\n-                                    append=\"true\"\n-                                    output=\"${tck.log}\"\n-                                    timeout=\"7200000\">\n-                                    <arg value=\"-emacs\"/>\n-                                    <arg value=\"-buildfile\"/>\n-                                    <arg value=\"@{buildfile}\"/>\n-                                    <arg value=\"-listener\"/>\n-                                    <arg value=\"com.sun.ant.TSBuildListener\"/>\n-                                    <arg value=\"-logger\"/>\n-                                    <arg value=\"com.sun.ant.TSLogger\"/>\n-                                    <arg value=\"@{target}\"/>\n-\n-                                    <env key=\"TS_HOME\" value=\"..\"/>\n-                                    <sysproperty key=\"ts.home\" value=\"..\"/>\n-\n-                                    <env key=\"ANT_HOME\"\n-                                        value=\"${tck.dir}/tools/ant\"/>\n-                                    <sysproperty key=\"ant.home\"\n-                                        value=\"${tck.dir}/tools/ant\"/>\n-\n-                                    <sysproperty key=\"pkg.dir\"\n-                                        value=\"${jpatck.pkg.dir}\"/>\n+                                <java classname=\"org.apache.tools.ant.launch.Launcher\" fork=\"true\" failonerror=\"true\" dir=\"${tck.dir}/src\" append=\"true\" output=\"${tck.log}\" timeout=\"7200000\">\n+                                    <arg value=\"-emacs\" />\n+                                    <arg value=\"-buildfile\" />\n+                                    <arg value=\"@{buildfile}\" />\n+                                    <arg value=\"-listener\" />\n+                                    <arg value=\"com.sun.ant.TSBuildListener\" />\n+                                    <arg value=\"-logger\" />\n+                                    <arg value=\"com.sun.ant.TSLogger\" />\n+                                    <arg value=\"@{target}\" />\n+\n+                                    <env key=\"TS_HOME\" value=\"..\" />\n+                                    <sysproperty key=\"ts.home\" value=\"..\" />\n+\n+                                    <env key=\"ANT_HOME\" value=\"${tck.dir}/tools/ant\" />\n+                                    <sysproperty key=\"ant.home\" value=\"${tck.dir}/tools/ant\" />\n+\n+                                    <sysproperty key=\"pkg.dir\" value=\"${jpatck.pkg.dir}\" />\n                                     <!--\n-                                    <sysproperty key=\"test\"\n-                                        value=\"${jpatck.test}\"/>\n+                                    <sysproperty key=\"test\" value=\"${jpatck.test}\" />\n                                     -->\n \n                                     <classpath>\n-                                        <path refid=\"cp\"/>\n+                                        <path refid=\"cp\" />\n                                         <fileset dir=\"${tck.dir}/tools/ant/lib\">\n-                                            <include name=\"**/*.jar\"/>\n+                                            <include name=\"**/*.jar\" />\n                                         </fileset>\n                                     </classpath>\n                                 </java>\n@@ -253,32 +233,26 @@ databaseName=${db.name}\n                         <echo>Logging JPA TCK output to ${tck.log}</echo>\n \n                         <!-- first initialize the database -->\n-                        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\"\n-                            target=\"init.database\"/>\n+                        <tsant buildfile=\"${tck.dir}/bin/initdb.xml\" target=\"init.database\" />\n \n                         <!-- now run the TCK -->\n-                        <tsant buildfile=\"${tck.dir}/bin/build.xml\"\n-                            target=\"runclient\"/>\n+                        <tsant buildfile=\"${tck.dir}/bin/build.xml\" target=\"runclient\" />\n \n                         <!--\n                             The TCK's Java process doesn't actually fail when\n                             tests fail, so we need to parse the results file\n                             for a string indicating whether or not it passed.\n                         -->\n-                        <loadfile property=\"jpatck.results\"\n-                            srcfile=\"${jpatck.work.dir}/jtData/log.txt\"/>\n+                        <loadfile property=\"jpatck.results\" srcfile=\"${jpatck.work.dir}/jtData/log.txt\" />\n                         <condition property=\"jpatck.failed\">\n-                            <contains string=\"${jpatck.results}\"\n-                                substring=\"Completed test run: not ok\"/>\n+                            <contains string=\"${jpatck.results}\" substring=\"Completed test run: not ok\" />\n                         </condition>\n                         <fail if=\"jpatck.failed\">Some tests failed</fail>\n \n                         <echo>JPA TCK Passed 100%!</echo>\n \n-                        <property name=\"tck.results.archive\"\n-                            value=\"${tck.base}/openjpa-tck-results.zip\"/>\n-                        <zip destfile=\"${tck.results.archive}\"\n-                            basedir=\"${jpatck.work.dir}\"/>\n+                        <property name=\"tck.results.archive\" value=\"${tck.base}/openjpa-tck-results.zip\" />\n+                        <zip destfile=\"${tck.results.archive}\" basedir=\"${jpatck.work.dir}\" />\n                         <echo>Results archive at: ${tck.results.archive}</echo>\n \n                         </tasks>\n@@ -323,4 +297,3 @@ databaseName=${db.name}\n         </dependency>\n     </dependencies>\n </project>\n-"},{"sha":"7669ea8227bec46b31c7905e7565bf91b50ec447","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,9 +17,10 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-jdbc</artifactId>\n@@ -30,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -48,6 +49,11 @@\n             <artifactId>hsqldb</artifactId>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>8.1-407.jdbc3</version>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"fa8f5a0d4b06a3f6449487a3ece2e0ef644e5f43","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.conf;\n \n+import java.util.Map;\n+\n import javax.sql.DataSource;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n@@ -602,4 +604,23 @@\n      * @see #getDataSource\n      */\n     public DataSource getDataSource2(StoreContext ctx);\n+    \n+    /**\n+     * Return QuerySQLCacheValue.\n+     * @since 1.2.0\n+     */\n+    public QuerySQLCacheValue getQuerySQLCache();\n+        \n+    /**\n+     * Whether querySQLCache is enabled or not.\n+     * @since 1.2.0\n+     */\n+    public boolean isQuerySQLCacheOn();\n+    \n+    /**\n+     * Return QuerySQLCacheInstance.\n+     * @since 1.2.0\n+     */\n+    public Map getQuerySQLCacheInstance();     \n+    \n }"},{"sha":"41d05d09f7d1ffca0a1803891244ef661d379b14","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -20,6 +20,9 @@\n \n import java.sql.Connection;\n import java.sql.ResultSet;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -82,6 +85,8 @@\n     public ObjectValue mappingDefaultsPlugin;\n     public PluginValue driverDataSourcePlugin;\n     public MappingFactoryValue mappingFactoryPlugin;\n+    public QuerySQLCacheValue querySQLCache;\n+    private Map querySQLCacheInstance = new HashMap(); \n \n     // used internally\n     private String firstUser = null;\n@@ -302,6 +307,9 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         seqPlugin.setDefault(JDBCSeqValue.ALIASES[0]);\n         seqPlugin.setString(JDBCSeqValue.ALIASES[0]);\n \n+        querySQLCache = new QuerySQLCacheValue(\"jdbc.QuerySQLCache\");\n+        addValue(querySQLCache);\n+\n         // this static initializer is to get past a weird\n         // ClassCircularityError that happens only under IBM's\n         // JDK 1.3.1 on Linux from within the JRun ClassLoader;\n@@ -856,4 +864,21 @@ protected boolean isInvalidProperty(String propName) {\n                 return true; \n         return false;\n     }\n+    \n+    public void setQuerySQLCache(String querySQLCache) {\n+        this.querySQLCache.setString(querySQLCache);\n+    }\n+\n+    public QuerySQLCacheValue getQuerySQLCache() {\n+        return querySQLCache;\n+    }\n+    \n+    public boolean isQuerySQLCacheOn() {\n+        return querySQLCache.isSQLCacheOn();\n+    }\n+\n+    public Map getQuerySQLCacheInstance() {\n+        return querySQLCacheInstance;\n+    }\n+    \n }"},{"sha":"7db54b7e2bb5ffdbdcd913f8d5c7e844ebcfe2bf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/QuerySQLCacheValue.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.conf;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.util.CacheMap;\n+\n+\n+/**\n+ * A cache of sql queries.\n+ *\n+ * @since 1.2\n+ * @nojavadoc\n+ */\n+public class QuerySQLCacheValue\n+    extends PluginValue {\n+\n+    public static final String[] ALIASES = {\n+        \"true\", CacheMap.class.getName(),\n+        \"all\", ConcurrentHashMap.class.getName(),\n+        \"false\", null,\n+    };\n+    \n+    public QuerySQLCacheValue(String prop) {\n+        super(prop, true); \n+        setAliases(ALIASES);\n+        setDefault(ALIASES[0]);\n+        setClassName(ALIASES[1]);\n+    }\n+    \n+    public boolean isSQLCacheOn() {\n+        if (getClassName() == null) \n+            return false;\n+        return true;\n+    }\n+    \n+    public Object newInstance() {\n+        // make sure map handles concurrency\n+        String clsName = getClassName();\n+        if (clsName == null)\n+            return null;\n+        Map map = null;\n+\n+        try {\n+            // Use the \"OpenJPA\" classloader first...\n+            map = (Map) Configurations.newInstance(clsName, this.getClass()\n+                    .getClassLoader());\n+        } catch (Exception e) {\n+            // If the \"OpenJPA\" classloader fails, then try the classloader\n+            // that was used to load java.util.Map...\n+            map = (Map) Configurations.newInstance(clsName,\n+                    Map.class.getClassLoader());\n+        }\n+        if (map != null\n+                && !(map instanceof Hashtable)\n+                && !(map instanceof CacheMap)\n+                && !(map instanceof \n+                        org.apache.openjpa.lib.util.concurrent.ConcurrentMap)\n+                && !(map instanceof java.util.concurrent.ConcurrentMap))\n+            map = Collections.synchronizedMap(map);\n+        return map;\n+    }\n+\n+}"},{"sha":"5064c3c61f5e70d2032e4c0a6c42b1901515f470","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":30,"deletions":35,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -25,6 +25,7 @@\n import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager.RefCountConnection;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n@@ -45,7 +46,6 @@\n \n     protected int type = TYPE_DEFAULT;\n     protected Object current = null;\n-    private static ThreadLocal _outerTransaction = new ThreadLocal();\n \n     /**\n      * Records the sequence type.\n@@ -144,24 +144,24 @@ private JDBCStore getStore(StoreContext ctx) {\n     }\n \n     /**\n-     * Return the connection to use based on the type of sequence. This\n-     * connection will automatically be closed; do not close it.\n+     * <P>Return the connection to use based on the type of sequence. This\n+     * connection will automatically be closed; do not close it.</P>\n+     * \n+     * @return If the sequence type is <code>TYPE_TRANSACTIONAL</code> or \n+     * <code>TYPE_CONTIGUOUS</code> the connection from the {@link StoreManager}\n+     * will be returned. \n+     * \n+     * <P>Otherwise a new connection will be obtained using DataSource2 from the \n+     * current configuration. In this case autocommit is set to false prior to \n+     * returning the connection.</P>\n      */\n     protected Connection getConnection(JDBCStore store)\n         throws SQLException {\n-        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS)\n+        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n+            // Also increments ref count.\n             return store.getConnection();\n-        else if (suspendInJTA()) {\n-            try {\n-                TransactionManager tm = getConfiguration()\n-                    .getManagedRuntimeInstance().getTransactionManager();\n-                _outerTransaction.set(tm.suspend());\n-                tm.begin();\n-                return store.getConnection();\n-            } catch (Exception e) {\n-                throw new StoreException(e);\n-            }\n-        } else {\n+        }\n+        else {\n             JDBCConfiguration conf = store.getConfiguration();\n             DataSource ds = conf.getDataSource2(store.getContext());\n             Connection conn = ds.getConnection();\n@@ -172,32 +172,27 @@ else if (suspendInJTA()) {\n     }\n \n     /**\n-     * Close the current connection.\n+     * Close the current connection. If the sequence is\n+     * <code>TYPE_TRANSACTIONAL</code> or <code>TYPE_CONTIGUOUS</code>\n+     * we will decrement the ref count. Otherwise the connection will be\n+     * committed and then closed. \n      */\n     protected void closeConnection(Connection conn) {\n         if (conn == null)\n             return;\n-\n         if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n-            // do nothing; this seq is part of the business transaction\n+            // The seq is part of the business transaction however we need\n+            // to decrement the ref count so that the connection may be \n+            // closed appropriately.\n+            \ttry { \n+            \t\tconn.close();\n+            \t}\n+            \tcatch(SQLException se) { \n+            \t\tthrow SQLExceptions.getStore(se);\n+            \t}\n             return;\n-        } else if (suspendInJTA()) {\n-            try {\n-                TransactionManager tm = getConfiguration()\n-                    .getManagedRuntimeInstance().getTransactionManager();\n-                tm.commit();\n-                try { conn.close(); } catch (SQLException se) {}\n-\n-                Transaction outerTxn = (Transaction)_outerTransaction.get();\n-                if (outerTxn != null)\n-                    tm.resume(outerTxn);\n-\n-            } catch (Exception e) {\n-                throw new StoreException(e);\n-            } finally {\n-                _outerTransaction.set(null);\n-            }\n-        } else {\n+        }\n+        else {\n             try {\n                 conn.commit();\n             } catch (SQLException se) {"},{"sha":"db3f34345490a8ebcae64c6515159dd56d950b65","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -80,7 +80,7 @@ private Collection flush(Collection states, JDBCStore store,\n         // run through all the states and update them as necessary\n         RowManager rowMgr = newRowManager();\n         Collection customs = new LinkedList();\n-        Collection exceps = null;\n+        Collection exceps = psMgr.getExceptions();\n         for (Iterator itr = states.iterator(); itr.hasNext();)\n             exceps = populateRowManager((OpenJPAStateManager) itr.next(),\n                 rowMgr, store, exceps, customs);\n@@ -100,12 +100,6 @@ private Collection flush(Collection states, JDBCStore store,\n         }\n \n         // return all exceptions\n-        Collection psExceps = psMgr.getExceptions();\n-        if (exceps == null)\n-            return psExceps;\n-        if (psExceps == null)\n-            return exceps;\n-        exceps.addAll(psExceps);\n         return exceps;\n     }\n "},{"sha":"21ecdd1ac815fc6d5618a7d86d0e9cc55a3c87a5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingConstraintUpdateManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,9 +19,12 @@\n package org.apache.openjpa.jdbc.kernel;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n import java.util.Collection;\n \n import org.apache.openjpa.jdbc.sql.RowManager;\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.util.OpenJPAException;\n \n /**\n  * <P>Batch update manager that writes the SQL in object-level operation order. \n@@ -53,10 +56,17 @@ protected PreparedStatementManager newPreparedStatementManager(\n      */\n     protected Collection flush(RowManager rowMgr,\n         PreparedStatementManager psMgr, Collection exceps) {\n-        Collection rtnCol = super.flush(rowMgr, psMgr, exceps);\n+        exceps = super.flush(rowMgr, psMgr, exceps);\n         BatchingPreparedStatementManagerImpl bPsMgr =\n             (BatchingPreparedStatementManagerImpl) psMgr;\n-        bPsMgr.flushBatch();\n-        return rtnCol;\n+        try {\n+            bPsMgr.flushBatch();\n+        } catch (SQLException se) {\n+            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n+        } catch (OpenJPAException ke) {\n+            exceps = addException(exceps, ke);\n+        }\n+\n+        return exceps;\n     }\n }"},{"sha":"11364981ac6f6aff2a34e83bfd1c046a068abdea","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingOperationOrderUpdateManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,9 +19,12 @@\n package org.apache.openjpa.jdbc.kernel;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n import java.util.Collection;\n \n import org.apache.openjpa.jdbc.sql.RowManager;\n+import org.apache.openjpa.jdbc.sql.SQLExceptions;\n+import org.apache.openjpa.util.OpenJPAException;\n \n /**\n  * <P>Batch update manager that writes the SQL in object-level operation order. \n@@ -55,10 +58,17 @@ protected PreparedStatementManager newPreparedStatementManager(\n      */\n     protected Collection flush(RowManager rowMgr,\n         PreparedStatementManager psMgr, Collection exceps) {\n-        Collection rtnCol = super.flush(rowMgr, psMgr, exceps);\n+        exceps = super.flush(rowMgr, psMgr, exceps);\n         BatchingPreparedStatementManagerImpl bPsMgr = \n             (BatchingPreparedStatementManagerImpl) psMgr;\n-        bPsMgr.flushBatch();\n-        return rtnCol;\n+        try {\n+            bPsMgr.flushBatch();\n+        } catch (SQLException se) {\n+            exceps = addException(exceps, SQLExceptions.getStore(se, dict));\n+        } catch (OpenJPAException ke) {\n+            exceps = addException(exceps, ke);\n+        }\n+\n+        return exceps;\n     }\n }"},{"sha":"ba25c0d8de89f44f9a1bcd6b8a84756926e95a4b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"modified","additions":126,"deletions":49,"changes":175,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -83,28 +83,32 @@ protected void flushAndUpdate(RowImpl row) throws SQLException {\n         } else {\n             // process the SQL statement, either execute it immediately or\n             // batch it for later execution.\n-            String sql = row.getSQL(_dict);\n-            if (_batchedSql == null) {\n-                // brand new SQL\n-                _batchedSql = sql;\n-            } else if (!sql.equals(_batchedSql)) {\n-                // SQL statements changed.\n-                switch (_batchedRows.size()) {\n-                case 0:\n-                    break;\n-                case 1:\n-                    // single entry in cache, direct SQL execution. \n-                    super.flushAndUpdate((RowImpl) _batchedRows.get(0));\n-                    _batchedRows.clear();\n-                    break;\n-                default:\n-                    // flush all entries in cache in batch.\n-                    flushBatch();\n-                }\n-                _batchedSql = sql;\n+            batchOrExecuteRow(row);\n+        }\n+    }\n+\n+    protected void batchOrExecuteRow(RowImpl row) throws SQLException {\n+        String sql = row.getSQL(_dict);\n+        if (_batchedSql == null) {\n+            // brand new SQL\n+            _batchedSql = sql;\n+        } else if (!sql.equals(_batchedSql)) {\n+            // SQL statements changed.\n+            switch (_batchedRows.size()) {\n+            case 0:\n+                break;\n+            case 1:\n+                // single entry in cache, direct SQL execution. \n+                super.flushAndUpdate((RowImpl) _batchedRows.get(0));\n+                _batchedRows.clear();\n+                break;\n+            default:\n+                // flush all entries in cache in batch.\n+                flushBatch();\n             }\n-            _batchedRows.add(row);\n+            _batchedSql = sql;\n         }\n+        _batchedRows.add(row);\n     }\n \n     /*\n@@ -113,8 +117,8 @@ protected void flushAndUpdate(RowImpl row) throws SQLException {\n      */\n     private boolean isBatchDisabled(RowImpl row) {\n         boolean rtnVal = true;\n-        if (_batchLimit != 0 && !_disableBatch) {\n-            String sql = row.getSQL(_dict);\n+        int limit = getBatchLimit();\n+        if ((limit < 0 || limit > 1) && !isBatchDisabled()) {\n             OpenJPAStateManager sm = row.getPrimaryKey();\n             ClassMapping cmd = null;\n             if (sm != null)\n@@ -123,9 +127,9 @@ private boolean isBatchDisabled(RowImpl row) {\n             if (row.getAction() == Row.ACTION_INSERT)\n                 autoAssign = row.getTable().getAutoAssignedColumns();\n             // validate batch capability\n-            _disableBatch = _dict\n+            rtnVal = _dict\n                 .validateBatchProcess(row, autoAssign, sm, cmd);\n-            rtnVal = _disableBatch;\n+            setBatchDisabled(rtnVal);\n         }\n         return rtnVal;\n     }\n@@ -134,47 +138,55 @@ private boolean isBatchDisabled(RowImpl row) {\n      * flush all cached up statements to be executed as a single or batched\n      * prepared statements.\n      */\n-    protected void flushBatch() {\n-        if (_batchedSql != null && _batchedRows.size() > 0) {\n+    protected void flushBatch() throws SQLException {\n+        List batchedRows = getBatchedRows();\n+        String batchedSql = getBatchedSql();\n+        if (batchedRows == null)\n+            return;\n+\n+        int batchSize = batchedRows.size();\n+        if (batchedSql != null &&  batchSize > 0) {\n             PreparedStatement ps = null;\n             try {\n                 RowImpl onerow = null;\n-                ps = _conn.prepareStatement(_batchedSql);\n-                if (_batchedRows.size() == 1) {\n+                ps = prepareStatement(batchedSql);\n+                if (batchSize == 1) {\n                     // execute a single row.\n-                    onerow = (RowImpl) _batchedRows.get(0);\n+                    onerow = (RowImpl) batchedRows.get(0);\n                     flushSingleRow(onerow, ps);\n                 } else {\n                     // cache has more than one rows, execute as batch.\n                     int count = 0;\n                     int batchedRowsBaseIndex = 0;\n-                    Iterator itr = _batchedRows.iterator();\n+                    Iterator itr = batchedRows.iterator();\n                     while (itr.hasNext()) {\n                         onerow = (RowImpl) itr.next();\n                         if (_batchLimit == 1) {\n                             flushSingleRow(onerow, ps);\n                         } else {\n                             if (count < _batchLimit || _batchLimit == -1) {\n-                                onerow.flush(ps, _dict, _store);\n-                                ps.addBatch();\n+                                if (ps != null)\n+                                    onerow.flush(ps, _dict, _store);\n+                                addBatch(ps, onerow, count);\n                                 count++;\n                             } else {\n                                 // reach the batchLimit, execute the batch\n-                                int[] rtn = ps.executeBatch();\n-                                checkUpdateCount(rtn, batchedRowsBaseIndex);\n+                                int[] rtn = executeBatch(ps);\n+                                checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n \n                                 batchedRowsBaseIndex += _batchLimit;\n \n-                                onerow.flush(ps, _dict, _store);\n-                                ps.addBatch();\n+                                if (ps != null)\n+                                    onerow.flush(ps, _dict, _store);\n+                                addBatch(ps, onerow, count);\n                                 // reset the count to 1 for new batch\n                                 count = 1;\n                             }\n                         }\n                     }\n                     // end of the loop, execute the batch\n-                    int[] rtn = ps.executeBatch();\n-                    checkUpdateCount(rtn, batchedRowsBaseIndex);\n+                    int[] rtn = executeBatch(ps);\n+                    checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n                 }\n             } catch (SQLException se) {\n                 SQLException sqex = se.getNextException();\n@@ -183,7 +195,7 @@ protected void flushBatch() {\n                 throw SQLExceptions.getStore(sqex, ps, _dict);\n             } finally {\n                 _batchedSql = null;\n-                _batchedRows.clear();\n+                batchedRows.clear();\n                 if (ps != null) {\n                     try {\n                         ps.close();\n@@ -200,8 +212,9 @@ protected void flushBatch() {\n      */\n     private void flushSingleRow(RowImpl row, PreparedStatement ps)\n         throws SQLException {\n-        row.flush(ps, _dict, _store);\n-        int count = ps.executeUpdate();\n+        if (ps != null)\n+            row.flush(ps, _dict, _store);\n+        int count = executeUpdate(ps, row.getSQL(_dict), row);\n         if (count != 1) {\n             Object failed = row.getFailedObject();\n             if (failed != null)\n@@ -215,36 +228,100 @@ else if (row.getAction() == Row.ACTION_INSERT)\n     /*\n      * Process executeBatch function array of return counts.\n      */\n-    private void checkUpdateCount(int[] count, int batchedRowsBaseIndex)\n+    private void checkUpdateCount(int[] count, int batchedRowsBaseIndex,\n+        PreparedStatement ps)\n         throws SQLException {\n+        // value in int[] count  returned from executeBatch: \n+        //               Update          Delete        Insert\n+        // ===============================================================\n+        //               OK / Error      OK / Error    OK / Error\n+        // DB2LUW         1 / 0           1 / 0         1 / SQLException\n+        // DB2/ZOS        1 / 0           1 / 0        -2 / SQLException\n+        // Oracle        -2 / -2         -2 / -2       -2 / SQLException\n         int cnt = 0;\n+        int updateSuccessCnt = _dict.getBatchUpdateCount(ps);\n         Object failed = null;\n+        List batchedRows = getBatchedRows();\n         for (int i = 0; i < count.length; i++) {\n             cnt = count[i];\n-            RowImpl row = (RowImpl) _batchedRows.get(batchedRowsBaseIndex + i);\n+            RowImpl row = (RowImpl) batchedRows.get(batchedRowsBaseIndex + i);\n+            failed = row.getFailedObject();\n             switch (cnt) {\n             case Statement.EXECUTE_FAILED: // -3\n-                failed = row.getFailedObject();\n                 if (failed != null || row.getAction() == Row.ACTION_UPDATE)\n                     _exceptions.add(new OptimisticException(failed));\n                 else if (row.getAction() == Row.ACTION_INSERT)\n                     throw new SQLException(_loc.get(\n                         \"update-failed-no-failed-obj\",\n-                        String.valueOf(count[i]), _batchedSql).getMessage());\n+                        String.valueOf(count[i]), \n+                        row.getSQL(_dict)).getMessage());\n                 break;\n             case Statement.SUCCESS_NO_INFO: // -2\n+                if (_dict.reportsSuccessNoInfoOnBatchUpdates &&                    \n+                    updateSuccessCnt != count.length) {\n+                    // Oracle batching specifics:\n+                    // treat update/delete of SUCCESS_NO_INFO as failed case\n+                    // because:\n+                    // 1. transaction should be rolled back.\n+                    // 2. if DataCache is enabled, objects in\n+                    //    cache should be removed.\n+                    if (failed != null)\n+                        _exceptions.add(new OptimisticException(failed));\n+                    else if (row.getAction() == Row.ACTION_INSERT)\n+                        throw new SQLException(_loc.get(\n+                            \"update-failed-no-failed-obj\",\n+                            String.valueOf(count[i]), \n+                            row.getSQL(_dict)).getMessage());\n+                }\n                 if (_log.isTraceEnabled())\n                     _log.trace(_loc.get(\"batch_update_info\",\n-                        String.valueOf(cnt), _batchedSql).getMessage());\n+                        String.valueOf(cnt), \n+                        row.getSQL(_dict)).getMessage());\n                 break;\n             case 0: // no row is inserted, treats it as failed\n                 // case\n-                failed = row.getFailedObject();\n-                if ((failed != null || row.getAction() == Row.ACTION_INSERT))\n+                if (failed != null)\n+                    _exceptions.add(new OptimisticException(failed));\n+                else if (row.getAction() == Row.ACTION_INSERT)\n                     throw new SQLException(_loc.get(\n                         \"update-failed-no-failed-obj\",\n-                        String.valueOf(count[i]), _batchedSql).getMessage());\n+                        String.valueOf(count[i]), \n+                        row.getSQL(_dict)).getMessage());\n             }\n         }\n     }\n+\n+    public boolean isBatchDisabled() {\n+        return _disableBatch;\n+    }\n+\n+    public void setBatchDisabled(boolean disableBatch) {\n+        _disableBatch = disableBatch;\n+    }\n+\n+    public int getBatchLimit() {\n+        return _batchLimit;\n+    }\n+\n+    public void setBatchLimit(int batchLimit) {\n+        _batchLimit = batchLimit;\n+    }\n+\n+    public List getBatchedRows() {\n+        return _batchedRows;\n+    }\n+\n+    public String getBatchedSql() {\n+        return _batchedSql;\n+    }\n+\n+    protected void addBatch(PreparedStatement ps, RowImpl row, \n+            int count) throws SQLException {\n+        ps.addBatch();\n+    }\n+\n+    protected int[] executeBatch(PreparedStatement ps) \n+    throws SQLException {\n+        return ps.executeBatch();\n+    }\n }"},{"sha":"317671ef7aab471d6fd2c8a474fd04c5b84564b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -260,4 +260,38 @@ public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n             throw translate(re);\n         }\n     }\n+\n+    public Set getFetchInnerJoins() {\n+        try {\n+            return getJDBCDelegate().getFetchInnerJoins();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean hasFetchInnerJoin(String field) {\n+        try {\n+            return getJDBCDelegate().hasFetchInnerJoin(field);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoin(String field) {\n+        try {\n+            getJDBCDelegate().addFetchInnerJoin(field);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields) {\n+        try {\n+            getJDBCDelegate().addFetchInnerJoins(fields);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"077e61ba5396fc75cf6fa48339668088224e3060","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -207,4 +207,38 @@\n      * Convenience method to cast traversal to store-specific type.\n      */\n     public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n+\n+    /**\n+     * Returns the names of the inner fetch joins that this component will use\n+     * when loading objects. Defaults to the empty set.  This set is not\n+     * thread safe.\n+     *\n+     * @since 1.0.3\n+     */\n+    public Set getFetchInnerJoins();\n+\n+    /**\n+     * Return true if the given fully-qualified inner fetch join has been added.\n+     *\n+     * @since 1.0.3\n+     */\n+    public boolean hasFetchInnerJoin(String field);\n+\n+    /**\n+     * Adds <code>field</code> to the set of fully-qualified field names to\n+     * eagerly join when loading objects. Each class can have at most\n+     * one to-many eagerly joined fields.\n+     *\n+     * @since 1.0.3\n+     */\n+    public JDBCFetchConfiguration addFetchInnerJoin(String field);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * eagerly join when loading objects. Each class can have at most\n+     * one to-many eagerly joined fields.\n+     *\n+     * @since 1.0.3\n+     */\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields);\n }"},{"sha":"a00b5a31ed51486c07e6365c6c50ee879c3ab155","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -69,6 +69,7 @@\n         public int size = 0;\n         public int syntax = 0;\n         public Set joins = null;\n+        public Set fetchInnerJoins = null;\n         public int isolationLevel = -1;\n     }\n \n@@ -345,4 +346,37 @@ private JDBCConfiguration getJDBCConfiguration() {\n             return null;\n         return (JDBCConfiguration) conf;\n     }\n+\n+    public Set getFetchInnerJoins() {\n+        return (_state.fetchInnerJoins == null) ? Collections.EMPTY_SET\n+            : _state.fetchInnerJoins;\n+    }\n+\n+    public boolean hasFetchInnerJoin(String field) {\n+        return _state.fetchInnerJoins != null &&\n+            _state.fetchInnerJoins.contains(field);\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoin(String join) {\n+        if (StringUtils.isEmpty(join))\n+            throw new UserException(_loc.get(\"null-join\"));\n+        \n+        lock();\n+        try {\n+            if (_state.fetchInnerJoins == null)\n+                _state.fetchInnerJoins = new HashSet();\n+            _state.fetchInnerJoins.add(join);\n+        } finally {\n+            unlock();\n+        }\n+        return this;\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection joins) {\n+        if (joins == null || joins.isEmpty())\n+            return this;\n+        for (Iterator itr = joins.iterator(); itr.hasNext();)\n+            addFetchInnerJoin((String) itr.next());\n+        return this;\n+    }\n }"},{"sha":"7434efde55add1e6856a44c7c6fac1d3689dc132","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":268,"deletions":3,"changes":271,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -29,15 +29,20 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+\n import javax.sql.DataSource;\n \n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.QuerySQLCacheValue;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -60,10 +65,12 @@\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.jdbc.DelegatingStatement;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FetchGroup;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n@@ -99,7 +106,11 @@\n \n     // track the pending statements so we can cancel them\n     private Set _stmnts = Collections.synchronizedSet(new HashSet());\n-\n+    \n+    private Map _sqlCache = null;\n+    private boolean _isQuerySQLCache = true;\n+    private static final Object _nullCacheValue = new Object();\n+    \n     public StoreContext getContext() {\n         return _ctx;\n     }\n@@ -125,6 +136,9 @@ public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n \n         if (_conf.getUpdateManagerInstance().orderDirty())\n             ctx.setOrderDirtyObjects(true);\n+        \n+        _sqlCache = _conf.getQuerySQLCacheInstance();\n+        _isQuerySQLCache = _conf.isQuerySQLCacheOn();\n     }\n \n     public JDBCConfiguration getConfiguration() {\n@@ -335,6 +349,13 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n             // from the indicator is a subclass of expected type\n             sm.initialize(type, state);\n \n+            if (info != null && info.result != null) {\n+                FieldMapping mappedByFieldMapping = info.result.\n+                    getMappedByFieldMapping();\n+                Object mappedByObject = info.result.getMappedByValue();\n+                if (mappedByFieldMapping != null && mappedByObject != null)\n+                    setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+            }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n@@ -348,7 +369,19 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                 res.close();\n         }\n     }\n-    \n+\n+    protected void setMappedBy(OpenJPAStateManager sm,\n+        FieldMapping mappedByFieldMapping, Object mappedByObject) {\n+        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n+        FieldMapping[] fms = mapping.getDeclaredFieldMappings();\n+        for (int i = 0; i < fms.length; i++) {\n+            if (fms[i] == mappedByFieldMapping) {\n+                sm.storeObject(fms[i].getIndex(), mappedByObject);\n+                return;\n+            }\n+        }\n+    }\n+\n     /**\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of getting version from the result set.\n@@ -402,13 +435,86 @@ private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n     private Result getInitializeStateResult(OpenJPAStateManager sm,\n         ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n         throws SQLException {\n+        List params = new ArrayList();\n+        Select sel = newSelect(sm, mapping, fetch, subs, params);\n+        if (sel == null) return null;\n+        return sel.execute(this, fetch, params);\n+    }\n+\n+    private Select newSelect(OpenJPAStateManager sm,\n+        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs,\n+        List params) {\n+        if (!_isQuerySQLCache) \n+            return newSelect(sm, mapping, fetch, subs);       \n+           \n+        Map<SelectKey, Select> selectImplCacheMap = \n+            getCacheMapFromQuerySQLCache(JDBCStoreManager.class);\n+        JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n+        fetchClone.copy(fetch);\n+        SelectKey selKey = new SelectKey(mapping, null, fetchClone);\n+        Select sel = null;\n+        boolean found = true;\n+        Object obj = selectImplCacheMap.get(selKey);\n+        if (obj == null) {\n+            synchronized (selectImplCacheMap) {\n+                obj = selectImplCacheMap.get(selKey);\n+                if (obj == null) {\n+                    // Not found in cache, create a new select\n+                    obj = newSelect(sm, mapping, fetch, subs);\n+                    found = false;\n+                }\n+                    \n+                if (obj == null) {\n+                    // If the generated SelectImpl is null, store a generic\n+                    // known object in the cache as a placeholder. Some map \n+                    // implementations do not allow null values.\n+                    obj = _nullCacheValue;\n+                    found = false;\n+                }\n+                else if (obj != _nullCacheValue)\n+                {\n+                    sel = (Select)obj;\n+                    if (sel.getSQL() == null) {\n+                        sel.setSQL(this, fetch);\n+                        found = false;\n+                    }\n+                }\n+                if (!found) {\n+                    addToSqlCache(selectImplCacheMap, selKey, obj);\n+                }\n+            }\n+        }\n+\n+        if (obj != null && obj != _nullCacheValue)\n+            sel = (Select) obj;\n+\n+        Log log = _conf.getLog(JDBCConfiguration.LOG_JDBC);\n+        if (log.isTraceEnabled()) {\n+            if (!found)\n+                log.trace(_loc.get(\"cache-missed\", mapping, this.getClass()));\n+            else\n+                log.trace(_loc.get(\"cache-hit\", mapping, this.getClass()));\n+        }\n+\n+        if (sel == null)\n+            return null;\n+        \n+        Object oid = sm.getObjectId();\n+        Column[] cols = mapping.getPrimaryKeyColumns();\n+        sel.wherePrimaryKey(mapping, cols, cols, oid, this, \n+        \tnull, null, params);\n+        return sel;\n+    }\n+\n+    protected Select newSelect(OpenJPAStateManager sm,\n+        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs) {\n         Select sel = _sql.newSelect();\n         if (!select(sel, mapping, subs, sm, null, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN, true, false))\n             return null;\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n         sel.setExpectedResultCount(1, false);\n-        return sel.execute(this, fetch);\n+        return sel;\n     }\n \n     /**\n@@ -1419,4 +1525,163 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n             }\n         }\n     }\n+    \n+    public Map getCacheMapFromQuerySQLCache(Object key) {\n+        synchronized(_sqlCache) {\n+            //sqlCache is a map of map\n+            Map cacheMap = (Map)_sqlCache.get(key);\n+            if (cacheMap == null) {\n+                cacheMap = createSQLCache();\n+                _sqlCache.put(key, cacheMap);\n+            }\n+            return cacheMap;\n+        }\n+    }\n+    \n+    public void addToSqlCache(Map cacheMap, Object key, Object value) {\n+        cacheMap.put(key, value);\n+    }\n+    \n+    public Map createSQLCache() {\n+        QuerySQLCacheValue querySQLCache = _conf.getQuerySQLCache();\n+        return (Map)querySQLCache.newInstance();\n+    }\n+\n+    public boolean isQuerySQLCacheOn() {\n+        return _isQuerySQLCache;  \n+    }\n+    \n+    public Map getQuerySQLCache() {\n+        return _sqlCache;\n+    }\n+    \n+    public static class SelectKey {\n+        public ClassMapping mapping;\n+        public FieldMapping fm;\n+        public JDBCFetchConfiguration fetch;\n+        \n+        public SelectKey (ClassMapping mapping, FieldMapping fm, \n+            JDBCFetchConfiguration fetch) {\n+            this.mapping = mapping;\n+            this.fm = fm;\n+            this.fetch = fetch;\n+        }\n+        \n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+\n+            SelectKey selectKey = (SelectKey) o;\n+            if (fetch != null ? !equals(fetch, selectKey.fetch) :\n+                selectKey.fetch != null) return false;\n+            if (mapping != null ? !mapping.equals(selectKey.mapping) :\n+                selectKey.mapping != null) return false;\n+            if (fm != null ? !fm.equals(selectKey.fm) :\n+                selectKey.fm != null) return false;\n+            return true;\n+        }\n+        \n+        public boolean equals(JDBCFetchConfiguration fetch1,\n+        \tJDBCFetchConfiguration fetch2) {\n+            if (fetch1 == fetch2) \n+            \treturn true;\n+\n+            if (fetch1.getIsolation() != fetch2.getIsolation()) \n+            \treturn false;\n+            if (fetch1.getFetchDirection() != fetch2.getFetchDirection()) \n+            \treturn false;\n+            if (fetch1.getEagerFetchMode() != fetch2.getEagerFetchMode()) \n+            \treturn false;\n+            if (fetch1.getSubclassFetchMode() != fetch2.getSubclassFetchMode()) \n+            \treturn false;\n+            if (fetch1.getJoinSyntax() != fetch2.getJoinSyntax()) \n+            \treturn false;\n+            Set joins1 = fetch1.getJoins();\n+            Set joins2 = fetch2.getJoins();\n+            if (joins1 != null ? !joins1.equals(joins2) : joins2 != null)\n+                return false;\n+            \n+            if (fetch1.getMaxFetchDepth() != fetch2.getMaxFetchDepth()) \n+            \treturn false;\n+            if (fetch1.getReadLockLevel() != fetch2.getReadLockLevel()) \n+            \treturn false;\n+            if (fetch1.getWriteLockLevel() != fetch2.getWriteLockLevel()) \n+            \treturn false;\n+            \n+            boolean sameFetchGroup = false;\n+            boolean hasFetchGroupAll = ((JDBCFetchConfigurationImpl)fetch1).\n+            \thasFetchGroupAll();\n+            boolean hasFetchGroupAll1 = ((JDBCFetchConfigurationImpl)fetch2).\n+            \thasFetchGroupAll();\n+            if (hasFetchGroupAll && hasFetchGroupAll1) \n+                sameFetchGroup = true;\n+            else if (!hasFetchGroupAll && !hasFetchGroupAll1){\n+                boolean hasFetchGroupDefault = \n+                \t((JDBCFetchConfigurationImpl)fetch1).hasFetchGroupDefault();\n+                boolean hasFetchGroupDefault1 = \n+                \t((JDBCFetchConfigurationImpl)fetch2).hasFetchGroupDefault();\n+                if (hasFetchGroupDefault && hasFetchGroupDefault1) \n+                    sameFetchGroup = true;\n+            }\n+            \n+            if (!sameFetchGroup) {\n+                Set fetchGroups = fetch1.getFetchGroups();\n+                Set fetchGroups1 = fetch2.getFetchGroups();\n+                if (fetchGroups != null ? !fetchGroups.equals(fetchGroups1) : \n+                \tfetchGroups1 != null)\n+                    return false;\n+            }\n+            \n+            Set fields = fetch1.getFields();\n+            Set fields1 = fetch2.getFields();\n+            int size = fields.size();\n+            int size1 = fields1.size();\n+            if (size == 0 && size1 == 0)\n+                return true;\n+            else if (size != size1) \n+                return false;   \n+            \n+            if (fields != null ? !fields.equals(fields1) : fields1 != null)\n+                return false;\n+            \n+            return true;\n+        }\n+        \n+        \n+        public int hashCode() {\n+            int result = 0;\n+            result = 31 * result + (mapping != null ? mapping.hashCode() : 0);\n+            result = 31 * result + (fm != null ? fm.hashCode() : 0);\n+            result = 31 * result + fetch.getIsolation();\n+            result = 31 * result + fetch.getFetchDirection();\n+            result = 31 * result + fetch.getEagerFetchMode();\n+            result = 31 * result + fetch.getSubclassFetchMode();\n+            result = 31 * result + fetch.getJoinSyntax();\n+            Set joins = fetch.getJoins();\n+            result = 31 * result + (joins != null ? joins.hashCode() : 0);\n+            \n+            result = 31 * result + fetch.getMaxFetchDepth();\n+            result = 31 * result + fetch.getReadLockLevel();\n+            result = 31 * result + fetch.getWriteLockLevel();\n+        \t\n+            if (((JDBCFetchConfigurationImpl)fetch).hasFetchGroupAll()) \n+            \tresult = 31 * result + FetchGroup.NAME_ALL.hashCode();\n+            else {\n+                Set fetchGroups = fetch.getFetchGroups();\n+                if (((JDBCFetchConfigurationImpl)fetch).hasFetchGroupDefault() \n+                \t&& fetchGroups != null && fetchGroups.size() == 1)\n+                    result = 31 * result + FetchGroup.NAME_DEFAULT.hashCode();\n+                else {\n+                    result = 31 * result + (fetchGroups != null && \n+                        fetchGroups.size() > 0 ? \n+                        fetchGroups.hashCode() : 0);\n+                }\n+            }\n+            Set fields = fetch.getFields();\n+        \tresult = 31 * result + (fields != null &&  fields.size() > 0 ? \n+        \t\tfields.hashCode() : 0);\n+            \n+            return result;\n+        }\n+    }\n }"},{"sha":"5a5c25dea4341dae64ed1c3944608bdc19f640cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":287,"deletions":0,"changes":287,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -35,10 +35,12 @@\n import org.apache.openjpa.jdbc.kernel.exps.JDBCExpressionFactory;\n import org.apache.openjpa.jdbc.kernel.exps.JDBCStringContains;\n import org.apache.openjpa.jdbc.kernel.exps.JDBCWildcardMatch;\n+import org.apache.openjpa.jdbc.kernel.exps.PCPath;\n import org.apache.openjpa.jdbc.kernel.exps.QueryExpressionsState;\n import org.apache.openjpa.jdbc.kernel.exps.SQLEmbed;\n import org.apache.openjpa.jdbc.kernel.exps.SQLExpression;\n import org.apache.openjpa.jdbc.kernel.exps.SQLValue;\n+import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n@@ -50,18 +52,24 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.ExpressionStoreQuery;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\n import org.apache.openjpa.kernel.QueryHints;\n+import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.kernel.exps.Literal;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n \n@@ -148,6 +156,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n         }\n+        if (exps[0].fetchInnerPaths != null)\n+            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n \n         int eager = calculateEagerMode(exps[0], range.start, range.end);\n         int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n@@ -599,6 +609,8 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n         }\n+        if (exps[0].fetchInnerPaths != null)\n+            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n \n         int eager = calculateEagerMode(exps[0], range.start, range.end);\n         eager = Math.min(eager, JDBCFetchConfiguration.EAGER_JOIN);\n@@ -667,4 +679,279 @@ protected PreparedStatement prepareStatement(Connection conn, SQLBuffer sql)\n         throws SQLException {\n         return sql.prepareStatement(conn);\n     }    \n+\n+    public Object evaluate(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        int id = 0;\n+        if (value instanceof org.apache.openjpa.jdbc.kernel.exps.Val)\n+            id = ((org.apache.openjpa.jdbc.kernel.exps.Val)value).getId();\n+        else\n+            throw new UnsupportedException(); \n+\n+        switch(id) {\n+        case Val.MATH_VAL:\n+            return handleMathVal(value, ob, params, sm);\n+        case Val.CONCAT_VAL:\n+            return handleConcatVal(value, ob, params, sm);\n+        case Val.SUBSTRING_VAL:\n+            return handleSubstringVal(value, ob, params, sm);\n+        case Val.ARGS_VAL:\n+            return handleArgsVal(value, ob, params, sm);\n+        case Val.LOWER_VAL:\n+            return handleLowerVal(value, ob, params, sm);\n+        case Val.UPPER_VAL:\n+            return handleUpperVal(value, ob, params, sm);\n+        case Val.LENGTH_VAL:\n+            return handleLengthVal(value, ob, params, sm);\n+        case Val.TRIM_VAL:\n+            return handleTrimVal(value, ob, params, sm);\n+        case Val.INDEXOF_VAL:\n+            return handleIndexOfVal(value, ob, params, sm);\n+        case Val.ABS_VAL:\n+            return handleAbsVal(value, ob, params, sm);\n+        case Val.SQRT_VAL:\n+            return handleSqrtVal(value, ob, params, sm);\n+        default:    \n+            throw new UnsupportedException();\n+        }\n+    }\n+\n+    private Object handleMathVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Math mathVal =\n+            (org.apache.openjpa.jdbc.kernel.exps.Math) value;\n+        Val value1 = mathVal.getVal1();\n+        Object val1 = getValue(value1, ob, params, sm);\n+        Class c1 = value1.getType();\n+\n+        Val value2 = mathVal.getVal2();\n+        Object val2 = getValue(value2, ob, params, sm);\n+        Class c2 = value2.getType();\n+\n+        String op = mathVal.getOperation();\n+        if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.ADD)) \n+            return Filters.add(val1, c1, val2, c2);\n+        else if (op.equals(\n+                org.apache.openjpa.jdbc.kernel.exps.Math.SUBTRACT))\n+            return Filters.subtract(val1, c1, val2, c2);\n+        else if (op.equals(\n+                org.apache.openjpa.jdbc.kernel.exps.Math.MULTIPLY)) \n+            return Filters.multiply(val1, c1, val2, c2);\n+        else if (op.equals(\n+                org.apache.openjpa.jdbc.kernel.exps.Math.DIVIDE)) \n+            return Filters.divide(val1, c1, val2, c2);\n+        else if (op.equals(org.apache.openjpa.jdbc.kernel.exps.Math.MOD)) \n+            return Filters.mod(val1, c1, val2, c2);\n+        throw new UnsupportedException();\n+    }\n+\n+    private Object handleConcatVal(Object value, Object ob, Object[] params,\n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Concat concatVal =\n+            (org.apache.openjpa.jdbc.kernel.exps.Concat)value;\n+        Val value1 = concatVal.getVal1();\n+        Object val1 = getValue(value1, ob, params, sm);\n+\n+        Val value2 = concatVal.getVal2();\n+        Object val2 = getValue(value2, ob, params, sm);\n+        return new StringBuffer(100).append(val1).append(val2).toString();\n+    }\n+\n+    private Object handleSubstringVal(Object value, Object ob, Object[] params,\n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Substring substrVal =\n+            (org.apache.openjpa.jdbc.kernel.exps.Substring) value;\n+        Val value1 = substrVal.getVal1();\n+        String val1 = (String) getValue(value1, ob, params, sm);\n+\n+        Val value2 = substrVal.getVal2();\n+        Object val2 = getValue(value2, ob, params, sm);\n+\n+        org.apache.openjpa.kernel.exps.Value[] valAry2 = \n+            (org.apache.openjpa.kernel.exps.Value[]) val2;\n+        Object arg1 = getValue(valAry2[0], ob, params, sm); //starting pos\n+        Object arg2 = getValue(valAry2[1], ob, params, sm); // length\n+        int startIdx = ((Long) arg1).intValue();\n+        int length = ((Long) arg2).intValue();\n+        int endIdx = startIdx + length;\n+        return val1.substring(startIdx, endIdx);\n+    }\n+\n+    private Object handleArgsVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Args argsVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Args) value;\n+        return argsVal.getValues();\n+    }\n+\n+    private Object handleLowerVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.ToLowerCase lowerVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.ToLowerCase) value;\n+        Val val = lowerVal.getValue();\n+        return ((String) getValue(val, ob, params, sm)).toLowerCase();\n+    }\n+\n+    private Object handleUpperVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm){\n+        org.apache.openjpa.jdbc.kernel.exps.ToUpperCase upperVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.ToUpperCase) value;\n+        Val val = upperVal.getValue();\n+        return ((String) getValue(val, ob, params, sm)).toUpperCase();\n+    }\n+\n+    private Object handleLengthVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm){\n+        org.apache.openjpa.jdbc.kernel.exps.StringLength strLenVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.StringLength) value;\n+        Val val = strLenVal.getValue();\n+        return ((String) getValue(val, ob, params, sm)).length();\n+    }\n+\n+    private Object handleTrimVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Trim trimVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Trim) value;\n+        Val val = trimVal.getVal();\n+        String valStr = (String) getValue(val, ob, params, sm);\n+        Val trimChar = trimVal.getTrimChar();\n+        char trimCharObj = ((String) getValue(trimChar, ob, params, sm)).\n+            charAt(0);\n+        Boolean where = trimVal.getWhere();\n+        if (where == null) { //trim both\n+            return trimLeading(trimTrailing(valStr, trimCharObj), trimCharObj);\n+        } else if (where.booleanValue()) { // trim leading\n+            return trimLeading(valStr, trimCharObj);\n+        } else { // trim trailing\n+            return trimTrailing(valStr, trimCharObj);\n+        }\n+    }\n+\n+    private String trimLeading(String value, char trimChar) {\n+        int startIdx = 0;\n+        int len = value.length();\n+        for (int i = 0; i < len; i++) {\n+            if (value.charAt(i) != trimChar) {\n+                startIdx = i;\n+                break;\n+            }\n+        }\n+        return value.substring(startIdx);\n+    }\n+\n+    private String trimTrailing(String value, char trimChar) {\n+        int endIdx = 0;\n+        int len = value.length();\n+        for (int i = len-1; i >= 0; i--) {\n+            if (value.charAt(i) != trimChar) {\n+                endIdx = i;\n+                break;\n+            }\n+        }\n+        return value.substring(0, endIdx+1);\n+    }\n+\n+    private Object handleIndexOfVal(Object value, Object ob, Object[] params,\n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.IndexOf locateVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.IndexOf) value;\n+        String val1 = (String) getValue(locateVal.getVal1(), ob, params, sm);\n+        Val[] val2 = (Val[]) getValue(locateVal.getVal2(), ob, params, sm);\n+        String strVal = (String) getValue(val2[0], ob, params, sm);\n+        int idx = ((Long) getValue(val2[1], ob, params, sm)).intValue();\n+        return strVal.indexOf(val1, idx);\n+    }\n+\n+    private Object handleAbsVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Abs absVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Abs) value;\n+        Object val = getValue(absVal.getValue(), ob, params, sm);\n+        Class c = val.getClass();\n+        if (c == Integer.class)\n+            return new Integer(java.lang.Math.abs(((Integer) val).intValue()));\n+        else if (c == Float.class)\n+            return new Float(java.lang.Math.abs(((Float) val).floatValue()));\n+        else if (c == Double.class)\n+            return new Double(java.lang.Math.abs(((Double) val).doubleValue()));\n+        else if (c == Long.class)\n+            return new Long(java.lang.Math.abs(((Long) val).longValue()));\n+        throw new UnsupportedException();\n+    }\n+\n+    private Object handleSqrtVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Sqrt sqrtVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Sqrt) value;\n+        Object val = getValue(sqrtVal.getValue(), ob, params, sm);\n+        Class c = val.getClass();\n+        if (c == Integer.class)\n+            return new Double(java.lang.Math.sqrt(((Integer) val).\n+                doubleValue()));\n+        else if (c == Float.class)\n+            return new Double(java.lang.Math.sqrt(((Float) val).floatValue()));\n+        else if (c == Double.class)\n+            return new Double(java.lang.Math.sqrt(((Double) val).\n+                doubleValue()));\n+        else if (c == Long.class)\n+            return new Double(java.lang.Math.sqrt(((Long) val).doubleValue()));\n+        throw new UnsupportedException();\n+    }    \n+\n+    private Object getValue(Object value, Object ob, Object[] params,\n+        OpenJPAStateManager sm) {\n+        if (value instanceof PCPath) {\n+            FieldMapping fm = (FieldMapping)((PCPath) value).last();\n+            return getValue(ob, fm, sm);\n+        } else if (value instanceof Literal) {\n+            return ((Literal) value).getValue();\n+        } else if (value instanceof Constant) {\n+            return ((Constant) value).getValue(params);\n+        } else {\n+            return evaluate(value, ob, params, sm);\n+        }\n+    }\n+\n+    private Object getValue(Object ob, FieldMapping fmd,\n+        OpenJPAStateManager sm) {\n+        int i = fmd.getIndex();\n+        switch (fmd.getDeclaredTypeCode()) {\n+        case JavaTypes.BOOLEAN:\n+            return sm.fetchBooleanField(i);\n+        case JavaTypes.BYTE:\n+            return sm.fetchByteField(i);\n+        case JavaTypes.CHAR:\n+            return sm.fetchCharField(i);\n+        case JavaTypes.DOUBLE:\n+            return sm.fetchDoubleField(i);\n+        case JavaTypes.FLOAT:\n+            return sm.fetchFloatField(i);\n+        case JavaTypes.INT:\n+            return sm.fetchIntField(i);\n+        case JavaTypes.LONG:\n+            return sm.fetchLongField(i);\n+        case JavaTypes.SHORT:\n+            return sm.fetchShortField(i);\n+        case JavaTypes.STRING:\n+            return sm.fetchStringField(i);\n+        case JavaTypes.DATE:\n+        case JavaTypes.NUMBER:\n+        case JavaTypes.BOOLEAN_OBJ:\n+        case JavaTypes.BYTE_OBJ:\n+        case JavaTypes.CHAR_OBJ:\n+        case JavaTypes.DOUBLE_OBJ:\n+        case JavaTypes.FLOAT_OBJ:\n+        case JavaTypes.INT_OBJ:\n+        case JavaTypes.LONG_OBJ:\n+        case JavaTypes.SHORT_OBJ:\n+        case JavaTypes.BIGDECIMAL:\n+        case JavaTypes.BIGINTEGER:\n+        case JavaTypes.LOCALE:\n+        case JavaTypes.OBJECT:\n+        case JavaTypes.OID:\n+            return sm.fetchObjectField(i);\n+        default:\n+            throw new UnsupportedException();\n+        }\n+    }\n }"},{"sha":"346e4e474a2f3e73e11e9f4cc28a1d972fe32cfe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -419,6 +419,13 @@ protected Object getSQLObjectInternal(Object obj, Map map, Joins joins)\n             return _res.getSQLObject(obj, map);\n         }\n \n+        protected Object getStreamInternal(JDBCStore store, Object obj,\n+            int metaTypeCode, Object arg, Joins joins) throws SQLException {\n+            if (obj instanceof Column)\n+                return _res.getObject((Column) obj, arg, joins);\n+            return _res.getObject(obj, metaTypeCode, arg);\n+        }\n+        \n         protected Ref getRefInternal(Object obj, Map map, Joins joins)\n             throws SQLException {\n             if (obj instanceof Column)"},{"sha":"9ed5e5e0b2ad9056943aa7554e3884bbbb72e8b2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -98,6 +99,7 @@ public void setSequence(String seqName) {\n      * @deprecated Use {@link #setSequence}. Retained for\n      * backwards-compatibility for auto-configuration.\n      */\n+    @Deprecated\n     public void setSequenceName(String seqName) {\n         setSequence(seqName);\n     }\n@@ -147,18 +149,21 @@ public void setIncrement(int increment) {\n     /**\n      * @deprecated Retained for backwards-compatibility for auto-configuration.\n      */\n+    @Deprecated\n     public void setTableName(String table) {\n         _tableName = table;\n     }\n \n     /**\n      * @deprecated Retained for backwards-compatibility for auto-configuration.\n      */\n+    @Deprecated\n     public void setFormat(String format) {\n         _format = format;\n         _subTable = true;\n     }\n \n+    @Override\n     public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         // sequence already exists?\n         if (group.isKnownSequence(_seqName))\n@@ -175,6 +180,7 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         schema.importSequence(_seq);\n     }\n \n+    @Override\n     public JDBCConfiguration getConfiguration() {\n         return _conf;\n     }\n@@ -202,8 +208,11 @@ public void endConfiguration() {\n         Object[] subs = (_subTable) ? new Object[]{ name, _tableName }\n             : new Object[]{ name };\n         _select = MessageFormat.format(_format, subs);\n+        \n+        type = dict.nativeSequenceType;\n     }\n     \n+    @Override\n     protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n         throws SQLException {\n         Connection conn = getConnection(store);"},{"sha":"56e04ebdd0a3e90b00d355288495b2b74e816596","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -70,6 +70,8 @@ public ProjectionResultObjectProvider(SelectExecutor sel,\n     public Object getResultObject()\n         throws Exception {\n         Result res = getResult();\n+        // for a projection, Result has no base mapping\n+        res.setBaseMapping(null);\n         int idx = res.indexOf();\n         Object[] arr = new Object[_exps[idx].projections.length];\n         for (int i = 0; i < _exps[idx].projections.length; i++)"},{"sha":"8d0ff32c0c07186fb541d90e5c63c2a50ac6e4ea","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":211,"deletions":53,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -26,6 +26,9 @@\n import java.sql.Types;\n import java.util.HashMap;\n \n+import javax.transaction.NotSupportedException;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -36,10 +39,10 @@\n import org.apache.openjpa.jdbc.schema.SchemaTool;\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.RowImpl;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n-import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n@@ -48,6 +51,8 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -79,16 +84,17 @@\n     private transient Log _log = null;\n     private int _alloc = 50;\n     private int _intValue = 1;\n-    private final HashMap _stat = new HashMap();\n+    private final HashMap<ClassMapping, Status> _stat =\n+        new HashMap<ClassMapping, Status>();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n+    private String[] _uniqueColumnNames;\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n-    private int _schemasIdx = 0;    \n-\n+    \n     /**\n      * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n      * By default, the table will be placed in the first schema listed in your\n@@ -190,6 +196,20 @@ public int getInitialValue() {\n     public void setInitialValue(int intValue) {\n         _intValue = intValue;\n     }\n+    \n+    /**\n+     * Sets the names of the columns on which a unique constraint is set.\n+     * @param columnsNames are passed as a single String concatenated with\n+     * a '|' character. This method parses it back to array of Strings. \n+     */\n+    public void setUniqueColumns(String columnNames) {\n+    \t_uniqueColumnNames = (StringUtils.isEmpty(columnNames)) \n+    \t\t? null : StringUtils.split(columnNames, '|');\n+    }\n+    \n+    public String getUniqueColumns() {\n+    \treturn StringUtils.join(_uniqueColumnNames, '|');\n+    }\n \n     /**\n      * @deprecated Use {@link #setAllocate}. Retained for backwards\n@@ -234,7 +254,12 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n             if (schema == null)\n                 schema = group.addSchema(schemaName);\n             \n-            schema.importTable(_pkColumn.getTable());\n+            Table copy = schema.importTable(_pkColumn.getTable());\n+            // importTable() does not import unique constraints\n+            Unique[] uniques = _pkColumn.getTable().getUniques();\n+            for (Unique u : uniques) {\n+            \tcopy.importUnique(u);\n+            }\n             // we need to reset the table name in the column with the\n             // fully qualified name for matching the table name from the\n             // Column.\n@@ -243,7 +268,6 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n             // some databases require to create an index for the sequence table\n             _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n                     _table, _pkColumn);\n-         \n         }\n     }\n \n@@ -270,13 +294,19 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n     protected Object currentInternal(JDBCStore store, ClassMapping mapping)\n         throws Exception {\n         if (current == null) {\n-            Connection conn = getConnection(store);\n+            CurrentSequenceRunnable runnable =\n+                new CurrentSequenceRunnable(store, mapping);\n             try {\n-                long cur = getSequence(mapping, conn);\n-                if (cur != -1)\n-                    current = Numbers.valueOf(cur);\n-            } finally {\n-                closeConnection(conn);\n+                if (suspendInJTA()) {\n+                    // NotSupportedException is wrapped in a StoreException by\n+                    // the caller.\n+                    _conf.getManagedRuntimeInstance().doNonTransactionalWork(\n+                            runnable);\n+                } else {\n+                    runnable.run();\n+                }\n+            } catch (RuntimeException re) {\n+                throw (Exception) (re.getCause() == null ? re : re.getCause());\n             }\n         }\n         return super.currentInternal(store, mapping);\n@@ -311,7 +341,6 @@ protected Status getStatus(ClassMapping mapping) {\n             _stat.put(mapping, status);\n         }\n         return status;\n-            \n     }\n \n     /**\n@@ -355,56 +384,62 @@ private void buildTable() {\n             (_seqColumnName, table));\n         _seqColumn.setType(dict.getPreferredType(Types.BIGINT));\n         _seqColumn.setJavaType(JavaTypes.LONG);\n+        \n+        if (_uniqueColumnNames != null) {\n+    \t\tString uniqueName = dict.getValidUniqueName(\"UNQ\", table);\n+    \t\tUnique u = table.addUnique(uniqueName);\n+    \t\tfor (String columnName : _uniqueColumnNames) {\n+    \t\t\tif (!table.containsColumn(columnName))\n+    \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\",\n+    \t\t\t\t\tcolumnName, table.getName(), table.getColumnNames()));\n+    \t\t\tColumn col = table.getColumn(columnName);\n+    \t\t\tu.addColumn(col);\n+    \t\t}\n+        }\n+        \n     }\n \n     /**\n      * Updates the max available sequence value.\n      */\n     private void allocateSequence(JDBCStore store, ClassMapping mapping,\n-        Status stat, int alloc, boolean updateStatSeq) \n-        throws SQLException {\n-        Connection conn = getConnection(store);\n-        try { \n-            if (setSequence(mapping, stat, alloc, updateStatSeq, conn))\n-                return;\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(_loc.get(\"bad-seq-up\", _table),\n-                se, _conf.getDBDictionaryInstance());\n-        } finally {\n-            closeConnection(conn);\n-        }\n-        \n+            Status stat, int alloc, boolean updateStatSeq) throws SQLException {\n+        Runnable runnable =\n+            new AllocateSequenceRunnable(\n+                    store, mapping, stat, alloc, updateStatSeq);\n         try {\n-            // possible that we might get errors when inserting if\n-            // another thread/process is inserting same pk at same time\n-            SQLException err = null; \n-            // ### why does this not call getConnection() / closeConnection()?\n-            conn = _conf.getDataSource2(store.getContext()).getConnection();\n-            try {\n-                insertSequence(mapping, conn);\n-            } catch (SQLException se) {\n-                err = se;\n-            } finally {\n-                try { conn.close(); } catch (SQLException se) {}\n-            }\n-\n-            // now we should be able to update...\n-            conn = getConnection(store);\n-            try {\n-                if (!setSequence(mapping, stat, alloc, updateStatSeq, conn))\n-                    throw (err != null) ? err : new SQLException(_loc.get\n-                        (\"no-seq-row\", mapping, _table).getMessage());\n-            } finally {\n-                closeConnection(conn);\n+            if (suspendInJTA()) {\n+                // NotSupportedException is wrapped in a StoreException by\n+                // the caller.\n+                try {\n+                _conf.getManagedRuntimeInstance().doNonTransactionalWork(\n+                        runnable);\n+                }\n+                catch(NotSupportedException nse) { \n+                    SQLException sqlEx = new SQLException(nse.getLocalizedMessage());\n+                    sqlEx.initCause(nse);\n+                    throw sqlEx;\n+                }\n+            } else {\n+                runnable.run();\n             }\n-        } catch (SQLException se2) {\n-            throw SQLExceptions.getStore(_loc.get(\"bad-seq-up\", _table),\n-                se2, _conf.getDBDictionaryInstance());\n-        } \n+        } catch (RuntimeException re) {\n+            Throwable e = re.getCause();\n+            if(e instanceof SQLException ) \n+                throw (SQLException) e;\n+            else \n+                throw re;\n+        }\n     }\n \n     /**\n-     * Inserts the initial sequence information into the database, if any.\n+     * Inserts the initial sequence column into the database.\n+     * \n+     * @param mapping\n+     *            ClassMapping for the class whose sequence column will be\n+     *            updated\n+     * @param conn\n+     *            Connection used issue SQL statements.\n      */\n     private void insertSequence(ClassMapping mapping, Connection conn)\n         throws SQLException {\n@@ -442,7 +477,16 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n     }\n \n     /**\n-     * Return the current sequence value, or -1 if unattainable.\n+     * Get the current sequence value.\n+     * \n+     * @param mapping\n+     *            ClassMapping of the entity whose sequence value will be\n+     *            obtained.\n+     * @param conn\n+     *            Connection used issue SQL statements.\n+     * \n+     * @return The current sequence value, or <code>SEQUENCE_NOT_FOUND</code>\n+     *         if the sequence could not be found.\n      */\n     protected long getSequence(ClassMapping mapping, Connection conn)\n         throws SQLException {\n@@ -551,6 +595,8 @@ public String resolveTableName(ClassMapping mapping, Table table) {\n         String tableName;\n         if (sName == null)\n             tableName = table.getFullName();\n+        else if (table.getSchemaName() != null)\n+            tableName = table.getFullName();\n         else\n             tableName = sName + \".\" + table.getName();\n         return tableName;\n@@ -737,4 +783,116 @@ protected long getSequence(ResultSet rs, DBDictionary dict) throws SQLException\n             return -1;\n         return dict.getLong(rs, 1);\n     }\n+\n+    /**\n+     * AllocateSequenceRunnable is a runnable wrapper that will inserts the\n+     * initial sequence value into the database.\n+     */\n+    protected class AllocateSequenceRunnable implements Runnable {\n+\n+        JDBCStore store = null;\n+        ClassMapping mapping = null;\n+        Status stat = null;\n+        int alloc;\n+        boolean updateStatSeq;\n+\n+        AllocateSequenceRunnable(JDBCStore store, ClassMapping mapping,\n+                Status stat, int alloc, boolean updateStatSeq) {\n+            this.store = store;\n+            this.mapping = mapping;\n+            this.stat = stat;\n+            this.alloc = alloc;\n+            this.updateStatSeq = updateStatSeq;\n+        }\n+\n+        /**\n+         * This method actually obtains the current sequence value.\n+         * \n+         * @throws RuntimeException\n+         *             any SQLExceptions that occur when obtaining the sequence\n+         *             value are wrapped in a runtime exception to avoid\n+         *             breaking the Runnable method signature. The caller can\n+         *             obtain the \"real\" exception by calling getCause().\n+         */\n+        public void run() throws RuntimeException {\n+            Connection conn = null;\n+            SQLException err = null;\n+            try {\n+                // Try to use the store's connection.\n+                \n+                conn = getConnection(store);  \n+                boolean sequenceSet =\n+                    setSequence(mapping, stat, alloc, updateStatSeq, conn);\n+                closeConnection(conn);\n+\n+                if (!sequenceSet) {\n+                    // insert a new sequence column. \n+                    // Prefer connection2 / non-jta-data-source when inserting \n+                    // a sequence column regardless of Seq.type.\n+                    conn = _conf.getDataSource2(store.getContext())\n+                                .getConnection();\n+                    insertSequence(mapping, conn);\n+                    conn.close();\n+\n+                    // now we should be able to update using the connection per\n+                    // on the seq type.\n+                    conn = getConnection(store);\n+                    if (!setSequence(mapping, stat, alloc, updateStatSeq, conn))\n+                    {\n+                        throw (err != null) ? err : new SQLException(_loc.get(\n+                                \"no-seq-row\", mapping, _table).getMessage());\n+                    }\n+                    closeConnection(conn);\n+                }\n+            } catch (SQLException e) {\n+                if (conn != null) {\n+                    closeConnection(conn);\n+                }\n+                RuntimeException re = new RuntimeException(e.getMessage());\n+                re.initCause(e);\n+                throw re;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * CurentSequenceRunnable is a runnable wrapper which obtains the current\n+     * sequence value from the database.\n+     */\n+    protected class CurrentSequenceRunnable implements Runnable {\n+        private JDBCStore _store;\n+        private ClassMapping _mapping;\n+\n+        CurrentSequenceRunnable(JDBCStore store, ClassMapping mapping) {\n+            _store = store;\n+            _mapping = mapping;\n+        }\n+\n+        /**\n+         * This method actually obtains the current sequence value.\n+         * \n+         * @throws RuntimeException\n+         *             any SQLExceptions that occur when obtaining the sequence\n+         *             value are wrapped in a runtime exception to avoid\n+         *             breaking the Runnable method signature. The caller can\n+         *             obtain the \"real\" exception by calling getCause().\n+         */\n+        public void run() throws RuntimeException {\n+            Connection conn = null;\n+            try {\n+                conn = getConnection(_store);\n+                long cur = getSequence(_mapping, conn);\n+                if (cur != -1 ) // USE the constant\n+                    current = Numbers.valueOf(cur);\n+            } catch (SQLException sqle) {\n+                RuntimeException re = new RuntimeException(sqle.getMessage());\n+                re.initCause(sqle);\n+                throw re;\n+            } finally {\n+                if (conn != null) {\n+                    closeConnection(conn);\n+                }\n+            }\n+        }\n+    }\n }"},{"sha":"9e7f8039b6203fc526e2549d95e174e22c5c8097","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -26,7 +26,7 @@\n /**\n  * Absolute value.\n  */\n-class Abs\n+public class Abs\n     extends UnaryOp {\n \n     /**\n@@ -51,5 +51,9 @@ protected Class getType(Class c) {\n     protected String getOperator() {\n         return \"ABS\";\n     }\n+\n+    public int getId() {\n+        return Val.ABS_VAL;\n+    }\n }\n "},{"sha":"8185b98b94633358b13429608e46a11054697518","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -81,5 +81,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         visitor.enter(this);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.VAL;\n+    }\n }\n "},{"sha":"f90f42535577d2a464d504d77888c8a0277543be","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/All.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -27,7 +27,7 @@\n     extends UnaryOp {\n \n     public All(Val val) {\n-        super(val);\n+        super(val, true);\n     }\n \n     protected String getOperator() {"},{"sha":"45a04fce96e11cb2406e3dd3e4ff6ee4137c8e80","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Any.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -27,7 +27,7 @@\n     extends UnaryOp {\n \n     public Any(Val val) {\n-        super(val);\n+        super(val, true);\n     }\n \n     protected String getOperator() {"},{"sha":"d6379b90837dd4278d8d58ac1661f6b9ad8d0586","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -194,4 +194,8 @@ public void acceptVisit(ExpressionVisitor visitor) {\n             _args[i].acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.ARGS_VAL;\n+    }\n }"},{"sha":"03897fa0cf1ac4801aaffb3b3feb0114bb2ac6b4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -35,7 +35,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class Concat\n+public class Concat\n     extends AbstractVal {\n \n     private final Val _val1;\n@@ -50,6 +50,14 @@ public Concat(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -145,5 +153,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.CONCAT_VAL;\n+    }\n }\n "},{"sha":"36f4ec7123c7cbb9002c0ba9ddec566a6a848dcd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n /**\n@@ -29,7 +30,7 @@\n     extends UnaryOp {\n \n     public Distinct(Val val) {\n-        super(val);\n+        super(val, true);\n     }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {"},{"sha":"ec0f36aabb65fd80a21a40903390deaa2b0d970d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -33,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class IndexOf\n+public class IndexOf\n     extends AbstractVal {\n \n     private final Val _val1;\n@@ -49,6 +49,13 @@ public IndexOf(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -141,5 +148,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.INDEXOF_VAL;\n+    }\n }\n "},{"sha":"f08db8f6da7cf232333842a0047e88d1ae079fc5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -33,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class Math\n+public class Math\n     extends AbstractVal {\n \n     public static final String ADD = \"+\";\n@@ -57,6 +57,18 @@ public Math(Val val1, Val val2, String op) {\n         _op = op;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n+    public String getOperation() {\n+        return _op;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -142,5 +154,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.MATH_VAL;\n+    }\n }\n "},{"sha":"2fd52fd5bd273a2238060fbf317ff1c81f12ee0d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -26,7 +26,7 @@\n  *\n  * @author Abe White\n  */\n-class Null\n+public class Null\n     extends Const {\n \n     public Class getType() {"},{"sha":"e59a58252fd988c3a0b4ac36becf8678e5d2668d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -488,8 +488,13 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     }\n \n                     for (; from != null && from != to;\n-                        from = from.getJoinablePCSuperclassMapping())\n+                        from = from.getJoinablePCSuperclassMapping()) {\n+                    \tFieldMapping cast = from.getFieldMapping(pstate.field\n+                    \t\t\t.getName());\n+                    \tif (cast != null)\n+                    \t\tpstate.field = cast;\n                         pstate.joins = from.joinSuperclass(pstate.joins, false);\n+                    }\n                 }\n                 // nothing more to do from here on as we encountered an xpath action\n                 if (action.op == Action.GET_XPATH)"},{"sha":"1fe57961c3bfbc4a13618e29feaf2dcf55d0a603","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -23,7 +23,7 @@\n  *\n  * @author Abe White\n  */\n-class Sqrt\n+public class Sqrt\n     extends UnaryOp {\n \n     /**\n@@ -40,5 +40,9 @@ protected Class getType(Class c) {\n     protected String getOperator() {\n         return \"SQRT\";\n     }\n+\n+    public int getId() {\n+        return Val.SQRT_VAL;\n+    }\n }\n "},{"sha":"02535edfec268c9bcff629b098f828ef2cbd27cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringLength.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -27,7 +27,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class StringLength\n+public class StringLength\n     extends StringFunction {\n \n     private Class _cast = null;\n@@ -61,5 +61,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         getValue().appendTo(sel, ctx, state, buf, index);\n         buf.append(func.substring(idx + 3));\n     }\n+\n+    public int getId() {\n+        return Val.LENGTH_VAL;\n+    }\n }\n "},{"sha":"a7d01bde7d6ce5d4382ae93de97166e470e00973","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -33,7 +33,7 @@\n  *\n  * @author Abe White\n  */\n-class Substring\n+public class Substring\n     extends AbstractVal {\n \n     private final Val _val1;\n@@ -48,6 +48,14 @@ public Substring(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n+    public Val getVal1() {\n+        return _val1;\n+    }\n+\n+    public Val getVal2() {\n+        return _val2;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -137,5 +145,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.SUBSTRING_VAL;\n+    }\n }\n "},{"sha":"6c1dbfcf6a0d14da95d12bd0d78b6d257cda69db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -27,7 +27,7 @@\n  *\n  * @author Abe White\n  */\n-class ToLowerCase\n+public class ToLowerCase\n     extends StringFunction {\n \n     /**\n@@ -50,4 +50,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         getValue().appendTo(sel, ctx, state, buf, index);\n         buf.append(func.substring(idx + 3));\n     }\n+\n+    public int getId() {\n+        return Val.LOWER_VAL;\n+    }\n }"},{"sha":"8c176c7d4058254115a604dc1255f92639950452","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -27,7 +27,7 @@\n  *\n  * @author Abe White\n  */\n-class ToUpperCase\n+public class ToUpperCase\n     extends StringFunction {\n \n     /**\n@@ -50,5 +50,9 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         getValue().appendTo(sel, ctx, state, buf, index);\n         buf.append(func.substring(idx + 3));\n     }\n+\n+    public int getId() {\n+        return Val.UPPER_VAL;\n+    }\n }\n "},{"sha":"183ada1d22777cc7fd0f33ae60c98699567fa890","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -36,7 +36,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-class Trim\n+public class Trim\n     extends AbstractVal {\n \n     private final Val _val;\n@@ -53,6 +53,18 @@ public Trim(Val val, Val trimChar, Boolean where) {\n         _where = where;\n     }\n \n+    public Val getVal() {\n+        return _val;\n+    }\n+\n+    public Val getTrimChar() {\n+        return _trimChar;\n+    }\n+\n+    public Boolean getWhere(){\n+        return _where;\n+    }\n+\n     public ClassMetaData getMetaData() {\n         return _meta;\n     }\n@@ -195,5 +207,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _trimChar.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.TRIM_VAL;\n+    }\n }\n "},{"sha":"64e94eaf7d86f43338c4082f836446eeec48954a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -39,15 +39,21 @@\n     private final Val _val;\n     private ClassMetaData _meta = null;\n     private Class _cast = null;\n+    private boolean _noParen = false;\n \n     /**\n      * Constructor. Provide the value to operate on.\n      */\n     public UnaryOp(Val val) {\n         _val = val;\n     }\n+    \n+    public UnaryOp(Val val, boolean noParen) {\n+        _val = val;\n+        _noParen = noParen;\n+    }\n \n-    protected Val getValue() {\n+    public Val getValue() {\n         return _val;\n     }\n \n@@ -123,10 +129,11 @@ public int length(Select sel, ExpContext ctx, ExpState state) {\n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n         sql.append(getOperator());\n-        sql.append(\"(\");\n+        sql.append(_noParen ? \" \" : \"(\");\n         _val.appendTo(sel, ctx, state, sql, 0);\n         sql.addCastForParam(getOperator(), _val);\n-        sql.append(\")\");\n+        if (!_noParen)\n+            sql.append(\")\");\n     }\n \n     /**"},{"sha":"d217622facb3a91841021cbff6e8500313c03ba8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -51,6 +51,20 @@\n      */\n     public final int FORCE_OUTER = 2 << 2; \n \n+    public final int VAL = 0;\n+    public final int MATH_VAL = 1;\n+    public final int CONCAT_VAL = 2;\n+    public final int SUBSTRING_VAL = 3;\n+    public final int UPPER_VAL = 4;\n+    public final int LOWER_VAL = 5;\n+    public final int TRIM_VAL = 6;\n+    public final int LENGTH_VAL = 7;\n+    public final int LOCATE_VAL = 8;\n+    public final int ARGS_VAL = 9;\n+    public final int INDEXOF_VAL = 10;\n+    public final int ABS_VAL = 11;\n+    public final int SQRT_VAL = 12;\n+\n     /**\n      * Initialize the value. This method should recursively initialize any\n      * sub-values. \n@@ -144,4 +158,6 @@ public void appendIsNull(Select sel, ExpContext ctx, ExpState state,\n      */\n     public void appendIsNotNull(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql);\n+\n+    public int getId();\n }"},{"sha":"89a48eefee1bfc940d82a752fb71181746337d74","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":109,"deletions":33,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -31,6 +33,8 @@\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -189,34 +193,27 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n                     return null;\n             }\n         }\n-        Object oid = ApplicationIds.fromPKValues(vals, cls);\n-        \n-        /**\n-         * For polymorphic relations,\n-         * the type field in the oid is initially set to base type.\n-         * If the discriminator value is preset in the current result,\n-         * then the type field needs reset based on the discriminator value.\n-         * If the discriminator value is not present or invalid,\n-         * ignore any exceptions being thrown.\n-         */        \n+\n+        // the oid data is loaded by the base type, but if discriminator data\n+        // is present, make sure to use it to construct the actual oid instance\n+        // so that we get the correct app id class, etc\n+        ClassMapping dcls = cls;\n+        if (subs) {\n+            res.startDataRequest(cls.getDiscriminator());\n+            try {\n+                Class dtype = cls.getDiscriminator().getClass(store, cls, res);\n+                if (dtype != cls.getDescribedType())\n+                  dcls = cls.getMappingRepository().getMapping(dtype, \n+                    store.getContext().getClassLoader(), true); \n+            } catch (Exception e) {\n+                // intentionally ignored\n+            }\n+            res.endDataRequest();  \n+        }\n+        Object oid = ApplicationIds.fromPKValues(vals, dcls);\n         if (oid instanceof OpenJPAId) {\n-            Class type = cls.getDescribedType();\n-            if (!subs)\n-                // non-polymorphic relations\n-                ((OpenJPAId) oid).setManagedInstanceType(type);\n-            else if (cls.getDiscriminator() != null\n-                && !StringUtils.equals(\"none\",\n-                    cls.getDiscriminator().getStrategy().getAlias())) {\n-                // polymorphic relations\n-                res.startDataRequest(cls.getDiscriminator());\n-                try {\n-                    type = cls.getDiscriminator().getClass(store, cls, res);\n-                    ((OpenJPAId) oid).setManagedInstanceType(type, true);\n-                } catch (Exception e) {\n-                    // intentionally ignored\n-                }\n-                res.endDataRequest();  \n-            } \n+            ((OpenJPAId) oid).setManagedInstanceType(dcls.getDescribedType(), \n+                subs);\n         }\n         return oid;\n     }\n@@ -235,12 +232,19 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         // from other persistence contexts, so try to get sm directly from\n         // instance before asking our context\n         OpenJPAStateManager sm;\n-        if (ImplHelper.isManageable(obj))\n-            sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(obj,\n-                getRepository().getConfiguration()))\n-                .pcGetStateManager();\n-        else\n+        if (ImplHelper.isManageable(obj)) {\n+        \tPersistenceCapable pc = ImplHelper.toPersistenceCapable(obj,\n+                    getRepository().getConfiguration());\n+            sm = (OpenJPAStateManager) pc.pcGetStateManager();\n+            if (sm == null) {\n+            \tret = getValueFromUnmanagedInstance(obj, cols, true);\n+            } else if (sm.isDetached()) {\n+            \tobj = store.getContext().find(sm.getObjectId(), false, null);\n+            \tsm = store.getContext().getStateManager(obj);\n+            }\n+        } else {\n             sm = store.getContext().getStateManager(obj);\n+        }\n         if (sm == null)\n             return ret;\n \n@@ -254,7 +258,7 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         }\n         return ret;\n     }\n-\n+    \n     /**\n      * Return the joinable for the given column, or throw an exception if\n      * none is available.\n@@ -986,4 +990,76 @@ private ClassStrategy assertStrategy() {\n             throw new InternalException();\n         return _strategy;\n     }\n+    \n+    /**\n+     * Find the field mappings that correspond to the given columns.\n+     * \n+     * @return null if no columns are given or no field mapping uses the given\n+     * columns.\n+     */\n+    private List<FieldMapping> getFieldMappings(Column[] cols, boolean prime) {\n+    \tif (cols == null || cols.length == 0)\n+    \t\treturn null;\n+    \tList<FieldMapping> result = null;\n+    \tfor (Column c : cols) {\n+    \t\tList<FieldMapping> fms = hasColumn(c, prime);\n+    \t\tif (fms == null) continue;\n+\t\t\tif (result == null)\n+\t\t\t\tresult = new ArrayList<FieldMapping>();\n+\t\t\tfor (FieldMapping fm : fms)\n+\t\t\t\tif (!result.contains(fm))\n+\t\t\t\t\tresult.add(fm);\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    /**\n+     * Looks up in reverse to find the list of field mappings that include the\n+     * given column. Costly.\n+     * \n+     * @return null if no field mappings carry this column. \n+     */\n+    private List<FieldMapping> hasColumn(Column c, boolean prime) {\n+    \tList<FieldMapping> result = null;\n+    \tFieldMapping[] fms = (prime) ? \n+    \t\tgetPrimaryKeyFieldMappings() : getFieldMappings();\n+    \tfor (FieldMapping fm : fms) {\n+    \t\tColumn[] cols = fm.getColumns();\n+    \t\tif (contains(cols, c)) {\n+    \t\t\tif (result == null)\n+    \t\t\t\tresult = new ArrayList<FieldMapping>();\n+    \t\t\tresult.add(fm);\n+    \t\t}\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    boolean contains(Column[] cols, Column c) {\n+    \tfor (Column col : cols)\n+    \t\tif (col == c)\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    /**\n+     * Gets the field values of the given instance for the given columns.\n+     * The given columns are used to identify the fields by a reverse lookup.\n+     *  \n+     * @return a single object or an array of objects based on number of \n+     * fields the given columns represent.\n+     */\n+    private Object getValueFromUnmanagedInstance(Object obj, Column[] cols, \n+    \t\tboolean prime) {\n+    \tList<FieldMapping> fms = getFieldMappings(cols, prime);\n+    \tif (fms == null)\n+    \t\treturn null;\n+    \tif (fms.size() == 1)\n+    \t\treturn Reflection.getValue(obj, fms.get(0).getName(), true);\n+    \tObject[] result = new Object[fms.size()];\n+    \tint i = 0;\n+    \tfor (FieldMapping fm : fms) {\n+    \t\tresult[i++] = Reflection.getValue(obj, fm.getName(), true);\n+    \t}\n+    \treturn result;\n+    }\n }"},{"sha":"dae13ec743d6f888782cb4bfda85751b367d5c30","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":100,"deletions":45,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,13 +19,14 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Collection;\n-import java.util.ArrayList;\n+import java.util.Map.Entry;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n@@ -38,6 +39,7 @@\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -64,7 +66,8 @@\n     private File _file = null;\n     private int _srcType = SRC_OTHER;\n     private String[] _comments = null;\n-    private Collection _uniques = null;//Unique\n+    // Unique constraints indexed by primary or secondary table name\n+    private Map<String,List<Unique>> _uniques;\n \n     /**\n      * The described class name.\n@@ -210,9 +213,17 @@ public List getSecondaryTableJoinColumns(String tableName) {\n         }\n         return (cols == null) ? Collections.EMPTY_LIST : cols;\n     }\n+    \n+    /**\n+     * Adds a Secondary table of given name to this mapping. A secondary table \n+     * must be known before unique constraints are added to a Secondary table.\n+     */\n+    public void addSecondaryTable(String second) {\n+    \tsetSecondaryTableJoinColumns(second, null);\n+    }\n \n     /**\n-     * Declare the given class-level join.\n+     * Declare the given class-level join to the named (secondary) table.\n      */\n     public void setSecondaryTableJoinColumns(String tableName, List cols) {\n         if (cols == null)\n@@ -221,25 +232,33 @@ public void setSecondaryTableJoinColumns(String tableName, List cols) {\n             _seconds = new HashMap();\n         _seconds.put(tableName, cols);\n     }\n-\n+    \n     /**\n-     * Return the table for the given class.\n+     * Return the named table for the given class.\n      */\n-    public Table getTable(final ClassMapping cls, boolean adapt) {\n+    public Table getTable(final ClassMapping cls, String tableName, \n+    \t\tboolean adapt) {\n         Table t = createTable(cls, new TableDefaults() {\n             public String get(Schema schema) {\n                 // delay this so that we don't do schema reflection for unique\n                 // table name unless necessary\n                 return cls.getMappingRepository().getMappingDefaults().\n                     getTableName(cls, schema);\n             }\n-        }, _schemaName, _tableName, adapt);\n+        }, _schemaName, tableName, adapt);\n         t.setComment(cls.getTypeAlias() == null\n             ? cls.getDescribedType().getName()\n             : cls.getTypeAlias());\n         return t;\n     }\n-\n+    \n+    /**\n+     * Return the primary table for the given class.\n+     */\n+    public Table getTable(final ClassMapping cls, boolean adapt) {\n+    \treturn getTable(cls, _tableName, adapt);\n+    }\n+    \n     /**\n      * Return the datastore identity columns for the given class, based on the\n      * given templates.\n@@ -340,51 +359,87 @@ public void copy(MappingInfo info) {\n                     _seconds.put(key, cinfo._seconds.get(key));\n             }\n         }\n-        if (cinfo._uniques != null) \n-           _uniques = new ArrayList(cinfo._uniques);\n-    }\n+        if (cinfo._uniques != null) {\n+        \tif (_uniques == null)\n+        \t\t_uniques = new HashMap<String, List<Unique>>();\n+        \tfor (Entry<String, List<Unique>> entry : cinfo._uniques.entrySet())\n+        \t\tif (!_uniques.containsKey(entry.getKey()))\n+        \t\t\t_uniques.put(entry.getKey(), entry.getValue());\n+        }\n \n-    public void addUnique(Unique unique) {\n-        if (unique == null)\n-            return;\n+    }\n+    \n+    /**\n+     * Add a unique constraint for the given table.\n+     * @param table must be primary table or secondary table name added a \n+     * priori to this receiver.\n+     * @param unique the unique constraint. null means no-op.\n+     */\n+    public void addUnique(String table, Unique unique) {\n+    \tif (!StringUtils.equals(_tableName, table) &&\n+    \t   (_seconds == null || !_seconds.containsKey(table))) {\n+    \t   \t\tthrow new UserException(_loc.get(\"unique-no-table\", \n+    \t   \t\t\tnew Object[]{table, _className, _tableName, \n+    \t   \t\t\t\t((_seconds == null) ? \"\" : _seconds.keySet())}));\n+    \t}\n+    \tif (unique == null)\n+    \t\treturn;\n         if (_uniques == null)\n-            _uniques = new ArrayList();\n-        _uniques.add(unique);\n+            _uniques = new HashMap<String,List<Unique>>();\n+        unique.setTableName(table);\n+        List<Unique> uniques = _uniques.get(table);\n+        if (uniques == null) {\n+        \tuniques = new ArrayList<Unique>();\n+        \tuniques.add(unique);\n+        \t_uniques.put(table, uniques);\n+        } else {\n+        \tuniques.add(unique);\n+        }\n     }\n     \n-    public Unique[] getUniques() {\n-        return (_uniques == null) ? new Unique[0] :\n-            (Unique[])_uniques.toArray(new Unique[_uniques.size()]);\n+    /**\n+     * Get the unique constraints of the given primary or secondary table.\n+     */\n+    public Unique[] getUniques(String table) {\n+        if (_uniques == null || _uniques.isEmpty() \n+        || _uniques.containsKey(table))\n+            return new Unique[0];\n+        List<Unique> uniques = _uniques.get(table);\n+        return uniques.toArray(new Unique[uniques.size()]);\n     }\n     \n-    public Unique[] getUniques(ClassMapping cm, boolean adapt) {\n+    /**\n+     * Get all the unique constraints associated with both the primary and/or \n+     * secondary tables.\n+     * \n+     */\n+    public Unique[] getUniques(MetaDataContext cm, boolean adapt) {\n         if (_uniques == null || _uniques.isEmpty())\n             return new Unique[0];\n-        \n-        Iterator uniqueConstraints = _uniques.iterator();\n-        Table table = cm.getTable();\n-        Collection result = new ArrayList();\n-        while (uniqueConstraints.hasNext()) {\n-            Unique template = (Unique) uniqueConstraints.next();\n-            Column[] templateColumns = template.getColumns();\n-            Column[] uniqueColumns = new Column[templateColumns.length];\n-            boolean missingColumn = true;\n-            for (int i=0; i<uniqueColumns.length; i++) {\n-                String columnName = templateColumns[i].getName();\n-                Column uniqueColumn = table.getColumn(columnName);\n-                missingColumn = (uniqueColumn == null);\n-                if (missingColumn) {\n-                    throw new UserException(_loc.get(\"missing-unique-column\", \n-                        cm, table, columnName));\n-                }\n-                uniqueColumns[i] = uniqueColumn;\n-            }\n-            Unique unique = super.createUnique(cm, \"unique\", template, \n-                uniqueColumns, adapt);\n-            if (unique != null)\n-                result.add(unique);\n+        List<Unique> result = new ArrayList<Unique>();\n+        for (String tableName : _uniques.keySet()) {\n+        \tList<Unique> uniqueConstraints = _uniques.get(tableName);\n+        \tfor (Unique template : uniqueConstraints) {\n+        \t\tColumn[] templateColumns = template.getColumns();\n+        \t\tColumn[] uniqueColumns = new Column[templateColumns.length];\n+        \t\tTable table = getTable((ClassMapping)cm, tableName, adapt);\n+        \t\tfor (int i=0; i<uniqueColumns.length; i++) {\n+        \t\t\tString columnName = templateColumns[i].getName();\n+        \t\t\tif (!table.containsColumn(columnName)) {\n+        \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\", \n+                           new Object[]{cm, columnName, tableName, \n+        \t\t\t\t\t\tArrays.toString(table.getColumnNames())}));\n+        \t\t\t}\n+        \t\t\tColumn uniqueColumn = table.getColumn(columnName);\n+        \t\t\tuniqueColumns[i] = uniqueColumn;\n+        \t\t}\n+        \t\tUnique unique = createUnique(cm, \"unique\", template,  \n+        \t\t\t\tuniqueColumns, adapt);\n+        \t\tif (unique != null)\n+        \t\t\tresult.add(unique);\n+        \t}\n         }\n-        return (Unique[]) result.toArray(new Unique[result.size()]);\n+        return result.toArray(new Unique[result.size()]);\n     }   \n     \n     public File getSourceFile() {"},{"sha":"7cf3c535daf986d2581366017d5e408d49c9a788","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -70,7 +70,8 @@\n     private Index _idx = null;\n     private boolean _outer = false;\n     private int _fetchMode = Integer.MAX_VALUE;\n-\n+    private Unique[] _joinTableUniques; // Unique constraints on JoinTable\n+    \n     /**\n      * Constructor.\n      */\n@@ -183,6 +184,14 @@ public void setJoinUnique(Unique unq) {\n         _unq = unq;\n     }\n \n+    public Unique[] getJoinTableUniques() {\n+    \treturn _joinTableUniques;\n+    }\n+    \n+    public void setJoinTableUniques(Unique[] unqs) {\n+    \t_joinTableUniques = unqs;\n+    }\n+    \n     /**\n      * Index on join foreign key columns.\n      */\n@@ -252,6 +261,13 @@ public void refSchemaComponents() {\n         _val.refSchemaComponents();\n         _key.refSchemaComponents();\n         _elem.refSchemaComponents();\n+        if (_joinTableUniques != null) {\n+        \tfor (Unique joinUnique : _joinTableUniques) {\n+        \t\tfor (Column col : joinUnique.getColumns()) {\n+        \t\t\tcol.ref();\n+        \t\t}\n+        \t}\n+        }\n     }\n \n     /**\n@@ -538,6 +554,7 @@ public void mapJoin(boolean adapt, boolean joinRequired) {\n             _io = _info.getColumnIO();\n             _outer = _info.isJoinOuter();\n             _unq = _info.getJoinUnique(this, false, adapt);\n+            _joinTableUniques = _info.getJoinTableUniques(this, false, adapt);\n             _idx = _info.getJoinIndex(this, adapt);\n         }\n     }\n@@ -863,6 +880,11 @@ public Joins join(Joins joins, boolean forceOuter, boolean toMany) {\n     public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n+    \t// OPENJPA-662: Version fields have NoneFieldStrategy -- hence they\n+    \t// need special treatment\n+    \tif (isVersion()) {\n+    \t\treturn getDefiningMapping().getVersion().load(null, store, res);\n+    \t}\n         return assertStrategy().loadProjection(store, fetch, res, joins);\n     }\n "},{"sha":"fca07397ed24d48bd4b90dac89711aaf1acf34f6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"modified","additions":65,"deletions":1,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n \n import org.apache.openjpa.jdbc.schema.Column;\n@@ -31,7 +33,9 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Information about the mapping from a field to the schema, in raw form.\n@@ -40,6 +44,7 @@\n  * with the relevant pieces of information filled in.\n  *\n  * @author Abe White\n+ * @author Pinaki Poddar\n  */\n public class FieldMappingInfo\n     extends MappingInfo\n@@ -53,6 +58,7 @@\n     private Column _orderCol = null;\n     private boolean _canOrderCol = true;\n     private String[] _comments = null;\n+    private List<Unique> _joinTableUniques; // Unique constraints on the JoinTable\n \n     /**\n      * The user-supplied name of the table for this field.\n@@ -185,8 +191,47 @@ public Unique getJoinUnique(FieldMapping field, boolean def,\n                 getJoinUnique(field, fk.getTable(), fk.getColumns());\n         return createUnique(field, \"join\", unq, fk.getColumns(), adapt);\n     }\n-\n+    \n+    /**\n+     * Add Unique Constraint to the Join Table.\n+     */\n+    public void addJoinTableUnique(Unique u) {\n+    \tif (_joinTableUniques == null)\n+    \t\t_joinTableUniques = new ArrayList<Unique>();\n+    \t_joinTableUniques.add(u);\n+    }\n+    \n     /**\n+     * Get the unique constraints associated with the Sequence table.\n+     */\n+    public Unique[] getJoinTableUniques(FieldMapping field, boolean def, \n+    \t\tboolean adapt) {\n+        return getUniques(field, _joinTableUniques, def, adapt);\n+    }   \n+    \n+    private Unique[] getUniques(FieldMapping field, List<Unique> uniques, \n+    \t\tboolean def, boolean adapt) {\n+        if (uniques == null || uniques.isEmpty())\n+            return new Unique[0];\n+        Collection<Unique> result = new ArrayList<Unique>();\n+        for (Unique template : uniques) {\n+            Column[] templateColumns = template.getColumns();\n+            Column[] uniqueColumns = new Column[templateColumns.length];\n+            Table table = getTable(field, true, adapt);\n+            for (int i=0; i<uniqueColumns.length; i++) {\n+                String columnName = templateColumns[i].getName();\n+                Column uniqueColumn = table.getColumn(columnName);\n+                uniqueColumns[i] = uniqueColumn;\n+            }\n+            Unique unique = createUnique(field, \"unique\", template,  \n+                uniqueColumns, adapt);\n+            if (unique != null)\n+                result.add(unique);\n+        }\n+        return result.toArray(new Unique[result.size()]);\n+    }   \n+    \n+   /**\n      * Index on the field join.\n      */\n     public Index getJoinIndex(FieldMapping field, boolean adapt) {\n@@ -261,6 +306,7 @@ public void syncWith(FieldMapping field) {\n \n         syncIndex(field, field.getJoinIndex());\n         syncUnique(field, field.getJoinUnique());\n+        syncJoinTableUniques(field, field.getJoinTableUniques());\n         syncOrderColumn(field);\n         syncStrategy(field);\n     }\n@@ -290,6 +336,24 @@ public void syncOrderColumn(FieldMapping field) {\n         else\n             _orderCol = null;\n     }\n+    \n+    /**\n+     * Sets internal constraint information to match given mapped constraint.\n+     */\n+    protected void syncJoinTableUniques(MetaDataContext context, Unique[] unqs) {\n+        if (unqs == null) {\n+            _joinTableUniques = null;\n+            return;\n+        }\n+        _joinTableUniques = new ArrayList<Unique>();\n+        for (Unique unique:unqs) {\n+        \tUnique copy = new Unique();\n+        \tcopy.setName(unique.getName());\n+        \tcopy.setDeferred(unique.isDeferred());\n+        \t_joinTableUniques.add(unique);\n+        }\n+    }\n+\n \n     public boolean hasSchemaComponents() {\n         return super.hasSchemaComponents() || _tableName != null"},{"sha":"a0937361d1ad9ce7c2d759b457007e0aa037481d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -527,13 +527,16 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n      */\n     private void setIOFromColumnFlags(Column col, int i) {\n         if (col == null || (!col.getFlag(Column.FLAG_UNINSERTABLE)\n-            && !col.getFlag(Column.FLAG_UNUPDATABLE)))\n+            && !col.getFlag(Column.FLAG_UNUPDATABLE)\n+            && !col.isNotNull()))\n             return;\n \n         if (_io == null)\n             _io = new ColumnIO();\n         _io.setInsertable(i, !col.getFlag(Column.FLAG_UNINSERTABLE));\n         _io.setUpdatable(i, !col.getFlag(Column.FLAG_UNUPDATABLE));\n+        _io.setNullInsertable(i, !col.isNotNull());\n+        _io.setNullUpdatable(i, !col.isNotNull());\n     }\n \n     /**\n@@ -927,7 +930,12 @@ protected Unique createUnique(MetaDataContext context, String prefix,\n                     context, dict.platform));\n             deferred = false;\n         }\n-\n+        \n+        if (StringUtils.isEmpty(name)) {\n+        \tname = cols[0].getName();\n+        \tname = repos.getDBDictionary().getValidUniqueName(name, table);\n+        }\n+        \n         Unique unq = table.addUnique(name);\n         unq.setDeferred(deferred);\n         unq.setColumns(cols);\n@@ -1534,7 +1542,7 @@ protected void syncUnique(MetaDataContext context, Unique unq) {\n         _unq.setName(unq.getName());\n         _unq.setDeferred(unq.isDeferred());\n     }\n-\n+    \n     /**\n      * Sets internal constraint and column information to match given mapped\n      * constraint."},{"sha":"bbd7ef52637c9fc04b9d1e00427ef8c4fd3642cf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -24,6 +24,7 @@\n import java.sql.Types;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -312,6 +313,20 @@ protected void prepareMapping(ClassMetaData meta) {\n         ClassMapping sup = mapping.getPCSuperclassMapping();\n         if (sup != null && (mapping.getResolve() & MODE_MAPPING) != 0)\n             return;\n+        \n+        // if this mapping is not for a managed interface, ensure that if \n+        // we have an inheritance hierarchy there is a default strategy\n+        // applied to the root class\n+        if (!mapping.getDescribedType().isInterface() &&\n+            !mapping.isEmbeddedOnly()) {\n+            // if an inheritance strategy has not been set on this mapping\n+            // determine if needs one and if so, set it\n+            if (!hasInheritanceStrategy(mapping)) {\n+                ClassMapping baseMapping = findBaseClassMapping(mapping); \n+                if (baseMapping != null)\n+                    setDefaultInheritanceStrategy(baseMapping);\n+            }            \n+        }\n \n         // define superclass fields after mapping class, so we can tell whether\n         // the class is mapped and needs to redefine abstract superclass fields\n@@ -1256,4 +1271,77 @@ public void endConfiguration()\n             ((Configurable) _schema).endConfiguration();\n         }            \n     }\n+    \n+    /**\n+     * Finds the base class mapping for the specified mapping.  Loads all\n+     * persistent types if necessary, since all persistent subclasses of this\n+     * mapping may not have been resolved before this method is called.\n+     */\n+    protected ClassMapping findBaseClassMapping(ClassMapping mapping) {        \n+        ClassMapping baseMapping = null;\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\n+        if (sup == null) {\n+            // no superclass metadata was provided.  check to see if this class\n+            // has any persistent subclasses.\n+            if (mapping.getPCSubclasses().length > 0)\n+                baseMapping = mapping;\n+            else {\n+                // persistent subclasses may not have been resolved yet.  \n+                // run through the persistent types to see if any of them \n+                // or their superclass is a subclass of this class.\n+                Collection classes = loadPersistentTypes(false, \n+                        mapping.getEnvClassLoader());\n+                Class cls;\n+                for (Iterator itr = classes.iterator(); itr.hasNext();) {\n+                    cls = (Class) itr.next();\n+                    Class supcl = cls.getSuperclass();\n+                    while (supcl != null && \n+                           !supcl.getClass().equals(java.lang.Object.class)) {\n+                        if (!supcl.isInterface() &&\n+                            supcl.equals(mapping.getDescribedType())) {\n+                            baseMapping = mapping;    \n+                            break;\n+                        }\n+                        supcl = supcl.getSuperclass();\n+                    }\n+                    if (baseMapping != null) break;\n+                }\n+            }\n+        } else if (!sup.getDescribedType().isInterface()) {\n+            // if the superclass is not a managed interface, find the root\n+            // superclass and get its mapping info\n+            ClassMapping supcm = sup;\n+            while (supcm != null && \n+                    !supcm.getDescribedType().isInterface() &&\n+                    !supcm.isEmbeddedOnly()) {\n+                ClassMapping supcm2 = supcm.getPCSuperclassMapping();\n+                if (supcm2 == null)\n+                    baseMapping = supcm;\n+                supcm = supcm2;\n+            }\n+        }\n+        return baseMapping;\n+    }\n+   \n+    /**\n+     * If an inheritance strategy has not been set on this mapping, set it\n+     * to the default (flat).  This method should be called before strategies\n+     * are created for the specified mapping.\n+     */\n+    protected void setDefaultInheritanceStrategy(ClassMapping mapping) {\n+        ClassMappingInfo info = mapping.getMappingInfo();\n+        if (info != null && info.getHierarchyStrategy() == null)\n+            info.setHierarchyStrategy(FlatClassStrategy.ALIAS);        \n+    } \n+    \n+    /**\n+     * Determines whether an inhertance strategy has been set on the\n+     * specified mapping.\n+     */\n+    protected boolean hasInheritanceStrategy(ClassMapping mapping) {\n+        ClassMappingInfo info = mapping.getMappingInfo();\n+        if (info != null && info.getHierarchyStrategy() != null)\n+            return true;\n+        return false;        \n+    }\n }"},{"sha":"981d4ae060957632b7e4b17704e982f48591dab0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,11 +19,16 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCSeqValue;\n import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\n import org.apache.openjpa.jdbc.kernel.ValueTableJDBCSeq;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.meta.SequenceMetaData;\n \n@@ -55,13 +60,15 @@\n     private static final String PROP_SEQUENCE_COL = \"SequenceColumn\";\n     private static final String PROP_PK_COL = \"PrimaryKeyColumn\";\n     private static final String PROP_PK_VALUE = \"PrimaryKeyValue\";\n+    private static final String PROP_UNIQUE = \"UniqueColumns\";\n \n     private File _mapFile = null;\n     private String _table = null;\n     private String _sequenceColumn = null;\n     private String _primaryKeyColumn = null;\n     private String _primaryKeyValue = null;\n-\n+    private String[] _uniqueColumns   = null;\n+    \n     public SequenceMapping(String name, MappingRepository repos) {\n         super(name, repos);\n     }\n@@ -138,6 +145,14 @@ public void setPrimaryKeyValue(String primaryKeyValue) {\n         _primaryKeyValue = primaryKeyValue;\n     }\n \n+    public void setUniqueColumns(String[] cols) {\n+    \t_uniqueColumns = cols;\n+    }\n+    \n+    public String[] getUniqueColumns() {\n+    \treturn _uniqueColumns;\n+    }\n+    \n     protected PluginValue newPluginValue(String property) {\n         return new JDBCSeqValue(property);\n     }\n@@ -148,5 +163,11 @@ protected void addStandardProperties(StringBuffer props) {\n         appendProperty(props, PROP_SEQUENCE_COL, _sequenceColumn);\n         appendProperty(props, PROP_PK_COL, _primaryKeyColumn);\n         appendProperty(props, PROP_PK_VALUE, _primaryKeyValue);\n+        // Array of unique column names are passed to configuration\n+        // as a single string \"x|y|z\". The configurable (TableJDBCSeq) must\n+        // parse it back.\n+        if (_uniqueColumns != null && _uniqueColumns.length > 0)\n+        \tappendProperty(props, PROP_UNIQUE, \n+        \t\t\tStringUtils.join(_uniqueColumns,'|'));\n     }\n }"},{"sha":"7a60a2d72c1179e8f6993d8ffaf9a33fb1baf868","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -338,9 +338,9 @@ public boolean select(Select sel, ClassMapping mapping) {\n         return assertStrategy().select(sel, mapping);\n     }\n \n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException {\n-        assertStrategy().load(sm, store, res);\n+        return assertStrategy().load(sm, store, res);\n     }\n \n     public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {"},{"sha":"425e44c01bff5f8aa33e25e30571c3107b95b076","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -53,7 +53,7 @@\n     /**\n      * Load data.\n      */\n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException;\n \n     /**"},{"sha":"426e2231e6455653e549182416dd597a1497cb69","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -53,8 +53,9 @@ public boolean select(Select sel, ClassMapping mapping) {\n         return false;\n     }\n \n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException {\n+    \treturn null;\n     }\n \n     public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {\n@@ -63,7 +64,7 @@ public void afterLoad(OpenJPAStateManager sm, JDBCStore store) {\n     public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n         boolean updateVersion)\n         throws SQLException {\n-        return false;\n+        return !updateVersion;\n     }\n \n     public int compareVersion(Object v1, Object v2) {"},{"sha":"b23c9164989350068e7e9d6b9318b7cd922e2ed4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -178,28 +178,32 @@ public boolean select(Select sel, ClassMapping mapping) {\n         return true;\n     }\n \n-    public void load(OpenJPAStateManager sm, JDBCStore store, Result res)\n+    public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n         throws SQLException {\n         // typically if one version column is in the result, they all are, so\n         // optimize by checking for the first one before doing any real work\n         Column[] cols = vers.getColumns();\n         if (!res.contains(cols[0]))\n-            return;\n+            return null;\n \n         Object version = null;\n         if (cols.length > 0)\n             version = new Object[cols.length];\n         Object cur;\n         for (int i = 0; i < cols.length; i++) {\n             if (i > 0 && !res.contains(cols[i]))\n-                return;\n+                return null;\n             cur = res.getObject(cols[i], -1, null);\n             if (cols.length == 1)\n                 version = cur;\n             else\n                 ((Object[]) version)[i] = cur;\n         }\n-        sm.setVersion(version);\n+        // OPENJPA-662 Allow a null StateManager because this method may just be\n+        // invoked to get the result of projection query\n+        if (sm != null)\n+        \tsm.setVersion(version);\n+        return version;\n     }\n \n     public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,"},{"sha":"57232a4bc772ea16b0d5bdd503b91afe1177d629","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -410,14 +410,13 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         //### we selected the embedded object fields and load the object\n         //### immediately; this will be inefficient when the embedded object\n         //### was not selected after all\n-\n         StoreContext ctx = store.getContext();\n         OpenJPAStateManager em = ctx.embed(null, null, sm, field);\n         sm.storeObject(field.getIndex(), em.getManagedInstance());\n \n         FieldMapping[] fields = field.getEmbeddedMapping().getFieldMappings();\n         Object eres, processed;\n-        boolean loaded = false;\n+        boolean needsLoad = false;\n         for (int i = 0; i < fields.length; i++) {\n             eres = res.getEager(fields[i]);\n             res.startDataRequest(fields[i]);\n@@ -429,18 +428,24 @@ else if (eres != null) {\n                         fields[i].loadEagerParallel(em, store, fetch, eres);\n                     if (processed != eres)\n                         res.putEager(fields[i], processed);\n-                } else\n+                } else {\n                     fields[i].load(em, store, fetch, res);\n-                loaded |= em.getLoaded().get(i);\n+                }\n+                needsLoad = needsLoad || (!em.getLoaded().get(i) && \n+                    fetch.requiresFetch(fields[i])\n+                        == FetchConfiguration.FETCH_LOAD);\n             } finally {\n                 res.endDataRequest();\n             }\n         }\n \n-        // after loading everything from result, load the rest of the\n-        // configured fields\n-        if (loaded)\n-            em.load(fetch);\n+        // After loading everything from result, load the rest of the\n+        // configured fields if anything is missing.\n+        if (needsLoad && \n+            fetch.requiresFetch(field.getFieldMetaData()) == \n+                JDBCFetchConfiguration.FETCH_LOAD) {\n+          em.load(fetch);\n+        }\n     }\n \n     /**"},{"sha":"1b82463902dd1a19b69e710bb451bdc68f403ed4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Mapping for a single-valued field that delegates to a {@link ValueHandler}.\n@@ -122,19 +123,27 @@ else if (_cols.length == 1)\n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (row != null) {\n+            Object value = sm.fetch(field.getIndex());\n+            if (!HandlerStrategies.set(field, value, store, row, _cols, _io, \n+            \tfield.getNullValue() == FieldMapping.NULL_NONE))\n+            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+            \t\tthrow new UserException(_loc.get(\"cant-set-value\", \n+            \t\t\t\trow.getFailedObject(), field, value));\n+        }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (row != null){\n+            Object value = sm.fetch(field.getIndex());\n+            if (!HandlerStrategies.set(field, value, store, row, _cols, _io,\n+                 field.getNullValue() == FieldMapping.NULL_NONE)) \n+            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+            \tthrow new UserException(_loc.get(\"cant-set-value\", \n+            \t\t\trow.getFailedObject(), field, value));\n+        }\n     }\n \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n@@ -157,7 +166,8 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n \n         if (sm != null && sm.getIntermediate(field.getIndex()) != null)\n             return -1;\n-        if (sel.isDistinct() && _lob && !field.isPrimaryKey())\n+        if (_lob && !field.isPrimaryKey() && (sel.isDistinct() ||\n+                eagerMode == JDBCFetchConfiguration.EAGER_NONE))\n             return -1;\n         sel.select(_cols, field.join(sel));\n         return 1;"},{"sha":"12f04c3752ca424fa2453185af23d749cff88e57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n@@ -35,6 +36,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Utility methods for strategies using value handlers.\n@@ -78,28 +80,38 @@\n \n     /**\n      * Set the given value into the given row.\n+     * Return false if the given value can not be set, for example, due to \n+     * null constraints on the columns. \n      */\n-    public static void set(ValueMapping vm, Object val, JDBCStore store,\n+    public static boolean set(ValueMapping vm, Object val, JDBCStore store,\n         Row row, Column[] cols, ColumnIO io, boolean nullNone)\n         throws SQLException {\n         if (!canSetAny(row, io, cols))\n-            return;\n+            return false;\n \n         ValueHandler handler = vm.getHandler();\n         val = handler.toDataStoreValue(vm, val, store);\n+        boolean isSet = false;\n         if (val == null) {\n             for (int i = 0; i < cols.length; i++)\n-                if (canSet(row, io, i, true))\n+                if (canSet(row, io, i, true)) {\n+                    isSet = true;\n                     set(row, cols[i], null, handler, nullNone);\n+                }\n         } else if (cols.length == 1) {\n-            if (canSet(row, io, 0, val == null))\n+            if (canSet(row, io, 0, val == null)) {\n+                isSet = true;\n                 set(row, cols[0], val, handler, nullNone);\n+            }\n         } else {\n             Object[] vals = (Object[]) val;\n             for (int i = 0; i < vals.length; i++)\n-                if (canSet(row, io, i, vals[i] == null))\n+                if (canSet(row, io, i, vals[i] == null)) {\n+                    isSet = true;\n                     set(row, cols[i], vals[i], handler, nullNone);\n+                }\n         }\n+        return isSet;\n     }\n \n     /**\n@@ -108,9 +120,9 @@ public static void set(ValueMapping vm, Object val, JDBCStore store,\n     private static boolean canSet(Row row, ColumnIO io, int i,\n         boolean nullValue) {\n         if (row.getAction() == Row.ACTION_INSERT)\n-            return io.isInsertable(i, nullValue);\n+        \treturn io.isInsertable(i, nullValue);\n         if (row.getAction() == Row.ACTION_UPDATE)\n-            return io.isUpdatable(i, nullValue);\n+        \treturn io.isUpdatable(i, nullValue);\n         return true;\n     }\n "},{"sha":"9a1a0ad24cb6e5cea86dc0c8e12d647e9c7500cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"modified","additions":57,"deletions":32,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -28,11 +28,13 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\r\n import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\r\n import org.apache.openjpa.jdbc.sql.Result;\r\n import org.apache.openjpa.jdbc.sql.Row;\r\n import org.apache.openjpa.jdbc.sql.RowManager;\r\n import org.apache.openjpa.jdbc.sql.Select;\r\n import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n \r\n /**\r\n  * Direct mapping from a stream value to a column.\r\n@@ -43,6 +45,7 @@\n public class LobFieldStrategy extends AbstractFieldStrategy {\r\n \r\n     private int fieldType;\r\n+    private boolean isBlob;\r\n \r\n     public void map(boolean adapt) {\r\n         assertNotMappedBy();\r\n@@ -57,8 +60,9 @@ public void map(boolean adapt) {\n         vinfo.assertNoForeignKey(field, !adapt);\r\n         Column tmpCol = new Column();\r\n         tmpCol.setName(field.getName());\r\n-        tmpCol.setJavaType(field.getTypeCode());\r\n         tmpCol.setType(fieldType);\r\n+        tmpCol.setJavaType(field.getTypeCode());\r\n+        \r\n         tmpCol.setSize(-1);\r\n \r\n         Column[] cols = vinfo.getColumns(field, field.getName(),\r\n@@ -74,24 +78,25 @@ public Boolean isCustomInsert(OpenJPAStateManager sm, JDBCStore store) {\n         return null;\r\n     }\r\n \r\n+    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Select sel = createSelect(sm, store);\r\n+        store.getDBDictionary().deleteStream(store, sel);\r\n+    }\r\n+    \r\n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n         throws SQLException {\r\n         Object ob = toDataStoreValue(sm.fetchObjectField\r\n             (field.getIndex()), store);\r\n         Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\r\n         if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n-            if (ob != null) {\r\n-                if (isBlob()) {\r\n-                    store.getDBDictionary().insertBlobForStreamingLoad\r\n-                        (row, field.getColumns()[0]);\r\n-                } else {\r\n-                    store.getDBDictionary().insertClobForStreamingLoad\r\n-                        (row, field.getColumns()[0]);\r\n-                }\r\n+            Select sel = createSelect(sm, store);\r\n+            if (isBlob) {\r\n+                store.getDBDictionary().insertBlobForStreamingLoad\r\n+                    (row, field.getColumns()[0], store, ob, sel);\r\n             } else {\r\n-                Column col = field.getColumns()[0];\r\n-                col.setType(Types.OTHER);\r\n-                row.setNull(col);\r\n+                store.getDBDictionary().insertClobForStreamingLoad\r\n+                    (row, field.getColumns()[0], ob);\r\n             }\r\n         }\r\n     }\r\n@@ -103,7 +108,7 @@ public void customInsert(OpenJPAStateManager sm, JDBCStore store)\n         if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n             if (ob != null) {\r\n                 Select sel = createSelect(sm, store);\r\n-                if (isBlob()) {\r\n+                if (isBlob) {\r\n                     store.getDBDictionary().updateBlob\r\n                         (sel, store, (InputStream)ob);\r\n                 } else {\r\n@@ -113,26 +118,42 @@ public void customInsert(OpenJPAStateManager sm, JDBCStore store)\n             }\r\n         }\r\n     }\r\n+    \r\n+    public Boolean isCustomUpdate(OpenJPAStateManager sm, JDBCStore store) {\r\n+        return null;\r\n+    }\r\n \r\n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n         throws SQLException {\r\n         Object ob = toDataStoreValue(sm.fetchObjectField\r\n             (field.getIndex()), store);\r\n+        if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\r\n+            Select sel = createSelect(sm, store);\r\n+            if (isBlob) {\r\n+                store.getDBDictionary().insertBlobForStreamingLoad\r\n+                    (row, field.getColumns()[0], store, ob, sel);\r\n+            } else {\r\n+                store.getDBDictionary().insertClobForStreamingLoad\r\n+                    (row, field.getColumns()[0], sel);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void customUpdate(OpenJPAStateManager sm, JDBCStore store)\r\n+        throws SQLException {\r\n+        Object ob = toDataStoreValue(sm.fetchObjectField\r\n+                (field.getIndex()), store);\r\n         if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n             if (ob != null) {\r\n                 Select sel = createSelect(sm, store);\r\n-                if (isBlob()) {\r\n+                if (isBlob) {\r\n                     store.getDBDictionary().updateBlob\r\n                         (sel, store, (InputStream)ob);\r\n                 } else {\r\n                     store.getDBDictionary().updateClob\r\n                         (sel, store, (Reader)ob);\r\n                 }\r\n-            } else {\r\n-                Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\r\n-                Column col = field.getColumns()[0];\r\n-                col.setType(Types.OTHER);\r\n-                row.setNull(col);\r\n             }\r\n         }\r\n     }\r\n@@ -154,8 +175,8 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, Result res) throws SQLException {\r\n         Column col = field.getColumns()[0];\r\n         if (res.contains(col)) {\r\n-            if (isBlob()) {\r\n-                sm.storeObject(field.getIndex(), res.getBinaryStream(col));\r\n+            if (isBlob) {\r\n+                sm.storeObject(field.getIndex(), res.getLOBStream(store, col));\r\n             } else {\r\n                 sm.storeObject(field.getIndex(), res.getCharacterStream(col));\r\n             }\r\n@@ -168,18 +189,21 @@ protected void assertNotMappedBy() {\n     }\r\n \r\n     public void setFieldMapping(FieldMapping owner) {\r\n-        if (owner.getType().isAssignableFrom(InputStream.class)) {\r\n-            fieldType = Types.BLOB;\r\n-        } else if (owner.getType().isAssignableFrom(Reader.class)) {\r\n-            fieldType = Types.CLOB;\r\n-        }\r\n         field = owner;\r\n-    }\r\n-\r\n-    private boolean isBlob() {\r\n-        if (fieldType == Types.BLOB)\r\n-            return true;\r\n-        return false;\r\n+        if (owner.getElementMapping().getMappingRepository().getDBDictionary()\r\n+            instanceof PostgresDictionary) {\r\n+            fieldType = Types.INTEGER;\r\n+            isBlob = true;\r\n+            field.setTypeCode(JavaTypes.INT);\r\n+        } else {\r\n+            if (owner.getType().isAssignableFrom(InputStream.class)) {\r\n+                isBlob = true;\r\n+                fieldType = Types.BLOB;\r\n+            } else if (owner.getType().isAssignableFrom(Reader.class)) {\r\n+                isBlob = false;\r\n+                fieldType = Types.CLOB;\r\n+            }\r\n+        }\r\n     }\r\n \r\n     private Select createSelect(OpenJPAStateManager sm, JDBCStore store) {\r\n@@ -191,4 +215,5 @@ private Select createSelect(OpenJPAStateManager sm, JDBCStore store) {\n         sel.setLob(true);\r\n         return sel;\r\n     }\r\n+    \r\n }\r"},{"sha":"e5cf3a6b335b2ffaa2a1807f5bf6e9642fd68600","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -187,7 +187,8 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, int eagerMode) {\n-        if (sel.isDistinct())\n+        if (sel.isDistinct() || \n+            eagerMode == JDBCFetchConfiguration.EAGER_NONE)\n             return -1;\n         sel.select(field.getColumns()[0], field.join(sel));\n         return 1;"},{"sha":"f310f9449413bde0c790aca015a8a3f0cf291775","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":125,"deletions":17,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,11 +19,17 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -38,23 +44,27 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.UnsupportedException;\n+\n import serp.util.Numbers;\n \n /**\n@@ -248,7 +258,8 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             if (rel != null) {\n                 ForeignKey fk = field.getForeignKey((ClassMapping)\n                     rel.getMetaData());\n-                if (fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT) {\n+                if (fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT ||\n+                    fk.getDeleteAction() == ForeignKey.ACTION_CASCADE) {\n                     Row row = field.getRow(sm, store, rm, Row.ACTION_DELETE);\n                     row.setForeignKey(fk, null, rel);\n                 }\n@@ -409,9 +420,11 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         // clone it for a to-many eager select can result in a clone that\n         // produces invalid SQL\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n+        boolean forceInner = fetch.hasFetchInnerJoin(field.getFullName(false)) ?\n+                true : false;\n         sel.select(cls, field.getSelectSubclasses(), store, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN,\n-            eagerJoin(sel.newJoins(), cls, false));\n+            eagerJoin(sel.newJoins(), cls, forceInner));\n     }\n \n     /**\n@@ -505,6 +518,23 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n+\n+        // for inverseEager field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        PersistenceCapable mappedByValue = null;\n+\n+        if (mappedByFieldMapping != null) {\n+        \tValueMapping val = mappedByFieldMapping.getValueMapping();\n+        \tClassMetaData decMeta = val.getTypeMetaData();\n+        \t// this inverse field does not have corresponding classMapping\n+        \t// its value may be a collection/map etc.\n+        \tif (decMeta != null) {\n+        \t    mappedByValue = sm.getPersistenceCapable();\n+        \t    res.setMappedByFieldMapping(mappedByFieldMapping);\n+        \t    res.setMappedByValue(mappedByValue);\n+        \t}\n+        }\n+\n         sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n             eagerJoin(res.newJoins(), cls, false)));\n     }\n@@ -577,9 +607,97 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         final int subs = field.getSelectSubclasses();\n         final Joins[] resJoins = new Joins[rels.length];\n \n-        // select related mapping columns; joining from the related type\n-        // back to our fk table if not an inverse mapping (in which case we\n-        // can just make sure the inverse cols == our pk values)\n+        //cache union for field here\n+        //select data for this sm\n+        Union union = null;\n+        SelectImpl sel = null;\n+        List parmList = null;\n+\n+        if (!((JDBCStoreManager)store).isQuerySQLCacheOn())\n+            union = newUnion(sm, store, fetch, rels, subs, resJoins);\n+        else {\n+            Map<JDBCStoreManager.SelectKey, Object[]> relationFieldUnionCache = \n+                ((JDBCStoreManager)store).getCacheMapFromQuerySQLCache(\n+                RelationFieldStrategy.class);\n+            boolean found = true;\n+            JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n+            fetchClone.copy(fetch);\n+            JDBCStoreManager.SelectKey selKey = \n+                new JDBCStoreManager.SelectKey(null, field, fetch);\n+            Object[] obj = relationFieldUnionCache.get(selKey);\n+            if (obj != null) {\n+                union = (Union) obj[0];\n+                resJoins[0] = (Joins)obj[1];\n+            } else {\n+                synchronized(relationFieldUnionCache) {\n+                    obj = relationFieldUnionCache.get(selKey);\n+                    if (obj != null) {\n+                        union = (Union) obj[0];\n+                        resJoins[0] = (Joins) obj[1];\n+                    } else {\n+                        // select related mapping columns; joining from the \n+                        // related type back to our fk table if not an inverse \n+                        // mapping (in which case we can just make sure the \n+                        // inverse cols == our pk values)\n+                        union = newUnion(sm, store, fetch, rels, subs, \n+                                resJoins);\n+                        found = false;                \n+                    }\n+                    sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n+                        getDelegate();\n+                    SQLBuffer buf = sel.getSQL();\n+                    if (buf == null) {\n+                    \t((SelectImpl)sel).setSQL(store, fetch);\n+                        found = false;\n+                    }\n+\n+                    // only cache the union when elems length is 1 for now\n+                    if (!found && rels.length == 1) {\n+                        Object[] obj1 = new Object[2];\n+                        obj1[0] = union;\n+                        obj1[1] = resJoins[0];\n+                        ((JDBCStoreManager)store).addToSqlCache(\n+                            relationFieldUnionCache, selKey, obj1);\n+                    }\n+                }\n+            }\n+            Log log = store.getConfiguration().\n+                getLog(JDBCConfiguration.LOG_JDBC);\n+            if (log.isTraceEnabled()){\n+                if (found) \n+                    log.trace(_loc.get(\"cache-hit\", field, this.getClass()));                        \n+                else\n+                    log.trace(_loc.get(\"cache-missed\", field, this.getClass()));\n+            }\n+\n+            parmList = new ArrayList();\n+            ClassMapping mapping = field.getDefiningMapping();\n+            Object oid = sm.getObjectId();\n+            Column[] cols = mapping.getPrimaryKeyColumns();\n+            if (sel == null)\n+                sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n+                getDelegate();\n+\n+            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n+            \tnull, null, parmList);\n+        }\n+        \n+        Result res = union.execute(store, fetch, parmList);\n+        try {\n+            Object val = null;\n+            if (res.next())\n+                val = res.load(rels[res.indexOf()], store, fetch,\n+                    resJoins[res.indexOf()]);\n+            sm.storeObject(field.getIndex(), val);\n+        } finally {\n+            res.close();\n+        }\n+    }\n+    \n+    protected Union newUnion(final OpenJPAStateManager sm, \n+        final JDBCStore store, final JDBCFetchConfiguration fetch, \n+        final ClassMapping[] rels, final int subs, \n+        final Joins[] resJoins) {\n         Union union = store.getSQLFactory().newUnion(rels.length);\n         union.setExpectedResultCount(1, false);\n         if (fetch.getSubclassFetchMode(field.getTypeMapping())\n@@ -600,17 +718,7 @@ public void select(Select sel, int idx) {\n                     resJoins[idx]);\n             }\n         });\n-\n-        Result res = union.execute(store, fetch);\n-        try {\n-            Object val = null;\n-            if (res.next())\n-                val = res.load(rels[res.indexOf()], store, fetch,\n-                    resJoins[res.indexOf()]);\n-            sm.storeObject(field.getIndex(), val);\n-        } finally {\n-            res.close();\n-        }\n+        return union;\n     }\n \n     public Object toDataStoreValue(Object val, JDBCStore store) {\n@@ -783,7 +891,7 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n             fieldVal = store.getContext().getObjectId(fieldVal);\n         if (fieldVal instanceof OpenJPAId)\n             fieldVal = ((OpenJPAId) fieldVal).getIdObject();\n-        else if (relmapping.getObjectIdType() != null\n+        if (relmapping.getObjectIdType() != null\n             && relmapping.getObjectIdType().isInstance(fieldVal)) {\n             Object[] pks = ApplicationIds.toPKValues(fieldVal, relmapping);\n             fieldVal = pks[relmapping.getField(j.getFieldIndex())."},{"sha":"7a3bec02fece2146ec986ca18ab01c0eb8880fe9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -133,9 +133,16 @@ public void map(boolean adapt) {\n             elem.setJoinDirection(ValueMapping.JOIN_EXPECTED_INVERSE);\n             elem.setUseClassCriteria(criteria);\n \n-            field.setOrderColumn(finfo.getOrderColumn(field,\n-                mapped.getForeignKey().getTable(), adapt));\n-            field.setOrderColumnIO(finfo.getColumnIO());\n+            ForeignKey fk = mapped.getForeignKey();\n+            /** Foreign key may be null if declared type of the mapped field is \n+             * abstract and under table-per-class inheritance strategy will have\n+             * no mapped table.  \n+             */\n+            if (fk != null) {\n+            \tfield.setOrderColumn(finfo.getOrderColumn(field,\n+            \t\t\tfk.getTable(), adapt));\n+            \tfield.setOrderColumnIO(finfo.getColumnIO());\n+            }\n             return;\n         }\n "},{"sha":"065e0996adfdc128ea7d5e5c49a1c1652fd32d8d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":161,"deletions":17,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -22,22 +22,32 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ChangeTracker;\n import org.apache.openjpa.util.Id;\n@@ -56,6 +66,9 @@\n public abstract class StoreCollectionFieldStrategy\n     extends ContainerFieldStrategy {\n \n+    private static final Localizer _loc = Localizer.forPackage\n+        (StoreCollectionFieldStrategy.class);\n+    \n     /**\n      * Return the foreign key used to join to the owning field for the given\n      * element mapping from {@link #getIndependentElementMappings} (or null).\n@@ -168,10 +181,13 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         // we limit further eager fetches to joins, because after this point\n         // the select has been modified such that parallel clones may produce\n         // invalid sql\n+        boolean outer = field.getNullValue() != FieldMapping.NULL_EXCEPTION;\n+        // force inner join for inner join fetch \n+        if (fetch.hasFetchInnerJoin(field.getFullName(false)))\n+            outer = false;\n         selectEager(sel, getDefaultElementMapping(true), sm, store, fetch, \n             JDBCFetchConfiguration.EAGER_JOIN, false,\n-            field.getNullValue()\n-                != FieldMapping.NULL_EXCEPTION);\n+            outer);\n     }\n \n     public boolean isEagerSelectToMany() {\n@@ -291,13 +307,58 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n \n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), orderJoins) + 1;\n-            add(store, coll, loadElement(null, store, fetch, res, dataJoins));\n+\n+            // for inverseEager field\n+            setMappedBy(oid, sm, coll, res);\n+            Object val = loadElement(null, store, fetch, res, dataJoins);\n+            add(store, coll, val);\n         }\n         res.close();\n \n         return rels;\n     }\n \n+    private void setMappedBy(Object oid, OpenJPAStateManager sm, Object coll,\n+        Result res) {\n+        // for inverseEager field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        PersistenceCapable mappedByValue = null;\n+        \n+        if (mappedByFieldMapping != null) {\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // this inverse field does not have corresponding classMapping\n+            // its value may be a collection/map etc.\n+            if (decMeta == null) \n+                return;\n+        \t\n+            if (oid.equals(sm.getObjectId())) {\n+                mappedByValue = sm.getPersistenceCapable();\n+                res.setMappedByFieldMapping(mappedByFieldMapping);\n+                res.setMappedByValue(mappedByValue);\n+            } else if (coll instanceof Collection && \n+                ((Collection) coll).size() > 0) {\n+                // Customer (1) <--> Orders(n)\n+                // coll contains the values of the toMany field (Orders)\n+                // get the StateManager of this toMany value\n+                // and find the value of the inverse mappedBy field (Customer)\n+                // for this toMacdny field\n+                PersistenceCapable pc = (PersistenceCapable)\n+                    ((Collection) coll).iterator().next();\n+                OpenJPAStateManager sm1 = (OpenJPAStateManager) pc.\n+                    pcGetStateManager();\n+                \n+                ClassMapping clm = ((ClassMapping) sm1.getMetaData());\n+                FieldMapping fm = (FieldMapping) clm.getField(\n+                    mappedByFieldMapping.getName());\n+                if (fm == mappedByFieldMapping)\n+                    res.setMappedByValue(sm1.fetchObject(fm.getIndex()));\n+            } else {\n+                res.setMappedByValue(null);\n+            }\n+        }        \n+    }\n+\n     /**\n      * Extract the oid value from the given result. If the next oid is the\n      * same as the given one, returns the given JVM instance.\n@@ -443,19 +504,86 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             return;\n         }\n \n+        //cache union for field here\n         // select data for this sm\n+        boolean found = true;\n         final ClassMapping[] elems = getIndependentElementMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, elems.length)];\n-        Union union = store.getSQLFactory().newUnion\n-            (Math.max(1, elems.length));\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int idx) {\n-                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n-                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n-                    JDBCFetchConfiguration.EAGER_PARALLEL);\n+        List parmList = null;\n+        Union union = null;\n+        SelectImpl sel = null;\n+        Map<JDBCStoreManager.SelectKey, Object[]> storeCollectionUnionCache = null;\n+        JDBCStoreManager.SelectKey selKey = null;\n+        if (!((JDBCStoreManager)store).isQuerySQLCacheOn() || elems.length > 1)\n+            union = newUnion(sm, store, fetch, elems, resJoins);\n+        else {\n+            parmList = new ArrayList();\n+            JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n+            fetchClone.copy(fetch);\n+           \n+            // to specify the type so that no cast is needed\n+            storeCollectionUnionCache = ((JDBCStoreManager)store).\n+                getCacheMapFromQuerySQLCache(StoreCollectionFieldStrategy.class);\n+            selKey = \n+                new JDBCStoreManager.SelectKey(null, field, fetchClone);\n+            Object[] objs = storeCollectionUnionCache.get(selKey);\n+            if (objs != null) {\n+                union = (Union) objs[0];\n+                resJoins[0] = (Joins) objs[1];\n             }\n-        });\n-\n+            else {\n+                synchronized(storeCollectionUnionCache) {\n+                    objs = storeCollectionUnionCache.get(selKey);\n+                    if (objs == null) {\n+                        // select data for this sm\n+                        union = newUnion(sm, store, fetch, elems, resJoins);\n+                        found = false;\n+                    } else {\n+                        union = (Union) objs[0];\n+                        resJoins[0] = (Joins) objs[1];\n+                    }\n+\n+                    sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n+                        getDelegate();\n+                    if (sel.getSQL() == null) {\n+                    \t((SelectImpl)sel).setSQL(store, fetch);\n+                        found = false;\n+                    }\n+\n+                    // only cache the union when elems length is 1 for now\n+                    if (!found) { \n+                        Object[] objs1 = new Object[2];\n+                        objs1[0] = union;\n+                        objs1[1] = resJoins[0];\n+                        ((JDBCStoreManager)store).addToSqlCache(\n+                            storeCollectionUnionCache, selKey, objs1);\n+                     }\n+                }\n+            }\n+            \n+            Log log = store.getConfiguration().\n+                getLog(JDBCConfiguration.LOG_JDBC);\n+            if (log.isTraceEnabled()) {\n+                if (found)\n+                    log.trace(_loc.get(\"cache-hit\", field, this.getClass()));\n+                else\n+                    log.trace(_loc.get(\"cache-missed\", field, this.getClass())); \n+            }\n+            \n+            ClassMapping mapping = field.getDefiningMapping();\n+            Object oid = sm.getObjectId();\n+            Column[] cols = mapping.getPrimaryKeyColumns();\n+            if (sel == null)\n+                sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n+                getDelegate();\n+\n+            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n+                \tnull, null, parmList);\n+            List nonFKParams = sel.getSQL().getNonFKParameters();\n+            if (nonFKParams != null && nonFKParams.size() > 0) \n+                parmList.addAll(nonFKParams);\n+        }\n+        \n         // create proxy\n         Object coll;\n         ChangeTracker ct = null;\n@@ -468,14 +596,15 @@ public void select(Select sel, int idx) {\n         }\n \n         // load values\n-        Result res = union.execute(store, fetch);\n+        Result res = union.execute(store, fetch, parmList);\n         try {\n-            int seq = 0;\n+            int seq = -1;\n             while (res.next()) {\n                 if (ct != null && field.getOrderColumn() != null)\n                     seq = res.getInt(field.getOrderColumn());\n-                add(store, coll, loadElement(sm, store, fetch, res,\n-                    resJoins[res.indexOf()]));\n+                setMappedBy(sm.getObjectId(), sm, coll, res);\n+               \tadd(store, coll, loadElement(sm, store, fetch, res,\n+           \t        resJoins[res.indexOf()]));\n             }\n             if (ct != null && field.getOrderColumn() != null)\n                 ct.setNextSequence(seq + 1);\n@@ -491,6 +620,21 @@ public void select(Select sel, int idx) {\n             sm.storeObject(field.getIndex(), coll);\n     }\n \n+    protected Union newUnion(final OpenJPAStateManager sm, final JDBCStore store,\n+        final JDBCFetchConfiguration fetch, final ClassMapping[] elems,\n+        final Joins[] resJoins) {\n+        Union union = store.getSQLFactory().newUnion\n+        (Math.max(1, elems.length));\n+        union.select(new Union.Selector() {\n+            public void select(Select sel, int idx) {\n+                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n+                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n+                        JDBCFetchConfiguration.EAGER_PARALLEL);\n+            }\n+        });\n+        return union;\n+    }\n+    \n     /**\n      * Select data for loading, starting in field table.\n      */"},{"sha":"90f5ae93be1031d13b5840e7a1c76e0eec0a043b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":29,"deletions":14,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -26,6 +26,7 @@\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n+\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -45,7 +46,6 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.OpenJPAException;\n-import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -59,7 +59,9 @@\n public class DataSourceFactory {\n \n     private static final Localizer _loc = Localizer.forPackage\n-        (DataSourceFactory.class);\n+    \t (DataSourceFactory.class);\n+    protected static Localizer _eloc = \n+    \tLocalizer.forPackage(DelegatingDataSource.class);\n \n     /**\n      * Create a datasource using the given configuration.\n@@ -120,7 +122,7 @@ public static DataSource newDataSource(JDBCConfiguration conf,\n         catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n-            throw new StoreException(e).setFatal(true);\n+            throw newConnectException(conf, factory2, e);\n         }\n \n         // not a driver or a data source; die\n@@ -162,22 +164,20 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n                     decorators.addAll(decs);\n             }\n \n-            if (jdbcLog.isTraceEnabled() || sqlLog.isTraceEnabled()) {\n-                // logging decorator\n-                LoggingConnectionDecorator lcd =\n-                    new LoggingConnectionDecorator();\n-                Configurations.configureInstance(lcd, conf, opts);\n-                lcd.getLogs().setJDBCLog(jdbcLog);\n-                lcd.getLogs().setSQLLog(sqlLog);\n-                decorators.add(lcd);\n-            }\n+            // logging decorator\n+            LoggingConnectionDecorator lcd =\n+                new LoggingConnectionDecorator();\n+            Configurations.configureInstance(lcd, conf, opts);\n+            lcd.getLogs().setJDBCLog(jdbcLog);\n+            lcd.getLogs().setSQLLog(sqlLog);\n+            decorators.add(lcd);\n \n             dds.addDecorators(decorators);\n             return dds;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n-            throw new StoreException(e).setFatal(true);\n+            throw newConnectException(conf, factory2, e);\n         }\n     }\n \n@@ -209,11 +209,16 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n             ConfiguringConnectionDecorator ccd =\n                 new ConfiguringConnectionDecorator();\n             ccd.setTransactionIsolation(conf.getTransactionIsolationConstant());\n+            Log log = conf.getLog(JDBCConfiguration.LOG_JDBC);\n             if (factory2 || !conf.isConnectionFactoryModeManaged()) {\n                 if (!dict.supportsMultipleNontransactionalResultSets)\n                     ccd.setAutoCommit(Boolean.FALSE);\n                 else\n                     ccd.setAutoCommit(Boolean.TRUE);\n+                // add trace info for autoCommit setting\n+                if (log.isTraceEnabled())\n+                    log.trace(_loc.get(\"set-auto-commit\", new Object[] {\n+                    dict.supportsMultipleNontransactionalResultSets}));                \n             }\n             Options opts = Configurations.parseProperties((factory2)\n                 ? conf.getConnectionFactory2Properties()\n@@ -234,7 +239,7 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n \n             return ds;\n         } catch (Exception e) {\n-            throw new StoreException(e).setFatal(true);\n+        \tthrow newConnectException(conf, factory2, e);\n         } finally {\n             if (conn != null)\n                 try {\n@@ -245,6 +250,16 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n                 }\n         }\n     }\n+    \n+    static OpenJPAException newConnectException(JDBCConfiguration conf, \n+    \t\tboolean factory2, Exception cause) {\n+    \treturn new UserException(_eloc.get(\"poolds-null\", factory2 \n+          \t  ? new Object[]{conf.getConnection2DriverName(), \n+          \t\t\t         conf.getConnection2URL()}\n+          \t  : new Object[]{conf.getConnectionDriverName(),\n+          \t\t             conf.getConnectionURL()}),\n+          \t\t             cause).setFatal(true);\n+    }\n \n     /**\n      * Return a data source with the given user name and password"},{"sha":"f7c0b40483f84333c9f32a4efad32ae7fc939a58","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -757,6 +757,9 @@ public void generateForeignKeys(String schemaName, String tableName,\n \n             // find pk table\n             pkSchemaName = fks[i].getPrimaryKeySchemaName();\n+            if(_dict.getTrimSchemaName()) {\n+                pkSchemaName= StringUtils.trimToNull(pkSchemaName);\n+            }\n             pkTableName = fks[i].getPrimaryKeyTableName();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"gen-fk\", new Object[]{ name, table,"},{"sha":"e500de0977fbc8df1612135fe648fc2d77a0fa6b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -124,7 +124,7 @@ public SchemaTool(JDBCConfiguration conf, String action) {\n \n         _conf = conf;\n         _action = action;\n-        _ds = conf.getDataSource2(null);\n+        _ds = ACTION_BUILD.equals(action) ? null : conf.getDataSource2(null);\n         _log = conf.getLog(JDBCConfiguration.LOG_SCHEMA);\n \n         // initialize this up-front; otherwise the dbdictionaryfactory might\n@@ -986,6 +986,12 @@ public boolean dropSequence(Sequence seq)\n      */\n     public boolean createIndex(Index idx, Table table)\n         throws SQLException {\n+        // Informix will automatically create a unique index for the \n+        // primary key, so don't create another index again\n+\n+        if (!_dict.needsToCreateIndex(idx,table))\n+            return false;\n+\n         int max = _dict.maxIndexesPerTable;\n \n         int len = table.getIndexes().length;"},{"sha":"06a82cb26f92bb0741b5243ec59c0ab0fb87fdd5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -29,8 +29,11 @@\n import java.util.Properties;\n \n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.jdbc.DelegatingDataSource;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Non-pooling driver data source.\n@@ -46,6 +49,11 @@\n     private Properties _connectionFactoryProperties;\n     private Driver _driver;\n     private ClassLoader _classLoader;\n+    \n+    protected static Localizer _loc = \n+    \tLocalizer.forPackage(SimpleDriverDataSource.class);\n+    protected static Localizer _eloc = \n+    \tLocalizer.forPackage(DelegatingDataSource.class);\n \n     public Connection getConnection()\n         throws SQLException {\n@@ -70,7 +78,12 @@ public Connection getConnection(String username, String password)\n \n     public Connection getConnection(Properties props)\n         throws SQLException {\n-        return getDriver().connect(_connectionURL, props);\n+    \tConnection con = getDriver().connect(_connectionURL, props);\n+    \tif (con == null) {\n+        \tthrow new SQLException(_eloc.get(\"poolds-null\",\n+        \t\t\t_connectionDriverName, _connectionURL).getMessage());\n+        }\n+        return con;\n     }\n \n     public int getLoginTimeout() {"},{"sha":"e30d0f648a03095adb75e1c8163ce22a9d4a5f0d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -252,6 +252,11 @@ public String getResourceName() {\n         return _rels;\n     }\n \n+    public String[] getColumnNames() {\n+    \treturn _colMap == null ? new String[0] : \n+    \t\t(String[])_colMap.keySet().toArray(new String[_colMap.size()]);\n+    }\n+    \n     /**\n      * Return the column with the given name, or null if none.\n      */\n@@ -260,6 +265,17 @@ public Column getColumn(String name) {\n             return null;\n         return (Column) _colMap.get(name.toUpperCase());\n     }\n+    \n+    /**\n+     * Affirms if this table contains the column of the given name without any \n+     * side-effect. \n+     * @see Table#getColumn(String) can have side-effect of creating a column\n+     * for dynamic table implementation.\n+     */\n+    public boolean containsColumn(String name) {\n+    \treturn name != null && _colMap != null \n+    \t\t&& _colMap.containsKey(name.toUpperCase());\n+    }\n \n     /**\n      * Add a column to the table."},{"sha":"3c87191435cf79c021b5631ddab5578b2e16e48f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":73,"deletions":5,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,33 +18,77 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * Represents a unique constraint. It can also represent a partial constraint.\n  *\n  * @author Abe White\n+ * @author Pinaki Poddar\n  */\n public class Unique\n     extends LocalConstraint {\n-\n-    /**\n-     * Default constructor.\n+\tprivate boolean _autoNaming = false;\n+    \n+\t/**\n+     * Default constructor without a name.\n+     * Implies that this constraint will auto-generate its name from the names \n+     * of its columns, unless later the name is set explicitly.\n      */\n     public Unique() {\n+    \t_autoNaming = true;\n     }\n \n     /**\n-     * Constructor.\n-     *\n+     * Construct with given name.\n+     * Implies that this constraint will not auto-generate its name.\n+     * \n      * @param name the name of the constraint, if any\n      * @param table the table of the constraint\n      */\n     public Unique(String name, Table table) {\n         super(name, table);\n+    \t_autoNaming = false;\n     }\n \n     public boolean isLogical() {\n         return false;\n     }\n+    \n+    /**\n+     * Adds the given column. \n+     * The added column is set to non-nullable because a unique constraint\n+     * on the database requires that its constituent columns are NOT NULL. \n+     * @see Column#setNotNull(boolean)\n+     */\n+    public void addColumn(Column col) {\n+    \tsuper.addColumn(col);\n+    \tcol.setNotNull(true);\n+    }\n+    \n+    /**\n+     * Set the name of the constraint. This method cannot be called if the\n+     * constraint already belongs to a table. Calling this method also has the\n+     * side-effect of implying that the instance will not auto-generate its\n+     * name.\n+     */\n+    public void setName(String name) {\n+        super.setName(name);\n+        _autoNaming = false;\n+    }\n+    \n+    /**\n+     * Gets the name of the constraint. If no name has been set by the user\n+     * then this method has the side-effect of auto-generating a name from\n+     * the name of its columns.\n+     */\n+    public String getName() {\n+    \tif (getTable() == null && _autoNaming) {\n+    \t\tsetName(createAutoName());\n+    \t\t_autoNaming = true;\n+    \t}\n+    \treturn super.getName();\n+    }\n \n     /**\n      * Return true if the structure of this primary key matches that of\n@@ -53,4 +97,28 @@ public boolean isLogical() {\n     public boolean equalsUnique(Unique unq) {\n         return equalsLocalConstraint(unq);\n     }\n+\n+    /*\n+     * Affirms if this instance is currently generating its own name. No \n+     * mutator because auto-naming is switched off as side-effect of user \n+     * calling setName() directly. \n+     */\n+\tpublic boolean isAutoNaming() {\n+\t\treturn _autoNaming;\n+\t}\n+\t\n+\tprivate String createAutoName() {\n+\t\tColumn[] columns = getColumns();\n+\t\tint l = 32/Math.max(columns.length,1);\n+\t\tStringBuffer autoName = new StringBuffer(\"UNQ_\");\n+\t\tfor (Column column : columns)\n+\t\t\tautoName.append(chop(column.getName(),l));\n+\t\treturn autoName.toString();\n+\t}\n+\t\n+    private String chop(String name, int head) {\n+    \tif (StringUtils.isEmpty(name))\n+    \t\treturn name;\n+    \treturn name.substring(0, Math.min(Math.max(1,head), name.length()));\n+    }\n }"},{"sha":"6e6f3edfead2b7735f5ef0ea71b66ba1d827a7f3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.UnsupportedException;\n+\n import serp.util.Strings;\n \n /**\n@@ -79,6 +80,8 @@\n     private boolean _locking = false;\n     private boolean _ignoreNext = false;\n     private boolean _last = false;\n+    private FieldMapping _mappedByFieldMapping = null;\n+    private Object _mappedByValue = null;\n \n     public Object getEager(FieldMapping key) {\n         Map map = getEagerMap(true);\n@@ -117,6 +120,8 @@ protected void setEagerMap(Map eager) {\n      */\n     public void close() {\n         closeEagerMap(_eager);\n+        _mappedByFieldMapping = null;\n+        _mappedByValue = null;\n     }\n \n     /**\n@@ -237,6 +242,22 @@ public void setBaseMapping(ClassMapping base) {\n         _base = base;\n     }\n \n+    public FieldMapping getMappedByFieldMapping() {\n+        return _mappedByFieldMapping;\n+    }\n+\n+    public void setMappedByFieldMapping(FieldMapping fieldMapping) {\n+        _mappedByFieldMapping = fieldMapping;\n+    }\n+\n+    public Object getMappedByValue() {\n+        return _mappedByValue;\n+    }\n+\n+    public void setMappedByValue(Object mappedByValue) {\n+        _mappedByValue = mappedByValue;\n+    }\n+\n     public int indexOf() {\n         return _index;\n     }\n@@ -341,12 +362,23 @@ public InputStream getBinaryStream(Column col, Joins joins)\n         return getBinaryStreamInternal(translate(col, joins), joins);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException {\n+        return getLOBStreamInternal(store, translate(obj, null), null);\n+    }\n+\n     protected InputStream getBinaryStreamInternal(Object obj, Joins joins)\n         throws SQLException {\n         return (InputStream) checkNull(getObjectInternal(obj,\n             JavaSQLTypes.BINARY_STREAM, null, joins));\n     }\n \n+    protected InputStream getLOBStreamInternal(JDBCStore store, Object obj,\n+        Joins joins) throws SQLException {\n+        return (InputStream) checkNull(getStreamInternal(store, obj,\n+            JavaSQLTypes.BINARY_STREAM, null, joins));\n+    }\n+    \n     public Blob getBlob(Object obj)\n         throws SQLException {\n         return getBlobInternal(translate(obj, null), null);\n@@ -670,6 +702,9 @@ protected abstract Object getObjectInternal(Object obj, int metaType,\n         Object arg, Joins joins)\n         throws SQLException;\n \n+    protected abstract Object getStreamInternal(JDBCStore store, Object obj,\n+            int metaType, Object arg, Joins joins) throws SQLException;\n+    \n     public Object getSQLObject(Object obj, Map map)\n         throws SQLException {\n         return getSQLObjectInternal(translate(obj, null), map, null);"},{"sha":"69091419f75113f3dfd8e0774d2043abb8d32e9a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":74,"deletions":65,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -60,16 +60,20 @@\n     public static final int db2ZOSV8xOrLater = 3;\r\n     public static final int db2UDBV82OrLater = 4;\r\n     public static final int db2ISeriesV5R4OrLater = 5;\r\n-\tprivate static final String forUpdate = \"FOR UPDATE\";\r\n-    private static final String withRSClause = \"WITH RS\";\r\n-    private static final String withRRClause = \"WITH RR\";\r\n-    private static final String useKeepUpdateLockClause\r\n+\tprotected static final String forUpdate = \"FOR UPDATE\";\r\n+    protected static final String withURClause = \"WITH UR\";\r\n+    protected static final String withCSClause = \"WITH CS\";\r\n+    protected static final String withRSClause = \"WITH RS\";\r\n+    protected static final String withRRClause = \"WITH RR\";\r\n+    protected static final String useKeepShareLockClause\r\n+        = \"USE AND KEEP SHARE LOCKS\";\r\n+    protected static final String useKeepUpdateLockClause\r\n         = \"USE AND KEEP UPDATE LOCKS\";\r\n-    private static final String useKeepExclusiveLockClause\r\n+    protected static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n-    private static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n-    protected String databaseProductName = null;\r\n-    protected String databaseProductVersion = null;\r\n+    protected static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n+    protected String databaseProductName = \"\";\r\n+    protected String databaseProductVersion = \"\";\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n     \r\n@@ -234,21 +238,12 @@ public Connection decorate(Connection conn)\n         return conn;\r\n     }\r\n \r\n-    private boolean isJDBC3(DatabaseMetaData meta) {\r\n-        try {\r\n-            // JDBC3-only method, so it might throw a AbstractMethodError\r\n-            return meta.getJDBCMajorVersion() >= 3;\r\n-        } catch (Throwable t) {\r\n-            return false;\r\n-        }\r\n-    }\r\n-\r\n     public void connectedConfiguration(Connection conn) throws SQLException {\r\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-        databaseProductName = metaData.getDatabaseProductName();\r\n-        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        databaseProductName = nullSafe(metaData.getDatabaseProductName());\r\n+        databaseProductVersion = nullSafe(metaData.getDatabaseProductVersion());\r\n         \r\n         // Determine the type of DB2 database\r\n         // First check for AS/400\r\n@@ -262,7 +257,7 @@ else if (isDB2ISeriesV5R4OrLater())\n         }\r\n         \r\n     \tif (db2ServerType == 0) {\r\n-    \t    if (isJDBC3(metaData)) {\r\n+    \t    if (isJDBC3) {\r\n     \t        maj = metaData.getDatabaseMajorVersion();\r\n     \t        min = metaData.getDatabaseMinorVersion();\r\n     \t    }\r\n@@ -389,51 +384,32 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n     }\r\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n-            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n-            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1\r\n+             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+             && ((maj == 8 && min >= 2) || (maj >= 9));\r\n     }\r\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n-           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n-           && maj >= 8)\r\n-           match = true;\r\n-        return match;\r\n+       return (databaseProductVersion.indexOf(\"DSN\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+            && maj >= 8;\r\n+           \r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && ((maj == 5 && min <=3) || maj < 5))\r\n-           match = true;\r\n-       return match;\r\n+       return (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5));\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && (maj >=6 || (maj == 5 && min >=4)))\r\n-           match = true;\r\n-      return match;\r\n+       return databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4));\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-            ((maj == 8 && min <= 1) || maj < 8))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) \r\n+            && ((maj == 8 && min <= 1) || maj < 8);\r\n     }\r\n \r\n     /** Get the version Major/Minor for the ISeries\r\n@@ -443,18 +419,39 @@ private void getProductVersionMajorMinorForISeries() {\n         //   (Toolbox)DBProdVersion              05.04.0000 V5R4m0\r\n         // ISeries                               DB2 UDB for AS/400\r\n         //   (Native)                            V5R4M0\r\n+        // new jcc    DBProdVersion              QSQ05040 or QSQ06010\r\n         if (databaseProductName.indexOf(\"AS\") != -1) {\r\n-            String s = databaseProductVersion.substring(databaseProductVersion\r\n-                .indexOf('V'));\r\n-            s = s.toUpperCase();\r\n-\r\n-            StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\"\r\n-                , false);\r\n-            if (stringtokenizer.countTokens() == 3) {\r\n-                String s1 = stringtokenizer.nextToken();\r\n-                maj = Integer.parseInt(s1);\r\n-                String s2 =  stringtokenizer.nextToken();\r\n-                min = Integer.parseInt(s2);\r\n+            // default to V5R4\r\n+            maj = 5;\r\n+            min = 4;\r\n+            int index = databaseProductVersion.indexOf('V');\r\n+            if (index != -1) {\r\n+                String s = databaseProductVersion.substring(index);\r\n+                s = s.toUpperCase();\r\n+\r\n+                StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\"\r\n+                    , false);\r\n+                if (stringtokenizer.countTokens() == 3) {\r\n+                    String s1 = stringtokenizer.nextToken();\r\n+                    maj = Integer.parseInt(s1);\r\n+                    String s2 =  stringtokenizer.nextToken();\r\n+                    min = Integer.parseInt(s2);\r\n+                }\r\n+            } else {\r\n+                index = databaseProductVersion.indexOf('0');\r\n+                if (index != -1) {\r\n+                    String s = databaseProductVersion.substring(index);\r\n+                    s = s.toUpperCase();\r\n+\r\n+                    StringTokenizer stringtokenizer = new StringTokenizer(s, \"0\"\r\n+                        , false);                    \r\n+                    if (stringtokenizer.countTokens() == 2) {\r\n+                        String s1 = stringtokenizer.nextToken();\r\n+                        maj = Integer.parseInt(s1);\r\n+                        String s2 =  stringtokenizer.nextToken();\r\n+                        min = Integer.parseInt(s2);\r\n+                    }\r\n+                }\r\n             }\r\n         }\r\n     }\r\n@@ -536,11 +533,19 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n \r\n             String Warn = new String((char[]) getSqlWarnMethd.\r\n                     invoke(sqlca, new Object[]{}));\r\n-            if(Warn.trim().length() != 0)\r\n+            if (Warn.trim().length() != 0)\r\n                 exceptionMsg = exceptionMsg.concat(\", Warn=\" +Warn + \"]\" );\r\n             else\r\n                 exceptionMsg = exceptionMsg.concat( \"]\" );\r\n             msg = msg.concat(exceptionMsg);\r\n+            \r\n+            // for batched execution failures, SQLExceptions are nested\r\n+            SQLException sqle2 = sqle.getNextException();\r\n+            while (sqle2 != null) {                \r\n+                msg = msg.concat(\"\\n\" + sqle2.getMessage());\r\n+                sqle2 = sqle2.getNextException();\r\n+            }\r\n+            \r\n             return msg;\r\n         } catch (Throwable t) {\r\n             return sqle.getMessage();\r\n@@ -819,4 +824,8 @@ public void createIndexIfNecessary(Schema schema, String table,\n             idx.addColumn(pkColumn);\r\n         }\r\n     }\r\n+    \r\n+    String nullSafe(String s) {\r\n+    \treturn s == null ? \"\" : s;\r\n+    }\r\n }\r"},{"sha":"4189e46016403a5651ecc4d59bd41b560c3bc77d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":209,"deletions":58,"changes":267,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -53,13 +53,15 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -69,6 +71,7 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.kernel.exps.Null;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -86,6 +89,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.Seq;\n import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -100,11 +104,17 @@\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.LockException;\n+import org.apache.openjpa.util.ObjectExistsException;\n+import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.Serialization;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -127,8 +137,8 @@\n     public static final String CONS_NAME_MID = \"mid\";\n     public static final String CONS_NAME_AFTER = \"after\";\n     \n-    public int blobBufferSize = 50;\n-    public int clobBufferSize = 50;\n+    public int blobBufferSize = 50000;\n+    public int clobBufferSize = 50000;\n \n     protected static final int RANGE_POST_SELECT = 0;\n     protected static final int RANGE_PRE_DISTINCT = 1;\n@@ -155,16 +165,6 @@\n     private static final String ZERO_TIMESTAMP_STR =\n         \"'\" + new Timestamp(0) + \"'\";\n \n-    public static final List EMPTY_STRING_LIST = Arrays.asList(new String[]{});\n-    public static final List[] SQL_STATE_CODES = \n-    \t{EMPTY_STRING_LIST,                     // 0: Default\n-    \t Arrays.asList(new String[]{\"41000\"}),  // 1: LOCK\n-    \t EMPTY_STRING_LIST,                     // 2: OBJECT_NOT_FOUND\n-    \t EMPTY_STRING_LIST,                     // 3: OPTIMISTIC\n-    \t Arrays.asList(new String[]{\"23000\"}),  // 4: REFERENTIAL_INTEGRITY\n-    \t EMPTY_STRING_LIST                      // 5: OBJECT_EXISTS\n-    \t}; \n-                                              \n     private static final Localizer _loc = Localizer.forPackage\n         (DBDictionary.class);\n \n@@ -180,7 +180,6 @@\n     public int maxIndexNameLength = 128;\n     public int maxIndexesPerTable = Integer.MAX_VALUE;\n     public boolean supportsForeignKeys = true;\n-    public boolean supportsTimestampNanos = true;\n     public boolean supportsUniqueConstraints = true;\n     public boolean supportsDeferredConstraints = true;\n     public boolean supportsRestrictDeleteAction = true;\n@@ -229,13 +228,20 @@\n     public boolean supportsSelectEndIndex = false;\n     public int rangePosition = RANGE_POST_SELECT;\n     public boolean requiresAliasForSubselect = false;\n+    public boolean requiresTargetForDelete = false;\n     public boolean allowsAliasInBulkClause = true;\n     public boolean supportsMultipleNontransactionalResultSets = true;\n     public String searchStringEscape = \"\\\\\";\n     public boolean requiresCastForMathFunctions = false;\n     public boolean requiresCastForComparisons = false;\n     public boolean supportsModOperator = false;\n     public boolean supportsXMLColumn = false;\n+    public boolean reportsSuccessNoInfoOnBatchUpdates = false;\n+    \n+    /**\n+     * Some Databases append whitespace after the schema name \n+     */\n+    public boolean trimSchemaName = false;\n \n     // functions\n     public String castFunction = \"CAST({0} AS {1})\";\n@@ -322,10 +328,13 @@\n     public String sequenceSQL = null;\n     public String sequenceSchemaSQL = null;\n     public String sequenceNameSQL = null;\n+    // most native sequences can be run inside the business transaction\n+    public int nativeSequenceType= Seq.TYPE_TRANSACTIONAL;\n \n     protected JDBCConfiguration conf = null;\n     protected Log log = null;\n     protected boolean connected = false;\n+    protected boolean isJDBC3 = false;\n     protected final Set reservedWordSet = new HashSet();\n     protected final Set systemSchemaSet = new HashSet();\n     protected final Set systemTableSet = new HashSet();\n@@ -353,6 +362,9 @@\n     // any positive number = batch limit\n     public int batchLimit = NO_BATCH;\n     \n+    public final Map<Integer,Set<String>> sqlStateCodes = \n+    \tnew HashMap<Integer, Set<String>>();\n+                                              \n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n             \"BIGINT\", \"BIT\", \"BLOB\", \"CLOB\", \"DATE\", \"DECIMAL\", \"DISTINCT\",\n@@ -373,12 +385,28 @@ public DBDictionary() {\n     public void connectedConfiguration(Connection conn)\n         throws SQLException {\n         if (!connected) {\n+            DatabaseMetaData metaData = null;\n             try {\n-                if (log.isTraceEnabled())\n-                    log.trace(DBDictionaryFactory.toString\n-                        (conn.getMetaData()));\n+                metaData = conn.getMetaData();\n+                try {\n+                    // JDBC3-only method, so it might throw a \n+                    // AbstractMethodError\n+                    isJDBC3 = metaData.getJDBCMajorVersion() >= 3;\n+                } catch (Throwable t) {\n+                    // ignore if not JDBC3\n+                }\n             } catch (Exception e) {\n-                log.trace(e.toString(), e);\n+                if (log.isTraceEnabled())\n+                    log.trace(e.toString(), e);\n+            }\n+\n+            if (log.isTraceEnabled()) {                    \n+                log.trace(DBDictionaryFactory.toString(metaData));\n+\n+                if (isJDBC3)\n+                    log.trace(_loc.get(\"connection-defaults\", new Object[]{\n+                        conn.getAutoCommit(), conn.getHoldability(),\n+                        conn.getTransactionIsolation()}));\n             }\n         }\n         connected = true;\n@@ -483,6 +511,11 @@ public InputStream getBinaryStream(ResultSet rs, int column)\n         return rs.getBinaryStream(column);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n+        int column) throws SQLException {\n+        return rs.getBinaryStream(column);\n+    }\n+    \n     /**\n      * Convert the specified column of the SQL ResultSet to the proper\n      * java type.\n@@ -1093,10 +1126,7 @@ public void setTimestamp(PreparedStatement stmnt, int idx,\n             nanos = 0;\n         }\n \n-        if (supportsTimestampNanos)\n-            val.setNanos(nanos);\n-        else\n-            val.setNanos(0);\n+        val.setNanos(nanos);\n \n         if (cal == null)\n             stmnt.setTimestamp(idx, val);\n@@ -1499,7 +1529,7 @@ public int getJDBCType(int metaTypeCode, boolean lob) {\n             case JavaTypes.BIGDECIMAL:\n                 if (storeLargeNumbersAsStrings)\n                     return getPreferredType(Types.VARCHAR);\n-                return getPreferredType(Types.DOUBLE);\n+                return getPreferredType(Types.NUMERIC);\n             case JavaTypes.NUMBER:\n                 if (storeLargeNumbersAsStrings)\n                     return getPreferredType(Types.VARCHAR);\n@@ -1865,8 +1895,16 @@ public SQLBuffer toUpdate(ClassMapping mapping, Select sel,\n     protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         JDBCStore store, Object[] params, Map updateParams) {\n         SQLBuffer sql = new SQLBuffer(this);\n-        if (updateParams == null)\n+        if (updateParams == null) {\n+          if (requiresTargetForDelete) {\n+            sql.append(\"DELETE \");\n+            SQLBuffer deleteTargets = getDeleteTargets(sel);\n+            sql.append(deleteTargets);\n+            sql.append(\" FROM \");\n+          } else {\n             sql.append(\"DELETE FROM \");\n+          }\n+        }\n         else\n             sql.append(\"UPDATE \");\n         sel.addJoinClassConditions();\n@@ -1962,6 +2000,28 @@ protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         return sql;\n     }\n \n+    protected SQLBuffer getDeleteTargets(Select sel) {\n+      SQLBuffer deleteTargets = new SQLBuffer(this);\n+      Collection aliases = sel.getTableAliases();\n+      // Assumes aliases are of the form \"TABLENAME t0\"\n+      for (Iterator itr = aliases.iterator(); itr.hasNext();) {\n+        String tableAlias = itr.next().toString();\n+        int spaceIndex = tableAlias.indexOf(' ');\n+        if (spaceIndex > 0 && spaceIndex < tableAlias.length() - 1) {\n+          if (allowsAliasInBulkClause) {\n+            deleteTargets.append(tableAlias.substring(spaceIndex + 1));\n+          } else {\n+            deleteTargets.append(tableAlias.substring(0, spaceIndex));\n+          }\n+        } else {\n+          deleteTargets.append(tableAlias);\n+        }\n+        if (itr.hasNext())\n+          deleteTargets.append(\", \");\n+      }      \n+      return deleteTargets;      \n+    }\n+\n     protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         Object[] params, Map updateParams, boolean allowAlias) {\n         if (updateParams == null || updateParams.size() == 0)\n@@ -1987,9 +2047,14 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n                 augmentUpdates = false;\n \n             Val val = (Val) next.getValue();\n-\n+            if (val == null)\n+            \tval = new Null();\n             Column col = fmd.getColumns()[0];\n-            sql.append(col.getName());\n+            if (allowAlias) {\n+              sql.append(sel.getColumnAlias(col));\n+            } else {\n+              sql.append(col.getName());  \n+            }            \n             sql.append(\" = \");\n \n             ExpState state = val.initialize(sel, ctx, 0);\n@@ -3000,7 +3065,9 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n      */\n     public String[] getCreateTableSQL(Table table) {\n         StringBuffer buf = new StringBuffer();\n-        buf.append(\"CREATE TABLE \").append(getFullName(table, false));\n+        String tableName = checkNameLength(getFullName(table, false), \n+        \t\tmaxTableNameLength, \"long-table-name\");\n+        buf.append(\"CREATE TABLE \").append(tableName);\n         if (supportsComments && table.hasComment()) {\n             buf.append(\" \");\n             comment(buf, table.getComment());\n@@ -3073,7 +3140,9 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n \n         StringBuffer buf = new StringBuffer();\n         buf.append(\"CREATE SEQUENCE \");\n-        buf.append(getFullName(seq));\n+        String seqName = checkNameLength(getFullName(seq), maxTableNameLength, \n+        \t\t\"long-seq-name\");\n+        buf.append(seqName);\n         if (seq.getInitialValue() != 0)\n             buf.append(\" START WITH \").append(seq.getInitialValue());\n         if (seq.getIncrement() > 1)\n@@ -3099,8 +3168,9 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n         buf.append(\"CREATE \");\n         if (index.isUnique())\n             buf.append(\"UNIQUE \");\n-        buf.append(\"INDEX \").append(index.getName());\n-\n+        String indexName = checkNameLength(index.getName(), maxIndexNameLength, \n+                \"long-index-name\");\n+        buf.append(\"INDEX \").append(indexName);\n         buf.append(\" ON \").append(getFullName(index.getTable(), false));\n         buf.append(\" (\").append(Strings.join(index.getColumns(), \", \")).\n             append(\")\");\n@@ -3210,7 +3280,9 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      */\n     protected String getDeclareColumnSQL(Column col, boolean alter) {\n         StringBuffer buf = new StringBuffer();\n-        buf.append(col).append(\" \");\n+        String columnName = checkNameLength(col.getName(), maxColumnNameLength, \n+        \t\t\"long-column-name\");\n+        buf.append(columnName).append(\" \");\n         buf.append(getTypeName(col));\n \n         // can't add constraints to a column we're adding after table\n@@ -3397,11 +3469,11 @@ protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n             || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n-\n         StringBuffer buf = new StringBuffer();\n         if (unq.getName() != null\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n-            buf.append(\"CONSTRAINT \").append(unq.getName()).append(\" \");\n+            buf.append(\"CONSTRAINT \").append(checkNameLength(unq.getName(), \n+            \tmaxConstraintNameLength, \"long-constraint-name\")).append(\" \");\n         buf.append(\"UNIQUE \");\n         if (unq.getName() != null && CONS_NAME_MID.equals(constraintNameMode))\n             buf.append(unq.getName()).append(\" \");\n@@ -4043,8 +4115,32 @@ public void endConfiguration() {\n         if (selectWords != null)\n             selectWordSet.addAll(Arrays.asList(Strings.split(selectWords\n                     .toUpperCase(), \",\", 0)));\n+        \n+        // initialize the error codes\n+        SQLErrorCodeReader codeReader = new SQLErrorCodeReader();\n+        String rsrc = \"sql-error-state-codes.xml\";\n+        InputStream stream = getClass().getResourceAsStream(rsrc);\n+        String dictionaryClassName = getClass().getName();\n+        if (stream == null) { // User supplied dictionary but no error codes xml\n+        \tstream = DBDictionary.class.getResourceAsStream(rsrc); // use default\n+        \tdictionaryClassName = getClass().getSuperclass().getName();\n+        }\n+        codeReader.parse(stream, dictionaryClassName, this);\n     }\n-\n+    \n+    public void addErrorCode(int errorType, String errorCode) {\n+    \tif (errorCode == null || errorCode.trim().length() == 0)\n+    \t\treturn;\n+\t\tSet<String> codes = sqlStateCodes.get(errorType);\n+    \tif (codes == null) {\n+    \t\tcodes = new HashSet<String>();\n+    \t\tcodes.add(errorCode.trim());\n+    \t\tsqlStateCodes.put(errorType, codes);\n+    \t} else {\n+    \t\tcodes.add(errorCode.trim());\n+    \t}\n+    }\n+    \n     //////////////////////////////////////\n     // ConnectionDecorator implementation\n     //////////////////////////////////////\n@@ -4053,7 +4149,7 @@ public void endConfiguration() {\n      * Decorate the given connection if needed. Some databases require special\n      * handling for JDBC bugs. This implementation issues any\n      * {@link #initializationSQL} that has been set for the dictionary but\n-     * does not decoreate the connection.\n+     * does not decorate the connection.\n      */\n     public Connection decorate(Connection conn)\n         throws SQLException {\n@@ -4104,7 +4200,7 @@ public void handleWarning(SQLWarning warning)\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n     \tif (causes != null && causes.length > 0) {\n-    \t\tOpenJPAException ret = SQLExceptions.narrow(msg, causes[0], this);\n+    \t\tOpenJPAException ret = narrow(msg, causes[0]);\n     \t\tret.setFailedObject(failed).setNestedThrowables(causes);\n     \t\treturn ret;\n     \t}\n@@ -4113,26 +4209,36 @@ public OpenJPAException newStoreException(String msg, SQLException[] causes,\n     }\n     \n     /**\n-     * Gets the list of String, each represents an error that can help \n-     * to narrow down a SQL exception to specific type of StoreException.<br>\n-     * For example, error code <code>\"23000\"</code> represents referential\n-     * integrity violation and hence can be narrowed down to \n-     * {@link ReferentialIntegrityException} rather than more general\n-     * {@link StoreException}.<br>\n-     * JDBC Drivers are not uniform in return values of SQLState for the same\n-     * error and hence each database specific Dictionary can specialize.<br>\n-     * \n-     * \n-     * @return an <em>unmodifiable</em> list of Strings representing supposedly \n-     * uniform SQL States for a given type of StoreException. \n-     * Default behavior is to return an empty list.\n-     */\n-    public List/*<String>*/ getSQLStates(int exceptionType) {\n-    \tif (exceptionType>=0 && exceptionType<SQL_STATE_CODES.length)\n-    \t\treturn SQL_STATE_CODES[exceptionType];\n-    \treturn EMPTY_STRING_LIST;\n+     * Gets the subtype of StoreException by matching the given SQLException's\n+     * error state code to the list of error codes supplied by the dictionary.\n+     * Returns -1 if no matching code can be found.\n+     */\n+    OpenJPAException narrow(String msg, SQLException ex) {\n+    \tString errorState = ex.getSQLState();\n+    \tint errorType = StoreException.GENERAL;\n+    \tfor (Integer type : sqlStateCodes.keySet()) {\n+    \t\tSet<String> erroStates = sqlStateCodes.get(type);\n+    \t\tif (erroStates != null && erroStates.contains(errorState)) {\n+    \t\t\terrorType = type;\n+    \t\t\tbreak;\n+    \t\t}\n+    \t}\n+    \tswitch (errorType) {\n+\t    \tcase StoreException.LOCK: \n+\t            return new LockException(msg);\n+\t    \tcase StoreException.OBJECT_EXISTS:\n+\t            return new ObjectExistsException(msg);\n+\t    \tcase StoreException.OBJECT_NOT_FOUND:\n+\t            return new ObjectNotFoundException(msg);\n+\t    \tcase StoreException.OPTIMISTIC:\n+\t            return new OptimisticException(msg);\n+\t    \tcase StoreException.REFERENTIAL_INTEGRITY: \n+\t            return new ReferentialIntegrityException(msg);\n+\t        default:\n+\t            return new StoreException(msg);\n+        }\n     }\n-\n+    \n     /**\n      * Closes the specified {@link DataSource} and releases any\n      * resources associated with it.\n@@ -4166,16 +4272,24 @@ public String getVersionColumn(Column column, String tableAlias) {\n         return column.toString();\n     }\n     \n-    public void insertBlobForStreamingLoad(Row row, Column col)\n-    throws SQLException {\n-        row.setBinaryStream(col, \n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n+        if (ob != null) {\n+            row.setBinaryStream(col, \n                 new ByteArrayInputStream(new byte[0]), 0);\n+        } else {\n+            row.setNull(col);\n+        }\n     }\n     \n-    public void insertClobForStreamingLoad(Row row, Column col)\n+    public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n     throws SQLException {\n+        if (ob != null) {\n         row.setCharacterStream(col,\n                 new CharArrayReader(new char[0]), 0);\n+        } else {\n+            row.setNull(col);\n+        }\n     }\n     \n     public void updateBlob(Select sel, JDBCStore store, InputStream is)\n@@ -4407,4 +4521,41 @@ public boolean isSelect(String sql) {\n         }\n         return false;\n     }\n+\n+    public boolean needsToCreateIndex(Index idx, Table table) {\n+        return true;\n+    }\n+\n+    /**\n+     * Return batched statements update succes count\n+     * @param ps A PreparedStatement\n+     * @return return update count\n+     */\n+    public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n+        return 0;\n+    }\n+    \n+    public boolean getTrimSchemaName() { \n+        return trimSchemaName;\n+    }\n+    \n+    public void setTrimSchemaName(boolean trimSchemaName) { \n+        this.trimSchemaName = trimSchemaName; \n+    }\n+    \n+    public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n+        // Do nothing\n+    }\n+    \n+    /**\n+     * Validate that the given name is no longer than given maximum length.\n+     * If the given name is indeed longer then raises an UserException with the \n+     * given message key otherwise returns the same name.\n+     */\n+    final String checkNameLength(String name, int length, String msgKey) {\n+    \tif (name.length() > length)\n+    \t\tthrow new UserException(_loc.get(msgKey, name, name.length(), \n+    \t\t\t\tlength));\n+    \treturn name;\n+    }\n }"},{"sha":"7a26c6934581123a8d365afc4f54d7d674cddbff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":4,"deletions":24,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -46,9 +46,11 @@ public DerbyDictionary() {\n         stringLengthFunction = \"LENGTH({0})\";\n         substringFunctionName = \"SUBSTR\";\n \n-        maxConstraintNameLength = 18;\n+        // Derby name length restriction has been relaxed \n+        // http://www.archivum.info/derby-dev@db.apache.org/2004-12/msg00270.html\n+        maxConstraintNameLength = 128;\n         maxIndexNameLength = 128;\n-        maxColumnNameLength = 30;\n+        maxColumnNameLength = 128;\n         maxTableNameLength = 128;\n \n         useGetBytesForBlobs = true;\n@@ -100,26 +102,4 @@ public void closeDataSource(DataSource dataSource) {\n             }\n         }\n     }\n-    \n-    /**\n-     * Adds extra SQLState code that Derby JDBC Driver uses. In JDBC 4.0,\n-     * SQLState will follow either XOPEN or SQL 2003 convention. A compliant\n-     * driver can be queries via DatabaseMetaData.getSQLStateType() to detect\n-     * the convention type.<br>\n-     * This method is overwritten to highlight that a) the SQL State is ideally\n-     * uniform across JDBC Drivers but not practically and b) the overwritten\n-     * method must crate a new list to return as the super classes list is\n-     * unmodifable.\n-     */\n-    public List getSQLStates(int exceptionType) {\n-    \tList original = super.getSQLStates(exceptionType);\n-    \tif (exceptionType == StoreException.LOCK) {\n-    \t\t// Can not add new codes to unmodifable list of the super class\n-    \t\tList newStates = new ArrayList(original);\n-    \t\tnewStates.add(\"40XL1\");\n-    \t\treturn newStates;\n-    \t}\n-    \treturn original;\n-    }\n-    \n }"},{"sha":"0a199612f4a9c052a40fb546696eb7aca32fe9a4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":46,"deletions":13,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -28,12 +28,15 @@\n import java.util.Arrays;\n import java.util.Collection;\n \n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n+import org.apache.openjpa.util.UnsupportedException;\n \n /**\n  * Dictionary for Informix database. Notable features:\n@@ -74,6 +77,9 @@\n     private final Collection _seenConnections = new ReferenceHashSet\n         (ReferenceHashSet.WEAK);\n \n+    private static final Localizer _loc = Localizer.forPackage\n+        (InformixDictionary.class);\n+\n     public InformixDictionary() {\n         platform = \"Informix\";\n         validationSQL = \"SELECT FIRST 1 CURRENT TIMESTAMP \"\n@@ -91,14 +97,6 @@ public InformixDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_AFTER;\n \n-        maxTableNameLength = 18;\n-        maxColumnNameLength = 18;\n-        maxIndexNameLength = 18;\n-        maxConstraintNameLength = 18;\n-\n-        // Informix uses a non-standard \":\" to separate schema and table names\n-        catalogSeparator = \":\";\n-\n         // informix supports \"CLOB\" type, but any attempt to insert\n         // into them raises: \"java.sql.SQLException: Can't convert fromnull\"\n         useGetStringForClobs = true;\n@@ -112,7 +110,7 @@ public InformixDictionary() {\n         doubleTypeName = \"NUMERIC(32,20)\";\n         dateTypeName = \"DATE\";\n         timeTypeName = \"DATETIME HOUR TO SECOND\";\n-        timestampTypeName = \"DATETIME YEAR TO SECOND\";\n+        timestampTypeName = \"DATETIME YEAR TO FRACTION(3)\";\n         doubleTypeName = \"NUMERIC(32,20)\";\n         floatTypeName = \"REAL\";\n         bigintTypeName = \"NUMERIC(32,0)\";\n@@ -123,7 +121,6 @@ public InformixDictionary() {\n         }));\n \n         supportsQueryTimeout = false;\n-        supportsMultipleNontransactionalResultSets = false;\n         supportsLockingWithDistinctClause = false;\n         supportsLockingWithMultipleTables = false;\n         supportsLockingWithOrderClause = false;\n@@ -136,7 +133,21 @@ public InformixDictionary() {\n         // Informix doesn't support aliases in deletes if the table has an index\n         allowsAliasInBulkClause = false;\n         \n-        supportsSubselect = false;\n+        // Informix doesn't understand \"X CROSS JOIN Y\", but it does understand\n+        // the equivalent \"X JOIN Y ON 1 = 1\"\n+        crossJoinClause = \"JOIN\";\n+        requiresConditionForCrossJoin = true;\n+\n+        concatenateFunction = \"CONCAT({0},{1})\";\n+        nextSequenceQuery = \"SELECT {0}.NEXTVAL FROM SYSTABLES WHERE TABID=1\";\n+        supportsCorrelatedSubselect = false;\n+        swapSchemaAndCatalog = false;\n+        \n+        // Informix does not support foreign key delete action NULL or DEFAULT\n+        supportsNullDeleteAction = false;\n+        supportsDefaultDeleteAction = false;\n+        \n+        trimSchemaName = true;\n     }\n \n     public void connectedConfiguration(Connection conn)\n@@ -149,6 +160,13 @@ public void connectedConfiguration(Connection conn)\n             else\n                 driverVendor = VENDOR_OTHER;\n         }\n+        if (isJDBC3) {\n+            conn.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"connection-defaults\", new Object[]{\n+                    conn.getAutoCommit(), conn.getHoldability(),\n+                    conn.getTransactionIsolation()}));\n+        }\n     }\n \n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n@@ -193,7 +211,7 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n         throws SQLException {\n         // informix actually requires that a boolean be set: it cannot\n         // handle a numeric argument\n-        stmnt.setBoolean(idx, val);\n+        stmnt.setString(idx, val ? \"t\" : \"f\");\n     }\n \n     public String[] getCreateTableSQL(Table table) {\n@@ -259,4 +277,19 @@ public Connection decorate(Connection conn)\n             }\n         return conn;\n     }\n-}\n+\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n+        FilterValue start) {\n+        throw new UnsupportedException(_loc.get(\"function-not-supported\",\n+                getClass(), \"LOCATE\"));\n+    }\n+\n+    public boolean needsToCreateIndex(Index idx, Table table) {\n+       // Informix will automatically create a unique index for the \n+       // primary key, so don't create another index again\n+       PrimaryKey pk = table.getPrimaryKey();\n+       if (pk != null && idx.columnsMatch(pk.getColumns()))\n+           return false;\n+       return true;\n+    }\n+}\n\\ No newline at end of file"},{"sha":"9f28b9bb13d9e98902564a5a3646aad86d262fb1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":48,"deletions":7,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -202,20 +202,32 @@ public int getCount(JDBCStore store)\n     }\n \n     public Result execute(JDBCStore store, JDBCFetchConfiguration fetch)\n+            throws SQLException {\n+        return execute(store, fetch, null);\n+    }    \n+\n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n+        int lockLevel)\n+        throws SQLException {\n+        return execute(store, fetch, lockLevel, null);\n+    }\n+    \n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch, \n+        List params)\n         throws SQLException {\n         if (fetch == null)\n             fetch = store.getFetchConfiguration();\n-        return execute(store, fetch, fetch.getReadLockLevel());\n+        return execute(store, fetch, fetch.getReadLockLevel(), params);\n     }\n \n     public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n-        int lockLevel)\n+        int lockLevel, List params)\n         throws SQLException {\n         if (fetch == null)\n             fetch = store.getFetchConfiguration();\n \n         if (sels.length == 1) {\n-            Result res = sels[0].execute(store, fetch, lockLevel);\n+            Result res = sels[0].execute(store, fetch, lockLevel, params);\n             ((AbstractResult) res).setBaseMapping(mappings[0]);\n             return res;\n         }\n@@ -224,7 +236,7 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n             AbstractResult res;\n             for (int i = 0; i < sels.length; i++) {\n                 res = (AbstractResult) sels[i].execute(store, fetch,\n-                    lockLevel);\n+                    lockLevel, params);\n                 res.setBaseMapping(mappings[i]);\n                 res.setIndexOf(i);\n \n@@ -256,7 +268,7 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n             List l;\n             for (int i = 0; i < res.length; i++) {\n                 res[i] = (AbstractResult) sels[i].execute(store, fetch,\n-                    lockLevel);\n+                    lockLevel, params);\n                 res[i].setBaseMapping(mappings[i]);\n                 res[i].setIndexOf(i);\n \n@@ -303,7 +315,7 @@ public String toString() {\n     /**\n      * A select that is part of a logical union.\n      */\n-    protected class UnionSelect\n+    public class UnionSelect\n         implements Select {\n \n         protected final SelectImpl sel;\n@@ -396,6 +408,18 @@ public int getCount(JDBCStore store)\n             return sel.getCount(store);\n         }\n \n+        public Result execute(JDBCStore store, JDBCFetchConfiguration fetch, \n+            List params)\n+            throws SQLException {\n+            return sel.execute(store, fetch, params);\n+        }\n+\n+        public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n+            int lockLevel, List params)\n+            throws SQLException {\n+            return sel.execute(store, fetch, lockLevel, params);\n+        }\n+\n         public Result execute(JDBCStore store, JDBCFetchConfiguration fetch)\n             throws SQLException {\n             return sel.execute(store, fetch);\n@@ -406,7 +430,7 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n             throws SQLException {\n             return sel.execute(store, fetch, lockLevel);\n         }\n-\n+        \n         public List getSubselects() {\n             return Collections.EMPTY_LIST;\n         }\n@@ -475,6 +499,14 @@ public SQLBuffer getHaving() {\n             return sel.getHaving();\n         }\n \n+        public SQLBuffer getSQL() {\n+            return sel.getSQL();\n+        }\n+        \n+        public void setSQL(JDBCStore store, JDBCFetchConfiguration fetch) {\n+            sel.setSQL(store, fetch);\n+        }\n+        \n         public void addJoinClassConditions() {\n             sel.addJoinClassConditions();\n         }\n@@ -717,6 +749,15 @@ public void wherePrimaryKey(Object oid, ClassMapping mapping,\n             JDBCStore store) {\n             sel.wherePrimaryKey(oid, mapping, store);\n         }\n+        \n+        public int wherePrimaryKey(ClassMapping mapping, Column[] toCols, \n+            Column[] fromCols, Object oid, JDBCStore store, PathJoins pj,\n+            SQLBuffer buf, List parmList) {\n+            return sel.wherePrimaryKey(mapping, toCols, fromCols, oid, store, pj, \n+                buf, parmList);\n+        }\n+        \n+        \n \n         public void whereForeignKey(ForeignKey fk, Object oid,\n             ClassMapping mapping, JDBCStore store) {"},{"sha":"2702aab559ebb8c25a3142c191d18dbe02ec8ded","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -211,6 +211,22 @@ public void setBaseMapping(ClassMapping mapping) {\n         _res[_idx].setBaseMapping(mapping);\n     }\n \n+    public FieldMapping getMappedByFieldMapping() {\n+        return _res[_idx].getMappedByFieldMapping();\n+    }\n+\n+    public void setMappedByFieldMapping(FieldMapping fieldMapping) {\n+        _res[_idx].setMappedByFieldMapping(fieldMapping);\n+    }\n+\n+    public Object getMappedByValue() {\n+        return _res[_idx].getMappedByValue();\n+    }\n+\n+    public void setMappedByValue(Object mappedByValue) {\n+        _res[_idx].setMappedByValue(mappedByValue);\n+    }\n+\n     public int indexOf() {\n         return _res[_idx].indexOf();\n     }\n@@ -252,6 +268,11 @@ public InputStream getBinaryStream(Object obj)\n         return _res[_idx].getBinaryStream(obj);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException {\n+        return _res[_idx].getLOBStream(store, obj);\n+    }\n+    \n     public Blob getBlob(Object obj)\n         throws SQLException {\n         return _res[_idx].getBlob(obj);"},{"sha":"d3e98abb404827ddd18aa74ba177195e3aee6d20","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":66,"deletions":3,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n@@ -51,7 +53,7 @@\n     /**\n      * Whether the driver automatically deserializes blobs.\n      */\n-    public boolean driverDeserializesBlobs = true;\n+    public boolean driverDeserializesBlobs = false;\n \n     /**\n      * Whether to inline multi-table bulk-delete operations into MySQL's \n@@ -70,11 +72,10 @@ public MySQLDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_MID;\n         supportsMultipleNontransactionalResultSets = false;\n-        supportsSubselect = false; // old versions\n         requiresAliasForSubselect = true; // new versions\n+        requiresTargetForDelete = true;\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n-        allowsAliasInBulkClause = false;\n \n         concatenateFunction = \"CONCAT({0},{1})\";\n \n@@ -112,6 +113,68 @@ public MySQLDictionary() {\n             \"ZEROFILL\" }));\n     }\n \n+    public void connectedConfiguration(Connection conn) throws SQLException {\n+        super.connectedConfiguration(conn);\n+\n+        DatabaseMetaData metaData = conn.getMetaData();\n+        // The product version looks like 4.1.3-nt\n+        String productVersion = metaData.getDatabaseProductVersion();\n+        // The driver version looks like mysql-connector-java-3.1.11 (...)\n+        String driverVersion = metaData.getDriverVersion();\n+\n+        try {\n+            int[] versions = getMajorMinorVersions(productVersion);\n+            int maj = versions[0];\n+            int min = versions[1];\n+            if (maj < 4 || (maj == 4 && min < 1)) {\n+                supportsSubselect = false;\n+                allowsAliasInBulkClause = false;\n+            }\n+\n+            versions = getMajorMinorVersions(driverVersion);\n+            maj = versions[0];\n+            if (maj < 5) {\n+                driverDeserializesBlobs = true;\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // we don't understand the version format.\n+            // That is ok. We just take the default values.\n+        }\n+    }\n+\n+    private static int[] getMajorMinorVersions(String versionStr)\n+        throws IllegalArgumentException {\n+        int beginIndex = 0;\n+        int endIndex = 0;\n+\n+        versionStr = versionStr.trim();\n+        char[] charArr = versionStr.toCharArray();\n+        for (int i = 0; i < charArr.length; i++) {\n+            if (Character.isDigit(charArr[i])) {\n+                beginIndex = i;\n+                break;\n+            }\n+        }\n+\n+        for (int i = beginIndex+1; i < charArr.length; i++) {\n+            if (charArr[i] != '.' && !Character.isDigit(charArr[i])) {\n+                endIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (endIndex < beginIndex)\n+            throw new IllegalArgumentException();\n+\n+        String[] arr = versionStr.substring(beginIndex, endIndex).split(\"\\\\.\");\n+        if (arr.length < 2)\n+            throw new IllegalArgumentException();\n+\n+        int maj = Integer.parseInt(arr[0]);\n+        int min = Integer.parseInt(arr[1]);\n+        return new int[]{maj, min};\n+    }\n+\n     public String[] getCreateTableSQL(Table table) {\n         String[] sql = super.getCreateTableSQL(table);\n         if (!StringUtils.isEmpty(tableType))"},{"sha":"872d964880fdef32ef96970877c39679050a075f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":24,"deletions":5,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n import java.sql.Blob;\n import java.sql.Clob;\n import java.sql.Connection;\n@@ -45,9 +46,9 @@\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.lib.jdbc.DelegatingDatabaseMetaData;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n \n@@ -164,6 +165,7 @@ public OracleDictionary() {\n         substringFunctionName = \"SUBSTR\";\n         super.setBatchLimit(defaultBatchLimit);\n         selectWordSet.add(\"WITH\");\n+        reportsSuccessNoInfoOnBatchUpdates = true;\n     }\n \n     public void endConfiguration() {\n@@ -1002,7 +1004,8 @@ private Clob getEmptyClob()\n             return EMPTY_CLOB;\n         try {\n             return EMPTY_CLOB = (Clob) Class.forName(\"oracle.sql.CLOB\",true, \n-                    Thread.currentThread().getContextClassLoader()).\n+                    AccessController.doPrivileged(J2DoPrivHelper\n+                            .getContextClassLoaderAction())).\n                 getMethod(\"empty_lob\", new Class[0]).\n                 invoke(null, new Object[0]);\n         } catch (Exception e) {\n@@ -1016,7 +1019,8 @@ private Blob getEmptyBlob()\n             return EMPTY_BLOB;\n         try {\n             return EMPTY_BLOB = (Blob) Class.forName(\"oracle.sql.BLOB\",true, \n-                    Thread.currentThread().getContextClassLoader()).\n+                    AccessController.doPrivileged(J2DoPrivHelper\n+                            .getContextClassLoaderAction())).\n                 getMethod(\"empty_lob\", new Class[0]).\n                 invoke(null, new Object[0]);\n         } catch (Exception e) {\n@@ -1092,13 +1096,28 @@ private void appendXmlExtractValue(SQLBuffer buf, FilterValue val) {\n         buf.append(\"')\");\n     }\n     \n-    public void insertBlobForStreamingLoad(Row row, Column col)\n+    public void insertBlobForStreamingLoad(Row row, Column col, Object ob)\n         throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n         row.setNull(col);\n     }\n     \n-    public void insertClobForStreamingLoad(Row row, Column col)\n+    public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n         throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n         row.setNull(col);\n     }\n+\n+    public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n+        int updateSuccessCnt = 0;\n+        if (batchLimit > 0 && ps != null) {\n+            updateSuccessCnt = ps.getUpdateCount();\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"batch-update-success-count\",\n+                    updateSuccessCnt));\n+        }\n+        return updateSuccessCnt;\n+    }\n }"},{"sha":"2aaf95d3b2d8984a788ae13d9fd242c4c0601ea6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -29,13 +32,19 @@\n import java.util.Arrays;\n import java.util.Date;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.StoreException;\n+import org.postgresql.PGConnection;\n+import org.postgresql.largeobject.LargeObject;\n+import org.postgresql.largeobject.LargeObjectManager;\n \n /**\n  * Dictionary for Postgres.\n@@ -319,6 +328,151 @@ public Connection decorate(Connection conn)\n         return new PostgresConnection(super.decorate(conn), this);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n+        int column) throws SQLException {\n+        DelegatingConnection conn = (DelegatingConnection)store\n+            .getConnection();\n+        conn.setAutoCommit(false);\n+        LargeObjectManager lom = ((PGConnection)conn.getInnermostDelegate())\n+        .getLargeObjectAPI();\n+        if (rs.getInt(column) != -1) {\n+            LargeObject lo = lom.open(rs.getInt(column));\n+            return lo.getInputStream();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n+        if (row.getAction() == Row.ACTION_INSERT) {\n+            insertPostgresBlob(row, col, store, ob);\n+        } else if (row.getAction() == Row.ACTION_UPDATE) {\n+            updatePostgresBlob(row, col, store, ob, sel);\n+        }\n+    }\n+\n+    private void insertPostgresBlob(Row row, Column col, JDBCStore store,\n+        Object ob) throws SQLException {\n+        if (ob != null) {\n+            col.setType(Types.INTEGER);\n+            DelegatingConnection conn = (DelegatingConnection)store\n+            .getConnection();\n+            try {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection) conn.getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                // The create method is valid in versions previous 8.3\n+                // in 8.3 this methos is deprecated, use createLO\n+                int oid = lom.create();\n+                LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                OutputStream os = lo.getOutputStream();\n+                copy((InputStream)ob, os);\n+                lo.close();\n+                row.setInt(col, oid);\n+            } catch (IOException ioe) {\n+                throw new StoreException(ioe);\n+            } finally {\n+                conn.close();\n+            }\n+        } else {\n+            row.setInt(col, -1);\n+        }\n+    }\n+    \n+    private void updatePostgresBlob(Row row, Column col, JDBCStore store,\n+        Object ob, Select sel) throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        DelegatingConnection conn = \n+            (DelegatingConnection) store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            int oid = res.getInt(1);\n+            if (oid != -1) {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection)conn\n+                    .getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                if (ob != null) {\n+                    LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                    OutputStream os = lo.getOutputStream();\n+                    copy((InputStream)ob, os);\n+                    lo.close();\n+                } else {\n+                    lom.delete(oid);\n+                    row.setInt(col, -1);\n+                }\n+            } else {\n+                if (ob != null) {\n+                    conn.setAutoCommit(false);\n+                    PGConnection pgconn = (PGConnection)conn\n+                        .getInnermostDelegate();\n+                    LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                    oid = lom.create();\n+                    LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                    OutputStream os = lo.getOutputStream();\n+                    copy((InputStream)ob, os);\n+                    lo.close();\n+                    row.setInt(col, oid);\n+                }\n+            }\n+\n+        } catch (IOException ioe) {\n+            throw new StoreException(ioe);\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+\n+    }\n+    \n+    public void updateBlob(Select sel, JDBCStore store, InputStream is)\n+        throws SQLException {\n+        //Do nothing\n+    }\n+\n+    public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        DelegatingConnection conn = \n+            (DelegatingConnection) store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            int oid = res.getInt(1);\n+            if (oid != -1) {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection)conn\n+                    .getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                lom.delete(oid);\n+            }\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+    }\n+    \n     /**\n      * Connection wrapper to work around the postgres empty result set bug.\n      */"},{"sha":"3a0be1ba78da408fbcae3bef3247f18b90fb40ce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -192,10 +192,10 @@ public void clearForeignKey(ForeignKey fk)\n     }\n \n     /**\n-     * If this is a delete, delay foreign keys to other deleted objects if\n-     * the key is restricted. If this is an update or insert, delay foreign\n-     * keys to other inserts if the key is not logical. If the foreign key\n-     * is to a new record and the columns are auto-inc, record it.\n+     * If this is a delete, delay foreign keys to other deleted objects if the \n+     * key is restricted or cascade. If this is an update or insert, delay \n+     * foreign keys to other inserts if the key is not logical. If the foreign \n+     * key is to a new record and the columns are auto-inc, record it.\n      */\n     private boolean delayForeignKey(ForeignKey fk, OpenJPAStateManager sm,\n         boolean set) {\n@@ -204,7 +204,8 @@ private boolean delayForeignKey(ForeignKey fk, OpenJPAStateManager sm,\n \n         if (getAction() == ACTION_DELETE)\n             return sm.isDeleted() && !fk.isDeferred()\n-                && fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT;\n+                && (fk.getDeleteAction() == ForeignKey.ACTION_RESTRICT ||\n+                    fk.getDeleteAction() == ForeignKey.ACTION_CASCADE);\n \n         if (!sm.isNew() || sm.isFlushed())\n             return false;"},{"sha":"8f5c729f4c762ea3a24e0a1c24a91a3dfa7bce14","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -160,6 +160,36 @@ public boolean containsAll(Column[] cols, Joins joins)\n      */\n     public void setBaseMapping(ClassMapping mapping);\n \n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByFieldMapping is field mapping representing \n+     * the inverse relationship. This is to avoid unneeded  \n+     * extra sql to retrieve the eager inverse field.\n+     */\n+    public FieldMapping getMappedByFieldMapping();\n+\n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByFieldMapping is field mapping representing \n+     * the inverse relationship. This is to avoid unneeded  \n+     * extra sql to retrieve the eager inverse field.\n+     */\n+    public void setMappedByFieldMapping(FieldMapping fieldMapping);\n+\n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByValue is value of the owner of the toMany relationship. \n+     * This is to avoid unneeded extra sql to retrieve the eager inverse field.\n+     */\n+    public Object getMappedByValue();\n+\n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByValue is value of the owner of the toMany relationship. \n+     * This is to avoid unneeded extra sql to retrieve the eager inverse field.\n+     */\n+    public void setMappedByValue(Object mappedByValue);\n+\n     /**\n      * The index of the select within the UNION that the current row\n      * corresponds to, or 0.\n@@ -212,7 +242,9 @@ public BigInteger getBigInteger(Object obj)\n      */\n     public InputStream getBinaryStream(Object obj)\n         throws SQLException;\n-\n+    \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException;\n     /**\n      * Return the value stored in the given column or id; may not be supported\n      * by results that are not backed by a SQL result set."},{"sha":"2398c7fd0a8cdf6617c65ab13b3631150246568e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.meta.JavaTypes;\n+\n import serp.util.Numbers;\n \n /**\n@@ -345,6 +346,11 @@ protected long getLongInternal(Object obj, Joins joins)\n         return _dict.getLong(_rs, ((Number) obj).intValue());\n     }\n \n+    protected Object getStreamInternal(JDBCStore store, Object obj,\n+        int metaTypeCode, Object arg, Joins joins) throws SQLException {\n+        return getLOBStreamInternal(store, obj, joins);\n+    }\n+    \n     protected Object getObjectInternal(Object obj, int metaTypeCode,\n         Object arg, Joins joins)\n         throws SQLException {\n@@ -498,4 +504,9 @@ protected int findObject(Object obj, Joins joins)\n             return 0;\n         }\n     }\n+  \n+    protected InputStream getLOBStreamInternal(JDBCStore store, Object obj,\n+        Joins joins) throws SQLException {\n+        return _dict.getLOBStream(store, _rs, ((Number) obj).intValue());\n+    }\n }"},{"sha":"b59a47c531612cf92cf22d742f26a08e264bb62d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -675,8 +675,11 @@ protected void setObject(Column col, Object val, int metaType,\n         throws SQLException {\n         // never set auto increment columns and honor column defaults\n         if (_action == ACTION_INSERT) {\n-            if (col.isAutoAssigned())\n+            if (col.isAutoAssigned()) {\n+            \t// OPENJPA-349: validate because this can be the only column\n+            \tsetValid(true);\n                 return;\n+            }\n             if (!overrideDefault && val == null \n                 && col.getDefaultString() != null)\n                 return;"},{"sha":"4b5537afed6f6b72b16323c9f247b0b5a71d012e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":67,"deletions":5,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import serp.util.Numbers;\n@@ -55,6 +56,7 @@\n     private List _subsels = null;\n     private List _params = null;\n     private List _cols = null;\n+    private List _nonFKParams = null;\n \n     /**\n      * Default constructor.\n@@ -145,6 +147,11 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n+        if (buf._nonFKParams != null) {\n+            if (_nonFKParams == null)\n+                _nonFKParams = new ArrayList();\n+            _nonFKParams.addAll(buf._nonFKParams);\n+        }\n     }\n \n     public SQLBuffer append(Table table) {\n@@ -249,6 +256,26 @@ else if (o instanceof Raw)\n             _params.add(o);\n             if (_cols != null)\n                 _cols.add(col);\n+            if (col == null)\n+                return this;\n+            boolean isFK = false;\n+            ForeignKey[] fks = col.getTable().getForeignKeys();\n+            for (int i = 0; i < fks.length; i++) {\n+                Column[] cols = fks[i].getColumns();\n+                for (int j = 0; j < cols.length; j++) {\n+                    if (cols[j] == col) {\n+                        isFK = true;\n+                        break;\n+                    }\n+                }\n+                if (isFK)\n+                    break;\n+            }\n+            if (!isFK) {\n+                if (_nonFKParams == null)\n+                    _nonFKParams = new ArrayList();\n+                _nonFKParams.add(o);                \n+            }\n         }\n         return this;\n     }\n@@ -372,6 +399,9 @@ public List getParameters() {\n         return (_params == null) ? Collections.EMPTY_LIST : _params;\n     }\n \n+    public List getNonFKParameters() {\n+        return (_nonFKParams == null) ? Collections.EMPTY_LIST : _nonFKParams;\n+    }\n     /**\n      * Return the SQL for this buffer.\n      */\n@@ -445,14 +475,24 @@ public PreparedStatement prepareStatement(Connection conn)\n             ResultSet.CONCUR_READ_ONLY);\n     }\n \n+    /**\n+     * Create and populate the parameters of a prepared statement using\n+     * the SQL in this buffer.\n+     */\n+    public PreparedStatement prepareStatement(Connection conn, int rsType,\n+        int rsConcur, List parms)\n+        throws SQLException {\n+        return prepareStatement(conn, null, rsType, rsConcur, parms);\n+    }\n+    \n     /**\n      * Create and populate the parameters of a prepared statement using\n      * the SQL in this buffer.\n      */\n     public PreparedStatement prepareStatement(Connection conn, int rsType,\n         int rsConcur)\n         throws SQLException {\n-        return prepareStatement(conn, null, rsType, rsConcur);\n+        return prepareStatement(conn, rsType, rsConcur, null);\n     }\n \n     /**\n@@ -462,6 +502,16 @@ public PreparedStatement prepareStatement(Connection conn, int rsType,\n     public PreparedStatement prepareStatement(Connection conn,\n         JDBCFetchConfiguration fetch, int rsType, int rsConcur)\n         throws SQLException {\n+        return prepareStatement(conn, fetch, rsType, rsConcur, null);\n+    }\n+    \n+    /**\n+     * Create and populate the parameters of a prepred statement using the\n+     * SQL in this buffer and the given fetch configuration.\n+     */\n+    public PreparedStatement prepareStatement(Connection conn,\n+        JDBCFetchConfiguration fetch, int rsType, int rsConcur, List parms)\n+        throws SQLException {\n         if (rsType == -1 && fetch == null)\n             rsType = ResultSet.TYPE_FORWARD_ONLY;\n         else if (rsType == -1)\n@@ -476,7 +526,7 @@ else if (rsType == -1)\n         else\n             stmnt = conn.prepareStatement(getSQL(), rsType, rsConcur);\n         try {\n-            setParameters(stmnt);\n+            setParameters(stmnt, parms);\n             if (fetch != null) {\n                 if (fetch.getFetchBatchSize() > 0)\n                     stmnt.setFetchSize(fetch.getFetchBatchSize());\n@@ -559,13 +609,25 @@ else if (rsType == -1)\n      */\n     public void setParameters(PreparedStatement ps)\n         throws SQLException {\n-        if (_params == null)\n+        setParameters(ps, null);\n+    }\n+    \n+    /**\n+     * Populate the parameters of an existing PreparedStatement\n+     * with values from this buffer.\n+     */\n+    public void setParameters(PreparedStatement ps, List cacheParams)\n+        throws SQLException {\n+        List params = ((cacheParams != null && cacheParams.size() > 0) ? \n+            cacheParams : _params);    \n+        \n+        if (params == null)\n             return;\n \n         Column col;\n-        for (int i = 0; i < _params.size(); i++) {\n+        for (int i = 0; i < params.size(); i++) {\n             col = (_cols == null) ? null : (Column) _cols.get(i);\n-            _dict.setUnknown(ps, i + 1, _params.get(i), col);\n+            _dict.setUnknown(ps, i + 1, params.get(i), col);\n         }\n     }\n "},{"sha":"5ed844a4b8b6f4957a240bd5cc173f0f8d165ca5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLErrorCodeReader.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,155 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.sql;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import javax.xml.parsers.DocumentBuilder;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.xml.XMLFactory;\r\n+import org.apache.openjpa.util.StoreException;\r\n+import org.w3c.dom.Document;\r\n+import org.w3c.dom.Element;\r\n+import org.w3c.dom.NamedNodeMap;\r\n+import org.w3c.dom.Node;\r\n+import org.w3c.dom.NodeList;\r\n+\r\n+/**\r\n+ * Parses XML content of SQL Error State codes to populate errro codes for\r\n+ * a given Database Dictionary.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class SQLErrorCodeReader {\r\n+\tprivate Log log = null;\r\n+\tpublic static final String ERROR_CODE_DELIMITER = \",\";\r\n+\tpublic static final Map<String, Integer> storeErrorTypes = \r\n+\t\tnew HashMap<String, Integer>();\r\n+\tstatic {\r\n+\t\tstoreErrorTypes.put(\"lock\", StoreException.LOCK);\r\n+\t\tstoreErrorTypes.put(\"object-exists\", StoreException.OBJECT_EXISTS);\r\n+\t\tstoreErrorTypes\r\n+\t\t\t\t.put(\"object-not-found\", StoreException.OBJECT_NOT_FOUND);\r\n+\t\tstoreErrorTypes.put(\"optimistic\", StoreException.OPTIMISTIC);\r\n+\t\tstoreErrorTypes.put(\"referential-integrity\",\r\n+\t\t\t\tStoreException.REFERENTIAL_INTEGRITY);\r\n+\r\n+\t}\r\n+\t\r\n+\tprivate static final Localizer _loc = \r\n+\t\tLocalizer.forPackage(SQLErrorCodeReader.class);\r\n+\t\r\n+\tpublic List<String> getDictionaries(InputStream in) {\r\n+\t\tList<String> result = new ArrayList<String>();\r\n+\t\tDocumentBuilder builder = XMLFactory.getDOMParser(false, false);\r\n+\t\ttry {\r\n+\t\t\tDocument doc = builder.parse(in);\r\n+\t\t\tElement root = doc.getDocumentElement();\r\n+\t\t\tNodeList nodes = root.getElementsByTagName(\"dictionary\");\r\n+\t\t\tfor (int i = 0; i < nodes.getLength(); i++) {\r\n+\t\t\t\tNode node = nodes.item(i);\r\n+\t\t\t\tNamedNodeMap attrs = node.getAttributes();\r\n+\t\t\t\tNode dictionary = attrs.getNamedItem(\"class\");\r\n+\t\t\t\tif (dictionary != null) {\r\n+\t\t\t\t   result.add(dictionary.getNodeValue());\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tif (log.isWarnEnabled()) {\r\n+\t\t\t\tlog.error(_loc.get(\"error-code-parse-error\"));\r\n+\t\t\t}\r\n+\t\t} finally {\r\n+\t\t\ttry {\r\n+\t\t\t\tin.close();\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\t// ignore\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Parses given stream of XML content for error codes of the given database\r\n+\t * dictionary name. Populates the given dictionary with the error codes.\r\n+\t * \r\n+\t */\r\n+\tpublic void parse(InputStream in, String dictName, DBDictionary dict) {\r\n+\t\tif (in == null || dict == null)\r\n+\t\t\treturn;\r\n+\t\tlog = dict.conf.getLog(JDBCConfiguration.LOG_JDBC);\r\n+\t\tDocumentBuilder builder = XMLFactory.getDOMParser(false, false);\r\n+\t\ttry {\r\n+\t\t\tDocument doc = builder.parse(in);\r\n+\t\t\tElement root = doc.getDocumentElement();\r\n+\t\t\tNodeList nodes = root.getElementsByTagName(\"dictionary\");\r\n+\t\t\tfor (int i = 0; i < nodes.getLength(); i++) {\r\n+\t\t\t\tNode node = nodes.item(i);\r\n+\t\t\t\tNamedNodeMap attrs = node.getAttributes();\r\n+\t\t\t\tNode dictionary = attrs.getNamedItem(\"class\");\r\n+\t\t\t\tif (dictionary != null \r\n+\t\t\t\t && dictionary.getNodeValue().equals(dictName)) {\r\n+\t\t\t\t\treadErrorCodes(node, dict);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tif (log.isWarnEnabled()) {\r\n+\t\t\t\tlog.error(_loc.get(\"error-code-parse-error\"));\r\n+\t\t\t}\r\n+\t\t} finally {\r\n+\t\t\ttry {\r\n+\t\t\t\tin.close();\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\t// ignore\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tstatic void readErrorCodes(Node node, DBDictionary dict) {\r\n+\t\tNodeList children = node.getChildNodes();\r\n+\t\tfor (int i = 0; i < children.getLength(); i++) {\r\n+\t\t\tNode child = children.item(i);\r\n+\t\t\tshort nodeType = child.getNodeType();\r\n+\t\t\tif (nodeType == Node.ELEMENT_NODE) {\r\n+\t\t\t\tString errorType = child.getNodeName();\r\n+\t\t\t\tNode textNode = child.getFirstChild();\r\n+\t\t\t\tif (storeErrorTypes.containsKey(errorType) && textNode != null){\r\n+\t\t\t\t\tString errorCodes = textNode.getNodeValue();\r\n+\t\t\t\t\tif (!StringUtils.isEmpty(errorCodes)) {\r\n+\t\t\t\t\t\tString[] codes = errorCodes.split(ERROR_CODE_DELIMITER);\r\n+\t\t\t\t\t\tfor (String code : codes) {\r\n+\t\t\t\t\t\t\tdict.addErrorCode(storeErrorTypes.get(errorType),\r\n+\t\t\t\t\t\t\t\t\tcode.trim());\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"cfd6934e850041581b4003afc13f5c7e22e846a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -117,32 +117,4 @@ public static OpenJPAException getStore(String msg, SQLException se,\n         }\n         return (SQLException[]) errs.toArray(new SQLException[errs.size()]);\n     }\n-    \n-    /**\n-     * Narrows the given SQLException to a specific type of \n-     * {@link StoreException#getSubtype() StoreException} by analyzing the\n-     * SQLState code supplied by SQLException. Each database-specific \n-     * {@link DBDictionary dictionary} can supply a set of error codes that will\n-     * map to a specific specific type of StoreException via \n-     * {@link DBDictionary#getSQLStates(int) getSQLStates()} method.\n-     * The default behavior is to return generic {@link StoreException \n-     * StoreException}.\n-     */\n-    public static OpenJPAException narrow(String msg, SQLException se, \n-    \t\tDBDictionary dict) {\n-        String e = se.getSQLState();\n-        if (dict.getSQLStates(StoreException.LOCK).contains(e)) \n-            return new LockException(msg);\n-        else if (dict.getSQLStates(StoreException.OBJECT_EXISTS).contains(e))\n-            return new ObjectExistsException(msg);\n-        else if (dict.getSQLStates(StoreException.OBJECT_NOT_FOUND).contains(e))\n-            return new ObjectNotFoundException(msg);\n-        else if (dict.getSQLStates(StoreException.OPTIMISTIC).contains(e))\n-            return new OptimisticException(msg);\n-        else if (dict.getSQLStates(StoreException.REFERENTIAL_INTEGRITY)\n-        \t\t.contains(e)) \n-            return new ReferentialIntegrityException(msg);\n-        else\n-            return new StoreException(msg);\n-    }\n }"},{"sha":"14a0d5e0820dc4dd7ae56b4fbd43e4238a1fc020","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -192,6 +192,19 @@\n      */\n     public SQLBuffer getHaving();\n \n+    /**\n+     * Return the SQL for this select. This buffer contains\n+     * the final SQL to be executed/cached.\n+     */\n+    public SQLBuffer getSQL();    \n+    \n+    /**\n+     * Create and set the SQLBuffer object to this select. This buffer contains\n+     * the final SQL to be executed/cached.\n+     */\n+    public void setSQL(JDBCStore store, JDBCFetchConfiguration fetch); \n+    \n+    \n     /**\n      * Apply class conditions from relation joins.  This may affect the return\n      * values of {@link #getJoins}, {@link #getJoinIterator}, and\n@@ -515,6 +528,19 @@ public boolean orderBy(SQLBuffer sql, boolean asc, Joins joins,\n      */\n     public void wherePrimaryKey(Object oid, ClassMapping mapping,\n         JDBCStore store);\n+    \n+    \n+    /**\n+     * Add where conditions setting the mapping's primary key to the given\n+     * oid values. If the parmList is not null, the value of the primary\n+     * key will be collected and saved into the parmList. If the parmList is \n+     * null, this method will build the where clause with the value\n+     * incorporated in the where clause.\n+     */\n+    public int wherePrimaryKey(ClassMapping mapping, Column[] toCols, \n+            Column[] fromCols, Object oid, JDBCStore store, PathJoins pj,\n+            SQLBuffer buf, List parmList);\n+    \n \n     /**\n      * Add where conditions setting the given foreign key to the given"},{"sha":"72aa438bf701368e89c5fcf0cf5af84da832b8b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.sql;\n \n import java.sql.SQLException;\n+import java.util.List;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -129,6 +130,20 @@ public int getCount(JDBCStore store)\n     public Result execute(JDBCStore store, JDBCFetchConfiguration fetch)\n         throws SQLException;\n \n+    /**\n+     * Execute this select in the context of the given store manager.\n+     */\n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n+        List params) \n+        throws SQLException;\n+\n+    /**\n+     * Execute this select in the context of the given store manager.\n+     */\n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n+        int lockLevel, List params)\n+        throws SQLException;\n+\n     /**\n      * Execute this select in the context of the given store manager.\n      */"},{"sha":"35d42f2b10e03d256d5781f28a9d6e3cc603913b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":211,"deletions":48,"changes":259,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -118,6 +118,9 @@\n     // 'parent.address.street' for the purposes of comparisons\n     private Map _aliases = null;\n \n+    // to cache table alias using Table as the key\n+    private Map _tableAliases = null;\n+\n     // map of indexes to table aliases like 'TABLENAME t0'\n     private SortedMap _tables = null;\n \n@@ -167,7 +170,10 @@\n     // if the bit is set, the corresponding alias has been removed from parent\n     // and recorded under subselect.\n     private BitSet _removedAliasFromParent = new BitSet(16);\n-     \n+\n+    //contains final sql statement to be executed/cached\n+    private SQLBuffer _sql = null;\n+    \n     /**\n      * Helper method to return the proper table alias for the given alias index.\n      */\n@@ -300,7 +306,7 @@ public int getCount(JDBCStore store)\n             stmnt = prepareStatement(conn, sql, null, \n                 ResultSet.TYPE_FORWARD_ONLY, \n                 ResultSet.CONCUR_READ_ONLY, false);\n-            rs = executeQuery(conn, stmnt, sql, false, store);\n+            rs = executeQuery(conn, stmnt, sql, false, store, null);\n             return getCount(rs);\n         } finally {\n             if (rs != null)\n@@ -312,37 +318,53 @@ public int getCount(JDBCStore store)\n         }\n     }\n \n-    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch)\n-        throws SQLException {\n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch, \n+        List parms) throws SQLException {\n         if (fetch == null)\n             fetch = store.getFetchConfiguration();\n         return execute(store.getContext(), store, fetch,\n-            fetch.getReadLockLevel());\n+            fetch.getReadLockLevel(), parms);\n+    }\n+\n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch) \n+        throws SQLException {\n+        return execute(store, fetch, null);\n+     }\n+\n+    public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n+        int lockLevel, List parms)\n+        throws SQLException {\n+            if (fetch == null)\n+                fetch = store.getFetchConfiguration();\n+            return execute(store.getContext(), store, fetch, lockLevel, parms);\n     }\n \n     public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n         int lockLevel)\n         throws SQLException {\n-        if (fetch == null)\n-            fetch = store.getFetchConfiguration();\n-        return execute(store.getContext(), store, fetch, lockLevel);\n+        return execute(store, fetch, lockLevel, null);\n     }\n \n     /**\n      * Execute this select in the context of the given store manager. The\n      * context is passed in separately for profiling purposes.\n      */\n     protected Result execute(StoreContext ctx, JDBCStore store, \n-        JDBCFetchConfiguration fetch, int lockLevel)\n+        JDBCFetchConfiguration fetch, int lockLevel, List params)\n         throws SQLException {\n-        boolean forUpdate = false;\n-        if (!isAggregate() && _grouping == null) {\n-            JDBCLockManager lm = store.getLockManager();\n-            if (lm != null)\n-                forUpdate = lm.selectForUpdate(this, lockLevel);\n-        }\n-\n-        SQLBuffer sql = toSelect(forUpdate, fetch);\n+        boolean forUpdate = isForUpdate(store, lockLevel);\n+        \n+        // A non-null _sql indicates that this SelectImpl object\n+        // is obtained from cache. The _sql is constructed\n+        // under the assumption that isAggregate() is false\n+        // and _grouping is null. If neither of these holds,\n+        // we need to re-construct the _sql\n+        if (_sql != null && (isAggregate() || _grouping != null)) \n+            _sql = null;\n+        \n+        if (_sql == null) \n+        \t_sql = toSelect(forUpdate, fetch);\n+        \n         boolean isLRS = isLRS();\n         int rsType = (isLRS && supportsRandomAccess(forUpdate))\n             ? -1 : ResultSet.TYPE_FORWARD_ONLY;\n@@ -351,13 +373,15 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         ResultSet rs = null;\n         try {\n             if (isLRS) \n-                stmnt = prepareStatement(conn, sql, fetch, rsType, -1, true); \n+                stmnt = prepareStatement(conn, _sql, fetch, rsType, -1, true, \n+                        params); \n             else\n-                stmnt = prepareStatement(conn, sql, null, rsType, -1, false);\n+                stmnt = prepareStatement(conn, _sql, null, rsType, -1, false, \n+                        params);\n             \n             setTimeout(stmnt, forUpdate, fetch);\n             \n-            rs = executeQuery(conn, stmnt, sql, isLRS, store);\n+            rs = executeQuery(conn, stmnt, _sql, isLRS, store, params);\n         } catch (SQLException se) {\n             // clean up statement\n             if (stmnt != null)\n@@ -367,7 +391,17 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         }\n \n         return getEagerResult(conn, stmnt, rs, store, fetch, forUpdate, \n-            sql.getSQL());\n+            _sql.getSQL());\n+    }\n+    \n+    private boolean isForUpdate(JDBCStore store, int lockLevel) {\n+    \tboolean forUpdate = false;\n+        if (!isAggregate() && _grouping == null) {\n+            JDBCLockManager lm = store.getLockManager();\n+            if (lm != null)\n+                forUpdate = lm.selectForUpdate(this, lockLevel);\n+        }\n+        return forUpdate;\n     }\n \n     /**\n@@ -413,10 +447,22 @@ private static void addEagerResults(SelectResult res, SelectImpl sel,\n     protected PreparedStatement prepareStatement(Connection conn, \n         SQLBuffer sql, JDBCFetchConfiguration fetch, int rsType, \n         int rsConcur, boolean isLRS) throws SQLException {\n+        // add comments why we pass in null as the last parameter\n+        return prepareStatement(conn, sql, fetch, rsType, rsConcur, isLRS, \n+                null);\n+    }\n+\n+    /**\n+     * This method is to provide override for non-JDBC or JDBC-like \n+     * implementation of preparing statement.\n+     */\n+    protected PreparedStatement prepareStatement(Connection conn, \n+        SQLBuffer sql, JDBCFetchConfiguration fetch, int rsType, \n+        int rsConcur, boolean isLRS, List params) throws SQLException {\n         if (fetch == null)\n-            return sql.prepareStatement(conn, rsType, rsConcur);\n+            return sql.prepareStatement(conn, rsType, rsConcur, params);\n         else\n-            return sql.prepareStatement(conn, fetch, rsType, -1);\n+            return sql.prepareStatement(conn, fetch, rsType, -1, params);\n     }\n     \n     /**\n@@ -445,7 +491,8 @@ protected void setTimeout(PreparedStatement stmnt, boolean forUpdate,\n      * implementation of executing query.\n      */\n     protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt, \n-        SQLBuffer sql, boolean isLRS, JDBCStore store) throws SQLException {\n+        SQLBuffer sql, boolean isLRS, JDBCStore store, List params) \n+        throws SQLException {\n         return stmnt.executeQuery();\n     }\n     \n@@ -526,6 +573,71 @@ public void setParent(Select parent, String path) {\n             else\n                 _joinSyntax = _parent._joinSyntax;\n         }\n+        \n+        if (_parent.getAliases() == null || _subPath == null)\n+            return;\n+        \n+        // resolve aliases for subselect from parent\n+        Set<Map.Entry> entries = _parent.getAliases().entrySet();\n+        for (Map.Entry entry : entries) {\n+            Object key = entry.getKey();\n+            Integer alias = (Integer) entry.getValue();\n+            if (key.toString().indexOf(_subPath) != -1 ||\n+                _parent.findTableAlias(alias) == false) {\n+                if (_aliases == null)\n+                    _aliases = new HashMap();\n+                _aliases.put(key, alias);\n+\n+                Object tableString = _parent.getTables().get(alias);\n+                if (_tables == null)\n+                    _tables = new TreeMap();\n+                _tables.put(alias, tableString);\n+                \n+                _removedAliasFromParent.set(alias.intValue());\n+            }\n+        }\n+        \n+        if (_aliases != null) {\n+            // aliases moved into subselect should be removed from parent\n+            entries = _aliases.entrySet();\n+            for (Map.Entry entry : entries) {\n+                Object key = entry.getKey();\n+                Integer alias = (Integer) entry.getValue();\n+                if (key.toString().indexOf(_subPath) != -1 ||\n+                    _parent.findTableAlias(alias) == false) {\n+                    _parent.removeAlias(key);\n+\n+                    Object tableString = _parent.getTables().get(alias);\n+                    _parent.removeTable(alias);\n+                }\n+            }\n+        }\n+    }\n+    \n+    private boolean findTableAlias(Integer alias) {\n+        // if alias is defined and referenced, return true.\n+        String value = \"t\" + alias.toString() + \".\";\n+        if (_tableAliases != null)\n+            return _tableAliases.containsValue(value) &&\n+               _tables.containsKey(alias);\n+        else\n+            return true;\n+    }\n+    \n+    public Map getAliases() {\n+        return _aliases;\n+    }\n+    \n+    public void removeAlias(Object key) {\n+        _aliases.remove(key);\n+    }\n+    \n+    public Map getTables() {\n+        return _tables;\n+    }\n+    \n+    public void removeTable(Object key) {\n+        _tables.remove(key);\n     }\n \n     public Select getFromSelect() {\n@@ -589,6 +701,19 @@ public SQLBuffer getHaving() {\n         return _having;\n     }\n \n+    public SQLBuffer getSQL() {\n+        return _sql;\n+    }\n+\n+    public void setSQL(SQLBuffer sql) {\n+        _sql = sql;\n+    }\n+\n+    public void setSQL(JDBCStore store, JDBCFetchConfiguration fetch) {\n+        boolean forUpdate = isForUpdate(store, fetch.getReadLockLevel());\n+        _sql = toSelect(forUpdate, fetch);\n+    }\n+    \n     public void addJoinClassConditions() {\n         if (_joins == null || _joins.joins() == null)\n             return;\n@@ -656,13 +781,30 @@ public String getColumnAlias(String col, Table table, Joins joins) {\n      * Return the alias for the given column.\n      */\n     private String getColumnAlias(String col, Table table, PathJoins pj) {\n+        String tableAlias = null;\n+        if (pj == null || pj.path() == null) {\n+            if (_tableAliases == null)\n+                _tableAliases = new HashMap();\n+            tableAlias = (String) _tableAliases.get(table);\n+            if (tableAlias == null) {\n+                tableAlias = getTableAlias(table, pj).toString();\n+                _tableAliases.put(table, tableAlias);\n+            }\n+            return new StringBuilder(tableAlias).append(col).toString();\n+        }\n+        return getTableAlias(table, pj).append(col).toString();\n+    }\n+    \n+    private StringBuilder getTableAlias(Table table, PathJoins pj) {\n+        StringBuilder buf = new StringBuilder();\n         if (_from != null) {\n             String alias = toAlias(_from.getTableIndex(table, pj, true));\n             if (_dict.requiresAliasForSubselect)\n-                return FROM_SELECT_ALIAS + \".\" + alias + \"_\" + col;\n-            return alias + \"_\" + col;\n+                return buf.append(FROM_SELECT_ALIAS).append(\".\").append(alias).\n+                    append(\"_\");\n+            return buf.append(alias).append(\"_\");\n         }\n-        return toAlias(getTableIndex(table, pj, true)) + \".\" + col;\n+        return buf.append(toAlias(getTableIndex(table, pj, true))).append(\".\");\n     }\n \n     public boolean isAggregate() {\n@@ -1263,12 +1405,38 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n             return;\n         }\n \n+        SQLBuffer buf = new SQLBuffer(_dict);\n+\n+        // only bother to pack pk values into array if app id        \n+        int count = wherePrimaryKey(mapping, toCols, fromCols, oid, store, pj, \n+        \tbuf, null);\n+            \t\n+        if (constCols != null && constCols.length > 0) {\n+            for (int i = 0; i < constCols.length; i++, count++) {\n+                if (count > 0)\n+                    buf.append(\" AND \");\n+                buf.append(getColumnAlias(constCols[i], pj));\n+\n+                if (vals[i] == null)\n+                    buf.append(\" IS \");\n+                else\n+                    buf.append(\" = \");\n+                buf.appendValue(vals[i], constCols[i]);\n+            }\n+        }\n+\n+        where(buf, pj);\n+    }\n+\n+    public int wherePrimaryKey(ClassMapping mapping, Column[] toCols, \n+    \tColumn[] fromCols, Object oid, JDBCStore store, PathJoins pj,\n+    \tSQLBuffer buf, List parmList) {\n         // only bother to pack pk values into array if app id\n+    \tboolean collectParmValueOnly = (parmList != null ? true : false);\n         Object[] pks = null;\n         if (mapping.getIdentityType() == ClassMapping.ID_APPLICATION)\n             pks = ApplicationIds.toPKValues(oid, mapping);\n \n-        SQLBuffer buf = new SQLBuffer(_dict);\n         Joinable join;\n         Object val;\n         int count = 0;\n@@ -1281,8 +1449,13 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n                 val = pks[mapping.getField(join.getFieldIndex()).\n                     getPrimaryKeyIndex()];\n                 val = join.getJoinValue(val, toCols[i], store);\n+                if (parmList != null)\n+                \tparmList.add(val);\n             }\n-\n+            \n+            if (collectParmValueOnly) \n+            \tcontinue;\n+            \n             if (count > 0)\n                 buf.append(\" AND \");\n             buf.append(getColumnAlias(fromCols[i], pj));\n@@ -1292,24 +1465,9 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n                 buf.append(\" = \");\n             buf.appendValue(val, fromCols[i]);\n         }\n-\n-        if (constCols != null && constCols.length > 0) {\n-            for (int i = 0; i < constCols.length; i++, count++) {\n-                if (count > 0)\n-                    buf.append(\" AND \");\n-                buf.append(getColumnAlias(constCols[i], pj));\n-\n-                if (vals[i] == null)\n-                    buf.append(\" IS \");\n-                else\n-                    buf.append(\" = \");\n-                buf.appendValue(vals[i], constCols[i]);\n-            }\n-        }\n-\n-        where(buf, pj);\n+        return count;\n     }\n-\n+    \n     /**\n      * Test to see if the given set of columns contains all the\n      * columns in the given potential subset.\n@@ -1552,8 +1710,13 @@ private void removeParentJoins(PathJoins pj) {\n             return;\n         if (_parent._joins != null && !_parent._joins.isEmpty()) {\n             boolean removed = false;\n-            if (!_removedAliasFromParent.isEmpty())\n-                removed = _parent._joins.joins().removeAll(pj.joins());\n+            if (!_removedAliasFromParent.isEmpty()) {\n+                for (Iterator itr = pj.joins().iterator(); itr.hasNext();) {\n+                   Join jn = (Join) itr.next();\n+                   if (_aliases.containsValue(jn.getIndex1()))\n+                       removed = _parent._joins.joins().remove(jn);\n+                }\n+            }\n             if (!removed)\n                 pj.joins().removeAll(_parent._joins.joins());\n         }"},{"sha":"272ee64ea99658130a1aefa5003aa59ec5d5d567","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -82,6 +82,7 @@ public SybaseDictionary() {\n \n         supportsLockingWithDistinctClause = false;\n         supportsNullTableForGetColumns = false;\n+        requiresAliasForSubselect = true;\n         requiresAutoCommitForMetaData = true;\n \n         maxTableNameLength = 30;\n@@ -130,6 +131,15 @@ public SybaseDictionary() {\n             \"TRAN\", \"TRIGGER\", \"TRUNCATE\", \"TSEQUAL\", \"UNPARTITION\", \"USE\",\n             \"USER_OPTION\", \"WAITFOR\", \"WHILE\", \"WRITETEXT\",\n         }));\n+\n+        // Sybase does not support foreign key delete/update action NULL, DEFAULT,\n+        // CASCADE\n+        supportsNullDeleteAction = false;\n+        supportsDefaultDeleteAction = false;\n+        supportsCascadeDeleteAction = false;\n+        supportsNullUpdateAction = false;\n+        supportsDefaultUpdateAction = false;\n+        supportsCascadeUpdateAction = false;\n     }\n \n     public int getJDBCType(int metaTypeCode, boolean lob) {"},{"sha":"5c918cd85318cbd7821ef97cce57a87f0a12d686","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -113,4 +113,5 @@ graph-not-cycle-free: A circular flush dependency has been found after all \\\n batch_limit: The batch limit is set to {0}.\n batch_update_info: ExecuteBatch command returns update count {0} for \\\n \tstatement {1}.\n-    \n+cache-hit: SQL Cache hit with key: {0} in {1}\n+cache-missed: SQL Cache missed with key: {0} in {1}    "},{"sha":"e53d1361e605292fd95c3130d5ef087ed7802a9d","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -410,6 +410,8 @@ untraversable-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to traverse through a non-relation field.\n num-cols-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to map a field that does not have exactly 1 column.\n-missing-unique-column: A unique constraint specified in mapping of class \"{0}\" \\\n-    to table \"{1}\" includes a column \"{2}\". However, the column does not \\\n-\texist in \"{1}\" table.\n+unique-missing-column: The column \"{1}\" in a unique constraint in \"{0}\" on \\\n+\ttable \"{2}\" can not be found in the list of available columns \"{3}\".\n+unique-no-table: A unique constraint on table \"{0}\" can not be added to \\\n+\tmapping of class \"{1}\" because the table does neither match its primary \\\n+\ttable \"{2}\" nor any of its secondary table(s) \"{3}\".\n\\ No newline at end of file"},{"sha":"f441b19ffad5808b066836b021eed7e702594c40","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -134,3 +134,6 @@ bad-unmapped-rel: \"{0}\" cannot be mapped without stringifying the oid of \\\n \tits \"{1}\" primary key field does not use a simple mapping.\n unmapped-datastore-value: Instances of type \"{0}\" are not valid query \\\n \tparameters because the type is not mapped.\n+cache-hit: SQL Cache hit with key: {0} in {1}\n+cache-missed: SQL Cache missed with key: {0} in {1}\n+cant-set-value: Field \"{1}\" of \"{0}\" can not be set to \"{2}\" value."},{"sha":"cab55e1bef5782aabf0393cddd2d999ea85c868b","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -147,3 +147,7 @@ generating-sequences: Reading sequences for schema \"{0}\"\n no-custom-ds: use a custom DataSource\n delete-table-contents: An error occurred while attempting to delete all \\\n     records from all mapped tables.\n+set-auto-commit: DataSource connection setAutoCommit to \"{0}\"\n+conn-failed: Failed to connect to DataSource. Verify Driver \"{0}\", URL \"{1}\" \\\n+\tand connection properties \"{2}\" are correct. See the nested exception for \\\n+\tfurther details."},{"sha":"6b6a103ecd7b4bd1a26b66a0e40a97045b40f38a","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -135,7 +135,7 @@ storage-restriction: The database \"{0}\" has restrictions that prevent it \\\n \tfrom being able to store the value \"{1}\" of type \"{2}\". The value \\\n \twill be rounded to \"{3}\" for storage.\n dict-not-supported: This database dictionary \"{0}\" is not officially supported \\\n-\tby BEA.\n+\tby OpenJPA.\n invalid-autoassign: This database dictionary \"{0}\" does not support \\\n \tauto-assigned column values.  The column \"{1}\" may not behave as desired.\n psql-no-set-fetch-size:\tThis version of the PostgreSQL JDBC driver does not \\\n@@ -169,4 +169,20 @@ millis-query-timeout: JDBC locking does not support millisecond-granularity \\\n     timeouts.  Use timeouts that are multiples of 1000 for even second values.\n db-not-supported: The database product \"{0}\", version \"{1}\" is not officially supported.\n stream-exception: Unexpected error recovering the row to stream the LOB.\n-batch_unlimit: The batch limit was changed from unlimit (-1) to {0}. \n\\ No newline at end of file\n+batch_unlimit: The batch limit was changed from unlimit (-1) to {0}.\n+function-not-supported: The database dictionary in use (\"{0}\") \\\n+\tdoes not support \"{1}\" function.\n+batch-update-success-count: ExecuteBatch command returns update success count {0}\n+connection-defaults: Initial connection autoCommit: {0}, holdability: {1}, \\\n+    TransactionIsolation: {2}\n+long-table-name: Table name \"{0}\" is {1}-character long. The database allows \\\n+\tmaximum {2}-character for a table name. \n+long-column-name: Column name \"{0}\" is {1}-character long. The database allows \\\n+\tmaximum {2}-character for a column name. \n+long-index-name: Index name \"{0}\" is {1}-character long. The database allows \\\n+\tmaximum {2}-character for an index name. \n+long-constraint-name: Constraint name \"{0}\" is {1}-character long. The \\\n+\tdatabase allows maximum {2}-character for a constraint name. \n+long-seq-name: Sequence name \"{0}\" is {1}-character long. The database allows \\\n+\tmaximum {2}-character for a sequence name. \n+\t\n\\ No newline at end of file"},{"sha":"5a532772390880a8e0e9252db7efd7004b08724c","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,146 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<!-- ======================================================================= -->\r\n+<!-- Lists SQL Error State codes for specific type of faults per database    -->\r\n+<!-- dictionary.                                                             -->\r\n+<!-- SQL Exceptions raised by JDBC should carry standard error state code    -->\r\n+<!-- but they hardly do. Hence, the error state codes for specific type of   -->\r\n+<!-- database error can be listed here. These codes help to narrow down the  -->\r\n+<!-- cause of failure at JDBC layer and bubbles up as more intelligible      -->\r\n+<!-- exception to the application.                                           -->\r\n+<!-- ======================================================================= -->\r\n+<sql-state-codes>\r\n+\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DB2Dictionary\">\r\n+\t\t<lock>-911,-913</lock>\r\n+\t\t<referential-integrity>-407,-530,-531,-532,-543,-544,-545,-603,-667,-803</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic></optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.DerbyDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\r\n+\t\t<lock>1205</lock>\r\n+\t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\r\n+\t\t<optimistic>1205</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.SybaseDictionary\">\r\n+\t\t<lock>1205</lock>\r\n+\t\t<referential-integrity>423,511,515,530,547,2601,2615,2714</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>1205</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.AccessDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.CacheDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.EmpressDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FoxProDictionary\">\r\n+\t\t<lock>40001</lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists>23505,456c</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>40XL1,40001</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.H2Dictionary\">\r\n+\t\t<referential-integrity>22003,22012,22025,23000,23001</referential-integrity>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.HSQLDictionary\">\r\n+\t\t<referential-integrity>-9</referential-integrity>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InformixDictionary\">\r\n+\t\t<referential-integrity>-239,-268,-692,-11030</referential-integrity>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.InterbaseDictionary\">\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.FirebirdDictionary\">\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\">\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.MySQLDictionary\">\r\n+\t\t<lock>1213</lock>\r\n+\t\t<referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\r\n+\t\t<object-exists>23000</object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>41000,1205,1213</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">\r\n+\t\t<lock></lock>\r\n+\t\t<referential-integrity>1,1400,1722,2291,2292</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic></optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PointbaseDictionary\">\r\n+\t\t<lock></lock>\r\n+\t\t<referential-integrity>22001,22005,23502,23503,23513,X0Y32</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic></optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+\t<dictionary class=\"org.apache.openjpa.jdbc.sql.PostgresDictionary\">\r\n+\t\t<lock>55P03,40P01</lock>\r\n+\t\t<referential-integrity>23000,23502,23503,23505,23514</referential-integrity>\r\n+\t\t<object-exists></object-exists>\r\n+\t\t<object-not-found></object-not-found>\r\n+\t\t<optimistic>55P03</optimistic>\r\n+\t</dictionary>\r\n+\t\r\n+</sql-state-codes>\n\\ No newline at end of file"},{"sha":"d35d9f7b00913a3e01f8a1496d87aab51e270b75","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","status":"added","additions":882,"deletions":0,"changes":882,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,882 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.ObjectOutput;\r\n+import java.sql.CallableStatement;\r\n+import java.sql.Connection;\r\n+import java.sql.DatabaseMetaData;\r\n+import java.sql.PreparedStatement;\r\n+import java.sql.SQLException;\r\n+import java.sql.SQLWarning;\r\n+import java.sql.Savepoint;\r\n+import java.sql.Statement;\r\n+import java.util.ArrayList;\r\n+import java.util.BitSet;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.enhance.StateManager;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.Strategy;\r\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.RowManager;\r\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.PCState;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * Tests AbstractUpdateManager flush's method exception return behavior.\r\n+ * </p>\r\n+ * \r\n+ * @author Albert Lee\r\n+ */\r\n+public class TestUpdateManagerFlushException extends /* Abstract */TestCase {\r\n+\r\n+    private TestUpdateManager updMgr;\r\n+\r\n+    public void setUp() {\r\n+        updMgr = new TestUpdateManager();\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests exception collection returns from UpdateManager flush method is in\r\n+     * the order the original exceptions are thrown.\r\n+     */\r\n+    public void testAddRetrieve() {\r\n+        \r\n+        Collection states = new ArrayList<OpenJPAStateManager>();\r\n+        states.add(new TestOpenJPAStateManager());\r\n+\r\n+        Collection exceps = updMgr.flush(states, new TestJDBCStore());\r\n+\r\n+        assertEquals(3, exceps.size());\r\n+        \r\n+        Iterator<Exception> itr = exceps.iterator();\r\n+        assertEquals(itr.next().getMessage(),\r\n+            \"TestUpdateManager.populateRowManager\");\r\n+        assertEquals(itr.next().getMessage(),\r\n+            \"TestUpdateManager.flush\");\r\n+        assertEquals(itr.next().getMessage(),\r\n+            \"TestUpdateManager.customInsert\");\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test update manager.\r\n+     */\r\n+    class TestUpdateManager extends AbstractUpdateManager {\r\n+\r\n+        protected Collection flush(RowManager rowMgr,\r\n+            PreparedStatementManager psMgr, Collection exceps) {\r\n+\r\n+            exceps.add(new SQLException(\"TestUpdateManager.flush\"));\r\n+\r\n+            return exceps;\r\n+        }\r\n+\r\n+        protected PreparedStatementManager newPreparedStatementManager(\r\n+            JDBCStore store, Connection conn) {\r\n+            return new PreparedStatementManagerImpl(store, conn);\r\n+        }\r\n+\r\n+        protected RowManager newRowManager() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean orderDirty() {\r\n+            return false;\r\n+        }\r\n+\r\n+        protected Collection populateRowManager(OpenJPAStateManager sm,\r\n+            RowManager rowMgr, JDBCStore store, Collection exceps,\r\n+            Collection customs) {\r\n+            \r\n+            exceps.add(new SQLException(\r\n+                \"TestUpdateManager.populateRowManager\"));\r\n+            customs.add(new CustomMapping(CustomMapping.INSERT, sm,\r\n+                new Strategy() {\r\n+                    public void customDelete(OpenJPAStateManager sm,\r\n+                        JDBCStore store) throws SQLException {\r\n+                    }\r\n+\r\n+                    public void customInsert(OpenJPAStateManager sm,\r\n+                        JDBCStore store) throws SQLException {\r\n+                        throw new SQLException(\r\n+                            \"TestUpdateManager.customInsert\");\r\n+                    }\r\n+\r\n+                    public void customUpdate(OpenJPAStateManager sm,\r\n+                        JDBCStore store) throws SQLException {\r\n+                    }\r\n+\r\n+                    public void delete(OpenJPAStateManager sm, JDBCStore store,\r\n+                        RowManager rm) throws SQLException {\r\n+                    }\r\n+\r\n+                    public String getAlias() {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public void initialize() {\r\n+                    }\r\n+\r\n+                    public void insert(OpenJPAStateManager sm, JDBCStore store,\r\n+                        RowManager rm) throws SQLException {\r\n+\r\n+                    }\r\n+\r\n+                    public Boolean isCustomDelete(OpenJPAStateManager sm,\r\n+                        JDBCStore store) {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public Boolean isCustomInsert(OpenJPAStateManager sm,\r\n+                        JDBCStore store) {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public Boolean isCustomUpdate(OpenJPAStateManager sm,\r\n+                        JDBCStore store) {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public void map(boolean adapt) {\r\n+                    }\r\n+\r\n+                    public void update(OpenJPAStateManager sm, JDBCStore store,\r\n+                        RowManager rm) throws SQLException {\r\n+                    }\r\n+                }));\r\n+            return exceps;\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test state manager.\r\n+     */\r\n+    class TestOpenJPAStateManager implements OpenJPAStateManager {\r\n+\r\n+        public boolean assignObjectId(boolean flush) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean beforeRefresh(boolean refreshAll) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void dirty(int field) {\r\n+        }\r\n+\r\n+        public Object fetch(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean fetchBoolean(int field) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public byte fetchByte(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public char fetchChar(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public double fetchDouble(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchField(int field, boolean transitions) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public float fetchFloat(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchInitialField(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int fetchInt(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public long fetchLong(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchObject(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public short fetchShort(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public String fetchString(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public StoreContext getContext() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getDirty() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getFlushed() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getId() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getImplData() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getImplData(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getIntermediate(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getLoaded() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getLock() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getManagedInstance() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public ClassMetaData getMetaData() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getObjectId() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public OpenJPAStateManager getOwner() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int getOwnerIndex() {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public PCState getPCState() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PersistenceCapable getPersistenceCapable() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getUnloaded(FetchConfiguration fetch) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getVersion() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void initialize(Class forType, PCState state) {\r\n+        }\r\n+\r\n+        public boolean isDefaultValue(int field) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isEmbedded() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isFlushed() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isFlushedDirty() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isImplDataCacheable() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isImplDataCacheable(int field) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isProvisional() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isVersionCheckRequired() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isVersionUpdateRequired() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void load(FetchConfiguration fetch) {\r\n+        }\r\n+\r\n+        public Object newFieldProxy(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object newProxy(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void removed(int field, Object removed, boolean key) {\r\n+        }\r\n+\r\n+        public Object setImplData(Object data, boolean cacheable) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object setImplData(int field, Object data) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void setIntermediate(int field, Object value) {\r\n+        }\r\n+\r\n+        public void setLock(Object lock) {\r\n+        }\r\n+\r\n+        public void setNextVersion(Object version) {\r\n+        }\r\n+\r\n+        public void setObjectId(Object oid) {\r\n+        }\r\n+\r\n+        public void setRemote(int field, Object value) {\r\n+        }\r\n+\r\n+        public void setVersion(Object version) {\r\n+        }\r\n+\r\n+        public void store(int field, Object value) {\r\n+        }\r\n+\r\n+        public void storeBoolean(int field, boolean externalVal) {\r\n+        }\r\n+\r\n+        public void storeByte(int field, byte externalVal) {\r\n+        }\r\n+\r\n+        public void storeChar(int field, char externalVal) {\r\n+        }\r\n+\r\n+        public void storeDouble(int field, double externalVal) {\r\n+        }\r\n+\r\n+        public void storeField(int field, Object value) {\r\n+        }\r\n+\r\n+        public void storeFloat(int field, float externalVal) {\r\n+        }\r\n+\r\n+        public void storeInt(int field, int externalVal) {\r\n+        }\r\n+\r\n+        public void storeLong(int field, long externalVal) {\r\n+        }\r\n+\r\n+        public void storeObject(int field, Object externalVal) {\r\n+        }\r\n+\r\n+        public void storeShort(int field, short externalVal) {\r\n+        }\r\n+\r\n+        public void storeString(int field, String externalVal) {\r\n+        }\r\n+\r\n+        public void accessingField(int idx) {\r\n+        }\r\n+\r\n+        public void dirty(String field) {\r\n+        }\r\n+\r\n+        public Object fetchObjectId() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getGenericContext() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getPCPrimaryKey(Object oid, int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean isDeleted() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isDetached() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isDirty() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isNew() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isPersistent() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isTransactional() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void providedBooleanField(PersistenceCapable pc, int idx,\r\n+            boolean cur) {\r\n+        }\r\n+\r\n+        public void providedByteField(PersistenceCapable pc, int idx,\r\n+            byte cur) {\r\n+        }\r\n+\r\n+        public void providedCharField(PersistenceCapable pc, int idx, \r\n+            char cur) {\r\n+        }\r\n+\r\n+        public void providedDoubleField(PersistenceCapable pc, int idx,\r\n+            double cur) {\r\n+        }\r\n+\r\n+        public void providedFloatField(PersistenceCapable pc, int idx,\r\n+            float cur) {\r\n+        }\r\n+\r\n+        public void providedIntField(PersistenceCapable pc, int idx, \r\n+            int cur) {\r\n+        }\r\n+\r\n+        public void providedLongField(PersistenceCapable pc, int idx, \r\n+            long cur) {\r\n+        }\r\n+\r\n+        public void providedObjectField(PersistenceCapable pc, int idx,\r\n+            Object cur) {\r\n+        }\r\n+\r\n+        public void providedShortField(PersistenceCapable pc, int idx, \r\n+            short cur) {\r\n+        }\r\n+\r\n+        public void providedStringField(PersistenceCapable pc, int idx,\r\n+            String cur) {\r\n+        }\r\n+\r\n+        public void proxyDetachedDeserialized(int idx) {\r\n+        }\r\n+\r\n+        public boolean replaceBooleanField(PersistenceCapable pc, int idx) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public byte replaceByteField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public char replaceCharField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public double replaceDoubleField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public float replaceFloatField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public int replaceIntField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public long replaceLongField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object replaceObjectField(PersistenceCapable pc, int idx) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public short replaceShortField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public StateManager replaceStateManager(StateManager sm) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public String replaceStringField(PersistenceCapable pc, int idx) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean serializing() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void settingBooleanField(PersistenceCapable pc, int idx,\r\n+            boolean cur, boolean next, int set) {\r\n+        }\r\n+\r\n+        public void settingByteField(PersistenceCapable pc, int idx, byte cur,\r\n+            byte next, int set) {\r\n+        }\r\n+\r\n+        public void settingCharField(PersistenceCapable pc, int idx, char cur,\r\n+            char next, int set) {\r\n+        }\r\n+\r\n+        public void settingDoubleField(PersistenceCapable pc, int idx,\r\n+            double cur, double next, int set) {\r\n+        }\r\n+\r\n+        public void settingFloatField(PersistenceCapable pc, int idx,\r\n+            float cur, float next, int set) {\r\n+        }\r\n+\r\n+        public void settingIntField(PersistenceCapable pc, int idx, int cur,\r\n+            int next, int set) {\r\n+        }\r\n+\r\n+        public void settingLongField(PersistenceCapable pc, int idx, long cur,\r\n+            long next, int set) {\r\n+        }\r\n+\r\n+        public void settingObjectField(PersistenceCapable pc, int idx,\r\n+            Object cur, Object next, int set) {\r\n+        }\r\n+\r\n+        public void settingShortField(PersistenceCapable pc, int idx,\r\n+            short cur, short next, int set) {\r\n+        }\r\n+\r\n+        public void settingStringField(PersistenceCapable pc, int idx,\r\n+            String cur, String next, int set) {\r\n+        }\r\n+\r\n+        public boolean writeDetached(ObjectOutput out) throws IOException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void storeBooleanField(int fieldIndex, boolean value) {\r\n+        }\r\n+\r\n+        public void storeByteField(int fieldIndex, byte value) {\r\n+        }\r\n+\r\n+        public void storeCharField(int fieldIndex, char value) {\r\n+        }\r\n+\r\n+        public void storeDoubleField(int fieldIndex, double value) {\r\n+        }\r\n+\r\n+        public void storeFloatField(int fieldIndex, float value) {\r\n+        }\r\n+\r\n+        public void storeIntField(int fieldIndex, int value) {\r\n+        }\r\n+\r\n+        public void storeLongField(int fieldIndex, long value) {\r\n+        }\r\n+\r\n+        public void storeObjectField(int fieldIndex, Object value) {\r\n+        }\r\n+\r\n+        public void storeShortField(int fieldIndex, short value) {\r\n+        }\r\n+\r\n+        public void storeStringField(int fieldIndex, String value) {\r\n+        }\r\n+\r\n+        public boolean fetchBooleanField(int fieldIndex) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public byte fetchByteField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public char fetchCharField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public double fetchDoubleField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public float fetchFloatField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public int fetchIntField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public long fetchLongField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchObjectField(int fieldIndex) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public short fetchShortField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public String fetchStringField(int fieldIndex) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test connection.\r\n+     */\r\n+    class TestConnection implements Connection {\r\n+\r\n+        public void clearWarnings() throws SQLException {\r\n+        }\r\n+\r\n+        public void close() throws SQLException {\r\n+        }\r\n+\r\n+        public void commit() throws SQLException {\r\n+        }\r\n+\r\n+        public Statement createStatement() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Statement createStatement(int resultSetType,\r\n+            int resultSetConcurrency) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Statement createStatement(int resultSetType,\r\n+            int resultSetConcurrency, int resultSetHoldability)\r\n+            throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean getAutoCommit() throws SQLException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public String getCatalog() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int getHoldability() throws SQLException {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public DatabaseMetaData getMetaData() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int getTransactionIsolation() throws SQLException {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Map<String, Class<?>> getTypeMap() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public SQLWarning getWarnings() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean isClosed() throws SQLException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isReadOnly() throws SQLException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public String nativeSQL(String sql) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public CallableStatement prepareCall(String sql) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public CallableStatement prepareCall(String sql, int resultSetType,\r\n+            int resultSetConcurrency) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public CallableStatement prepareCall(String sql, int resultSetType,\r\n+            int resultSetConcurrency, int resultSetHoldability)\r\n+            throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql)\r\n+            throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int autoGeneratedKeys) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int[] columnIndexes) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            String[] columnNames) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int resultSetType, int resultSetConcurrency) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int resultSetType, int resultSetConcurrency,\r\n+            int resultSetHoldability) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void releaseSavepoint(Savepoint savepoint) throws SQLException {\r\n+        }\r\n+\r\n+        public void rollback() throws SQLException {\r\n+        }\r\n+\r\n+        public void rollback(Savepoint savepoint) throws SQLException {\r\n+        }\r\n+\r\n+        public void setAutoCommit(boolean autoCommit) throws SQLException {\r\n+        }\r\n+\r\n+        public void setCatalog(String catalog) throws SQLException {\r\n+        }\r\n+\r\n+        public void setHoldability(int holdability) throws SQLException {\r\n+        }\r\n+\r\n+        public void setReadOnly(boolean readOnly) throws SQLException {\r\n+        }\r\n+\r\n+        public Savepoint setSavepoint() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Savepoint setSavepoint(String name) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void setTransactionIsolation(int level) throws SQLException {\r\n+        }\r\n+\r\n+        public void setTypeMap(Map<String, Class<?>> map) throws SQLException {\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test store manager.\r\n+     */\r\n+    class TestJDBCStore implements JDBCStore {\r\n+\r\n+        public Object find(Object oid, ValueMapping vm,\r\n+            JDBCFetchConfiguration fetch) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public JDBCConfiguration getConfiguration() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Connection getConnection() {\r\n+            return new TestConnection();\r\n+        }\r\n+\r\n+        public StoreContext getContext() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public DBDictionary getDBDictionary() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public JDBCFetchConfiguration getFetchConfiguration() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public JDBCLockManager getLockManager() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public SQLFactory getSQLFactory() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void loadSubclasses(ClassMapping mapping) {\r\n+\r\n+        }\r\n+\r\n+        public Id newDataStoreId(long id, ClassMapping mapping, boolean subs) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"8b9def9fd5ea58433272f3a5470ef36a84486893","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"1ff224476d5e273eebfde43fb16df720381ce931","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.md5","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.md5","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.md5","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.md5?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1 @@\n+1c04cfd6dff604d4270156224d741c0e\n\\ No newline at end of file"},{"sha":"dc1ea7a1720b73971f008e74c9eed948bfd36e32","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.sha1","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.sha1","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.sha1","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.jar.sha1?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1 @@\n+ee2f4edf04371ba20e7ba9ebb1a55846fba4a5ab\n\\ No newline at end of file"},{"sha":"c045dd729f1c7cca7745777cb3bbb8e4b6bfbbcb","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n+        http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>com.ibm.websphere</groupId>\n+    <artifactId>websphere_uow_api</artifactId>\n+    <version>0.0.1</version>\n+    <name>WebSphere UOW API</name>\n+    <packaging>jar</packaging>\n+    <licenses>\n+        <license>\n+            <!-- \n+                The contents of license.txt are included here in the \n+                comments tag. The full text file may be found in the\n+                websphere_uow_api jar file in the root directory.\n+\n+                As I understand it the jar file may only be distributed\n+                with Apache OpenJPA (ie OpenJPA is the application mentioned\n+                below)\n+              -->\n+            <comments>\n+            You may use or redistribute the files or modules contained in this\n+            jar subject to the following terms:  \n+\n+The WebSphere Application Server files or modules contained in this jar \n+may be redistrubuted as provided by IBM to you, and only as part of Your \n+application distribution.  \n+\n+You may not use IBM's name or trademarks in connection with the marketing \n+of Your applications without IBM's prior written consent.  \n+\n+IBM PROVIDES THESE FILES OR MODULES ON AN \"AS IS\" BASIS AND IBM DISCLAIMS \n+ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE \n+WARRANTY OF NON-INFRINGEMENT AND THE IMPLIED WARRANTIES OF MERCHANTABILITY \n+OR FITNESS FOR A PARTICULAR PURPOSE.  IBM SHALL NOT BE LIABLE FOR ANY \n+DIRECT, INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT \n+OF THE USE OR OPERATION OF THE FILES OR MODULES .  IBM HAS NO OBLIGATION \n+TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS OR MODIFICATIONS TO \n+THE FILES OR MODULES .\n+            </comments>\n+        </license>\n+    </licenses>\n+</project>"},{"sha":"3dc4f3a4b73c2ff3bafabc131b6d75fca1e6f72d","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.md5","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.md5","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.md5","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.md5?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1 @@\n+095278fb41358599450220f918c1f0d3 "},{"sha":"c90336c33b456a1e63aff8391fec721283ecc386","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.sha1","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.sha1","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.sha1","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/0.0.1/websphere_uow_api-0.0.1.pom.sha1?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1 @@\n+58422cdc01d008740e58c0687684e1d979b9dd95 "},{"sha":"a474011bd0cb268bb0baa0f6be30633bf8b6b4c4","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml","status":"added","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><metadata>\n+  <groupId>com.ibm.websphere</groupId>\n+  <artifactId>websphere_uow_api</artifactId>\n+  <version>0.0.1</version>\n+  <versioning>\n+    <versions>\n+      <version>0.0.1</version>\n+    </versions>\n+    <lastUpdated>20080429183654</lastUpdated>\n+  </versioning>\n+</metadata>\n\\ No newline at end of file"},{"sha":"73b10622e4e5c51e6eb114cd092203c908569426","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.md5","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.md5","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.md5","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.md5?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1 @@\n+9f808e8e78bdb70e3a57e9e5cd22c39a\n\\ No newline at end of file"},{"sha":"b7520c252188a305299346309522424c70399da4","filename":"openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.sha1","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.sha1","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.sha1","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/internal-repository/com/ibm/websphere/websphere_uow_api/maven-metadata.xml.sha1?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1 @@\n+a89fd2b9dd1d41deafc9936146b268451a394939\n\\ No newline at end of file"},{"sha":"4a0515a67637cd0645ca4bae49d423e7e8b50579","filename":"openjpa-kernel/pom.xml","status":"modified","additions":172,"deletions":148,"changes":320,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -1,148 +1,172 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n-    <modelVersion>4.0.0</modelVersion>\r\n-    <groupId>org.apache.openjpa</groupId>\r\n-    <artifactId>openjpa-kernel</artifactId>\r\n-    <packaging>jar</packaging>\r\n-    <name>OpenJPA Kernel</name>\r\n-    <description>OpenJPA Kernel</description>\r\n-    <url>http://openjpa.apache.org</url>\r\n-    <parent>\r\n-        <groupId>org.apache.openjpa</groupId>\r\n-        <artifactId>openjpa-parent</artifactId>\r\n-        <version>1.1.0-SNAPSHOT</version>\r\n-    </parent>\r\n-    <dependencies>\r\n-        <dependency>\r\n-            <groupId>org.apache.openjpa</groupId>\r\n-            <artifactId>openjpa-lib</artifactId>\r\n-            <version>${pom.version}</version>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>org.apache.geronimo.specs</groupId>\r\n-            <artifactId>geronimo-jta_1.1_spec</artifactId>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>commons-pool</groupId>\r\n-            <artifactId>commons-pool</artifactId>\r\n-            <scope>compile</scope>\r\n-        </dependency>\r\n-    </dependencies>\r\n-    <build>\r\n-        <plugins>\r\n-            <plugin>\r\n-                <artifactId>maven-compiler-plugin</artifactId>\r\n-                <configuration>\r\n-                    <source>1.5</source>\r\n-                    <target>1.5</target>\r\n-                </configuration>\r\n-            </plugin>\r\n-            <plugin>\r\n-                <groupId>org.codehaus.mojo</groupId>\r\n-                <artifactId>javacc-maven-plugin</artifactId>\r\n-                <version>2.1</version>\r\n-                <executions>\r\n-                    <execution>\r\n-                        <id>jjtree-jpql</id>\r\n-                        <phase>generate-sources</phase>\r\n-                        <configuration>\r\n-                            <sourceDirectory>\r\n-                                ${basedir}/src/main/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\r\n-                            <outputDirectory>\r\n-                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</outputDirectory>\r\n-                            <buildNodeFiles>false</buildNodeFiles>\r\n-                        </configuration>\r\n-                        <goals>\r\n-                            <goal>jjtree</goal>\r\n-                        </goals>\r\n-                    </execution>\r\n-                    <execution>\r\n-                        <id>javacc-jpql</id>\r\n-                        <phase>generate-sources</phase>\r\n-                        <configuration>\r\n-                            <sourceDirectory>\r\n-                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\r\n-                            <outputDirectory>\r\n-                                ${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql</outputDirectory>\r\n-                        </configuration>\r\n-                        <goals>\r\n-                            <goal>javacc</goal>\r\n-                        </goals>\r\n-                    </execution>\r\n-                </executions>\r\n-            </plugin>\r\n-            <plugin>\r\n-                <artifactId>maven-antrun-plugin</artifactId>\r\n-                <executions>\r\n-                    <execution>\r\n-                        <phase>process-sources</phase>\r\n-                        <configuration>\r\n-                            <tasks>\r\n-                                <delete\r\n-                                    file=\"${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql/ParseException.java\"/>\r\n-                            </tasks>\r\n-                        </configuration>\r\n-                        <goals>\r\n-                            <goal>run</goal>\r\n-                        </goals>\r\n-                    </execution>\r\n-                    <execution>\r\n-\t\t\t\t\t\t<id>add-was-interfaces</id>\r\n-\t\t\t\t\t\t<phase>process-classes</phase>\r\n-\t\t\t\t\t\t<configuration>\r\n-\t\t\t\t\t\t\t<tasks>\r\n-\t\t\t\t\t\t\t\t<java\r\n-\t\t\t\t\t\t\t\t\tclassname=\"org.apache.openjpa.ee.WASManagedRuntime\" classpathref=\"maven.runtime.classpath\" />\r\n-\t\t\t\t\t\t\t</tasks>\r\n-\t\t\t\t\t\t</configuration>\r\n-\t\t\t\t\t\t<goals>\r\n-\t\t\t\t\t\t\t<goal>run</goal>\r\n-\t\t\t\t\t\t</goals>\r\n-\t\t\t\t\t</execution>\r\n-                    <execution>\r\n-\t\t\t\t\t\t<id>generate-standard-sco-proxies</id>\r\n-\t\t\t\t\t\t<phase>process-classes</phase>\r\n-\t\t\t\t\t\t<configuration>\r\n-\t\t\t\t\t\t\t<tasks>\r\n-\t\t\t\t\t\t\t\t<java\r\n-\t\t\t\t\t\t\t\t\tclassname=\"org.apache.openjpa.util.ProxyManagerImpl\" classpathref=\"maven.runtime.classpath\">\r\n-                                    <arg line=\"-utils 5\"/>\r\n-                                </java>\r\n-\t\t\t\t\t\t\t</tasks>\r\n-\t\t\t\t\t\t</configuration>\r\n-\t\t\t\t\t\t<goals>\r\n-\t\t\t\t\t\t\t<goal>run</goal>\r\n-\t\t\t\t\t\t</goals>\r\n-\t\t\t\t\t</execution>\r\n-                </executions>\r\n-            </plugin>\r\n-        </plugins>\r\n-    </build>\r\n-</project>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.apache.openjpa</groupId>\n+    <artifactId>openjpa-kernel</artifactId>\n+    <packaging>jar</packaging>\n+    <name>OpenJPA Kernel</name>\n+    <description>OpenJPA Kernel</description>\n+    <url>http://openjpa.apache.org</url>\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.2.0</version>\n+    </parent>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-lib</artifactId>\n+            <version>${pom.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jms_1.1_spec</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-jta_1.1_spec</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-pool</groupId>\n+            <artifactId>commons-pool</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.ibm.websphere</groupId>\n+            <artifactId>websphere_uow_api</artifactId>\n+            <version>0.0.1</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.5</source>\n+                    <target>1.5</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>javacc-maven-plugin</artifactId>\n+                <version>2.1</version>\n+                <executions>\n+                    <execution>\n+                        <id>jjtree-jpql</id>\n+                        <phase>generate-sources</phase>\n+                        <configuration>\n+                            <sourceDirectory>\n+                                ${basedir}/src/main/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\n+                            <outputDirectory>\n+                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</outputDirectory>\n+                            <buildNodeFiles>false</buildNodeFiles>\n+                        </configuration>\n+                        <goals>\n+                            <goal>jjtree</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>javacc-jpql</id>\n+                        <phase>generate-sources</phase>\n+                        <configuration>\n+                            <sourceDirectory>\n+                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\n+                            <outputDirectory>\n+                                ${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql</outputDirectory>\n+                        </configuration>\n+                        <goals>\n+                            <goal>javacc</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>process-sources</phase>\n+                        <configuration>\n+                            <tasks>\n+                                <delete file=\"${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql/ParseException.java\" />\n+                            </tasks>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+\t\t\t\t\t\t<id>add-was-interfaces</id>\n+\t\t\t\t\t\t<phase>process-classes</phase>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<tasks>\n+\t\t\t\t\t\t\t\t<java classname=\"org.apache.openjpa.ee.WASManagedRuntime\" classpathref=\"maven.runtime.classpath\" />\n+\t\t\t\t\t\t\t</tasks>\n+\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>run</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t</execution>\n+                    <execution>\n+\t\t\t\t\t\t<id>generate-standard-sco-proxies</id>\n+\t\t\t\t\t\t<phase>process-classes</phase>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<tasks>\n+\t\t\t\t\t\t\t\t<java classname=\"org.apache.openjpa.util.ProxyManagerImpl\" classpathref=\"maven.runtime.classpath\">\n+                                    <arg line=\"-utils 5\" />\n+                                </java>\n+\t\t\t\t\t\t\t</tasks>\n+\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>run</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t</execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <version>2.2</version>\n+                <configuration>\n+                    <excludes>\n+                        <exclude>**/com/ibm/**</exclude>\n+                    </excludes>\n+                </configuration>                \n+            </plugin>\n+        </plugins>\n+    </build>\n+    <repositories>\n+        <!-- \n+            Internal (in SVN) repository which contains jar files that are not\n+            publicly available and cannot be re-distributed.\n+         -->\n+        <repository>\n+            <id>openjpa-internal</id>\n+            <name>Internal repository</name>\n+            <url>file://${basedir}/internal-repository</url>\n+        </repository>\n+    </repositories>\n+</project>"},{"sha":"ee0db6ca06c1bc12aba1d8d5f5e108fde3bae2ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -52,16 +52,32 @@ public BrokerValue() {\n \n     public Object newInstance(String clsName, Class type, Configuration conf,\n         boolean fatal) {\n+        getTemplateBroker(clsName, type, conf, fatal);\n+\n+        try {\n+            return _templateBroker.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new InternalException(e);\n+        }\n+    }\n+\n+    public Class<? extends BrokerImpl> getTemplateBrokerType(Configuration c) {\n+        return getTemplateBroker(getClassName(), BrokerImpl.class, c, true)\n+            .getClass();\n+    }\n+\n+    private BrokerImpl getTemplateBroker(String clsName, Class type,\n+        Configuration conf, boolean fatal) {\n+        if (clsName == null || !clsName.equals(getClassName()))\n+            throw new IllegalArgumentException(\"clsName != configured value '\"\n+                + getClassName() + \"'\");\n+\n         // This is not synchronized. If there are concurrent invocations\n         // while _templateBroker is null, we'll just end up with extra\n         // template brokers, which will get safely garbage collected.\n         if (_templateBroker == null)\n             _templateBroker = (BrokerImpl) super.newInstance(clsName, type,\n                 conf, fatal);\n-        try {\n-            return _templateBroker.clone();\n-        } catch (CloneNotSupportedException e) {\n-            throw new InternalException(e);\n-        }\n+        return _templateBroker;\n     }\n }"},{"sha":"c552ccd6d0a21b694f65acfb82ebeb9e0b39ad62","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/CacheMarshallerImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -28,6 +28,8 @@\n import java.io.OutputStream;\r\n import java.net.URL;\r\n import java.util.Enumeration;\r\n+import java.util.List;\r\n+import java.util.ArrayList;\r\n \r\n import org.apache.openjpa.lib.conf.Configurable;\r\n import org.apache.openjpa.lib.conf.Configuration;\r\n@@ -89,11 +91,11 @@ public Object load() {\n         } catch (Exception e) {\r\n             if (_consumeErrors) {\r\n                 if (_log.isWarnEnabled())\r\n-                    _log.warn(_loc.get(\"cache-marshaller-load-exception\",\r\n+                    _log.warn(_loc.get(\"cache-marshaller-load-exception-ignore\",\r\n                         _inputURL), e);\r\n             } else {\r\n                 throw new InternalException(\r\n-                    _loc.get(\"cache-marshaller-load-exception\",\r\n+                    _loc.get(\"cache-marshaller-load-exception-fatal\",\r\n                         _inputURL),\r\n                     e);\r\n             }\r\n@@ -218,15 +220,28 @@ private void setInputUrlFromResourceLocation() {\n         try {\r\n             ClassLoader cl = _conf.getClassResolverInstance()\r\n                 .getClassLoader(getClass(), null);\r\n+            List list = new ArrayList();\r\n             for (Enumeration e = cl.getResources(_inputResourceLocation);\r\n-                e.hasMoreElements(); ) {\r\n-                if (_inputURL == null)\r\n-                    _inputURL = (URL) e.nextElement();\r\n-                else\r\n+                e.hasMoreElements(); )\r\n+                list.add(e);\r\n+\r\n+            if (list.size() > 1) {\r\n+                if (_consumeErrors) {\r\n+                    if (_log.isWarnEnabled())\r\n+                        _log.warn(_loc.get(\r\n+                            \"cache-marshaller-multiple-resources-warn\",\r\n+                            getId(), _inputResourceLocation, list)\r\n+                            .getMessage());\r\n+                } else {\r\n                     throw new IllegalStateException(\r\n                         _loc.get(\"cache-marshaller-multiple-resources\",\r\n-                            getId(), _inputResourceLocation).getMessage());\r\n+                            getId(), _inputResourceLocation, list)\r\n+                            .getMessage());\r\n+                }\r\n             }\r\n+\r\n+            if (!list.isEmpty())\r\n+                _inputURL = (URL) list.get(0);\r\n         } catch (IOException ioe) {\r\n             IllegalStateException ise = new IllegalStateException(\r\n                 _loc.get(\"cache-marshaller-bad-url\", getId(),\r"},{"sha":"c054895ecb40c7a907af6da793301a412dde9dc3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -53,8 +53,9 @@\n     private boolean _closeOnCommit = true;\n     private boolean _quotedNumbers = false;\n     private boolean _nonOptimisticVersionCheck = false;\n-    private int _jpql = JPQL_STRICT;\n+    private int _jpql = JPQL_WARN;\n     private boolean _storeMapCollectionInEntityAsBlob = false;\n+    private boolean _flushBeforeDetach = true; \n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -237,4 +238,35 @@ public boolean getStoreMapCollectionInEntityAsBlob() {\n     public void setStoreMapCollectionInEntityAsBlob(boolean storeAsBlob) {\n         _storeMapCollectionInEntityAsBlob = storeAsBlob;\n     }\n+    \n+    /**\n+     * Whether OpenJPA should flush changes before detaching or serializing an\n+     * entity. In JPA this is usually false, but other persistence frameworks\n+     * (ie JDO) may expect it to be true.\n+     * <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.\n+     * \n+     * @since 1.0.3\n+     * @since 1.2.0\n+     * @return true if changes should be flushed, otherwise false.\n+     */\n+    public boolean getFlushBeforeDetach() {\n+        return _flushBeforeDetach;\n+    }\n+\n+    /**\n+     * Whether OpenJPA should flush changes before detaching or serializing an\n+     * entity. In JPA this is usually false, but other persistence frameworks\n+     * (ie JDO) may expect it to be true.\n+     * <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.\n+     * \n+     * @param beforeDetach if true changes will be flushed before detaching or \n+     * serializing an entity.\n+     * \n+     * @since 1.0.3\n+     * @since 1.2.0\n+     */\n+    public void setFlushBeforeDetach(boolean beforeDetach) {\n+        _flushBeforeDetach = beforeDetach;\n+    }\n+\n }"},{"sha":"6762bd9614112d55a14eecc0dfca8bd8126dd486","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -28,6 +28,8 @@\n import org.apache.openjpa.kernel.Query;\r\n import org.apache.openjpa.lib.util.Options;\r\n import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.MetaDataRepository;\r\n import org.apache.openjpa.meta.QueryMetaData;\r\n@@ -52,13 +54,16 @@ public static void main(String[] args) {\n         boolean devpath = opts.getBooleanProperty(\"scanDevPath\", \"ScanDevPath\",\r\n             true);\r\n \r\n-        BrokerFactory factory = Bootstrap.newBrokerFactory();\r\n+        ConfigurationProvider cp = new MapConfigurationProvider(opts);\r\n+        BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\r\n         try {\r\n             MetaDataCacheMaintenance maint = new MetaDataCacheMaintenance(\r\n                 factory, devpath);\r\n \r\n-            if (args.length != 1)\r\n+            if (args.length != 1) {\r\n                 usage();\r\n+                return;\r\n+            }\r\n \r\n             if (\"store\".equals(args[0]))\r\n                 maint.store();\r\n@@ -97,8 +102,8 @@ public void setLog(Log log) {\n     }\r\n \r\n     private static int usage() {\r\n-        System.err.println(\"Usage: java MetaDataCacheMaintenance \"\r\n-            + \"[-scanDevPath t|f] store | dump\");\r\n+        System.err.println(\"Usage: java MetaDataCacheMaintenance \" +\r\n+            \"[-scanDevPath t|f] [-<openjpa.PropertyName> value] store | dump\");\r\n         return -1;\r\n     }\r\n \r"},{"sha":"a21de1125daa504788dacc3669cff889c1f225e4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.event.RemoteCommitProvider;\n import org.apache.openjpa.kernel.AutoClear;\n import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.kernel.BrokerImpl;\n import org.apache.openjpa.kernel.ConnectionRetainModes;\n@@ -330,7 +331,37 @@\n      * @since 0.2.5\n      */\n     public void setDataCacheTimeout(Integer timeout);\n-\n+    \n+    /**\n+     * Gets whether entity state is to be refreshed from {@link DataCache}.\n+     * The entities are never refreshed from DataCache if lock is being applied \n+     * (e.g. in a pessimistic transaction) and hence this setting only refers \n+     * to behavior when not locking.\n+     * \n+     * @since 1.2.0\n+     */\n+    public boolean getRefreshFromDataCache();\n+    \n+    /**\n+     * Sets whether entity state is to be refreshed from {@link DataCache}.\n+     * The entities are never refreshed from DataCache if lock is being applied \n+     * (e.g. in a pessimistic transaction) and hence this setting only refers \n+     * to behavior when not locking.\n+     * \n+     * @since 1.2.0\n+     */\n+    public void setRefreshFromDataCache(boolean refreshFromDataCache);\n+    \n+    /**\n+     * Sets whether entity state is to be refreshed from {@link DataCache}.\n+     * The entities are never refreshed from DataCache if lock is being applied \n+     * (e.g. in a pessimistic transaction) and hence this setting only refers \n+     * to behavior when not locking.\n+     * \n+     * @since 1.2.0\n+     */\n+    public void setRefreshFromDataCache(Boolean refreshFromDataCache);\n+    \n     /**\n      * The plugin to use for level-2 data store query caching.\n      *"},{"sha":"917d6c48e6391cdc3f93eb466a05a753f6624302","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":33,"deletions":10,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -76,7 +76,7 @@\n \n     // openjpa properties\n     public ObjectValue classResolverPlugin;\n-    public ObjectValue brokerPlugin;\n+    public BrokerValue brokerPlugin;\n     public ObjectValue dataCachePlugin;\n     public ObjectValue dataCacheManagerPlugin;\n     public IntValue dataCacheTimeout;\n@@ -122,6 +122,7 @@\n     public BooleanValue ignoreChanges;\n     public BooleanValue nontransactionalRead;\n     public BooleanValue nontransactionalWrite;\n+    public BooleanValue refreshFromDataCache;\n     public BooleanValue multithreaded;\n     public StringValue mapping;\n     public PluginValue metaFactoryPlugin;\n@@ -222,7 +223,12 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         queryCachePlugin.setAliases(aliases);\n         queryCachePlugin.setDefault(aliases[0]);\n         queryCachePlugin.setString(aliases[0]);\n-\n+        \n+        refreshFromDataCache = addBoolean(\"RefreshFromDataCache\");\n+        refreshFromDataCache.setDefault(\"false\");\n+        refreshFromDataCache.set(false);\n+        refreshFromDataCache.setDynamic(true);\n+        \n         dynamicDataStructs = addBoolean(\"DynamicDataStructs\");\n         dynamicDataStructs.setDefault(\"false\");\n         dynamicDataStructs.set(false);\n@@ -644,6 +650,20 @@ public void setQueryCache(String queryCache) {\n     public String getQueryCache() {\n         return queryCachePlugin.getString();\n     }\n+    \n+    public boolean getRefreshFromDataCache() {\n+    \treturn refreshFromDataCache.get();\n+    }\n+    \n+    public void setRefreshFromDataCache(boolean flag) {\n+    \trefreshFromDataCache.set(flag);\n+    }\n+    \n+    public void setRefreshFromDataCache(Boolean flag) {\n+    \tif (flag != null) {\n+    \t\trefreshFromDataCache.set(flag.booleanValue());\n+    \t}\n+    }\n \n     public boolean getDynamicDataStructs() {\n         return dynamicDataStructs.get();\n@@ -924,19 +944,21 @@ public void setConnectionFactory(Object factory) {\n     public Object getConnectionFactory() {\n         if (connectionFactory.get() == null)\n             connectionFactory.set(\n-                lookupConnectionFactory(getConnectionFactoryName()), true);\n+                lookupConnectionFactory(getConnectionFactoryName(),\n+                \t\tconnectionFactory.getProperty()), true);\n         return connectionFactory.get();\n     }\n \n     /**\n      * Lookup the connection factory at the given name.\n      */\n-    private Object lookupConnectionFactory(String name) {\n+    private Object lookupConnectionFactory(String name, String userKey) {\n         name = StringUtils.trimToNull(name);\n         if (name == null)\n             return null;\n         try {\n-        \treturn Configurations.lookup(name);\n+        \treturn Configurations.lookup(name, userKey,\n+        \t\t\tgetLog(OpenJPAConfiguration.LOG_RUNTIME));\n         } catch (Exception ex) {\n         \treturn null;\n         }\n@@ -1007,7 +1029,8 @@ public void setConnectionFactory2(Object factory) {\n     public Object getConnectionFactory2() {\n         if (connectionFactory2.get() == null)\n             connectionFactory2.set(\n-                lookupConnectionFactory(getConnectionFactory2Name()), false);\n+                lookupConnectionFactory(getConnectionFactory2Name(), \n+                \t\tconnectionFactory2.getProperty()), false);\n         return connectionFactory2.get();\n     }\n \n@@ -1389,6 +1412,10 @@ public void setRuntimeUnenhancedClasses(int mode) {\n         runtimeUnenhancedClasses.set(mode);\n     }\n \n+    public void setRuntimeUnenhancedClasses(String mode) {\n+        runtimeUnenhancedClasses.setString(mode);\n+    }\n+\n     public String getCacheMarshallers() {\n         return cacheMarshallerPlugins.getString();\n     }\n@@ -1401,10 +1428,6 @@ public Map getCacheMarshallerInstances() {\n         return cacheMarshallerPlugins.getInstancesAsMap();\n     }\n \n-    public void setRuntimeUnenhancedClasses(String mode) {\n-        runtimeUnenhancedClasses.setString(mode);\n-    }\n-\n     public void instantiateAll() {\n         super.instantiateAll();\n         getMetaDataRepositoryInstance();"},{"sha":"999129ec113b6141c6b2690d9b2c0d5098d84d9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -270,17 +270,21 @@ private void transformToVersionSafePCDatas(DataCache cache,\n             idList.add(holder.sm.getObjectId());\n         }\n \n+        List<PCDataHolder> removes = new ArrayList<PCDataHolder>();\n         Map<Object,DataCachePCData> pcdatas = cache.getAll(idList);\n         for (Entry<Object,DataCachePCData> entry : pcdatas.entrySet()) {\n             Integer index = ids.get(entry.getKey());\n             DataCachePCData oldpc = entry.getValue();\n             PCDataHolder holder = (PCDataHolder) holders.get(index);\n             if (oldpc != null && compareVersion(holder.sm,\n                 holder.sm.getVersion(), oldpc.getVersion()) == VERSION_EARLIER)\n-                holders.remove(index);\n+                removes.add(holder);\n             else\n                 holders.set(index, holder.pcdata);\n         }\n+\n+        for (PCDataHolder holder : removes)\n+            holders.remove(holder);\n     }\n \n     /**\n@@ -419,8 +423,12 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n \n     public Collection loadAll(Collection sms, PCState state, int load,\n     \t\tFetchConfiguration fetch, Object edata) {\n-        if (isLocking(fetch))\n-            return super.loadAll(sms, state, load, fetch, edata);\n+    \tif (isLocking(fetch) || \n+    \t   (!isLocking(fetch) &&\n+    \t\t(load == StoreManager.FORCE_LOAD_REFRESH)\n+    \t\t&& !_ctx.getConfiguration().getRefreshFromDataCache())) {\n+    \t       return super.loadAll(sms, state, load, fetch, edata);\n+    \t}\n \n         Map unloaded = null;\n         List smList = null;"},{"sha":"4b5722ee5a6712d6b75d0c08314b627165b8eb0d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":670,"deletions":660,"changes":1330,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -1,660 +1,670 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.datacache;\n-\n-import java.io.ObjectStreamException;\n-import java.io.Serializable;\n-import java.util.AbstractList;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.TreeMap;\n-\n-import org.apache.commons.collections.map.LinkedMap;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.LockLevels;\n-import org.apache.openjpa.kernel.QueryContext;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.kernel.StoreQuery;\n-import org.apache.openjpa.kernel.exps.AggregateListener;\n-import org.apache.openjpa.kernel.exps.FilterListener;\n-import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.meta.MetaDataRepository;\n-import org.apache.openjpa.util.ObjectNotFoundException;\n-import serp.util.Numbers;\n-\n-/**\n- * A {@link StoreQuery} implementation that caches the OIDs involved in\n- * the query, and can determine whether or not the query has been dirtied.\n- *\n- * @author Patrick Linskey\n- * @since 0.2.5.0\n- */\n-public class QueryCacheStoreQuery\n-    implements StoreQuery {\n-\n-    private final StoreQuery _query;\n-    private final QueryCache _cache;\n-    private StoreContext _sctx;\n-    private MetaDataRepository _repos;\n-\n-    /**\n-     * Create a new instance that delegates to <code>query</code> if no\n-     * cached results are available.\n-     */\n-    public QueryCacheStoreQuery(StoreQuery query, QueryCache cache) {\n-        _query = query;\n-        _cache = cache;\n-    }\n-\n-    /**\n-     * Return the {@link QueryCache} that this object is associated with.\n-     */\n-    public QueryCache getCache() {\n-        return _cache;\n-    }\n-\n-    /**\n-     * Delegate.\n-     */\n-    public StoreQuery getDelegate() {\n-        return _query;\n-    }\n-\n-    /**\n-     * Look in the query cache for a result for the given query\n-     * key. Only look if this query is being executed outside a\n-     * transaction or in a transaction with IgnoreChanges set to true\n-     * or in a transaction with IgnoreChanges set to false but in which\n-     * none of the classes involved in this query have been touched.\n-     *  Caching is not used when using object locking.\n-     * This is because we must obtain locks on the\n-     * data, and it is likely that making n trips to the database to\n-     * make the locks will be slower than running the query against\n-     * the database.\n-     *  If the fetch configuration has query caching disabled,\n-     * then this method returns <code>null</code>.\n-     *  Return the list if we meet the above criteria and if a list\n-     * is found for <code>qk</code>. Else, return\n-     * <code>null</code>.\n-     *  This implementation means that queries against the cache\n-     * are of READ_COMMITTED isolation level. It'd be nice to support\n-     * READ_SERIALIZABLE -- to do so, we'd just return false when in\n-     * a transaction.\n-     */\n-    private List checkCache(QueryKey qk) {\n-        if (qk == null)\n-            return null;\n-        FetchConfiguration fetch = getContext().getFetchConfiguration();\n-        if (!fetch.getQueryCacheEnabled())\n-            return null;\n-        if (fetch.getReadLockLevel() > LockLevels.LOCK_NONE)\n-            return null;\n-\n-        // get the cached data\n-        QueryResult res = _cache.get(qk);\n-        if (res == null)\n-            return null;\n-        if (res.isEmpty())\n-            return Collections.EMPTY_LIST;\n-\n-        int projs = getContext().getProjectionAliases().length;\n-        if (projs == 0) {\n-            // make sure the data cache contains the oids for the query result;\n-            // if it doesn't, then using the result could be slower than not\n-            // using it because of the individual by-oid lookups\n-            ClassMetaData meta = _repos.getMetaData(getContext().\n-                getCandidateType(), _sctx.getClassLoader(), true);\n-            if (meta.getDataCache() == null)\n-                return null;\n-\n-            BitSet idxs = meta.getDataCache().containsAll(res);\n-\n-            // eventually we should optimize this to figure out how many objects\n-            // the cache is missing and if only a few do a bulk fetch for them\n-            int len = idxs.length();\n-            if (len < res.size())\n-                return null;\n-            for (int i = 0; i < len; i++)\n-                if (!idxs.get(i))\n-                    return null;\n-        }\n-        return new CachedList(res, projs != 0, _sctx);\n-    }\n-\n-    /**\n-     * Wrap the result object provider returned by our delegate in a\n-     * caching provider.\n-     */\n-    private ResultObjectProvider wrapResult(ResultObjectProvider rop,\n-        QueryKey key) {\n-        if (key == null)\n-            return rop;\n-        return new CachingResultObjectProvider(rop, getContext().\n-            getProjectionAliases().length > 0, key);\n-    }\n-\n-    /**\n-     * Copy a projection element for caching / returning.\n-     */\n-    private static Object copyProjection(Object obj, StoreContext ctx) {\n-        if (obj == null)\n-            return null;\n-        switch (JavaTypes.getTypeCode(obj.getClass())) {\n-            case JavaTypes.STRING:\n-            case JavaTypes.BOOLEAN_OBJ:\n-            case JavaTypes.BYTE_OBJ:\n-            case JavaTypes.CHAR_OBJ:\n-            case JavaTypes.DOUBLE_OBJ:\n-            case JavaTypes.FLOAT_OBJ:\n-            case JavaTypes.INT_OBJ:\n-            case JavaTypes.LONG_OBJ:\n-            case JavaTypes.SHORT_OBJ:\n-            case JavaTypes.BIGDECIMAL:\n-            case JavaTypes.BIGINTEGER:\n-            case JavaTypes.OID:\n-                return obj;\n-            case JavaTypes.DATE:\n-                return ((Date) obj).clone();\n-            case JavaTypes.LOCALE:\n-                return ((Locale) obj).clone();\n-            default:\n-                if (obj instanceof CachedObjectId)\n-                    return fromObjectId(((CachedObjectId) obj).oid, ctx);\n-                Object oid = ctx.getObjectId(obj);\n-                if (oid != null)\n-                    return new CachedObjectId(oid);\n-                return obj;\n-        }\n-    }\n-\n-    /**\n-     * Return the result object based on its cached oid.\n-     */\n-    private static Object fromObjectId(Object oid, StoreContext sctx) {\n-        if (oid == null)\n-            return null;\n-\n-        Object obj = sctx.find(oid, null, null, null, 0);\n-        if (obj == null)\n-            throw new ObjectNotFoundException(oid);\n-        return obj;\n-    }\n-\n-    public Object writeReplace()\n-        throws ObjectStreamException {\n-        return _query;\n-    }\n-\n-    public QueryContext getContext() {\n-        return _query.getContext();\n-    }\n-\n-    public void setContext(QueryContext qctx) {\n-        _query.setContext(qctx);\n-        _sctx = qctx.getStoreContext();\n-        _repos = _sctx.getConfiguration().getMetaDataRepositoryInstance();\n-    }\n-\n-    public boolean setQuery(Object query) {\n-        return _query.setQuery(query);\n-    }\n-\n-    public FilterListener getFilterListener(String tag) {\n-        return _query.getFilterListener(tag);\n-    }\n-\n-    public AggregateListener getAggregateListener(String tag) {\n-        return _query.getAggregateListener(tag);\n-    }\n-\n-    public Object newCompilationKey() {\n-        return _query.newCompilationKey();\n-    }\n-\n-    public Object newCompilation() {\n-        return _query.newCompilation();\n-    }\n-\n-    public void populateFromCompilation(Object comp) {\n-        _query.populateFromCompilation(comp);\n-    }\n-\n-    public void invalidateCompilation() {\n-        _query.invalidateCompilation();\n-    }\n-\n-    public boolean supportsDataStoreExecution() {\n-        return _query.supportsDataStoreExecution();\n-    }\n-\n-    public boolean supportsInMemoryExecution() {\n-        return _query.supportsInMemoryExecution();\n-    }\n-\n-    public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs) {\n-        return _query.newInMemoryExecutor(meta, subs);\n-    }\n-\n-    public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\n-        Executor ex = _query.newDataStoreExecutor(meta, subs);\n-        return new QueryCacheExecutor(ex, meta, subs);\n-    }\n-\n-    public boolean supportsAbstractExecutors() {\n-        return _query.supportsAbstractExecutors();\n-    }\n-\n-    public boolean requiresCandidateType() {\n-        return _query.requiresCandidateType();\n-    }\n-\n-    public boolean requiresParameterDeclarations() {\n-        return _query.requiresParameterDeclarations();\n-    }\n-\n-    public boolean supportsParameterDeclarations() {\n-        return _query.supportsParameterDeclarations();\n-    }\n-\n-    /**\n-     * Caching executor.\n-     */\n-    private static class QueryCacheExecutor\n-        implements Executor {\n-\n-        private final Executor _ex;\n-        private final Class _candidate;\n-        private final boolean _subs;\n-\n-        public QueryCacheExecutor(Executor ex, ClassMetaData meta,\n-            boolean subs) {\n-            _ex = ex;\n-            _candidate = (meta == null) ? null : meta.getDescribedType();\n-            _subs = subs;\n-        }\n-\n-        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n-            Range range) {\n-            QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\n-            QueryKey key = QueryKey.newInstance(cq.getContext(),\n-                _ex.isPacking(q), params, _candidate, _subs, range.start, \n-                range.end);\n-            List cached = cq.checkCache(key);\n-            if (cached != null)\n-                return new ListResultObjectProvider(cached);\n-\n-            ResultObjectProvider rop = _ex.executeQuery(cq.getDelegate(),\n-                params, range);\n-            return cq.wrapResult(rop, key);\n-        }\n-\n-        /**\n-         * Clear the cached queries associated with the access path\n-         * classes in the query. This is done when bulk operations\n-         * (such as deletes or updates) are performed so that the\n-         * cache remains up-to-date.\n-         */\n-        private void clearAccessPath(StoreQuery q) {\n-            if (q == null)\n-                return;\n-\n-            ClassMetaData[] cmd = getAccessPathMetaDatas(q);\n-            if (cmd == null || cmd.length == 0)\n-                return;\n-\n-            List classes = new ArrayList(cmd.length);\n-            for (int i = 0; i < cmd.length; i++)\n-                classes.add(cmd[i].getDescribedType());\n-\n-            // evict from the query cache\n-            QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\n-            cq.getCache().onTypesChanged(new TypesChangedEvent\n-                (q.getContext(), classes));\n-\n-            // evict from the data cache\n-            for (int i = 0; i < cmd.length; i++) {\n-                if (cmd[i].getDataCache() != null)\n-                    cmd[i].getDataCache().removeAll(\n-                        cmd[i].getDescribedType(), true);\n-            }\n-        }\n-\n-        public Number executeDelete(StoreQuery q, Object[] params) {\n-            try {\n-                return _ex.executeDelete(unwrap(q), params);\n-            } finally {\n-                clearAccessPath(q);\n-            }\n-        }\n-\n-        public Number executeUpdate(StoreQuery q, Object[] params) {\n-            try {\n-                return _ex.executeUpdate(unwrap(q), params);\n-            } finally {\n-                clearAccessPath(q);\n-            }\n-        }\n-\n-        public String[] getDataStoreActions(StoreQuery q, Object[] params,\n-            Range range) {\n-            return EMPTY_STRINGS;\n-        }\n-\n-        public void validate(StoreQuery q) {\n-            _ex.validate(unwrap(q));\n-        }\n-        \n-        public void getRange(StoreQuery q, Object[] params, Range range) {\n-            _ex.getRange(q, params, range); \n-        }\n-\n-        public Object getOrderingValue(StoreQuery q, Object[] params,\n-            Object resultObject, int orderIndex) {\n-            return _ex.getOrderingValue(unwrap(q), params, resultObject,\n-                orderIndex);\n-        }\n-\n-        public boolean[] getAscending(StoreQuery q) {\n-            return _ex.getAscending(unwrap(q));\n-        }\n-\n-        public boolean isPacking(StoreQuery q) {\n-            return _ex.isPacking(unwrap(q));\n-        }\n-\n-        public String getAlias(StoreQuery q) {\n-            return _ex.getAlias(unwrap(q));\n-        }\n-\n-        public Class getResultClass(StoreQuery q) {\n-            return _ex.getResultClass(unwrap(q));\n-        }\n-\n-        public String[] getProjectionAliases(StoreQuery q) {\n-            return _ex.getProjectionAliases(unwrap(q));\n-        }\n-\n-        public Class[] getProjectionTypes(StoreQuery q) {\n-            return _ex.getProjectionTypes(unwrap(q));\n-        }\n-\n-        public ClassMetaData[] getAccessPathMetaDatas(StoreQuery q) {\n-            return _ex.getAccessPathMetaDatas(unwrap(q));\n-        }\n-\n-        public int getOperation(StoreQuery q) {\n-            return _ex.getOperation(unwrap(q));\n-        }\n-\n-        public boolean isAggregate(StoreQuery q) {\n-            return _ex.isAggregate(unwrap(q));\n-        }\n-\n-        public boolean hasGrouping(StoreQuery q) {\n-            return _ex.hasGrouping(unwrap(q));\n-        }\n-\n-        public LinkedMap getParameterTypes(StoreQuery q) {\n-            return _ex.getParameterTypes(unwrap(q));\n-        }\n-\n-        public Map getUpdates(StoreQuery q) {\n-            return _ex.getUpdates(unwrap(q));\n-        }\n-\n-        private static StoreQuery unwrap(StoreQuery q) {\n-            return ((QueryCacheStoreQuery) q).getDelegate();\n-        }\n-    }\n-\n-    /**\n-     * Result list implementation for a cached query result. Package-protected\n-     * for testing.\n-     */\n-    public static class CachedList\n-        extends AbstractList\n-        implements Serializable {\n-\n-        private final QueryResult _res;\n-        private final boolean _proj;\n-        private final StoreContext _sctx;\n-\n-        public CachedList(QueryResult res, boolean proj, StoreContext ctx) {\n-            _res = res;\n-            _proj = proj;\n-            _sctx = ctx;\n-        }\n-\n-        public Object get(int idx) {\n-            if (!_proj)\n-                return fromObjectId(_res.get(idx), _sctx);\n-\n-            Object[] cached = (Object[]) _res.get(idx);\n-            if (cached == null)\n-                return null;\n-            Object[] uncached = new Object[cached.length];\n-            for (int i = 0; i < cached.length; i++)\n-                uncached[i] = copyProjection(cached[i], _sctx);\n-            return uncached;\n-        }\n-\n-        public int size() {\n-            return _res.size();\n-        }\n-\n-        public Object writeReplace()\n-            throws ObjectStreamException {\n-            return new ArrayList(this);\n-        }\n-    }\n-\n-    /**\n-     * A wrapper around a {@link ResultObjectProvider} that builds up a list of\n-     * all the OIDs in this list and registers that list with the\n-     * query cache. Abandons monitoring and registering if one of the classes\n-     * in the access path is modified while the query results are being loaded.\n-     */\n-    private class CachingResultObjectProvider\n-        implements ResultObjectProvider, TypesChangedListener {\n-\n-        private final ResultObjectProvider _rop;\n-        private final boolean _proj;\n-        private final QueryKey _qk;\n-        private final TreeMap _data = new TreeMap();\n-        private boolean _maintainCache = true;\n-        private int _pos = -1;\n-\n-        // used to determine list size without necessarily calling size(),\n-        // which may require a DB trip or return Integer.MAX_VALUE\n-        private int _max = -1;\n-        private int _size = Integer.MAX_VALUE;\n-\n-        /**\n-         * Constructor. Supply delegate result provider and our query key.\n-         */\n-        public CachingResultObjectProvider(ResultObjectProvider rop,\n-            boolean proj, QueryKey key) {\n-            _rop = rop;\n-            _proj = proj;\n-            _qk = key;\n-            _cache.addTypesChangedListener(this);\n-        }\n-\n-        /**\n-         * Stop caching.\n-         */\n-        private void abortCaching() {\n-            if (!_maintainCache)\n-                return;\n-\n-            // this can be called via an event from another thread\n-            synchronized (this) {\n-                // it's important that we set this flag first so that any\n-                // subsequent calls to this object are bypassed.\n-                _maintainCache = false;\n-                _cache.removeTypesChangedListener(this);\n-                _data.clear();\n-            }\n-        }\n-\n-        /**\n-         * Check whether we've buffered all results, while optionally adding\n-         * the given result.\n-         */\n-        private void checkFinished(Object obj, boolean result) {\n-            // this can be called at the same time as abortCaching via\n-            // a types changed event\n-            boolean finished = false;\n-            synchronized (this) {\n-                if (_maintainCache) {\n-                    if (result) {\n-                        Integer index = Numbers.valueOf(_pos);\n-                        if (!_data.containsKey(index)) {\n-                            Object cached;\n-                            if (obj == null)\n-                                cached = null;\n-                            else if (!_proj)\n-                                cached = _sctx.getObjectId(obj);\n-                            else {\n-                                Object[] arr = (Object[]) obj;\n-                                Object[] cp = new Object[arr.length];\n-                                for (int i = 0; i < arr.length; i++)\n-                                    cp[i] = copyProjection(arr[i], _sctx);\n-                                cached = cp;\n-                            }\n-                            if (cached != null)\n-                                _data.put(index, cached);\n-                        }\n-                    }\n-                    finished = _size == _data.size();\n-                }\n-            }\n-\n-            if (finished) {\n-                // an abortCaching call can sneak in here via onExpire; the\n-                // cache is locked during event firings, so the lock here will\n-                // wait for it (or will force the next firing to wait)\n-                _cache.writeLock();\n-                try {\n-                    // make sure we didn't abort\n-                    if (_maintainCache) {\n-                        QueryResult res = new QueryResult(_qk, _data.values());\n-                        _cache.put(_qk, res);\n-                        abortCaching();\n-                    }\n-                }\n-                finally {\n-                    _cache.writeUnlock();\n-                }\n-            }\n-        }\n-\n-        public boolean supportsRandomAccess() {\n-            return _rop.supportsRandomAccess();\n-        }\n-\n-        public void open()\n-            throws Exception {\n-            _rop.open();\n-        }\n-\n-        public Object getResultObject()\n-            throws Exception {\n-            Object obj = _rop.getResultObject();\n-            checkFinished(obj, true);\n-            return obj;\n-        }\n-\n-        public boolean next()\n-            throws Exception {\n-            _pos++;\n-            boolean next = _rop.next();\n-            if (!next && _pos == _max + 1) {\n-                _size = _pos;\n-                checkFinished(null, false);\n-            } else if (next && _pos > _max)\n-                _max = _pos;\n-            return next;\n-        }\n-\n-        public boolean absolute(int pos)\n-            throws Exception {\n-            _pos = pos;\n-            boolean valid = _rop.absolute(pos);\n-            if (!valid && _pos == _max + 1) {\n-                _size = _pos;\n-                checkFinished(null, false);\n-            } else if (valid && _pos > _max)\n-                _max = _pos;\n-            return valid;\n-        }\n-\n-        public int size()\n-            throws Exception {\n-            if (_size != Integer.MAX_VALUE)\n-                return _size;\n-            int size = _rop.size();\n-            _size = size;\n-            checkFinished(null, false);\n-            return size;\n-        }\n-\n-        public void reset()\n-            throws Exception {\n-            _rop.reset();\n-            _pos = -1;\n-        }\n-\n-        public void close()\n-            throws Exception {\n-            abortCaching();\n-            _rop.close();\n-        }\n-\n-        public void handleCheckedException(Exception e) {\n-            _rop.handleCheckedException(e);\n-        }\n-\n-        public void onTypesChanged(TypesChangedEvent ev) {\n-            if (_qk.changeInvalidatesQuery(ev.getTypes()))\n-                abortCaching();\n-        }\n-    }\n-\n-    /**\n-     * Struct to recognize cached oids.\n-     */\n-    private static class CachedObjectId {\n-\n-        public final Object oid;\n-\n-        public CachedObjectId (Object oid)\n-\t\t{\n-\t\t\tthis.oid = oid;\n-\t\t}\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.datacache;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.io.Serializable;\r\n+import java.util.AbstractList;\r\n+import java.util.ArrayList;\r\n+import java.util.BitSet;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+import java.util.TreeMap;\r\n+\r\n+import org.apache.commons.collections.map.LinkedMap;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.LockLevels;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.QueryContext;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.kernel.StoreQuery;\r\n+import org.apache.openjpa.kernel.exps.AggregateListener;\r\n+import org.apache.openjpa.kernel.exps.FilterListener;\r\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.util.ObjectNotFoundException;\r\n+\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * A {@link StoreQuery} implementation that caches the OIDs involved in\r\n+ * the query, and can determine whether or not the query has been dirtied.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @since 0.2.5.0\r\n+ */\r\n+public class QueryCacheStoreQuery\r\n+    implements StoreQuery {\r\n+\r\n+    private final StoreQuery _query;\r\n+    private final QueryCache _cache;\r\n+    private StoreContext _sctx;\r\n+    private MetaDataRepository _repos;\r\n+\r\n+    /**\r\n+     * Create a new instance that delegates to <code>query</code> if no\r\n+     * cached results are available.\r\n+     */\r\n+    public QueryCacheStoreQuery(StoreQuery query, QueryCache cache) {\r\n+        _query = query;\r\n+        _cache = cache;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the {@link QueryCache} that this object is associated with.\r\n+     */\r\n+    public QueryCache getCache() {\r\n+        return _cache;\r\n+    }\r\n+\r\n+    /**\r\n+     * Delegate.\r\n+     */\r\n+    public StoreQuery getDelegate() {\r\n+        return _query;\r\n+    }\r\n+\r\n+    /**\r\n+     * Look in the query cache for a result for the given query\r\n+     * key. Only look if this query is being executed outside a\r\n+     * transaction or in a transaction with IgnoreChanges set to true\r\n+     * or in a transaction with IgnoreChanges set to false but in which\r\n+     * none of the classes involved in this query have been touched.\r\n+     *  Caching is not used when using object locking.\r\n+     * This is because we must obtain locks on the\r\n+     * data, and it is likely that making n trips to the database to\r\n+     * make the locks will be slower than running the query against\r\n+     * the database.\r\n+     *  If the fetch configuration has query caching disabled,\r\n+     * then this method returns <code>null</code>.\r\n+     *  Return the list if we meet the above criteria and if a list\r\n+     * is found for <code>qk</code>. Else, return\r\n+     * <code>null</code>.\r\n+     *  This implementation means that queries against the cache\r\n+     * are of READ_COMMITTED isolation level. It'd be nice to support\r\n+     * READ_SERIALIZABLE -- to do so, we'd just return false when in\r\n+     * a transaction.\r\n+     */\r\n+    private List checkCache(QueryKey qk) {\r\n+        if (qk == null)\r\n+            return null;\r\n+        FetchConfiguration fetch = getContext().getFetchConfiguration();\r\n+        if (!fetch.getQueryCacheEnabled())\r\n+            return null;\r\n+        if (fetch.getReadLockLevel() > LockLevels.LOCK_NONE)\r\n+            return null;\r\n+\r\n+        // get the cached data\r\n+        QueryResult res = _cache.get(qk);\r\n+        if (res == null)\r\n+            return null;\r\n+        if (res.isEmpty())\r\n+            return Collections.EMPTY_LIST;\r\n+\r\n+        int projs = getContext().getProjectionAliases().length;\r\n+        if (projs == 0) {\r\n+            // make sure the data cache contains the oids for the query result;\r\n+            // if it doesn't, then using the result could be slower than not\r\n+            // using it because of the individual by-oid lookups\r\n+            ClassMetaData meta = _repos.getMetaData(getContext().\r\n+                getCandidateType(), _sctx.getClassLoader(), true);\r\n+            if (meta.getDataCache() == null)\r\n+                return null;\r\n+\r\n+            BitSet idxs = meta.getDataCache().containsAll(res);\r\n+\r\n+            // eventually we should optimize this to figure out how many objects\r\n+            // the cache is missing and if only a few do a bulk fetch for them\r\n+            int len = idxs.length();\r\n+            if (len < res.size())\r\n+                return null;\r\n+            for (int i = 0; i < len; i++)\r\n+                if (!idxs.get(i))\r\n+                    return null;\r\n+        }\r\n+        return new CachedList(res, projs != 0, _sctx);\r\n+    }\r\n+\r\n+    /**\r\n+     * Wrap the result object provider returned by our delegate in a\r\n+     * caching provider.\r\n+     */\r\n+    private ResultObjectProvider wrapResult(ResultObjectProvider rop,\r\n+        QueryKey key) {\r\n+        if (key == null)\r\n+            return rop;\r\n+        return new CachingResultObjectProvider(rop, getContext().\r\n+            getProjectionAliases().length > 0, key);\r\n+    }\r\n+\r\n+    /**\r\n+     * Copy a projection element for caching / returning.\r\n+     */\r\n+    private static Object copyProjection(Object obj, StoreContext ctx) {\r\n+        if (obj == null)\r\n+            return null;\r\n+        switch (JavaTypes.getTypeCode(obj.getClass())) {\r\n+            case JavaTypes.STRING:\r\n+            case JavaTypes.BOOLEAN_OBJ:\r\n+            case JavaTypes.BYTE_OBJ:\r\n+            case JavaTypes.CHAR_OBJ:\r\n+            case JavaTypes.DOUBLE_OBJ:\r\n+            case JavaTypes.FLOAT_OBJ:\r\n+            case JavaTypes.INT_OBJ:\r\n+            case JavaTypes.LONG_OBJ:\r\n+            case JavaTypes.SHORT_OBJ:\r\n+            case JavaTypes.BIGDECIMAL:\r\n+            case JavaTypes.BIGINTEGER:\r\n+            case JavaTypes.OID:\r\n+                return obj;\r\n+            case JavaTypes.DATE:\r\n+                return ((Date) obj).clone();\r\n+            case JavaTypes.LOCALE:\r\n+                return ((Locale) obj).clone();\r\n+            default:\r\n+                if (obj instanceof CachedObjectId)\r\n+                    return fromObjectId(((CachedObjectId) obj).oid, ctx);\r\n+                Object oid = ctx.getObjectId(obj);\r\n+                if (oid != null)\r\n+                    return new CachedObjectId(oid);\r\n+                return obj;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the result object based on its cached oid.\r\n+     */\r\n+    private static Object fromObjectId(Object oid, StoreContext sctx) {\r\n+        if (oid == null)\r\n+            return null;\r\n+\r\n+        Object obj = sctx.find(oid, null, null, null, 0);\r\n+        if (obj == null)\r\n+            throw new ObjectNotFoundException(oid);\r\n+        return obj;\r\n+    }\r\n+\r\n+    public Object writeReplace()\r\n+        throws ObjectStreamException {\r\n+        return _query;\r\n+    }\r\n+\r\n+    public QueryContext getContext() {\r\n+        return _query.getContext();\r\n+    }\r\n+\r\n+    public void setContext(QueryContext qctx) {\r\n+        _query.setContext(qctx);\r\n+        _sctx = qctx.getStoreContext();\r\n+        _repos = _sctx.getConfiguration().getMetaDataRepositoryInstance();\r\n+    }\r\n+\r\n+    public boolean setQuery(Object query) {\r\n+        return _query.setQuery(query);\r\n+    }\r\n+\r\n+    public FilterListener getFilterListener(String tag) {\r\n+        return _query.getFilterListener(tag);\r\n+    }\r\n+\r\n+    public AggregateListener getAggregateListener(String tag) {\r\n+        return _query.getAggregateListener(tag);\r\n+    }\r\n+\r\n+    public Object newCompilationKey() {\r\n+        return _query.newCompilationKey();\r\n+    }\r\n+\r\n+    public Object newCompilation() {\r\n+        return _query.newCompilation();\r\n+    }\r\n+\r\n+    public void populateFromCompilation(Object comp) {\r\n+        _query.populateFromCompilation(comp);\r\n+    }\r\n+\r\n+    public void invalidateCompilation() {\r\n+        _query.invalidateCompilation();\r\n+    }\r\n+\r\n+    public boolean supportsDataStoreExecution() {\r\n+        return _query.supportsDataStoreExecution();\r\n+    }\r\n+\r\n+    public boolean supportsInMemoryExecution() {\r\n+        return _query.supportsInMemoryExecution();\r\n+    }\r\n+\r\n+    public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs) {\r\n+        return _query.newInMemoryExecutor(meta, subs);\r\n+    }\r\n+\r\n+    public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\r\n+        Executor ex = _query.newDataStoreExecutor(meta, subs);\r\n+        return new QueryCacheExecutor(ex, meta, subs);\r\n+    }\r\n+\r\n+    public boolean supportsAbstractExecutors() {\r\n+        return _query.supportsAbstractExecutors();\r\n+    }\r\n+\r\n+    public boolean requiresCandidateType() {\r\n+        return _query.requiresCandidateType();\r\n+    }\r\n+\r\n+    public boolean requiresParameterDeclarations() {\r\n+        return _query.requiresParameterDeclarations();\r\n+    }\r\n+\r\n+    public boolean supportsParameterDeclarations() {\r\n+        return _query.supportsParameterDeclarations();\r\n+    }\r\n+ \r\n+    public Object evaluate(Object value, Object ob, Object[] params,\r\n+        OpenJPAStateManager sm) {\r\n+        return _query.evaluate(value, ob, params, sm);         \r\n+    }\r\n+\r\n+    /**\r\n+     * Caching executor.\r\n+     */\r\n+    private static class QueryCacheExecutor\r\n+        implements Executor {\r\n+\r\n+        private final Executor _ex;\r\n+        private final Class _candidate;\r\n+        private final boolean _subs;\r\n+\r\n+        public QueryCacheExecutor(Executor ex, ClassMetaData meta,\r\n+            boolean subs) {\r\n+            _ex = ex;\r\n+            _candidate = (meta == null) ? null : meta.getDescribedType();\r\n+            _subs = subs;\r\n+        }\r\n+\r\n+        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\r\n+            Range range) {\r\n+            QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\r\n+            QueryKey key = QueryKey.newInstance(cq.getContext(),\r\n+                _ex.isPacking(q), params, _candidate, _subs, range.start, \r\n+                range.end);\r\n+            List cached = cq.checkCache(key);\r\n+            if (cached != null)\r\n+                return new ListResultObjectProvider(cached);\r\n+\r\n+            ResultObjectProvider rop = _ex.executeQuery(cq.getDelegate(),\r\n+                params, range);\r\n+            return cq.wrapResult(rop, key);\r\n+        }\r\n+\r\n+        /**\r\n+         * Clear the cached queries associated with the access path\r\n+         * classes in the query. This is done when bulk operations\r\n+         * (such as deletes or updates) are performed so that the\r\n+         * cache remains up-to-date.\r\n+         */\r\n+        private void clearAccessPath(StoreQuery q) {\r\n+            if (q == null)\r\n+                return;\r\n+\r\n+            ClassMetaData[] cmd = getAccessPathMetaDatas(q);\r\n+            if (cmd == null || cmd.length == 0)\r\n+                return;\r\n+\r\n+            List classes = new ArrayList(cmd.length);\r\n+            for (int i = 0; i < cmd.length; i++)\r\n+                classes.add(cmd[i].getDescribedType());\r\n+\r\n+            // evict from the query cache\r\n+            QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\r\n+            cq.getCache().onTypesChanged(new TypesChangedEvent\r\n+                (q.getContext(), classes));\r\n+\r\n+            // evict from the data cache\r\n+            for (int i = 0; i < cmd.length; i++) {\r\n+                if (cmd[i].getDataCache() != null)\r\n+                    cmd[i].getDataCache().removeAll(\r\n+                        cmd[i].getDescribedType(), true);\r\n+            }\r\n+        }\r\n+\r\n+        public Number executeDelete(StoreQuery q, Object[] params) {\r\n+            try {\r\n+                return _ex.executeDelete(unwrap(q), params);\r\n+            } finally {\r\n+                clearAccessPath(q);\r\n+            }\r\n+        }\r\n+\r\n+        public Number executeUpdate(StoreQuery q, Object[] params) {\r\n+            try {\r\n+                return _ex.executeUpdate(unwrap(q), params);\r\n+            } finally {\r\n+                clearAccessPath(q);\r\n+            }\r\n+        }\r\n+\r\n+        public String[] getDataStoreActions(StoreQuery q, Object[] params,\r\n+            Range range) {\r\n+            return EMPTY_STRINGS;\r\n+        }\r\n+\r\n+        public void validate(StoreQuery q) {\r\n+            _ex.validate(unwrap(q));\r\n+        }\r\n+        \r\n+        public void getRange(StoreQuery q, Object[] params, Range range) {\r\n+            _ex.getRange(q, params, range); \r\n+        }\r\n+\r\n+        public Object getOrderingValue(StoreQuery q, Object[] params,\r\n+            Object resultObject, int orderIndex) {\r\n+            return _ex.getOrderingValue(unwrap(q), params, resultObject,\r\n+                orderIndex);\r\n+        }\r\n+\r\n+        public boolean[] getAscending(StoreQuery q) {\r\n+            return _ex.getAscending(unwrap(q));\r\n+        }\r\n+\r\n+        public boolean isPacking(StoreQuery q) {\r\n+            return _ex.isPacking(unwrap(q));\r\n+        }\r\n+\r\n+        public String getAlias(StoreQuery q) {\r\n+            return _ex.getAlias(unwrap(q));\r\n+        }\r\n+\r\n+        public Class getResultClass(StoreQuery q) {\r\n+            return _ex.getResultClass(unwrap(q));\r\n+        }\r\n+\r\n+        public String[] getProjectionAliases(StoreQuery q) {\r\n+            return _ex.getProjectionAliases(unwrap(q));\r\n+        }\r\n+\r\n+        public Class[] getProjectionTypes(StoreQuery q) {\r\n+            return _ex.getProjectionTypes(unwrap(q));\r\n+        }\r\n+\r\n+        public ClassMetaData[] getAccessPathMetaDatas(StoreQuery q) {\r\n+            return _ex.getAccessPathMetaDatas(unwrap(q));\r\n+        }\r\n+\r\n+        public int getOperation(StoreQuery q) {\r\n+            return _ex.getOperation(unwrap(q));\r\n+        }\r\n+\r\n+        public boolean isAggregate(StoreQuery q) {\r\n+            return _ex.isAggregate(unwrap(q));\r\n+        }\r\n+\r\n+        public boolean hasGrouping(StoreQuery q) {\r\n+            return _ex.hasGrouping(unwrap(q));\r\n+        }\r\n+\r\n+        public LinkedMap getParameterTypes(StoreQuery q) {\r\n+            return _ex.getParameterTypes(unwrap(q));\r\n+        }\r\n+\r\n+        public Map getUpdates(StoreQuery q) {\r\n+            return _ex.getUpdates(unwrap(q));\r\n+        }\r\n+\r\n+        private static StoreQuery unwrap(StoreQuery q) {\r\n+            return ((QueryCacheStoreQuery) q).getDelegate();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Result list implementation for a cached query result. Package-protected\r\n+     * for testing.\r\n+     */\r\n+    public static class CachedList\r\n+        extends AbstractList\r\n+        implements Serializable {\r\n+\r\n+        private final QueryResult _res;\r\n+        private final boolean _proj;\r\n+        private final StoreContext _sctx;\r\n+\r\n+        public CachedList(QueryResult res, boolean proj, StoreContext ctx) {\r\n+            _res = res;\r\n+            _proj = proj;\r\n+            _sctx = ctx;\r\n+        }\r\n+\r\n+        public Object get(int idx) {\r\n+            if (!_proj)\r\n+                return fromObjectId(_res.get(idx), _sctx);\r\n+\r\n+            Object[] cached = (Object[]) _res.get(idx);\r\n+            if (cached == null)\r\n+                return null;\r\n+            Object[] uncached = new Object[cached.length];\r\n+            for (int i = 0; i < cached.length; i++)\r\n+                uncached[i] = copyProjection(cached[i], _sctx);\r\n+            return uncached;\r\n+        }\r\n+\r\n+        public int size() {\r\n+            return _res.size();\r\n+        }\r\n+\r\n+        public Object writeReplace()\r\n+            throws ObjectStreamException {\r\n+            return new ArrayList(this);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * A wrapper around a {@link ResultObjectProvider} that builds up a list of\r\n+     * all the OIDs in this list and registers that list with the\r\n+     * query cache. Abandons monitoring and registering if one of the classes\r\n+     * in the access path is modified while the query results are being loaded.\r\n+     */\r\n+    private class CachingResultObjectProvider\r\n+        implements ResultObjectProvider, TypesChangedListener {\r\n+\r\n+        private final ResultObjectProvider _rop;\r\n+        private final boolean _proj;\r\n+        private final QueryKey _qk;\r\n+        private final TreeMap _data = new TreeMap();\r\n+        private boolean _maintainCache = true;\r\n+        private int _pos = -1;\r\n+\r\n+        // used to determine list size without necessarily calling size(),\r\n+        // which may require a DB trip or return Integer.MAX_VALUE\r\n+        private int _max = -1;\r\n+        private int _size = Integer.MAX_VALUE;\r\n+\r\n+        /**\r\n+         * Constructor. Supply delegate result provider and our query key.\r\n+         */\r\n+        public CachingResultObjectProvider(ResultObjectProvider rop,\r\n+            boolean proj, QueryKey key) {\r\n+            _rop = rop;\r\n+            _proj = proj;\r\n+            _qk = key;\r\n+            _cache.addTypesChangedListener(this);\r\n+        }\r\n+\r\n+        /**\r\n+         * Stop caching.\r\n+         */\r\n+        private void abortCaching() {\r\n+            if (!_maintainCache)\r\n+                return;\r\n+\r\n+            // this can be called via an event from another thread\r\n+            synchronized (this) {\r\n+                // it's important that we set this flag first so that any\r\n+                // subsequent calls to this object are bypassed.\r\n+                _maintainCache = false;\r\n+                _cache.removeTypesChangedListener(this);\r\n+                _data.clear();\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Check whether we've buffered all results, while optionally adding\r\n+         * the given result.\r\n+         */\r\n+        private void checkFinished(Object obj, boolean result) {\r\n+            // this can be called at the same time as abortCaching via\r\n+            // a types changed event\r\n+            boolean finished = false;\r\n+            synchronized (this) {\r\n+                if (_maintainCache) {\r\n+                    if (result) {\r\n+                        Integer index = Numbers.valueOf(_pos);\r\n+                        if (!_data.containsKey(index)) {\r\n+                            Object cached;\r\n+                            if (obj == null)\r\n+                                cached = null;\r\n+                            else if (!_proj)\r\n+                                cached = _sctx.getObjectId(obj);\r\n+                            else {\r\n+                                Object[] arr = (Object[]) obj;\r\n+                                Object[] cp = new Object[arr.length];\r\n+                                for (int i = 0; i < arr.length; i++)\r\n+                                    cp[i] = copyProjection(arr[i], _sctx);\r\n+                                cached = cp;\r\n+                            }\r\n+                            if (cached != null)\r\n+                                _data.put(index, cached);\r\n+                        }\r\n+                    }\r\n+                    finished = _size == _data.size();\r\n+                }\r\n+            }\r\n+\r\n+            if (finished) {\r\n+                // an abortCaching call can sneak in here via onExpire; the\r\n+                // cache is locked during event firings, so the lock here will\r\n+                // wait for it (or will force the next firing to wait)\r\n+                _cache.writeLock();\r\n+                try {\r\n+                    // make sure we didn't abort\r\n+                    if (_maintainCache) {\r\n+                        QueryResult res = null;\r\n+                        synchronized (this) {\r\n+                            res = new QueryResult(_qk, _data.values());\r\n+                        }\r\n+                        _cache.put(_qk, res);\r\n+                        abortCaching();\r\n+                    }\r\n+                }\r\n+                finally {\r\n+                    _cache.writeUnlock();\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        public boolean supportsRandomAccess() {\r\n+            return _rop.supportsRandomAccess();\r\n+        }\r\n+\r\n+        public void open()\r\n+            throws Exception {\r\n+            _rop.open();\r\n+        }\r\n+\r\n+        public Object getResultObject()\r\n+            throws Exception {\r\n+            Object obj = _rop.getResultObject();\r\n+            checkFinished(obj, true);\r\n+            return obj;\r\n+        }\r\n+\r\n+        public boolean next()\r\n+            throws Exception {\r\n+            _pos++;\r\n+            boolean next = _rop.next();\r\n+            if (!next && _pos == _max + 1) {\r\n+                _size = _pos;\r\n+                checkFinished(null, false);\r\n+            } else if (next && _pos > _max)\r\n+                _max = _pos;\r\n+            return next;\r\n+        }\r\n+\r\n+        public boolean absolute(int pos)\r\n+            throws Exception {\r\n+            _pos = pos;\r\n+            boolean valid = _rop.absolute(pos);\r\n+            if (!valid && _pos == _max + 1) {\r\n+                _size = _pos;\r\n+                checkFinished(null, false);\r\n+            } else if (valid && _pos > _max)\r\n+                _max = _pos;\r\n+            return valid;\r\n+        }\r\n+\r\n+        public int size()\r\n+            throws Exception {\r\n+            if (_size != Integer.MAX_VALUE)\r\n+                return _size;\r\n+            int size = _rop.size();\r\n+            _size = size;\r\n+            checkFinished(null, false);\r\n+            return size;\r\n+        }\r\n+\r\n+        public void reset()\r\n+            throws Exception {\r\n+            _rop.reset();\r\n+            _pos = -1;\r\n+        }\r\n+\r\n+        public void close()\r\n+            throws Exception {\r\n+            abortCaching();\r\n+            _rop.close();\r\n+        }\r\n+\r\n+        public void handleCheckedException(Exception e) {\r\n+            _rop.handleCheckedException(e);\r\n+        }\r\n+\r\n+        public void onTypesChanged(TypesChangedEvent ev) {\r\n+            if (_qk.changeInvalidatesQuery(ev.getTypes()))\r\n+                abortCaching();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Struct to recognize cached oids.\r\n+     */\r\n+    private static class CachedObjectId {\r\n+\r\n+        public final Object oid;\r\n+\r\n+        public CachedObjectId (Object oid)\r\n+\t\t{\r\n+\t\t\tthis.oid = oid;\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"c8d6e9e96baaf26e8dd5fff105f4b0ee90899738","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","status":"modified","additions":68,"deletions":1,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,7 +17,14 @@\n \n package org.apache.openjpa.ee;\n \n+import javax.transaction.InvalidTransactionException;\n+import javax.transaction.NotSupportedException;\n import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+import javax.transaction.TransactionManager;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.GeneralException;\n \n /*\n  * AbstractManagedRuntime.java\n@@ -26,7 +33,9 @@\n  *\n  */\n public abstract class AbstractManagedRuntime implements ManagedRuntime {\n-    \n+\n+    private static Localizer _loc =\n+        Localizer.forPackage(AbstractManagedRuntime.class);\n     /**\n      * Returns a transaction key that can be used to associate transactions\n      * and Brokers.\n@@ -38,4 +47,62 @@ public Object getTransactionKey() throws Exception, SystemException {\n         return getTransactionManager().getTransaction();\n     }\n \n+    /**\n+     * <P>\n+     * Do a unit of work which will execute outside of the current managed\n+     * transaction. The default implementation suspends the transaction prior to\n+     * execution, and resumes the transaction afterwards.\n+     * </P>\n+     * \n+     * @param runnable\n+     *            The runnable wrapper for the work that will be done. The\n+     *            runnable object should be fully initialized with any state\n+     *            needed to execute.\n+     * \n+     * @throws NotSupportedException\n+     *            if the current transaction can not be obtained, or an error \n+     *            occurs when suspending or resuming the transaction.\n+     */\n+    public void doNonTransactionalWork(Runnable runnable) throws \n+            NotSupportedException {\n+        TransactionManager tm = null;\n+        Transaction transaction = null;\n+        \n+        try { \n+            tm = getTransactionManager(); \n+        }\n+        catch(Exception e) {\n+            NotSupportedException nse =\n+                new NotSupportedException(e.getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        }\n+        try {\n+            transaction = tm.suspend();\n+        } catch (Exception e) {\n+            NotSupportedException nse = new NotSupportedException(  \n+                    _loc.get(\"exc-suspend-tran\", e.getClass()).getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        }\n+        \n+        runnable.run();\n+        \n+        try {\n+            tm.resume(transaction);\n+        } catch (Exception e) {\n+            try {\n+                transaction.setRollbackOnly();\n+            }\n+            catch(SystemException se2) {\n+                throw new GeneralException(se2);\n+            }\n+            NotSupportedException nse =\n+                new NotSupportedException(\n+                        _loc.get(\"exc-resume-tran\", e.getClass()).getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        } \n+\n+    }\n }"},{"sha":"0c072a08b73a67fb47907a41e11b01b00543add3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":60,"deletions":5,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -21,11 +21,13 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import javax.transaction.NotSupportedException;\n import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n \n@@ -73,6 +75,7 @@\n     private static final WLSManagedRuntime WLS;\n     private static final SunOneManagedRuntime SUNONE;\n     private static final WASManagedRuntime WAS;\n+    private static final WASRegistryManagedRuntime WAS_REG;\n \n     private static Localizer _loc = Localizer.forPackage\n         (AutomaticManagedRuntime.class);\n@@ -108,24 +111,57 @@\n         mr = null;\n         try {\n             mr = new WASManagedRuntime();\n+        } catch (Throwable t) {\n         }\n-        catch (Throwable t) {\n+        WAS = (WASManagedRuntime) mr;\n+\n+        mr = null;\n+        try {\n+            // In a WebSphere environment the thread's current classloader might\n+            // not have access to the WebSphere APIs. However the \"runtime\"\n+            // classloader will have access to them.\n+            \n+            // Should not need a doPriv getting this class' classloader\n+            ClassLoader cl = AutomaticManagedRuntime.class.getClassLoader();\n+\n+            Class<WASRegistryManagedRuntime> mrClass =\n+                (Class<WASRegistryManagedRuntime>) J2DoPrivHelper\n+                        .getForNameAction(\n+                                WASRegistryManagedRuntime.class.getName(),\n+                                true, cl).run();\n+            mr = J2DoPrivHelper.newInstanceAction(mrClass).run();\n+        } catch (Throwable t) {\n+            // safe to ignore\n         }\n-        WAS= (WASManagedRuntime) mr;\n+        WAS_REG = (WASRegistryManagedRuntime) mr;\n     }\n \n     private Configuration _conf = null;\n     private ManagedRuntime _runtime = null;\n-\n+    \n     public TransactionManager getTransactionManager()\n         throws Exception {\n         if (_runtime != null)\n             return _runtime.getTransactionManager();\n \n-        List errors = new LinkedList();\n+        List<Throwable> errors = new LinkedList<Throwable>();\n         TransactionManager tm = null;\n \n-        // first try the registry, which is the official way to obtain\n+        // Try the registry extensions first so that any applicable vendor\n+        // specific extensions are used.\n+        if (WAS_REG != null) {\n+            try {\n+                tm = WAS_REG.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = WAS_REG;\n+                return tm;\n+            }\n+        }\n+\n+        // Then try the registry, which is the official way to obtain\n         // transaction synchronication in JTA 1.1\n         if (REGISTRY != null) {\n             try {\n@@ -256,4 +292,23 @@ public Object getTransactionKey() throws Exception, SystemException {\n         \n         return null;\n     }\n+\n+    /**\n+     * Delegate nonTransactional work to the appropriate managed runtime. If no\n+     * managed runtime is found then delegate {@link AbstractManagedRuntime}.\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+            throws NotSupportedException {\n+        // Obtain a transaction manager to initialize the runtime.\n+        try {\n+            getTransactionManager();\n+        } catch (Exception e) {\n+            NotSupportedException nse =\n+                new NotSupportedException(_loc\n+                        .get(\"tm-unavailable\", _runtime).getMessage());\n+            nse.initCause(e);\n+            throw nse;\n+        }\n+        _runtime.doNonTransactionalWork(runnable);\n+    }\n }"},{"sha":"0ef4a0983b02fb938148527c9284f9fa50b6a7f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.ee;\n \n+import javax.transaction.NotSupportedException;\n import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n@@ -65,5 +66,26 @@ public Throwable getRollbackCause()\n      */\n     public Object getTransactionKey()\n         throws Exception, SystemException;\n-    \n+\n+    /**\n+     * <P>\n+     * Do a unit of work which will execute outside of the current managed\n+     * transaction.\n+     * </P>\n+     * <P>\n+     * If the runnable object encounters an exception it should be wrapped in a\n+     * RuntimeException and thrown back to the caller\n+     * </P>\n+     * \n+     * @param runnable\n+     *            The runnable wrapper for the work that will be done. The\n+     *            runnable object should be fully initialized with any state\n+     *            needed to execute.\n+     * \n+     * @throws NotSupportedException\n+     *             if the transaction can not be suspended.\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+            throws NotSupportedException;\n+  \n }"},{"sha":"eb8350c8cac2c4cf1aa8cf128cbb3513fede34db","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -32,6 +32,8 @@\n import javax.transaction.TransactionSynchronizationRegistry;\n import javax.transaction.xa.XAResource;\n \n+import org.apache.openjpa.lib.util.Localizer;\n+\n /**\n  * Implementation of the {@link ManagedRuntime} interface that uses \n  * the {@link TransactionSynchronizationRegistry} interface (new in JTA 1.1)\n@@ -42,10 +44,12 @@\n  */\n public class RegistryManagedRuntime\n     implements ManagedRuntime {\n-\n     private String _registryName =\n         \"java:comp/TransactionSynchronizationRegistry\";\n     private TransactionManagerRegistryFacade _tm = null;\n+    \n+    private static Localizer _loc =\n+        Localizer.forPackage(RegistryManagedRuntime.class);\n \n     /**\n      * Return the cached TransactionManager instance.\n@@ -188,5 +192,16 @@ public boolean enlistResource(XAResource xaRes)\n             throw new SystemException();\n         }\n     }\n+    \n+    /**\n+     * <P>\n+     * RegistryManagedRuntime cannot suspend transactions.\n+     * </P>\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+        throws NotSupportedException {\n+        throw new NotSupportedException(_loc.get(\"tsr-cannot-suspend\")\n+            .getMessage());\n+    }\n }\n "},{"sha":"4220609d7197dd4321d98a830028555c6ee42119","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASRegistryManagedRuntime.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import com.ibm.wsspi.uow.UOWAction;\n+import com.ibm.wsspi.uow.UOWActionException;\n+import com.ibm.wsspi.uow.UOWException;\n+import com.ibm.wsspi.uow.UOWManager;\n+import com.ibm.wsspi.uow.UOWManagerFactory;\n+\n+/**\n+ * WASRegistryManagedRuntime provides WebSphere specific extensions to\n+ * {@link RegistryManagedRuntime}. Currently these extensions consist of using\n+ * the WebSphere UOWManager interface to submit non transactional work.\n+ */\n+public class WASRegistryManagedRuntime extends RegistryManagedRuntime {\n+    /**\n+     * <P>\n+     * RegistryManagedRuntime cannot suspend transactions, but WebSphere \n+     * provides an interface to submit work outside of the current tran.\n+     * </P>\n+     */\n+    public void doNonTransactionalWork(Runnable runnable)\n+            throws RuntimeException, UnsupportedOperationException {\n+        try {\n+            UOWManagerFactory.getUOWManager().runUnderUOW(\n+                UOWManager.UOW_TYPE_LOCAL_TRANSACTION, false,\n+                new DelegatingUOWAction(runnable));\n+        }\n+        catch(UOWActionException e ) {\n+            RuntimeException re = new RuntimeException(e.getMessage());\n+            re.initCause(e);\n+            throw re;\n+        }\n+        catch(UOWException e ) {\n+            RuntimeException re = new RuntimeException(e.getMessage());\n+            re.initCause(e);\n+            throw re;\n+        }\n+    }\n+\n+    \n+    /**\n+     * Delegate for the WebSphere proprietary UOWAction interface. Enables a \n+     * {@link Runnable} to be passed in to the WebSphere UOWManager.  \n+     */\n+    class DelegatingUOWAction implements UOWAction {\n+        Runnable _del;\n+\n+        public DelegatingUOWAction(Runnable delegate) {\n+            _del = delegate;\n+        }\n+\n+        public void run() throws Exception {\n+            _del.run();\n+        }\n+    }\n+}"},{"sha":"b564a06625c319705be539b2b95998f0ae13d4d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -116,6 +116,18 @@ public PCClassFileTransformer(MetaDataRepository repos,\n             return null;\n \n         _transforming = true;\n+\n+        return transform0(className, redef, bytes);\n+    }\n+\n+    /**\n+     * We have to split the transform method into two methods to avoid\n+     * ClassCircularityError when executing method using pure-JIT JVMs\n+     * such as JRockit.\n+     */\n+    private byte[] transform0(String className, Class redef, byte[] bytes)\n+        throws IllegalClassFormatException {\n+\n         try {\n             Boolean enhance = needsEnhance(className, redef, bytes);\n             if (enhance != null && _log.isTraceEnabled())"},{"sha":"a194aa3c65c7b1326483cd63c70db8135e8c4bd5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":96,"deletions":41,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -118,7 +118,10 @@\n     public static final int ENHANCE_INTERFACE = 2 << 1;\n     public static final int ENHANCE_PC = 2 << 2;\n \n-    private static final String PRE = \"pc\";\n+    public static final String PRE = \"pc\";\n+    public static final String ISDETACHEDSTATEDEFINITIVE = PRE \n+        + \"isDetachedStateDefinitive\";\n+\n     private static final Class PCTYPE = PersistenceCapable.class;\n     private static final String SM = PRE + \"StateManager\";\n     private static final Class SMTYPE = StateManager.class;\n@@ -1960,6 +1963,11 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                 code.iadd();\n                 code.invokeinterface().setMethod\n                     (getFieldSupplierMethod(type));\n+                if (fmds[i].getObjectIdFieldTypeCode() == JavaTypes.OBJECT) {\n+                \tcode.checkcast().setType(ObjectId.class);\n+                \tcode.invokevirtual().setMethod(ObjectId.class, \"getId\", \n+            \t\t\tObject.class, null);                \t\n+                }\n \n                 // if the type of this field meta data is\n                 // non-primitive and non-string, be sure to cast\n@@ -2154,6 +2162,11 @@ private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n             }\n         } else if (pkmeta.getObjectIdType() != null) {\n             code.aload().setLocal(oid);\n+            if (pkcode == JavaTypes.OBJECT) {\n+                code.checkcast().setType(ObjectId.class);\n+                code.invokevirtual().setMethod(ObjectId.class, \"getId\", \n+            \t\t\tObject.class, null);\n+            } \n             code.checkcast().setType(pktype);\n         } else\n             code.aload().setLocal(oid);\n@@ -2999,27 +3012,45 @@ private void modifyReadObjectMethod(BCMethod method, boolean full) {\n      */\n     private void addIsDetachedMethod()\n         throws NoSuchMethodException {\n-        // public boolean pcIsDetached ()\n+        // public boolean pcIsDetached()\n         BCMethod method = _pc.declareMethod(PRE + \"IsDetached\",\n             Boolean.class, null);\n         method.makePublic();\n         Code code = method.getCode(true);\n-        writeIsDetachedMethod(code);\n+        boolean needsDefinitiveMethod = writeIsDetachedMethod(code);\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        if (!needsDefinitiveMethod) \n+            return;\n+\n+        // private boolean pcIsDetachedStateDefinitive()\n+        //   return false;\n+        // auxilliary enhancers may change the return value of this method\n+        // if their specs consider detached state definitive\n+        method = _pc.declareMethod(ISDETACHEDSTATEDEFINITIVE, boolean.class,\n+            null);\n+        method.makePrivate();\n+        code = method.getCode(true);\n+        code.constant().setValue(false);\n+        code.ireturn();\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n     }\n \n     /**\n      * Creates the body of the pcIsDetached() method to determine if an\n      * instance is detached.\n+     *\n+     * @return true if we need a pcIsDetachedStateDefinitive method, false\n+     * otherwise\n      */\n-    private void writeIsDetachedMethod(Code code)\n+    private boolean writeIsDetachedMethod(Code code)\n         throws NoSuchMethodException {\n         // not detachable: return Boolean.FALSE\n         if (!_meta.isDetachable()) {\n             code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n             code.areturn();\n-            return;\n+            return false;\n         }\n \n         // if (sm != null)\n@@ -3067,7 +3098,7 @@ private void writeIsDetachedMethod(Code code)\n                 ifins.setTarget(target);\n                 notdeser.setTarget(target);\n                 code.areturn();\n-                return;\n+                return false;\n             }\n         }\n \n@@ -3077,9 +3108,9 @@ private void writeIsDetachedMethod(Code code)\n         if (notdeser != null)\n             notdeser.setTarget(target);\n \n-        // allow users with version fields to manually construct a \"detached\"\n-        // instance, so check version before taking into account non-existent\n-        // detached state\n+        // allow users with version or auto-assigned pk fields to manually \n+        // construct a \"detached\" instance, so check these before taking into \n+        // account non-existent detached state\n \n         // consider detached if version is non-default\n         FieldMetaData version = _meta.getVersionField();\n@@ -3094,41 +3125,13 @@ private void writeIsDetachedMethod(Code code)\n             ifins.setTarget(code.getstatic().setField(Boolean.class, \"FALSE\",\n                 Boolean.class));\n             code.areturn();\n-            return;\n-        }\n-\n-        // no detached state: if instance uses detached state and it's not\n-        // synthetic or the instance is not serializable or the state isn't\n-        // transient, must not be detached\n-        if (state == null\n-            && (!ClassMetaData.SYNTHETIC.equals(_meta.getDetachedState())\n-            || !Serializable.class.isAssignableFrom(_meta.getDescribedType())\n-            || !_repos.getConfiguration().getDetachStateInstance().\n-            isDetachedStateTransient())) {\n-            // return Boolean.FALSE\n-            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n-            code.areturn();\n-            return;\n-        }\n-\n-        // no detached state: if instance uses detached state (and must be\n-        // synthetic and transient in serializable instance at this point),\n-        // not detached if state not set to DESERIALIZED\n-        if (state == null) {\n-            // if (pcGetDetachedState () == null) // instead of DESERIALIZED\n-            //     return Boolean.FALSE;\n-            loadManagedInstance(code, false);\n-            code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n-                Object.class, null);\n-            ifins = code.ifnonnull();\n-            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n-            code.areturn();\n-            ifins.setTarget(code.nop());\n+            return false;\n         }\n \n         // consider detached if auto-genned primary keys are non-default\n         ifins = null;\n         JumpInstruction ifins2 = null;\n+        boolean hasAutoAssignedPK = false;\n         if (state != Boolean.TRUE\n             && _meta.getIdentityType() == ClassMetaData.ID_APPLICATION) {\n             // for each pk field:\n@@ -3162,13 +3165,65 @@ private void writeIsDetachedMethod(Code code)\n             }\n         }\n \n-        // give up; we just don't know\n-        target = code.constant().setNull();\n+        // create artificial target to simplify\n+        target = code.nop();\n         if (ifins != null)\n             ifins.setTarget(target);\n         if (ifins2 != null)\n             ifins2.setTarget(target);\n+\n+        // if has auto-assigned pk and we get to this point, must have default\n+        // value, so must be new instance\n+        if (hasAutoAssignedPK) {\n+            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+            code.areturn();\n+            return false;\n+        }\n+\n+        // if detached state is not definitive, just give up now and return\n+        // null so that the runtime will perform a DB lookup to determine\n+        // whether we're detached or new\n+        code.aload().setThis();\n+        code.invokespecial().setMethod(ISDETACHEDSTATEDEFINITIVE, boolean.class,\n+            null);\n+        ifins = code.ifne();\n+        code.constant().setNull();\n+        code.areturn();\n+        ifins.setTarget(code.nop());\n+\n+        // no detached state: if instance uses detached state and it's not\n+        // synthetic or the instance is not serializable or the state isn't\n+        // transient, must not be detached\n+        if (state == null\n+            && (!ClassMetaData.SYNTHETIC.equals(_meta.getDetachedState())\n+            || !Serializable.class.isAssignableFrom(_meta.getDescribedType())\n+            || !_repos.getConfiguration().getDetachStateInstance().\n+            isDetachedStateTransient())) {\n+            // return Boolean.FALSE\n+            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+            code.areturn();\n+            return true;\n+        }\n+\n+        // no detached state: if instance uses detached state (and must be\n+        // synthetic and transient in serializable instance at this point),\n+        // not detached if state not set to DESERIALIZED\n+        if (state == null) {\n+            // if (pcGetDetachedState () == null) // instead of DESERIALIZED\n+            //     return Boolean.FALSE;\n+            loadManagedInstance(code, false);\n+            code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n+                Object.class, null);\n+            ifins = code.ifnonnull();\n+            code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+            code.areturn();\n+            ifins.setTarget(code.nop());\n+        }\n+\n+        // give up; we just don't know\n+        code.constant().setNull();\n         code.areturn();\n+        return true;\n     }\n \n     /**"},{"sha":"8c72a7d376189d6ad6bbae552f9ff6ae726b34e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":35,"deletions":24,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.instrument.Instrumentation;\n import java.security.AccessController;\n+import java.util.Iterator;\n+import java.util.List;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n@@ -90,30 +92,39 @@ else if (opts.containsKey(\"RuntimeEnhancement\") ||\n \n     private static void registerClassLoadEnhancer(Instrumentation inst,\n         Options opts) {\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        Configurations.populateConfiguration(conf, opts);\n-        // don't allow connections\n-        conf.setConnectionUserName(null);\n-        conf.setConnectionPassword(null);\n-        conf.setConnectionURL(null);\n-        conf.setConnectionDriverName(null);\n-        conf.setConnectionFactoryName(null);\n-        // set single class resolver\n-        final ClassLoader tmpLoader = (ClassLoader) AccessController\n-            .doPrivileged(J2DoPrivHelper\n-                .newTemporaryClassLoaderAction((ClassLoader) AccessController\n-                    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n-                    ));\n-        conf.setClassResolver(new ClassResolver() {\n-            public ClassLoader getClassLoader(Class context, ClassLoader env) {\n-                return tmpLoader;\n-            }\n-        });\n-        conf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n-        conf.instantiateAll(); // avoid threading issues\n+    \tList<String> anchors = Configurations.\n+            getFullyQualifiedAnchorsInPropertiesLocation(opts);\n+    \tfor (String a : anchors) {\n+    \t\tOptions clonedOptions = (Options) opts.clone();\n+    \t\tclonedOptions.setProperty(\"properties\", a);\n+    \t\tOpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+    \t\tConfigurations.populateConfiguration(conf, clonedOptions);\n+    \t\t// don't allow connections\n+    \t\tconf.setConnectionUserName(null);\n+    \t\tconf.setConnectionPassword(null);\n+    \t\tconf.setConnectionURL(null);\n+    \t\tconf.setConnectionDriverName(null);\n+    \t\tconf.setConnectionFactoryName(null);\n+    \t\t// set single class resolver\n+    \t\tfinal ClassLoader tmpLoader = (ClassLoader) AccessController\n+    \t\t    .doPrivileged(J2DoPrivHelper\n+    \t\t    .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+    \t\t    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n+    \t\t    ));\n+    \t\tconf.setClassResolver(new ClassResolver() {\n+    \t\t    public ClassLoader getClassLoader(Class context,\n+                    ClassLoader env) {\n+    \t\t        return tmpLoader;\n+    \t\t    }\n+    \t\t});\n+    \t\tconf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n+    \t\tconf.instantiateAll(); // avoid threading issues\n \n-        PCClassFileTransformer transformer = new PCClassFileTransformer\n-            (conf.newMetaDataRepositoryInstance(), opts, tmpLoader);\n-        inst.addTransformer(transformer);\n+    \t\tPCClassFileTransformer transformer = new PCClassFileTransformer\n+    \t\t    (conf.newMetaDataRepositoryInstance(), clonedOptions,\n+    \t\t    tmpLoader);\n+    \t\tinst.addTransformer(transformer);\n+    \t\tconf.close();\n+    \t}\n     }\n }"},{"sha":"8b578368ad881978faa631f3fefc1110242a9050","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -220,6 +220,30 @@ public static Object get(Object target, Field field) {\n             throw wrapReflectionException(t);\n         }\n     }\n+    \n+    /**\n+     * Get the value of the given named field or a corresponding getter method.\n+     * \n+     * @return null if the field does not exist and mustExist is set to false or\n+     * the given target is null.\n+     * \n+     * @exception UserException if mustExist is true and the field or getter \n+     * method is non-existent\n+     */\n+    public static Object getValue(Object obj, String prop, boolean mustExist) {\n+    \tif (obj == null)\n+    \t\treturn null;\n+    \tClass cls = obj.getClass();\n+    \tField field = findField(cls, prop, false);\n+    \tif (field != null)\n+    \t\treturn get(obj, field);\n+    \tMethod getter = findGetter(cls, prop, false);\n+    \tif (getter != null)\n+    \t\treturn get(obj, getter);\n+        if (mustExist)\n+            throw new UserException(_loc.get(\"bad-field\", cls, prop));\n+        return null; // should not reach\n+    }\n \n     /**\n      * Make the given member accessible if it isn't already."},{"sha":"73a16b20967c270f9a4e06fac6116586f8ee7e9e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClassesModes.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Possible values for the <code>openjpa.RuntimeUnenhancedClasses</code>\r\n+ * configuration setting.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface RuntimeUnenhancedClassesModes {\r\n+    public final static int SUPPORTED = 0;\r\n+    public final static int UNSUPPORTED = 1;\r\n+    public final static int WARN = 2;\r\n+}\n\\ No newline at end of file"},{"sha":"7659a9bc5208740017a2e674b9fa5fcb6fcbcb26","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":35,"deletions":8,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,7 +19,6 @@\n package org.apache.openjpa.kernel;\r\n \r\n import java.io.ObjectStreamException;\r\n-import java.lang.reflect.InvocationTargetException;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n@@ -29,14 +28,18 @@\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Properties;\r\n+import java.util.Set;\r\n import javax.transaction.Status;\r\n import javax.transaction.Synchronization;\r\n import javax.transaction.Transaction;\r\n import javax.transaction.TransactionManager;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n+import org.apache.commons.collections.set.MapBackedSet;\r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.conf.OpenJPAVersion;\r\n+import org.apache.openjpa.conf.BrokerValue;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n import org.apache.openjpa.datacache.DataCacheStoreManager;\r\n import org.apache.openjpa.ee.ManagedRuntime;\r\n import org.apache.openjpa.enhance.PCRegistry;\r\n@@ -48,14 +51,12 @@\n import org.apache.openjpa.lib.conf.Configurations;\r\n import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n-import org.apache.openjpa.lib.util.JavaVersions;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import java.util.concurrent.ConcurrentHashMap;\r\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\r\n import java.util.concurrent.locks.ReentrantLock;\r\n import org.apache.openjpa.meta.MetaDataRepository;\r\n import org.apache.openjpa.util.GeneralException;\r\n-import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.util.InvalidStateException;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n import org.apache.openjpa.util.UserException;\r\n@@ -90,8 +91,7 @@\n         = new ConcurrentHashMap();\r\n \r\n     // weak-ref tracking of open brokers\r\n-    private transient Collection _brokers = new ConcurrentReferenceHashSet\r\n-        (ConcurrentReferenceHashSet.WEAK);\r\n+    private transient Set _brokers;\r\n \r\n     // cache the class names loaded from the persistent classes property so\r\n     // that we can re-load them for each new broker\r\n@@ -145,6 +145,7 @@ public static AbstractBrokerFactory getPooledFactoryForKey(Object key) {\n      */\r\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\r\n         _conf = config;\r\n+        _brokers = newBrokerSet();\r\n         getPcClassLoaders();\r\n     }\r\n \r\n@@ -384,7 +385,7 @@ public void close() {\n             Broker broker;\r\n             for (Iterator itr = _brokers.iterator(); itr.hasNext();) {\r\n                 broker = (Broker) itr.next();\r\n-                // Check for null because _brokers contains weak references\r\n+                // Check for null because _brokers may contain weak references\r\n                 if ((broker != null) && (!broker.isClosed()))\r\n                     broker.close();\r\n             }\r\n@@ -464,13 +465,29 @@ protected Object readResolve()\n \r\n         // reset these transient fields to empty values\r\n         _transactional = new ConcurrentHashMap();\r\n-        _brokers = new ConcurrentReferenceHashSet(\r\n-                ConcurrentReferenceHashSet.WEAK);\r\n+        _brokers = newBrokerSet();\r\n \r\n         makeReadOnly();\r\n         return this;\r\n     }\r\n \r\n+    private Set newBrokerSet() {\r\n+        BrokerValue bv;\r\n+        if (_conf instanceof OpenJPAConfigurationImpl)\r\n+            bv = ((OpenJPAConfigurationImpl) _conf).brokerPlugin;\r\n+        else\r\n+            bv = (BrokerValue) _conf.getValue(BrokerValue.KEY);\r\n+\r\n+        if (FinalizingBrokerImpl.class.isAssignableFrom(\r\n+            bv.getTemplateBrokerType(_conf))) {\r\n+            return MapBackedSet.decorate(new ConcurrentHashMap(),\r\n+                new Object() { });\r\n+        } else {\r\n+            return new ConcurrentReferenceHashSet(\r\n+                ConcurrentReferenceHashSet.WEAK);\r\n+        }\r\n+    }\r\n+\r\n     ////////////////////////\r\n     // Methods for Override\r\n     ////////////////////////\r\n@@ -746,6 +763,16 @@ public Collection getOpenBrokers() {\n         return Collections.unmodifiableCollection(_brokers);\r\n     }\r\n \r\n+    /**\r\n+     * Release <code>broker</code> from any internal data structures. This\r\n+     * is invoked by <code>broker</code> after the broker is fully closed.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    protected void releaseBroker(BrokerImpl broker) {\r\n+        _brokers.remove(broker);\r\n+    }\r\n+\r\n     /**\r\n      * @return a key that can be used to obtain this broker factory from the\r\n      * pool at a later time.\r"},{"sha":"d14712996cde315d011e4362b640e4a7b0e54358","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -87,16 +87,20 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                 Map m = (Map) data;\n                 Map m2 = (Map) sm.newFieldProxy(fmd.getIndex());\n                 Collection keys = new ArrayList (m.size());\n+                Collection values = new ArrayList(m.size());          \n \n-                for (Iterator mi = m.entrySet().iterator(); mi.hasNext();)\n-                    keys.add(mi.next());\n+                for (Iterator<Map.Entry> mi = m.entrySet().iterator();\n+                    mi.hasNext();) {\n+                    Map.Entry e = mi.next();\n+                    keys.add(e.getKey());\n+                    values.add(e.getValue());\n+                }\n \n                 Object[] keyArray = keys.toArray();\n-                Object[] values = toNestedFields(sm, fmd.getElement(),\n-                    keys, fetch, context).toArray();\n-                int idx = 0;\n-                for (Iterator mi = m.entrySet().iterator(); mi.hasNext(); idx++)\n-                    m2.put(keyArray[idx], values[idx]);\n+                Object[] valueArray = toNestedFields(sm, fmd.getElement(),\n+                    values, fetch, context).toArray();\n+                for (int idx = 0; idx < keyArray.length; idx++)\n+                    m2.put(keyArray[idx], valueArray[idx]);\n \n                 return m2;\n             case JavaTypes.ARRAY:\n@@ -172,10 +176,13 @@ protected Collection toNestedFields(OpenJPAStateManager sm,\n                     ret.add((Locale) itr.next());\n                 return ret;\n             case JavaTypes.PC:\n-                if (vmd.isEmbedded())\n-                    for (Iterator itr=data.iterator(); itr.hasNext();)\n+                if (vmd.isEmbedded()) {\n+                    for (Iterator itr=data.iterator(); itr.hasNext();) {\n                         ret.add(toEmbeddedField(sm, vmd, itr.next(), fetch\n                             , context));\n+                    }\n+                    return ret;\n+                }\n                 // no break\n             case JavaTypes.PC_UNTYPED:\n                 Object[] r = toRelationFields(sm, data, fetch);"},{"sha":"f8f12dc4b9445a3d4537d5af367e2f602076abc1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":190,"deletions":184,"changes":374,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -1,184 +1,190 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.kernel;\n-\n-import java.util.Map;\n-\n-import org.apache.commons.collections.map.LinkedMap;\n-import org.apache.openjpa.kernel.exps.AggregateListener;\n-import org.apache.openjpa.kernel.exps.FilterListener;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.util.InternalException;\n-\n-/**\n- * Abstract {@link StoreQuery} that implements most methods as no-ops.\n- *\n- * @author Abe White\n- * @since 0.4.0\n- */\n-public abstract class AbstractStoreQuery\n-    implements StoreQuery {\n-\n-    protected QueryContext ctx = null;\n-   \n-    public QueryContext getContext() {\n-        return ctx;\n-    }\n-\n-    public void setContext(QueryContext ctx) {\n-        this.ctx = ctx;\n-    }\n-\n-    public boolean setQuery(Object query) {\n-        return false;\n-    }\n-\n-    public FilterListener getFilterListener(String tag) {\n-        return null;\n-    }\n-\n-    public AggregateListener getAggregateListener(String tag) {\n-        return null;\n-    }\n-\n-    public Object newCompilationKey() {\n-        return null;\n-    }\n-\n-    public Object newCompilation() {\n-        return null;\n-    }\n-\n-    public void populateFromCompilation(Object comp) {\n-    }\n-\n-    public void invalidateCompilation() {\n-    }\n-\n-    public boolean supportsDataStoreExecution() {\n-        return false;\n-    }\n-\n-    public boolean supportsInMemoryExecution() {\n-        return false;\n-    }\n-\n-    public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs) {\n-        throw new InternalException();\n-    }\n-\n-    public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\n-        throw new InternalException();\n-    }\n-\n-    public boolean supportsAbstractExecutors() {\n-        return false;\n-    }\n-\n-    public boolean requiresCandidateType() {\n-        return true;\n-    }\n-\n-    public boolean requiresParameterDeclarations() {\n-        return true;\n-    }\n-\n-    public boolean supportsParameterDeclarations() {\n-        return true;\n-    }\n-\n-    /**\n-     * Abstract {@link Executor} that implements most methods as no-ops.\n-     */\n-    public static abstract class AbstractExecutor\n-        implements Executor {\n-\n-        public Number executeDelete(StoreQuery q, Object[] params) {\n-            return q.getContext().deleteInMemory(q, this, params);\n-        }\n-\n-        public Number executeUpdate(StoreQuery q, Object[] params) {\n-            return q.getContext().updateInMemory(q, this, params);\n-        }\n-\n-        public String[] getDataStoreActions(StoreQuery q, Object[] params,\n-            Range range) {\n-            return EMPTY_STRINGS;\n-        }\n-\n-        public void validate(StoreQuery q) {\n-        }\n-\n-        public void getRange(StoreQuery q, Object[] params, Range range) {\n-        }\n-\n-        public Object getOrderingValue(StoreQuery q, Object[] params,\n-            Object resultObject, int orderIndex) {\n-            return null;\n-        }\n-\n-        public boolean[] getAscending(StoreQuery q) {\n-            return EMPTY_BOOLEANS;\n-        }\n-\n-        public boolean isPacking(StoreQuery q) {\n-            return false;\n-        }\n-\n-        public String getAlias(StoreQuery q) {\n-            return null;\n-        }\n-\n-        public String[] getProjectionAliases(StoreQuery q) {\n-            return EMPTY_STRINGS;\n-        }\n-\n-        public Class[] getProjectionTypes(StoreQuery q) {\n-            return EMPTY_CLASSES;\n-        }\n-\n-        public ClassMetaData[] getAccessPathMetaDatas(StoreQuery q) {\n-            return EMPTY_METAS;\n-        }\n-\n-        public int getOperation(StoreQuery q) {\n-            return OP_SELECT;\n-        }\n-\n-        public boolean isAggregate(StoreQuery q) {\n-            return false;\n-        }\n-\n-        public boolean hasGrouping(StoreQuery q) {\n-            return false;\n-        }\n-\n-        public LinkedMap getParameterTypes(StoreQuery q) {\n-            return EMPTY_PARAMS;\n-        }\n-\n-        public Class getResultClass(StoreQuery q) {\n-            return null;\n-        }\n-\n-        public Map getUpdates(StoreQuery q) {\n-            return null;\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.kernel;\r\n+\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.collections.map.LinkedMap;\r\n+import org.apache.openjpa.kernel.exps.AggregateListener;\r\n+import org.apache.openjpa.kernel.exps.FilterListener;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.UnsupportedException;\r\n+\r\n+/**\r\n+ * Abstract {@link StoreQuery} that implements most methods as no-ops.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0\r\n+ */\r\n+public abstract class AbstractStoreQuery\r\n+    implements StoreQuery {\r\n+\r\n+    protected QueryContext ctx = null;\r\n+   \r\n+    public QueryContext getContext() {\r\n+        return ctx;\r\n+    }\r\n+\r\n+    public void setContext(QueryContext ctx) {\r\n+        this.ctx = ctx;\r\n+    }\r\n+\r\n+    public boolean setQuery(Object query) {\r\n+        return false;\r\n+    }\r\n+\r\n+    public FilterListener getFilterListener(String tag) {\r\n+        return null;\r\n+    }\r\n+\r\n+    public AggregateListener getAggregateListener(String tag) {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object newCompilationKey() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object newCompilation() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public void populateFromCompilation(Object comp) {\r\n+    }\r\n+\r\n+    public void invalidateCompilation() {\r\n+    }\r\n+\r\n+    public boolean supportsDataStoreExecution() {\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean supportsInMemoryExecution() {\r\n+        return false;\r\n+    }\r\n+\r\n+    public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean supportsAbstractExecutors() {\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean requiresCandidateType() {\r\n+        return true;\r\n+    }\r\n+\r\n+    public boolean requiresParameterDeclarations() {\r\n+        return true;\r\n+    }\r\n+\r\n+    public boolean supportsParameterDeclarations() {\r\n+        return true;\r\n+    }\r\n+\r\n+    public Object evaluate(Object value, Object ob, Object[] params,\r\n+        OpenJPAStateManager sm) {\r\n+        throw new UnsupportedException();\r\n+    }\r\n+\r\n+    /**\r\n+     * Abstract {@link Executor} that implements most methods as no-ops.\r\n+     */\r\n+    public static abstract class AbstractExecutor\r\n+        implements Executor {\r\n+\r\n+        public Number executeDelete(StoreQuery q, Object[] params) {\r\n+            return q.getContext().deleteInMemory(q, this, params);\r\n+        }\r\n+\r\n+        public Number executeUpdate(StoreQuery q, Object[] params) {\r\n+            return q.getContext().updateInMemory(q, this, params);\r\n+        }\r\n+\r\n+        public String[] getDataStoreActions(StoreQuery q, Object[] params,\r\n+            Range range) {\r\n+            return EMPTY_STRINGS;\r\n+        }\r\n+\r\n+        public void validate(StoreQuery q) {\r\n+        }\r\n+\r\n+        public void getRange(StoreQuery q, Object[] params, Range range) {\r\n+        }\r\n+\r\n+        public Object getOrderingValue(StoreQuery q, Object[] params,\r\n+            Object resultObject, int orderIndex) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean[] getAscending(StoreQuery q) {\r\n+            return EMPTY_BOOLEANS;\r\n+        }\r\n+\r\n+        public boolean isPacking(StoreQuery q) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public String getAlias(StoreQuery q) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public String[] getProjectionAliases(StoreQuery q) {\r\n+            return EMPTY_STRINGS;\r\n+        }\r\n+\r\n+        public Class[] getProjectionTypes(StoreQuery q) {\r\n+            return EMPTY_CLASSES;\r\n+        }\r\n+\r\n+        public ClassMetaData[] getAccessPathMetaDatas(StoreQuery q) {\r\n+            return EMPTY_METAS;\r\n+        }\r\n+\r\n+        public int getOperation(StoreQuery q) {\r\n+            return OP_SELECT;\r\n+        }\r\n+\r\n+        public boolean isAggregate(StoreQuery q) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean hasGrouping(StoreQuery q) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public LinkedMap getParameterTypes(StoreQuery q) {\r\n+            return EMPTY_PARAMS;\r\n+        }\r\n+\r\n+        public Class getResultClass(StoreQuery q) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Map getUpdates(StoreQuery q) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"fa9e0f2a78081749d78b1aadbce325014746b8f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -86,7 +86,8 @@ protected StateManagerImpl persist(AttachManager manager,\n         PersistenceCapable newInstance;\n         if (!manager.getCopyNew())\n             newInstance = pc;\n-        else if (appId == null) // datastore identity\n+        else if (appId == null)\n+            // datastore identity or application identity with generated keys\n             newInstance = pc.pcNewInstance(null, false);\n         else // application identity: use existing fields\n             newInstance = pc.pcNewInstance(null, appId, false);\n@@ -269,7 +270,8 @@ protected Object getReference(AttachManager manager, Object toAttach,\n         if (toAttach == null)\n             return null;\n \n-        if (manager.getBroker().isPersistent(toAttach)) {\n+        if (manager.getBroker().isNew(toAttach)\n+            || manager.getBroker().isPersistent(toAttach)) {\n             return toAttach;\n         } else if (manager.getBroker().isDetached(toAttach)) {\n             Object oid = manager.getDetachedObjectId(toAttach);"},{"sha":"60ac73f3c193e4b87585ad1342d99f3d35f66f02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":41,"deletions":14,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -237,6 +237,7 @@\n     private int _lifeCallbackMode = 0;\r\n \r\n     private transient boolean _initializeWasInvoked = false;\r\n+    private LinkedList _fcs;\r\n \r\n     /**\r\n      * Set the persistence manager's authentication. This is the first\r\n@@ -385,6 +386,20 @@ public FetchConfiguration getFetchConfiguration() {\n         return _fc;\r\n     }\r\n \r\n+    public FetchConfiguration pushFetchConfiguration() {\r\n+        if (_fcs == null)\r\n+            _fcs = new LinkedList();\r\n+        _fcs.add(_fc);\r\n+        _fc = (FetchConfiguration) _fc.clone();\r\n+        return _fc;\r\n+    }\r\n+\r\n+    public void popFetchConfiguration() {\r\n+        if (_fcs == null || _fcs.isEmpty())\r\n+            throw new UserException(_loc.get(\"fetch-configuration-stack-empty\"));\r\n+        _fc = (FetchConfiguration) _fcs.removeLast();\r\n+    }\r\n+\r\n     public int getConnectionRetainMode() {\r\n         return _connRetainMode;\r\n     }\r\n@@ -1127,6 +1142,9 @@ public Object newObjectId(Class cls, Object val) {\n             default:\r\n                 throw new UserException(_loc.get(\"meta-unknownid\", cls));\r\n             }\r\n+        } catch (IllegalArgumentException iae) {\r\n+        \tthrow new UserException(_loc.get(\"bad-id-value\", val,\r\n+                val.getClass().getName(), cls)).setCause(iae);\r\n         } catch (OpenJPAException ke) {\r\n             throw ke;\r\n         } catch (ClassCastException cce) {\r\n@@ -2718,23 +2736,23 @@ OpenJPAStateManager copy(OpenJPAStateManager copy, PCState state) {\n             endOperation();\r\n         }\r\n     }\r\n-\r\n+    \r\n     public void refreshAll(Collection objs, OpCallbacks call) {\r\n-        if (objs.isEmpty())\r\n+        if (objs == null || objs.isEmpty())\r\n             return;\r\n \r\n         beginOperation(true);\r\n         try {\r\n             assertNontransactionalRead();\r\n \r\n-            for (Iterator itr = objs.iterator(); itr.hasNext();)\r\n+            for (Iterator itr = objs.iterator(); itr.hasNext();) \r\n                 gatherCascadeRefresh(itr.next(), call);\r\n             if (_operating.isEmpty())\r\n-                return;\r\n+            \treturn;\r\n             if (_operating.size() == 1)\r\n-                refreshInternal(_operating.iterator().next(), call);\r\n+            \trefreshInternal(_operating.iterator().next(), call);\r\n             else\r\n-                refreshInternal(_operating, call);\r\n+            \trefreshInternal(_operating, call);\r\n         } finally {\r\n             endOperation();\r\n         }\r\n@@ -2750,11 +2768,11 @@ public void refresh(Object obj, OpCallbacks call) {\n \r\n             gatherCascadeRefresh(obj, call);\r\n             if (_operating.isEmpty())\r\n-                return;\r\n+            \treturn;\r\n             if (_operating.size() == 1)\r\n-                refreshInternal(_operating.iterator().next(), call);\r\n+            \trefreshInternal(_operating.iterator().next(), call);\r\n             else\r\n-                refreshInternal(_operating, call);\r\n+            \trefreshInternal(_operating, call);\r\n         } finally {\r\n             endOperation();\r\n         }\r\n@@ -2786,6 +2804,8 @@ void gatherCascadeRefresh(Object obj, OpCallbacks call) {\n      * cascade-refresh relations from the user-given instances.\r\n      */\r\n     protected void refreshInternal(Collection objs, OpCallbacks call) {\r\n+    \tif (objs == null || objs.isEmpty())\r\n+    \t\treturn;\r\n         List exceps = null;\r\n         try {\r\n             // collect instances that need a refresh\r\n@@ -2804,11 +2824,11 @@ protected void refreshInternal(Collection objs, OpCallbacks call) {\n                         continue;\r\n \r\n                     if (sm != null) {\r\n-                        if (sm.isDetached())\r\n+                        if (sm.isDetached()) \r\n                             throw newDetachedException(obj, \"refresh\");\r\n                         else if (sm.beforeRefresh(true)) {\r\n-                            if (load == null)\r\n-                                load = new ArrayList(objs.size());\r\n+                        \tif (load == null)\r\n+                        \t\tload = new ArrayList(objs.size());\r\n                             load.add(sm);\r\n                         }\r\n                     } else if (assertPersistenceCapable(obj).pcIsDetached()\r\n@@ -2890,10 +2910,11 @@ else if (sm.beforeRefresh(false)) {\n             throw new GeneralException(re);\r\n         }\r\n     }\r\n-\r\n+    \r\n+    \r\n     public void retrieveAll(Collection objs, boolean dfgOnly,\r\n         OpCallbacks call) {\r\n-        if (objs.isEmpty())\r\n+        if (objs == null || objs.isEmpty())\r\n             return;\r\n         if (objs.size() == 1) {\r\n             retrieve(objs.iterator().next(), dfgOnly, call);\r\n@@ -3527,6 +3548,10 @@ private Seq getSequence(ClassMetaData meta, FieldMetaData fmd) {\n                 return UUIDHexSeq.getInstance();\r\n             case ValueStrategies.UUID_STRING:\r\n                 return UUIDStringSeq.getInstance();\r\n+            case ValueStrategies.UUID_TYPE4_HEX:\r\n+                return UUIDType4HexSeq.getInstance();\r\n+            case ValueStrategies.UUID_TYPE4_STRING:\r\n+                return UUIDType4StringSeq.getInstance();\r\n             case ValueStrategies.SEQUENCE:\r\n                 SequenceMetaData smd = (fmd == null)\r\n                     ? meta.getIdentitySequenceMetaData()\r\n@@ -4122,6 +4147,8 @@ protected void free() {\n         if (_log.isTraceEnabled())\r\n             _closedException = new IllegalStateException();\r\n \r\n+        _factory.releaseBroker(this);\r\n+\r\n         if (err != null)\r\n             throw err;\r\n     }\r"},{"sha":"8e97520f1fd1b2072511a3d2f8f64b3922b979e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -122,6 +122,22 @@ public FetchConfiguration getFetchConfiguration() {\n         }\n     }\n \n+    public FetchConfiguration pushFetchConfiguration() {\n+        try {\n+            return _broker.pushFetchConfiguration();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void popFetchConfiguration() {\n+        try {\n+            _broker.popFetchConfiguration();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public ClassLoader getClassLoader() {\n         try {\n             return _broker.getClassLoader();"},{"sha":"b821825c8b4aa5e713249658d476416517d7f007","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -67,6 +67,7 @@\n     private final OpCallbacks _call;\n     private final boolean _failFast;\n     private boolean _flushed = false;\n+    private boolean _flushBeforeDetach;\n \n     // if we're not detaching full, we need to track all detached objects;\n     // if we are, then we use a special field manager for more efficient\n@@ -82,7 +83,10 @@ static boolean preSerialize(StateManagerImpl sm) {\n         if (!sm.isPersistent())\n             return false;\n \n-        flushDirty(sm);\n+        if (sm.getBroker().getConfiguration().getCompatibilityInstance()\n+                .getFlushBeforeDetach()) {\n+            flushDirty(sm);\n+        }\n \n         ClassMetaData meta = sm.getMetaData();\n         boolean setState = meta.getDetachedState() != null\n@@ -270,6 +274,9 @@ public DetachManager(BrokerImpl broker, boolean full, OpCallbacks call) {\n             _detached = new IdentityMap();\n             _fullFM = null;\n         }\n+        _flushBeforeDetach =\n+                broker.getConfiguration().getCompatibilityInstance()\n+                        .getFlushBeforeDetach();\n     }\n \n     /**\n@@ -415,8 +422,14 @@ private Object detachInternal(Object toDetach) {\n         _broker.fireLifecycleEvent(toDetach, null, sm.getMetaData(),\n             LifecycleEvent.BEFORE_DETACH);\n \n-        // any dirty instances cause a flush to occur\n-        _flushed = _flushed || flushDirty(sm);\n+        if(! _flushed)  {\n+            if(_flushBeforeDetach) {\n+                // any dirty instances cause a flush to occur\n+                flushDirty(sm);\n+            }\n+            _flushed = true;\n+        }\n+        \n         BitSet fields = new BitSet();\n         preDetach(_broker, sm, fields);\n "},{"sha":"5476ee05ded870358111d5a614290f3b3e30e2ac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -49,7 +49,7 @@\n     extends AttachStrategy\r\n     implements OpenJPAStateManager, Serializable {\r\n \r\n-    private static final long serialVersionUID = 6092198373388527556L;\r\n+    private static final long serialVersionUID = 4112223665584731100L;\r\n \r\n     private static final Localizer _loc = Localizer.forPackage\r\n         (DetachedStateManager.class);\r"},{"sha":"9363edb9daf678d36f7e7841b05435fb08037481","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":38,"deletions":10,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -82,6 +82,9 @@\n         public Set rootClasses;\n         public Set rootInstances;\n         public Map hints = null;\n+        \n+        public boolean fetchGroupContainsDefault = false;\n+        public boolean fetchGroupContainsAll = false;\n     }\n \n     private final ConfigurationState _state;\n@@ -92,7 +95,7 @@\n     private boolean _load = true;\n     private int _availableRecursion;\n     private int _availableDepth;\n-\n+    \n     public FetchConfigurationImpl() {\n         this(null);\n     }\n@@ -221,10 +224,22 @@ public Set getFetchGroups() {\n \n     public boolean hasFetchGroup(String group) {\n         return _state.fetchGroups != null\n-            && (_state.fetchGroups.contains(group)\n-            || _state.fetchGroups.contains(FetchGroup.NAME_ALL));\n+            && (hasFetchGroupAll()\n+            ||  _state.fetchGroups.contains(group));\n     }\n \n+    public boolean hasFetchGroupDefault()\n+    {\n+        // Fetch group All includes fetch group Default by definition\n+        return _state.fetchGroupContainsDefault || \n+            _state.fetchGroupContainsAll;\n+    }\n+    \n+    public boolean hasFetchGroupAll()\n+    {\n+        return _state.fetchGroupContainsAll;\n+    }\n+    \n     public FetchConfiguration addFetchGroup(String name) {\n         if (StringUtils.isEmpty(name))\n             throw new UserException(_loc.get(\"null-fg\"));\n@@ -234,6 +249,10 @@ public FetchConfiguration addFetchGroup(String name) {\n             if (_state.fetchGroups == null)\n                 _state.fetchGroups = new HashSet();\n             _state.fetchGroups.add(name);\n+            if (FetchGroup.NAME_ALL.equals(name))\n+                _state.fetchGroupContainsAll = true;\n+            else if (FetchGroup.NAME_DEFAULT.equals(name))\n+                _state.fetchGroupContainsDefault = true;\n         } finally {\n             unlock();\n         }\n@@ -251,8 +270,13 @@ public FetchConfiguration addFetchGroups(Collection groups) {\n     public FetchConfiguration removeFetchGroup(String group) {\n         lock();\n         try {\n-            if (_state.fetchGroups != null)\n+            if (_state.fetchGroups != null) {\n                 _state.fetchGroups.remove(group);\n+                if (FetchGroup.NAME_ALL.equals(group))\n+                    _state.fetchGroupContainsAll = false;\n+                else if (FetchGroup.NAME_DEFAULT.equals(group))\n+                    _state.fetchGroupContainsDefault = false;\n+            }\n         } finally {\n             unlock();\n         }\n@@ -262,8 +286,9 @@ public FetchConfiguration removeFetchGroup(String group) {\n     public FetchConfiguration removeFetchGroups(Collection groups) {\n         lock();\n         try {\n-            if (_state.fetchGroups != null)\n-                _state.fetchGroups.removeAll(groups);\n+            if (_state.fetchGroups != null && groups != null)\n+                for (Object group : groups)\n+                    removeFetchGroup(group.toString());\n         } finally {\n             unlock();\n         }\n@@ -273,8 +298,11 @@ public FetchConfiguration removeFetchGroups(Collection groups) {\n     public FetchConfiguration clearFetchGroups() {\n         lock();\n         try {\n-            if (_state.fetchGroups != null)\n+            if (_state.fetchGroups != null) {\n                 _state.fetchGroups.clear();\n+                _state.fetchGroupContainsAll = false;\n+                _state.fetchGroupContainsDefault = true;\n+            }\n         } finally {\n             unlock();\n         }\n@@ -562,9 +590,9 @@ public FetchConfiguration traverse(FieldMetaData fm) {\n      * Whether our configuration state includes the given field.\n      */\n     private boolean includes(FieldMetaData fmd) {\n-        if ((fmd.isInDefaultFetchGroup() \n-            && hasFetchGroup(FetchGroup.NAME_DEFAULT))\n-            || hasFetchGroup(FetchGroup.NAME_ALL)\n+        if (hasFetchGroupAll()\n+            || (fmd.isInDefaultFetchGroup() \n+            && hasFetchGroupDefault())\n             || hasField(fmd.getFullName(false)))\n             return true;\n         String[] fgs = fmd.getCustomFetchGroups();"},{"sha":"36371784c0363c4151b8eeee698d1b84d04b7d15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ManagedCache.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -71,7 +71,7 @@ public StateManagerImpl getById(Object oid, boolean allowNew) {\n         if (sm != null) {\r\n             // if it's a new instance, we know it's the only match, because\r\n             // other pers instances override new instances in _cache\r\n-            if (sm.isNew())\r\n+            if (sm.isNew() && !sm.isDeleted())\r\n                 return (allowNew) ? sm : null;\r\n             if (!allowNew || !sm.isDeleted())\r\n                 return sm;\r"},{"sha":"b23f5b90bb923c46a1af6e0559ff852a0f120f46","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.kernel.exps.FilterListener;\r\n import org.apache.openjpa.kernel.exps.Constant;\r\n import org.apache.openjpa.kernel.exps.Literal;\r\n+import org.apache.openjpa.kernel.exps.Path;\r\n import org.apache.openjpa.kernel.exps.Val;\r\n import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.rop.EagerResultList;\r\n@@ -1047,7 +1048,7 @@ public Number updateInMemory(StoreQuery q, StoreQuery.Executor executor,\n \r\n             int size = 0;\r\n             for (Iterator i = ((Collection) o).iterator(); i.hasNext(); size++)\r\n-                updateInMemory(i.next(), params);\r\n+                updateInMemory(i.next(), params, q);\r\n             return Numbers.valueOf(size);\r\n         } catch (OpenJPAException ke) {\r\n             throw ke;\r\n@@ -1062,11 +1063,13 @@ public Number updateInMemory(StoreQuery q, StoreQuery.Executor executor,\n      * @param ob the persistent instance to change\r\n      * @param params the parameters passed to the query\r\n      */\r\n-    private void updateInMemory(Object ob, Object[] params) {\r\n+    private void updateInMemory(Object ob, Object[] params, StoreQuery q) {\r\n         for (Iterator it = getUpdates().entrySet().iterator();\r\n             it.hasNext();) {\r\n             Map.Entry e = (Map.Entry) it.next();\r\n-            FieldMetaData fmd = (FieldMetaData) e.getKey();\r\n+            Path path = (Path) e.getKey();\r\n+            FieldMetaData fmd = (FieldMetaData) path.last();\r\n+            OpenJPAStateManager sm = _broker.getStateManager(ob);\r\n \r\n             Object val;\r\n             Object value = e.getValue();\r\n@@ -1078,10 +1081,13 @@ private void updateInMemory(Object ob, Object[] params) {\n             } else if (value instanceof Constant) {\r\n                 val = ((Constant) value).getValue(params);\r\n             } else {\r\n-                throw new UserException(_loc.get(\"only-update-primitives\"));\r\n+                try {\r\n+                    val = q.evaluate(value, ob, params, sm);\r\n+                } catch (UnsupportedException e1) {\r\n+                    throw new UserException(_loc.get(\"fail-to-get-update-value\"));\r\n+                }\r\n             }\r\n \r\n-            OpenJPAStateManager sm = _broker.getStateManager(ob);\r\n             int i = fmd.getIndex();\r\n             PersistenceCapable into = ImplHelper.toPersistenceCapable(ob,\r\n                 _broker.getConfiguration());\r"},{"sha":"46eb28340b42973fdc6eef761c5005ac85f48ae6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -311,7 +311,9 @@ protected void initialize(PersistenceCapable pc, PCState state) {\n \n         // initialize our state and add ourselves to the broker's cache\n         setPCState(state);\n-        _broker.setStateManager(_id, this, BrokerImpl.STATUS_INIT);\n+        if (_broker.getStateManagerImplById(getObjectId(), false) == null) {\n+        \t_broker.setStateManager(_id, this, BrokerImpl.STATUS_INIT);\n+        }\n         if (state == PCState.PNEW)\n             fireLifecycleEvent(LifecycleEvent.AFTER_PERSIST);\n \n@@ -1448,6 +1450,7 @@ public Object getPCPrimaryKey(Object oid, int field) {\n             return null;\n \n         ClassMetaData relmeta = fmd.getDeclaredTypeMetaData();\n+        pk = ApplicationIds.wrap(relmeta, pk);\n         if (relmeta.getIdentityType() == ClassMetaData.ID_DATASTORE\n             && fmd.getObjectIdFieldTypeCode() == JavaTypes.LONG)\n             pk = _broker.getStoreManager().newDataStoreId(pk, relmeta);\n@@ -2658,6 +2661,12 @@ void saveFields(boolean immediate) {\n             for (int i = 0, len = _loaded.length(); i < len; i++)\n                 saveField(i);\n             _flags &= ~FLAG_SAVE;\n+            // OPENJPA-659\n+            // record a saved field manager even if no field is currently loaded\n+            // as existence of a SaveFieldManager is critical for a dirty check\n+            if (_saved == null)\n+            \t_saved = new SaveFieldManager(this, getPersistenceCapable(), \n+            \t\t\t\t_dirty);\n         }\n     }\n "},{"sha":"1d8d9d500463cae1353ca19afb0f1576a72b1127","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -61,6 +61,27 @@\n      */\n     public FetchConfiguration getFetchConfiguration();\n \n+    /**\n+     * Pushes a new fetch configuration that inherits from the current\n+     * fetch configuration onto a stack, and makes the new configuration\n+     * the active one.\n+     *\n+     * @since 1.1.0\n+     * @return the new fetch configuration\n+     */\n+    public FetchConfiguration pushFetchConfiguration();\n+\n+    /**\n+     * Pops the fetch configuration from the top of the stack, making the\n+     * next one down the active one. This returns void to avoid confusion,\n+     * since fetch configurations tend to be used in method-chaining\n+     * patterns often.\n+     *\n+     * @since 1.1.0\n+     * @throws UserException if the fetch configuration stack is empty\n+     */\n+    public void popFetchConfiguration();\n+\n     /**\n      * Return the current thread's class loader at the time this context\n      * was obtained."},{"sha":"5a690e83221aca9fa827ef5754243db26b8c12a8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","status":"modified","additions":325,"deletions":322,"changes":647,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -1,322 +1,325 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.kernel;\n-\n-import java.io.Serializable;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n-import org.apache.commons.collections.map.LinkedMap;\n-import org.apache.openjpa.kernel.exps.AggregateListener;\n-import org.apache.openjpa.kernel.exps.Constant;\n-import org.apache.openjpa.kernel.exps.FilterListener;\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.FieldMetaData;\n-\n-/**\n- * Component that executes queries against the datastore. For\n- * expression-based queries, consider subclassing\n- * {@link ExpressionStoreManagerQuery}.\n- *\n- * @author Abe White\n- * @since 0.4.0\n- */\n-public interface StoreQuery\n-    extends QueryOperations, Serializable {\n-\n-    // linkedmap doesn't allow a size of 0, so use 1\n-    public static final LinkedMap EMPTY_PARAMS = new LinkedMap(1, 1F);\n-    public static final ClassMetaData[] EMPTY_METAS = new ClassMetaData[0];\n-    public static final String[] EMPTY_STRINGS = new String[0];\n-    public static final Object[] EMPTY_OBJECTS = new Object[0];\n-    public static final Class[] EMPTY_CLASSES = new Class[0];\n-    public static final boolean[] EMPTY_BOOLEANS = new boolean[0];\n-\n-    /**\n-     * Return the query context that has been set.\n-     */\n-    public QueryContext getContext();\n-\n-    /**\n-     * Set the current query context. This will be called before use.\n-     */\n-    public void setContext(QueryContext ctx);\n-\n-    /**\n-     * This is invoked when the user or a facade creates a new query with\n-     * an object that the system does not recognize. Return true if\n-     * the object is recognized by the store, false otherwise.\n-     */\n-    public boolean setQuery(Object query);\n-\n-    /**\n-     * Return the standard filter listener for the given tag, or null.\n-     */\n-    public FilterListener getFilterListener(String tag);\n-\n-    /**\n-     * Return the standard filter listener for the given tag, or null.\n-     */\n-    public AggregateListener getAggregateListener(String tag);\n-\n-    /**\n-     * Create a new key for caching compiled query information. May be null.\n-     */\n-    public Object newCompilationKey();\n-\n-    /**\n-     * Create a new compilation for this query. May be null.\n-     */\n-    public Object newCompilation();\n-\n-    /**\n-     * Populate internal data from compilation.\n-     */\n-    public void populateFromCompilation(Object comp);\n-\n-    /**\n-     * Invalidate any internal compilation state.\n-     */\n-    public void invalidateCompilation();\n-\n-    /**\n-     * True if this query supports datastore execution, false if it\n-     * can only run in memory.\n-     */\n-    public boolean supportsDataStoreExecution();\n-\n-    /**\n-     * True if this query supports in-memory execution, false if it\n-     * can only run against the datastore.\n-     */\n-    public boolean supportsInMemoryExecution();\n-\n-    /**\n-     * Return an executor for in-memory execution of this query.\n-     * Executors must be cachable and thread safe. If this class returns\n-     * true from {@link #supportsAbstractExecutors}, the given metadata\n-     * will always be for the candidate class of this query, or possibly\n-     * null if the candidate class is not itself persistence capable (like\n-     * an interface or abstract base class). Otherwise, the given type will\n-     * be a mapped class.\n-     *\n-     * @param subs whether to include dependent mapped subclasses in the\n-     * results; independent subclasses should never be included\n-     */\n-    public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs);\n-\n-    /**\n-     * Return an executor for datastore execution of this query.\n-     * Executors must be cachable and thread safe. If this class returns\n-     * true from {@link #supportsAbstractExecutors}, the given metadata\n-     * will always be for the candidate class of this query, or possibly\n-     * null if the candidate class is not itself persistence capable (like\n-     * an interface or abstract base class). Otherwise, the given type will\n-     * be a mapped class.\n-     *\n-     * @param subs whether to include dependent mapped subclasses in the\n-     * results; independent subclasses should never be included\n-     */\n-    public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs);\n-\n-    /**\n-     * Return true if this query supports execution against abstract or\n-     * interface types. Returns false by default, meaning we will only\n-     * request executors for persistent classes. In this case, we will\n-     * automatically combine the results of the executors for all\n-     * implementing classes if we execute a query for an interface for\n-     * abstract type.\n-     */\n-    public boolean supportsAbstractExecutors();\n-\n-    /**\n-     * Whether this query requires a candidate class.\n-     */\n-    public boolean requiresCandidateType();\n-\n-    /**\n-     * Whether this query requires parameters to be declared.\n-     */\n-    public boolean requiresParameterDeclarations();\n-\n-    /**\n-     * Whether this query supports declared parameters.\n-     */\n-    public boolean supportsParameterDeclarations();\n-\n-    /**\n-     * A query result range.\n-     */\n-    public static class Range {\n-        public long start = 0L;\n-        public long end = Long.MAX_VALUE;\n-        public boolean lrs = false;\n-\n-        public Range() {\n-        }\n-\n-        public Range(long start, long end) {\n-            this.start = start;\n-            this.end = end;\n-        }\n-    }\n-\n-    /**\n-     * An executor provides a uniform interface to the mechanism for executing\n-     * either an in-memory or datastore query. In the common case, the\n-     * {@link #executeQuery} method will be called before other methods,\n-     * though this is not guaranteed.\n-     *\n-     * @author Marc Prud'hommeaux\n-     */\n-    public static interface Executor {\n-\n-        /**\n-         * Return the result of executing this query with the given parameter\n-         * values. If this query is a projection and this executor does not\n-         * pack results itself, each element of the returned result object\n-         * provider should be an object array containing the projection values.\n-         *\n-         * @param lrs true if the query result should be treated as a\n-         * large result set, assuming the query is not an\n-         * aggregate and does not have grouping\n-         * @see #isPacking\n-         */\n-        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n-            Range range);\n-\n-        /**\n-         * Deleted the objects that result from the execution of the\n-         * query, retuning the number of objects that were deleted.\n-         */\n-        public Number executeDelete(StoreQuery q, Object[] params);\n-\n-        /**\n-         * Updates the objects that result from the execution of the\n-         * query, retuning the number of objects that were updated.\n-         */\n-        public Number executeUpdate(StoreQuery q, Object[] params);\n-\n-        /**\n-         * Return a description of the commands that will be sent to\n-         * the datastore in order to execute the query.\n-         */\n-        public String[] getDataStoreActions(StoreQuery q, Object[] params,\n-            Range range);\n-\n-        /**\n-         * Validate components of query.\n-         */\n-        public void validate(StoreQuery q);\n-\n-        /**\n-         * Mutate the given range to set any range information stored in \n-         * the query string and/or parameters.\n-         */\n-        public void getRange(StoreQuery q, Object[] params, Range range);\n-\n-        /**\n-         * Extract the value of the <code>orderIndex</code>th ordering\n-         * expression in {@link Query#getOrderingClauses} from the\n-         * given result object. The result object will be an object from\n-         * the result object provider returned from {@link #executeQuery}.\n-         * This method is used when several result lists have to be merged\n-         * in memory. If this exeuctor's parent query supports executors on\n-         * abstract or interface classes, this method will not be used.\n-         *\n-         * @see StoreQuery#supportsAbstractExecutors\n-         */\n-        public Object getOrderingValue(StoreQuery q, Object[] params,\n-            Object resultObject, int orderIndex);\n-\n-        /**\n-         * Return the ordering direction for all ordering clauses, or empty\n-         * array if none.\n-         */\n-        public boolean[] getAscending(StoreQuery q);\n-\n-        /**\n-         * Return true if this executor packs projections into the result\n-         * class itself. Executors for query languages that allow projections\n-         * without result clauses must return true and perform the result\n-         * packing themselves.\n-         */\n-        public boolean isPacking(StoreQuery q);\n-\n-        /**\n-         * If this is not a projection but the candidate results are placed\n-         * into a result class with an alias, return that alias.\n-         */\n-        public String getAlias(StoreQuery q);\n-\n-        /**\n-         * Return the alias for each projection element, or empty array\n-         * if not a projection.\n-         */\n-        public String[] getProjectionAliases(StoreQuery q);\n-\n-        /**\n-         * Return the expected types of the projections used by this query,\n-         * or an empty array if not a projection.\n-         */\n-        public Class[] getProjectionTypes(StoreQuery q);\n-\n-        /**\n-         * Return an array of all persistent classes used in this query, or\n-         * empty array if unknown.\n-         */\n-        public ClassMetaData[] getAccessPathMetaDatas(StoreQuery q);\n-\n-        /**\n-         * Returns the operation this executor is meant to execute.\n-         *\n-         * @see QueryOperations\n-         */\n-        public int getOperation(StoreQuery q);\n-\n-        /**\n-         * Return true if the compiled query is an aggregate.\n-         */\n-        public boolean isAggregate(StoreQuery q);\n-\n-        /**\n-         * Whether the compiled query has grouping.\n-         */\n-        public boolean hasGrouping(StoreQuery q);\n-\n-        /**\n-         * Return a map of parameter names to types. The returned\n-         * {@link Map#entrySet}'s {@link Iterator} must return values in the\n-         * order in which they were declared or used.\n-         */\n-        public LinkedMap getParameterTypes(StoreQuery q);\n-\n-        /**\n-         * Returns the result class, if any.\n-         */\n-        public Class getResultClass(StoreQuery q);\n-\n-        /**\n-         * Return a map of {@link FieldMetaData} to update\n-\t\t * {@link Constant}s, in cases where this query is for a bulk update.\n-\t \t */\n-\t\tpublic Map getUpdates (StoreQuery q);\n-\t}\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.kernel;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.collections.map.LinkedMap;\r\n+import org.apache.openjpa.kernel.exps.AggregateListener;\r\n+import org.apache.openjpa.kernel.exps.Constant;\r\n+import org.apache.openjpa.kernel.exps.FilterListener;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+\r\n+/**\r\n+ * Component that executes queries against the datastore. For\r\n+ * expression-based queries, consider subclassing\r\n+ * {@link ExpressionStoreManagerQuery}.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 0.4.0\r\n+ */\r\n+public interface StoreQuery\r\n+    extends QueryOperations, Serializable {\r\n+\r\n+    // linkedmap doesn't allow a size of 0, so use 1\r\n+    public static final LinkedMap EMPTY_PARAMS = new LinkedMap(1, 1F);\r\n+    public static final ClassMetaData[] EMPTY_METAS = new ClassMetaData[0];\r\n+    public static final String[] EMPTY_STRINGS = new String[0];\r\n+    public static final Object[] EMPTY_OBJECTS = new Object[0];\r\n+    public static final Class[] EMPTY_CLASSES = new Class[0];\r\n+    public static final boolean[] EMPTY_BOOLEANS = new boolean[0];\r\n+\r\n+    /**\r\n+     * Return the query context that has been set.\r\n+     */\r\n+    public QueryContext getContext();\r\n+\r\n+    /**\r\n+     * Set the current query context. This will be called before use.\r\n+     */\r\n+    public void setContext(QueryContext ctx);\r\n+\r\n+    /**\r\n+     * This is invoked when the user or a facade creates a new query with\r\n+     * an object that the system does not recognize. Return true if\r\n+     * the object is recognized by the store, false otherwise.\r\n+     */\r\n+    public boolean setQuery(Object query);\r\n+\r\n+    /**\r\n+     * Return the standard filter listener for the given tag, or null.\r\n+     */\r\n+    public FilterListener getFilterListener(String tag);\r\n+\r\n+    /**\r\n+     * Return the standard filter listener for the given tag, or null.\r\n+     */\r\n+    public AggregateListener getAggregateListener(String tag);\r\n+\r\n+    /**\r\n+     * Create a new key for caching compiled query information. May be null.\r\n+     */\r\n+    public Object newCompilationKey();\r\n+\r\n+    /**\r\n+     * Create a new compilation for this query. May be null.\r\n+     */\r\n+    public Object newCompilation();\r\n+\r\n+    /**\r\n+     * Populate internal data from compilation.\r\n+     */\r\n+    public void populateFromCompilation(Object comp);\r\n+\r\n+    /**\r\n+     * Invalidate any internal compilation state.\r\n+     */\r\n+    public void invalidateCompilation();\r\n+\r\n+    /**\r\n+     * True if this query supports datastore execution, false if it\r\n+     * can only run in memory.\r\n+     */\r\n+    public boolean supportsDataStoreExecution();\r\n+\r\n+    /**\r\n+     * True if this query supports in-memory execution, false if it\r\n+     * can only run against the datastore.\r\n+     */\r\n+    public boolean supportsInMemoryExecution();\r\n+\r\n+    /**\r\n+     * Return an executor for in-memory execution of this query.\r\n+     * Executors must be cachable and thread safe. If this class returns\r\n+     * true from {@link #supportsAbstractExecutors}, the given metadata\r\n+     * will always be for the candidate class of this query, or possibly\r\n+     * null if the candidate class is not itself persistence capable (like\r\n+     * an interface or abstract base class). Otherwise, the given type will\r\n+     * be a mapped class.\r\n+     *\r\n+     * @param subs whether to include dependent mapped subclasses in the\r\n+     * results; independent subclasses should never be included\r\n+     */\r\n+    public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs);\r\n+\r\n+    /**\r\n+     * Return an executor for datastore execution of this query.\r\n+     * Executors must be cachable and thread safe. If this class returns\r\n+     * true from {@link #supportsAbstractExecutors}, the given metadata\r\n+     * will always be for the candidate class of this query, or possibly\r\n+     * null if the candidate class is not itself persistence capable (like\r\n+     * an interface or abstract base class). Otherwise, the given type will\r\n+     * be a mapped class.\r\n+     *\r\n+     * @param subs whether to include dependent mapped subclasses in the\r\n+     * results; independent subclasses should never be included\r\n+     */\r\n+    public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs);\r\n+\r\n+    /**\r\n+     * Return true if this query supports execution against abstract or\r\n+     * interface types. Returns false by default, meaning we will only\r\n+     * request executors for persistent classes. In this case, we will\r\n+     * automatically combine the results of the executors for all\r\n+     * implementing classes if we execute a query for an interface for\r\n+     * abstract type.\r\n+     */\r\n+    public boolean supportsAbstractExecutors();\r\n+\r\n+    /**\r\n+     * Whether this query requires a candidate class.\r\n+     */\r\n+    public boolean requiresCandidateType();\r\n+\r\n+    /**\r\n+     * Whether this query requires parameters to be declared.\r\n+     */\r\n+    public boolean requiresParameterDeclarations();\r\n+\r\n+    /**\r\n+     * Whether this query supports declared parameters.\r\n+     */\r\n+    public boolean supportsParameterDeclarations();\r\n+\r\n+    public Object evaluate(Object value, Object ob, Object[] params, \r\n+        OpenJPAStateManager sm);\r\n+\r\n+    /**\r\n+     * A query result range.\r\n+     */\r\n+    public static class Range {\r\n+        public long start = 0L;\r\n+        public long end = Long.MAX_VALUE;\r\n+        public boolean lrs = false;\r\n+\r\n+        public Range() {\r\n+        }\r\n+\r\n+        public Range(long start, long end) {\r\n+            this.start = start;\r\n+            this.end = end;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * An executor provides a uniform interface to the mechanism for executing\r\n+     * either an in-memory or datastore query. In the common case, the\r\n+     * {@link #executeQuery} method will be called before other methods,\r\n+     * though this is not guaranteed.\r\n+     *\r\n+     * @author Marc Prud'hommeaux\r\n+     */\r\n+    public static interface Executor {\r\n+\r\n+        /**\r\n+         * Return the result of executing this query with the given parameter\r\n+         * values. If this query is a projection and this executor does not\r\n+         * pack results itself, each element of the returned result object\r\n+         * provider should be an object array containing the projection values.\r\n+         *\r\n+         * @param lrs true if the query result should be treated as a\r\n+         * large result set, assuming the query is not an\r\n+         * aggregate and does not have grouping\r\n+         * @see #isPacking\r\n+         */\r\n+        public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\r\n+            Range range);\r\n+\r\n+        /**\r\n+         * Deleted the objects that result from the execution of the\r\n+         * query, retuning the number of objects that were deleted.\r\n+         */\r\n+        public Number executeDelete(StoreQuery q, Object[] params);\r\n+\r\n+        /**\r\n+         * Updates the objects that result from the execution of the\r\n+         * query, retuning the number of objects that were updated.\r\n+         */\r\n+        public Number executeUpdate(StoreQuery q, Object[] params);\r\n+\r\n+        /**\r\n+         * Return a description of the commands that will be sent to\r\n+         * the datastore in order to execute the query.\r\n+         */\r\n+        public String[] getDataStoreActions(StoreQuery q, Object[] params,\r\n+            Range range);\r\n+\r\n+        /**\r\n+         * Validate components of query.\r\n+         */\r\n+        public void validate(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Mutate the given range to set any range information stored in \r\n+         * the query string and/or parameters.\r\n+         */\r\n+        public void getRange(StoreQuery q, Object[] params, Range range);\r\n+\r\n+        /**\r\n+         * Extract the value of the <code>orderIndex</code>th ordering\r\n+         * expression in {@link Query#getOrderingClauses} from the\r\n+         * given result object. The result object will be an object from\r\n+         * the result object provider returned from {@link #executeQuery}.\r\n+         * This method is used when several result lists have to be merged\r\n+         * in memory. If this exeuctor's parent query supports executors on\r\n+         * abstract or interface classes, this method will not be used.\r\n+         *\r\n+         * @see StoreQuery#supportsAbstractExecutors\r\n+         */\r\n+        public Object getOrderingValue(StoreQuery q, Object[] params,\r\n+            Object resultObject, int orderIndex);\r\n+\r\n+        /**\r\n+         * Return the ordering direction for all ordering clauses, or empty\r\n+         * array if none.\r\n+         */\r\n+        public boolean[] getAscending(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return true if this executor packs projections into the result\r\n+         * class itself. Executors for query languages that allow projections\r\n+         * without result clauses must return true and perform the result\r\n+         * packing themselves.\r\n+         */\r\n+        public boolean isPacking(StoreQuery q);\r\n+\r\n+        /**\r\n+         * If this is not a projection but the candidate results are placed\r\n+         * into a result class with an alias, return that alias.\r\n+         */\r\n+        public String getAlias(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return the alias for each projection element, or empty array\r\n+         * if not a projection.\r\n+         */\r\n+        public String[] getProjectionAliases(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return the expected types of the projections used by this query,\r\n+         * or an empty array if not a projection.\r\n+         */\r\n+        public Class[] getProjectionTypes(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return an array of all persistent classes used in this query, or\r\n+         * empty array if unknown.\r\n+         */\r\n+        public ClassMetaData[] getAccessPathMetaDatas(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Returns the operation this executor is meant to execute.\r\n+         *\r\n+         * @see QueryOperations\r\n+         */\r\n+        public int getOperation(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return true if the compiled query is an aggregate.\r\n+         */\r\n+        public boolean isAggregate(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Whether the compiled query has grouping.\r\n+         */\r\n+        public boolean hasGrouping(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return a map of parameter names to types. The returned\r\n+         * {@link Map#entrySet}'s {@link Iterator} must return values in the\r\n+         * order in which they were declared or used.\r\n+         */\r\n+        public LinkedMap getParameterTypes(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Returns the result class, if any.\r\n+         */\r\n+        public Class getResultClass(StoreQuery q);\r\n+\r\n+        /**\r\n+         * Return a map of {@link FieldMetaData} to update\r\n+\t\t * {@link Constant}s, in cases where this query is for a bulk update.\r\n+\t \t */\r\n+\t\tpublic Map getUpdates (StoreQuery q);\r\n+\t}\r\n+}\r"},{"sha":"3051e4b20a48a3b9f28b7d088a6db87541200027","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -50,7 +50,7 @@ public void setType(int type) {\n     }\n \n     public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n-        _last = UUIDGenerator.nextHex();\n+        _last = UUIDGenerator.nextHex(UUIDGenerator.TYPE1);\n         return _last;\n     }\n "},{"sha":"69dcbaf7f33987db0830d55d1636a2cbe002e0f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -50,7 +50,7 @@ public void setType(int type) {\n     }\n \n     public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n-        _last = UUIDGenerator.nextString();\n+        _last = UUIDGenerator.nextString(UUIDGenerator.TYPE1);\n         return _last;\n     }\n "},{"sha":"60b68a6d93fdd2a3abfb6ed6953cf36128c2fbbb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4HexSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import org.apache.openjpa.lib.util.UUIDGenerator;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Sequence for generating 32-character hex Type 4 UUID strings.\n+ *\n+ * @author Jeremy Bauer\n+ */\n+public class UUIDType4HexSeq\n+    implements Seq {\n+\n+    private static final UUIDType4HexSeq _instance = new UUIDType4HexSeq();\n+\n+    private String _last = null;\n+\n+    /**\n+     * Return the singleton instance.\n+     */\n+    public static UUIDType4HexSeq getInstance() {\n+        return _instance;\n+    }\n+\n+    /**\n+     * Hide constructor.\n+     */\n+    private UUIDType4HexSeq() {\n+    }\n+\n+    public void setType(int type) {\n+    }\n+\n+    public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n+        _last = UUIDGenerator.nextHex(UUIDGenerator.TYPE4);\n+        return _last;\n+    }\n+\n+    public synchronized Object current(StoreContext ctx, ClassMetaData meta) {\n+        return _last;\n+    }\n+\n+    public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {\n+    }\n+\n+    public void close() {\n+\t}\n+}\n\\ No newline at end of file"},{"sha":"c03d0ea1d25701eed57610778e8c3763c2e7a09a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDType4StringSeq.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import org.apache.openjpa.lib.util.UUIDGenerator;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Sequence for generating 16-character UUID strings.\n+ *\n+ * @author Jeremy Bauer\n+ */\n+public class UUIDType4StringSeq\n+    implements Seq {\n+\n+    private static final UUIDType4StringSeq _instance = new UUIDType4StringSeq();\n+\n+    private String _last = null;\n+\n+    /**\n+     * Return the singleton instance.\n+     */\n+    public static UUIDType4StringSeq getInstance() {\n+        return _instance;\n+    }\n+\n+    /**\n+     * Hide constructor.\n+     */\n+    private UUIDType4StringSeq() {\n+    }\n+\n+    public void setType(int type) {\n+    }\n+\n+    public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n+        _last = UUIDGenerator.nextString(UUIDGenerator.TYPE4);\n+        return _last;\n+    }\n+\n+    public synchronized Object current(StoreContext ctx, ClassMetaData meta) {\n+        return _last;\n+    }\n+\n+    public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {\n+    }\n+\n+    public void close() {\n+\t}\n+}\n\\ No newline at end of file"},{"sha":"d9277e869e82c00d4b785ed38aba7b9f4690fa15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OptimisticException;\n@@ -69,19 +70,12 @@ protected void provideField(Object toAttach, StateManagerImpl sm,\n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n         ValueMetaData ownerMeta, boolean explicit) {\n-\n-        // VersionAttachStrategy is invoked in the case where no more\n-        // intelligent strategy could be found; let's be more lenient\n-        // about new vs. detached record determination.\n-        if (into == null)\n-            into = findFromDatabase(manager, toAttach);\n-\n         BrokerImpl broker = manager.getBroker();\n         PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n             meta.getRepository().getConfiguration());\n \n         boolean embedded = ownerMeta != null && ownerMeta.isEmbeddedPC();\n-        boolean isNew = !broker.isDetached(pc) && into == null;\n+        boolean isNew = !broker.isDetached(pc);\n         Object version = null;\n         StateManagerImpl sm;\n \n@@ -99,8 +93,11 @@ public Object attach(AttachManager manager, Object toAttach,\n             sm = (StateManagerImpl) broker.embed(into, null, owner, ownerMeta);\n             into = sm.getPersistenceCapable();\n         } else if (isNew) {\n-            sm = persist(manager, pc, meta, ApplicationIds.create(pc, meta),\n-                explicit);\n+            Object oid = null;\n+            if (!isPrimaryKeysGenerated(meta))\n+                oid = ApplicationIds.create(pc, meta);\n+\n+            sm = persist(manager, pc, meta, oid, explicit);\n             into = sm.getPersistenceCapable();\n         } else if (!embedded && into == null) {\n             Object id = getDetachedObjectId(manager, toAttach);\n@@ -380,4 +377,13 @@ protected PersistenceCapable findFromDatabase(AttachManager manager,\n             return null;\n         }\n     }\n+\n+    private boolean isPrimaryKeysGenerated(ClassMetaData meta) {\n+        FieldMetaData[] pks = meta.getPrimaryKeyFields();\n+        for (int i = 0; i < pks.length; i++) {\n+            if (pks[i].getValueStrategy() != ValueStrategies.NONE)\n+                return true;\n+        }\n+        return false;\n+    }\n }"},{"sha":"ed59ba8040dc191acb50e6f0aca243dcb80b7f0a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n import java.util.Collections;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n \n import org.apache.commons.collections.map.LinkedMap;\n@@ -47,7 +47,7 @@\n     /**\n      * Map of {@link FieldMetaData},{@link Value} for update statements.\n      */\n-    public Map updates = Collections.EMPTY_MAP;\n+    public Map<Path, Value> updates = Collections.EMPTY_MAP;\n     public int distinct = DISTINCT_AUTO;\n     public String alias = null;\n     public Value[] projections = EMPTY_VALUES;\n@@ -65,6 +65,7 @@\n     public int operation = QueryOperations.OP_SELECT;\n     public ClassMetaData[] accessPath = StoreQuery.EMPTY_METAS;\n     public String[] fetchPaths = StoreQuery.EMPTY_STRINGS;\n+    public String[] fetchInnerPaths = StoreQuery.EMPTY_STRINGS;\n     public Value[] range = EMPTY_VALUES;\n     private Boolean _aggregate = null;\n \n@@ -85,7 +86,7 @@ public boolean isAggregate() {\n      */\n     public void putUpdate(Path path, Value val) {\n         if (updates == Collections.EMPTY_MAP)\n-            updates = new HashMap();\n+            updates = new LinkedHashMap<Path, Value>();\n         updates.put(path, val);\n     }\n "},{"sha":"1bf5af3824a9c71b765c664b3952dd00dddd5ec5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":29,"deletions":14,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -24,8 +24,8 @@\n import java.math.BigDecimal;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.Set;\n import java.util.Stack;\n import java.util.TreeSet;\n@@ -345,7 +345,7 @@ else if (root().id == JJTUPDATE)\n \n     private void evalGroupingClause(QueryExpressions exps) {\n         // handle GROUP BY clauses\n-        JPQLNode groupByNode = root().findChildByID(JJTGROUPBY, true);\n+        JPQLNode groupByNode = root().findChildByID(JJTGROUPBY, false);\n \n         if (groupByNode == null)\n             return;\n@@ -362,7 +362,7 @@ private void evalGroupingClause(QueryExpressions exps) {\n \n     private void evalHavingClause(QueryExpressions exps) {\n         // handle HAVING clauses\n-        JPQLNode havingNode = root().findChildByID(JJTHAVING, true);\n+        JPQLNode havingNode = root().findChildByID(JJTHAVING, false);\n \n         if (havingNode == null)\n             return;\n@@ -452,20 +452,28 @@ protected Expression evalFetchJoins(QueryExpressions exps) {\n \n         // handle JOIN FETCH\n         Set joins = null;\n+        Set innerJoins = null;\n \n         JPQLNode[] outers = root().findChildrenByID(JJTOUTERFETCHJOIN);\n         for (int i = 0; outers != null && i < outers.length; i++)\n             (joins == null ? joins = new TreeSet() : joins).\n                 add(getPath(onlyChild(outers[i])).last().getFullName(false));\n \n         JPQLNode[] inners = root().findChildrenByID(JJTINNERFETCHJOIN);\n-        for (int i = 0; inners != null && i < inners.length; i++)\n-            (joins == null ? joins = new TreeSet() : joins).\n-                add(getPath(onlyChild(inners[i])).last().getFullName(false));\n+        for (int i = 0; inners != null && i < inners.length; i++) {\n+            String path = getPath(onlyChild(inners[i])).last()\n+                .getFullName(false);\n+            (joins == null ? joins = new TreeSet() : joins).add(path);\n+            (innerJoins == null ? innerJoins = new TreeSet() : innerJoins).\n+                add(path);\n+        }\n \n         if (joins != null)\n             exps.fetchPaths = (String[]) joins.\n                 toArray(new String[joins.size()]);\n+        if (innerJoins != null)\n+            exps.fetchInnerPaths = (String[]) innerJoins.\n+                toArray(new String[innerJoins.size()]);\n \n         return filter;\n     }\n@@ -475,7 +483,9 @@ protected void evalSetClause(QueryExpressions exps) {\n         JPQLNode[] nodes = root().findChildrenByID(JJTUPDATEITEM);\n         for (int i = 0; nodes != null && i < nodes.length; i++) {\n             Path path = getPath(firstChild(nodes[i]));\n-            Value val = getValue(onlyChild(lastChild(nodes[i])));\n+            JPQLNode lastChild = lastChild(nodes[i]);\n+            Value val = (lastChild.children == null) \n+                      ? null : getValue(onlyChild(lastChild));\n             exps.putUpdate(path, val);\n         }\n     }\n@@ -506,7 +516,7 @@ else if (node.id == JJTOUTERJOIN)\n             else if (node.id == JJTINNERJOIN)\n                 exp = addJoin(node, true, exp);\n             else if (node.id == JJTINNERFETCHJOIN)\n-                exp = addJoin(node, true, exp);\n+                ; // we handle inner fetch joins in the evalFetchJoins() method\n             else if (node.id == JJTOUTERFETCHJOIN)\n                 ; // we handle outer fetch joins in the evalFetchJoins() method\n             else\n@@ -1151,7 +1161,7 @@ protected void setImplicitTypes(Value val1, Value val2, Class expected) {\n         if (fmd == null)\n             return;\n \n-        Class type = path.isXPath() ? path.getType() : fmd.getType();\n+        Class type = path.isXPath() ? path.getType() : fmd.getDeclaredType();\n         if (type == null)\n             return;\n \n@@ -1314,8 +1324,11 @@ private Value getPathOrConstant(JPQLNode node) {\n                 Object value = field.get(null);\n                 return factory.newLiteral(value, Literal.TYPE_UNKNOWN);\n             } catch (NoSuchFieldException nsfe) {\n-                throw parseException(EX_USER, \"no-field\",\n-                    new Object[]{ c.getName(), fieldName }, nsfe);\n+                if (node.inEnumPath)\n+                    throw parseException(EX_USER, \"no-field\",\n+                        new Object[]{ c.getName(), fieldName }, nsfe);\n+                else\n+                    return getPath(node, false, true);\n             } catch (Exception e) {\n                 throw parseException(EX_USER, \"unaccessible-field\",\n                     new Object[]{ className, fieldName }, e);\n@@ -1548,10 +1561,12 @@ private static JPQLNode lastChild(JPQLNode node, int fromLast) {\n         JPQLNode[] children;\n         String text;\n         boolean not = false;\n+        boolean inEnumPath = false;\n \n         public JPQLNode(JPQL parser, int id) {\n             this.id = id;\n             this.parser = parser;\n+            this.inEnumPath = parser.inEnumPath;\n         }\n \n         public void jjtOpen() {\n@@ -1561,12 +1576,12 @@ public void jjtClose() {\n         }\n \n         JPQLNode[] findChildrenByID(int id) {\n-            Collection set = new HashSet();\n+            Collection<JPQLNode> set = new LinkedHashSet<JPQLNode>();\n             findChildrenByID(id, set);\n-            return (JPQLNode[]) set.toArray(new JPQLNode[set.size()]);\n+            return set.toArray(new JPQLNode[set.size()]);\n         }\n \n-        private void findChildrenByID(int id, Collection set) {\n+        private void findChildrenByID(int id, Collection<JPQLNode> set) {\n             for (int i = 0; children != null && i < children.length; i++) {\n                 if (children[i].id == id)\n                     set.add(children[i]);"},{"sha":"ff281018388d031b17ea3a43b71a659ad610341d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -41,6 +41,8 @@\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.lib.conf.Value;\n+import org.apache.openjpa.lib.conf.ValueListener;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -79,7 +81,7 @@\n public class ClassMetaData\n     extends Extensions\n     implements Comparable, SourceTracker, MetaDataContext, MetaDataModes,\n-    Commentable {\n+    Commentable, ValueListener {\n \n     /**\n      * Unkonwn identity type.\n@@ -196,6 +198,7 @@ protected ClassMetaData(Class type, MetaDataRepository repos) {\n         _repos = repos;\n         _owner = null;\n         setDescribedType(type);\n+        registerForValueUpdate(\"DataCacheTimeout\");\n     }\n \n     /**\n@@ -206,6 +209,7 @@ protected ClassMetaData(ValueMetaData owner) {\n         _repos = owner.getRepository();\n         setEnvClassLoader(owner.getFieldMetaData().getDefiningMetaData().\n             getEnvClassLoader());\n+        registerForValueUpdate(\"DataCacheTimeout\");\n     }\n \n     /**\n@@ -966,8 +970,7 @@ protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n                 fmd = (FieldMetaData) itr.next();\n                 if (fmd.getManagement() != FieldMetaData.MANAGE_NONE) {\n                     fmd.setDeclaredIndex(fields.size());\n-                    if (fmd.getIndex() == -1)\n-                        fmd.setIndex(fmd.getDeclaredIndex());\n+                    fmd.setIndex(fmd.getDeclaredIndex());\n                     fields.add(fmd);\n                 }\n             }\n@@ -2352,4 +2355,24 @@ public int compare(Object o1, Object o2) {\n \t\t\treturn f1.getListingIndex () - f2.getListingIndex ();\n \t\t}\n \t}\n+    \n+    public void registerForValueUpdate(String...values) {\n+    \tif (values == null)\n+    \t\treturn;\n+    \tfor (String key : values) {\n+    \t\tValue value = getRepository().getConfiguration()\n+    \t\t\t.getValue(key);\n+    \t\tif (value != null)\n+    \t\t\tvalue.addListener(this);\n+    \t}\n+    }\n+    \n+    public void valueChanged(Value val) {\n+    \tif (val ==  null)\n+    \t\treturn;\n+    \tString key = val.getProperty();\n+    \tif (\"DataCacheTimeout\".equals(key)) {\n+    \t\t_cacheTimeout = Integer.MIN_VALUE;\n+    \t}\n+    }\n }"},{"sha":"467efdbfd952e18aa6e886f69f0ac7adb4814546","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -1124,9 +1124,11 @@ public void setUsesImplData(Boolean implData) {\n                     //set \"isUsedInOrderBy\" to the field\n                     ClassMetaData elemCls = getElement()\n                         .getDeclaredTypeMetaData();\n-                    FieldMetaData fmd = elemCls.getDeclaredField(decs[i]);\n-                    if (fmd != null)\n-                    \tfmd.setUsedInOrderBy(true);                    \n+                    if (elemCls != null) {\n+                      FieldMetaData fmd = elemCls.getDeclaredField(decs[i]);\n+                      if (fmd != null)\n+                        fmd.setUsedInOrderBy(true);                      \n+                    }\n                 }\n                 _orders = orders;\n             }"},{"sha":"12e18562756ee1c4cd65fa952818cd2d13927a83","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -30,7 +30,7 @@\n public class InheritanceComparator\n     implements Comparator, Serializable {\n \n-    private Class _base = null;\n+    private Class _base = Object.class;\n \n     /**\n      * Set the least-derived type possible; defaults to <code>null</code>.\n@@ -92,8 +92,6 @@ else if (i1 > i2)\n     private int levels(Class to) {\n         if (to.isInterface())\n             return to.getInterfaces().length;\n-        if (_base == null)\n-            return 0;\n         for (int i = 0; to != null; i++, to = to.getSuperclass())\n             if (to == _base)\n                 return i;"},{"sha":"79376fb717f684e500ec77e09c503c1762ba9259","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+import java.io.Serializable;\n+\n+public class InheritanceOrderedMetaDataList\n+    implements Serializable {\n+\n+    private MetaDataInheritanceComparator _comp\n+        = new MetaDataInheritanceComparator();\n+    private LinkedList<ClassMetaData> buffer = new LinkedList<ClassMetaData>();\n+\n+    public boolean add(ClassMetaData meta) {\n+        if (meta == null || buffer.contains(meta))\n+            return false;\n+        for (ListIterator<ClassMetaData> itr = buffer.listIterator();\n+            itr.hasNext();) {\n+            int ord = _comp.compare(meta, itr.next());\n+            if (ord > 0)\n+                continue;\n+            if (ord == 0)\n+                return false;\n+            itr.previous();\n+            itr.add(meta);\n+            return true;\n+        }\n+        buffer.add(meta);\n+        return true;\n+    }\n+\n+    public boolean remove(ClassMetaData meta) {\n+        return buffer.remove(meta);\n+    }\n+\n+    public ClassMetaData peek() {\n+        return buffer.peek();\n+    }\n+    \n+    public int size() {\n+        return buffer.size();\n+    }\n+    \n+    public Iterator<ClassMetaData> iterator() {\n+        return buffer.iterator();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return buffer.isEmpty();\n+    }\n+    \n+    public void clear() {\n+        buffer.clear();\n+    }\n+}"},{"sha":"1b5845769d80a1ba85922d93ec1d8be73f420fcf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":7,"deletions":29,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -31,7 +31,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.TreeSet;\n \n import org.apache.commons.lang.StringUtils;\n@@ -137,10 +136,10 @@\n     private final Collection _registered = new HashSet();\n \n     // set of metadatas we're in the process of resolving\n-    private final SortedSet _resolving = new TreeSet\n-        (new MetaDataInheritanceComparator());\n-    private final SortedSet _mapping = new TreeSet\n-        (new MetaDataInheritanceComparator());\n+    private final InheritanceOrderedMetaDataList _resolving =\n+        new InheritanceOrderedMetaDataList();\n+    private final InheritanceOrderedMetaDataList _mapping =\n+        new InheritanceOrderedMetaDataList();\n     private final List _errs = new LinkedList();\n \n     // system listeners\n@@ -574,7 +573,6 @@ private void resolve(ClassMetaData meta) {\n      * if we're still in the process of resolving other metadatas.\n      */\n     private List resolveMeta(ClassMetaData meta) {\n-    \tsetBaseIfNecessary(meta);\n         if (meta.getPCSuperclass() == null) {\n             // set superclass\n             Class sup = meta.getDescribedType().getSuperclass();\n@@ -618,27 +616,6 @@ private List resolveMeta(ClassMetaData meta) {\n         return processBuffer(meta, _resolving, MODE_META);\n     }\n     \n-    private void setBaseIfNecessary(ClassMetaData meta) {\n-        if (_resolving == null)\n-            return;\n-\n-        InheritanceComparator comp =\n-            (InheritanceComparator) _resolving.comparator();\n-        if (meta.getPCSuperclass() == null) {\n-            Class sup = meta.getDescribedType().getSuperclass();\n-            Class pBase = null;\n-            while (sup != null && sup != Object.class) {\n-                pBase = sup;\n-                sup = sup.getSuperclass();\n-            }\n-            if (pBase != null && !pBase.equals(comp.getBase())) {\n-                // setBase() can be called because getMetaData() is\n-                // syncronized\n-                comp.setBase(pBase);\n-            }\n-        }\n-    }\n-\n     /**\n      * Load mapping information for the given metadata.\n      */\n@@ -719,7 +696,8 @@ private boolean resolveMapping(ClassMetaData meta) {\n     /**\n      * Process the given metadata and the associated buffer.\n      */\n-    private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n+    private List processBuffer(ClassMetaData meta,\n+        InheritanceOrderedMetaDataList buffer, int mode) {\n         // if we're already processing a metadata, just buffer this one; when\n         // the initial metadata finishes processing, we traverse the buffer\n         // and process all the others that were introduced during reentrant\n@@ -734,7 +712,7 @@ private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n         ClassMetaData buffered;\n         List processed = new ArrayList(5);\n         while (!buffer.isEmpty()) {\n-            buffered = (ClassMetaData) buffer.first();\n+            buffered = buffer.peek();\n             try {\n                 buffered.resolve(mode);\n                 processed.add(buffered);"},{"sha":"904b330bc4d018dd2b978b204897811290d8d6d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -270,7 +270,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n                     J2DoPrivHelper.newInstanceAction(cls));\n                 Configurations.configureInstance(seq,\n                     _repos.getConfiguration(), props.toString());\n-                seq.setType(_type);\n+                if(_type != Seq.TYPE_DEFAULT)\n+                    seq.setType(_type);\n             } else if (_factory != null)\n                 seq = _factory.toSequence(cls, props.toString());\n             else\n@@ -339,6 +340,7 @@ public void close() {\n             }\n     }\n \n+    @Override\n     public String toString() {\n         return _name;\n     }"},{"sha":"8704a443acdeb3af91d2b0393fa188d4642bc293","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -68,6 +68,16 @@\n      */\n     public static final int UUID_HEX = 6;\n \n+    /**\n+     * \"uuid-type4-string\" value strategy.\n+     */\n+    public static final int UUID_TYPE4_STRING = 7;\n+\n+    /**\n+     * \"uuid-type4-hex\" value strategy.\n+     */\n+    public static final int UUID_TYPE4_HEX = 8;\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (ValueStrategies.class);\n \n@@ -82,6 +92,8 @@\n         _map.put(\"increment\", Numbers.valueOf(INCREMENT));\n         _map.put(\"uuid-string\", Numbers.valueOf(UUID_STRING));\n         _map.put(\"uuid-hex\", Numbers.valueOf(UUID_HEX));\n+        _map.put(\"uuid-type4-string\", Numbers.valueOf(UUID_TYPE4_STRING));\n+        _map.put(\"uuid-type4-hex\", Numbers.valueOf(UUID_TYPE4_HEX));\n     }\n \n     /**"},{"sha":"32c2c7b4cbaf5f54079b1d2179333466a878f019","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":30,"deletions":7,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -58,7 +58,7 @@\n     /**\n      * Return the primary key values for the given object id. The values\n      * will be returned in the same order as the metadata primary key fields.\n-     * Values for PC primary key fields will be the primarky key value or\n+     * Values for PC primary key fields will be the primary key value or\n      * oid value of the related instance (depending on \n      * {@link FieldMetaData#isObjectIdFieldIdOfPC}).\n      */\n@@ -89,6 +89,7 @@\n             // copy fields from the oid\n             PrimaryKeyFieldManager consumer = new PrimaryKeyFieldManager();\n             consumer.setStore(pks);\n+            oid = wrap(meta, oid);\n             PCRegistry.copyKeyFieldsFromObjectId(meta.getDescribedType(),\n                 consumer, oid);\n             return consumer.getStore();\n@@ -108,10 +109,28 @@\n         }\n         return pks;\n     }\n+    \n+    /**\n+     * Wraps the given object for the given type into a OpenJPA specific \n+     * application identity object wrapper instance (i.e. ObjectId) if all of \n+     * the following is true:\n+     * the given type is not using built-in OpenJPA identity types\n+     * the given type is using a shared OpenJPA identity type\n+     * the given object is not already a wrapper identity type\n+     */\n+    public static Object wrap(ClassMetaData meta, Object oid) {\n+        if (!meta.isOpenJPAIdentity() \n+         && meta.isObjectIdTypeShared() \n+         && !(oid instanceof ObjectId)) {\n+        \treturn new ObjectId(meta.getDescribedType(), oid);\n+        } \n+        return oid;\n+    }\n+    \n \n     /**\n      * Return a new object id constructed from the given primary key values.\n-     * Values for PC primary key fields should be the primarky key value or\n+     * Values for PC primary key fields should be the primary key value or\n      * oid value of the related instance (depending on \n      * {@link FieldMetaData#isObjectIdFieldIdOfPC}).\n      */\n@@ -174,12 +193,16 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                     return new ObjectId(meta.getDescribedType(), val);\n                 case JavaTypes.BIGDECIMAL:\n                     if (!convert && !(val instanceof BigDecimal))\n-                        throw new ClassCastException(\"!(x instanceof BigDecimal)\");\n-                    return new BigDecimalId(meta.getDescribedType(), (BigDecimal)val);\n+                        throw new ClassCastException(\n+                            \"!(x instanceof BigDecimal)\");\n+                    return new BigDecimalId(meta.getDescribedType(), \n+                        (BigDecimal)val);\n                 case JavaTypes.BIGINTEGER:\n                     if (!convert && !(val instanceof BigInteger))\n-                        throw new ClassCastException(\"!(x instanceof BigInteger)\");\n-                    return new BigIntegerId(meta.getDescribedType(), (BigInteger)val);\n+                        throw new ClassCastException(\n+                            \"!(x instanceof BigInteger)\");\n+                    return new BigIntegerId(meta.getDescribedType(), \n+                        (BigInteger)val);\n                 default:\n                     throw new InternalException();\n             }\n@@ -194,7 +217,7 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 producer.setMetaData(meta);\n             PCRegistry.copyKeyFieldsToObjectId(meta.getDescribedType(),\n                 producer, oid);\n-            return oid;\n+            return ApplicationIds.wrap(meta, oid);\n         }\n \n         // default to reflection"},{"sha":"123e96a3c145bcc4db5ae18b6d89ea4046682f1a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -22,7 +22,6 @@\n import java.util.AbstractSet;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n-import java.util.HashMap;\r\n import java.util.Iterator;\r\n import java.util.Map;\r\n import java.util.Set;\r\n@@ -31,12 +30,10 @@\n import org.apache.commons.collections.iterators.FilterIterator;\r\n import org.apache.commons.collections.iterators.IteratorChain;\r\n import org.apache.openjpa.lib.util.LRUMap;\r\n-import org.apache.openjpa.lib.util.ReferenceHashMap;\r\n import org.apache.openjpa.lib.util.ReferenceMap;\r\n import org.apache.openjpa.lib.util.SizedMap;\r\n-import java.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\r\n-import org.apache.openjpa.lib.util.concurrent.SizedConcurrentHashMap;\r\n \r\n import java.util.concurrent.locks.ReentrantLock;\r\n \r\n@@ -117,7 +114,7 @@ public void valueExpired(Object key) {\n         pinnedMap = new ConcurrentHashMap();\r\n \r\n         if (!lru) {\r\n-            cacheMap = new SizedConcurrentHashMap(size, load, concurrencyLevel){\r\n+            cacheMap = new ConcurrentHashMap(size, load) {\r\n                 public void overflowRemoved(Object key, Object value) {\r\n                     cacheMapOverflowRemoved(key, value);\r\n                 }\r"},{"sha":"2d6bfe5dcc6c48e857870ba27f56e65182bc0a70","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -171,7 +171,9 @@ public static void printNestedThrowables(ExceptionInfo e, PrintStream out) {\n         if (i < nested.length) {\n             out.println(\"NestedThrowables:\");\n             for (; i < nested.length; i++)\n-                nested[i].printStackTrace(out);\n+                // guard against a nasty null in the array\n+                if (nested[i] != null)\n+                    nested[i].printStackTrace(out);\n         }\n     }\n \n@@ -188,7 +190,9 @@ public static void printNestedThrowables(ExceptionInfo e, PrintWriter out) {\n         if (i < nested.length) {\n             out.println(\"NestedThrowables:\");\n             for (; i < nested.length; i++)\n-                nested[i].printStackTrace(out);\n+                // guard against a nasty null in the array\n+                if (nested[i] != null)\n+                    nested[i].printStackTrace(out);\n         }\n     }\n \n@@ -239,7 +243,10 @@ public static Object replaceFailedObject(Object ob) {\n             if (isSerializable(nested[i]))\n                 newNested[i] = nested[i];\n             else\n-                newNested[i] = new Exception(nested[i].toString());\n+                // guard against a nasty null in the array by using valueOf\n+                // instead of toString to prevent throwing yet another \n+                // exception\n+                newNested[i] = new Exception(String.valueOf(nested[i]));\n         }\n         return newNested;\n     }"},{"sha":"7f6b2f25d3e3b800dc958c345c19797ccc032339","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -160,9 +160,13 @@ private static Object generateValue(StoreContext ctx,\n                 return JavaTypes.convert(smd.getInstance(ctx.getClassLoader()).\r\n                     next(ctx, meta), typeCode);\r\n             case ValueStrategies.UUID_STRING:\r\n-                return UUIDGenerator.nextString();\r\n+                return UUIDGenerator.nextString(UUIDGenerator.TYPE1);\r\n             case ValueStrategies.UUID_HEX:\r\n-                return UUIDGenerator.nextHex();\r\n+                return UUIDGenerator.nextHex(UUIDGenerator.TYPE1);\r\n+            case ValueStrategies.UUID_TYPE4_STRING:\r\n+                return UUIDGenerator.nextString(UUIDGenerator.TYPE4);\r\n+            case ValueStrategies.UUID_TYPE4_HEX:\r\n+                return UUIDGenerator.nextHex(UUIDGenerator.TYPE4);\r\n             default:\r\n                 return null;\r\n         }\r"},{"sha":"8879de04bde32573ee2ecdaa251926c75b0bf7a9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -55,7 +55,7 @@ protected OpenJPAId(Class type, boolean subs) {\n     }\r\n \r\n     /**\r\n-     * Return the persitent class which this id instance represents.\r\n+     * Return the persistent class which this id instance represents.\r\n      */\r\n     public Class getType() {\r\n         return type;\r\n@@ -73,8 +73,7 @@ public boolean hasSubclasses() {\n      * Set the exact type of the described instance once it is known.\r\n      */\r\n     public void setManagedInstanceType(Class type) {\r\n-        this.type = type;\r\n-        this.subs = false;\r\n+        setManagedInstanceType(type, false);\r\n     }\r\n \r\n     /**\r"},{"sha":"b5f54cb251ee37b598e57d4f2c6118dff2655df7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -38,11 +38,7 @@\n      */\n     public static void beforeAdd(ProxyCollection coll, int index, Object value){\n         assertAllowedType(value, coll.getElementType());\n-        if (index == coll.size())\n-            // optimize for adding to the end\n-            beforeAdd(coll, value);\n-        else\n-            dirty(coll, true);\n+        dirty(coll, true);\n     }\n \n     /**"},{"sha":"bb831727ee46097c135034ba3849b10a98030c5b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -47,6 +47,14 @@ public StoreException(Throwable cause) {\n         super(cause);\n     }\n \n+    public StoreException(String msg, Throwable cause) {\n+        super(msg, cause);\n+    }\n+\n+    public StoreException(Message msg, Throwable cause) {\n+        super(msg.getMessage(), cause);\n+    }\n+    \n     public int getType() {\n         return STORE;\n     }"},{"sha":"a77d7ba16282693e659e4048b5ae927a37aa5617","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -64,6 +64,7 @@ import java.io.*;\n public class JPQL\n {\n \tString jpql;\n+\tboolean inEnumPath;\n \n \n \tpublic JPQL (String jpql)\n@@ -968,7 +969,9 @@ void enum_primary() : { }\n \n void enum_literal() : { }\n {\n+\t{ inEnumPath = true; }\n \tpath()\n+\t{ inEnumPath = false; }\n }\n \n \n@@ -1250,7 +1253,7 @@ void positional_input_parameter() #POSITIONALINPUTPARAMETER :\n \n void pattern_value() #PATTERNVALUE : { }\n {\n-\tinput_parameter() | string_literal()\n+\t(input_parameter() | string_literal())\n \t[(<ESCAPE> escape_character() #ESCAPECHARACTER)]\n }\n "},{"sha":"0606930f318dade8f61c25ecb73cb1293ceddf5a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -556,9 +556,12 @@ diff-specs: Attempt to configure for multiple specifications.  Was configured \\\n cache-marshaller-loaded: Loaded cached data of type {0} from file {1}.\n cache-marshaller-no-inputs: No InputURL or InputResource was specified for \\\n     CacheMarshaller {0}. Cannot load data if no input was specified.\n-cache-marshaller-load-exception: An error occurred while loading cached data \\\n-\tfrom {0}. The exception is logged with this message; it will be consumed \\\n-\tand ignored.\n+cache-marshaller-load-exception-ignore: An error occurred while loading cached \\\n+\tdata from {0}. The exception is logged with this message; it will be \\\n+\tconsumed and ignored.\n+cache-marshaller-load-exception-fatal: An error occurred while loading cached \\\n+\tdata from {0}. The exception is logged with this message; it will be \\\n+\tthrown.\n cache-marshaller-stored: Stored data of type {0} to file {1}.\n cache-marshaller-no-output-file: No OutputFile was specified for \\\n     CacheMarshaller {0}. Cannot store data if no output was specified.\n@@ -569,7 +572,9 @@ cache-marshaller-input-url-and-resource-specified: An InputURL and an \\\n     InputResource were specified for CacheMarshaller {0}. At most one of these \\\n     can be specified.\n cache-marshaller-multiple-resources: Multiple resources exist for resource \\\n-    location {1} for CacheMarshaller {0}.\n+    location {1} for CacheMarshaller {0}: {2}.\n+cache-marshaller-multiple-resources-warn: Multiple resources exist for resource\\\n+    location {1} for CacheMarshaller {0}: {2}. The first one will be used.\n cache-marshaller-bad-url: An error occurred while loading resource location \\\n     {1} for CacheMarshaller {0}.\n cache-marshaller-null-validation-policy: No ValidationPolicy was set for \\"},{"sha":"db6ae7bd17f2af4464731dd82db9b21e0b44181a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,19 +18,27 @@\n tm-not-found: Could not perform automatic lookup of EJB container''s \\\r\n \tjavax.transaction.TransactionManager implementation. Please ensure that \\\r\n \tyou are running the application from within an EJB 1.1 compliant EJB \\\r\n-\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to the \\\r\n-\tappropriate value to obtain the TransactionManager.\r\n+\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to \\ \r\n+\tthe\tappropriate value to obtain the TransactionManager.\r\n expected-reference: Expected object to be of type Reference, but instead was \\\r\n \t\"{0}\".\r\n not-supported: This operation is not supported.\r\n was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\r\n \tWebSphere does not support direct manipulation of managed transactions.\r\n-was-transaction-id-exception: Unable to determine identity of the current WebSphere \\\r\n-\tmanaged transaction. Please ensure that your are running the application from \\\r\n-\twithin WebSphere Application Server (version 5.0.2 or newer).\r\n+was-transaction-id-exception: Unable to determine identity of the current \\ \r\n+\tWebSphere managed transaction. Please ensure that your are running the \\\r\n+\tapplication from within WebSphere Application Server (version 5.0.2 or \\ \r\n+\tnewer).\r\n was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n \tinterfaces. Please ensure that you are running the application from within \\\r\n \tWebSphere Application Server (version 5.0.2 or newer).\r\n was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\r\n-\tservice. Please ensure that you are running the application from within WebSphere \\\r\n-\tApplication Server (version 5.0.2 or newer).\r\n+\tservice. Please ensure that you are running the application from within \\ \r\n+\tWebSphere Application Server (version 5.0.2 or newer).\r\n+tm-unavailable: Unable to obtain a TransactionManager using {0}. \r\n+tsr-cannot-suspend: The Transaction Synchronization Registry can not suspend \\\r\n+\tthe current transaction. \r\n+exc-suspend-tran: A {0} exception occurred when trying to suspend the current \\\r\n+\ttransaction. \r\n+exc-resume-tran: A {0} exception occurred when trying to resume the current \\\r\n+\ttransaction. The transaction will be marked rollback only.\n\\ No newline at end of file"},{"sha":"de70bf03d929639d974aefd4636452eec0ec06fb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -116,7 +116,9 @@ not-managed: The given instance \"{0}\" is not managed by this context.\n trans-not-managed: This broker is not configured to use managed transactions.\n bad-detached-op: You cannot perform operation {0} on detached object \"{1}\". \\\n \tThis operation only applies to managed objects.\n-persist-detached: Attempt to persist detached object \"{0}\".\n+persist-detached: Attempt to persist detached object \"{0}\".  If this is a new \\\n+  instance, make sure any version and/or auto-generated primary key fields are \\\n+  null/default when persisting.\n null-value: The field \"{0}\" of instance \"{1}\" contained a null value; \\\n \tthe metadata for this field specifies that nulls are illegal.\n change-identity: Attempt to change a primary key field of an instance that \\\n@@ -396,4 +398,5 @@ cant-serialize-pessimistic-broker: Serialization not allowed for brokers with \\\n     an active datastore (pessimistic) transaction.\n cant-serialize-connected-broker: Serialization not allowed for brokers with \\\n     an active connection to the database.\n-no-interface-metadata: No metadata was found for managed interface {0}.\n\\ No newline at end of file\n+no-interface-metadata: No metadata was found for managed interface {0}.\n+fetch-configuration-stack-empty: Fetch configuration stack is empty."},{"sha":"c0baf28071ce350d55c0391ef4ece0cd45b17336","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -177,7 +177,7 @@ invalid-id: The id class specified by type \"{0}\" does not match the \\\n \tprimary key fields of the class.  Make sure your identity class has the \\\n \tsame primary keys as your persistent type, including pk field types. \\\n     Mismatched property: \"{1}\"\n-null-cons: The id class specified by type \"{0}\" does not have public a \\\n+null-cons: The id class specified by type \"{0}\" does not have a public \\\n \tno-args constructor.\n hc-method: The identity class specified by type \"{0}\" is not valid, as the \\\n \thashCode method is not overridden. Implement hashCode so that two \\"},{"sha":"b9611e10eaf45da4c5751fd50902f0275b4a410f","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -36,7 +36,6 @@\n      * been modified via the maven build.\r\n      *\r\n      * @throws ClassNotFoundException\r\n-     * @author Michael Dick\r\n      */\r\n     public void testInterfaceAdded() throws ClassNotFoundException {\r\n \r"},{"sha":"d1d90af063e6c228a7ba069e8f34001c9efd4118","filename":"openjpa-lib/pom.xml","status":"modified","additions":16,"deletions":24,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,9 +17,10 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-lib</artifactId>\n@@ -30,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -96,8 +97,7 @@\n                         <phase>process-classes</phase>\n                         <configuration>\n                             <tasks>\n-                                <delete failonerror=\"true\"\n-                                dir=\"${project.build.outputDirectory}/sun/\"/>\n+                                <delete failonerror=\"true\" dir=\"${project.build.outputDirectory}/sun/\" />\n                             </tasks>\n                         </configuration>\n                         <goals>\n@@ -109,33 +109,25 @@\n                         <phase>compile</phase>\n                         <configuration>\n                             <tasks>\n-                                <property name=\"tmpdir\"\n-                                    value=\"${java.io.tmpdir}/openjpamvntmp\"/>\n-                                <condition property=\"outdir\"\n-                                    value=\"${project.build.outputDirectory}\">\n-                                    <available type=\"dir\"\n-                                    file=\"${project.build.outputDirectory}\"/>\n+                                <property name=\"tmpdir\" value=\"${java.io.tmpdir}/openjpamvntmp\" />\n+                                <condition property=\"outdir\" value=\"${project.build.outputDirectory}\">\n+                                    <available type=\"dir\" file=\"${project.build.outputDirectory}\" />\n                                 </condition>\n \n-                                <property name=\"outdir\" value=\"${tmpdir}\"/>\n+                                <property name=\"outdir\" value=\"${tmpdir}\" />\n \n-                                <property name=\"svnversion.executable\"\n-                                    value=\"svnversion\"/>\n-                                <exec outputproperty=\"subversion.revision\"\n-                                    failonerror=\"false\"\n-                                    failifexecutionfails=\"false\"\n-                                    executable=\"${svnversion.executable}\">\n-                                    <arg line=\"-c ${basedir}/..\"/>\n+                                <property name=\"svnversion.executable\" value=\"svnversion\" />\n+                                <exec outputproperty=\"subversion.revision\" failonerror=\"false\" failifexecutionfails=\"false\" executable=\"${svnversion.executable}\">\n+                                    <arg line=\"-c ${basedir}/..\" />\n                                 </exec>\n-                                <property name=\"subversion.revision\"\n-                                    value=\"unknown\"/>\n+                                <property name=\"subversion.revision\" value=\"unknown\" />\n                                 <echo>Revision: ${subversion.revision}</echo>\n                                 <echo>OpenJPA version: ${project.version}</echo>\n                                     \n-                                <mkdir dir=\"${outdir}/META-INF\"/>\n+                                <mkdir dir=\"${outdir}/META-INF\" />\n                                 <echo file=\"${outdir}/META-INF/org.apache.openjpa.revision.properties\">revision.number=${subversion.revision}\n openjpa.version=${project.version}</echo>\n-                                <delete dir=\"${tmpdir}\"/>\n+                                <delete dir=\"${tmpdir}\" />\n                             </tasks>\n                         </configuration>\n                         <goals>"},{"sha":"9cddb36180d30ef9fb6c78dfe2601b3c4020e21f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -912,13 +912,13 @@ public Object clone() {\n     public boolean removeValue(Value val) {\n         if (!_vals.remove(val))\n             return false;\n-        val.setListener(null);\n+        val.removeListener(this);\n         return true;\n     }\n \n     public Value addValue(Value val) {\n         _vals.add(val);\n-        val.setListener(this);\n+        val.addListener(this);\n         return val;\n     }\n "},{"sha":"d4e4202c3c1c945fd0eb7a76d0b67efaefefe745","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -609,14 +609,17 @@ else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n     /**\r\n      * Looks up the given name in JNDI. If the name is null, null is returned.\r\n      */\r\n-    public static Object lookup(String name) {\r\n+    public static Object lookup(String name, String userKey, Log log) {\r\n         if (StringUtils.isEmpty(name))\r\n             return null;\r\n \r\n         Context ctx = null;\r\n         try {\r\n             ctx = new InitialContext();\r\n-            return ctx.lookup(name);\r\n+            Object result = ctx.lookup(name);\r\n+            if (result == null && log != null && log.isWarnEnabled())\r\n+            \tlog.warn(_loc.get(\"jndi-lookup-failed\", userKey, name));\r\n+            return result;\r\n         } catch (NamingException ne) {\r\n             throw new NestableRuntimeException(\r\n                 _loc.get(\"naming-err\", name).getMessage(), ne);\r"},{"sha":"36c7cdc32c0385654fbca122a698cde326807ff9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":35,"deletions":10,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n@@ -41,7 +44,7 @@\n     private String def = null;\n     private String[] aliases = null;\n     private String getter = null;\n-    private ValueListener listen = null;\n+    private List<ValueListener> listeners = null;\n     private boolean aliasListComprehensive = false;\n     private Class scope = null;\n     private boolean isDynamic = false;\n@@ -368,25 +371,37 @@ boolean isDefault(Object val) {\n     protected abstract void setInternalObject(Object obj);\n \n     /**\n-     * Listener for value changes.\n+     * Gets unmodifable list of listeners for value changes.\n      */\n-    public ValueListener getListener() {\n-        return this.listen;\n+    public List<ValueListener> getListeners() {\n+        return Collections.unmodifiableList(this.listeners);\n     }\n \n     /**\n      * Listener for value changes.\n      */\n-    public void setListener(ValueListener listen) {\n-        this.listen = listen;\n+    public void addListener(ValueListener listener) {\n+    \tif (listener == null)\n+    \t\treturn;\n+    \tif (listeners == null)\n+    \t\tlisteners = new ArrayList<ValueListener>();\n+        listeners.add(listener);\n+    }\n+    \n+    public void removeListener(ValueListener listener) {\n+    \tif (listener == null)\n+    \t\treturn;\n+        listeners.remove(listener);\n     }\n \n     /**\n      * Subclasses should call this method when their internal value changes.\n      */\n     public void valueChanged() {\n-        if (listen != null) {\n-        \tlisten.valueChanged(this);\n+        if (listeners == null) \n+        \treturn;\n+        for (ValueListener listener : listeners) {\n+        \tlistener.valueChanged(this);\n         }\n     }\n     \n@@ -401,13 +416,23 @@ public void valueChanged() {\n      * <LI>Configuration is read-only\n      */\n     protected void assertChangeable() {\n-    \tif (!isDynamic() && listen instanceof Configuration && \n-        \t((Configuration)listen).isReadOnly()) {\n+    \tif (!isDynamic() && containsReadOnlyConfigurationAsListener()) {\n         \tthrow new RuntimeException(s_loc.get(\"veto-change\",\n         \t\tthis.getProperty()).toString());\n        \t}\n     }\n     \n+    boolean containsReadOnlyConfigurationAsListener() {\n+    \tif (listeners == null)\n+    \t\treturn false;\n+    \tfor (ValueListener listener : listeners) {\n+    \t\tif (listener instanceof Configuration\n+    \t\t&& ((Configuration)listener).isReadOnly())\n+    \t\t\treturn true;\n+    \t}\n+    \treturn false;\n+    }\n+    \n     /**\n      * Sets if this receiver can be mutated even when the configuration it \n      * belongs to has been {@link Configuration#isReadOnly() frozen}."},{"sha":"bb061dae15942934d404a5838503ed63569b5624","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -28,6 +28,7 @@\n import java.security.PrivilegedActionException;\r\n import java.util.HashMap;\r\n import java.util.Iterator;\r\n+import java.util.Locale;\r\n import java.util.Map;\r\n \r\n import org.apache.openjpa.lib.conf.Configurable;\r\n@@ -50,12 +51,14 @@\n     implements LogFactory, GenericConfigurable, Configurable {\r\n \r\n     private static Localizer _loc = Localizer.forPackage(LogFactoryImpl.class);\r\n+    private static Localizer _locEn = Localizer.forPackage(\r\n+        LogFactoryImpl.class, Locale.ENGLISH);\r\n \r\n-    public static final String TRACE_STR = _loc.get(\"log-trace\").getMessage();\r\n-    public static final String INFO_STR = _loc.get(\"log-info\").getMessage();\r\n-    public static final String WARN_STR = _loc.get(\"log-warn\").getMessage();\r\n-    public static final String ERROR_STR = _loc.get(\"log-error\").getMessage();\r\n-    public static final String FATAL_STR = _loc.get(\"log-fatal\").getMessage();\r\n+    public static final String TRACE_STR = _locEn.get(\"log-trace\").getMessage();\r\n+    public static final String INFO_STR = _locEn.get(\"log-info\").getMessage();\r\n+    public static final String WARN_STR = _locEn.get(\"log-warn\").getMessage();\r\n+    public static final String ERROR_STR = _locEn.get(\"log-error\").getMessage();\r\n+    public static final String FATAL_STR = _locEn.get(\"log-fatal\").getMessage();\r\n \r\n     public static final String STDOUT = \"stdout\";\r\n     public static final String STDERR = \"stderr\";\r\n@@ -230,7 +233,7 @@ public static String getLevelName(short level) {\n             case Log.FATAL:\r\n                 return FATAL_STR;\r\n             default:\r\n-                return _loc.get(\"log-unknown\").getMessage();\r\n+                return _locEn.get(\"log-unknown\").getMessage();\r\n         }\r\n     }\r\n \r"},{"sha":"35b3af3f5a4f23152a3856dd8fbaae82272360bb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -201,13 +201,13 @@ public Object run() {\n      * Requires security policy: 'permission java.lang.RuntimePermission\n      * \"getClassLoader\";'\n      * \n-     * @return Classloader\n+     * @return Class\n      */\n-    public static final PrivilegedExceptionAction getForNameAction(\n+    public static final PrivilegedExceptionAction<Class<?>> getForNameAction(\n         final String className, final boolean initializeBoolean,\n         final ClassLoader classLoader) {\n-        return new PrivilegedExceptionAction() {\n-            public Object run() throws ClassNotFoundException {\n+        return new PrivilegedExceptionAction<Class<?>>() {\n+            public Class<?> run() throws ClassNotFoundException {\n                 return Class.forName(className, initializeBoolean, classLoader);\n             }\n         };\n@@ -228,10 +228,10 @@ public Object run() throws ClassNotFoundException {\n      *   \n      * @return Classloader\n      */\n-    public static final PrivilegedAction getClassLoaderAction(\n+    public static final PrivilegedAction<ClassLoader> getClassLoaderAction(\n         final Class clazz) {\n-        return new PrivilegedAction() {\n-            public Object run() {\n+        return new PrivilegedAction<ClassLoader>() {\n+            public ClassLoader run() {\n                 return clazz.getClassLoader();\n             }\n         };\n@@ -330,21 +330,21 @@ public Object run() {\n      * Requires security policy:\n      *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n      *   \n-     * @return Object\n-     * @exception IllegalAccessException\n+     * @return A new instance of the provided class.\n+     * @exception IllegalAccessException \n      * @exception InstantiationException\n      */\n-    public static final PrivilegedExceptionAction newInstanceAction(\n-        final Class clazz) throws IllegalAccessException,\n+    public static final <T> PrivilegedExceptionAction<T> newInstanceAction(\n+        final Class<T> clazz) throws IllegalAccessException,\n         InstantiationException {\n-        return new PrivilegedExceptionAction() {\n-            public Object run() throws IllegalAccessException,\n+        return new PrivilegedExceptionAction<T>() {\n+            public T run() throws IllegalAccessException,\n                     InstantiationException {\n                 return clazz.newInstance();\n             }\n         };\n     }\n-\n+    \n     /**\n      * Return a PrivilegeAction object for loader.getParent().\n      * \n@@ -781,9 +781,10 @@ public Object run() {\n      *   \n      * @return ClassLoader\n      */\n-    public static final PrivilegedAction getContextClassLoaderAction() {\n-        return new PrivilegedAction() {\n-            public Object run() {\n+    public static final PrivilegedAction<ClassLoader> \n+            getContextClassLoaderAction() {\n+        return new PrivilegedAction<ClassLoader>() {\n+            public ClassLoader run() {\n                 return Thread.currentThread().getContextClassLoader();\n             }\n         };"},{"sha":"b34191b5e0db4b4d62d754fa85049fce2e6754ff","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":68,"deletions":19,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -22,16 +22,18 @@\n import java.net.InetAddress;\n import java.security.SecureRandom;\n import java.util.Random;\n+import java.util.UUID;\n \n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n- * UUID value generator.  Based on the time-based generator in the Apache\n- * Commons Id project:  http://jakarta.apache.org/commons/sandbox/id/uuid.html\n+ * UUID value generator.  Type 1 generator is based on the time-based generator  \n+ * in the Apache Commons Id project:  http://jakarta.apache.org/commons/sandbox\n+ * /id/uuid.html  The type 4 generator uses the standard Java UUID generator.\n  *\n- * The code has been vastly simplified and modified to replace the ethernet\n- * address of the host machine with the IP, since we do not want to require\n- * native libs and Java cannot access the MAC address directly.\n+ * The type 1 code has been vastly simplified and modified to replace the \n+ * ethernet address of the host machine with the IP, since we do not want to \n+ * require native libs and Java cannot access the MAC address directly.\n  *\n  * In spirit, implements the IETF UUID draft specification, found here:<br />\n  * http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01\n@@ -43,6 +45,10 @@\n  */\n public class UUIDGenerator {\n \n+    // supported UUID types\n+    public static final int TYPE1 = 1;\n+    public static final int TYPE4 = 4;\n+\n     // indexes within the uuid array for certain boundaries\n     private static final byte IDX_TIME_HI = 6;\n     private static final byte IDX_TYPE = 6; // multiplexed\n@@ -68,13 +74,12 @@\n     private final static byte TYPE_TIME_BASED = 0x10;\n \n     // random number generator used to reduce conflicts with other JVMs, and\n-    // hasher for strings.  note that secure random is very slow the first time\n-    // it is used; consider switching to a standard random\n-    private static final Random RANDOM = new SecureRandom();\n+    // hasher for strings.  \n+    private static Random RANDOM;\n \n     // 4-byte IP address + 2 random bytes to compensate for the fact that\n     // the MAC address is usually 6 bytes\n-    private static final byte[] IP;\n+    private static byte[] IP;\n \n     // counter is initialized to 0 and is incremented for each uuid request\n     // within the same timestamp window.\n@@ -88,12 +93,21 @@\n     // when it overflows\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n-    private static short _seq = (short) RANDOM.nextInt(MAX_14BIT);\n-\n+    private static short _seq = 0;\n+        \n     /*\n-     * Static initializer to get the IP address of the host machine.\n+     * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n+     * the node portion of the UUID using the IP address.\n      */\n-    static {\n+    private static synchronized void initializeForType1()\n+    {\n+        if (RANDOM != null)\n+            return;\n+        // note that secure random is very slow the first time\n+        // it is used; consider switching to a standard random\n+        RANDOM = new SecureRandom();\n+        _seq = (short) RANDOM.nextInt(MAX_14BIT);\n+        \n         byte[] ip = null;\n         try {\n             ip = InetAddress.getLocalHost().getAddress();\n@@ -103,13 +117,25 @@\n \n         IP = new byte[6];\n         RANDOM.nextBytes(IP);\n-        System.arraycopy(ip, 0, IP, 2, ip.length);\n+        System.arraycopy(ip, 0, IP, 2, ip.length);        \n     }\n \n     /**\n      * Return a unique UUID value.\n      */\n-    public static byte[] next() {\n+    public static byte[] next(int type) {\n+        if (type == TYPE4) {\n+            return createType4();\n+        }\n+        return createType1();\n+    }\n+      \n+    /*\n+     * Creates a type 1 UUID \n+     */\n+    public static byte[] createType1() {\n+        if (RANDOM == null)\n+            initializeForType1();\n         // set ip addr\n         byte[] uuid = new byte[16];\n         System.arraycopy(IP, 0, uuid, 10, IP.length);\n@@ -147,11 +173,32 @@\n         return uuid;\n     }\n \n+    /*\n+     * Creates a type 4 UUID\n+     */\n+    private static byte[] createType4() {\n+        UUID type4 = UUID.randomUUID();\n+        byte[] uuid = new byte[16];\n+        longToBytes(type4.getMostSignificantBits(), uuid, 0);\n+        longToBytes(type4.getLeastSignificantBits(), uuid, 8);\n+        return uuid;\n+    }\n+    \n+    /*\n+     * Converts a long to byte values, setting them in a byte array\n+     * at a given starting position.\n+     */\n+    private static void longToBytes(long longVal, byte[] buf, int sPos) {\n+        sPos += 7;\n+        for(int i = 0; i < 8; i++)         \n+            buf[sPos-i] = (byte)(longVal >>> (i * 8));\n+    }\n+\n     /**\n      * Return the next unique uuid value as a 16-character string.\n      */\n-    public static String nextString() {\n-        byte[] bytes = next();\n+    public static String nextString(int type) {\n+        byte[] bytes = next(type);\n         try {\n             return new String(bytes, \"ISO-8859-1\");\n         } catch (Exception e) {\n@@ -162,8 +209,8 @@ public static String nextString() {\n     /**\n      * Return the next unique uuid value as a 32-character hex string.\n      */\n-    public static String nextHex() {\n-        return Base16Encoder.encode(next());\n+    public static String nextHex(int type) {\n+        return Base16Encoder.encode(next(type));\n     }\n \n     /**\n@@ -174,6 +221,8 @@ public static String nextHex() {\n      */\n     // package-visibility for testing\n     static long getTime() {\n+        if (RANDOM == null)\n+            initializeForType1();\n         long newTime = getUUIDTime();\n         if (newTime <= _lastMillis) {\n             incrementSequence();"},{"sha":"e66adfbbca65e8f034a49e9d2e732f09d89ee13e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"added","additions":941,"deletions":0,"changes":941,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,941 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util.concurrent;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractCollection;\n+import java.util.AbstractMap;\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Random;\n+import java.util.Set;\n+\n+import org.apache.openjpa.lib.util.SizedMap;\n+\n+/**\n+ * This class implements a HashMap which has limited synchronization.\n+ * In particular mutators are generally synchronized while accessors\n+ * are generally not. Additionally the Iterators returned by this\n+ * class are not \"fail-fast\", but instead try to continue to iterate\n+ * over the data structure after changes have been made.\n+ * The synchronization semantics are built right in to the\n+ * implementation rather than using a delegating wrapper like the\n+ * other collection classes do because it wasn't clear to me that the\n+ * how the two should be seperated or that it would be useful to do\n+ * so. This can probably be a topic for further debate in the future.\n+ * This class is based heavily on the HashMap class in the Java\n+ * collections package.\n+ */\n+public class ConcurrentHashMap extends AbstractMap\n+    implements ConcurrentMap, SizedMap, Cloneable, Serializable {\n+\n+    /**\n+     * The default initial capacity - MUST be a power of two.\n+     */\n+    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n+\n+    /**\n+     * The maximum capacity, used if a higher value is implicitly specified\n+     * by either of the constructors with arguments.\n+     * MUST be a power of two <= 1<<30.\n+     */\n+    private static final int MAXIMUM_CAPACITY = 1 << 30;\n+\n+    /**\n+     * The load fast used when none specified in constructor.\n+     */\n+    private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n+\n+    /**\n+     * Cache of random numbers used in \"random\" methods, since generating them\n+     * is expensive. We hope each map changes enough between cycling through\n+     * this list that the overall effect is random enough.\n+     */\n+    static final double[] RANDOMS = new double[1000];\n+\n+    static {\n+        Random random = new Random();\n+        for (int i = 0; i < RANDOMS.length; i++)\n+            RANDOMS[i] = random.nextDouble();\n+    }\n+\n+    /**\n+     * The table, resized as necessary. Length MUST Always be a power of two.\n+     */\n+    private transient Entry[] table;\n+\n+    /**\n+     * The number of key-value mappings contained in this identity hash map.\n+     */\n+    private transient int size;\n+\n+    /**\n+     * The next size value at which to resize(capacity * load factor).\n+     *\n+     * @serial\n+     */\n+    private int threshold;\n+\n+    /**\n+     * The load factor for the hash table.\n+     *\n+     * @serial\n+     */\n+    private final float loadFactor;\n+\n+    /**\n+     * Spread \"random\" removes and iteration.\n+     */\n+    private int randomEntry = 0;\n+\n+    /**\n+     * Maximum entries.\n+     */\n+    private int maxSize = Integer.MAX_VALUE;\n+\n+    /**\n+     * Constructs an empty <tt>ConcurrentHashMap</tt> with the specified initial\n+     * capacity and load factor.\n+     *\n+     * @param initialCapacity The initial capacity.\n+     * @param loadFactor The load factor.\n+     * @throws IllegalArgumentException if the initial capacity is negative\n+     * or the load factor is nonpositive.\n+     */\n+    public ConcurrentHashMap(int initialCapacity, float loadFactor) {\n+        if (initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n+                initialCapacity);\n+        }\n+        if (initialCapacity > MAXIMUM_CAPACITY)\n+            initialCapacity = MAXIMUM_CAPACITY;\n+        if (loadFactor <= 0 || loadFactor > 1) {\n+            throw new IllegalArgumentException(\"Illegal load factor: \" +\n+                loadFactor);\n+        }\n+\n+        // Find a power of 2 >= initialCapacity\n+        int capacity = 1;\n+        while (capacity < initialCapacity) capacity <<= 1;\n+\n+        this.loadFactor = loadFactor;\n+        threshold = (int) (capacity * loadFactor);\n+        table = new Entry[capacity];\n+    }\n+\n+    /**\n+     * Constructs an empty <tt>ConcurrentHashMap</tt> with the specified initial\n+     * capacity and the default load factor(0.75).\n+     *\n+     * @param initialCapacity the initial capacity.\n+     * @throws IllegalArgumentException if the initial capacity is negative.\n+     */\n+    public ConcurrentHashMap(int initialCapacity) {\n+        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    /**\n+     * Constructs an empty <tt>ConcurrentHashMap</tt> with the default initial\n+     * capacity(16) and the default load factor(0.75).\n+     */\n+    public ConcurrentHashMap() {\n+        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    /**\n+     * Constructs a new <tt>ConcurrentHashMap</tt> with the same mappings as the\n+     * specified <tt>Map</tt>. The <tt>ConcurrentHashMap</tt> is created with\n+     * default load factor(0.75) and an initial capacity sufficient to\n+     * hold the mappings in the specified <tt>Map</tt>.\n+     *\n+     * @param m the map whose mappings are to be placed in this map.\n+     * @throws NullPointerException if the specified map is null.\n+     */\n+    public ConcurrentHashMap(Map m) {\n+        this(Math.max((int) (m.size() / DEFAULT_LOAD_FACTOR) + 1,\n+            DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);\n+        putAll(m);\n+    }\n+\n+    // internal utilities\n+\n+    /**\n+     * Value representing null keys inside tables.\n+     */\n+    private static final Object NULL_KEY = new Object();\n+\n+    /**\n+     * Returns internal representation for key. Use NULL_KEY if key is null.\n+     */\n+    private static Object maskNull(Object key) {\n+        return (key == null ? NULL_KEY : key);\n+    }\n+\n+    /**\n+     * Returns key represented by specified internal representation.\n+     */\n+    private static Object unmaskNull(Object key) {\n+        return (key == NULL_KEY ? null : key);\n+    }\n+\n+    /**\n+     * Returns a hash code for non-null Object x.\n+     */\n+    private static int hash(Object x) {\n+        int h = x.hashCode();\n+        return h - (h << 7); // i.e., -127 * h\n+    }\n+\n+    /**\n+     * Check for equality of non-null reference x and possibly-null y.\n+     */\n+    private static boolean eq(Object x, Object y) {\n+        return x == y || x.equals(y);\n+    }\n+\n+    /**\n+     * Returns the current capacity of backing table in this map.\n+     *\n+     * @return the current capacity of backing table in this map.\n+     */\n+    public final int capacity() {\n+        return table.length;\n+    }\n+\n+    /**\n+     * Returns the load factor for this map.\n+     *\n+     * @return the load factor for this map.\n+     */\n+    public final float loadFactor() {\n+        return loadFactor;\n+    }\n+\n+    public int getMaxSize() {\n+        return maxSize;\n+    }\n+\n+    public void setMaxSize(int maxSize) {\n+        this.maxSize = (maxSize < 0) ? Integer.MAX_VALUE : maxSize;\n+        if (this.maxSize != Integer.MAX_VALUE)\n+            removeOverflow(this.maxSize);\n+    }\n+\n+    public boolean isFull() {\n+        return maxSize != Integer.MAX_VALUE && size() >= maxSize;\n+    }\n+\n+    public void overflowRemoved(Object key, Object value) {\n+    }\n+\n+    /**\n+     * Returns the number of key-value mappings in this map.\n+     *\n+     * @return the number of key-value mappings in this map.\n+     */\n+    public final int size() {\n+        return size;\n+    }\n+\n+    /**\n+     * Returns <tt>true</tt> if this map contains no key-value mappings.\n+     *\n+     * @return <tt>true</tt> if this map contains no key-value mappings.\n+     */\n+    public final boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    /**\n+     * Returns the value to which the specified key is mapped in this identity\n+     * hash map, or <tt>null</tt> if the map contains no mapping for this key.\n+     * A return value of <tt>null</tt> does not <i>necessarily</i> indicate\n+     * that the map contains no mapping for the key; it is also possible that\n+     * the map explicitly maps the key to <tt>null</tt>. The\n+     * <tt>containsKey</tt> method may be used to distinguish these two cases.\n+     *\n+     * @param key the key whose associated value is to be returned.\n+     * @return the value to which this map maps the specified key, or\n+     * <tt>null</tt> if the map contains no mapping for this key.\n+     * @see #put(Object, Object)\n+     */\n+    public Object get(Object key) {\n+        Entry e = getEntry(key);\n+        return e == null ? null : e.value;\n+    }\n+\n+    /**\n+     * Returns <tt>true</tt> if this map contains a mapping for the\n+     * specified key.\n+     *\n+     * @param key The key whose presence in this map is to be tested\n+     * @return <tt>true</tt> if this map contains a mapping for the specified\n+     * key.\n+     */\n+    public final boolean containsKey(Object key) {\n+        return getEntry(key) != null;\n+    }\n+\n+    /**\n+     * Returns the entry associated with the specified key in the\n+     * ConcurrentHashMap. Returns null if the ConcurrentHashMap contains no\n+     * mapping for this key.\n+     */\n+    protected Entry getEntry(Object key) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        Entry[] tab = table;\n+        for (Entry e = tab[hash & (tab.length - 1)]; e != null; e = e.next) {\n+            if (e.hash == hash && eq(k, e.key)) return e;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Associates the specified value with the specified key in this map.\n+     * If the map previously contained a mapping for this key, the old\n+     * value is replaced.\n+     *\n+     * @param key key with which the specified value is to be associated.\n+     * @param value value to be associated with the specified key.\n+     * @return previous value associated with specified key, or <tt>null</tt>\n+     * if there was no mapping for key. A <tt>null</tt> return can\n+     * also indicate that the ConcurrentHashMap previously associated\n+     * <tt>null</tt> with the specified key.\n+     */\n+    public Object put(Object key, Object value) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+\n+            for (Entry e = table[i]; e != null; e = e.next) {\n+                if (e.hash == hash && eq(k, e.key)) {\n+                    Object oldValue = e.value;\n+                    e.value = value;\n+                    return oldValue;\n+                }\n+            }\n+\n+            if (maxSize != Integer.MAX_VALUE)\n+                removeOverflow(maxSize - 1);\n+            table[i] = createEntry(hash, k, value, table[i]);\n+            if (size++ >= threshold) resize(2 * table.length);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove any entries equal to or over the max size.\n+     */\n+    private void removeOverflow(int maxSize) {\n+        while (size > maxSize) {\n+            Map.Entry entry = removeRandom();\n+            if (entry == null)\n+                break;\n+            overflowRemoved(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public Object putIfAbsent(Object key, Object value) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+\n+            for (Entry e = table[i]; e != null; e = e.next) {\n+                if (e.hash == hash && eq(k, e.key)) {\n+                    return e.value;\n+                }\n+            }\n+\n+            if (maxSize != Integer.MAX_VALUE)\n+                removeOverflow(maxSize - 1);\n+            table[i] = createEntry(hash, k, value, table[i]);\n+            if (size++ >= threshold) resize(2 * table.length);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Rehashes the contents of this map into a new <tt>ConcurrentHashMap</tt>\n+     * instance with a larger capacity. This method is called automatically when\n+     * the number of keys in this map exceeds its capacity and load factor.\n+     *\n+     * @param newCapacity the new capacity, MUST be a power of two.\n+     */\n+    private void resize(int newCapacity) {\n+        // assert(newCapacity & -newCapacity) == newCapacity; // power of 2\n+        Entry[] oldTable = table;\n+        int oldCapacity = oldTable.length;\n+\n+        // check if needed\n+        if (size < threshold || oldCapacity > newCapacity) return;\n+\n+        Entry[] newTable = new Entry[newCapacity];\n+        int mask = newCapacity - 1;\n+        for (int i = oldCapacity; i-- > 0;) {\n+            for (Entry e = oldTable[i]; e != null; e = e.next) {\n+                Entry clone = (Entry) e.clone();\n+                int j = clone.hash & mask;\n+                clone.next = newTable[j];\n+                newTable[j] = clone;\n+            }\n+        }\n+        table = newTable;\n+        threshold = (int) (newCapacity * loadFactor);\n+    }\n+\n+    /**\n+     * Copies all of the mappings from the specified map to this map\n+     * These mappings will replace any mappings that\n+     * this map had for any of the keys currently in the specified map.\n+     *\n+     * @param t mappings to be stored in this map.\n+     * @throws NullPointerException if the specified map is null.\n+     */\n+    public final synchronized void putAll(Map t) {\n+        // Expand enough to hold t's elements without resizing.\n+        int n = t.size();\n+        if (n == 0) return;\n+        if (n >= threshold) {\n+            n = (int) (n / loadFactor + 1);\n+            if (n > MAXIMUM_CAPACITY) n = MAXIMUM_CAPACITY;\n+            int capacity = table.length;\n+            while (capacity < n) capacity <<= 1;\n+            resize(capacity);\n+        }\n+\n+        for (Iterator i = t.entrySet().iterator(); i.hasNext();) {\n+            Map.Entry e = (Map.Entry) i.next();\n+            put(e.getKey(), e.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Removes the mapping for this key from this map if present.\n+     *\n+     * @param key key whose mapping is to be removed from the map.\n+     * @return previous value associated with specified key, or <tt>null</tt>\n+     * if there was no mapping for key. A <tt>null</tt> return can\n+     * also indicate that the map previously associated <tt>null</tt>\n+     * with the specified key.\n+     */\n+    public Object remove(Object key) {\n+        Entry e = removeEntryForKey(key);\n+        return (e == null ? e : e.value);\n+    }\n+\n+    /**\n+     * Removes and returns the entry associated with the specified key in the\n+     * ConcurrentHashMap. Returns null if the ConcurrentHashMap contains no\n+     * mapping for this key.\n+     */\n+    private Entry removeEntryForKey(Object key) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+            Entry e = table[i];\n+\n+            if (e == null) return null;\n+            if (e.hash == hash && eq(k, e.key)) {\n+                size--;\n+                table[i] = e.next;\n+                return e;\n+            }\n+\n+            Entry prev = e;\n+            for (e = e.next; e != null; prev = e, e = e.next) {\n+                if (e.hash == hash && eq(k, e.key)) {\n+                    size--;\n+                    prev.next = e.next;\n+                    return e;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Special version of remove for EntrySet.\n+     */\n+    private Entry removeMapping(Object o) {\n+        if (!(o instanceof Map.Entry)) return null;\n+\n+        Map.Entry entry = (Map.Entry) o;\n+        Object k = maskNull(entry.getKey());\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+            Entry e = table[i];\n+\n+            if (e == null) return null;\n+            if (e.hash == hash && e.equals(entry)) {\n+                size--;\n+                table[i] = e.next;\n+                return e;\n+            }\n+\n+            Entry prev = e;\n+            for (e = e.next; e != null; prev = e, e = e.next) {\n+                if (e.hash == hash && e.equals(entry)) {\n+                    size--;\n+                    prev.next = e.next;\n+                    return e;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Removes all mappings from this map.\n+     */\n+    public synchronized void clear() {\n+        table = new Entry[table.length];\n+        size = 0;\n+    }\n+\n+    /**\n+     * Return an arbitrary entry index.\n+     */\n+    private int randomEntryIndex() {\n+        if (randomEntry == RANDOMS.length)\n+            randomEntry = 0;\n+        return (int) (RANDOMS[randomEntry++] * table.length);\n+    }\n+\n+    public Map.Entry removeRandom() {\n+        if (size == 0)\n+            return null;\n+\n+        synchronized (this) {\n+            int random = randomEntryIndex();\n+            int index = findEntry(random, random % 2 == 0, false);\n+            if (index == -1)\n+                return null;\n+            Entry rem = table[index];\n+            table[index] = rem.next;\n+            size--;\n+            return rem;\n+        }\n+    }\n+\n+    /**\n+     * Find the index of the entry nearest the given index, starting in the\n+     * given direction.\n+     */\n+    private int findEntry(int start, boolean forward, boolean searchedOther) {\n+        if (forward) {\n+            for (int i = start; i < table.length; i++)\n+                if (table[i] != null)\n+                    return i;\n+            return (searchedOther || start == 0) ? -1\n+                : findEntry(start - 1, false, true);\n+        } else {\n+            for (int i = start; i >= 0; i--)\n+                if (table[i] != null)\n+                    return i;\n+            return (searchedOther || start == table.length - 1) ? -1\n+                : findEntry(start + 1, true, true);\n+        }\n+    }\n+\n+    public Iterator randomEntryIterator() {\n+        // pass index so calculated before iterator refs table, in case table\n+        // gets replace with a larger one\n+        return new HashIterator(ENTRIES, randomEntryIndex());\n+    }\n+\n+    /**\n+     * Returns <tt>true</tt> if this map maps one or more keys to the\n+     * specified value.\n+     *\n+     * @param value value whose presence in this map is to be tested.\n+     * @return <tt>true</tt> if this map maps one or more keys to the\n+     * specified value.\n+     */\n+    public final boolean containsValue(Object value) {\n+        if (value == null) return containsNullValue();\n+\n+        Entry tab[] = table;\n+        for (int i = 0; i < tab.length; i++) {\n+            for (Entry e = tab[i]; e != null; e = e.next) {\n+                if (value.equals(e.value)) return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Special-case code for containsValue with null argument\n+     */\n+    private boolean containsNullValue() {\n+        Entry tab[] = table;\n+        for (int i = 0; i < tab.length; i++) {\n+            for (Entry e = tab[i]; e != null; e = e.next) {\n+                if (e.value == null) return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a shallow copy of this <tt>ConcurrentHashMap</tt> instance: the\n+     * keys and values themselves are not cloned.\n+     *\n+     * @return a shallow copy of this map.\n+     */\n+    public final Object clone() {\n+        return new ConcurrentHashMap(this);\n+    }\n+\n+    protected Entry createEntry(int h, Object k, Object v, Entry n) {\n+        return new Entry(h, k, v, n);\n+    }\n+\n+    protected static class Entry implements Map.Entry {\n+\n+        final Object key;\n+        Object value;\n+        final int hash;\n+        Entry next;\n+\n+        /**\n+         * Create new entry.\n+         */\n+        protected Entry(int h, Object k, Object v, Entry n) {\n+            value = v;\n+            next = n;\n+            key = k;\n+            hash = h;\n+        }\n+\n+        public Object getKey() {\n+            return unmaskNull(key);\n+        }\n+\n+        public Object getValue() {\n+            return value;\n+        }\n+\n+        public Object setValue(Object newValue) {\n+            Object oldValue = value;\n+            value = newValue;\n+            return oldValue;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+            Object k1 = getKey();\n+            Object k2 = e.getKey();\n+            if (k1 == k2 || (k1 != null && k1.equals(k2))) {\n+                Object v1 = getValue();\n+                Object v2 = e.getValue();\n+                if (v1 == v2 || (v1 != null && v1.equals(v2)))\n+                    return true;\n+            }\n+            return false;\n+        }\n+\n+        public int hashCode() {\n+            return (key == NULL_KEY ? 0 : key.hashCode()) ^\n+                (value == null ? 0 : value.hashCode());\n+        }\n+\n+        public String toString() {\n+            return getKey() + \"=\" + getValue();\n+        }\n+\n+        protected Object clone() {\n+            // It is the callers responsibility to set the next field\n+            // correctly.\n+            return new Entry(hash, key, value, null);\n+        }\n+    }\n+\n+    // Types of Enumerations/Iterations\n+    private static final int KEYS = 0;\n+    private static final int VALUES = 1;\n+    private static final int ENTRIES = 2;\n+\n+    /**\n+     * Map iterator.\n+     */\n+    private class HashIterator implements Iterator {\n+\n+        final Entry[] table = ConcurrentHashMap.this.table;\n+        final int type;\n+        int startIndex;\n+        int stopIndex = 0;\n+        int index;\n+        Entry entry = null;\n+        Entry lastReturned = null;\n+\n+        HashIterator(int type, int startIndex) {\n+            this.type = type;\n+            this.startIndex = startIndex;\n+            index = startIndex;\n+        }\n+\n+        public boolean hasNext() {\n+            if (entry != null) {\n+                return true;\n+            }\n+            while (index >= stopIndex) {\n+                if ((entry = table[index--]) != null) {\n+                    return true;\n+                }\n+            }\n+            if (stopIndex == 0) {\n+                index = table.length - 1;\n+                stopIndex = startIndex + 1;\n+                while (index >= stopIndex) {\n+                    if ((entry = table[index--]) != null) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        public Object next() {\n+            if (!hasNext())\n+                throw new NoSuchElementException();\n+            Entry e = lastReturned = entry;\n+            entry = e.next;\n+            return type == KEYS ? e.key : (type == VALUES ? e.value : e);\n+        }\n+\n+        public void remove() {\n+            if (lastReturned == null)\n+                throw new IllegalStateException();\n+            synchronized (ConcurrentHashMap.this) {\n+                Entry[] tab = ConcurrentHashMap.this.table;\n+                int index = (lastReturned.hash & 0x7FFFFFFF) % tab.length;\n+\n+                for (Entry e = tab[index], prev = null; e != null;\n+                    prev = e, e = e.next) {\n+                    if (e == lastReturned) {\n+                        if (prev == null)\n+                            tab[index] = e.next;\n+                        else\n+                            prev.next = e.next;\n+                        size--;\n+                        lastReturned = null;\n+                        return;\n+                    }\n+                }\n+                throw new Error(\"Iterated off table when doing remove\");\n+            }\n+        }\n+    }\n+\n+    // Views\n+\n+    private transient Set entrySet = null;\n+    private transient Set keySet = null;\n+    private transient Collection values = null;\n+\n+    /**\n+     * Returns a set view of the keys contained in this map. The set is\n+     * backed by the map, so changes to the map are reflected in the set, and\n+     * vice-versa. The set supports element removal, which removes the\n+     * corresponding mapping from this map, via the <tt>Iterator.remove</tt>,\n+     * <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and\n+     * <tt>clear</tt> operations. It does not support the <tt>add</tt> or\n+     * <tt>addAll</tt> operations.\n+     *\n+     * @return a set view of the keys contained in this map.\n+     */\n+    public final Set keySet() {\n+        Set ks = keySet;\n+        return (ks != null ? ks : (keySet = new KeySet()));\n+    }\n+\n+    private final class KeySet extends AbstractSet {\n+\n+        public Iterator iterator() {\n+            return new HashIterator(KEYS, table.length - 1);\n+        }\n+\n+        public int size() {\n+            return size;\n+        }\n+\n+        public boolean contains(Object o) {\n+            return containsKey(o);\n+        }\n+\n+        public boolean remove(Object o) {\n+            return ConcurrentHashMap.this.removeEntryForKey(o) != null;\n+        }\n+\n+        public void clear() {\n+            ConcurrentHashMap.this.clear();\n+        }\n+    }\n+\n+    /**\n+     * Returns a collection view of the values contained in this map. The\n+     * collection is backed by the map, so changes to the map are reflected in\n+     * the collection, and vice-versa. The collection supports element\n+     * removal, which removes the corresponding mapping from this map, via the\n+     * <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,\n+     * <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.\n+     * It does not support the <tt>add</tt> or <tt>addAll</tt> operations.\n+     *\n+     * @return a collection view of the values contained in this map.\n+     */\n+    public final Collection values() {\n+        Collection vs = values;\n+        return (vs != null ? vs : (values = new Values()));\n+    }\n+\n+    private final class Values extends AbstractCollection {\n+\n+        public Iterator iterator() {\n+            return new HashIterator(VALUES, table.length - 1);\n+        }\n+\n+        public int size() {\n+            return size;\n+        }\n+\n+        public boolean contains(Object o) {\n+            return containsValue(o);\n+        }\n+\n+        public void clear() {\n+            ConcurrentHashMap.this.clear();\n+        }\n+    }\n+\n+    /**\n+     * Returns a collection view of the mappings contained in this map. Each\n+     * element in the returned collection is a <tt>Map.Entry</tt>. The\n+     * collection is backed by the map, so changes to the map are reflected in\n+     * the collection, and vice-versa. The collection supports element\n+     * removal, which removes the corresponding mapping from the map, via the\n+     * <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,\n+     * <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.\n+     * It does not support the <tt>add</tt> or <tt>addAll</tt> operations.\n+     *\n+     * @return a collection view of the mappings contained in this map.\n+     * @see Map.Entry\n+     */\n+    public final Set entrySet() {\n+        Set es = entrySet;\n+        return (es != null ? es : (entrySet = new EntrySet()));\n+    }\n+\n+    private final class EntrySet extends AbstractSet {\n+\n+        public Iterator iterator() {\n+            return new HashIterator(ENTRIES, table.length - 1);\n+        }\n+\n+        public boolean contains(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+            Entry candidate = getEntry(e.getKey());\n+            return candidate != null && candidate.equals(e);\n+        }\n+\n+        public boolean remove(Object o) {\n+            return removeMapping(o) != null;\n+        }\n+\n+        public int size() {\n+            return size;\n+        }\n+\n+        public void clear() {\n+            ConcurrentHashMap.this.clear();\n+        }\n+    }\n+\n+    /**\n+     * Save the state of the <tt>ConcurrentHashMap</tt> instance to a stream\n+     * (i.e., serialize it).\n+     *\n+     * @serialData The <i>capacity</i> of the ConcurrentHashMap(the length of\n+     * the bucket array) is emitted(int), followed by the <i>size</i> of the\n+     * ConcurrentHashMap(the number of key-value mappings), followed by the key\n+     * (Object) and value(Object) for each key-value mapping represented by the\n+     * ConcurrentHashMap The key-value mappings are emitted in the order that\n+     * they are returned by <tt>entrySet().iterator()</tt>.\n+     */\n+    private void writeObject(ObjectOutputStream s) throws IOException {\n+        // Write out the threshold, loadfactor, and any hidden stuff\n+        s.defaultWriteObject();\n+\n+        // Write out number of buckets\n+        s.writeInt(table.length);\n+\n+        // Write out size(number of Mappings)\n+        s.writeInt(size);\n+        s.writeInt(maxSize);\n+\n+        // Write out keys and values(alternating)\n+        for (Iterator i = entrySet().iterator(); i.hasNext();) {\n+            Map.Entry e = (Map.Entry) i.next();\n+            s.writeObject(e.getKey());\n+            s.writeObject(e.getValue());\n+        }\n+    }\n+\n+    private static final long serialVersionUID = -6452706556724125778L;\n+\n+    /**\n+     * Reconstitute the <tt>ConcurrentHashMap</tt> instance from a stream(i.e.,\n+     * deserialize it).\n+     */\n+    private void readObject(ObjectInputStream s)\n+        throws IOException, ClassNotFoundException {\n+        // Read in the threshold, loadfactor, and any hidden stuff\n+        s.defaultReadObject();\n+\n+        // Read in number of buckets and allocate the bucket array;\n+        int numBuckets = s.readInt();\n+        table = new Entry[numBuckets];\n+\n+        // Read in size(number of Mappings)\n+        int size = s.readInt();\n+        \n+        // read the max size\n+        maxSize = s.readInt();\n+\n+        // Read the keys and values, and put the mappings in the\n+        // ConcurrentHashMap\n+        for (int i = 0; i < size; i++) {\n+            Object key = s.readObject();\n+            Object value = s.readObject();\n+            put(key, value);\n+        }\n+    }\n+}"},{"sha":"08c6c3cc7cb13f1a220be2176cc25026a2debef9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","status":"modified","additions":189,"deletions":14,"changes":203,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,13 +19,17 @@\n package org.apache.openjpa.lib.util.concurrent;\r\n \r\n import java.util.concurrent.ConcurrentHashMap;\r\n-import java.util.Map;\r\n import java.util.Enumeration;\r\n import java.util.Set;\r\n import java.util.Collection;\r\n import java.util.AbstractSet;\r\n import java.util.Iterator;\r\n import java.util.AbstractCollection;\r\n+import java.util.Random;\r\n+import java.util.HashSet;\r\n+import java.util.TreeSet;\r\n+\r\n+import org.apache.commons.collections.set.MapBackedSet;\r\n \r\n /**\r\n  * A subclass of {@link ConcurrentHashMap} that allows null keys and values.\r\n@@ -36,10 +40,20 @@\n  */\r\n public class NullSafeConcurrentHashMap extends ConcurrentHashMap {\r\n \r\n-    private enum Null {\r\n-        MARKER\r\n+    private enum Markers {\r\n+        NULL,\r\n+        MAP_BACKED_SET_DUMMY_VAL\r\n     }\r\n \r\n+    // The second argument is used within MapBackedSet as the value for\r\n+    // all the key-val pairs that are put into the underlying Map. This\r\n+    // is required for our usage since ConcurrentHashMap does not allow\r\n+    // null values.\r\n+    private Set randomKeys = MapBackedSet.decorate(\r\n+        new ConcurrentHashMap(), Markers.MAP_BACKED_SET_DUMMY_VAL);\r\n+\r\n+    private Random random = new Random();\r\n+\r\n     public NullSafeConcurrentHashMap(int size, float load,\r\n         int concurrencyLevel) {\r\n         super(size, load, concurrencyLevel);\r\n@@ -52,24 +66,136 @@ public NullSafeConcurrentHashMap() {\n      * Returns internal representation for object.\r\n      */\r\n     private static Object maskNull(Object o) {\r\n-        return (o == null ? Null.MARKER : o);\r\n+        return (o == null ? Markers.NULL : o);\r\n     }\r\n \r\n     /**\r\n      * Returns object represented by specified internal representation.\r\n      */\r\n     private static Object unmaskNull(Object o) {\r\n-        return (o == Null.MARKER ? null : o);\r\n+        return (o == Markers.NULL ? null : o);\r\n+    }\r\n+\r\n+    public Entry removeRandom() {\r\n+        // this doesn't just use randomEntryIterator() because that iterator\r\n+        // has weaker concurrency guarantees than this method. In particular,\r\n+        // this method will continue to attempt to remove random entries even\r\n+        // as other threads remove the same entries, whereas the random\r\n+        // iterator may return values that have been removed.\r\n+\r\n+        for (Iterator iter = randomKeys.iterator(); iter.hasNext(); ) {\r\n+            // randomKeys contains null-masked data\r\n+            Object key = iter.next();\r\n+            if (key != null && randomKeys.remove(key)) {\r\n+                Object val = super.remove(key);\r\n+                if (val != null)\r\n+                    return new EntryImpl(unmaskNull(key), unmaskNull(val));\r\n+            }\r\n+        }\r\n+\r\n+        // if randomKeys is empty, fall back to non-random behavior.\r\n+        for (Iterator iter = super.keySet().iterator(); iter.hasNext(); ) {\r\n+            Object key = iter.next();\r\n+            if (key == null)\r\n+                continue;\r\n+            Object val = super.remove(key);\r\n+            if (val != null)\r\n+                return new EntryImpl(unmaskNull(key), unmaskNull(val));\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * The returned data structure should not be shared among multiple\r\n+     * threads.\r\n+     */\r\n+    public Iterator<Entry> randomEntryIterator() {\r\n+        return new Iterator<Entry>() {\r\n+\r\n+            Iterator randomIter = randomKeys.iterator();\r\n+            Iterator nonRandomIter = NullSafeConcurrentHashMap.super.keySet()\r\n+                .iterator();\r\n+\r\n+            Set returned = new HashSet();\r\n+            Entry next;\r\n+            boolean nextSet = false;\r\n+\r\n+            public boolean hasNext() {\r\n+                // we've set the next value and we haven't returned it yet\r\n+                if (nextSet)\r\n+                    return true;\r\n+\r\n+                // compute the next value. If the computation returns null,\r\n+                // return false. Else, store the next value and return true.\r\n+                Object nextKey;\r\n+                Object nextValue;\r\n+                if (randomIter.hasNext()) {\r\n+                    nextKey = randomIter.next();\r\n+                    nextValue = NullSafeConcurrentHashMap.super.get(nextKey);\r\n+                    if (nextValue != null) {\r\n+                        returned.add(nextKey);\r\n+                        next = new EntryImpl(unmaskNull(nextKey),\r\n+                            unmaskNull(nextValue));\r\n+                        nextSet = true;\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+\r\n+                while (nonRandomIter.hasNext()) {\r\n+                    nextKey = nonRandomIter.next();\r\n+\r\n+                    if (returned.contains(nextKey))\r\n+                        continue;\r\n+\r\n+                    nextValue = NullSafeConcurrentHashMap.super.get(nextKey);\r\n+                    if (nextValue != null) {\r\n+                        returned.add(nextKey);\r\n+                        next = new EntryImpl(unmaskNull(nextKey),\r\n+                            unmaskNull(nextValue));\r\n+                        nextSet = true;\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                return false;\r\n+            }\r\n+\r\n+            public Entry next() {\r\n+                // hasNext() will initialize this.next\r\n+                if (!nextSet && !hasNext())\r\n+                    return null;\r\n+\r\n+                // if we get here, then we're about to return a next value\r\n+                nextSet = false;\r\n+                \r\n+                if (containsKey(next.getKey()))\r\n+                    return next;\r\n+\r\n+                // something has changed since the last iteration (presumably\r\n+                // due to multi-threaded access to the underlying data\r\n+                // structure); recurse\r\n+                return next();\r\n+            }\r\n+\r\n+            public void remove() {\r\n+                throw new UnsupportedOperationException();\r\n+            }\r\n+        };\r\n     }\r\n \r\n     @Override\r\n     public Object remove(Object key) {\r\n-        return unmaskNull(super.remove(maskNull(key)));\r\n+        Object maskedKey = maskNull(key);\r\n+        Object val = unmaskNull(super.remove(maskedKey));\r\n+        randomKeys.remove(maskedKey);\r\n+        return val;\r\n     }\r\n \r\n     @Override\r\n     public boolean remove(Object key, Object value) {\r\n-        return super.remove(maskNull(key), maskNull(value));\r\n+        Object maskedKey = maskNull(key);\r\n+        boolean val = super.remove(maskedKey, maskNull(value));\r\n+        randomKeys.remove(maskedKey);\r\n+        return val;\r\n     }\r\n \r\n     @Override\r\n@@ -85,12 +211,34 @@ public Object replace(Object key, Object value) {\n \r\n     @Override\r\n     public Object putIfAbsent(Object key, Object value) {\r\n-        return unmaskNull(super.putIfAbsent(maskNull(key), maskNull(value)));\r\n+        Object maskedKey = maskNull(key);\r\n+        Object superVal = super.putIfAbsent(maskedKey, maskNull(value));\r\n+        addRandomKey(maskedKey);\r\n+        return unmaskNull(superVal);\r\n     }\r\n \r\n     @Override\r\n     public Object put(Object key, Object value) {\r\n-        return unmaskNull(super.put(maskNull(key), maskNull(value)));\r\n+        Object maskedKey = maskNull(key);\r\n+        Object superVal = super.put(maskedKey, maskNull(value));\r\n+        addRandomKey(maskedKey);\r\n+        return unmaskNull(superVal);\r\n+    }\r\n+\r\n+    /**\r\n+     * Potentially adds <code>maskedKey</ccode> to the set of random keys\r\n+     * to be removed by {@link #removeRandom()}.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    private void addRandomKey(Object maskedKey) {\r\n+        // Add one in every three keys to the set. Only do this when\r\n+        // there are less than 16 elements in the random key set; this\r\n+        // means that the algorithm will be pseudo-random for up to\r\n+        // 16 removes (either via removeRandom() or normal remove()\r\n+        // calls) that have no intervening put() calls.\r\n+        if (random != null && randomKeys.size() < 16 && random.nextInt(10) < 3)\r\n+            randomKeys.add(maskedKey);\r\n     }\r\n \r\n     @Override\r\n@@ -160,11 +308,6 @@ protected Object unmask(Object internal) {\n         };\r\n     }\r\n \r\n-    @Override\r\n-    public void putAll(Map t) {\r\n-        super.putAll(t);\r\n-    }\r\n-\r\n     @Override\r\n     public Collection values() {\r\n         return new TranslatingCollection(super.values()) {\r\n@@ -238,4 +381,36 @@ public int size() {\n             return backingCollection.size();\r\n         }\r\n     }\r\n+\r\n+    private class EntryImpl implements Entry {\r\n+\r\n+        final Object key;\r\n+        final Object val;\r\n+\r\n+        private EntryImpl(Object key, Object val) {\r\n+            this.key = key;\r\n+            this.val = val;\r\n+        }\r\n+\r\n+        public Object getKey() {\r\n+            return key;\r\n+        }\r\n+\r\n+        public Object getValue() {\r\n+            return val;\r\n+        }\r\n+\r\n+        public Object setValue(Object value) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+    }\r\n+\r\n+    public interface KeyFilter {\r\n+\r\n+        /**\r\n+         * @param key may be null\r\n+         * @return whether or not <code>key</code> shuold be excluded\r\n+         */\r\n+        public boolean exclude(Object key);\r\n+    }\r\n }\r"},{"sha":"c31e26ddcd1ec3546f8b101e744d4deab55d41ba","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","status":"modified","additions":18,"deletions":42,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -56,18 +56,16 @@ public SizedConcurrentHashMap(int size, float load, int concurrencyLevel) {\n \r\n     @Override\r\n     public Object putIfAbsent(Object key, Object value) {\r\n-        Object o = super.putIfAbsent(key, value);\r\n         if (maxSize != Integer.MAX_VALUE)\r\n-            removeOverflow();\r\n-        return o;\r\n+            removeOverflow(true);\r\n+        return super.putIfAbsent(key, value);\r\n     }\r\n \r\n     @Override\r\n     public Object put(Object key, Object value) {\r\n-        Object o = super.put(key, value);\r\n         if (maxSize != Integer.MAX_VALUE)\r\n-            removeOverflow();\r\n-        return o;\r\n+            removeOverflow(true);\r\n+        return super.put(key, value);\r\n     }\r\n \r\n     public int getMaxSize() {\r\n@@ -79,11 +77,23 @@ public void setMaxSize(int max) {\n             throw new IllegalArgumentException(String.valueOf(max));\r\n         maxSize = max;\r\n \r\n-        removeOverflow();\r\n+        removeOverflow(false);\r\n     }\r\n \r\n+    /**\r\n+     * Equivalent to <code>removeOverflow(false)</code>.\r\n+     */\r\n     protected void removeOverflow() {\r\n-        while (size() > maxSize) {\r\n+        removeOverflow(false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Removes overflow. If <code>forPut</code> is <code>true</code>, then\r\n+     * this uses <code>size() + 1</code> when computing size.\r\n+     */\r\n+    protected void removeOverflow(boolean forPut) {\r\n+        int sizeToCompareTo = forPut ? maxSize - 1 : maxSize;\r\n+        while (size() > sizeToCompareTo) {\r\n             Entry entry = removeRandom();\r\n             // if removeRandom() returns null, break out of the loop. Of course,\r\n             // since we're not locking, the size might not actually be null\r\n@@ -99,40 +109,6 @@ public boolean isFull() {\n         return size() >= maxSize;\r\n     }\r\n \r\n-    public Map.Entry removeRandom() {\r\n-        // this isn't really random, but is concurrent.\r\n-        while (true) {\r\n-            if (size() == 0)\r\n-                return null;\r\n-            Set entries = entrySet();\r\n-            Entry e = (Entry) entries.iterator().next();\r\n-            final Object key = e.getKey();\r\n-            final Object val = e.getValue();\r\n-            if (remove(key) != null)\r\n-                // create a new Entry instance because the ConcurrentHashMap\r\n-                // implementation's one is \"live\" so does not behave as desired\r\n-                // after removing the entry.\r\n-                return new Entry() {\r\n-                    public Object getKey() {\r\n-                        return key;\r\n-                    }\r\n-\r\n-                    public Object getValue() {\r\n-                        return val;\r\n-                    }\r\n-\r\n-                    public Object setValue(Object value) {\r\n-                        throw new UnsupportedOperationException();\r\n-                    }\r\n-                };\r\n-        }\r\n-    }\r\n-\r\n-    public Iterator randomEntryIterator() {\r\n-        // this isn't really random, but is concurrent.\r\n-        return entrySet().iterator();\r\n-    }\r\n-\r\n     /**\r\n      * This implementation does nothing.\r\n      */\r"},{"sha":"e9a98f316fad7a69909d3890ee2e3709db48bb4c","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -114,3 +114,4 @@ Id-expert: true\n \n veto-change: Can not modify \"{0}\" because the property is not dynamic and the \\\n \tcurrent configuration is read-only.\n+jndi-lookup-failed: JNDI lookup for \"{0}\" with key \"{1}\" returned null.\n\\ No newline at end of file"},{"sha":"8e8777b5908eabdd8b8462961299bf9b2d83e1cb","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -33,13 +33,39 @@\n     public void testUniqueString() {\n         Set seen = new HashSet();\n         for (int i = 0; i < 10000; i++)\n-            assertTrue(seen.add(UUIDGenerator.nextString()));\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextString(UUIDGenerator.TYPE1)));\n     }\n \n     public void testUniqueHex() {\n         Set seen = new HashSet();\n         for (int i = 0; i < 10000; i++)\n-            assertTrue(seen.add(UUIDGenerator.nextHex()));\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextHex(UUIDGenerator.TYPE1)));\n+    }\n+\n+    public void testUniqueType4String() {\n+        Set seen = new HashSet();\n+        for (int i = 0; i < 10000; i++)\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextString(UUIDGenerator.TYPE4)));\n+    }\n+\n+    public void testUniqueType4Hex() {\n+        Set seen = new HashSet();\n+        for (int i = 0; i < 10000; i++)\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextHex(UUIDGenerator.TYPE4)));\n+    }\n+\n+    public void testUniqueMixedTypesHex() {\n+        Set seen = new HashSet();\n+        for (int i = 0; i < 10000; i++) {\n+            int type = (i % 2 == 0) ? \n+                UUIDGenerator.TYPE4 : UUIDGenerator.TYPE1;\n+            assertTrue(seen.add(\n+                UUIDGenerator.nextHex(type)));\n+        }\n     }\n \n     public void testGetTime() {"},{"sha":"f182e714e9b2d7a986248fd3c262dfe53eb8f040","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -41,7 +41,7 @@\n     private static final int SLEEP = 3;\n \n     private ConcurrentMap[] _maps = new ConcurrentMap[]{\n-        new SizedConcurrentHashMap(ENTRIES, .75f, 16),\n+        new SizedConcurrentHashMap(ENTRIES, .75f, 16), \n         new ConcurrentReferenceHashMap(ReferenceMap.HARD, ReferenceMap.HARD), };\n \n     public void setUp() throws Exception {"},{"sha":"74857be9be44fe56e21f4cf559e8858646f7aa40","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","status":"modified","additions":83,"deletions":30,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -19,34 +19,80 @@\n package org.apache.openjpa.lib.util.concurrent;\r\n \r\n import java.io.IOException;\r\n-import java.util.concurrent.ConcurrentMap;\r\n-import java.util.concurrent.ConcurrentHashMap;\r\n-import java.util.Iterator;\r\n import java.util.Set;\r\n import java.util.Collection;\r\n import java.util.Map;\r\n import java.util.HashMap;\r\n-import java.util.Enumeration;\r\n import java.util.Map.Entry;\r\n \r\n import org.apache.openjpa.lib.test.AbstractTestCase;\r\n \r\n public class TestNullSafeConcurrentHashMap extends AbstractTestCase {\r\n \r\n-    private Map newMap() {\r\n+    private NullSafeConcurrentHashMap newMap() {\r\n         return new NullSafeConcurrentHashMap();\r\n-//        return new HashMap();\r\n+    }\r\n+\r\n+    public void testRemoveRandomIsNotTotallyDeterministic() {\r\n+        removeHelper(false);\r\n+    }\r\n+\r\n+    public void testRandomIteratorIsNotTotallyDeterministic() {\r\n+        removeHelper(true);\r\n+    }\r\n+\r\n+    private void removeHelper(boolean iter) {\r\n+        Map<String,Integer> removedCounts = new HashMap();\r\n+        for (int i = 0; i < 1000; i++) {\r\n+            NullSafeConcurrentHashMap m = new NullSafeConcurrentHashMap();\r\n+            m.put(\"a\", \"A\");\r\n+            m.put(\"b\", \"B\");\r\n+            m.put(\"c\", \"C\");\r\n+            m.put(\"d\", \"D\");\r\n+            m.put(\"e\", \"E\");\r\n+            m.put(\"f\", \"F\");\r\n+            m.put(\"g\", \"G\");\r\n+\r\n+            String removed;\r\n+            if (iter) {\r\n+                removed = (String) m.removeRandom().getKey();\r\n+            } else {\r\n+                removed = (String) ((Entry) m.randomEntryIterator().next())\r\n+                    .getKey();\r\n+                m.remove(removed);\r\n+            }\r\n+\r\n+            Integer count = removedCounts.get(removed);\r\n+            if (count == null)\r\n+                removedCounts.put(removed, 1);\r\n+            else\r\n+                removedCounts.put(removed, count.intValue() + 1);\r\n+        }\r\n+\r\n+        // assume that over 1000 runs, every element should be removed at\r\n+        // least once, and no element should be removed more than 30% of\r\n+        // the time\r\n+        assertEquals(7, removedCounts.size());\r\n+        for (Entry<String,Integer> entry : removedCounts.entrySet()) {\r\n+            if (entry.getValue() == 0)\r\n+                fail(\"element \" + entry.getKey() + \" was never removed\");\r\n+            if (entry.getValue() > 500)\r\n+                fail(\"element \" + entry.getKey() + \" was removed \"\r\n+                    + entry.getValue() + \" times; this is greater than the \"\r\n+                    + \"threshold of 500.\");\r\n+        }\r\n     }\r\n \r\n     public void testNullKeys() throws ClassNotFoundException, IOException {\r\n-        Map m = newMap();\r\n-        helper(m, null, \"value 0\", \"value 1\", \"value 2\");\r\n+        helper(null, \"value 0\", \"value 1\", \"value 2\");\r\n     }\r\n \r\n-    private void helper(Map m, Object key, Object value0,\r\n+    private void helper(Object key, Object value0,\r\n         Object value1, Object value2)\r\n         throws IOException, ClassNotFoundException {\r\n \r\n+        NullSafeConcurrentHashMap m = newMap();\r\n+\r\n         // initial put\r\n         m.put(key, value0);\r\n \r\n@@ -77,50 +123,57 @@ private void helper(Map m, Object key, Object value0,\n \r\n         // put\r\n         assertEquals(value0, m.put(key, value1));\r\n-//        m.putAll(); #####\r\n \r\n         // remove\r\n         assertEquals(value1, m.put(key, value1));\r\n         assertEquals(value1, m.remove(key));\r\n         m.put(key, value1);\r\n \r\n         // ConcurrentMap stuff\r\n-        ConcurrentMap cm = (ConcurrentMap) m;\r\n-        assertFalse(cm.remove(\"invalid key\", value0));\r\n-        assertTrue(cm.remove(key, value1));\r\n-        assertNull(cm.putIfAbsent(key, value0)); // null == prev unset\r\n+        assertFalse(m.remove(\"invalid key\", value0));\r\n+        assertTrue(m.remove(key, value1));\r\n+        assertNull(m.putIfAbsent(key, value0)); // null == prev unset\r\n \r\n         // value0 might be null; can't disambiguate from above in OpenJPA\r\n         // interpretation\r\n-        assertEquals(value0, cm.putIfAbsent(key, \"invalid value\"));\r\n+        assertEquals(value0, m.putIfAbsent(key, \"invalid value\"));\r\n \r\n         // replace\r\n-        assertEquals(value0, cm.replace(key, value1));\r\n-        assertTrue(cm.replace(key, value1, value2));\r\n+        assertEquals(value0, m.replace(key, value1));\r\n+        assertTrue(m.replace(key, value1, value2));\r\n+\r\n+        // putAll. Note that ConcurrentHashMap happens to delegate to put()\r\n+        // from within putAll() calls. This test should help ensure that we\r\n+        // find out if that changes.\r\n+        m = newMap();\r\n+        Map putAllArg = new HashMap();\r\n+        putAllArg.put(key, value0);\r\n+        putAllArg.put(\"another key\", value1);\r\n+        m.putAll(putAllArg);\r\n+        assertEquals(value0, m.get(key));\r\n+        assertEquals(value1, m.get(\"another key\"));\r\n     }\r\n \r\n     public void testNullValues() throws ClassNotFoundException, IOException {\r\n-        Map m = newMap();\r\n-        nullValsHelper(m, \"foo\");\r\n+        nullValsHelper(\"foo\");\r\n     }\r\n \r\n-    private void nullValsHelper(Map m, Object key)\r\n+    private void nullValsHelper(Object key)\r\n         throws IOException, ClassNotFoundException {\r\n-        helper(m, key, null, null, null);\r\n-        helper(m, key, \"bar\", \"baz\", \"quux\");\r\n+        helper(key, null, null, null);\r\n+        helper(key, \"bar\", \"baz\", \"quux\");\r\n \r\n-        helper(m, key, \"bar\", \"baz\", null);\r\n-        helper(m, key, null, \"baz\", \"quux\");\r\n-        helper(m, key, \"bar\", null, \"quux\");\r\n+        helper(key, \"bar\", \"baz\", null);\r\n+        helper(key, null, \"baz\", \"quux\");\r\n+        helper(key, \"bar\", null, \"quux\");\r\n \r\n-        helper(m, key, \"bar\", null, null);\r\n-        helper(m, key, null, \"baz\", null);\r\n-        helper(m, key, null, null, \"quux\");\r\n+        helper(key, \"bar\", null, null);\r\n+        helper(key, null, \"baz\", null);\r\n+        helper(key, null, null, \"quux\");\r\n     }\r\n \r\n     public void testNullKeysAndValues()\r\n         throws ClassNotFoundException, IOException {\r\n-        Map m = newMap();\r\n-        nullValsHelper(m, null);\r\n+        nullValsHelper(null);\r\n     }\r\n }\r"},{"sha":"80eaed7f70584ef663b6679f60e84f1d55bcff56","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":15,"deletions":26,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -17,9 +17,10 @@\n  specific language governing permissions and limitations\n  under the License.   \n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!-- \n+    Maven release plugin requires the project tag to be on a single line. \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>org.apache.openjpa</groupId>\n     <artifactId>openjpa-persistence-jdbc</artifactId>\n@@ -30,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.1.0-SNAPSHOT</version>\n+        <version>1.2.0</version>\n     </parent>\n     <properties>\n         <openjpa.loglevel>INFO</openjpa.loglevel>\n@@ -58,8 +59,8 @@\n             <properties>\n                 <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n                 <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n-                <connection.username></connection.username>\n-                <connection.password></connection.password>\n+                <connection.username />\n+                <connection.password />\n             </properties>\n         </profile>\n \n@@ -79,7 +80,7 @@\n                 <connection.driver.name>org.hsqldb.jdbcDriver</connection.driver.name>\n                 <connection.url>jdbc:hsqldb:target/database/openjpa-hsqldb-database;create=true</connection.url>\n                 <connection.username>sa</connection.username>\n-                <connection.password></connection.password>\n+                <connection.password />\n             </properties>\n         </profile>\n \n@@ -282,25 +283,13 @@\n                     <execution>\n                         <phase>test-compile</phase>\n                         <configuration>\n-                            <tasks>\n-                                <ant antfile=\"src/main/ant/enhancer.xml\"\n-                                    target=\"enhance\"\n-                                    inheritRefs=\"true\">\n-                                    <!--\n-                                        InheritAll doesn't seem to work. Pass in\n-                                        properties manually.\n-                                    -->\n-                                    <property name=\"maven.test.skip\"\n-                                        value=\"${maven.test.skip}\" />\n-                                    <property name=\"test\"\n-                                        value=\"${test}\" />\n-                                    <property name=\"outdir\"\n-                                        value=\"${project.build.outputDirectory}\" />\n-                                    <property\n-                                        name=\"project.build.testOutputDirectory\"\n-                                        value=\"${project.build.testOutputDirectory}\" />\n-                                    <property name=\"openjpa.loglevel\"\n-                                        value=\"${openjpa.loglevel}\" />\n+                            <tasks>                           \n+                                <ant antfile=\"src/main/ant/enhancer.xml\" target=\"enhance\" inheritRefs=\"true\">\n+                                    <property name=\"maven.test.skip\" value=\"${maven.test.skip}\" />\n+                                    <property name=\"test\" value=\"${test}\" />\n+                                    <property name=\"outdir\" value=\"${project.build.outputDirectory}\" />\n+                                    <property name=\"project.build.testOutputDirectory\" value=\"${project.build.testOutputDirectory}\" />\n+                                    <property name=\"openjpa.loglevel\" value=\"${openjpa.loglevel}\" />\n                                 </ant>\n                             </tasks>\n                         </configuration>"},{"sha":"dd3030ecf1c2b2e1fecba2a588860645e48ae7c4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":54,"deletions":37,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -61,6 +61,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n@@ -80,6 +81,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.persistence.AnnotationPersistenceMetaDataParser;\n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n import org.apache.openjpa.util.InternalException;\n@@ -244,10 +246,16 @@ private void parseTableGenerator(AnnotatedElement el, TableGenerator gen) {\n         meta.setAllocate(gen.allocationSize());\n         meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n             meta.SRC_ANNOTATIONS);\n-\n-        //### EJB3\n-        if (gen.uniqueConstraints().length > 0 && log.isWarnEnabled())\n-            log.warn(_loc.get(\"unique-constraints\", name));\n+        \n+        switch (gen.uniqueConstraints().length) {\n+        case 0: \n+        \tbreak; // nothing to do\n+        case 1: \n+        \tmeta.setUniqueColumns(gen.uniqueConstraints()[0].columnNames());\n+        \tbreak;\n+        default:\n+        \tlog.warn(_loc.get(\"unique-many-on-seq-unsupported\", el, name));\n+        }\n     }\n \n     @Override\n@@ -464,8 +472,7 @@ private void parseSecondaryTables(ClassMapping cm,\n         Log log = getLog();\n \n         String name;\n-        List<Column> joins;\n-        boolean warnUnique = false;\n+        List<Column> joins = null;\n         for (SecondaryTable table : tables) {\n             name = table.name();\n             if (StringUtils.isEmpty(name))\n@@ -477,13 +484,11 @@ private void parseSecondaryTables(ClassMapping cm,\n                 for (PrimaryKeyJoinColumn join : table.pkJoinColumns())\n                     joins.add(newColumn(join));\n                 info.setSecondaryTableJoinColumns(name, joins);\n+            } else {\n+            \tinfo.addSecondaryTable(name);\n             }\n-            warnUnique |= table.uniqueConstraints().length > 0;\n+            addUniqueConstraints(name, cm, info, table.uniqueConstraints());\n         }\n-\n-        //### EJB3\n-        if (warnUnique && log.isWarnEnabled())\n-            log.warn(_loc.get(\"unique-constraints\", cm));\n     }\n \n     /**\n@@ -494,10 +499,38 @@ private void parseTable(ClassMapping cm, Table table) {\n         if (tableName != null)\n             cm.getMappingInfo().setTableName(tableName);\n \n-        for (UniqueConstraint uniqueConstraint:table.uniqueConstraints()) {\n-            Unique unique = newUnique(cm, null, uniqueConstraint.columnNames());\n-            cm.getMappingInfo().addUnique(unique);\n-        }\n+        addUniqueConstraints(tableName, cm, cm.getMappingInfo(), \n+        \t\ttable.uniqueConstraints());\n+    }\n+    \n+    Unique createUniqueConstraint(MetaDataContext ctx, UniqueConstraint anno) {\n+\t\tString[] columnNames = anno.columnNames();\n+\t\tif (columnNames == null || columnNames.length == 0)\n+\t\t\tthrow new UserException(_loc.get(\"unique-no-column\", ctx));\n+\t\tUnique uniqueConstraint = new Unique();\n+\t\tfor (int i=0; i<columnNames.length; i++) {\n+\t\t\tif (StringUtils.isEmpty(columnNames[i]))\n+\t\t\t\tthrow new UserException(_loc.get(\"unique-empty-column\", \n+\t\t\t\t\t\tArrays.toString(columnNames), ctx));\n+\t\t\tColumn column = new Column();\n+\t\t\tcolumn.setName(columnNames[i]);\n+\t\t\tuniqueConstraint.addColumn(column);\n+\t\t}\n+\t\treturn uniqueConstraint;\n+    }\n+    \n+    void addUniqueConstraints(String table, MetaDataContext ctx, \n+    \t\tMappingInfo info, UniqueConstraint...uniqueConstraints) {\n+    \tfor (UniqueConstraint anno : uniqueConstraints) {\n+    \t\tUnique unique = createUniqueConstraint(ctx, anno);\n+    \t\tunique.setTableName(table);\n+    \t\tif (info instanceof ClassMappingInfo)\n+    \t\t\t((ClassMappingInfo)info).addUnique(table, unique);\n+    \t\telse if (info instanceof FieldMappingInfo)\n+    \t\t\t((FieldMappingInfo)info).addJoinTableUnique(unique);\n+    \t\telse\n+    \t\t\tthrow new InternalException();\n+    \t}\n     }\n \n     /**\n@@ -1261,8 +1294,7 @@ protected void parseColumns(FieldMapping fm,\n             }\n \n             unique |= (pcols[i].unique()) ? TRUE : FALSE;\n-            secondary = trackSecondaryTable(fm, secondary,\n-                pcols[i].table(), i);\n+        \tsecondary = trackSecondaryTable(fm, secondary,\tpcols[i].table(), i);\n         }\n \n         setColumns(fm, fm.getValueInfo(), cols, unique);\n@@ -1337,11 +1369,13 @@ private String trackSecondaryTable(FieldMapping fm, String secondary,\n      * Parse @JoinTable.\n      */\n     private void parseJoinTable(FieldMapping fm, JoinTable join) {\n-        fm.getMappingInfo().setTableName(toTableName(join.schema(),\n-            join.name()));\n-        parseJoinColumns(fm, fm.getMappingInfo(), false, join.joinColumns());\n+    \tFieldMappingInfo info = fm.getMappingInfo();\n+        info.setTableName(toTableName(join.schema(), join.name()));\n+        parseJoinColumns(fm, info, false, join.joinColumns());\n         parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n             join.inverseJoinColumns());\n+        addUniqueConstraints(info.getTableName(), fm, info,  \n+        \t\tjoin.uniqueConstraints());\n     }\n \n     /**\n@@ -1617,21 +1651,4 @@ private static Column newColumn(ElementJoinColumn join) {\n \t\tcol.setFlag (Column.FLAG_UNUPDATABLE, !join.updatable ());\n \t\treturn col;\n \t}\n-    \n-    private static Unique newUnique(ClassMapping cm, String name, \n-        String[] columnNames) {\n-        if (columnNames == null || columnNames.length == 0)\n-            return null;\n-        Unique uniqueConstraint = new Unique();\n-        uniqueConstraint.setName(name);\n-        for (int i=0; i<columnNames.length; i++) {\n-            if (StringUtils.isEmpty(columnNames[i]))\n-                throw new UserException(_loc.get(\"empty-unique-column\", \n-                    Arrays.toString(columnNames), cm));\n-            Column column = new Column();\n-            column.setName(columnNames[i]);\n-            uniqueConstraint.addColumn(column);\n-        }\n-        return uniqueConstraint;\n-    }\n }"},{"sha":"493a8ee2b54713d5ec840d068f57feebb1735907","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -221,12 +221,12 @@ protected void serializeClassMappingContent(ClassMetaData mapping) {\n         AnnotationBuilder abTable = addAnnotation(Table.class, mapping);\n         serializeTable(info.getTableName(), Strings\n             .getClassName(mapping.getDescribedType()), null,\n-            info.getUniques(), abTable);\n+            info.getUniques(info.getTableName()), abTable);\n         serializeColumns(info, ColType.PK_JOIN, null, abTable, cls);\n         for (String second : info.getSecondaryTableNames()) {\n             AnnotationBuilder abSecTable =\n                 addAnnotation(SecondaryTable.class, mapping);\n-            serializeTable(second, null, info, null, abSecTable);\n+            serializeTable(second, null, info, info.getUniques(second), abSecTable);\n         }\n     }\n "},{"sha":"a63b407f1606e5a468a2465773cd626046452809","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":39,"deletions":10,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -39,6 +39,8 @@\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.meta.DiscriminatorMappingInfo;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n+import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n import org.apache.openjpa.jdbc.meta.SequenceMapping;\n@@ -56,6 +58,8 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\n+import org.apache.openjpa.util.InternalException;\n+\n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n \n /**\n@@ -293,6 +297,9 @@ protected void endClassMappingElement(String name)\n             case COLUMN_NAME:\n                 endColumnName();\n                 break;\n+            case TABLE_GEN:\n+            \tendTableGenerator();\n+            \tbreak;\n         }\n     }\n \n@@ -353,6 +360,8 @@ private boolean startSecondaryTable(Attributes attrs)\n         throws SAXException {\n         _secondaryTable = toTableName(attrs.getValue(\"schema\"),\n             attrs.getValue(\"name\"));\n+        ((ClassMapping)currentElement()).getMappingInfo()\n+        \t.addSecondaryTable(_secondaryTable);\n         return true;\n     }\n \n@@ -405,8 +414,13 @@ private boolean startTableGenerator(Attributes attrs) {\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n         seq.setSource(getSourceFile(), scope, seq.SRC_XML);\n+        pushElement(seq);\n         return true;\n     }\n+    \n+    private void endTableGenerator() {\n+    \tpopElement();\n+    }\n \n     /**\n      * Parse inheritance.\n@@ -880,13 +894,9 @@ private boolean startColumnResult(Attributes attrs)\n      */\n     private boolean startUniqueConstraint(Attributes attrs) \n         throws SAXException {\n-        Object current = currentElement();\n-        if (current instanceof ClassMapping && _secondaryTable == null) {\n-            Unique unique = new Unique();\n-            pushElement(unique);\n-            return true;\n-        } \n-        return false;\n+        Unique unique = new Unique();\n+        pushElement(unique);\n+        return true;\n     }\n     \n     /**\n@@ -897,9 +907,28 @@ private boolean startUniqueConstraint(Attributes attrs)\n      */\n     private void endUniqueConstraint() {\n         Unique unique = (Unique) popElement();\n-        Object current = currentElement();\n-        if (current instanceof ClassMapping && _secondaryTable == null)\n-            ((ClassMapping) current).getMappingInfo().addUnique(unique);\n+        Object ctx = currentElement();\n+        String tableName = \"?\";\n+        if (ctx instanceof ClassMapping) {\n+        \tClassMappingInfo info = ((ClassMapping) ctx).getMappingInfo();\n+        \ttableName = (_secondaryTable == null) \n+        \t\t? info.getTableName() : _secondaryTable;\n+        \tinfo.addUnique(tableName, unique);\n+        } else if (ctx instanceof FieldMapping) {// JoinTable\n+        \tFieldMappingInfo info = ((FieldMapping)ctx).getMappingInfo();\n+        \tinfo.addJoinTableUnique(unique);\n+        } else if (ctx instanceof SequenceMapping) {\n+        \tSequenceMapping seq = (SequenceMapping)ctx;\n+        \tunique.setTableName(seq.getTable());\n+        \tColumn[] uniqueColumns = unique.getColumns();\n+        \tString[] columnNames = new String[uniqueColumns.length];\n+        \tint i = 0;\n+        \tfor (Column uniqueColumn : uniqueColumns)\n+        \t\tcolumnNames[i++] = uniqueColumn.getName();\n+        \tseq.setUniqueColumns(columnNames);\n+        } else {\n+        \tthrow new InternalException();\n+        }\n     }\n     \n     /**"},{"sha":"65783e93457d13af197dcae4b132088c3bdd23f7","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -186,9 +186,9 @@ protected void serializeClassMappingContent(ClassMetaData mapping)\n         ClassMappingInfo info = cls.getMappingInfo();\n         serializeTable(info.getTableName(), \"table\", Strings\n             .getClassName(mapping.getDescribedType()), null, \n-            info.getUniques());\n+            info.getUniques(info.getTableName()));\n         for (String second : info.getSecondaryTableNames())\n-            serializeTable(second, \"secondary-table\", null, info, null);\n+            serializeTable(second, \"secondary-table\", null, info, info.getUniques(second));\n         serializeColumns(info, ColType.PK_JOIN, null);\n     }\n "},{"sha":"468a0a6277eca75d9babf43c2eea528c099e8805","filename":"openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -46,8 +46,13 @@ second-version: Version property \"{0}\" cannot map to a secondary table column. \\\n \tVersion columns must always be in the primary table of the class.\n not-embedded: Attempt to declare mapping overrides on non-embedded field \"{0}\".\n no-gen-table: No generated table found at \"{0}\".\n-empty-unique-column: A unique constraint \"{0}\" specified in mapping of class  \\\n+unique-no-column: A unique constraint specified in mapping of \"{0}\" specified \\\n+    no column.\n+unique-empty-column: A unique constraint \"{0}\" specified in mapping of class  \\\n     \"{1}\" includes an empty column.\n+unique-many-on-seq-unsupported: More than one unique constraints is specified \\\n+\ton sequence generator \"{1}\" in \"{0}\". But multiple unique constraint on \\\n+\tsequence generator is currently not supported.    \n discriminator-on-abstract-class: A discriminator value has been specified for \\\n \tthe abstract class \"{0}\". The discriminator will never be used and may be \\\n \tsafely removed."},{"sha":"b40f614a6e9f9a8b58991cb6ad4053542204c8ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,198 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.util.Properties;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import javax.persistence.Persistence;\r\n+import javax.persistence.PersistenceException;\r\n+\r\n+import junit.framework.AssertionFailedError;\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+/**\r\n+ * Verifies appropriate exception is thrown when an incorrect protocol or\r\n+ * sub-protocol is specified in the JDBC URL. Per the JDBC specification, the\r\n+ * Driver should return a null connection upon getConnection() when a bad driver\r\n+ * is specified on the URL. OpenJPA must be able to handle this condition and\r\n+ * return an appropriate message.\r\n+ * \r\n+ * OpenJPA JIRA: {@link http://issues.apache.org/jira/browse/OPENJPA-656}\r\n+ * \r\n+ * @author Jeremy Bauer\r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestBadJdbcUrl extends TestCase {\r\n+\tpublic static final String GOOD_URL = \"jdbc:derby:target/database/openjpa-derby-database;create=true\";\r\n+\tpublic static final String GOOD_DRIVER = \"org.apache.derby.jdbc.EmbeddedDriver\";\r\n+\tpublic static final String GOOD_DATASOURCE = \"org.apache.commons.dbcp.BasicDataSource\";\r\n+\r\n+\tpublic static final String BAD_DRIVER = \"bad.driver\";\r\n+\tpublic static final String BAD_URL_PROTOCOL = \"bad.url.protocol\";\r\n+\tpublic static final String BAD_URL_SUBPROTOCOL = \"bad.url.sub.protocol\";\r\n+\tpublic static final String BAD_CONN_PROPS = \"connectionUrl=bad,connectionDriver=bad\";\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad protocol but a valid Driver.\r\n+\t */\r\n+\tpublic void testBadUrlProtocolValueWithValidDriverClass() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_PROTOCOL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_DRIVER, BAD_URL_PROTOCOL);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad protocol but a valid DataSource.\r\n+\t */\r\n+\tpublic void testBadUrlProtocolValueWithValidDataSource() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DATASOURCE);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_PROTOCOL);\r\n+\t\tp.put(\"openjpa.ConnectionProperties\", BAD_CONN_PROPS);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tnull, (String[])null);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad sub-protocol but a valid Driver.\r\n+\t */\r\n+\tpublic void testBadUrlSubprotocolValueWithValidDriverClass() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_SUBPROTOCOL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_DRIVER, BAD_URL_SUBPROTOCOL);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad sub-protocol but a valid Driver.\r\n+\t */\r\n+\tpublic void testBadUrlSubprotocolValueWithValidDataSource() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_SUBPROTOCOL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_DRIVER, BAD_URL_SUBPROTOCOL);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying Valid URL with an invalid Driver.\r\n+\t */\r\n+\tpublic void testValidUrlWithInvalidDriver() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", BAD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", GOOD_URL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_URL, BAD_DRIVER);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Attempts to connect with given properties and analyze exception for the\r\n+\t * existence of given target exception and error message strings.\r\n+\t * \r\n+\t * @param props\r\n+\t *            the properties to initialize the persistence unit\r\n+\t * @param target\r\n+\t *            the type expected exception to be raised.\r\n+\t * @param nested\r\n+\t *            the type expected nested exception. null implies not to look\r\n+\t *            for any.\r\n+\t * @param keys\r\n+\t *            the strings that must occur in the exception message.\r\n+\t */\r\n+\tprivate void verifyConnectException(Properties props, Class targetType,\r\n+\t\t\tClass nestedType, String... keys) {\r\n+\t\tEntityManagerFactory emf = null;\r\n+\t\tEntityManager em = null;\r\n+\t\ttry {\r\n+\t\t\temf = Persistence.createEntityManagerFactory(\"test\", props);\r\n+\t\t\tem = emf.createEntityManager();\r\n+\t\t\tOpenJPAPersistence.cast(em).getConnection();\r\n+\t\t\tfail(\"Should have caught a \" + targetType.getName());\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tassertException(t, targetType, nestedType);\r\n+\t\t\tassertMessage(t, keys);\r\n+\t\t} finally {\r\n+\t\t\tif (em != null)\r\n+\t\t\t\tem.close();\r\n+\t\t\tif (emf != null)\r\n+\t\t\t\temf.close();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Asserts that the given targetType is assignable from actual. Asserts that\r\n+\t * the nestedType is a nested within the given actual Throwable\r\n+\t * \r\n+\t * @param actual\r\n+\t * @param targetType\r\n+\t * @param nestedType\r\n+\t */\r\n+\tvoid assertException(final Throwable actual, Class targetType,\r\n+\t\t\tClass nestedTargetType) {\r\n+\t\tif (targetType == null)\r\n+\t\t\treturn;\r\n+\t\tassertNotNull(actual);\r\n+\t\tClass actualType = actual.getClass();\r\n+\t\tif (!targetType.isAssignableFrom(actualType)) {\r\n+\t\t\tactual.printStackTrace();\r\n+\t\t\tfail(targetType.getName() + \" is not assignable from \"\r\n+\t\t\t\t\t+ actualType.getName());\r\n+\t\t}\r\n+\r\n+\t\tif (nestedTargetType != null) {\r\n+\t\t\tThrowable nested = actual.getCause();\r\n+\t\t\tClass nestedType = (nested == null) ? null : nested.getClass();\r\n+\t\t\twhile (nestedType != null) {\r\n+\t\t\t\tif (nestedType.isAssignableFrom(nestedTargetType)) {\r\n+\t\t\t\t\treturn;\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tThrowable next = nested.getCause();\r\n+\t\t\t\t\tif (next == null || next == nested)\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tnestedType = next.getClass();\r\n+\t\t\t\t\tnested     = next;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tactual.printStackTrace();\r\n+\t\t\tfail(\"No nested type \" + nestedTargetType + \" in \" + actual);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Assert that each of given keys are present in the message of the given\r\n+\t * Throwable.\r\n+\t */\r\n+\tvoid assertMessage(Throwable actual, String... keys) {\r\n+\t\tif (actual == null || keys == null)\r\n+\t\t\treturn;\r\n+\t\tString message = actual.getMessage();\r\n+\t\tfor (String key : keys) {\r\n+\t\t\tassertTrue(key + \" is not in \" + message, message.contains(key));\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"e8949649b227480a0747662fc315531c3ccb5fdf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,9 +18,13 @@\n  */\r\n package org.apache.openjpa.conf;\r\n \r\n+import javax.persistence.EntityManager;\r\n+\r\n import org.apache.openjpa.lib.conf.Value;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.PObject;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n /**\r\n@@ -31,6 +35,10 @@\n  */\r\n public class TestDynamicConfiguration extends SingleEMFTestCase {\r\n \r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(PObject.class);\r\n+\t}\r\n+\t\r\n     public void testConfigurationIsEqualByValueAndHashCode() {\r\n \t\tOpenJPAEntityManagerFactorySPI emf1 = createEMF();\r\n \t\tassertNotNull(emf1);\r\n@@ -102,4 +110,27 @@ public void testDynamicChangeDoesNotChangeHashCode() {\n \t\t\r\n \t\tassertEquals(oldHash, newHash);\r\n \t}\r\n+\t\r\n+\tpublic void testClassMetaDataRecognizesDataCacheTimeoutValueChange() {\r\n+\t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n+\t\t\r\n+\t\t// ensure that PObject is in metadata repository\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tem.persist(pc);\r\n+\t\t\r\n+\t\tint oldValue = conf.getDataCacheTimeout();\r\n+\t\t\r\n+\t\tClassMetaData meta = conf.getMetaDataRepositoryInstance()\r\n+\t\t\t.getCachedMetaData(PObject.class);\r\n+\t\tassertNotNull(meta);\r\n+\t\tassertEquals(oldValue, meta.getDataCacheTimeout());\r\n+\t\t\r\n+\t\tint newValue = oldValue + 10;\r\n+\t\tconf.setDataCacheTimeout(newValue);\r\n+\t\tassertEquals(newValue, conf.getDataCacheTimeout());\r\n+\t\tassertEquals(newValue, meta.getDataCacheTimeout());\r\n+\t\t\r\n+\t}\r\n }\r"},{"sha":"c44a5646c45a4b581baa60b2a9bf563838d3b6d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,49 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * A simple query fails with unenhanced (or runtime enhanced classes)\r\n+ * as originally reported in \r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-659\">OPENJPA-659</A>.\r\n+ * The original issue reports the failure in a Spring-Tomcat-Weaver settings\r\n+ * with embedded instances but even the following test shows the same failure \r\n+ * in a simpler settings.\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestSimpleUnenhancedQuery extends SingleEMFTestCase {\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsetUp(CLEAR_TABLES, UnenhancedPObject.class);\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(new UnenhancedPObject());\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+\t\r\n+\tpublic void testExtentQuery() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tassertFalse(em.createQuery(\"SELECT p FROM UnenhancedPObject p\")\r\n+\t\t\t\t.getResultList().isEmpty());\r\n+\t}\r\n+}\r"},{"sha":"4812fbf2ef96b5188f4ed5d6979d293562f1ceb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,25 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class UnenhancedPObject {\r\n+\r\n+}\r"},{"sha":"72d589f39b174b43a667d7558a6351d746f492d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class EntityF  {\r\n+\t@Id private int id;\r\n+\r\n+\t@OneToMany(cascade=CascadeType.ALL, mappedBy=\"entityF\")\r\n+\tprivate List<EntityG> listG;\r\n+\t\r\n+\tpublic List<EntityG> getListG() {\r\n+\t\treturn listG;\r\n+\t}\r\n+\tpublic void setListG(List<EntityG> listG) {\r\n+\t\tthis.listG = listG;\r\n+\t}\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"c547dd086cdbaea55ae840caf9e8553516db86fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKeyAction;\r\n+\r\n+@Entity\r\n+public class EntityG  {\r\n+\t@Id private int id;\r\n+\r\n+\t@ForeignKey(deleteAction=ForeignKeyAction.CASCADE)\r\n+\t@ManyToOne (cascade=CascadeType.MERGE)\t\r\n+\tprivate EntityF entityF;\r\n+\t\r\n+\tpublic EntityF getEntityF() {\r\n+\t\treturn entityF;\r\n+\t}\r\n+\tpublic void setEntityF(EntityF entityF) {\r\n+\t\tthis.entityF = entityF;\r\n+\t}\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\tpublic void setId(int id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+}\r"},{"sha":"5dfc8c371e123bcc809f11c69e3ac18c6669d7ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","status":"modified","additions":55,"deletions":1,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.openjpa.jdbc.kernel;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n import javax.persistence.EntityManager;\r\n \r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n@@ -37,7 +39,8 @@\n     private EntityD entityD;\r\n \r\n     public void setUp() {\r\n-        setUp(EntityA.class, EntityB.class, EntityC.class, EntityD.class, EntityE.class);\r\n+        setUp(EntityA.class, EntityB.class, EntityC.class, EntityD.class, \r\n+              EntityE.class, EntityF.class, EntityG.class);\r\n \r\n         createTestData();\r\n     }\r\n@@ -154,4 +157,55 @@ public void testComplexTwoCycles() {\n             em.close();\r\n         }\r\n     }\r\n+    \r\n+    public void testForeignKeyCascade() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            EntityF f = new EntityF();\r\n+            f.setId(1);\r\n+\r\n+            List<EntityG> listG = new ArrayList<EntityG>();\r\n+            EntityG g1 = new EntityG();\r\n+            g1.setId(1);\r\n+            listG.add(g1);\r\n+            g1.setEntityF(f);\r\n+            \r\n+            EntityG g2 = new EntityG();\r\n+            g2.setId(2);\r\n+            listG.add(g2);\r\n+            g2.setEntityF(f);\r\n+\r\n+            EntityG g3 = new EntityG();\r\n+            g3.setId(3);\r\n+            listG.add(g3);\r\n+            g3.setEntityF(f);\r\n+\r\n+            EntityG g4 = new EntityG();\r\n+            g4.setId(4);\r\n+            listG.add(g4);\r\n+            g4.setEntityF(f);\r\n+            \r\n+            f.setListG(listG);\r\n+            em.getTransaction().begin();\r\n+            em.persist(f);\r\n+            em.persist(g1);\r\n+            em.persist(g2);\r\n+            em.persist(g3);\r\n+            em.persist(g4);\r\n+            em.getTransaction().commit();\r\n+\r\n+            em.getTransaction().begin();\r\n+            em.remove(f);\r\n+            em.getTransaction().commit();\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Fail to delete EntityF\");\r\n+        }\r\n+        finally {\r\n+            if (em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            em.close();\r\n+        }\r\n+    }\r\n+    \r\n }\r"},{"sha":"0745dfd2a91b4fc9d1f8781acf12a5c58219f881","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"modified","additions":41,"deletions":2,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -20,6 +20,7 @@\n package org.apache.openjpa.jdbc.meta.strats;\r\n \r\n import java.io.IOException;\r\n+\r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n@@ -29,6 +30,7 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\r\n import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n@@ -55,7 +57,8 @@ public boolean isDatabaseSupported() {\n             .getDBDictionaryInstance();\r\n         if (dict instanceof MySQLDictionary ||\r\n             dict instanceof SQLServerDictionary ||\r\n-            dict instanceof OracleDictionary) {\r\n+            dict instanceof OracleDictionary ||\r\n+            dict instanceof PostgresDictionary) {\r\n             return true;\r\n         }\r\n         return false;\r\n@@ -80,6 +83,7 @@ public void testInsertAndSelect() throws IOException {\n         insert(newLobEntity(s, 1));\r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n+\r\n         Query query = em.createQuery(getSelectQuery());\r\n         LobEntity entity = (LobEntity) query.getSingleResult();\r\n         assertNotNull(entity.getStream());\r\n@@ -117,6 +121,41 @@ public void testUpdate() throws IOException {\n         em.close();\r\n     }\r\n \r\n+    public void testUpdateWithNull() {\r\n+        if (!isDatabaseSupported()) return;\r\n+        insert(newLobEntity(\"oOOOOOo\", 1));\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        entity.setStream(null);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        assertNull(entity.getStream());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void testUpdateANullObjectWithoutNull() throws IOException {\r\n+        if (!isDatabaseSupported()) return;\r\n+        insert(newLobEntity(null, 1));\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        String string = \"iIIIIIi\";\r\n+        changeStream(entity, string);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        assertEquals(string, getStreamContentAsString(entity.getStream()));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+    \r\n     public void testDelete() {\r\n         if (!isDatabaseSupported()) return;\r\n         insert(newLobEntity(\"oOOOOOo\", 1));\r\n@@ -133,7 +172,7 @@ public void testDelete() {\n         em.getTransaction().commit();\r\n         em.close();\r\n     }\r\n-\r\n+    \r\n     public void testLifeCycleInsertFlushModify() {\r\n         if (!isDatabaseSupported()) return;\r\n         EntityManager em = emf.createEntityManager();\r"},{"sha":"64adc29f2aa8211969c1c3c081c1e23691c08e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -35,10 +35,10 @@\n public class ReaderLobEntity implements LobEntity {\r\n \r\n     @Id\r\n-    int id;\r\n+    private int id;\r\n \r\n     @Persistent\r\n-    Reader stream;\r\n+    private Reader stream;\r\n \r\n     public int getId() {\r\n         return id;\r"},{"sha":"1dcf94d9e8a078d19f2d4d801231fa084dbf38e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","status":"added","additions":391,"deletions":0,"changes":391,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,391 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.simple.Person;\n+\n+/*\n+ * Verify multiple permutations of openjpa.jdbc.QuerySQLCache settings.\n+ */\n+public class TestQuerySQLCache\n+    extends TestCase {\n+    \n+    final int nThreads = 5;\n+    final int nPeople = 100;\n+    final int nIterations = 10;\n+\n+    /*\n+     * Verify QuerySQLCacheValue setting \"all\" is caching queries.\n+     */\n+    public void testAllCacheSetting() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"all\");\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(\n+                Persistence.createEntityManagerFactory(\"test\", props));\n+        \n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+        BrokerImpl broker = (BrokerImpl) em.getBroker();\n+        DelegatingStoreManager dstore = broker.getStoreManager();\n+        JDBCStoreManager jstore = \n+            (JDBCStoreManager)dstore.getInnermostDelegate();\n+\n+        em.getTransaction().begin();\n+        Person p = new Person();\n+        p.setId(1);\n+        em.persist(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        Person p1 = em.find(Person.class, 1);\n+        Map sqlCache = jstore.getQuerySQLCache();\n+        Set keys = sqlCache.keySet();\n+        for (Iterator iter = keys.iterator(); iter.hasNext();) {\n+            Map cacheMap = (Map) iter.next();\n+            //make sure there is an entry in the cache\n+            assertEquals(1, cacheMap.size());   \n+        }\n+        \n+        em.getTransaction().begin();\n+        em.remove(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+        emf.close();\n+    }\n+    \n+    /*\n+     * Verify QuerySQLCacheValue setting \"true\" uses the expected cache\n+     * implementation and is caching.\n+     */\n+    public void testTrueCacheSetting() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(\n+                Persistence.createEntityManagerFactory(\"test\", props));\n+        \n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+        BrokerImpl broker = (BrokerImpl) em.getBroker();\n+        DelegatingStoreManager dstore = broker.getStoreManager();\n+        JDBCStoreManager jstore = \n+            (JDBCStoreManager)dstore.getInnermostDelegate();\n+        \n+        em.getTransaction().begin();\n+        Person p = new Person();\n+        p.setId(1);\n+        em.persist(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        Person p1 = em.find(Person.class, 1);\n+        Map sqlCache = jstore.getQuerySQLCache();\n+        Set keys = sqlCache.keySet();\n+        for (Iterator iter = keys.iterator(); iter.hasNext();) {\n+            Map cacheMap = (Map) iter.next();\n+            //make sure there is an entry in the cache\n+            assertEquals(1, cacheMap.size());   \n+        }\n+        \n+        em.getTransaction().begin();\n+        em.remove(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+        emf.close();\n+    }\n+\n+    /*\n+     * Verify caching is disabled when the QuerySQLCacheValue setting is \n+     * \"false\".\n+     */\n+    public void testFalseCacheSetting() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"false\");\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(\n+                Persistence.createEntityManagerFactory(\"test\", props));\n+        \n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+        BrokerImpl broker = (BrokerImpl) em.getBroker();\n+        DelegatingStoreManager dstore = broker.getStoreManager();\n+        JDBCStoreManager jstore = \n+            (JDBCStoreManager)dstore.getInnermostDelegate();\n+        \n+        em.getTransaction().begin();\n+        Person p = new Person();\n+        p.setId(1);\n+        em.persist(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        Person p1 = em.find(Person.class, 1);\n+\n+        assertFalse(jstore.isQuerySQLCacheOn());\n+        \n+        em.getTransaction().begin();\n+        em.remove(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+        emf.close();\n+    }\n+\n+    /*\n+     * Verify QuerySQLCacheValue setting with a custom cache backend uses\n+     * the expected cache implementation and is caching.\n+     */\n+    public void testCustomCacheSetting() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \n+            \"org.apache.openjpa.kernel.TestQuerySQLCache.CustomCacheMap\");\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(\n+                Persistence.createEntityManagerFactory(\"test\", props));\n+        \n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+        BrokerImpl broker = (BrokerImpl) em.getBroker();\n+        DelegatingStoreManager dstore = broker.getStoreManager();\n+        JDBCStoreManager jstore = \n+            (JDBCStoreManager)dstore.getInnermostDelegate();\n+        \n+        em.getTransaction().begin();\n+        Person p = new Person();\n+        p.setId(1);\n+        em.persist(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        Person p1 = em.find(Person.class, 1);\n+\n+        assertTrue(jstore.isQuerySQLCacheOn());\n+\n+        Map sqlCache = jstore.getQuerySQLCache();\n+        Set keys = sqlCache.keySet();\n+        for (Iterator iter = keys.iterator(); iter.hasNext();) {\n+            Map cacheMap = (Map) iter.next();\n+            assertTrue((cacheMap instanceof \n+                org.apache.openjpa.kernel.TestQuerySQLCache.CustomCacheMap));\n+            //make sure there is an entry in the cache\n+            assertEquals(1, cacheMap.size());   \n+        }\n+        \n+        em.getTransaction().begin();\n+        em.remove(p);\n+        em.flush();\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+        emf.close();\n+    }\n+\n+    /*\n+     * Verify an exception is thrown if a bad cache implementation class\n+     * is specified.\n+     */\n+    public void testBadCustomCacheSetting() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \n+            \"org.apache.openjpa.kernel.TestQuerySQLCache.BadCacheMap\");\n+        \n+        try {\n+            OpenJPAEntityManagerFactorySPI emf = \n+                (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.cast(\n+                        Persistence.createEntityManagerFactory(\"test\", props));\n+            // EMF creation should throw an exception because the cache \n+            // implementation class will not be found.\n+            assertFalse(false);\n+        } catch (Exception e) {\n+            assertTrue(true);\n+        }\n+    }\n+\n+    /*\n+     * Verify multi-threaded multi-entity manager finder works with the\n+     * QuerySQLCache set to \"all\".\n+     */\n+    public void testMultiEMCachingAll() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \n+            \"all\");\n+        runMultiEMCaching(props);        \n+    }\n+\n+    /*\n+     * Verify multi-threaded multi-entity manager finder works with the\n+     * QuerySQLCache set to \"true\".\n+     */\n+    public void testMultiEMCachingTrue() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + Person.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \n+            \"true\");\n+        runMultiEMCaching(props);\n+    }\n+\n+    private void runMultiEMCaching(Map props) {\n+\n+        EntityManagerFactory emfac = \n+                Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        EntityManager em = emfac.createEntityManager();            \n+\n+        // Create some entities\n+        em.getTransaction().begin();\n+        for (int i = 0; i < nPeople; i++)\n+        {\n+            Person p = new Person();\n+            p.setId(i);\n+            em.persist(p);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        Thread[] newThreads = new Thread[nThreads];\n+        FindPeople[] customer = new FindPeople[nThreads];\n+        \n+        for (int i=0; i < nThreads; i++) {\n+            customer[i] = new FindPeople(emfac, 0, nPeople, \n+                nIterations, i);\n+            newThreads[i] = new Thread(customer[i]);\n+            newThreads[i].start();\n+        }\n+        \n+        // Wait for the worker threads to complete\n+        for (int i = 0; i < nThreads; i++) {\n+            try {\n+                newThreads[i].join();\n+            } catch (InterruptedException e) {\n+                this.fail(\"Caught Interrupted Exception: \" + e);\n+            }\n+        }   \n+\n+        // Run through the state of all runnables to assert if any of them\n+        // failed.\n+        for (int i = 0; i < nThreads; i++) {\n+            assertFalse(customer[i].hadFailures());\n+        }\n+\n+        // Clean up the entities used in this test\n+        em = emfac.createEntityManager();            \n+        em.getTransaction().begin();\n+\n+        for (int i = 0; i < nPeople; i++) {\n+            Person p = em.find(Person.class, i);\n+            em.remove(p);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+    /*\n+     * Empty ConcurrentHashMap subclass. Useful for testing custom cache\n+     * storage implementations.\n+     */\n+    public class CustomCacheMap extends ConcurrentHashMap {\n+        \n+    }\n+\n+    /*\n+     * Simple runnable to test finder in a tight loop.  Multiple instances\n+     * of this runnable will run simultaneously.\n+     */\n+    private class FindPeople implements Runnable {\n+        \n+        private int startId;\n+        private int endId;\n+        private int thread;\n+        private int iterations;\n+        private EntityManagerFactory emf;\n+        private boolean failures = false;\n+        \n+        public FindPeople(EntityManagerFactory emf, \n+            int startId, int endId, int iterations, int thread) {\n+            super();\n+            this.startId = startId;\n+            this.endId = endId;\n+            this.thread = thread;\n+            this.iterations = iterations;\n+            this.emf = emf;\n+        }\n+        \n+        public boolean hadFailures()\n+        {\n+            return failures;\n+        }\n+        \n+        public void run() {\n+            try {            \n+                EntityManager em = emf.createEntityManager();            \n+                for (int j = 0; j < iterations; j++) {\n+                    \n+                    for (int i = startId; i < endId; i++) {\n+                        Person p1 = em.find(Person.class, i);\n+                        if (p1.getId() != i) {\n+                            System.out.println(\"Finder failed: \" + i);\n+                            failures = true;\n+                            break;\n+                        }                    \n+                    }\n+                    em.clear();  \n+                }\n+                em.close();  \n+            } \n+            catch (Exception e) {\n+               failures = true;\n+               System.out.println(\"Thread \" + thread + \" exception :\" +\n+                   e );\n+            }\n+        }\n+    }\n+}"},{"sha":"c93377fc49a13d7b2ebe26dd4e372bd07586841a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -25,10 +25,6 @@\n \r\n public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\r\n \r\n-    public void testInheritanceComparatorWithoutBase() {\r\n-        inheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testInheritanceComparatorWithBase() {\r\n         inheritanceComparatorHelper(true);\r\n     }\r\n@@ -47,10 +43,6 @@ private void inheritanceComparatorHelper(boolean base) {\n         assertTrue(comp.compare(AbstractThing.class, C.class) < 0);\r\n     }\r\n \r\n-    public void testMetaDataInheritanceComparatorWithoutBase() {\r\n-        metaDataInheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testMetaDataInheritanceComparatorWithBase() {\r\n         metaDataInheritanceComparatorHelper(true);\r\n     }\r"},{"sha":"58fad63659245584e3f0da47a20369f17e6850ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,89 @@\n+package org.apache.openjpa.persistence.cache.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+\r\n+/**\r\n+ * A persistent entity that is owned by unidirectional single-valued \r\n+ * relationship.\r\n+ * A unidirectional relationship has only one owning side and the other side\r\n+ * called as owned side is this receiver.\r\n+ * Given the following relationship between Entity A and Entity B:\r\n+ *   Entity A refers a single instance of Entity B \r\n+ *   Entity B does not refer Entity A (owner)\r\n+ * Entity A is called owner and Entity B is called owned with respect\r\n+ * to the above relationship.\r\n+ * \r\n+ * Used to test identical application behavior with or without DataCache.\r\n+ * \r\n+ * @see BidirectionalOne2OneOwned\r\n+ * @see TestDataCacheBehavesIdentical\r\n+ * @see Section 2.1.8.3 of JPA Specification Version 1.0\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+\r\n+@Entity\r\n+public class BidirectionalOne2OneOwned {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t@OneToOne(mappedBy=\"owned\")\r\n+\tprivate BidirectionalOne2OneOwner owner;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic BidirectionalOne2OneOwner getOwner() {\r\n+\t\treturn owner;\r\n+\t}\r\n+\r\n+\tpublic void setOwner(BidirectionalOne2OneOwner owner) {\r\n+\t\tthis.owner = owner;\r\n+\t}\r\n+\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"6c0c9a9748b38a2cc4011045a29a2480e823fcda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+\r\n+package org.apache.openjpa.persistence.cache.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * A persistent entity that owns bidirectional single-valued relationship.\r\n+ * A bidirectional relationship has only an owning side, which is this receiver.\r\n+ * Given the following relationship between Entity A and Entity B:\r\n+ *   Entity A refers to a single instance of Entity B \r\n+ *   Entity B refers to a single instance of Entity A \r\n+ * If Entity B qualifies its relation to the Entity A with mappedBy \r\n+ * annotation qualifier then Entity B is called owned and Entity A is called \r\n+ * owner with respect to the above relationship.\r\n+ * \r\n+ * Used to test identical application behavior with or without DataCache.\r\n+ * \r\n+ * @see BidirectionalOne2OneOwned\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class BidirectionalOne2OneOwner {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t@OneToOne\r\n+\tprivate BidirectionalOne2OneOwned owned;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic BidirectionalOne2OneOwned getOwned() {\r\n+\t\treturn owned;\r\n+\t}\r\n+\r\n+\tpublic void setOwned(BidirectionalOne2OneOwned owned) {\r\n+\t\tthis.owned = owned;\r\n+\t}\r\n+\t\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"35243e180616299804cf8227419f853cede52bc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+\r\n+package org.apache.openjpa.persistence.cache.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+/**\r\n+ * A persistent entity that is owned by unidirectional single-valued \r\n+ * relationship.\r\n+ * A unidirectional relationship has only one owning side and the other side\r\n+ * called as owned side is this receiver.\r\n+ * Given the following relationship between Entity A and Entity B:\r\n+ *   Entity A refers a single instance of Entity B \r\n+ *   Entity B does not refer Entity A (owner)\r\n+ * Entity A is called owner and Entity B is called owned with respect\r\n+ * to the above relationship.\r\n+ * \r\n+ * Used to test identical application behavior with or without DataCache.\r\n+ * \r\n+ * @see UnidirectionalOne2OneOwned\r\n+ * @see TestDataCacheBehavesIdentical\r\n+ * @see Section 2.1.8.3 of JPA Specification Version 1.0\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+\r\n+@Entity\r\n+public class UnidirectionalOne2OneOwned {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n+\t}\r\n+}\r"},{"sha":"84922b101a82b7722795230ef3dbe334789fb08a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+\r\n+package org.apache.openjpa.persistence.cache.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * A persistent entity that owns unidirectional single-valued relationship.\r\n+ * A unidirectional relationship has only one owning side, which is this \r\n+ * receiver.\r\n+ * Given the following relationship between Entity A and Entity B:\r\n+ *   Entity A refers a single instance of Entity B \r\n+ *   Entity B does not refer Entity A (owner)\r\n+ * Entity A is called owner and Entity B is called owned with respect\r\n+ * to the above relationship.\r\n+ * \r\n+ * Used to test identical application behavior with or without DataCache.\r\n+ * \r\n+ * @see UnidirectionalOne2OneOwned\r\n+ * @see TestDataCacheBehavesIdentical\r\n+ * @see Section 2.1.8.3 of JPA Specification Version 1.0\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class UnidirectionalOne2OneOwner {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\t@OneToOne\r\n+\tprivate UnidirectionalOne2OneOwned owned;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic UnidirectionalOne2OneOwned getOwned() {\r\n+\t\treturn owned;\r\n+\t}\r\n+\r\n+\tpublic void setOwned(UnidirectionalOne2OneOwned owned) {\r\n+\t\tthis.owned = owned;\r\n+\t}\r\n+\t\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n+\t}\r\n+}\r"},{"sha":"0e2b7566a515a87413a01de52eb295f000d450d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"added","additions":524,"deletions":0,"changes":524,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,524 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.LockModeType;\r\n+\r\n+import org.apache.openjpa.persistence.EntityManagerImpl;\r\n+import org.apache.openjpa.persistence.EntityNotFoundException;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.StoreCache;\r\n+import org.apache.openjpa.persistence.StoreCacheImpl;\r\n+import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwned;\r\n+import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwner;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.PObject;\r\n+\r\n+/**\r\n+ * Tests various application behavior with or without DataCache.\r\n+ * Ideally, an application should behave identically irrespective of the \r\n+ * DataCache. However, purpose of this test is to identify specific scenarios\r\n+ * where this ideal is violated. The test case also demonstrates, wherever\r\n+ * possible, what extra step an application may take to ensure that its \r\n+ * behavior with or without DataCache remains identical.   \r\n+ * \r\n+ * So far following use cases are found to demonstrate behavioral differences:\r\n+ * 1. Inconsistent bidirectional relation\r\n+ * 2. Refresh\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestDataCacheBehavesIdentical extends AbstractTestCase {\r\n+\tprivate static OpenJPAEntityManagerFactorySPI emfWithDataCache;\r\n+\tprivate static OpenJPAEntityManagerFactorySPI emfWithoutDataCache;\r\n+\t\r\n+\tprivate static final boolean WITH_DATACACHE = true;\r\n+\tprivate static final boolean CONSISTENT = true;\r\n+\tprivate static final boolean DIRTY = true;\r\n+\tprivate static final boolean REFRESH_FROM_DATACACHE = true;\r\n+\tprivate static final LockModeType NOLOCK = null;\r\n+\tprivate static final Class ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\r\n+\tprivate static final Class NO_ERROR = null;\r\n+\r\n+\tprivate static final String MARKER_DATACACHE = \"in DataCache\";\r\n+\tprivate static final String MARKER_DATABASE  = \"in Database\";\r\n+\tprivate static final String MARKER_CACHE     = \"in Object Cache\";\r\n+\tprivate static final String MARKER_DIRTY_CACHE = \"in Object Cache (dirty)\";\r\n+\tprivate static long ID_COUNTER = System.currentTimeMillis();\r\n+\t\r\n+\r\n+\t/**\r\n+\t * Sets up two EntityManagerFactory: one with DataCache another without.\r\n+\t */\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp();\r\n+\t\tif (emfWithDataCache == null) {\r\n+\t\t\temfWithDataCache = createEMF(\r\n+\t\t\t\t\t\"openjpa.jdbc.SynchronizeMappings\",\t\"buildSchema\", \r\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \r\n+\t\t\t\t\t\"openjpa.DataCache\", \"true\",\r\n+\t\t\t\t\t\"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n+\t\t\t\t\tPObject.class,\r\n+\t\t\t\t\tBidirectionalOne2OneOwner.class,\r\n+\t\t\t\t\tBidirectionalOne2OneOwned.class, CLEAR_TABLES);\r\n+\t\t\temfWithoutDataCache = createEMF(\r\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \r\n+\t\t\t\t\t\"openjpa.DataCache\", \"false\",\r\n+\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n+\t\t\t\t\tPObject.class,\r\n+\t\t\t\t\tBidirectionalOne2OneOwned.class,\r\n+\t\t\t\t\tBidirectionalOne2OneOwner.class, CLEAR_TABLES);\r\n+\r\n+\t\t\tassertNotNull(emfWithDataCache);\r\n+\t\t\tassertNotNull(emfWithoutDataCache);\r\n+\r\n+\t\t\t// StoreCache is, by design, always non-null \r\n+\t\t\tassertNotNull(emfWithDataCache.getStoreCache());\r\n+\t\t\tassertNotNull(emfWithoutDataCache.getStoreCache());\r\n+\r\n+\t\t\t// however, following distinguishes whether DataCache is active  \r\n+\t\t\tassertTrue(isDataCacheActive(emfWithDataCache));\r\n+\t\t\tassertFalse(isDataCacheActive(emfWithoutDataCache));\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Affirms via internal structures if the given factory is configured with\r\n+\t * active DataCache. Because, even when DataCache is configured to be\r\n+\t * false, a no-op StoreCache is instantiated by design.\r\n+\t */\r\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n+\t\t    && emf.getConfiguration()\r\n+\t\t          .getDataCacheManagerInstance()\r\n+\t\t          .getSystemDataCache() != null;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Create one-to-one bidirectional relation (may or may not be consistent)\r\n+\t * between two pairs of instances. Creates four instances Owner1, Owned1,\r\n+\t * Owner2, Owned2. The first instance has the given id. The id of the other\r\n+\t * instances monotonically increase by 1. The relationship is set either\r\n+\t * consistently or inconsistently. Consistent relation is when Owner1 points\r\n+\t * to Owned1 and Owned1 points back to Owner1. Inconsistent relation is when\r\n+\t * Owner1 points to Owned1 but Owned1 points to Owner2 instead of Owner1.\r\n+\t * \r\n+\t * \r\n+\t * @param em\r\n+\t *            the entity manager to persist the instances\r\n+\t * @param id\r\n+\t *            the identifier of the first owner instance. The identifier for\r\n+\t *            the other instances are sequential in order of creation.\r\n+\t * @param consistent\r\n+\t *            if true sets the relationship as consistent.\r\n+\t */\r\n+\tpublic void createBidirectionalRelation(EntityManager em, long id,\r\n+\t\t\tboolean consistent) {\r\n+\t\tBidirectionalOne2OneOwner owner1 = new BidirectionalOne2OneOwner();\r\n+\t\tBidirectionalOne2OneOwned owned1 = new BidirectionalOne2OneOwned();\r\n+\t\tBidirectionalOne2OneOwner owner2 = new BidirectionalOne2OneOwner();\r\n+\t\tBidirectionalOne2OneOwned owned2 = new BidirectionalOne2OneOwned();\r\n+\t\t\r\n+\t\towner1.setId(id++);\r\n+\t\towned1.setId(id++);\r\n+\t\towner2.setId(id++);\r\n+\t\towned2.setId(id++);\r\n+\t\t\r\n+\t\towner1.setName(\"Owner1\");\r\n+\t\towned1.setName(\"Owned1\");\r\n+\t\towned2.setName(\"Owned2\");\r\n+\t\towner2.setName(\"Owner2\");\r\n+\r\n+\t\towner1.setOwned(owned1);\r\n+\t\towner2.setOwned(owned2);\r\n+\r\n+\t\tif (consistent) {\r\n+\t\t\towned1.setOwner(owner1);\r\n+\t\t\towned2.setOwner(owner2);\r\n+\t\t} else {\r\n+\t\t\towned1.setOwner(owner2);\r\n+\t\t\towned2.setOwner(owner1);\r\n+\t\t}\r\n+\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(owner1);\r\n+\t\tem.persist(owned1);\r\n+\t\tem.persist(owner2);\r\n+\t\tem.persist(owned2);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Verifies that bidirectionally related objects can be persisted \r\n+\t * and later retrieved in a different transaction. \r\n+\t * \r\n+\t * Creates interrelated set of four instances.\r\n+\t * Establish their relation either consistently or inconsistently based\r\n+\t * on the given flag.\r\n+\t * Persist them and then clear the context. \r\n+\t * Fetch the instances in memory again by their identifiers. \r\n+\t * Compare the interrelations between the fetched instances with the \r\n+\t * relations of the original instances (which can be consistent or \r\n+\t * inconsistent). \r\n+\t * \r\n+\t * The mapping specification is such that the bidirectional relation is \r\n+\t * stored in database by a single foreign key. Hence database relation\r\n+\t * is always consistent. Hence the instances retrieved from database are\r\n+\t * always consistently related irrespective of whether they were created\r\n+\t * with consistent or inconsistent relation.\r\n+\t * However, when the instances are retrieved from the data cache, data cache\r\n+\t * will preserve the in-memory relations even when they are inconsistent.\r\n+\t *    \r\n+\t * @param useDataCache\r\n+\t *            use DataCache\r\n+\t * @param consistent\r\n+\t *            assume that the relationship were created as consistent.\r\n+\t */\r\n+\tpublic void verifyBidirectionalRelation(boolean useDataCache,\r\n+\t\t\tboolean createConsistent, boolean expectConsistent) {\r\n+\t\tEntityManager em = (useDataCache) \r\n+\t\t                 ? emfWithDataCache.createEntityManager() \r\n+\t\t                 : emfWithoutDataCache.createEntityManager();\r\n+\t\t                 \r\n+\t\tlong id = ID_COUNTER++;\r\n+\t\tID_COUNTER += 4;\r\n+\t\tcreateBidirectionalRelation(em, id, createConsistent);\r\n+\t\t\r\n+\t\t\r\n+\t\tBidirectionalOne2OneOwner owner1 = em.find(BidirectionalOne2OneOwner.class, id);\r\n+\t\tBidirectionalOne2OneOwned owned1 = em.find(BidirectionalOne2OneOwned.class, id + 1);\r\n+\t\tBidirectionalOne2OneOwner owner2 = em.find(BidirectionalOne2OneOwner.class, id + 2);\r\n+\t\tBidirectionalOne2OneOwned owned2 = em.find(BidirectionalOne2OneOwned.class, id + 3);\r\n+\r\n+\t\tassertNotNull(owner1);\r\n+\t\tassertNotNull(owner2);\r\n+\t\tassertNotNull(owned1);\r\n+\t\tassertNotNull(owned2);\r\n+\r\n+\t\tassertEquals(owner1, expectConsistent \r\n+\t\t\t\t\t? owner1.getOwned().getOwner() \r\n+\t\t\t\t\t: owner2.getOwned().getOwner());\r\n+\t\tassertEquals(owner2, expectConsistent \r\n+\t\t\t\t\t? owner2.getOwned().getOwner() \r\n+\t\t\t\t    : owner1.getOwned().getOwner());\r\n+\r\n+\r\n+\t\tassertEquals(owned1, owner1.getOwned());\r\n+\t\tassertEquals(expectConsistent ? owner1 : owner2, owned1.getOwner());\r\n+\t\tassertEquals(owned2, owner2.getOwned());\r\n+\t\tassertEquals(expectConsistent ? owner2 : owner1, owned2.getOwner());\r\n+\t}\r\n+\r\n+\tpublic void testConsitentBidirectionalRelationIsPreservedWithDataCache() {\r\n+\t\tverifyBidirectionalRelation(WITH_DATACACHE, CONSISTENT, CONSISTENT);\r\n+\t}\r\n+\r\n+\tpublic void testConsitentBidirectionalRelationIsPreservedWithoutDataCache() {\r\n+\t\tverifyBidirectionalRelation(!WITH_DATACACHE, CONSISTENT, CONSISTENT);\r\n+\t}\r\n+\r\n+\tpublic void testInconsitentBidirectionalRelationIsPreservedWithDataCache() {\r\n+\t\tverifyBidirectionalRelation(WITH_DATACACHE, !CONSISTENT, !CONSISTENT);\r\n+\t}\r\n+\r\n+\tpublic void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache() {\r\n+\t\tverifyBidirectionalRelation(!WITH_DATACACHE, !CONSISTENT, CONSISTENT);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Verify that refresh() may fetch state from either the data cache or the\r\n+\t * database based on different conditions. \r\n+\t * The conditions that impact are \r\n+\t * a) whether current lock is stronger than NONE \r\n+\t * b) whether the instance being refreshed is dirty\r\n+\t * \r\n+\t * An instance is created with data cache marker and persisted. \r\n+\t * A native SQL is used to update the database record with database marker. \r\n+\t * The in-memory instance is not aware of this out-of-band update. \r\n+\t * Then the in-memory instance is refreshed. The marker of the refreshed \r\n+\t * instance tells whether the instance is refreshed from the data cache\r\n+\t * of the database. \r\n+\t * \r\n+\t * @param useDataCache flags if data cache is active. if not, then surely\r\n+\t * refresh always fetch state from the database.\r\n+\t * \r\n+\t * @param datacache the marker for the copy of the data cached instance\r\n+\t * @param database the marker for the database record\r\n+\t * @param lock lock to be used\r\n+\t * @param makeDirtyBeforeRefresh flags if the instance be dirtied before\r\n+\t * refresh()\r\n+\t * @param expected The expected marker i.e. where the state is refreshed \r\n+\t * from. This should be always <code>MARKER_DATABASE</code>.\r\n+\t * a) whether DataCache is active\r\n+\t * b) whether current Lock is stronger than NOLOCK\r\n+\t * c) whether the object to be refreshed is dirty\r\n+\t * \r\n+\t * The following truth table enumerates the possibilities\r\n+\t * \r\n+\t * Use Cache?   Lock?   Dirty?     Target\r\n+\t *    Y          Y       Y         Database\r\n+\t *    Y          N       Y         Data Cache\r\n+\t *    Y          Y       N         Data Cache\r\n+\t *    Y          N       N         Data Cache\r\n+\t *    \r\n+\t *    N          Y       Y         Database\r\n+\t *    N          N       Y         Database\r\n+\t *    N          Y       N         Object Cache\r\n+\t *    N          N       N         Object Cache\r\n+\r\n+\t */\r\n+\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \r\n+\t\t\tboolean makeDirtyBeforeRefresh, boolean refreshFromDataCache, \r\n+\t\t\tString expected) {\r\n+\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n+\t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n+\t\temf.getConfiguration().setRefreshFromDataCache(refreshFromDataCache);\r\n+\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n+        \r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\r\n+\t\tem.persist(pc);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tObject oid = pc.getId();\r\n+\t\tStoreCache dataCache = emf.getStoreCache();\r\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n+\t\t\r\n+\t\t// Modify the record in the database in a separate transaction using\r\n+\t\t// native SQL so that the in-memory instance is not altered \r\n+\t\tem.getTransaction().begin();\r\n+\t\tString sql = \"UPDATE POBJECT SET NAME='\"+ MARKER_DATABASE +\"' WHERE id=\"+oid;\r\n+\t\tem.createNativeQuery(sql).executeUpdate();\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\r\n+\t\t\r\n+\t\tem.getTransaction().begin();\r\n+\t\tif (makeDirtyBeforeRefresh) {\r\n+\t\t\tpc.setName(MARKER_DIRTY_CACHE);\r\n+\t\t} \r\n+\t\tassertEquals(makeDirtyBeforeRefresh, em.isDirty(pc));\r\n+\r\n+\t\tif (lock != null) {\r\n+\t\t\t((EntityManagerImpl)em).getFetchPlan().setReadLockMode(lock);\r\n+\t\t}\r\n+\t\tem.refresh(pc);\r\n+\t\t\r\n+\t\tassertEquals(expected, pc.getName());\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * The expected marker i.e. where the state is refreshed from depends on\r\n+\t * a) whether DataCache is active\r\n+\t * b) whether current Lock is stronger than NOLOCK\r\n+\t * c) whether the object to be refreshed is dirty\r\n+\t * \r\n+\t * The following truth table enumerates the possibilities\r\n+\t * \r\n+\t * Use Cache?   Lock?   Dirty?     Target\r\n+\t *    Y          Y       Y         Database\r\n+\t *    Y          N       Y         Data Cache\r\n+\t *    Y          Y       N         Data Cache\r\n+\t *    Y          N       N         Data Cache\r\n+\t *    \r\n+\t *    N          Y       Y         Database\r\n+\t *    N          N       Y         Database\r\n+\t *    N          Y       N         Object Cache\r\n+\t *    N          N       N         Object Cache\r\n+\t *    \r\n+\t * @param datacache the marker for \r\n+\t * @param database\r\n+\t * @param useDataCache\r\n+\t * @param lock\r\n+\t * @param makeDirtyBeforeRefresh\r\n+\t * @return\r\n+\t */\r\n+\tString getExpectedMarker(boolean useDataCache, LockModeType lock, \r\n+\t\t\tboolean makeDirtyBeforeRefresh) {\r\n+\t\tif (useDataCache) {\r\n+\t\t\treturn (lock != null) ? MARKER_DATABASE : MARKER_DATACACHE; \r\n+\t\t} else {\r\n+\t\t\treturn MARKER_DATABASE;\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t}\r\n+\t\r\n+\tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t}\r\n+\t\r\n+\tpublic void testCleanRefreshWithNoLockDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t}\r\n+\t\r\n+\tpublic void testCleanRefreshWithNoLockHitsDataCache() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t}\r\n+\t\r\n+\tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t}\r\n+\t\r\n+\tpublic void testCleanRefreshWithReadLockDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t}\r\n+\t\r\n+\tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t}\r\n+\t\r\n+\tpublic void testCleanRefreshWithWriteLockDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t}\r\n+\t\r\n+\tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\t\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t}\r\n+\t\r\n+\tpublic void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n+\t\t\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Verify behavior of refreshing an instance which has been deleted by\r\n+\t * out-of-band process (e.g. a native SQL in a separate transaction).\r\n+\t * The behavior differs when refresh() without a lock fetches the data from\r\n+\t * DataCache even when the original database record is deleted.\r\n+\t * \r\n+\t * @param useDataCache\r\n+\t * @param lock\r\n+\t */\r\n+\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \r\n+\t\t\tboolean dirty, LockModeType lock, Class expectedExceptionType) {\r\n+\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n+\t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n+\t\t\t\r\n+\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n+        \r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\r\n+\t\tem.persist(pc);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tObject oid = pc.getId();\r\n+\t\tStoreCache dataCache = emf.getStoreCache();\r\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n+\t\t\r\n+\t\t// delete the record in the database in a separate transaction using\r\n+\t\t// native SQL so that the in-memory instance is not altered \r\n+\t\tem.getTransaction().begin();\r\n+\t\tString sql = \"DELETE FROM POBJECT WHERE id=\"+oid;\r\n+\t\tem.createNativeQuery(sql).executeUpdate();\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\t// the object cache does not know that the record was deleted\r\n+\t\tassertTrue(em.contains(pc));\r\n+\t\t// nor does the data cache\r\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n+\t\t\r\n+\t\t/**\r\n+\t\t * refresh behavior no more depends on current lock. Refresh\r\n+\t\t * will always attempt to fetch the instance from database \r\n+\t\t * raising EntityNotFoundException.\r\n+\t\t *   \r\n+\t\t */\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.getFetchPlan().setReadLockMode(lock);\r\n+\t\tif (dirty) \r\n+\t\t\tpc.setName(\"Dirty Name\");\r\n+\t\ttry {\r\n+\t\t\tem.refresh(pc);\r\n+\t\t\tif (expectedExceptionType != null) {\r\n+\t\t\t\tfail(\"expected \" + expectedExceptionType.getSimpleName() + \r\n+\t\t\t\t\t\t\" for PObject:\" + oid);\r\n+\t\t\t}\r\n+\t\t} catch (Exception ex) {\r\n+\t\t\tboolean expectedException = expectedExceptionType != null &&\r\n+\t\t\t    expectedExceptionType.isAssignableFrom(ex.getClass());\r\n+\t\t\tif (!expectedException) {\r\n+\t\t\t\tex.printStackTrace();\r\n+\t\t\t\tString error = (expectedExceptionType == null) \r\n+\t\t\t\t\t? \"no exception\" : expectedExceptionType.getName();\r\n+\t\t\t\tfail(\"expected \" + error + \" for PObject:\" + oid);\r\n+\t\t\t}\r\n+\t\t} finally {\r\n+\t\t\tem.getTransaction().rollback();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\r\n+\tpublic void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\t\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"8c38a31edc614402ecb0de0cce7eabf7d01da6a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.StoreCacheImpl;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddedEntity;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddingOwnerEntity;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test removing members of embedded collection with active DataCache.\r\n+ * \r\n+ * Originally reported in \r\n+ * <HREF=\"http://issues.apache.org/jira/browse/OPENJPA-625\">OPENJPA-625</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestEmbeddedCollection extends SingleEMFTestCase {\r\n+\r\n+\tprivate static final int SIZE = 4;\r\n+\tprivate static OpenJPAEntityManagerFactorySPI emf = null;\r\n+\t/**\r\n+\t * Sets up EntityManagerFactory: with DataCache.\r\n+\t */\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tif (emf == null) {\r\n+\t\t\tsuper.setUp(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\r\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\r\n+\t\t\t\t\t\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\r\n+\t\t\t\t\t\"sjvm\", \"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n+\t\t\t\t\tEmbeddingOwnerEntity.class, \r\n+\t\t\t\t\tEmbeddedEntity.class,\r\n+\t\t\t\t\tCLEAR_TABLES);\r\n+\t\t\temf = super.emf;\r\n+\t\t\t\r\n+\t\t\tcreateData();\r\n+\t\t}\r\n+\t\tassertNotNull(emf);\r\n+\t\tassertNotNull(emf.getStoreCache());\r\n+\t\tassertTrue(isDataCacheActive(emf));\r\n+\t}\r\n+\r\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n+\t\t\t\t&& emf.getConfiguration().getDataCacheManagerInstance()\r\n+\t\t\t\t\t\t.getSystemDataCache() != null;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void tearDown() throws Exception {\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic void createData() {\r\n+\t\tEmbeddingOwnerEntity owner = new EmbeddingOwnerEntity();\r\n+\t\tfor (int i = 0; i < SIZE; i++) {\r\n+\t\t\tEmbeddedEntity member = new EmbeddedEntity();\r\n+\t\t\tmember.setMarker(\"Member-\" + i);\r\n+\t\t\towner.addMember(member);\r\n+\t\t}\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(owner);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tObject id = OpenJPAPersistence.cast(em).getObjectId(owner);\r\n+\t\tem.clear();\r\n+\r\n+\t\tEmbeddingOwnerEntity test = em.find(EmbeddingOwnerEntity.class, id);\r\n+\t\tassertNotNull(test);\r\n+\t\tList<EmbeddedEntity> members = test.getMembers();\r\n+\t\tassertNotNull(members);\r\n+\t\tassertEquals(SIZE, members.size());\r\n+\t\tfor (int i = 0; i < SIZE; i++)\r\n+\t\t\tmembers.get(i).getMarker().equals(\"Member-\" + i);\r\n+\t}\r\n+\r\n+\tpublic void testRemoveMemberFromEmbeddedCollection() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<EmbeddingOwnerEntity> result = em.createQuery(\r\n+\t\t\t\t\"SELECT p FROM EmbeddingOwnerEntity p\").getResultList();\r\n+\r\n+\t\tassertNotNull(result);\r\n+\t\tassertFalse(result.isEmpty());\r\n+\r\n+\t\tEmbeddingOwnerEntity owner = result.get(0);\r\n+\t\tObject id = owner.getId();\r\n+\t\t\r\n+\t\tassertTrue(emf.getStoreCache().contains(EmbeddingOwnerEntity.class, id));\r\n+\t\t\r\n+\t\tList<EmbeddedEntity> members = owner.getMembers();\r\n+\t\tmembers.remove(0);\r\n+\t\towner.removeMember(0);\r\n+\t\towner.removeMember(members.get(0));\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tassertEquals(owner.getMembers().size(), SIZE-3); \r\n+\t}\r\n+\r\n+}\r"},{"sha":"6c7437b118d0eb19ec61117d46c5b83349c1781b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import org.apache.openjpa.persistence.datacache.common.apps.M2MEntityE;\n+import org.apache.openjpa.persistence.datacache.common.apps.M2MEntityF;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestM2MInDataCache extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\", \n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n+            M2MEntityE.class,\n+            M2MEntityF.class, CLEAR_TABLES);\n+    }\n+\n+    /**\n+     * Test if child list is in order after new child list is added in setup().\n+     *\n+     */\n+    public void testM2MDataCache(){\n+    \tEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        M2MEntityE e1 = new M2MEntityE();\n+        e1.setId(1);\n+        e1.setName(\"ABC\");\n+        em.persist(e1);\n+        M2MEntityE e2 = new M2MEntityE();\n+        e2.setId(2);\n+        e2.setName(\"DEF\");\n+        em.persist(e2);\n+        \n+        M2MEntityF f1 = new M2MEntityF();\n+        f1.setId(10);\n+        em.persist(f1);\n+        M2MEntityF f2 = new M2MEntityF();\n+        f2.setId(20);\n+        em.persist(f2);\n+        \n+        e1.getEntityF().put(f1.getId(), f1);\n+        e1.getEntityF().put(f2.getId(), f2);\n+        e2.getEntityF().put(f1.getId(), f1);\n+        e2.getEntityF().put(f2.getId(), f2);\n+        \n+        f1.getEntityE().put(e1.getName(), e1);\n+        f1.getEntityE().put(e2.getName(), e2);\n+        f2.getEntityE().put(e1.getName(), e1);\n+        f2.getEntityE().put(e2.getName(), e2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        try {\n+            M2MEntityE e1a = em.find(M2MEntityE.class, 1);\n+            Map entityf1 = e1a.getEntityF();\n+            M2MEntityE e2a = em.find(M2MEntityE.class, 2);\n+            Map entityf2 = e2a.getEntityF();\n+            M2MEntityF f1a = em.find(M2MEntityF.class, 10);\n+            Map entitye1 = f1a.getEntityE();\n+            M2MEntityF f2a = em.find(M2MEntityF.class, 20);\n+            Map entitye2 = f2a.getEntityE();\n+        } catch (Exception e) {\n+            fail(\"Fail to get a Map field when DataCache is on\");\n+        }\n+    }\n+}"},{"sha":"2530ce550a998703274b991c741c59f123456f06","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\r\n+\r\n+/**\r\n+ * Embeddable persistent entity.\r\n+ * \r\n+ * Used in {@link TestEmbeddedCollection}.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Embeddable\r\n+public class EmbeddedEntity {\r\n+\tprivate String marker;\r\n+\r\n+\tpublic String getMarker() {\r\n+\t\treturn marker;\r\n+\t}\r\n+\r\n+\tpublic void setMarker(String marker) {\r\n+\t\tthis.marker = marker;\r\n+\t}\r\n+}\r"},{"sha":"c74faed17888168b2edbb60785134d4a6db589dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\r\n+\r\n+/**\r\n+ * Persistent entity that embeds a persistent collection of embeddable.\r\n+ *  \r\n+ * Used in {@link TestEmbeddedCollection}. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class EmbeddingOwnerEntity {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@PersistentCollection(elementEmbedded = true, \r\n+\t\t\telementType = EmbeddedEntity.class, \r\n+\t\t\tfetch = FetchType.LAZY)\r\n+\tprivate List<EmbeddedEntity> members;\r\n+\r\n+\tpublic List<EmbeddedEntity> getMembers() {\r\n+\t\treturn members;\r\n+\t}\r\n+\r\n+\tpublic void addMember(EmbeddedEntity member) {\r\n+\t\tif (members == null)\r\n+\t\t\tmembers = new ArrayList<EmbeddedEntity>();\r\n+\t\tthis.members.add(member);\r\n+\t}\r\n+\t\r\n+\tpublic void removeMember(EmbeddedEntity member) {\r\n+\t\tif (members != null)\r\n+\t\t\tmembers.remove(member);\r\n+\t}\r\n+\t\r\n+\tpublic EmbeddedEntity removeMember(int member) {\r\n+\t\treturn (members != null) ? members.remove(member) : null;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t} \r\n+}\r"},{"sha":"c889297121bf6e3866f5853d7bd5f0e653db5ac4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+import javax.persistence.*;\n+import java.util.*;\n+\n+@Entity\n+public class M2MEntityE  {\n+\t@Id private int id;\n+\tprivate String name;\n+\n+\t@ManyToMany\n+\t@MapKey(name=\"id\")\n+\tprivate Map<Integer,M2MEntityF> entityf;\n+\t\n+\tpublic M2MEntityE() {\n+\t\tentityf = new HashMap<Integer,M2MEntityF>();\n+\t\tname=\"entitye\";\n+\t}\n+\t\t\n+\tpublic Map<Integer,M2MEntityF> getEntityF() {\n+\t\treturn entityf;\n+\t}\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\tpublic String toString(){\n+\t\treturn \"EntityE:\"+id;\n+\t}\n+\tpublic void print(){\n+\t\tSystem.out.println(\"EntityD id=\"+id+\" entityc=\"+ entityf);\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+}"},{"sha":"b910803671f4dde77c3f3e2864d1bb2a0ad7ea09","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.*;\n+import java.util.*;\n+\n+@Entity\n+public class M2MEntityF  {\n+\t@Id private int id;\n+\n+\t@ManyToMany(mappedBy=\"entityf\")\n+\t@MapKey(name=\"name\")\n+\tprivate Map<String, M2MEntityE> entitye;\n+\t\n+\tpublic M2MEntityF() {\n+\t\tentitye = new HashMap<String,M2MEntityE>();\n+\t}\n+\tpublic Map<String, M2MEntityE> getEntityE() {\n+\t\treturn entitye;\n+\t}\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\tpublic String toString(){\n+\t\treturn \"EntityF:\"+id;\n+\t}\n+\tpublic void print(){\n+\t\tSystem.out.println(\"EntityF id=\"+id+\" entitye=\"+ entitye);\n+\t}\n+\n+}"},{"sha":"8d9bf7c9c6c8ca1f7366581ab7e0b8674d2e7c44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * A Simple entity for testing. Has a version field for testing optimistic\r\n+ * concurrent usage.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class PObject {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\tprivate String name;\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"1af43571a18b059746bd388ddb137f29d087e50c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachConstructedCopy.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachConstructedCopy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachConstructedCopy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachConstructedCopy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that manually constructing instances with existing primary key values\n+ * and attaching them works.\n+ *\n+ * @author Abe White\n+ */\n+public class TestAttachConstructedCopy\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Record.class);\n+    }\n+\n+    public void testAttachConstructedCopyWithGeneratedPKAndNoVersion() {\n+        Record record = new Record();\n+        record.setContent(\"orig\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(record);\n+        em.getTransaction().commit();\n+        em.close();\n+        int id = record.getId();\n+\n+        Record copy = new Record();\n+        copy.setId(id);\n+        copy.setContent(\"new\");\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin(); \n+        record = em.merge(copy);\n+        assertTrue(record != copy);\n+        assertEquals(\"new\", record.getContent());\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        record = em.find(Record.class, id);\n+        assertEquals(\"new\", record.getContent());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestAttachConstructedCopy.class);\n+    }\n+}\n+"},{"sha":"3f1492a5fa7307b9e1d7f9c18d55d952dfffe451","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToManyMerge.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.detachment.featureSelection.*;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test merge case for 3 level one to many relation entities.\n+ * SimpleA -> *SimpleB -> *SimpleC. SimpleC has no CascadeType.MERGE annotation.\n+ *\n+ */\n+public class TestNoCascadeOneToManyMerge extends SingleEMFTestCase {\n+    private int a_id;\n+\n+    public void setUp() {\n+        setUp(SimpleA.class, SimpleRef.class, SimpleB.class, SimpleC.class, CLEAR_TABLES);\n+        createEntities();\n+    }\n+\n+    private void createEntities() {\n+        SimpleA a = new SimpleA();\n+        a.setName(\"a1\");\n+\n+        SimpleB b = new SimpleB();\n+        b.setName(\"b1\");\n+        a.addB(b);\n+\n+        SimpleC c1 = new SimpleC();\n+        c1.setName(\"c1\");\n+        b.addC(c1);\n+\n+        SimpleC c2 = new SimpleC();\n+        c2.setName(\"c2\");\n+        b.addC(c2);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(a);\n+        em.getTransaction().commit();\n+        em.close();\n+        a_id = a.getId();\n+    }\n+\n+    public void testMergeAttached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        assertNotNull(a);\n+\n+        SimpleB b = new SimpleB();\n+        b.setName(\"b2\");\n+        a.addB(b);\n+\n+        SimpleC c = new SimpleC();\n+        c.setName(\"c3\");\n+        b.addC(c);\n+\n+        c = new SimpleC();\n+        c.setName(\"c4\");\n+        b.addC(c);\n+\n+        em.getTransaction().begin();\n+        a = em.merge (a);\n+        em.getTransaction().commit ();\n+        em.close();\n+\n+        assertEquals(2, a.getBs().size());\n+    }\n+\n+    /**\n+     * This is the case for openjpa-231.\n+     * When \"B\" and \"C\" are both newly added to a detached \"A\" and then merge \"A\",\n+     * it couldn't find \"B\" because previous code assume B was detached.\n+     */\n+    public void testMergeDetached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        assertNotNull(a);\n+        assertEquals(1, a.getBs().size());\n+        em.close(); //detach a\n+\n+        SimpleB b = new SimpleB();\n+        b.setName(\"b2\");\n+        a.addB(b);\n+\n+        SimpleC c = new SimpleC();\n+        c.setName(\"c3\");\n+        b.addC(c);\n+\n+        c = new SimpleC();\n+        c.setName(\"c4\");\n+        b.addC(c);\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        a = em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertEquals(2, a.getBs().size());\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestNoCascadeOneToManyMerge.class);\n+    }\n+}"},{"sha":"a50fd0985c9c8cdebc9920744d9e9f239bbd9d67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestNoCascadeOneToOneMerge.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.detachment.featureSelection.*;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests merging an entity having a unidirectional one-to-one relation and\n+ * cascade=none.\n+ *\n+ * @author Gokhan Ergul\n+ */\n+public class TestNoCascadeOneToOneMerge\n+    extends SingleEMFTestCase {\n+\n+    private int a_id;\n+    private int b1_id;\n+    private int b2_id;\n+\n+    public void setUp() {\n+        setUp(SimpleA.class, SimpleRef.class, SimpleB.class, SimpleC.class, CLEAR_TABLES);\n+        createEntities();\n+    }\n+\n+    private void createEntities() {\n+        SimpleRef b1 = new SimpleRef();\n+        b1.setName(\"b1-name\");\n+\n+        SimpleRef b2 = new SimpleRef();\n+        b2.setName(\"b2-name\");\n+\n+        SimpleA a = new SimpleA();\n+        a.setName(\"a-name\");\n+        a.setRef(b1);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(b1);\n+        em.persist(b2);\n+        em.persist(a);\n+        em.getTransaction().commit();\n+        em.close();\n+        a_id = a.getId();\n+        b1_id = b1.getId();\n+        b2_id = b2.getId();\n+    }\n+\n+    public void testMergeAllAttached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        SimpleRef b2 = em.find(SimpleRef.class, b2_id);\n+        assertNotNull(a);\n+        assertNotNull(b2);\n+\n+        // change a.b from b1 to b2 and merge\n+        a.setRef(b2);\n+\n+        em.getTransaction().begin();\n+        em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        a = em.find(SimpleA.class, a_id);\n+        em.close();\n+        assertNotNull(a);\n+        assertEquals(b2_id, a.getRef().getId());\n+    }\n+\n+    public void testMergeRefAttached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        assertNotNull(a);\n+        em.close(); // detach a only\n+\n+        em = emf.createEntityManager();\n+        SimpleRef b2 = em.find(SimpleRef.class, b2_id);\n+        assertNotNull(b2);\n+        // do not detach b2\n+\n+        // change a.b from b1 to b2 and merge\n+        a.setRef(b2);\n+\n+        em.getTransaction().begin();\n+        em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        a = em.find(SimpleA.class, a_id);\n+        em.close();\n+        assertNotNull(a);\n+        assertEquals(b2_id, a.getRef().getId());\n+    }\n+\n+    public void testMergeDetached () {\n+        EntityManager em = emf.createEntityManager();\n+        SimpleA a = em.find(SimpleA.class, a_id);\n+        SimpleRef b1 = em.find(SimpleRef.class, b1_id);\n+        SimpleRef b2 = em.find(SimpleRef.class, b2_id);\n+        assertNotNull(a);\n+        assertNotNull(b1);\n+        assertNotNull(b2);\n+        em.close(); // detach all\n+\n+        // change a.b from b1 to b2 and merge\n+        a.setRef(b2);\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.merge(a);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        a = em.find(SimpleA.class, a_id);\n+        em.close();\n+        assertNotNull(a);\n+        assertEquals(b2_id, a.getRef().getId());\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestNoCascadeOneToOneMerge.class);\n+    }\n+}"},{"sha":"381971285cdd382ea31879adb2c63ac902824996","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleA.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+import java.util.LinkedHashSet;\n+\n+@Entity\n+public class SimpleA {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int a_id;\n+\n+    @Basic\n+    protected String name;\n+\n+    @OneToOne\n+    protected SimpleRef ref;\n+\n+    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"parent\")\n+    protected Set<SimpleB> b_set = new LinkedHashSet<SimpleB>();\n+\n+    public int getId() {\n+        return a_id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public SimpleRef getRef() {\n+        return ref;\n+    }\n+\n+    public void setRef(SimpleRef ref) {\n+        this.ref = ref;\n+    }\n+\n+    public void addB(SimpleB b) {\n+        b_set.add(b);\n+        b.setParent(this);\n+    }\n+\n+    public Set<SimpleB> getBs() {\n+       return b_set;\n+    }\n+}"},{"sha":"6d6b22d779b08a513b4bfc52e163c5b2653b0034","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleB.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+import java.util.LinkedHashSet;\n+\n+@Entity\n+public class SimpleB {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int b_id;\n+\n+    @Basic\n+    protected String name;\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"A_ID\", referencedColumnName=\"A_ID\", nullable = false, updatable = false)\n+    protected SimpleA parent;\n+\n+    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"parent\")\n+    protected Set<SimpleC> c_set  = new LinkedHashSet<SimpleC>();\n+\n+    public int getId() {\n+        return b_id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public SimpleA getParent() {\n+       return parent;\n+    }\n+\n+    public void setParent(SimpleA a) {\n+       this.parent = a;\n+    }\n+\n+    public void addC (SimpleC c) {\n+        c_set.add (c);\n+        c.setParent(this);\n+    }\n+\n+    public Set<SimpleC> getCs() {\n+       return c_set;\n+    }\n+}"},{"sha":"537c1f177ba75e9c6be847b3e55afe99ac9cffd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleC.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class SimpleC {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int c_id;\n+\n+    @Basic\n+    protected String name;\n+\n+    @ManyToOne(cascade=CascadeType.PERSIST)\n+    @JoinColumn(name=\"B_ID\", referencedColumnName=\"B_ID\", nullable = false, updatable = false)\n+    protected SimpleB parent;\n+\n+    public int getId() {\n+        return c_id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setParent(SimpleB b) {\n+       this.parent = b;\n+    }\n+\n+    public SimpleB getParent() {\n+       return parent;\n+    }\n+\n+}"},{"sha":"70cf53e477e2b6cac2f67b731b5a7c9b7b3469b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/SimpleRef.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+import java.util.LinkedHashSet;\n+\n+@Entity\n+public class SimpleRef {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int id;\n+\n+    @Basic\n+    protected String name;\n+\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"de798d17fddc70c7b89b6202c1f5476bc535f918","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@IdClass(BookId.class)\n+@VersionColumn\n+public class Book implements Serializable {\n+    @Id\n+    @Column(name=\"BOOK_NAME\", nullable = false)\n+    private String name;\n+    \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"book\")\n+    private Set<Page> pages = new HashSet<Page>();\n+    \n+    @Id\n+    @Column(nullable = false)\n+    @ManyToOne (cascade = CascadeType.ALL)\n+    private Library library;\n+    \n+    private String author;\n+    \n+\tpublic String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public Library getLibrary() {\n+        return library;\n+    }\n+\n+    public void setLibrary(Library library) {\n+        this.library = library;\n+    }\n+\n+    public Page getPage(int n) {\n+        for (Page p: pages) {\n+            if (p.getNumber() == n) {\n+                return p;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public void addPage(Page p) {\n+        p.setBook(this);\n+        pages.add(p);\n+    }\n+    \n+\tpublic String getAuthor() {\n+\t\treturn author;\n+\t}\n+\n+\tpublic void setAuthor(String author) {\n+\t\tthis.author = author;\n+\t}\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof Book)) {\n+            return false;\n+        }\n+        \n+        Book other = (Book)o;\n+        \n+        if (!getName().equals(other.getName())) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        return getName().hashCode();\n+    }\n+}"},{"sha":"56e3717b9dbad5c0ac94241799158fd0bad2802f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Entity identity used to test compound primary keys using entity as \n+ * relationship to more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public final class BookId implements Serializable {\n+    private String name;\n+    private String library;\n+\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof BookId)) {\n+            return false;\n+        }\n+        \n+        BookId other = (BookId)o;\n+        \n+        if (!(getName().equals(other.getName()))) {\n+            return false;\n+        }\n+        \n+        if (!getLibrary().equals(other.getLibrary())) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+    \n+    public int hashCode() {\n+        return safeHash(getName()) * safeHash(getLibrary());\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getLibrary() {\n+        return library;\n+    }\n+\n+    public void setLibrary(String library) {\n+        this.library = library;\n+    }\n+    \n+    private int safeHash(Object o) {\n+    \treturn (o == null) ? 31 : o.hashCode();\n+    }\n+}"},{"sha":"772ddeab1888573094983b9482d9401c9ea1ca2d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@VersionColumn\n+public class Library implements Serializable {\n+    @Id\n+    @Column(name=\"LIBRARY_NAME\", nullable = false)\n+    private String name;\n+    \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"library\")\n+    private Set<Book> books = new HashSet<Book>();\n+    \n+    private String location;\n+    \n+\tpublic String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public Set<Book> getBooks() {\n+\t\treturn books;\n+\t}\n+\n+    public Book getBook(String name) {\n+        for (Book b: books) {\n+            if (b.getName().equals(name)) {\n+                return b;\n+            }\n+        }\n+        \n+        return null;\n+    }\n+\n+    public void addBook(Book book) {\n+        book.setLibrary(this);\n+        books.add(book);\n+    }\n+    \n+\tpublic String getLocation() {\n+\t\treturn location;\n+\t}\n+\n+\tpublic void setLocation(String location) {\n+\t\tthis.location = location;\n+\t}\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof Library)) {\n+            return false;\n+        }\n+        \n+        Library other = (Library)o;\n+        \n+        if (!getName().equals(other.getName())) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        return getName().hashCode();\n+    }\n+}"},{"sha":"2f5f910d6fbbf9f6b0ce2e6ac18bca55f55830a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@IdClass(PageId.class)\n+@VersionColumn\n+public class Page implements Serializable {\n+    @Id\n+    @Column(name=\"PAGE_NUMBER\",nullable = false)\n+    private int number;\n+\n+    @Id\n+    @Column(nullable = false)\n+    @ManyToOne (cascade = CascadeType.ALL)\n+    @JoinColumns({\n+        @JoinColumn(name=\"BOOK_LIBRARY_LIBRARY_NAME\", referencedColumnName=\"LIBRARY_LIBRARY_NAME\"),\n+        @JoinColumn(name=\"BOOK_BOOK_NAME\", referencedColumnName=\"BOOK_NAME\")    \n+    })\n+    private Book book;\n+    \n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+\n+    public Book getBook() {\n+        return book;\n+    }\n+\n+    public void setBook(Book book) {\n+        this.book = book;\n+    }    \n+}"},{"sha":"45a727dd9f94adc0458e858aef1638bb87516c3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Entity identity used to test compound primary keys using entity as \n+ * relationship to more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public final class PageId implements Serializable {\n+    private int number;\n+    private BookId book;\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof PageId)) {\n+            return false;\n+        }\n+        \n+        PageId other = (PageId)o;\n+        \n+        if (!(getNumber() == other.getNumber())) {\n+            return false;\n+        }\n+      \n+        if (!getBook().equals(other.getBook())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+    \n+    public int hashCode() {\n+        return number * (book != null ? getBook().hashCode() : 31);\n+    }\n+\n+    \n+    public BookId getBook() {\n+        return book;\n+    }\n+\n+    public void setBook(BookId book) {\n+        this.book = book;\n+    }\n+}"},{"sha":"213536c0641f7fa65f07abfa664a6f07e5c3c7c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests entities that use compound keys that includes entity relationship at\n+ * more than one level.\n+ * \n+ * Page has a compound identity to Book which itself uses a compound identity to\n+ * Library.\n+ * \n+ * Test case and domain classes were originally part of the reported issue <A\n+ * href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ * \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestMultipleLevelDerivedIdentity extends SingleEMFTestCase {\n+\tprivate static String LIBRARY_NAME = \"LIB\";\n+\tprivate static String BOOK_NAME    = \"foo\";\n+\tprivate static int    NUM_PAGES    = 3;\n+\t\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp(CLEAR_TABLES, Library.class, Book.class, Page.class,\n+\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n+\t\tcreate();\n+\t}\n+\t\n+//\tpublic void tearDown() throws Exception {\n+//\t\t\n+//\t}\n+\t\n+\tpublic void testPersist() {\n+\t\tcreate();\n+\t}\n+\n+\tpublic void testQueryRootLevel() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tList<Library> list = em.createQuery(\"SELECT p FROM Library p\")\n+\t\t\t\t\t\t\t   .getResultList();\n+\t\tassertFalse(list.isEmpty());\n+\t\tLibrary lib = (Library) list.get(0);\n+\t\tassertNotNull(lib.getBook(BOOK_NAME));\n+\t\tassertNotNull(lib.getBook(BOOK_NAME).getPage(1));\n+\t}\n+\t\n+\tpublic void testQueryIntermediateLevel() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tList<Book> list = em.createQuery(\"SELECT p FROM Book p\")\n+\t\t\t\t\t\t\t   .getResultList();\n+\t\tassertFalse(list.isEmpty());\n+\t\tBook book = list.get(0);\n+\t\tLibrary lib = book.getLibrary();\n+\t\tfor (int i=1; i<=NUM_PAGES; i++) {\n+\t\t\tPage page = book.getPage(i);\n+\t\t\tassertNotNull(page);\n+\t\t\tassertEquals(book, page.getBook());\n+\t\t\tassertEquals(lib, page.getBook().getLibrary());\n+\t\t\tassertEquals(page, page.getBook().getPage(page.getNumber()));\n+\t\t}\n+\t}\n+\n+\t\n+\tpublic void testQueryLeafLevel() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tList<Page> list = em.createQuery(\"SELECT p FROM Page p\")\n+\t\t\t\t\t\t\t   .getResultList();\n+\t\tassertFalse(list.isEmpty());\n+\t\tBook book = list.get(0).getBook();\n+\t\tLibrary lib = book.getLibrary();\n+\t\tfor (Page page : list) {\n+\t\t\tassertEquals(book, page.getBook());\n+\t\t\tassertEquals(lib, page.getBook().getLibrary());\n+\t\t\tassertEquals(page, page.getBook().getPage(page.getNumber()));\n+\t\t}\n+\t}\n+\n+\tpublic void testFindRootNode() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tLibrary lib = em.find(Library.class, LIBRARY_NAME);\n+\t\tassertNotNull(lib);\n+\t\tassertNotNull(lib.getBook(BOOK_NAME));\n+\t\tassertNotNull(lib.getBook(BOOK_NAME).getPage(1));\n+\t}\n+\t\n+\tpublic void testFindIntermediateNode() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\t\n+\t\tBookId bookId = new BookId();\n+\t\tbookId.setLibrary(LIBRARY_NAME);\n+\t\tbookId.setName(BOOK_NAME);\n+\t\tBook book = em.find(Book.class, bookId);\n+\t\tassertNotNull(book);\n+\t}\n+\t\n+\tpublic void testFindLeafNode() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\t\n+\t\tBookId bookId = new BookId();\n+\t\tbookId.setLibrary(LIBRARY_NAME);\n+\t\tbookId.setName(BOOK_NAME);\n+\t\tPageId pageId = new PageId();\n+\t\tpageId.setBook(bookId);\n+\t\tpageId.setNumber(2);\n+\t\tPage page = em.find(Page.class, pageId);\n+\t\tassertNotNull(page);\n+\t}\n+\t\n+\tpublic void testUpdate() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tBookId bookId = new BookId();\n+\t\tbookId.setLibrary(LIBRARY_NAME);\n+\t\tbookId.setName(BOOK_NAME);\n+\t\tBook book = em.find(Book.class, bookId);\n+\t\tassertNotNull(book);\n+\t\tbook.setAuthor(\"modifiy Author\");\n+\t\tem.getTransaction().commit();\n+\t}\n+\t\n+\tpublic void testDelete() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tLibrary lib = em.find(Library.class, LIBRARY_NAME);\n+\t\tem.remove(lib);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t    assertEquals(0, count(Library.class));\n+\t    assertEquals(0, count(Book.class));\n+\t    assertEquals(0, count(Page.class));\n+\t}\n+\n+\t\n+\t/**\n+\t * Create a Library with a Book and three Pages.\n+\t */\n+\tpublic void create() {\n+\t\tif (count(Library.class) > 0)\n+\t\t\treturn;\n+\t\t\n+\t\tEntityManager em = null;\n+\t\tem = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\t\n+\t\tLibrary lib = new Library();\n+\t\tlib.setName(LIBRARY_NAME);\n+\n+\t\tBook book = new Book();\n+\t\tbook.setName(BOOK_NAME);\n+\t\tlib.addBook(book);\n+\t\tfor (int i = 1; i <= NUM_PAGES; i++) {\n+\t\t\tPage page = new Page();\n+\t\t\tpage.setNumber(i);\n+\t\t\tbook.addPage(page);\n+\t\t}\n+\t\tem.persist(lib);\n+\t\tem.getTransaction().commit();\n+\n+\t\tem.clear();\n+\t}\n+}"},{"sha":"9239d14ecfb4fa40fccd5fe2539949ee86b53274","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","patch":"@@ -33,7 +33,6 @@\n @Entity\r\n public class PObject {\r\n \t@Id\r\n-\t@GeneratedValue\r\n \tprivate long id;\r\n \tprivate String name;\r\n \t@Version\r\n@@ -47,6 +46,10 @@ public void setName(String name) {\n \t\tthis.name = name;\r\n \t}\r\n \t\r\n+\tpublic void setId(long id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n \tpublic long getId() {\r\n \t\treturn id;\r\n \t}\r"},{"sha":"33ebe560614c1465ae6baa423fb2e4ced76dcb2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"a029d662fbe0e36400fb6ae9b5da1795d0034802","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"83c2ad83a824f0d574a04cb259d94583d226a51c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"8d08cd38825fbaa1ce251264d6fda9201df7fcde","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"27cf5554fc4a932a405371d737d54aa4a0627c34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"7e90cb0e0d0a3b7705d45103c7e0aa67e1214449","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"ba841886bb0ccfd310cd22cc9bd953f222df32cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"2838e269e43940e8b12fe0b7faf7356403d5090b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"948bdb61f1fae6d88267a5172b1782c3eb3f8471","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"612802b734b103ab226817ec62416924d0da67c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"e1c9b3151fac4d3dda997d935158d483dcc507a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"a5de491975ab0c1167e6a0dc122737460c33f2e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"063806afc7eacb65db6bd17cb38ae2b3219d1cc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"1aa23140ceb57c47b455301eae4609e2df0fd1b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"3679142e502bda0492a304613bc26dc6b27935e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"e89862fe749acd5c2fefacf13ecee986ba5fe5b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"459167fbf30f502eedbcdd9f1f4f002d7a44abd8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"4e9c81975d607d324032c24127be8c9d8c69af34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"f070cc635ad658c28105da656ec758dd692a2ac0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"651ac4ab20cb279c3566d6109a6d127913ee1634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"1c3267b79399012f3ea0a05282debfdcaaa428d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"2a9928dd02e0777da24769392829ee28b29cf70d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"ca73892d8dd77d943ac65491c238b7e4bc899374","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"029fbbbd5f70a66081cdd1dd045c45b2ef883207","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"3cd30dfdf2626ae3c4d840e653a512d34b0d9ed6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"4ef32d951b5f096030ef1ca78d515a5a0b7b1b1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"8edfcd685e341c0748b1a52a401678726550404b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"7153a301999255252466d208bcfdd285905619f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"2ea9f30c17b775d294b84e0291cb230bb60be5d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"831a36097cc023bd8c8eb4a11036361820138311","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"ce7425489113b529eee892b5a96c56df8dfea1d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"7ac96510a8d435b87925249508ac71ad175f8217","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"3dcdfbd699a1959458aa7510c6ce57f5d89c7b14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"21515281a6d6f2e260e48fa4e472b007a87632d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"936dc9993556dd42d2319fb8fa01c5057bf8dc2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"a72cc144759a468f5a5bb7b84e7e133448d00dfd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"e46280a5907b19266cba513393f4b0aa85bc0865","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"bbc398a141946c41f1c125b4b692123f9dbd4c70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"ffe5986fcfbad8021d22f4f0c6ce1586b511448e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"a5f5622fabfef091f6dd90dea3f16c775a622324","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"1572ffb0eedd6154eaa07d00662b6d221b209f71","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"16aba3f065fea0f0db965b6928854c89edaf366a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"8852f56e074fd0fa92985f3940fe38edd04d52af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"f9e25c4e8df19468eb5f1642e8d6fa20d764a02f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"f995bfaedbc380301d58b946c703cf47d75c67ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"1b93a0390c2e8a357d4dde4b371463e54c6e6659","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"b9aba608c6a2706573b6987e16a5dbc1bdcc0b00","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"d640e15c1f8b6153aac7e129d10041f4a3e7fdd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"e65be4faa136276fec74a2eab65dcf4faa057788","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"afd66df2ba2442d014827e5d31d987fce5566d85","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"bb45cdab4034bf5cc2c0cba566ca6487d7e32fe7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"f263867248a4d503002cde214d8189147034d151","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"64a9a5776f0961a937709e0942406c6f7c94001a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"0af73218cf944bed18753f4eebca16c14c541bae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"10b7319109411f9b23ef0fe7178fe9afe3084011","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"2b7053ad46a3ab0cf7217d251dacdae7f84f26c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"83100b569b0b92dcea93ce43a18dd2dd599f42dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"a31e366421c3704824650ee5f622dbf83aad1142","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"0b78aee9684ec6d5024b1dfbb2a523e3af6aa1ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"2dc5e2bb25824c72638f7349decfe92bc7af46ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"df2fb39b11e59a94aaad84efaaeae2c187a4bde5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"986a1896ec3bd53c5350709ee617229cb8a1cb8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"43e3ea8c69662842a0269c8d3861ed82849af5a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"24d379a069a1a8be1f48397b51908e9e01ba3ec1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"cc0a103960eae07773a62378d55b7d9df58fc6b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"4d7a5bdff2a6314ae707b47a0ecb8bc23d2159e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"de133a07d82770c9680eaabde101fdb79bbdfecf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"ffe7384d67308f0e422951ed21aeca3f96943114","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"fd03563726798005f4f321cd842e355812938a0b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"c8a7aa77d8a8cfad53842b6f482dfe033476bbda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"c4a1f684e39a38debbc447c7947792b09318fca5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"d6a5582450874a0981163f77b6cb31f2a7b17adc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"db39129af913dec44a696e96e111484626d8849c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"72685e2f878293e767ee9388603a16dc502b7083","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"4e71644f474655b0a556f74e3849467981f950a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"a9cd7048bbc47bba6d91dde4ecfd8e8f04b48928","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"ad3ac29075f4885a05697e19c1c87400d2b8c379","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"},{"sha":"5c0db50c9f1f861a5df12e18528c8bcdad7a02d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e"}]}

