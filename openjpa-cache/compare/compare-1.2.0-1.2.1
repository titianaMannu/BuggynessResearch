{"url":"https://api.github.com/repos/apache/openjpa/compare/1.2.0...1.2.1","html_url":"https://github.com/apache/openjpa/compare/1.2.0...1.2.1","permalink_url":"https://github.com/apache/openjpa/compare/apache:df58521...apache:26dbc39","diff_url":"https://github.com/apache/openjpa/compare/1.2.0...1.2.1.diff","patch_url":"https://github.com/apache/openjpa/compare/1.2.0...1.2.1.patch","base_commit":{"sha":"df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmNTg1MjExYmJlNmY3NjczMmY1YTRiOWQ1ODZhN2MwZGQwYjJhMWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-14T13:51:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-14T13:51:24Z"},"message":"A    https://svn.apache.org/repos/asf/openjpa/tags/1.2.0\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.0@753657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","html_url":"https://github.com/apache/openjpa/commit/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/df585211bbe6f76732f5a4b9d586a7c0dd0b2a1e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d6a0570c31c1c25957153a21058de5a4e1c40313","url":"https://api.github.com/repos/apache/openjpa/commits/d6a0570c31c1c25957153a21058de5a4e1c40313","html_url":"https://github.com/apache/openjpa/commit/d6a0570c31c1c25957153a21058de5a4e1c40313"},{"sha":"3966d7bded8da815e4ea9049470f37c2dae0b585","url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","html_url":"https://github.com/apache/openjpa/commit/3966d7bded8da815e4ea9049470f37c2dae0b585"}]},"merge_base_commit":{"sha":"3966d7bded8da815e4ea9049470f37c2dae0b585","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5NjZkN2JkZWQ4ZGE4MTVlNGVhOTA0OTQ3MGYzN2MyZGFlMGI1ODU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:24Z"},"message":"[maven-release-plugin] prepare release 1.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683324 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ebc2f5fe8207bc5eff74de257b66bde0c3a1aae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","html_url":"https://github.com/apache/openjpa/commit/3966d7bded8da815e4ea9049470f37c2dae0b585","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"62ff7fa9c64b1431933fb0dd07a863c0d32be240","url":"https://api.github.com/repos/apache/openjpa/commits/62ff7fa9c64b1431933fb0dd07a863c0d32be240","html_url":"https://github.com/apache/openjpa/commit/62ff7fa9c64b1431933fb0dd07a863c0d32be240"}]},"status":"diverged","ahead_by":76,"behind_by":3,"total_commits":76,"commits":[{"sha":"348e03fdc4f48d17e6dc55080cee33514cdfa70f","node_id":"MDY6Q29tbWl0MjA2MzY0OjM0OGUwM2ZkYzRmNDhkMTdlNmRjNTUwODBjZWUzMzUxNGNkZmE3MGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:37Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-08-06T16:52:37Z"},"message":"[maven-release-plugin] prepare for next development iteration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a888844c23d0d260b229a0f64f6d037a0f276374","url":"https://api.github.com/repos/apache/openjpa/git/trees/a888844c23d0d260b229a0f64f6d037a0f276374"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/348e03fdc4f48d17e6dc55080cee33514cdfa70f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/348e03fdc4f48d17e6dc55080cee33514cdfa70f","html_url":"https://github.com/apache/openjpa/commit/348e03fdc4f48d17e6dc55080cee33514cdfa70f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/348e03fdc4f48d17e6dc55080cee33514cdfa70f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3966d7bded8da815e4ea9049470f37c2dae0b585","url":"https://api.github.com/repos/apache/openjpa/commits/3966d7bded8da815e4ea9049470f37c2dae0b585","html_url":"https://github.com/apache/openjpa/commit/3966d7bded8da815e4ea9049470f37c2dae0b585"}]},{"sha":"107da0027dceaaa0ffd197e92aa6bf5350674b5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjEwN2RhMDAyN2RjZWFhYTBmZmQxOTdlOTJhYTZiZjUzNTA2NzRiNWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-08T06:46:40Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-08T06:46:40Z"},"message":"OPENJPA-681 Subquery generates SQL with syntax error\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@683877 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a7a02274eed3203c79e3e2cf486db3058b47c493","url":"https://api.github.com/repos/apache/openjpa/git/trees/a7a02274eed3203c79e3e2cf486db3058b47c493"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/107da0027dceaaa0ffd197e92aa6bf5350674b5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/107da0027dceaaa0ffd197e92aa6bf5350674b5c","html_url":"https://github.com/apache/openjpa/commit/107da0027dceaaa0ffd197e92aa6bf5350674b5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/107da0027dceaaa0ffd197e92aa6bf5350674b5c/comments","author":null,"committer":null,"parents":[{"sha":"348e03fdc4f48d17e6dc55080cee33514cdfa70f","url":"https://api.github.com/repos/apache/openjpa/commits/348e03fdc4f48d17e6dc55080cee33514cdfa70f","html_url":"https://github.com/apache/openjpa/commit/348e03fdc4f48d17e6dc55080cee33514cdfa70f"}]},{"sha":"ec867bd7a909813448adae2008fd437512ba91f1","node_id":"MDY6Q29tbWl0MjA2MzY0OmVjODY3YmQ3YTkwOTgxMzQ0OGFkYWUyMDA4ZmQ0Mzc1MTJiYTkxZjE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-08T18:34:10Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-08T18:34:10Z"},"message":"OPENJPA-680 - Merge changes back to 1.2.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@684039 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"26511a587cebdfdc52d930a76ec9302581afc4b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/26511a587cebdfdc52d930a76ec9302581afc4b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ec867bd7a909813448adae2008fd437512ba91f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ec867bd7a909813448adae2008fd437512ba91f1","html_url":"https://github.com/apache/openjpa/commit/ec867bd7a909813448adae2008fd437512ba91f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ec867bd7a909813448adae2008fd437512ba91f1/comments","author":null,"committer":null,"parents":[{"sha":"107da0027dceaaa0ffd197e92aa6bf5350674b5c","url":"https://api.github.com/repos/apache/openjpa/commits/107da0027dceaaa0ffd197e92aa6bf5350674b5c","html_url":"https://github.com/apache/openjpa/commit/107da0027dceaaa0ffd197e92aa6bf5350674b5c"}]},{"sha":"cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902","node_id":"MDY6Q29tbWl0MjA2MzY0OmNiMGUyNzJkNmM4NmEwZDRlNWU2ZDYxZDM3YTY3NGZiZTgwYTE5MDI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-08T20:53:26Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-08T20:53:26Z"},"message":"Merge r684082 from trunk to 1.2.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@684088 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d12095566bf047235d75eb62cfcf3aee46f7108d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d12095566bf047235d75eb62cfcf3aee46f7108d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902","html_url":"https://github.com/apache/openjpa/commit/cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902","comments_url":"https://api.github.com/repos/apache/openjpa/commits/cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902/comments","author":null,"committer":null,"parents":[{"sha":"ec867bd7a909813448adae2008fd437512ba91f1","url":"https://api.github.com/repos/apache/openjpa/commits/ec867bd7a909813448adae2008fd437512ba91f1","html_url":"https://github.com/apache/openjpa/commit/ec867bd7a909813448adae2008fd437512ba91f1"}]},{"sha":"0f94bd532bcafeefd5a49250051920fc8292fb31","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmOTRiZDUzMmJjYWZlZWZkNWE0OTI1MDA1MTkyMGZjODI5MmZiMzE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-11T16:20:30Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-11T16:20:30Z"},"message":"OPENJPA-686 - Commit on behalf of Fay Wang. Updating manual on Sybase specific behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@684794 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae7cc72b319b18d331767a4a23e6335b5e44e2c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae7cc72b319b18d331767a4a23e6335b5e44e2c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f94bd532bcafeefd5a49250051920fc8292fb31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f94bd532bcafeefd5a49250051920fc8292fb31","html_url":"https://github.com/apache/openjpa/commit/0f94bd532bcafeefd5a49250051920fc8292fb31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f94bd532bcafeefd5a49250051920fc8292fb31/comments","author":null,"committer":null,"parents":[{"sha":"cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902","url":"https://api.github.com/repos/apache/openjpa/commits/cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902","html_url":"https://github.com/apache/openjpa/commit/cb0e272d6c86a0d4e5e6d61d37a674fbe80a1902"}]},{"sha":"0d825b95422e5f309838bc99f39ee0040443b1b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkODI1Yjk1NDIyZTVmMzA5ODM4YmM5OWYzOWVlMDA0MDQ0M2IxYjM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-12T05:10:54Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-08-12T05:10:54Z"},"message":"OPENJPA-679 java.lang.ArrayIndexOutOfBoundsException may occur when a relation field is annotated as a primary key and a foreign key\nCommit patch provided by Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@685042 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afbb60decebb70953696862d5656ccdbb4e676cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/afbb60decebb70953696862d5656ccdbb4e676cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d825b95422e5f309838bc99f39ee0040443b1b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d825b95422e5f309838bc99f39ee0040443b1b3","html_url":"https://github.com/apache/openjpa/commit/0d825b95422e5f309838bc99f39ee0040443b1b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d825b95422e5f309838bc99f39ee0040443b1b3/comments","author":null,"committer":null,"parents":[{"sha":"0f94bd532bcafeefd5a49250051920fc8292fb31","url":"https://api.github.com/repos/apache/openjpa/commits/0f94bd532bcafeefd5a49250051920fc8292fb31","html_url":"https://github.com/apache/openjpa/commit/0f94bd532bcafeefd5a49250051920fc8292fb31"}]},{"sha":"31f5708964bc0f75a340857fe8c913056d038e7b","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxZjU3MDg5NjRiYzBmNzVhMzQwODU3ZmU4YzkxMzA1NmQwMzhlN2I=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-12T21:58:15Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-12T21:58:15Z"},"message":"OPENJPA-680 - revert changes due to TCK regression.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@685335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efd1973bd49d5c83b027f2a782ba694b1ddc5dd3","url":"https://api.github.com/repos/apache/openjpa/git/trees/efd1973bd49d5c83b027f2a782ba694b1ddc5dd3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31f5708964bc0f75a340857fe8c913056d038e7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31f5708964bc0f75a340857fe8c913056d038e7b","html_url":"https://github.com/apache/openjpa/commit/31f5708964bc0f75a340857fe8c913056d038e7b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31f5708964bc0f75a340857fe8c913056d038e7b/comments","author":null,"committer":null,"parents":[{"sha":"0d825b95422e5f309838bc99f39ee0040443b1b3","url":"https://api.github.com/repos/apache/openjpa/commits/0d825b95422e5f309838bc99f39ee0040443b1b3","html_url":"https://github.com/apache/openjpa/commit/0d825b95422e5f309838bc99f39ee0040443b1b3"}]},{"sha":"c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf","node_id":"MDY6Q29tbWl0MjA2MzY0OmM2ODdjNWI2YTBjMjhmMDgwN2UwZWQ5OGViNmQ4Y2I3Y2I4MDY2YmY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-13T21:34:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-13T21:34:52Z"},"message":"OPENJPA-664: Rollback revision 679442 name length constraint checks\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@685683 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d4ebb45f48f9c14309ea15a3ca66c3a5a25bbe9","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d4ebb45f48f9c14309ea15a3ca66c3a5a25bbe9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf","html_url":"https://github.com/apache/openjpa/commit/c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf/comments","author":null,"committer":null,"parents":[{"sha":"31f5708964bc0f75a340857fe8c913056d038e7b","url":"https://api.github.com/repos/apache/openjpa/commits/31f5708964bc0f75a340857fe8c913056d038e7b","html_url":"https://github.com/apache/openjpa/commit/31f5708964bc0f75a340857fe8c913056d038e7b"}]},{"sha":"9bd5b8d39614b6fe14d4dd35730b8618207174f5","node_id":"MDY6Q29tbWl0MjA2MzY0OjliZDViOGQzOTYxNGI2ZmUxNGQ0ZGQzNTczMGI4NjE4MjA3MTc0ZjU=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-08-14T21:55:51Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-08-14T21:55:51Z"},"message":"Cleaning up our testcase run to get rid of the INFO messages for a non-existent file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686056 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31ca56a5a2ca05d0dd730cd0c4bc9013b7ef3c4a","url":"https://api.github.com/repos/apache/openjpa/git/trees/31ca56a5a2ca05d0dd730cd0c4bc9013b7ef3c4a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9bd5b8d39614b6fe14d4dd35730b8618207174f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9bd5b8d39614b6fe14d4dd35730b8618207174f5","html_url":"https://github.com/apache/openjpa/commit/9bd5b8d39614b6fe14d4dd35730b8618207174f5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9bd5b8d39614b6fe14d4dd35730b8618207174f5/comments","author":null,"committer":null,"parents":[{"sha":"c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf","url":"https://api.github.com/repos/apache/openjpa/commits/c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf","html_url":"https://github.com/apache/openjpa/commit/c687c5b6a0c28f0807e0ed98eb6d8cb7cb8066bf"}]},{"sha":"83a41e6f714aa26b749ae0282b44bd72e4482d04","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzYTQxZTZmNzE0YWEyNmI3NDlhZTAyODJiNDRiZDcyZTQ0ODJkMDQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-08-14T22:36:22Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-08-14T22:36:22Z"},"message":"OPENJPA-646.  Integrating the original patch which bypasses the enum types in our TemporaryClassLoader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686069 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43e0185e130db6b0c97be937371ab500056b6a62","url":"https://api.github.com/repos/apache/openjpa/git/trees/43e0185e130db6b0c97be937371ab500056b6a62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/83a41e6f714aa26b749ae0282b44bd72e4482d04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/83a41e6f714aa26b749ae0282b44bd72e4482d04","html_url":"https://github.com/apache/openjpa/commit/83a41e6f714aa26b749ae0282b44bd72e4482d04","comments_url":"https://api.github.com/repos/apache/openjpa/commits/83a41e6f714aa26b749ae0282b44bd72e4482d04/comments","author":null,"committer":null,"parents":[{"sha":"9bd5b8d39614b6fe14d4dd35730b8618207174f5","url":"https://api.github.com/repos/apache/openjpa/commits/9bd5b8d39614b6fe14d4dd35730b8618207174f5","html_url":"https://github.com/apache/openjpa/commit/9bd5b8d39614b6fe14d4dd35730b8618207174f5"}]},{"sha":"e6f060175f6121a81c6bf028bdfab752070324e8","node_id":"MDY6Q29tbWl0MjA2MzY0OmU2ZjA2MDE3NWY2MTIxYTgxYzZiZjAyOGJkZmFiNzUyMDcwMzI0ZTg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-15T22:19:36Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-15T22:19:36Z"},"message":"Minor typo corrections in message files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686402 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"115e964e7acd6e4d84fb9f83daaa268432e18ff2","url":"https://api.github.com/repos/apache/openjpa/git/trees/115e964e7acd6e4d84fb9f83daaa268432e18ff2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e6f060175f6121a81c6bf028bdfab752070324e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e6f060175f6121a81c6bf028bdfab752070324e8","html_url":"https://github.com/apache/openjpa/commit/e6f060175f6121a81c6bf028bdfab752070324e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e6f060175f6121a81c6bf028bdfab752070324e8/comments","author":null,"committer":null,"parents":[{"sha":"83a41e6f714aa26b749ae0282b44bd72e4482d04","url":"https://api.github.com/repos/apache/openjpa/commits/83a41e6f714aa26b749ae0282b44bd72e4482d04","html_url":"https://github.com/apache/openjpa/commit/83a41e6f714aa26b749ae0282b44bd72e4482d04"}]},{"sha":"4c40adc4aabacf839c12615e9bb4ff99512bac3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjNDBhZGM0YWFiYWNmODM5YzEyNjE1ZTliYjRmZjk5NTEyYmFjM2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T02:30:37Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T02:30:37Z"},"message":"Merge 686325, 686349, 686419\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686438 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aaee35c270bdc528fbe30f9db110f5fc2fc93ef3","url":"https://api.github.com/repos/apache/openjpa/git/trees/aaee35c270bdc528fbe30f9db110f5fc2fc93ef3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c","html_url":"https://github.com/apache/openjpa/commit/4c40adc4aabacf839c12615e9bb4ff99512bac3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c/comments","author":null,"committer":null,"parents":[{"sha":"e6f060175f6121a81c6bf028bdfab752070324e8","url":"https://api.github.com/repos/apache/openjpa/commits/e6f060175f6121a81c6bf028bdfab752070324e8","html_url":"https://github.com/apache/openjpa/commit/e6f060175f6121a81c6bf028bdfab752070324e8"}]},{"sha":"00a4a5691124856274928ad075f54853f7c35ac5","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwYTRhNTY5MTEyNDg1NjI3NDkyOGFkMDc1ZjU0ODUzZjdjMzVhYzU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-16T05:08:20Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-08-16T05:08:20Z"},"message":"Minor typo correction.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686451 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6043878ea15899e3691dd5ac3b72874fd7e41c3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/6043878ea15899e3691dd5ac3b72874fd7e41c3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/00a4a5691124856274928ad075f54853f7c35ac5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/00a4a5691124856274928ad075f54853f7c35ac5","html_url":"https://github.com/apache/openjpa/commit/00a4a5691124856274928ad075f54853f7c35ac5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/00a4a5691124856274928ad075f54853f7c35ac5/comments","author":null,"committer":null,"parents":[{"sha":"4c40adc4aabacf839c12615e9bb4ff99512bac3c","url":"https://api.github.com/repos/apache/openjpa/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c","html_url":"https://github.com/apache/openjpa/commit/4c40adc4aabacf839c12615e9bb4ff99512bac3c"}]},{"sha":"12a87de4be0499ed53c6caa6eebb77151452715f","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyYTg3ZGU0YmUwNDk5ZWQ1M2M2Y2FhNmVlYmI3NzE1MTQ1MjcxNWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T08:13:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T08:13:25Z"},"message":"merge 686453 for hint processing changes required due to eager compilation of Query in OPENJPA-678\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686462 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4c88ce62e90dea4a6f6b0ecf0b7ea7f23d4bec3","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4c88ce62e90dea4a6f6b0ecf0b7ea7f23d4bec3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/12a87de4be0499ed53c6caa6eebb77151452715f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/12a87de4be0499ed53c6caa6eebb77151452715f","html_url":"https://github.com/apache/openjpa/commit/12a87de4be0499ed53c6caa6eebb77151452715f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/12a87de4be0499ed53c6caa6eebb77151452715f/comments","author":null,"committer":null,"parents":[{"sha":"00a4a5691124856274928ad075f54853f7c35ac5","url":"https://api.github.com/repos/apache/openjpa/commits/00a4a5691124856274928ad075f54853f7c35ac5","html_url":"https://github.com/apache/openjpa/commit/00a4a5691124856274928ad075f54853f7c35ac5"}]},{"sha":"d147f40cecdb8fa771ffbf656743400a4357afc5","node_id":"MDY6Q29tbWl0MjA2MzY0OmQxNDdmNDBjZWNkYjhmYTc3MWZmYmY2NTY3NDM0MDBhNDM1N2FmYzU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-19T00:15:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-19T00:15:35Z"},"message":"Merge 686325, 686349, 686419 -- missed a whole block during manual merge.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e79ccda7e1f01b07657663171e5df02c2d3daa9c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e79ccda7e1f01b07657663171e5df02c2d3daa9c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d147f40cecdb8fa771ffbf656743400a4357afc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d147f40cecdb8fa771ffbf656743400a4357afc5","html_url":"https://github.com/apache/openjpa/commit/d147f40cecdb8fa771ffbf656743400a4357afc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d147f40cecdb8fa771ffbf656743400a4357afc5/comments","author":null,"committer":null,"parents":[{"sha":"12a87de4be0499ed53c6caa6eebb77151452715f","url":"https://api.github.com/repos/apache/openjpa/commits/12a87de4be0499ed53c6caa6eebb77151452715f","html_url":"https://github.com/apache/openjpa/commit/12a87de4be0499ed53c6caa6eebb77151452715f"}]},{"sha":"2272472f96818db391d7602b5bc89c8d7939489a","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyNzI0NzJmOTY4MThkYjM5MWQ3NjAyYjViYzg5YzhkNzkzOTQ4OWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-19T18:40:34Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-19T18:40:34Z"},"message":"Rollback query parameter validation, temporal type conversion, eager query compilation and duplicate NamedQuery annotation changes from 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@687120 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a724e87824a4e3352017169adb460df9ead6eae5","url":"https://api.github.com/repos/apache/openjpa/git/trees/a724e87824a4e3352017169adb460df9ead6eae5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2272472f96818db391d7602b5bc89c8d7939489a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2272472f96818db391d7602b5bc89c8d7939489a","html_url":"https://github.com/apache/openjpa/commit/2272472f96818db391d7602b5bc89c8d7939489a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2272472f96818db391d7602b5bc89c8d7939489a/comments","author":null,"committer":null,"parents":[{"sha":"d147f40cecdb8fa771ffbf656743400a4357afc5","url":"https://api.github.com/repos/apache/openjpa/commits/d147f40cecdb8fa771ffbf656743400a4357afc5","html_url":"https://github.com/apache/openjpa/commit/d147f40cecdb8fa771ffbf656743400a4357afc5"}]},{"sha":"f52910017e4da9312764e945aced01055b8de052","node_id":"MDY6Q29tbWl0MjA2MzY0OmY1MjkxMDAxN2U0ZGE5MzEyNzY0ZTk0NWFjZWQwMTA1NWI4ZGUwNTI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-08-25T20:07:28Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-08-25T20:07:28Z"},"message":"OPENJPA-702.  Update documentation for the DESCSTAT parameter for DB2 on z/OS.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@688856 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2cefdbd71f1ac54074f87ddf8355a688e9a04dc6","url":"https://api.github.com/repos/apache/openjpa/git/trees/2cefdbd71f1ac54074f87ddf8355a688e9a04dc6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f52910017e4da9312764e945aced01055b8de052","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f52910017e4da9312764e945aced01055b8de052","html_url":"https://github.com/apache/openjpa/commit/f52910017e4da9312764e945aced01055b8de052","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f52910017e4da9312764e945aced01055b8de052/comments","author":null,"committer":null,"parents":[{"sha":"2272472f96818db391d7602b5bc89c8d7939489a","url":"https://api.github.com/repos/apache/openjpa/commits/2272472f96818db391d7602b5bc89c8d7939489a","html_url":"https://github.com/apache/openjpa/commit/2272472f96818db391d7602b5bc89c8d7939489a"}]},{"sha":"6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyODRhN2M5Y2E0YzE2NjdmZDZhMzJkZDNlZWY2NTAxMDczZThjYTY=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-09-08T21:32:26Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-09-08T21:32:26Z"},"message":"OPENJPA-715.  Committing the testcase provided by Ekin Sokmen and the patch provided by Fay Wang.  Committing the change for both the 1.2.x service stream and 1.3.0 snapshot (trunk).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@693283 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41c4d09de97e4b352809b8d0719d5c02595a4172","url":"https://api.github.com/repos/apache/openjpa/git/trees/41c4d09de97e4b352809b8d0719d5c02595a4172"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6","html_url":"https://github.com/apache/openjpa/commit/6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6/comments","author":null,"committer":null,"parents":[{"sha":"f52910017e4da9312764e945aced01055b8de052","url":"https://api.github.com/repos/apache/openjpa/commits/f52910017e4da9312764e945aced01055b8de052","html_url":"https://github.com/apache/openjpa/commit/f52910017e4da9312764e945aced01055b8de052"}]},{"sha":"4e37730ac6335097f1af40c2095f7dba6a639efd","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlMzc3MzBhYzYzMzUwOTdmMWFmNDBjMjA5NWY3ZGJhNmE2MzllZmQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-09-08T21:34:34Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-09-08T21:34:34Z"},"message":"OPENJPA-715.  Committing the testcase provided by Ekin Sokmen and the patch provided by Fay Wang.  Committing the change for both the 1.2.x service stream and 1.3.0 snapshot (trunk).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@693288 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d53278d3332abf0b3e25ef1324caf6e24abd71d","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d53278d3332abf0b3e25ef1324caf6e24abd71d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e37730ac6335097f1af40c2095f7dba6a639efd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e37730ac6335097f1af40c2095f7dba6a639efd","html_url":"https://github.com/apache/openjpa/commit/4e37730ac6335097f1af40c2095f7dba6a639efd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e37730ac6335097f1af40c2095f7dba6a639efd/comments","author":null,"committer":null,"parents":[{"sha":"6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6","url":"https://api.github.com/repos/apache/openjpa/commits/6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6","html_url":"https://github.com/apache/openjpa/commit/6284a7c9ca4c1667fd6a32dd3eef6501073e8ca6"}]},{"sha":"0f79c0583766fbe00cce5a97ac1133174b3689ab","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmNzljMDU4Mzc2NmZiZTAwY2NlNWE5N2FjMTEzMzE3NGIzNjg5YWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-16T19:34:41Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-16T19:34:41Z"},"message":"OPENJPA-695 adding nightly upload profile to branches\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696020 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f231f2b5e5791dedcba02072c43fe6aafdfdbb1e","url":"https://api.github.com/repos/apache/openjpa/git/trees/f231f2b5e5791dedcba02072c43fe6aafdfdbb1e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f79c0583766fbe00cce5a97ac1133174b3689ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f79c0583766fbe00cce5a97ac1133174b3689ab","html_url":"https://github.com/apache/openjpa/commit/0f79c0583766fbe00cce5a97ac1133174b3689ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f79c0583766fbe00cce5a97ac1133174b3689ab/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4e37730ac6335097f1af40c2095f7dba6a639efd","url":"https://api.github.com/repos/apache/openjpa/commits/4e37730ac6335097f1af40c2095f7dba6a639efd","html_url":"https://github.com/apache/openjpa/commit/4e37730ac6335097f1af40c2095f7dba6a639efd"}]},{"sha":"f66afa4d6eaf74b00e732426b6b28ffde19c26ab","node_id":"MDY6Q29tbWl0MjA2MzY0OmY2NmFmYTRkNmVhZjc0YjAwZTczMjQyNmI2YjI4ZmZkZTE5YzI2YWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-16T19:39:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-16T19:39:34Z"},"message":"OPENJPA-711 merging revision 695674 to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94e81b1a18a4caa7614629527965c64e0b386bfd","url":"https://api.github.com/repos/apache/openjpa/git/trees/94e81b1a18a4caa7614629527965c64e0b386bfd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f66afa4d6eaf74b00e732426b6b28ffde19c26ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f66afa4d6eaf74b00e732426b6b28ffde19c26ab","html_url":"https://github.com/apache/openjpa/commit/f66afa4d6eaf74b00e732426b6b28ffde19c26ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f66afa4d6eaf74b00e732426b6b28ffde19c26ab/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f79c0583766fbe00cce5a97ac1133174b3689ab","url":"https://api.github.com/repos/apache/openjpa/commits/0f79c0583766fbe00cce5a97ac1133174b3689ab","html_url":"https://github.com/apache/openjpa/commit/0f79c0583766fbe00cce5a97ac1133174b3689ab"}]},{"sha":"00e002a49a1eaa309e5aca54d0c83d488ccd9c48","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwZTAwMmE0OWExZWFhMzA5ZTVhY2E1NGQwYzgzZDQ4OGNjZDljNDg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-16T22:08:21Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-16T22:08:21Z"},"message":"OPENJPA-726 merge revision 696082 to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696086 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60ff78ed38b6b260bd15f02fc5a258b4602ddf54","url":"https://api.github.com/repos/apache/openjpa/git/trees/60ff78ed38b6b260bd15f02fc5a258b4602ddf54"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/00e002a49a1eaa309e5aca54d0c83d488ccd9c48","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/00e002a49a1eaa309e5aca54d0c83d488ccd9c48","html_url":"https://github.com/apache/openjpa/commit/00e002a49a1eaa309e5aca54d0c83d488ccd9c48","comments_url":"https://api.github.com/repos/apache/openjpa/commits/00e002a49a1eaa309e5aca54d0c83d488ccd9c48/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f66afa4d6eaf74b00e732426b6b28ffde19c26ab","url":"https://api.github.com/repos/apache/openjpa/commits/f66afa4d6eaf74b00e732426b6b28ffde19c26ab","html_url":"https://github.com/apache/openjpa/commit/f66afa4d6eaf74b00e732426b6b28ffde19c26ab"}]},{"sha":"99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5Y2FiMWJhOWIyYTNmOGRkMjRjMTE1ZGQwZDNhMTI5ZDJiZDBlNjI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T08:16:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T08:16:00Z"},"message":"OPENJPA-713 exclude sources and javadoc from aggregate openjpa jar (merge revision 696193)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696194 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4381bb7e5f5f0f14f42929e7135858717c615dfb","url":"https://api.github.com/repos/apache/openjpa/git/trees/4381bb7e5f5f0f14f42929e7135858717c615dfb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62","html_url":"https://github.com/apache/openjpa/commit/99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"00e002a49a1eaa309e5aca54d0c83d488ccd9c48","url":"https://api.github.com/repos/apache/openjpa/commits/00e002a49a1eaa309e5aca54d0c83d488ccd9c48","html_url":"https://github.com/apache/openjpa/commit/00e002a49a1eaa309e5aca54d0c83d488ccd9c48"}]},{"sha":"4bd326f8cedd4fcc3e2a7e56e25f57d22187d280","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZDMyNmY4Y2VkZDRmY2MzZTJhN2U1NmUyNWY1N2QyMjE4N2QyODA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T15:50:31Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T15:50:31Z"},"message":"OPENJPA-727 merge revision 696343 to 1.2.x. Removing reference to missing image file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696346 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4b4afc77f7d32f0b0d9130511f0ee9dd0a4b8b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4b4afc77f7d32f0b0d9130511f0ee9dd0a4b8b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4bd326f8cedd4fcc3e2a7e56e25f57d22187d280","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4bd326f8cedd4fcc3e2a7e56e25f57d22187d280","html_url":"https://github.com/apache/openjpa/commit/4bd326f8cedd4fcc3e2a7e56e25f57d22187d280","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4bd326f8cedd4fcc3e2a7e56e25f57d22187d280/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62","url":"https://api.github.com/repos/apache/openjpa/commits/99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62","html_url":"https://github.com/apache/openjpa/commit/99cab1ba9b2a3f8dd24c115dd0d3a129d2bd0e62"}]},{"sha":"a1e0cd78a7870332e54bc125c3db9aa78373a75e","node_id":"MDY6Q29tbWl0MjA2MzY0OmExZTBjZDc4YTc4NzAzMzJlNTRiYzEyNWMzZGI5YWE3ODM3M2E3NWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T16:19:15Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T16:19:15Z"},"message":"OPENJPA-724 committing patch provided by Milosz Tylenda. Merging revision 696350 to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696360 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"334aa3f1d1d19ada7dcdb85d8c84b80712eacd09","url":"https://api.github.com/repos/apache/openjpa/git/trees/334aa3f1d1d19ada7dcdb85d8c84b80712eacd09"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a1e0cd78a7870332e54bc125c3db9aa78373a75e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a1e0cd78a7870332e54bc125c3db9aa78373a75e","html_url":"https://github.com/apache/openjpa/commit/a1e0cd78a7870332e54bc125c3db9aa78373a75e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a1e0cd78a7870332e54bc125c3db9aa78373a75e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4bd326f8cedd4fcc3e2a7e56e25f57d22187d280","url":"https://api.github.com/repos/apache/openjpa/commits/4bd326f8cedd4fcc3e2a7e56e25f57d22187d280","html_url":"https://github.com/apache/openjpa/commit/4bd326f8cedd4fcc3e2a7e56e25f57d22187d280"}]},{"sha":"b27185a3378780b2585332875e13142e16f38037","node_id":"MDY6Q29tbWl0MjA2MzY0OmIyNzE4NWEzMzc4NzgwYjI1ODUzMzI4NzVlMTMxNDJlMTZmMzgwMzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T23:19:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-17T23:19:16Z"},"message":"OPENJPA-650 adding documentation for openjpa.RuntimeUnenhancedClasses\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a448c1c4a79ebd1e563ef89c7fa2455d98e3049b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a448c1c4a79ebd1e563ef89c7fa2455d98e3049b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b27185a3378780b2585332875e13142e16f38037","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b27185a3378780b2585332875e13142e16f38037","html_url":"https://github.com/apache/openjpa/commit/b27185a3378780b2585332875e13142e16f38037","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b27185a3378780b2585332875e13142e16f38037/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a1e0cd78a7870332e54bc125c3db9aa78373a75e","url":"https://api.github.com/repos/apache/openjpa/commits/a1e0cd78a7870332e54bc125c3db9aa78373a75e","html_url":"https://github.com/apache/openjpa/commit/a1e0cd78a7870332e54bc125c3db9aa78373a75e"}]},{"sha":"507c29b9e80aa7bfe5f9b005e6228ac292243f6a","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwN2MyOWI5ZTgwYWE3YmZlNWY5YjAwNWU2MjI4YWMyOTIyNDNmNmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-09-18T21:26:39Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-09-18T21:26:39Z"},"message":"OPENJPA-710: Merge to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@696818 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fec3f313efd32c01604d8cc2cb548a3a320d3a28","url":"https://api.github.com/repos/apache/openjpa/git/trees/fec3f313efd32c01604d8cc2cb548a3a320d3a28"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/507c29b9e80aa7bfe5f9b005e6228ac292243f6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/507c29b9e80aa7bfe5f9b005e6228ac292243f6a","html_url":"https://github.com/apache/openjpa/commit/507c29b9e80aa7bfe5f9b005e6228ac292243f6a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/507c29b9e80aa7bfe5f9b005e6228ac292243f6a/comments","author":null,"committer":null,"parents":[{"sha":"b27185a3378780b2585332875e13142e16f38037","url":"https://api.github.com/repos/apache/openjpa/commits/b27185a3378780b2585332875e13142e16f38037","html_url":"https://github.com/apache/openjpa/commit/b27185a3378780b2585332875e13142e16f38037"}]},{"sha":"b55d5326f522f447ccbcccb6bd9ccfca23f66bde","node_id":"MDY6Q29tbWl0MjA2MzY0OmI1NWQ1MzI2ZjUyMmY0NDdjY2JjY2NiNmJkOWNjZmNhMjNmNjZiZGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-22T19:34:51Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-09-22T19:34:51Z"},"message":"OPENJPA-685. Removing references to maven.compile.classpath and maven.dependency.classpath from enhancer ant task. Merge to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@697959 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f55524cd9b077f26c1725604b36f5513dbb2318","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f55524cd9b077f26c1725604b36f5513dbb2318"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b55d5326f522f447ccbcccb6bd9ccfca23f66bde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b55d5326f522f447ccbcccb6bd9ccfca23f66bde","html_url":"https://github.com/apache/openjpa/commit/b55d5326f522f447ccbcccb6bd9ccfca23f66bde","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b55d5326f522f447ccbcccb6bd9ccfca23f66bde/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"507c29b9e80aa7bfe5f9b005e6228ac292243f6a","url":"https://api.github.com/repos/apache/openjpa/commits/507c29b9e80aa7bfe5f9b005e6228ac292243f6a","html_url":"https://github.com/apache/openjpa/commit/507c29b9e80aa7bfe5f9b005e6228ac292243f6a"}]},{"sha":"c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3","node_id":"MDY6Q29tbWl0MjA2MzY0OmM0YjYzYmQ0ZjhiOTBlNmRjMjU4NjZkYzIyNzg5YjZjM2U1NTMyYjM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-09-25T04:45:53Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-09-25T04:45:53Z"},"message":"OPENJPA-719 - Ensure English locale is used in toUpperCase/toLowerCase for locale insensitive code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@698814 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dfda64a471b87c4f7ef8f1e6d8a3680880008363","url":"https://api.github.com/repos/apache/openjpa/git/trees/dfda64a471b87c4f7ef8f1e6d8a3680880008363"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3","html_url":"https://github.com/apache/openjpa/commit/c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3/comments","author":null,"committer":null,"parents":[{"sha":"b55d5326f522f447ccbcccb6bd9ccfca23f66bde","url":"https://api.github.com/repos/apache/openjpa/commits/b55d5326f522f447ccbcccb6bd9ccfca23f66bde","html_url":"https://github.com/apache/openjpa/commit/b55d5326f522f447ccbcccb6bd9ccfca23f66bde"}]},{"sha":"99103ed94dde120d63c33eed076890b1640ecf0a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5MTAzZWQ5NGRkZTEyMGQ2M2MzM2VlZDA3Njg5MGIxNjQwZWNmMGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-10-03T15:16:41Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-10-03T15:16:41Z"},"message":"OPENJPA-731 merging revision 699156 to 1.2.x branch. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@701407 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a742a2daa0c5d62e639f24ba84f0ce38b116e84e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a742a2daa0c5d62e639f24ba84f0ce38b116e84e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99103ed94dde120d63c33eed076890b1640ecf0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99103ed94dde120d63c33eed076890b1640ecf0a","html_url":"https://github.com/apache/openjpa/commit/99103ed94dde120d63c33eed076890b1640ecf0a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99103ed94dde120d63c33eed076890b1640ecf0a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3","url":"https://api.github.com/repos/apache/openjpa/commits/c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3","html_url":"https://github.com/apache/openjpa/commit/c4b63bd4f8b90e6dc25866dc22789b6c3e5532b3"}]},{"sha":"9005cabc4f4632ec3d1a7053c56fddb7dd477013","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMDVjYWJjNGY0NjMyZWMzZDFhNzA1M2M1NmZkZGI3ZGQ0NzcwMTM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-10-14T17:22:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-10-14T17:22:59Z"},"message":"OPENJPA-744 Extra SQL on LAZY/EAGER  ManyToOne relation\nFurther improved for performance when OneToMany is fetch EAGER, the inverse ManyToOne relations are set such that relation fields in entities after detach remain valid.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@704586 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4ce3a68a42331c72593e051ee71431e8d9f64fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4ce3a68a42331c72593e051ee71431e8d9f64fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013","html_url":"https://github.com/apache/openjpa/commit/9005cabc4f4632ec3d1a7053c56fddb7dd477013","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013/comments","author":null,"committer":null,"parents":[{"sha":"99103ed94dde120d63c33eed076890b1640ecf0a","url":"https://api.github.com/repos/apache/openjpa/commits/99103ed94dde120d63c33eed076890b1640ecf0a","html_url":"https://github.com/apache/openjpa/commit/99103ed94dde120d63c33eed076890b1640ecf0a"}]},{"sha":"ef1c3363a77164c8a06f02be1364b2aa45f549a0","node_id":"MDY6Q29tbWl0MjA2MzY0OmVmMWMzMzYzYTc3MTY0YzhhMDZmMDJiZTEzNjRiMmFhNDVmNTQ5YTA=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-10-14T20:45:40Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-10-14T20:45:40Z"},"message":"OPENJPA-744\nReverting change to perform additional testing on the 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@704674 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f6aa488c6efba7b2ea2d8b18ab176ea6bcbb1a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/1f6aa488c6efba7b2ea2d8b18ab176ea6bcbb1a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ef1c3363a77164c8a06f02be1364b2aa45f549a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ef1c3363a77164c8a06f02be1364b2aa45f549a0","html_url":"https://github.com/apache/openjpa/commit/ef1c3363a77164c8a06f02be1364b2aa45f549a0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ef1c3363a77164c8a06f02be1364b2aa45f549a0/comments","author":null,"committer":null,"parents":[{"sha":"9005cabc4f4632ec3d1a7053c56fddb7dd477013","url":"https://api.github.com/repos/apache/openjpa/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013","html_url":"https://github.com/apache/openjpa/commit/9005cabc4f4632ec3d1a7053c56fddb7dd477013"}]},{"sha":"f9f1965f012867347221005cfd45efb55e123a9a","node_id":"MDY6Q29tbWl0MjA2MzY0OmY5ZjE5NjVmMDEyODY3MzQ3MjIxMDA1Y2ZkNDVlZmI1NWUxMjNhOWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-10-15T01:33:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-10-15T01:33:18Z"},"message":"OPENJPA-733 Merging Jeremy's change to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@704763 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d56099d8c24399d35409acacb5afa28b83e4af9","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d56099d8c24399d35409acacb5afa28b83e4af9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f9f1965f012867347221005cfd45efb55e123a9a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f9f1965f012867347221005cfd45efb55e123a9a","html_url":"https://github.com/apache/openjpa/commit/f9f1965f012867347221005cfd45efb55e123a9a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f9f1965f012867347221005cfd45efb55e123a9a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ef1c3363a77164c8a06f02be1364b2aa45f549a0","url":"https://api.github.com/repos/apache/openjpa/commits/ef1c3363a77164c8a06f02be1364b2aa45f549a0","html_url":"https://github.com/apache/openjpa/commit/ef1c3363a77164c8a06f02be1364b2aa45f549a0"}]},{"sha":"f81bfefba50e9ebc53b4607d5af6c3a84050375b","node_id":"MDY6Q29tbWl0MjA2MzY0OmY4MWJmZWZiYTUwZTllYmM1M2I0NjA3ZDVhZjZjM2E4NDA1MDM3NWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-10-22T23:30:31Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-10-22T23:30:31Z"},"message":"OPENJPA-745: raise exception when the string to be inserted\nor updated is longer than the column length.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@707222 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95a5c9a4351870fa54d5b355e7bb77970be08c36","url":"https://api.github.com/repos/apache/openjpa/git/trees/95a5c9a4351870fa54d5b355e7bb77970be08c36"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f81bfefba50e9ebc53b4607d5af6c3a84050375b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f81bfefba50e9ebc53b4607d5af6c3a84050375b","html_url":"https://github.com/apache/openjpa/commit/f81bfefba50e9ebc53b4607d5af6c3a84050375b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f81bfefba50e9ebc53b4607d5af6c3a84050375b/comments","author":null,"committer":null,"parents":[{"sha":"f9f1965f012867347221005cfd45efb55e123a9a","url":"https://api.github.com/repos/apache/openjpa/commits/f9f1965f012867347221005cfd45efb55e123a9a","html_url":"https://github.com/apache/openjpa/commit/f9f1965f012867347221005cfd45efb55e123a9a"}]},{"sha":"598c21648eac7504dc2894afcad955d0cd450723","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5OGMyMTY0OGVhYzc1MDRkYzI4OTRhZmNhZDk1NWQwY2Q0NTA3MjM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-10-24T20:35:29Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-10-24T20:35:29Z"},"message":"OPENJPA-752: Enhance exception message text to improve serviceability.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@707741 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f7a4beb7878b1603aa6e9466d46a0234110f806","url":"https://api.github.com/repos/apache/openjpa/git/trees/3f7a4beb7878b1603aa6e9466d46a0234110f806"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/598c21648eac7504dc2894afcad955d0cd450723","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/598c21648eac7504dc2894afcad955d0cd450723","html_url":"https://github.com/apache/openjpa/commit/598c21648eac7504dc2894afcad955d0cd450723","comments_url":"https://api.github.com/repos/apache/openjpa/commits/598c21648eac7504dc2894afcad955d0cd450723/comments","author":null,"committer":null,"parents":[{"sha":"f81bfefba50e9ebc53b4607d5af6c3a84050375b","url":"https://api.github.com/repos/apache/openjpa/commits/f81bfefba50e9ebc53b4607d5af6c3a84050375b","html_url":"https://github.com/apache/openjpa/commit/f81bfefba50e9ebc53b4607d5af6c3a84050375b"}]},{"sha":"2482d744fbfd28f28a675bdcd1d0db0a23065ac0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0ODJkNzQ0ZmJmZDI4ZjI4YTY3NWJkY2QxZDBkYjBhMjMwNjVhYzA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-11-04T20:54:15Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-11-04T20:54:15Z"},"message":"OPENJPA-762: batch execution fails for Oracle \nwhen batch limit is set to -1.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@711397 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7f281661128553983318cd00044399d2f86044a5","url":"https://api.github.com/repos/apache/openjpa/git/trees/7f281661128553983318cd00044399d2f86044a5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2482d744fbfd28f28a675bdcd1d0db0a23065ac0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2482d744fbfd28f28a675bdcd1d0db0a23065ac0","html_url":"https://github.com/apache/openjpa/commit/2482d744fbfd28f28a675bdcd1d0db0a23065ac0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2482d744fbfd28f28a675bdcd1d0db0a23065ac0/comments","author":null,"committer":null,"parents":[{"sha":"598c21648eac7504dc2894afcad955d0cd450723","url":"https://api.github.com/repos/apache/openjpa/commits/598c21648eac7504dc2894afcad955d0cd450723","html_url":"https://github.com/apache/openjpa/commit/598c21648eac7504dc2894afcad955d0cd450723"}]},{"sha":"b7178324a9daecae1104b900dc3e24b91ea24203","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3MTc4MzI0YTlkYWVjYWUxMTA0YjkwMGRjM2UyNGI5MWVhMjQyMDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-11-11T03:55:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-11-11T03:55:23Z"},"message":"OPENJPA-765 Check for isInsertable and isUpdatable in HandlerFieldStrategy - merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@712930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"56cdb1ab2e1ae0b9e8d5de217ad229c11e262370","url":"https://api.github.com/repos/apache/openjpa/git/trees/56cdb1ab2e1ae0b9e8d5de217ad229c11e262370"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7178324a9daecae1104b900dc3e24b91ea24203","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7178324a9daecae1104b900dc3e24b91ea24203","html_url":"https://github.com/apache/openjpa/commit/b7178324a9daecae1104b900dc3e24b91ea24203","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7178324a9daecae1104b900dc3e24b91ea24203/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2482d744fbfd28f28a675bdcd1d0db0a23065ac0","url":"https://api.github.com/repos/apache/openjpa/commits/2482d744fbfd28f28a675bdcd1d0db0a23065ac0","html_url":"https://github.com/apache/openjpa/commit/2482d744fbfd28f28a675bdcd1d0db0a23065ac0"}]},{"sha":"dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","node_id":"MDY6Q29tbWl0MjA2MzY0OmRmYjY4ZDZiYjM5ZTZlZDc2OTljNDFlZjRhOWMwMGZjMGU4NTllMWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:15:53Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:15:53Z"},"message":"OPENJPA-744 Extra SQL on LAZY/EAGER  ManyToOne relation\nApply fix to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@713857 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10287e46d57c3ee5fedb2ce37000e3c1df0ca0d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/10287e46d57c3ee5fedb2ce37000e3c1df0ca0d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","html_url":"https://github.com/apache/openjpa/commit/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c/comments","author":null,"committer":null,"parents":[{"sha":"b7178324a9daecae1104b900dc3e24b91ea24203","url":"https://api.github.com/repos/apache/openjpa/commits/b7178324a9daecae1104b900dc3e24b91ea24203","html_url":"https://github.com/apache/openjpa/commit/b7178324a9daecae1104b900dc3e24b91ea24203"}]},{"sha":"ead275493e524fba1e978ae76a7ade4e90d54f2f","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhZDI3NTQ5M2U1MjRmYmExZTk3OGFlNzZhN2FkZTRlOTBkNTRmMmY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:17:23Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-11-13T23:17:23Z"},"message":"OPENJPA-755 OpenJPA thows EntityExistsException trying persist a preexisting, detached entity\nApply fix to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@713858 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2751f00728c189af7120a0d3d71f4f2a1c68339","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2751f00728c189af7120a0d3d71f4f2a1c68339"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f","html_url":"https://github.com/apache/openjpa/commit/ead275493e524fba1e978ae76a7ade4e90d54f2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f/comments","author":null,"committer":null,"parents":[{"sha":"dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","url":"https://api.github.com/repos/apache/openjpa/commits/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c","html_url":"https://github.com/apache/openjpa/commit/dfb68d6bb39e6ed7699c41ef4a9c00fc0e859e1c"}]},{"sha":"402709a8495042a1c0eb79d6c61be48d35c82e37","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwMjcwOWE4NDk1MDQyYTFjMGViNzlkNmM2MWJlNDhkMzVjODJlMzc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-11-20T16:40:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-11-20T16:40:36Z"},"message":"OPENJPA-742: add get LineNumber/ColumnNumber API in \nthe SourceTracker\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@719275 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10eb6d943b1af04f52e48bc4d43444b591d7895d","url":"https://api.github.com/repos/apache/openjpa/git/trees/10eb6d943b1af04f52e48bc4d43444b591d7895d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/402709a8495042a1c0eb79d6c61be48d35c82e37","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/402709a8495042a1c0eb79d6c61be48d35c82e37","html_url":"https://github.com/apache/openjpa/commit/402709a8495042a1c0eb79d6c61be48d35c82e37","comments_url":"https://api.github.com/repos/apache/openjpa/commits/402709a8495042a1c0eb79d6c61be48d35c82e37/comments","author":null,"committer":null,"parents":[{"sha":"ead275493e524fba1e978ae76a7ade4e90d54f2f","url":"https://api.github.com/repos/apache/openjpa/commits/ead275493e524fba1e978ae76a7ade4e90d54f2f","html_url":"https://github.com/apache/openjpa/commit/ead275493e524fba1e978ae76a7ade4e90d54f2f"}]},{"sha":"6a226f8b76e4ca83df1faf9828fe33993454da10","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhMjI2ZjhiNzZlNGNhODNkZjFmYWY5ODI4ZmUzMzk5MzQ1NGRhMTA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-12-03T21:41:50Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-12-03T21:41:50Z"},"message":"OPENJPA-811 - Committ on behalf of Pinaki Poddar and Dinkar Rao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@723087 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c29228887aa1383db1ada45f25e10092b4d482c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c29228887aa1383db1ada45f25e10092b4d482c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6a226f8b76e4ca83df1faf9828fe33993454da10","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6a226f8b76e4ca83df1faf9828fe33993454da10","html_url":"https://github.com/apache/openjpa/commit/6a226f8b76e4ca83df1faf9828fe33993454da10","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6a226f8b76e4ca83df1faf9828fe33993454da10/comments","author":null,"committer":null,"parents":[{"sha":"402709a8495042a1c0eb79d6c61be48d35c82e37","url":"https://api.github.com/repos/apache/openjpa/commits/402709a8495042a1c0eb79d6c61be48d35c82e37","html_url":"https://github.com/apache/openjpa/commit/402709a8495042a1c0eb79d6c61be48d35c82e37"}]},{"sha":"b73837448858c4d4111edd7155fc1c28f0fde4b5","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3MzgzNzQ0ODg1OGM0ZDQxMTFlZGQ3MTU1ZmMxYzI4ZjBmZGU0YjU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-05T20:27:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-05T20:27:01Z"},"message":"OPENJPA-817 preserve order of statements with ConstraintUpdateManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@723851 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31f9985cca5671671d4385872e927e529bd76d00","url":"https://api.github.com/repos/apache/openjpa/git/trees/31f9985cca5671671d4385872e927e529bd76d00"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5","html_url":"https://github.com/apache/openjpa/commit/b73837448858c4d4111edd7155fc1c28f0fde4b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a226f8b76e4ca83df1faf9828fe33993454da10","url":"https://api.github.com/repos/apache/openjpa/commits/6a226f8b76e4ca83df1faf9828fe33993454da10","html_url":"https://github.com/apache/openjpa/commit/6a226f8b76e4ca83df1faf9828fe33993454da10"}]},{"sha":"446b6ce13e82de3b059182e6ec247022a7444feb","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0NmI2Y2UxM2U4MmRlM2IwNTkxODJlNmVjMjQ3MDIyYTc0NDRmZWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T15:22:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T15:22:42Z"},"message":"OPENJPA-777 merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@727744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae2758c27686cf96ae7cdce140ea8442c18ed47f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae2758c27686cf96ae7cdce140ea8442c18ed47f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/446b6ce13e82de3b059182e6ec247022a7444feb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/446b6ce13e82de3b059182e6ec247022a7444feb","html_url":"https://github.com/apache/openjpa/commit/446b6ce13e82de3b059182e6ec247022a7444feb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/446b6ce13e82de3b059182e6ec247022a7444feb/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b73837448858c4d4111edd7155fc1c28f0fde4b5","url":"https://api.github.com/repos/apache/openjpa/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5","html_url":"https://github.com/apache/openjpa/commit/b73837448858c4d4111edd7155fc1c28f0fde4b5"}]},{"sha":"a4ca5d2ba225157881d865af04abc0c55a0cc68b","node_id":"MDY6Q29tbWl0MjA2MzY0OmE0Y2E1ZDJiYTIyNTE1Nzg4MWQ4NjVhZjA0YWJjMGM1NWEwY2M2OGI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T17:36:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T17:36:18Z"},"message":"OPENJPA-708 merge to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@727775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b490ba10139b38753d686aa07b85211b8a30098","url":"https://api.github.com/repos/apache/openjpa/git/trees/7b490ba10139b38753d686aa07b85211b8a30098"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a4ca5d2ba225157881d865af04abc0c55a0cc68b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a4ca5d2ba225157881d865af04abc0c55a0cc68b","html_url":"https://github.com/apache/openjpa/commit/a4ca5d2ba225157881d865af04abc0c55a0cc68b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a4ca5d2ba225157881d865af04abc0c55a0cc68b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"446b6ce13e82de3b059182e6ec247022a7444feb","url":"https://api.github.com/repos/apache/openjpa/commits/446b6ce13e82de3b059182e6ec247022a7444feb","html_url":"https://github.com/apache/openjpa/commit/446b6ce13e82de3b059182e6ec247022a7444feb"}]},{"sha":"6187079f0a4865eaf6e76481aa19f98f47a2392a","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxODcwNzlmMGE0ODY1ZWFmNmU3NjQ4MWFhMTlmOThmNDdhMjM5MmE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T21:01:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T21:01:57Z"},"message":"OPENJPA-779 for 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@727823 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b490ba10139b38753d686aa07b85211b8a30098","url":"https://api.github.com/repos/apache/openjpa/git/trees/7b490ba10139b38753d686aa07b85211b8a30098"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6187079f0a4865eaf6e76481aa19f98f47a2392a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6187079f0a4865eaf6e76481aa19f98f47a2392a","html_url":"https://github.com/apache/openjpa/commit/6187079f0a4865eaf6e76481aa19f98f47a2392a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6187079f0a4865eaf6e76481aa19f98f47a2392a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a4ca5d2ba225157881d865af04abc0c55a0cc68b","url":"https://api.github.com/repos/apache/openjpa/commits/a4ca5d2ba225157881d865af04abc0c55a0cc68b","html_url":"https://github.com/apache/openjpa/commit/a4ca5d2ba225157881d865af04abc0c55a0cc68b"}]},{"sha":"0395328f851e8b3765e67eacbc169007d98e278d","node_id":"MDY6Q29tbWl0MjA2MzY0OjAzOTUzMjhmODUxZThiMzc2NWU2N2VhY2JjMTY5MDA3ZDk4ZTI3OGQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-12-19T02:17:24Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-12-19T02:17:24Z"},"message":"OPENJPA-835 Loading nested toMany EAGER relation resuled in PersistenceException\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@727894 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c2e5b6d700c193f7098fa40f03066abd27b37643","url":"https://api.github.com/repos/apache/openjpa/git/trees/c2e5b6d700c193f7098fa40f03066abd27b37643"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0395328f851e8b3765e67eacbc169007d98e278d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0395328f851e8b3765e67eacbc169007d98e278d","html_url":"https://github.com/apache/openjpa/commit/0395328f851e8b3765e67eacbc169007d98e278d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0395328f851e8b3765e67eacbc169007d98e278d/comments","author":null,"committer":null,"parents":[{"sha":"6187079f0a4865eaf6e76481aa19f98f47a2392a","url":"https://api.github.com/repos/apache/openjpa/commits/6187079f0a4865eaf6e76481aa19f98f47a2392a","html_url":"https://github.com/apache/openjpa/commit/6187079f0a4865eaf6e76481aa19f98f47a2392a"}]},{"sha":"2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjMTM3MTNjMjVjZTA0OTA3YzNlZmRkNGNlZmMxMmNmNWIwZjdlYWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-22T20:07:38Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-22T20:07:38Z"},"message":"OPENJPA-838: remove cache from StoreCollectionFieldStrategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@728758 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f011c03edb52ea4eb5e30f9ad8d0900dd3fb831b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f011c03edb52ea4eb5e30f9ad8d0900dd3fb831b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","html_url":"https://github.com/apache/openjpa/commit/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab/comments","author":null,"committer":null,"parents":[{"sha":"0395328f851e8b3765e67eacbc169007d98e278d","url":"https://api.github.com/repos/apache/openjpa/commits/0395328f851e8b3765e67eacbc169007d98e278d","html_url":"https://github.com/apache/openjpa/commit/0395328f851e8b3765e67eacbc169007d98e278d"}]},{"sha":"d2666e99d46b24ab7f5f235438619583d314dbc8","node_id":"MDY6Q29tbWl0MjA2MzY0OmQyNjY2ZTk5ZDQ2YjI0YWI3ZjVmMjM1NDM4NjE5NTgzZDMxNGRiYzg=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-10T00:45:03Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-10T00:45:03Z"},"message":"OPENJPA-853 Informix Cursor not open problem\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@733206 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed746e0cd7ce58654c748d6bbe8ffaa022e48156","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed746e0cd7ce58654c748d6bbe8ffaa022e48156"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d2666e99d46b24ab7f5f235438619583d314dbc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d2666e99d46b24ab7f5f235438619583d314dbc8","html_url":"https://github.com/apache/openjpa/commit/d2666e99d46b24ab7f5f235438619583d314dbc8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d2666e99d46b24ab7f5f235438619583d314dbc8/comments","author":null,"committer":null,"parents":[{"sha":"2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","url":"https://api.github.com/repos/apache/openjpa/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","html_url":"https://github.com/apache/openjpa/commit/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab"}]},{"sha":"ea2a31be33985dc618c50524f3e6d563e9e218c1","node_id":"MDY6Q29tbWl0MjA2MzY0OmVhMmEzMWJlMzM5ODVkYzYxOGM1MDUyNGYzZTZkNTYzZTllMjE4YzE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-12T22:36:52Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-01-12T22:36:52Z"},"message":"OPENJPA-843 Unnecessary version update on inverse-side of a 1-m relationship\nCommitting patch provided by Dinkar Rao\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@733944 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75dc7804bc35728a6528076c613512d4845e2e0a","url":"https://api.github.com/repos/apache/openjpa/git/trees/75dc7804bc35728a6528076c613512d4845e2e0a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1","html_url":"https://github.com/apache/openjpa/commit/ea2a31be33985dc618c50524f3e6d563e9e218c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1/comments","author":null,"committer":null,"parents":[{"sha":"d2666e99d46b24ab7f5f235438619583d314dbc8","url":"https://api.github.com/repos/apache/openjpa/commits/d2666e99d46b24ab7f5f235438619583d314dbc8","html_url":"https://github.com/apache/openjpa/commit/d2666e99d46b24ab7f5f235438619583d314dbc8"}]},{"sha":"ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","node_id":"MDY6Q29tbWl0MjA2MzY0OmJhNTc4M2UxZTNlY2ExMWJlMTJiMzViMDc3YzMxYzNkNGViYjRmMzE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-13T00:34:54Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-13T00:34:54Z"},"message":"OPENJPA-843 move testcases to openjpa-persistence-jdbc module to resolve compile failure merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@733972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ff40c40b4e959272b51b482475698591dd00b552","url":"https://api.github.com/repos/apache/openjpa/git/trees/ff40c40b4e959272b51b482475698591dd00b552"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","html_url":"https://github.com/apache/openjpa/commit/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","comments_url":"https://api.github.com/repos/apache/openjpa/commits/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea2a31be33985dc618c50524f3e6d563e9e218c1","url":"https://api.github.com/repos/apache/openjpa/commits/ea2a31be33985dc618c50524f3e6d563e9e218c1","html_url":"https://github.com/apache/openjpa/commit/ea2a31be33985dc618c50524f3e6d563e9e218c1"}]},{"sha":"d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","node_id":"MDY6Q29tbWl0MjA2MzY0OmQ5YjZiOTVhZGY2MmU1NDdhYzQ1OTFhNWY1YmY3NzcxYWViMTRmNmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-15T16:10:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-15T16:10:36Z"},"message":"OPENJPA-843 refactor testcase. Merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@734740 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"835651a68b36d8e61b02324c1ed60aab21ba2b85","url":"https://api.github.com/repos/apache/openjpa/git/trees/835651a68b36d8e61b02324c1ed60aab21ba2b85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","html_url":"https://github.com/apache/openjpa/commit/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","url":"https://api.github.com/repos/apache/openjpa/commits/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31","html_url":"https://github.com/apache/openjpa/commit/ba5783e1e3eca11be12b35b077c31c3d4ebb4f31"}]},{"sha":"80dc4a39e785457605080be80fde560c12eead15","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwZGM0YTM5ZTc4NTQ1NzYwNTA4MGJlODBmZGU1NjBjMTJlZWFkMTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-22T19:19:07Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-22T19:19:07Z"},"message":"OPENJPA-864 do not remove table aliases for databases which use JoinSyntaxes.SYNTAX_DATABASE (no joins).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@736750 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4109720cfc93d0695c1bd378d65c2401a2c4bd86","url":"https://api.github.com/repos/apache/openjpa/git/trees/4109720cfc93d0695c1bd378d65c2401a2c4bd86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80dc4a39e785457605080be80fde560c12eead15","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80dc4a39e785457605080be80fde560c12eead15","html_url":"https://github.com/apache/openjpa/commit/80dc4a39e785457605080be80fde560c12eead15","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80dc4a39e785457605080be80fde560c12eead15/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","url":"https://api.github.com/repos/apache/openjpa/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","html_url":"https://github.com/apache/openjpa/commit/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f"}]},{"sha":"6ce447f5ae00982ef5f8909be35d761161e83421","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjZTQ0N2Y1YWUwMDk4MmVmNWY4OTA5YmUzNWQ3NjExNjFlODM0MjE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-01-27T16:33:54Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-01-27T16:33:54Z"},"message":"OPENJPA-838: check in test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@738137 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"605912feaba749ba14eb03bd85fcbc43d0853218","url":"https://api.github.com/repos/apache/openjpa/git/trees/605912feaba749ba14eb03bd85fcbc43d0853218"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6ce447f5ae00982ef5f8909be35d761161e83421","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6ce447f5ae00982ef5f8909be35d761161e83421","html_url":"https://github.com/apache/openjpa/commit/6ce447f5ae00982ef5f8909be35d761161e83421","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6ce447f5ae00982ef5f8909be35d761161e83421/comments","author":null,"committer":null,"parents":[{"sha":"80dc4a39e785457605080be80fde560c12eead15","url":"https://api.github.com/repos/apache/openjpa/commits/80dc4a39e785457605080be80fde560c12eead15","html_url":"https://github.com/apache/openjpa/commit/80dc4a39e785457605080be80fde560c12eead15"}]},{"sha":"9ddf66206e2158070cafcb4b65fa9d94e10359be","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkZGY2NjIwNmUyMTU4MDcwY2FmY2I0YjY1ZmE5ZDk0ZTEwMzU5YmU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-03T21:18:54Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-03T21:18:54Z"},"message":"OPENJPA-772 committing patch provided by Donald Woods\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@740453 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bc4ec3b1d2c691056302dde4eb5bc6aa66bfd00c","url":"https://api.github.com/repos/apache/openjpa/git/trees/bc4ec3b1d2c691056302dde4eb5bc6aa66bfd00c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ddf66206e2158070cafcb4b65fa9d94e10359be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ddf66206e2158070cafcb4b65fa9d94e10359be","html_url":"https://github.com/apache/openjpa/commit/9ddf66206e2158070cafcb4b65fa9d94e10359be","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ddf66206e2158070cafcb4b65fa9d94e10359be/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6ce447f5ae00982ef5f8909be35d761161e83421","url":"https://api.github.com/repos/apache/openjpa/commits/6ce447f5ae00982ef5f8909be35d761161e83421","html_url":"https://github.com/apache/openjpa/commit/6ce447f5ae00982ef5f8909be35d761161e83421"}]},{"sha":"371c106193b47a48424032cb74113560d3731dc7","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3MWMxMDYxOTNiNDdhNDg0MjQwMzJjYjc0MTEzNTYwZDM3MzFkYzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-12T16:16:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-12T16:16:25Z"},"message":"OPENJPA-917 committing patch provided by B.J. Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@743792 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e2b267ae878e22f1efd186b50136cf55bd7e398a","url":"https://api.github.com/repos/apache/openjpa/git/trees/e2b267ae878e22f1efd186b50136cf55bd7e398a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/371c106193b47a48424032cb74113560d3731dc7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/371c106193b47a48424032cb74113560d3731dc7","html_url":"https://github.com/apache/openjpa/commit/371c106193b47a48424032cb74113560d3731dc7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/371c106193b47a48424032cb74113560d3731dc7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ddf66206e2158070cafcb4b65fa9d94e10359be","url":"https://api.github.com/repos/apache/openjpa/commits/9ddf66206e2158070cafcb4b65fa9d94e10359be","html_url":"https://github.com/apache/openjpa/commit/9ddf66206e2158070cafcb4b65fa9d94e10359be"}]},{"sha":"77ebb866c172a3d69b6da31ec90b434336f82ea7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3ZWJiODY2YzE3MmEzZDY5YjZkYTMxZWM5MGI0MzQzMzZmODJlYTc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-18T23:27:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-18T23:27:25Z"},"message":"Reverting OPENJPA-838 and OPENJPA-917 for additional testing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@745691 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bd63866e9d48ba4db0d7d1b72b68e73eb5d589fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/bd63866e9d48ba4db0d7d1b72b68e73eb5d589fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7","html_url":"https://github.com/apache/openjpa/commit/77ebb866c172a3d69b6da31ec90b434336f82ea7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"371c106193b47a48424032cb74113560d3731dc7","url":"https://api.github.com/repos/apache/openjpa/commits/371c106193b47a48424032cb74113560d3731dc7","html_url":"https://github.com/apache/openjpa/commit/371c106193b47a48424032cb74113560d3731dc7"}]},{"sha":"1e3abf0ebc942a5e2f428999d723b6a40e749cad","node_id":"MDY6Q29tbWl0MjA2MzY0OjFlM2FiZjBlYmM5NDJhNWUyZjQyODk5OWQ3MjNiNmE0MGU3NDljYWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-18T23:59:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-18T23:59:35Z"},"message":"Reverting OPENJPA-838 and OPENJPA-917 for additional testing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@745696 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c3e55d795c09383de1c7fd8e5436129c6ae5fc8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/c3e55d795c09383de1c7fd8e5436129c6ae5fc8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1e3abf0ebc942a5e2f428999d723b6a40e749cad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1e3abf0ebc942a5e2f428999d723b6a40e749cad","html_url":"https://github.com/apache/openjpa/commit/1e3abf0ebc942a5e2f428999d723b6a40e749cad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1e3abf0ebc942a5e2f428999d723b6a40e749cad/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"77ebb866c172a3d69b6da31ec90b434336f82ea7","url":"https://api.github.com/repos/apache/openjpa/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7","html_url":"https://github.com/apache/openjpa/commit/77ebb866c172a3d69b6da31ec90b434336f82ea7"}]},{"sha":"1bee8ecd2a396737461b4f492d450785955cf945","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiZWU4ZWNkMmEzOTY3Mzc0NjFiNGY0OTJkNDUwNzg1OTU1Y2Y5NDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-19T15:02:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-19T15:02:57Z"},"message":"OPENJPA-925 committing patch provided by Donald Woods. Bidirectional OneToOne relation incorrectly set in loadEagerJoin fix for trunk written by Catalina Wei\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@745891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e9e3f958786941dcd69fa6dd6e1135f217ebb8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/2e9e3f958786941dcd69fa6dd6e1135f217ebb8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1bee8ecd2a396737461b4f492d450785955cf945","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1bee8ecd2a396737461b4f492d450785955cf945","html_url":"https://github.com/apache/openjpa/commit/1bee8ecd2a396737461b4f492d450785955cf945","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1bee8ecd2a396737461b4f492d450785955cf945/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1e3abf0ebc942a5e2f428999d723b6a40e749cad","url":"https://api.github.com/repos/apache/openjpa/commits/1e3abf0ebc942a5e2f428999d723b6a40e749cad","html_url":"https://github.com/apache/openjpa/commit/1e3abf0ebc942a5e2f428999d723b6a40e749cad"}]},{"sha":"65abbf40523884cd37fa418ed5c155de84a7fccd","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1YWJiZjQwNTIzODg0Y2QzN2ZhNDE4ZWQ1YzE1NWRlODRhN2ZjY2Q=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-20T16:17:43Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-20T16:17:43Z"},"message":"OPENJPA-912. Merging changes from trunk originally written by Catalina Wei. Check for null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@746282 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"62b535d320bd7cd0e932ac0bc8652e62ff285cdc","url":"https://api.github.com/repos/apache/openjpa/git/trees/62b535d320bd7cd0e932ac0bc8652e62ff285cdc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/65abbf40523884cd37fa418ed5c155de84a7fccd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/65abbf40523884cd37fa418ed5c155de84a7fccd","html_url":"https://github.com/apache/openjpa/commit/65abbf40523884cd37fa418ed5c155de84a7fccd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/65abbf40523884cd37fa418ed5c155de84a7fccd/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1bee8ecd2a396737461b4f492d450785955cf945","url":"https://api.github.com/repos/apache/openjpa/commits/1bee8ecd2a396737461b4f492d450785955cf945","html_url":"https://github.com/apache/openjpa/commit/1bee8ecd2a396737461b4f492d450785955cf945"}]},{"sha":"8af7c0530cd0af3762edcba02b13538d69d32cc8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhZjdjMDUzMGNkMGFmMzc2MmVkY2JhMDJiMTM1MzhkNjlkMzJjYzg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-23T16:59:22Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-23T16:59:22Z"},"message":"OPENJPA-838 re-committing Fay's changes. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@747081 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9501e5a33623e43916995b34429df1d756914055","url":"https://api.github.com/repos/apache/openjpa/git/trees/9501e5a33623e43916995b34429df1d756914055"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8","html_url":"https://github.com/apache/openjpa/commit/8af7c0530cd0af3762edcba02b13538d69d32cc8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"65abbf40523884cd37fa418ed5c155de84a7fccd","url":"https://api.github.com/repos/apache/openjpa/commits/65abbf40523884cd37fa418ed5c155de84a7fccd","html_url":"https://github.com/apache/openjpa/commit/65abbf40523884cd37fa418ed5c155de84a7fccd"}]},{"sha":"c74475ae2ee477f5feec34fe51ec831e02bb618a","node_id":"MDY6Q29tbWl0MjA2MzY0OmM3NDQ3NWFlMmVlNDc3ZjVmZWVjMzRmZTUxZWM4MzFlMDJiYjYxOGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-23T17:04:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-23T17:04:39Z"},"message":"OPENJPA-917 recommitting B.J.'s patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@747083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"84693644674bb3e457e47b69fc8420c8851b4164","url":"https://api.github.com/repos/apache/openjpa/git/trees/84693644674bb3e457e47b69fc8420c8851b4164"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/c74475ae2ee477f5feec34fe51ec831e02bb618a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/c74475ae2ee477f5feec34fe51ec831e02bb618a","html_url":"https://github.com/apache/openjpa/commit/c74475ae2ee477f5feec34fe51ec831e02bb618a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/c74475ae2ee477f5feec34fe51ec831e02bb618a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8af7c0530cd0af3762edcba02b13538d69d32cc8","url":"https://api.github.com/repos/apache/openjpa/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8","html_url":"https://github.com/apache/openjpa/commit/8af7c0530cd0af3762edcba02b13538d69d32cc8"}]},{"sha":"289e76517c0ff3e76fb2c17a4996bd9d8910f0e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4OWU3NjUxN2MwZmYzZTc2ZmIyYzE3YTQ5OTZiZDlkODkxMGYwZTg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-27T15:17:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-27T15:17:01Z"},"message":"OPENJPA-881\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@748549 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"102f925258093a66bb90a3639dc97b7502b5b6d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/102f925258093a66bb90a3639dc97b7502b5b6d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/289e76517c0ff3e76fb2c17a4996bd9d8910f0e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/289e76517c0ff3e76fb2c17a4996bd9d8910f0e8","html_url":"https://github.com/apache/openjpa/commit/289e76517c0ff3e76fb2c17a4996bd9d8910f0e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/289e76517c0ff3e76fb2c17a4996bd9d8910f0e8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c74475ae2ee477f5feec34fe51ec831e02bb618a","url":"https://api.github.com/repos/apache/openjpa/commits/c74475ae2ee477f5feec34fe51ec831e02bb618a","html_url":"https://github.com/apache/openjpa/commit/c74475ae2ee477f5feec34fe51ec831e02bb618a"}]},{"sha":"2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhYWEzMTFhMDQzNTgyN2JlZDBjMmRjNDBiZTgwYTVlZTFlZjZlZjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-27T15:19:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-27T15:19:08Z"},"message":"OPENJPA-876\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@748551 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"843da3bd2b3c6c3513cadd77238cd0101b2c1d21","url":"https://api.github.com/repos/apache/openjpa/git/trees/843da3bd2b3c6c3513cadd77238cd0101b2c1d21"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7","html_url":"https://github.com/apache/openjpa/commit/2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"289e76517c0ff3e76fb2c17a4996bd9d8910f0e8","url":"https://api.github.com/repos/apache/openjpa/commits/289e76517c0ff3e76fb2c17a4996bd9d8910f0e8","html_url":"https://github.com/apache/openjpa/commit/289e76517c0ff3e76fb2c17a4996bd9d8910f0e8"}]},{"sha":"061a8ecd37b922d44fbed38a39813ebd3b0ac93b","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2MWE4ZWNkMzdiOTIyZDQ0ZmJlZDM4YTM5ODEzZWJkM2IwYWM5M2I=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-27T16:33:11Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-27T16:33:11Z"},"message":"OPENJPA-901\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@748578 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ad3506e05a5c68372f9d7871a969f99a423844f","url":"https://api.github.com/repos/apache/openjpa/git/trees/9ad3506e05a5c68372f9d7871a969f99a423844f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/061a8ecd37b922d44fbed38a39813ebd3b0ac93b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/061a8ecd37b922d44fbed38a39813ebd3b0ac93b","html_url":"https://github.com/apache/openjpa/commit/061a8ecd37b922d44fbed38a39813ebd3b0ac93b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/061a8ecd37b922d44fbed38a39813ebd3b0ac93b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7","url":"https://api.github.com/repos/apache/openjpa/commits/2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7","html_url":"https://github.com/apache/openjpa/commit/2aaa311a0435827bed0c2dc40be80a5ee1ef6ef7"}]},{"sha":"b7a20d7bf6a2e41d69ec9012d81fe927614f98fc","node_id":"MDY6Q29tbWl0MjA2MzY0OmI3YTIwZDdiZjZhMmU0MWQ2OWVjOTAxMmQ4MWZlOTI3NjE0Zjk4ZmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T02:13:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T02:13:26Z"},"message":"Update CHANGES.txt and RELEASE-NOTES.html for 1.2.1 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@749507 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c216ca6a0a3e23e3420b6cab8d549456e0e7f5c3","url":"https://api.github.com/repos/apache/openjpa/git/trees/c216ca6a0a3e23e3420b6cab8d549456e0e7f5c3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/b7a20d7bf6a2e41d69ec9012d81fe927614f98fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/b7a20d7bf6a2e41d69ec9012d81fe927614f98fc","html_url":"https://github.com/apache/openjpa/commit/b7a20d7bf6a2e41d69ec9012d81fe927614f98fc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/b7a20d7bf6a2e41d69ec9012d81fe927614f98fc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"061a8ecd37b922d44fbed38a39813ebd3b0ac93b","url":"https://api.github.com/repos/apache/openjpa/commits/061a8ecd37b922d44fbed38a39813ebd3b0ac93b","html_url":"https://github.com/apache/openjpa/commit/061a8ecd37b922d44fbed38a39813ebd3b0ac93b"}]},{"sha":"56b7c34066f8ee476d4dbe88fcc33afbc3029ce6","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2YjdjMzQwNjZmOGVlNDc2ZDRkYmU4OGZjYzMzYWZiYzMwMjljZTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T02:22:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T02:22:35Z"},"message":"maven release plugin formatting changes to pom.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@749509 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c14038f83bdd32c183b66a7aebd90e6b2fb0aafa","url":"https://api.github.com/repos/apache/openjpa/git/trees/c14038f83bdd32c183b66a7aebd90e6b2fb0aafa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/56b7c34066f8ee476d4dbe88fcc33afbc3029ce6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/56b7c34066f8ee476d4dbe88fcc33afbc3029ce6","html_url":"https://github.com/apache/openjpa/commit/56b7c34066f8ee476d4dbe88fcc33afbc3029ce6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/56b7c34066f8ee476d4dbe88fcc33afbc3029ce6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b7a20d7bf6a2e41d69ec9012d81fe927614f98fc","url":"https://api.github.com/repos/apache/openjpa/commits/b7a20d7bf6a2e41d69ec9012d81fe927614f98fc","html_url":"https://github.com/apache/openjpa/commit/b7a20d7bf6a2e41d69ec9012d81fe927614f98fc"}]},{"sha":"5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkZmFmMmU3N2Q2OGI1NjEwMmFmMWM2NWM3ODk0YzZlOWFhNjhkY2M=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T17:02:14Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T17:02:14Z"},"message":"OPENJPA-951\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@749659 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2af7616b3803adb15649df77139e5f213b15a07","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2af7616b3803adb15649df77139e5f213b15a07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc","html_url":"https://github.com/apache/openjpa/commit/5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"56b7c34066f8ee476d4dbe88fcc33afbc3029ce6","url":"https://api.github.com/repos/apache/openjpa/commits/56b7c34066f8ee476d4dbe88fcc33afbc3029ce6","html_url":"https://github.com/apache/openjpa/commit/56b7c34066f8ee476d4dbe88fcc33afbc3029ce6"}]},{"sha":"3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkYjQ3ZTJiMmU2ODIyMGFiMmNkYWU1ZjJiNTg0ZjM1NzJmZmJlYjM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T19:23:04Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T19:23:04Z"},"message":"[maven-release-plugin] prepare release 1.2.1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@749705 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1066d568ede71be47e97ff91ca3192656d40f98c","url":"https://api.github.com/repos/apache/openjpa/git/trees/1066d568ede71be47e97ff91ca3192656d40f98c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3","html_url":"https://github.com/apache/openjpa/commit/3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc","url":"https://api.github.com/repos/apache/openjpa/commits/5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc","html_url":"https://github.com/apache/openjpa/commit/5dfaf2e77d68b56102af1c65c7894c6e9aa68dcc"}]},{"sha":"2452674b23b47260f5a3b0b1b1803d37145e563b","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0NTI2NzRiMjNiNDcyNjBmNWEzYjBiMWIxODAzZDM3MTQ1ZTU2M2I=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T20:44:32Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T20:44:32Z"},"message":"[maven-release-plugin] rollback the release of 1.2.1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@749742 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2af7616b3803adb15649df77139e5f213b15a07","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2af7616b3803adb15649df77139e5f213b15a07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2452674b23b47260f5a3b0b1b1803d37145e563b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2452674b23b47260f5a3b0b1b1803d37145e563b","html_url":"https://github.com/apache/openjpa/commit/2452674b23b47260f5a3b0b1b1803d37145e563b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2452674b23b47260f5a3b0b1b1803d37145e563b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3","url":"https://api.github.com/repos/apache/openjpa/commits/3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3","html_url":"https://github.com/apache/openjpa/commit/3db47e2b2e68220ab2cdae5f2b584f3572ffbeb3"}]},{"sha":"a5f15860f810bbb730166f290271c5e8fd8e2f6b","node_id":"MDY6Q29tbWl0MjA2MzY0OmE1ZjE1ODYwZjgxMGJiYjczMDE2NmYyOTAyNzFjNWU4ZmQ4ZTJmNmI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T22:24:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T22:24:42Z"},"message":"[maven-release-plugin] prepare release 1.2.1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@749803 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1066d568ede71be47e97ff91ca3192656d40f98c","url":"https://api.github.com/repos/apache/openjpa/git/trees/1066d568ede71be47e97ff91ca3192656d40f98c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/a5f15860f810bbb730166f290271c5e8fd8e2f6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/a5f15860f810bbb730166f290271c5e8fd8e2f6b","html_url":"https://github.com/apache/openjpa/commit/a5f15860f810bbb730166f290271c5e8fd8e2f6b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/a5f15860f810bbb730166f290271c5e8fd8e2f6b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2452674b23b47260f5a3b0b1b1803d37145e563b","url":"https://api.github.com/repos/apache/openjpa/commits/2452674b23b47260f5a3b0b1b1803d37145e563b","html_url":"https://github.com/apache/openjpa/commit/2452674b23b47260f5a3b0b1b1803d37145e563b"}]},{"sha":"82164a8c3bcd281532692875dbb05797c1b5bb76","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyMTY0YThjM2JjZDI4MTUzMjY5Mjg3NWRiYjA1Nzk3YzFiNWJiNzY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T23:15:34Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-03T23:15:34Z"},"message":"Creating tag for 1.2.1\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@749830 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1066d568ede71be47e97ff91ca3192656d40f98c","url":"https://api.github.com/repos/apache/openjpa/git/trees/1066d568ede71be47e97ff91ca3192656d40f98c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82164a8c3bcd281532692875dbb05797c1b5bb76","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82164a8c3bcd281532692875dbb05797c1b5bb76","html_url":"https://github.com/apache/openjpa/commit/82164a8c3bcd281532692875dbb05797c1b5bb76","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82164a8c3bcd281532692875dbb05797c1b5bb76/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a5f15860f810bbb730166f290271c5e8fd8e2f6b","url":"https://api.github.com/repos/apache/openjpa/commits/a5f15860f810bbb730166f290271c5e8fd8e2f6b","html_url":"https://github.com/apache/openjpa/commit/a5f15860f810bbb730166f290271c5e8fd8e2f6b"}]},{"sha":"f290fad39391ba583289c4abfe52d3f81f95d18a","node_id":"MDY6Q29tbWl0MjA2MzY0OmYyOTBmYWQzOTM5MWJhNTgzMjg5YzRhYmZlNTJkM2Y4MWY5NWQxOGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T00:53:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T00:53:24Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e70e22978192e69c0226f5039af58d37b107914","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e70e22978192e69c0226f5039af58d37b107914"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f290fad39391ba583289c4abfe52d3f81f95d18a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f290fad39391ba583289c4abfe52d3f81f95d18a","html_url":"https://github.com/apache/openjpa/commit/f290fad39391ba583289c4abfe52d3f81f95d18a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f290fad39391ba583289c4abfe52d3f81f95d18a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"82164a8c3bcd281532692875dbb05797c1b5bb76","url":"https://api.github.com/repos/apache/openjpa/commits/82164a8c3bcd281532692875dbb05797c1b5bb76","html_url":"https://github.com/apache/openjpa/commit/82164a8c3bcd281532692875dbb05797c1b5bb76"}]},{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","node_id":"MDY6Q29tbWl0MjA2MzY0OmYxNTNhNGVhMzdhMmVhMTYyNDdmZDc3Mzc1NmZhNWRhMjdmMDc1ZmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:10:03Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:10:03Z"},"message":"Deleting old tag will recreate from rev 752732\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752872 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b825dc642cb6eb9a060e54bf8d69288fbee4904","url":"https://api.github.com/repos/apache/openjpa/git/trees/4b825dc642cb6eb9a060e54bf8d69288fbee4904"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f290fad39391ba583289c4abfe52d3f81f95d18a","url":"https://api.github.com/repos/apache/openjpa/commits/f290fad39391ba583289c4abfe52d3f81f95d18a","html_url":"https://github.com/apache/openjpa/commit/f290fad39391ba583289c4abfe52d3f81f95d18a"}]},{"sha":"9c16a4373493bb9307dda99fc63e29c0fb8a3653","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMTZhNDM3MzQ5M2JiOTMwN2RkYTk5ZmM2M2UyOWMwZmI4YTM2NTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f50e9a665eb242e4b05e0364c41f777a18914e9f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f50e9a665eb242e4b05e0364c41f777a18914e9f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","html_url":"https://github.com/apache/openjpa/commit/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff"}]},{"sha":"e9c0347cfa97a7310ca6a56fbc50db83b97974e7","node_id":"MDY6Q29tbWl0MjA2MzY0OmU5YzAzNDdjZmE5N2E3MzEwY2E2YTU2ZmJjNTBkYjgzYjk3OTc0ZTc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:25:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:25:26Z"},"message":"Moving files to correct place in the 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752877 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22a38e864bcb517a217564335d933e0fb9dc7c3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/22a38e864bcb517a217564335d933e0fb9dc7c3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/e9c0347cfa97a7310ca6a56fbc50db83b97974e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/e9c0347cfa97a7310ca6a56fbc50db83b97974e7","html_url":"https://github.com/apache/openjpa/commit/e9c0347cfa97a7310ca6a56fbc50db83b97974e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/e9c0347cfa97a7310ca6a56fbc50db83b97974e7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"9c16a4373493bb9307dda99fc63e29c0fb8a3653","url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","html_url":"https://github.com/apache/openjpa/commit/9c16a4373493bb9307dda99fc63e29c0fb8a3653"}]},{"sha":"26dbc39431ad73a66752053fb278bb5027edc07e","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2ZGJjMzk0MzFhZDczYTY2NzUyMDUzZmIyNzhiYjUwMjdlZGMwN2U=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-13T14:14:21Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-13T14:14:21Z"},"message":"remove extra dir\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@753278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22a38e864bcb517a217564335d933e0fb9dc7c3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/22a38e864bcb517a217564335d933e0fb9dc7c3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26dbc39431ad73a66752053fb278bb5027edc07e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26dbc39431ad73a66752053fb278bb5027edc07e","html_url":"https://github.com/apache/openjpa/commit/26dbc39431ad73a66752053fb278bb5027edc07e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26dbc39431ad73a66752053fb278bb5027edc07e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e9c0347cfa97a7310ca6a56fbc50db83b97974e7","url":"https://api.github.com/repos/apache/openjpa/commits/e9c0347cfa97a7310ca6a56fbc50db83b97974e7","html_url":"https://github.com/apache/openjpa/commit/e9c0347cfa97a7310ca6a56fbc50db83b97974e7"}]}],"files":[{"sha":"b59c5f2594de30f8418a4f0c0d46751b47dae7e7","filename":"openjpa-all/pom.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n \n     <build>\n@@ -42,6 +42,7 @@\n                     multiple same-named files to each other (which is\n                     required for correctly aggregating services files).\n                 -->\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -53,6 +54,8 @@\n                                     <fileset dir=\"${basedir}/..\">\n                                         <include name=\"*/target/openjpa-*.jar\" />\n                                         <exclude name=\"*/target/openjpa-examples-*.jar\" />\n+                                        <exclude name=\"**/*-sources.jar\" />\n+                                        <exclude name=\"**/*-javadoc.jar\" />\n                                     </fileset>\n                                 </unjar>\n "},{"sha":"20a3d395957e1fb387d706ac68cb7203e74158c9","filename":"openjpa-examples/pom.xml","status":"modified","additions":1,"deletions":33,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -32,7 +32,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -74,38 +74,6 @@\n                     </excludes>\n                 </configuration>\n             </plugin>\n-            <!-- ###\n-            <plugin>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <phase>test-compile</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <path id=\"cp\">\n-                                    <path refid=\"maven.test.classpath\" />\n-                                    <path refid=\"maven.compile.classpath\" />\n-                                    <path refid=\"maven.dependency.classpath\" />\n-                                </path>\n-\t\t\t\t\t\t\t\t<taskdef name=\"openjpac\" classname= \"org.apache.openjpa.ant.PCEnhancerTask\">\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\" />\n-\t\t\t\t\t\t\t\t</taskdef>\n-                                <fileset id=\"enhance.path.ref\" dir=\"${project.build.testOutputDirectory}\">\n-                                    <include name=\"**/*.class\" />\n-                                </fileset>\n-\t\t\t\t\t\t\t\t<openjpac>\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\" />\n-\t\t\t\t\t\t\t\t\t<fileset refid=\"enhance.path.ref\" />\n-\t\t\t\t\t\t\t\t</openjpac>\n-                            </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-            -->\n         </plugins>\n     </build>\n </project>"},{"sha":"0768cf72e92af5daed1f9b7d13db2d13fc2df898","filename":"openjpa-integration/examples/pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-integration/examples/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-integration/examples/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/examples/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -38,7 +38,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n \n     <profiles>\n@@ -47,6 +47,7 @@\n     <build>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>"},{"sha":"c819ab8ae0a7312d3278ee536f289339222c3bec","filename":"openjpa-integration/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-integration/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-integration/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -29,7 +29,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <modules>\n         <module>examples</module>"},{"sha":"8583f8365558a297d3ce7606e1f61168f93a06ce","filename":"openjpa-integration/tck/pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-integration/tck/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-integration/tck/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/tck/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -61,7 +61,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-integration</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n \n     <profiles>\n@@ -70,6 +70,7 @@\n     <build>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>"},{"sha":"f595afac8b1dafdc6319df34f9785e09b75c3157","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"e2a7ffaeb44a33d44a98013c0d032a55c12dd8f1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":32,"deletions":9,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -144,7 +144,7 @@ protected Collection populateRowManager(OpenJPAStateManager sm,\n                     customs);\n             } else if ((dirty = ImplHelper.getUpdateFields(sm)) != null) {\n                 update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n-                    store, customs);\n+                    store, customs, false);\n             } else if (sm.isVersionUpdateRequired()) {\n                 updateIndicators(sm, (ClassMapping) sm.getMetaData(), rowMgr,\n                     store, customs, true);\n@@ -193,8 +193,9 @@ protected void insert(OpenJPAStateManager sm, ClassMapping mapping,\n         BitSet dirty = sm.getDirty();\n         for (int i = 0; i < fields.length; i++) {\n             if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomInsert(fields[i], sm, store, customs))\n+                && !bufferCustomInsert(fields[i], sm, store, customs)) {\n                 fields[i].insert(sm, store, rowMgr);\n+            }\n         }\n         if (sup == null) {\n             Version vers = mapping.getVersion();\n@@ -267,7 +268,7 @@ private boolean bufferCustomDelete(Strategy strat, OpenJPAStateManager sm,\n      */\n     protected void update(OpenJPAStateManager sm, BitSet dirty,\n         ClassMapping mapping, RowManager rowMgr, JDBCStore store,\n-        Collection customs) throws SQLException {\n+        Collection customs, boolean updateIndicators) throws SQLException {\n         Boolean custom = mapping.isCustomUpdate(sm, store);\n         if (!Boolean.FALSE.equals(custom))\n             mapping.customUpdate(sm, store);\n@@ -278,16 +279,38 @@ protected void update(OpenJPAStateManager sm, BitSet dirty,\n         // detect whether any fields in their rows have been modified\n         FieldMapping[] fields = mapping.getDefinedFieldMappings();\n         for (int i = 0; i < fields.length; i++) {\n-            if (dirty.get(fields[i].getIndex())\n-                && !bufferCustomUpdate(fields[i], sm, store, customs))\n-                fields[i].update(sm, store, rowMgr);\n+            FieldMapping field = fields[i];\n+            if (dirty.get(field.getIndex())\n+                && !bufferCustomUpdate(field, sm, store, customs)) {\n+                field.update(sm, store, rowMgr);\n+                if (!updateIndicators) {\n+                    FieldMapping[] inverseFieldMappings =\n+                        field.getInverseMappings();\n+                    if (inverseFieldMappings.length == 0) {\n+                        updateIndicators = true;\n+                    }\n+                    else {\n+                        for (FieldMapping inverseFieldMapping :\n+                            inverseFieldMappings) {\n+                            if (inverseFieldMapping.getMappedBy() != null) {\n+                                updateIndicators = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        if (sup == null)\n-            updateIndicators(sm, mapping, rowMgr, store, customs, false);\n+        if (sup == null) {\n+            if (updateIndicators) {\n+                updateIndicators(sm, mapping, rowMgr, store, customs, false);\n+            }\n+        }\n         else\n-            update(sm, dirty, sup, rowMgr, store, customs);\n+            update(sm, dirty, sup, rowMgr, store, customs, updateIndicators);\n+\n         mapping.update(sm, store, rowMgr);\n     }\n "},{"sha":"8b869da049997eac79a3af7d1a1703023bcd3bf6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ConstraintUpdateManager.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -58,7 +58,7 @@\n         (ConstraintUpdateManager.class);\r\n \r\n     public boolean orderDirty() {\r\n-        return false;\r\n+        return true;\r\n     }\r\n \r\n     protected PreparedStatementManager newPreparedStatementManager\r"},{"sha":"29b7ec1bf7691b2a45466d21e15753333850fb0b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":83,"deletions":1,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -35,6 +35,7 @@\n \n import javax.sql.DataSource;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.QuerySQLCacheValue;\n@@ -354,14 +355,29 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                     getMappedByFieldMapping();\n                 Object mappedByObject = info.result.getMappedByValue();\n                 if (mappedByFieldMapping != null && mappedByObject != null)\n-                    setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+                    if (mappedByObject instanceof OpenJPAId &&\n+                        mapping.getExtraFieldDataIndex(mappedByFieldMapping.\n+                        getIndex()) != -1)\n+                        // The inverse relation can not be set since\n+                        // we are eagerly loading this sm for\n+                        // a sm owner that is still in the process of \n+                        // initializing itself.\n+                        // Remember owner oid by setIntermediate().\n+                        // The inverse relation is set later by\n+                        // setInverseRelation() when the sm owner is fully\n+                        // initialized.\n+                        sm.setIntermediate(mappedByFieldMapping.getIndex(),\n+                            mappedByObject);\n+                    else\n+                        setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n             }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n                 mapping = (ClassMapping) sm.getMetaData();\n                 load(mapping, sm, fetch, res);\n                 getVersion(mapping, sm, res);\n+                setInverseRelation(sm, mapping, res);\n             }\n             return true;\n         } finally {\n@@ -370,6 +386,52 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n         }\n     }\n \n+    private void setInverseRelation(OpenJPAStateManager owner,\n+        ClassMapping mapping, Result res) {\n+        FieldMapping[] fms = mapping.getFieldMappings();\n+\n+        // At this point, the owner is fully initialized.\n+        // Check if the owner has eagerly loaded ToMany relations.\n+        for (int i = 0; i < fms.length; i++) {\n+            if (res.getEager(fms[i]) != null) {\n+                Object coll =  owner.fetchObject(fms[i].getIndex());\n+                if (coll instanceof Collection && \n+                    ((Collection) coll).size() > 0) {\n+                    // Found eagerly loaded collection.\n+                    // Publisher (1) <==>  (M) Magazine\n+                    //    publisher has a EAGER OneToMany relation\n+                    //    magazine has a EAGER or LAZY ManyToOne publisher\n+                    // For each member (Magazine) in the collection, \n+                    // set its inverse relation (Publisher).\n+                    for (Iterator itr = ((Collection) coll).iterator();\n+                        itr.hasNext();) {\n+                        PersistenceCapable pc = (PersistenceCapable) itr.next();\n+\n+                        if (pc == null)\n+                            continue;\n+\n+                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n+                            pcGetStateManager();\n+                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n+                            getFieldMappings();\n+                        for (int j = 0; j < fmd.length; j++) {\n+                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n+                            // if oid was setIntermediate() previously\n+                            // and it is the same as the owner,\n+                            // then set the inverse relation\n+                            if (oid != null &&\n+                                oid.equals(owner.getObjectId())) {\n+                                sm.storeObject(fmd[j].getIndex(),\n+                                    owner.getPersistenceCapable());\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     protected void setMappedBy(OpenJPAStateManager sm,\n         FieldMapping mappedByFieldMapping, Object mappedByObject) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n@@ -914,9 +976,29 @@ public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n         ConnectionInfo info = new ConnectionInfo();\n         info.result = result;\n         info.mapping = mapping;\n+\n+        // if inverse relation is known, exclude loading during find\n+        exclude = excludeInverseRelation(mapping, info, exclude);\n         return _ctx.find(oid, fetch, exclude, info, 0);\n     }\n \n+    private BitSet excludeInverseRelation(ClassMapping mapping,\n+        ConnectionInfo info, BitSet exclude) {\n+        FieldMapping inverse = info.result.getMappedByFieldMapping();\n+        if (inverse != null) {\n+            FieldMapping[] fms = mapping.getDefinedFieldMappings();\n+            if (exclude == null)\n+                exclude = new BitSet(fms.length);\n+            for (int i = 0; i < fms.length; i++) {\n+                if (fms[i] == inverse) {\n+                    exclude.set(fms[i].getIndex());\n+                    break;\n+                }\n+            }\n+        }\n+        return exclude;\n+    }\n+\n     /**\n      * Load the given state manager with data from the result set. Only\n      * mappings originally selected will be loaded."},{"sha":"7532cdf23650202baf12060c42e57fc07803d954","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -356,7 +356,7 @@ protected Column addPrimaryKeyColumn(Table table) {\n     }\n \n     /**\n-     * Return the primary key value for the given class.\n+     * Return the primary key value for the sequence table for the given class.\n      */\n     protected Object getPrimaryKey(ClassMapping mapping) {\n         return Numbers.valueOf(0);"},{"sha":"fd9344455bb4be3bb30819d183454d2d374707a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":39,"deletions":15,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -32,12 +30,12 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -403,17 +401,22 @@ public void setTable(Table table) {\n      * class uses to link to its superclass table.\n      */\n     public Column[] getPrimaryKeyColumns() {\n-        if (_cols.length == 0 && getIdentityType() == ID_APPLICATION\n-            && isMapped()) {\n-            FieldMapping[] pks = getPrimaryKeyFieldMappings();\n-            Collection cols = new ArrayList(pks.length);\n-            Column[] fieldCols;\n-            for (int i = 0; i < pks.length; i++) {\n-                fieldCols = pks[i].getColumns();\n-                for (int j = 0; j < fieldCols.length; j++)\n-                    cols.add(fieldCols[j]);\n+        if (getIdentityType() == ID_APPLICATION && isMapped()) {\n+            if (_cols.length == 0) {            \n+                FieldMapping[] pks = getPrimaryKeyFieldMappings();\n+                Collection cols = new ArrayList(pks.length);\n+                Column[] fieldCols;\n+                for (int i = 0; i < pks.length; i++) {\n+                    fieldCols = pks[i].getColumns();\n+                    if (fieldCols.length == 0) {\n+                        _cols = new Column[0];\n+                        return _cols;\n+                    }\n+                    for (int j = 0; j < fieldCols.length; j++)\n+                        cols.add(fieldCols[j]);\n+                }\n+                _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n             }\n-            _cols = (Column[]) cols.toArray(new Column[cols.size()]);\n         }\n         return _cols;\n     }\n@@ -811,9 +814,30 @@ protected void resolveMapping(boolean runtime) {\n         // recursion, then resolve all fields\n         resolveNonRelationMappings();\n         FieldMapping[] fms = getFieldMappings();\n-        for (int i = 0; i < fms.length; i++)\n-            if (fms[i].getDefiningMetaData() == this)\n+        for (int i = 0; i < fms.length; i++) {\n+            if (fms[i].getDefiningMetaData() == this) {\n+                boolean fill =\n+                    getMappingRepository().getMappingDefaults()\n+                        .defaultMissingInfo();\n+                ForeignKey fk = fms[i].getForeignKey();\n+                if (fill && fk != null && \n+                    fk.getPrimaryKeyColumns().length == 0) { \n+                    // set resolve mode to force this field mapping to be \n+                    // resolved again. The need to resolve again occurs when \n+                    // a primary key is a relation field with the foreign key\n+                    // annotation. In this situation, this primary key field\n+                    // mapping is resolved during the call to \n+                    // resolveNonRelationMapping. Since it is a relation\n+                    // field, the foreign key will be constructed. However, \n+                    // the primary key of the parent entity may not have been \n+                    // resolved yet, resulting in missing informaiton in the fk\n+                    fms[i].setResolve(MODE_META);\n+                    fms[i].getStrategy().map(false);\n+                 \n+                }                \n                 fms[i].resolve(MODE_MAPPING);\n+            }\n+        }\n         fms = getDeclaredUnmanagedFieldMappings();\n         for (int i = 0; i < fms.length; i++)\n             fms[i].resolve(MODE_MAPPING);"},{"sha":"d1699ea4979faaeafc14fe504d7a2f266fc53e0d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -66,6 +66,9 @@\n     private File _file = null;\n     private int _srcType = SRC_OTHER;\n     private String[] _comments = null;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n+    \n     // Unique constraints indexed by primary or secondary table name\n     private Map<String,List<Unique>> _uniques;\n \n@@ -470,4 +473,21 @@ public String getResourceName() {\n     public void setComments(String[] comments) {\n         _comments = comments;\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n+    \n }"},{"sha":"b724ae6931b5e12565558230d3edffea87c258d2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -57,6 +57,8 @@\n     private File _file = null;\n     private Object _scope = null;\n     private int _srcType = SRC_OTHER;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n     private int _mode = MODE_QUERY;\n     private Class _class = null;\n     private int _idx = 0;\n@@ -224,6 +226,22 @@ public void setSource(File file, Object scope, int srcType) {\n     public String getResourceName() {\n         return (_class == null) ? _name : _class.getName() + \":\" + _name;\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n \n     /**\n      * A persistence-capable result."},{"sha":"ef1aceeba0814aa5fd9a0fe8de9d5d4764f6c1c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":21,"deletions":17,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -122,27 +122,31 @@ else if (_cols.length == 1)\n \n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-        if (row != null) {\n-            Object value = sm.fetch(field.getIndex());\n-            if (!HandlerStrategies.set(field, value, store, row, _cols, _io, \n-            \tfield.getNullValue() == FieldMapping.NULL_NONE))\n-            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n-            \t\tthrow new UserException(_loc.get(\"cant-set-value\", \n-            \t\t\t\trow.getFailedObject(), field, value));\n+        if (field.getColumnIO().isInsertable(0, false)) {\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n+            if (row != null) {\n+                Object value = sm.fetch(field.getIndex());\n+                if (!HandlerStrategies.set(field, value, store, row, _cols,\n+                    _io, field.getNullValue() == FieldMapping.NULL_NONE))\n+                    if (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+                        throw new UserException(_loc.get(\"cant-set-value\", row\n+                            .getFailedObject(), field, value));\n+            }\n         }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n-        Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n-        if (row != null){\n-            Object value = sm.fetch(field.getIndex());\n-            if (!HandlerStrategies.set(field, value, store, row, _cols, _io,\n-                 field.getNullValue() == FieldMapping.NULL_NONE)) \n-            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n-            \tthrow new UserException(_loc.get(\"cant-set-value\", \n-            \t\t\trow.getFailedObject(), field, value));\n+        if (field.getColumnIO().isUpdatable(0, false)) {\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n+            if (row != null) {\n+                Object value = sm.fetch(field.getIndex());\n+                if (!HandlerStrategies.set(field, value, store, row, _cols,\n+                    _io, field.getNullValue() == FieldMapping.NULL_NONE))\n+                    if (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+                        throw new UserException(_loc.get(\"cant-set-value\", row\n+                            .getFailedObject(), field, value));\n+            }\n         }\n     }\n \n@@ -154,7 +158,7 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n     public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n         JDBCStore store, JDBCFetchConfiguration fetch) {\n         if ((type == Select.TYPE_JOINLESS && sel.isSelected(field.getTable()))\n-            || (_load && type == sel.TYPE_TWO_PART))\n+            || (_load && type == Select.TYPE_TWO_PART))\n             return 1;\n         return 0;\n     }"},{"sha":"5980871a5c8a73888eeb05c339d3bc7068c181c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":27,"deletions":12,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -524,19 +524,28 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         PersistenceCapable mappedByValue = null;\n \n         if (mappedByFieldMapping != null) {\n-        \tValueMapping val = mappedByFieldMapping.getValueMapping();\n-        \tClassMetaData decMeta = val.getTypeMetaData();\n-        \t// this inverse field does not have corresponding classMapping\n-        \t// its value may be a collection/map etc.\n-        \tif (decMeta != null) {\n-        \t    mappedByValue = sm.getPersistenceCapable();\n-        \t    res.setMappedByFieldMapping(mappedByFieldMapping);\n-        \t    res.setMappedByValue(mappedByValue);\n-        \t}\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // eager loading a child from its toOne parent and\n+            // the parent has @OneToOne(mappedBy=\"parent\") child relation.\n+            // By saving the mapped-by info in 'res' is to\n+            // avoid unneeded SQL pushdown that would otherwise gets\n+            // generated.\n+            if (decMeta != null) {\n+                mappedByValue = sm.getPersistenceCapable();\n+                res.setMappedByFieldMapping(mappedByFieldMapping);\n+                res.setMappedByValue(mappedByValue);\n+            }\n         }\n \n         sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n-            eagerJoin(res.newJoins(), cls, false)));\n+        eagerJoin(res.newJoins(), cls, false)));\n+\n+        // reset mapped by is needed for OneToOne bidirectional relations\n+        // having a mapped-by parent to correctly set the parent-child\n+        // relation.\n+        res.setMappedByFieldMapping(null);\n+        res.setMappedByValue(null);\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n@@ -964,7 +973,13 @@ else if (relMapping.getIdentityType() == ClassMapping.ID_DATASTORE)\n \n         if (oid == null)\n             sm.storeObject(field.getIndex(), null);\n-        else\n-            sm.setIntermediate(field.getIndex(), oid);\n+        else {\n+            if (JavaTypes.maybePC(field.getValue()) &&\n+                !field.getValue().getDeclaredTypeMetaData().isEmbeddedOnly()) {\n+                Object obj = store.find(oid, field, fetch);\n+                sm.storeObject(field.getIndex(), obj);\n+            } else    \n+                sm.setIntermediate(field.getIndex(), oid);\n+        }\n     }\n }"},{"sha":"52a72d33dd1edb81eaf76f7164deafe7fad7021b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":39,"deletions":101,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -26,26 +26,20 @@\n import java.util.Map;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n-import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -226,7 +220,11 @@ else if (!sel.isDistinct())\n                 joins = sel.outer(joins);\n             if (!selectOid) {\n                 Column[] refs = getJoinForeignKey(elem).getColumns();\n-                sel.orderBy(refs, true, joins, true);\n+                if (requiresOrderBy()) {\n+                    sel.orderBy(refs, true, joins, true);\n+                } else {\n+                    sel.select(refs, joins);\n+                }\n             }\n             field.orderLocal(sel, elem, joins);\n         }\n@@ -308,8 +306,9 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), orderJoins) + 1;\n \n-            // for inverseEager field\n-            setMappedBy(oid, sm, coll, res);\n+            // for inverse relation field\n+            setMappedBy(oid.equals(sm.getObjectId()) ? \n+                sm.getPersistenceCapable() : oid, res);\n             Object val = loadElement(null, store, fetch, res, dataJoins);\n             add(store, coll, val);\n         }\n@@ -318,6 +317,23 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n         return rels;\n     }\n \n+    private void setMappedBy(Object oid, Result res) {\n+        //  for inverse toOne relation field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        \n+        if (mappedByFieldMapping != null) {\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // this inverse field does not have corresponding classMapping\n+            // its value may be a collection/map etc.\n+            if (decMeta == null) \n+                return;\n+            \n+            res.setMappedByFieldMapping(mappedByFieldMapping);\n+            res.setMappedByValue(oid);\n+        }\n+    }\n+\n     private void setMappedBy(Object oid, OpenJPAStateManager sm, Object coll,\n         Result res) {\n         // for inverseEager field\n@@ -504,86 +520,19 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             return;\n         }\n \n-        //cache union for field here\n         // select data for this sm\n-        boolean found = true;\n         final ClassMapping[] elems = getIndependentElementMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, elems.length)];\n-        List parmList = null;\n-        Union union = null;\n-        SelectImpl sel = null;\n-        Map<JDBCStoreManager.SelectKey, Object[]> storeCollectionUnionCache = null;\n-        JDBCStoreManager.SelectKey selKey = null;\n-        if (!((JDBCStoreManager)store).isQuerySQLCacheOn() || elems.length > 1)\n-            union = newUnion(sm, store, fetch, elems, resJoins);\n-        else {\n-            parmList = new ArrayList();\n-            JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n-            fetchClone.copy(fetch);\n-           \n-            // to specify the type so that no cast is needed\n-            storeCollectionUnionCache = ((JDBCStoreManager)store).\n-                getCacheMapFromQuerySQLCache(StoreCollectionFieldStrategy.class);\n-            selKey = \n-                new JDBCStoreManager.SelectKey(null, field, fetchClone);\n-            Object[] objs = storeCollectionUnionCache.get(selKey);\n-            if (objs != null) {\n-                union = (Union) objs[0];\n-                resJoins[0] = (Joins) objs[1];\n-            }\n-            else {\n-                synchronized(storeCollectionUnionCache) {\n-                    objs = storeCollectionUnionCache.get(selKey);\n-                    if (objs == null) {\n-                        // select data for this sm\n-                        union = newUnion(sm, store, fetch, elems, resJoins);\n-                        found = false;\n-                    } else {\n-                        union = (Union) objs[0];\n-                        resJoins[0] = (Joins) objs[1];\n-                    }\n-\n-                    sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n-                        getDelegate();\n-                    if (sel.getSQL() == null) {\n-                    \t((SelectImpl)sel).setSQL(store, fetch);\n-                        found = false;\n-                    }\n-\n-                    // only cache the union when elems length is 1 for now\n-                    if (!found) { \n-                        Object[] objs1 = new Object[2];\n-                        objs1[0] = union;\n-                        objs1[1] = resJoins[0];\n-                        ((JDBCStoreManager)store).addToSqlCache(\n-                            storeCollectionUnionCache, selKey, objs1);\n-                     }\n-                }\n-            }\n-            \n-            Log log = store.getConfiguration().\n-                getLog(JDBCConfiguration.LOG_JDBC);\n-            if (log.isTraceEnabled()) {\n-                if (found)\n-                    log.trace(_loc.get(\"cache-hit\", field, this.getClass()));\n-                else\n-                    log.trace(_loc.get(\"cache-missed\", field, this.getClass())); \n+        Union union = store.getSQLFactory().newUnion\n+            (Math.max(1, elems.length));\n+        union.select(new Union.Selector() {\n+            public void select(Select sel, int idx) {\n+                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n+                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n+                    JDBCFetchConfiguration.EAGER_PARALLEL);\n             }\n-            \n-            ClassMapping mapping = field.getDefiningMapping();\n-            Object oid = sm.getObjectId();\n-            Column[] cols = mapping.getPrimaryKeyColumns();\n-            if (sel == null)\n-                sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n-                getDelegate();\n-\n-            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n-                \tnull, null, parmList);\n-            List nonFKParams = sel.getSQL().getNonFKParameters();\n-            if (nonFKParams != null && nonFKParams.size() > 0) \n-                parmList.addAll(nonFKParams);\n-        }\n-        \n+        });\n+\n         // create proxy\n         Object coll;\n         ChangeTracker ct = null;\n@@ -596,7 +545,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         }\n \n         // load values\n-        Result res = union.execute(store, fetch, parmList);\n+        Result res = union.execute(store, fetch);\n         try {\n             int seq = -1;\n             while (res.next()) {\n@@ -620,21 +569,6 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             sm.storeObject(field.getIndex(), coll);\n     }\n \n-    protected Union newUnion(final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchConfiguration fetch, final ClassMapping[] elems,\n-        final Joins[] resJoins) {\n-        Union union = store.getSQLFactory().newUnion\n-        (Math.max(1, elems.length));\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int idx) {\n-                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n-                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n-                        JDBCFetchConfiguration.EAGER_PARALLEL);\n-            }\n-        });\n-        return union;\n-    }\n-    \n     /**\n      * Select data for loading, starting in field table.\n      */\n@@ -662,4 +596,8 @@ public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n     protected ForeignKey getJoinForeignKey() {\n         return getJoinForeignKey(getDefaultElementMapping(false));\n     }\n+    \n+    boolean requiresOrderBy() {\n+    \treturn List.class.isAssignableFrom(field.getProxyType());\n+    }\n }"},{"sha":"cde443b99b0e04c8cbaafbb0f7040e93f3967d61","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Sequence.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -38,6 +38,8 @@\n     private int _initial = 1;\n     private int _increment = 1;\n     private int _cache = 0;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n \n     // keep track of source\n     private File _source = null;\n@@ -206,4 +208,20 @@ public int compareTo(Object other) {\n     public String toString() {\n         return getFullName();\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n }"},{"sha":"1f834b9600d9bd0269bbf183a61ff23e75545b69","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -61,6 +61,8 @@\n     private Index[] _idxs = null;\n     private Unique[] _unqs = null;\n     private String _comment = null;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n \n     /**\n      * Default constructor.\n@@ -718,4 +720,20 @@ public String getComment() {\n     public void setComment(String comment) {\n         _comment = comment;\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n }"},{"sha":"c2d293215d9a8a9c20a0ed8f170cc77494caca06","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -26,6 +26,7 @@\n import java.util.LinkedList;\n \n import org.xml.sax.Attributes;\n+import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -34,6 +35,8 @@\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.util.UserException;\n \n+import serp.util.Numbers;\n+\n /**\n  * Custom SAX parser used to parse {@link Schema} objects. The parser\n  * will place all parsed schemas into the current {@link SchemaGroup}, set\n@@ -404,6 +407,11 @@ private void endSchema() {\n \n     private void startSequence(Attributes attrs) {\n         Sequence seq = _schema.addSequence(attrs.getValue(\"name\"));\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n         seq.setSource(getSourceFile(), seq.SRC_XML);\n         try {\n             String val = attrs.getValue(\"initial-value\");\n@@ -423,6 +431,11 @@ private void startSequence(Attributes attrs) {\n     private void startTable(Attributes attrs) {\n         _table = _schema.addTable(attrs.getValue(\"name\"));\n         _table.setSource(getSourceFile(), _table.SRC_XML);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            _table.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            _table.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n     }\n \n     private void endTable() {"},{"sha":"ce8f050a6d11685101ebca2d8b0c64b11c03b337","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":8,"deletions":26,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -199,6 +199,7 @@\n     public String selectWords = null;\n     public String fixedSizeTypeNames = null;\n     public String schemaCase = SCHEMA_CASE_UPPER;\n+    public boolean setStringRightTruncationOn = true;\n \n     // sql\n     public String validationSQL = null;\n@@ -3065,9 +3066,7 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n      */\n     public String[] getCreateTableSQL(Table table) {\n         StringBuffer buf = new StringBuffer();\n-        String tableName = checkNameLength(getFullName(table, false), \n-        \t\tmaxTableNameLength, \"long-table-name\");\n-        buf.append(\"CREATE TABLE \").append(tableName);\n+        buf.append(\"CREATE TABLE \").append(getFullName(table, false));\n         if (supportsComments && table.hasComment()) {\n             buf.append(\" \");\n             comment(buf, table.getComment());\n@@ -3140,9 +3139,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n \n         StringBuffer buf = new StringBuffer();\n         buf.append(\"CREATE SEQUENCE \");\n-        String seqName = checkNameLength(getFullName(seq), maxTableNameLength, \n-        \t\t\"long-seq-name\");\n-        buf.append(seqName);\n+        buf.append(getFullName(seq));\n         if (seq.getInitialValue() != 0)\n             buf.append(\" START WITH \").append(seq.getInitialValue());\n         if (seq.getIncrement() > 1)\n@@ -3168,9 +3165,8 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n         buf.append(\"CREATE \");\n         if (index.isUnique())\n             buf.append(\"UNIQUE \");\n-        String indexName = checkNameLength(index.getName(), maxIndexNameLength, \n-                \"long-index-name\");\n-        buf.append(\"INDEX \").append(indexName);\n+        buf.append(\"INDEX \").append(index.getName());\n+\n         buf.append(\" ON \").append(getFullName(index.getTable(), false));\n         buf.append(\" (\").append(Strings.join(index.getColumns(), \", \")).\n             append(\")\");\n@@ -3280,9 +3276,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      */\n     protected String getDeclareColumnSQL(Column col, boolean alter) {\n         StringBuffer buf = new StringBuffer();\n-        String columnName = checkNameLength(col.getName(), maxColumnNameLength, \n-        \t\t\"long-column-name\");\n-        buf.append(columnName).append(\" \");\n+        buf.append(col).append(\" \");\n         buf.append(getTypeName(col));\n \n         // can't add constraints to a column we're adding after table\n@@ -3469,11 +3463,11 @@ protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n             || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n+\n         StringBuffer buf = new StringBuffer();\n         if (unq.getName() != null\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n-            buf.append(\"CONSTRAINT \").append(checkNameLength(unq.getName(), \n-            \tmaxConstraintNameLength, \"long-constraint-name\")).append(\" \");\n+            buf.append(\"CONSTRAINT \").append(unq.getName()).append(\" \");\n         buf.append(\"UNIQUE \");\n         if (unq.getName() != null && CONS_NAME_MID.equals(constraintNameMode))\n             buf.append(unq.getName()).append(\" \");\n@@ -4546,16 +4540,4 @@ public void setTrimSchemaName(boolean trimSchemaName) {\n     public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n         // Do nothing\n     }\n-    \n-    /**\n-     * Validate that the given name is no longer than given maximum length.\n-     * If the given name is indeed longer then raises an UserException with the \n-     * given message key otherwise returns the same name.\n-     */\n-    final String checkNameLength(String name, int length, String msgKey) {\n-    \tif (name.length() > length)\n-    \t\tthrow new UserException(_loc.get(msgKey, name, name.length(), \n-    \t\t\t\tlength));\n-    \treturn name;\n-    }\n }"},{"sha":"8453fe020408c2453acf6046648eb066572ab5c7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -46,11 +46,9 @@ public DerbyDictionary() {\n         stringLengthFunction = \"LENGTH({0})\";\n         substringFunctionName = \"SUBSTR\";\n \n-        // Derby name length restriction has been relaxed \n-        // http://www.archivum.info/derby-dev@db.apache.org/2004-12/msg00270.html\n-        maxConstraintNameLength = 128;\n+        maxConstraintNameLength = 18;\n         maxIndexNameLength = 128;\n-        maxColumnNameLength = 128;\n+        maxColumnNameLength = 30;\n         maxTableNameLength = 128;\n \n         useGetBytesForBlobs = true;"},{"sha":"66dfb884ffc92507764441fab2d2db42c6e1499d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -245,6 +245,15 @@ public boolean supportsRandomAccessResultSet(Select sel,\n     public Connection decorate(Connection conn)\n         throws SQLException {\n         conn = super.decorate(conn);\n+        if (isJDBC3 && conn.getHoldability() != \n+            ResultSet.HOLD_CURSORS_OVER_COMMIT) {\n+            conn.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);\n+            if (log.isTraceEnabled()) {                    \n+                log.trace(_loc.get(\"connection-defaults\", new Object[]{\n+                    conn.getAutoCommit(), conn.getHoldability(),\n+                    conn.getTransactionIsolation()}));\n+            }\n+        }\n \n         // if we haven't already done so, initialize the lock mode of the\n         // connection"},{"sha":"2714a84482e17fc4b69d6b9b2f1be8a467bd6987","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -51,6 +51,7 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n+import org.apache.openjpa.util.UserException;\n \n import serp.util.Numbers;\n \n@@ -501,6 +502,9 @@ public void setString(PreparedStatement stmnt, int idx, String val,\n     public void setNull(PreparedStatement stmnt, int idx, int colType,\n         Column col)\n         throws SQLException {\n+        if ((colType == Types.CLOB || colType == Types.BLOB) && col.isNotNull())\n+            throw new UserException(_loc.get(\"null-blob-in-not-nullable\", col\n+                .getFullName()));\n         if (colType == Types.BLOB && _driverBehavior == BEHAVE_ORACLE)\n             stmnt.setBlob(idx, getEmptyBlob());\n         else if (colType == Types.CLOB && _driverBehavior == BEHAVE_ORACLE\n@@ -1112,7 +1116,7 @@ public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n \n     public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n         int updateSuccessCnt = 0;\n-        if (batchLimit > 0 && ps != null) {\n+        if (batchLimit != 0 && ps != null) {\n             updateSuccessCnt = ps.getUpdateCount();\n             if (log.isTraceEnabled())\n                 log.trace(_loc.get(\"batch-update-success-count\","},{"sha":"47a0b513661698ef82acaa6cf49d648b87a90650","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","status":"modified","additions":78,"deletions":41,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowManagerImpl.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -39,17 +39,17 @@\n public class RowManagerImpl\n     implements RowManager {\n \n-    private Map _inserts = null;\n-    private Map _updates = null;\n-    private Map _deletes = null;\n-    private Collection _secondaryUpdates = null;\n-    private Collection _secondaryDeletes = null;\n-    private Collection _allRowUpdates = null;\n-    private Collection _allRowDeletes = null;\n+    private Map<Key, PrimaryRow> _inserts = null;\n+    private Map<Key, PrimaryRow> _updates = null;\n+    private Map<Key, PrimaryRow> _deletes = null;\n+    private Collection<SecondaryRow> _secondaryUpdates = null;\n+    private Collection<SecondaryRow> _secondaryDeletes = null;\n+    private Collection<Row> _allRowUpdates = null;\n+    private Collection<Row> _allRowDeletes = null;\n \n     // we maintain a list of the order of all primary rows if the user\n     // wants to be able to fetch them in order\n-    private final List _primaryOrder;\n+    private final List<PrimaryRow> _primaryOrder;\n \n     // track whether we're dealing with any auto-inc columns\n     private boolean _auto = false;\n@@ -66,7 +66,7 @@\n      * @param order whether to keep track of the order in which rows are added\n      */\n     public RowManagerImpl(boolean order) {\n-        _primaryOrder = (order) ? new ArrayList() : null;\n+        _primaryOrder = (order) ? new ArrayList<PrimaryRow>() : null;\n     }\n \n     /**\n@@ -80,61 +80,98 @@ public boolean hasAutoAssignConstraints() {\n      * Return the ordered primary rows. Only available if ordering requested\n      * on construction.\n      */\n-    public List getOrdered() {\n-        return (_primaryOrder == null) ? Collections.EMPTY_LIST : _primaryOrder;\n+    public List<PrimaryRow> getOrdered() {\n+        if(_primaryOrder == null ) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _primaryOrder;\n+        }\n     }\n \n     /**\n      * Return all inserted primary rows.\n      */\n-    public Collection getInserts() {\n-        return (_inserts == null) ? Collections.EMPTY_LIST : _inserts.values();\n+    public Collection<PrimaryRow> getInserts() {\n+        if(_inserts == null ) {\n+            return Collections.emptyList();\n+        }\n+        else {\n+            return _inserts.values();\n+        }\n     }\n \n     /**\n      * Return all updated primary rows.\n      */\n-    public Collection getUpdates() {\n-        return (_updates == null) ? Collections.EMPTY_LIST : _updates.values();\n+    public Collection<PrimaryRow> getUpdates() {\n+        if(_updates == null ){ \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _updates.values();\n+        }\n     }\n \n     /**\n      * Return all deleted primary rows.\n      */\n-    public Collection getDeletes() {\n-        return (_deletes == null) ? Collections.EMPTY_LIST : _deletes.values();\n+    public Collection<PrimaryRow> getDeletes() {\n+        if(_deletes == null) { \n+            return Collections.emptyList();\n+        }\n+        else {\n+            return _deletes.values();\n+        }\n     }\n \n     /**\n      * Return all inserted and updated secondary rows.\n      */\n-    public Collection getSecondaryUpdates() {\n-        return (_secondaryUpdates == null) ? Collections.EMPTY_LIST\n-            : _secondaryUpdates;\n+    public Collection<SecondaryRow> getSecondaryUpdates() {\n+        if(_secondaryUpdates == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _secondaryUpdates;\n+        }\n     }\n \n     /**\n      * Return all deleted secondary rows.\n      */\n-    public Collection getSecondaryDeletes() {\n-        return (_secondaryDeletes == null) ? Collections.EMPTY_LIST\n-            : _secondaryDeletes;\n+    public Collection<SecondaryRow> getSecondaryDeletes() {\n+        if(_secondaryDeletes == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _secondaryDeletes;\n+        }\n     }\n \n     /**\n      * Return any 'all row' updates.\n      */\n-    public Collection getAllRowUpdates() {\n-        return (_allRowUpdates == null) ? Collections.EMPTY_LIST\n-            : _allRowUpdates;\n+    public Collection<Row> getAllRowUpdates() {\n+        if(_allRowUpdates == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _allRowUpdates;\n+        }\n     }\n \n     /**\n      * Return any 'all row' deletes.\n      */\n-    public Collection getAllRowDeletes() {\n-        return (_allRowDeletes == null) ? Collections.EMPTY_LIST\n-            : _allRowDeletes;\n+    public Collection<Row> getAllRowDeletes() {\n+        if(_allRowDeletes == null) { \n+            return Collections.emptyList();\n+        }\n+        else { \n+            return _allRowDeletes;\n+        }\n+        \n     }\n \n     public Row getSecondaryRow(Table table, int action) {\n@@ -149,12 +186,12 @@ public void flushSecondaryRow(Row row)\n         SecondaryRow srow = (SecondaryRow) row;\n         if (srow.getAction() == Row.ACTION_DELETE) {\n             if (_secondaryDeletes == null)\n-                _secondaryDeletes = new ArrayList();\n-            _secondaryDeletes.add(srow.clone());\n+                _secondaryDeletes = new ArrayList<SecondaryRow>();\n+            _secondaryDeletes.add((SecondaryRow) srow.clone());\n         } else {\n             if (_secondaryUpdates == null)\n-                _secondaryUpdates = new ArrayList();\n-            _secondaryUpdates.add(srow.clone());\n+                _secondaryUpdates = new ArrayList<SecondaryRow>();\n+            _secondaryUpdates.add((SecondaryRow) srow.clone());\n         }\n     }\n \n@@ -169,12 +206,12 @@ public void flushAllRows(Row row) {\n         switch (row.getAction()) {\n             case Row.ACTION_UPDATE:\n                 if (_allRowUpdates == null)\n-                    _allRowUpdates = new ArrayList();\n+                    _allRowUpdates = new ArrayList<Row>();\n                 _allRowUpdates.add(row);\n                 break;\n             case Row.ACTION_DELETE:\n                 if (_allRowDeletes == null)\n-                    _allRowDeletes = new ArrayList();\n+                    _allRowDeletes = new ArrayList<Row>();\n                 _allRowDeletes.add(row);\n                 break;\n             default:\n@@ -192,25 +229,25 @@ public Row getRow(Table table, int action, OpenJPAStateManager sm,\n             && _row != null && _row.getAction() == action)\n             return _row;\n \n-        Map map;\n+        Map<Key, PrimaryRow> map;\n         if (action == Row.ACTION_DELETE) {\n             if (_deletes == null && create)\n-                _deletes = new HashMap();\n+                _deletes = new LinkedHashMap<Key, PrimaryRow>();\n             map = _deletes;\n         } else if (action == Row.ACTION_INSERT) {\n             if (_inserts == null && create)\n-                _inserts = new HashMap();\n+                _inserts = new LinkedHashMap<Key, PrimaryRow>();\n             map = _inserts;\n         } else {\n             if (_updates == null && create)\n-                _updates = new HashMap();\n+                _updates = new LinkedHashMap<Key, PrimaryRow>();\n             map = _updates;\n         }\n         if (map == null)\n             return null;\n \n         _key = new Key(table, sm);\n-        _row = (PrimaryRow) map.get(_key);\n+        _row = map.get(_key);\n \n         if (_row == null && create) {\n             _row = new PrimaryRow(table, action, sm);"},{"sha":"a4d4c22490edb4e7e791ac39b4941e0f9d64e6b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -56,7 +56,6 @@\n     private List _subsels = null;\n     private List _params = null;\n     private List _cols = null;\n-    private List _nonFKParams = null;\n \n     /**\n      * Default constructor.\n@@ -147,11 +146,6 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n-        if (buf._nonFKParams != null) {\n-            if (_nonFKParams == null)\n-                _nonFKParams = new ArrayList();\n-            _nonFKParams.addAll(buf._nonFKParams);\n-        }\n     }\n \n     public SQLBuffer append(Table table) {\n@@ -271,11 +265,6 @@ else if (o instanceof Raw)\n                 if (isFK)\n                     break;\n             }\n-            if (!isFK) {\n-                if (_nonFKParams == null)\n-                    _nonFKParams = new ArrayList();\n-                _nonFKParams.add(o);                \n-            }\n         }\n         return this;\n     }\n@@ -399,9 +388,6 @@ public List getParameters() {\n         return (_params == null) ? Collections.EMPTY_LIST : _params;\n     }\n \n-    public List getNonFKParameters() {\n-        return (_nonFKParams == null) ? Collections.EMPTY_LIST : _nonFKParams;\n-    }\n     /**\n      * Return the SQL for this buffer.\n      */"},{"sha":"3237a97a482d66ac1a390c879bab81dacbe31b94","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":43,"deletions":34,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -391,7 +391,7 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         }\n \n         return getEagerResult(conn, stmnt, rs, store, fetch, forUpdate, \n-            _sql.getSQL());\n+            _sql.getSQL(), params);\n     }\n     \n     private boolean isForUpdate(JDBCStore store, int lockLevel) {\n@@ -409,7 +409,7 @@ private boolean isForUpdate(JDBCStore store, int lockLevel) {\n      * to the given result.\n      */\n     private static void addEagerResults(SelectResult res, SelectImpl sel,\n-        JDBCStore store, JDBCFetchConfiguration fetch)\n+        JDBCStore store, JDBCFetchConfiguration fetch, List params)\n         throws SQLException {\n         if (sel._eager == null)\n             return;\n@@ -428,7 +428,7 @@ private static void addEagerResults(SelectResult res, SelectImpl sel,\n                 eres = res;\n             else\n                 eres = ((SelectExecutor) entry.getValue()).execute(store,\n-                    fetch);\n+                    fetch, params);\n \n             eager = res.getEagerMap(false);\n             if (eager == null) {\n@@ -511,14 +511,15 @@ protected int getCount(ResultSet rs) throws SQLException {\n      */\n     protected Result getEagerResult(Connection conn, \n         PreparedStatement stmnt, ResultSet rs, JDBCStore store, \n-        JDBCFetchConfiguration fetch, boolean forUpdate, String sqlStr) \n+        JDBCFetchConfiguration fetch, boolean forUpdate, String sqlStr,\n+        List params) \n         throws SQLException {\n         SelectResult res = new SelectResult(conn, stmnt, rs, _dict);\n         res.setSelect(this);\n         res.setStore(store);\n         res.setLocking(forUpdate);\n         try {\n-            addEagerResults(res, this, store, fetch);\n+            addEagerResults(res, this, store, fetch, params);\n         } catch (SQLException se) {\n             res.close();\n             throw se;\n@@ -576,39 +577,45 @@ public void setParent(Select parent, String path) {\n         \n         if (_parent.getAliases() == null || _subPath == null)\n             return;\n-        \n-        // resolve aliases for subselect from parent\n-        Set<Map.Entry> entries = _parent.getAliases().entrySet();\n-        for (Map.Entry entry : entries) {\n-            Object key = entry.getKey();\n-            Integer alias = (Integer) entry.getValue();\n-            if (key.toString().indexOf(_subPath) != -1 ||\n-                _parent.findTableAlias(alias) == false) {\n-                if (_aliases == null)\n-                    _aliases = new HashMap();\n-                _aliases.put(key, alias);\n-\n-                Object tableString = _parent.getTables().get(alias);\n-                if (_tables == null)\n-                    _tables = new TreeMap();\n-                _tables.put(alias, tableString);\n-                \n-                _removedAliasFromParent.set(alias.intValue());\n-            }\n-        }\n-        \n-        if (_aliases != null) {\n-            // aliases moved into subselect should be removed from parent\n-            entries = _aliases.entrySet();\n+\n+        if (_parent._aliases.size() <= 1)\n+            return;\n+ \n+        // Do not remove aliases for databases that use SYNTAX_DATABASE (oracle)\n+        if(_parent._joinSyntax != JoinSyntaxes.SYNTAX_DATABASE) {\n+            // resolve aliases for subselect from parent\n+            Set<Map.Entry> entries = _parent.getAliases().entrySet();\n             for (Map.Entry entry : entries) {\n                 Object key = entry.getKey();\n                 Integer alias = (Integer) entry.getValue();\n                 if (key.toString().indexOf(_subPath) != -1 ||\n-                    _parent.findTableAlias(alias) == false) {\n-                    _parent.removeAlias(key);\n+                        _parent.findTableAlias(alias) == false) {\n+                    if (_aliases == null)\n+                        _aliases = new HashMap();\n+                    _aliases.put(key, alias);\n \n                     Object tableString = _parent.getTables().get(alias);\n-                    _parent.removeTable(alias);\n+                    if (_tables == null)\n+                        _tables = new TreeMap();\n+                    _tables.put(alias, tableString);\n+\n+                    _removedAliasFromParent.set(alias.intValue());\n+                }\n+            }\n+\n+            if (_aliases != null) {\n+                // aliases moved into subselect should be removed from parent\n+                entries = _aliases.entrySet();\n+                for (Map.Entry entry : entries) {\n+                    Object key = entry.getKey();\n+                    Integer alias = (Integer) entry.getValue();\n+                    if (key.toString().indexOf(_subPath) != -1 ||\n+                            _parent.findTableAlias(alias) == false) {\n+                        _parent.removeAlias(key);\n+\n+                        Object tableString = _parent.getTables().get(alias);\n+                        _parent.removeTable(alias);\n+                    }\n                 }\n             }\n         }\n@@ -618,8 +625,10 @@ private boolean findTableAlias(Integer alias) {\n         // if alias is defined and referenced, return true.\n         String value = \"t\" + alias.toString() + \".\";\n         if (_tableAliases != null)\n-            return _tableAliases.containsValue(value) &&\n-               _tables.containsKey(alias);\n+            if (_tableAliases.containsValue(value))\n+               return _tables.containsKey(alias);\n+           else\n+               return _joins != null;\n         else\n             return true;\n     }"},{"sha":"81464d5dc75a7b7dfc0b0a10e6701e00a61446a0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -266,7 +266,18 @@ public void endConfiguration() {\n \n     public Connection decorate(Connection conn)\n         throws SQLException {\n-        return new SybaseConnection(super.decorate(conn));\n+        conn = super.decorate(conn);\n+        // In order for Sybase to raise the truncation exception when the \n+        // string length is greater than the column length for Char, VarChar, \n+        // Binary, VarBinary, the \"set string_rtruncation on\" must be executed. \n+        // This setting is effective for the duration of current connection.\n+        if (setStringRightTruncationOn) {\n+            String str = \"set string_rtruncation on\";\n+            PreparedStatement stmnt = prepareStatement(conn, str);        \n+            stmnt.execute();\n+            stmnt.close();\n+        }\n+        return new SybaseConnection(conn);\n     }\n \n     /**"},{"sha":"401cd51bb487eb55df3421efe5ddec8347194ad7","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -69,7 +69,7 @@ EagerFetchMode-expert: true\n \n SubclassFetchMode-name: Subclass fetch mode\n SubclassFetchMode-desc: Specifies the default subclass fetch mode to use. \\\n-\tEitehr \"none\" to always select data in base class tables only, \"join\" to \\\n+\tEither \"none\" to always select data in base class tables only, \"join\" to \\\n \touter-join to tables for all subclasses, or \"parallel\" to execute a \\\n \tseparate select in parallel for each possible subclass.  Parallel mode is \\\n \tonly applicable to Query execution; in other situations it mirrors \\"},{"sha":"815e939edec7e7db2414e3469b1709a01f0dde82","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -129,7 +129,7 @@ generic-no-fkcol-target-adapt: \"{0}\" does not supply a target for column \\\n generic-bad-fktarget: \"{0}\" defines a target of \"{1}\" for column \"{2}\", but \\\n \tthat target does not exist in table \"{3}\".\n generic-bad-fktargetcls: \"{0}\" defines target field \"{1}\" for column \\\n-\t\"{2}\", but OpenJPA cannot deterimine the owning class for that field.\n+\t\"{2}\", but OpenJPA cannot determine the owning class for that field.\n generic-bad-fktargetfield: \"{0}\" defines target field \"{1}\" for column \\\n \t\"{2}\", but that field does not exist in type \"{3}\".\n generic-fktargetfield-cols: \"{0}\" defines target field \"{1}\" for column \\\n@@ -146,7 +146,7 @@ generic-create-defer-fk: \"{0}\" marks its columns as having a deferred foreign \\\n \tdeferred constraints.  Creating an undeferred constraint.\n generic-unsupported-fk-action: \"{0}\" uses an unsupported foreign key delete or \\\n \tupdate action on its columns.  Reverting to a logical foreign key.\n-generic-const-join: \"{0}\" attmpts to join a constant value to another constant \\\n+generic-const-join: \"{0}\" attempts to join a constant value to another constant \\\n \tvalue.\n superclass-no-fk-cols: Type \"{0}\" is missing information on how to join to \\\n \tits superclass.\n@@ -169,7 +169,7 @@ superclass-no-fkcol-target-adapt: Type \"{0}\" does not supply a target for \\\n superclass-bad-fktarget: Type \"{0}\" defines a target of \"{1}\" for superclass \\\n \tjoin column \"{2}\", but that target does not exist in table \"{3}\".\n superclass-bad-fktargetcls: \"{0}\" defines target field \"{1}\" for superclass \\\n-\tjoin column \"{2}\", but OpenJPA cannot deterimine the owning class for that \\\n+\tjoin column \"{2}\", but OpenJPA cannot determine the owning class for that \\\n \tfield.\n superclass-bad-fktargetfield: Type \"{0}\" defines target field of \"{1}\" for \\\n \tsuperclass join column \"{2}\", but that field does not exist in type \"{3}\".\n@@ -191,7 +191,7 @@ superclass-create-defer-fk: Type \"{0}\" marks its superclass join columns as \\\n superclass-unsupported-fk-action: Type \"{0}\" uses an unsupported foreign key \\\n \tdelete or update action on its superclass join columns.  Reverting to a \\\n \tlogical foreign key.\n-superclass-const-join: \"{0}\" attmpts to join a constant value to another \\\n+superclass-const-join: \"{0}\" attempts to join a constant value to another \\\n \tconstant value.\n join-no-index-cols: \"{0}\" declares a join index, but has no join columns.\n join-index-exists: \"{0}\" marks its join columns as explicitly not indexed, but \\\n@@ -237,7 +237,7 @@ join-no-fkcol-target-adapt: \"{0}\" does not supply a target for join column \\\n join-bad-fktarget: \"{0}\" defines a target of \"{1}\" for join column \"{2}\", but \\\n \tthat target does not exist in table \"{3}\".\n join-bad-fktargetcls: \"{0}\" defines target field \"{1}\" for join column \"{2}\", \\\n-\tbut OpenJPA cannot deterimine the owning class for that field.\n+\tbut OpenJPA cannot determine the owning class for that field.\n join-bad-fktargetfield: \"{0}\" defines target field of \"{1}\" for join column \\\n \t\"{2}\", but that field does not exist in type \"{3}\".\n join-fktargetfield-cols: \"{0}\" defines target field \"{1}\" for join column \\\n@@ -255,7 +255,7 @@ join-create-defer-fk: \"{0}\" marks its join columns as having a deferred \\\n \tsupport deferred constraints.  Creating an undeferred constraint.\n join-unsupported-fk-action: \"{0}\" uses an unsupported foreign key delete or \\\n \tupdate action on its join columns.  Reverting to a logical foreign key.\n-join-const-join: \"{0}\" attmpts to join a constant value to another constant \\\n+join-const-join: \"{0}\" attempts to join a constant value to another constant \\\n \tvalue.\n unmapped: Attempt to map \"{0}\" failed: the owning entity is not mapped.\n col-wrong-table: When mapping \"{0}\" to table \"{1}\", found a column mapped to \\"},{"sha":"7a12b9fb29e6afd0efaf3565849a65f7a9d1655f","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -126,7 +126,7 @@ outer-join-support: The subclass-join class indicator mapped to \"{0}\" requires \\\n \t\"traditional\" join syntax, which does not support outer joins.  To \\\n \tuse SQL 92 joins instead, set the following property:\\n\\\n \topenjpa.jdbc.DBDictionary: JoinSyntax=sql92\n-unknown-discrim-value: Could not map disciminator value \"{0}\" to any \\\n+unknown-discrim-value: Could not map discriminator value \"{0}\" to any \\\n \tknown subclasses of the requested class \"{1}\" (known discriminator \\\n \tvalues: {2}).\n bad-unmapped-rel: \"{0}\" cannot be mapped without stringifying the oid of \\"},{"sha":"1c8b9f7a1893281c714b4ae528d4f17d4f43801a","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -157,9 +157,9 @@ illegal-method: {0}.{1}() is illegal to be invoked\n column-not-mapped: SQLResultSetMapping \"{0}\" does not map the columns \"{1}\" \\\n \tthat are selected by the SQL query\\r\\n \"{2}\"\n dictionary-configuration: DBDictionary configuration: \\n{0}\n-oracle-timestamp-bug: An ArrayIndexOutOfBoundsException has occured when \\\n+oracle-timestamp-bug: An ArrayIndexOutOfBoundsException has occurred when \\\n     getting a timestamp value. This can happen when using versions of the \\\n-    Oracle JDBC driver greater than 9.2 in conjuncion with a server version \\\n+    Oracle JDBC driver greater than 9.2 in conjunction with a server version \\\n     less than 9.2. Downgrading the driver will solve this, or it can be \\\n     worked around by setting the \"SupportsTimestampNanos\" DBDictionary \\\n     property to \"true\".\n@@ -175,14 +175,5 @@ function-not-supported: The database dictionary in use (\"{0}\") \\\n batch-update-success-count: ExecuteBatch command returns update success count {0}\n connection-defaults: Initial connection autoCommit: {0}, holdability: {1}, \\\n     TransactionIsolation: {2}\n-long-table-name: Table name \"{0}\" is {1}-character long. The database allows \\\n-\tmaximum {2}-character for a table name. \n-long-column-name: Column name \"{0}\" is {1}-character long. The database allows \\\n-\tmaximum {2}-character for a column name. \n-long-index-name: Index name \"{0}\" is {1}-character long. The database allows \\\n-\tmaximum {2}-character for an index name. \n-long-constraint-name: Constraint name \"{0}\" is {1}-character long. The \\\n-\tdatabase allows maximum {2}-character for a constraint name. \n-long-seq-name: Sequence name \"{0}\" is {1}-character long. The database allows \\\n-\tmaximum {2}-character for a sequence name. \n-\t\n\\ No newline at end of file\n+null-blob-in-not-nullable: Can not set null value on column \"{0}\" \\\n+\tbecause the corresponding field is set to be non-nullable.\n\\ No newline at end of file"},{"sha":"c42a685aebfca6eb13421ceee197157a5836cba2","filename":"openjpa-kernel/pom.xml","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -64,13 +64,6 @@\n     </dependencies>\n     <build>\n         <plugins>\n-            <plugin>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n             <plugin>\n                 <groupId>org.codehaus.mojo</groupId>\n                 <artifactId>javacc-maven-plugin</artifactId>\n@@ -106,6 +99,7 @@\n                 </executions>\n             </plugin>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -148,8 +142,8 @@\n                 </executions>\n             </plugin>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-jar-plugin</artifactId>\n-                <version>2.2</version>\n                 <configuration>\n                     <excludes>\n                         <exclude>**/com/ibm/**</exclude>"},{"sha":"793c03e9d86d40cfada2169a4d0e1dbb623ae1a0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -41,6 +41,7 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n \n@@ -2566,7 +2567,7 @@ private Method getMethod(Class owner, Class type, String prefix,\n         // or 'Object'; figure out what type to use\n         String typeName = type.getName();\n         if (type.isPrimitive())\n-            typeName = typeName.substring(0, 1).toUpperCase()\n+            typeName = typeName.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                 + typeName.substring(1);\n         else if (type.equals(String.class))\n             typeName = \"String\";\n@@ -3971,7 +3972,7 @@ private void readExternal(Code code, String fieldName, Class type,\n         String methName;\n         if (type.isPrimitive()) {\n             methName = type.getName();\n-            methName = Character.toUpperCase(methName.charAt(0))\n+            methName = methName.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                 + methName.substring(1);\n             methName = \"read\" + methName;\n         } else\n@@ -4128,7 +4129,7 @@ private void writeExternal(Code code, String fieldName, Class type,\n         String methName;\n         if (type.isPrimitive()) {\n             methName = type.getName();\n-            methName = Character.toUpperCase(methName.charAt(0))\n+            methName = methName.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                 + methName.substring(1);\n             methName = \"write\" + methName;\n         } else"},{"sha":"5ea1fc677b10299319bc26cf0480946510a5a86b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -744,6 +744,7 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n             return;\n \n         OpenJPAStateManager sm;\n+\n         if (vmd.getCascadePersist() == ValueMetaData.CASCADE_NONE) {\n             if (!_broker.isDetachedNew() && _broker.isDetached(obj))\n                 return; // allow but ignore\n@@ -754,9 +755,17 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n                     _loc.get(\"cant-cascade-persist\", vmd))\n                     .setFailedObject(obj);\n         } else {\n+            if (vmd.getCascadePersist() == ValueMetaData.CASCADE_IMMEDIATE) {\n+                if (!_broker.isDetachedNew() && _broker.isDetached(obj))\n+                    return; // allow but ignore\n+            }        \t\n             sm = _broker.getStateManager(obj);\n-            if (sm == null || !sm.isProvisional())\n+            if (sm == null || !sm.isProvisional()) { \n                 sm = _broker.persist(obj, null, true, call);\n+                // ensure generated IDs get assigned properly\n+                if (!logical)\n+                    ((StateManagerImpl)sm).assignObjectId(false, true);\n+            }\n         }\n \n         if (sm != null) {"},{"sha":"d78f9784589343b910fe0ecd5b36e35a4ca09e7f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -311,7 +311,8 @@ protected void initialize(PersistenceCapable pc, PCState state) {\n \n         // initialize our state and add ourselves to the broker's cache\n         setPCState(state);\n-        if (_broker.getStateManagerImplById(getObjectId(), false) == null) {\n+        if ( _oid == null ||  \n+            _broker.getStateManagerImplById(_oid, false) == null) {\n         \t_broker.setStateManager(_id, this, BrokerImpl.STATUS_INIT);\n         }\n         if (state == PCState.PNEW)\n@@ -512,7 +513,7 @@ public boolean assignObjectId(boolean flush) {\n      * Ask store manager to assign our oid, optionally flushing and\n      * optionally recaching on the new oid.\n      */\n-    private boolean assignObjectId(boolean flush, boolean preFlushing) {\n+    boolean assignObjectId(boolean flush, boolean preFlushing) {\n         if (_oid != null || isEmbedded() || !isPersistent())\n             return true;\n "},{"sha":"f3a415093b90dc38f3cd2bc67d550b34115f3d03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -134,6 +134,8 @@\n     private final LifecycleMetaData _lifeMeta = new LifecycleMetaData(this);\n     private File _srcFile = null;\n     private int _srcType = SRC_OTHER;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n     private String[] _comments = null;\n     private int _listIndex = -1;\n     private int _srcMode = MODE_META | MODE_MAPPING;\n@@ -2171,6 +2173,22 @@ public void setSource(File file, int srcType) {\n     public String getResourceName() {\n         return _type.getName();\n     }\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n \n     /**\n      * The source mode this metadata has been loaded under."},{"sha":"81ff89e965d4f7eb88a21078e947ba152a6c5509","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -40,6 +40,9 @@\n     private final int _type;\r\n \t\r\n     private File _srcFile = null;\r\n+    private int _lineNum = 0;  \r\n+    private int _colNum = 0;  \r\n+    \r\n     private int _srcType = SRC_OTHER;\r\n     private String[] _comments = null;\r\n     private int _listIndex = -1;\r\n@@ -105,6 +108,22 @@ public void setSource(File file, int srcType) {\n         _srcType = srcType;\r\n     }\r\n \r\n+    public int getLineNumber() {\r\n+        return _lineNum;\r\n+    }\r\n+\r\n+    public void setLineNumber(int lineNum) {\r\n+        _lineNum = lineNum;\r\n+    }\r\n+\r\n+    public int getColNumber() {\r\n+        return _colNum;\r\n+    }\r\n+\r\n+    public void setColNumber(int colNum) {\r\n+        _colNum = colNum;\r\n+    }\r\n+    \r\n     public String getResourceName() {\r\n         return _class.getName();\r\n     }\r"},{"sha":"9fe2390054558e6e27670c4c2c9739de0f846d3d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","status":"modified","additions":31,"deletions":9,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -25,6 +25,7 @@\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n \n /**\n@@ -37,6 +38,9 @@\n class ProxySetupStateManager\n     implements StateManager {\n \n+\tprivate static final Localizer _loc = Localizer\n+\t\t.forPackage(ProxySetupStateManager.class);\n+\n     private Object _object = null;\n \n     public void setProxyData(PersistenceCapable pc, ClassMetaData meta) {\n@@ -199,39 +203,57 @@ public void settingObjectField(PersistenceCapable pc, int i, Object o,\n     }\n \n     public void providedBooleanField(PersistenceCapable pc, int i, boolean b) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"boolean\"));\n     }\n \n     public void providedCharField(PersistenceCapable pc, int i, char c) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"char\"));\n     }\n \n     public void providedByteField(PersistenceCapable pc, int i, byte b) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"byte\"));\n     }\n \n     public void providedShortField(PersistenceCapable pc, int i, short s) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"short\"));\n     }\n \n     public void providedIntField(PersistenceCapable pc, int i, int i2) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"int\"));\n     }\n \n     public void providedLongField(PersistenceCapable pc, int i, long l) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"long\"));\n     }\n \n     public void providedFloatField(PersistenceCapable pc, int i, float f) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"float\"));\n     }\n \n     public void providedDoubleField(PersistenceCapable pc, int i, double d) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"double\"));\n     }\n \n     public void providedStringField(PersistenceCapable pc, int i, String s) {\n-        throw new InternalException();\n+        throw new InternalException(_loc.get(\n+\t\t\t\t\"unexpected_proxy_sm_attribute_type\", pc.getClass().getName(),\n+\t\t\t\t\"String\"));\n     }\n \n     public void providedObjectField(PersistenceCapable pc, int i, Object o) {"},{"sha":"948f144cb61266db5605ac08ee850052ead36b87","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -56,6 +56,9 @@\n     private List _hintKeys;\n     private List _hintVals;\n     private String _resultSetMappingName;\n+    private int _lineNum;  \n+    private int _colNum;  \n+\n     /**\n      * Construct with the given name.\n      */\n@@ -274,4 +277,20 @@ public void setSource(File file, Object scope, int srcType) {\n     public String getResourceName() {\n         return (_class == null) ? _name : _class.getName () + \":\" + _name;\n \t}\n+    \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n }"},{"sha":"d575c364b8e5616527bfd6e11a1338e5be1cf8ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -80,6 +80,8 @@\n     private File _source = null;\n     private Object _scope = null;\n     private int _srcType = SRC_OTHER;\n+    private int _lineNum = 0;  \n+    private int _colNum = 0;  \n     private String[] _comments = null;\n     private String _sequence = null;\n     private int _increment = -1;\n@@ -129,6 +131,22 @@ public void setSource(File file, Object scope, int srcType) {\n         _srcType = srcType;\n     }\n \n+    public int getLineNumber() {\n+        return _lineNum;\n+    }\n+\n+    public void setLineNumber(int lineNum) {\n+        _lineNum = lineNum;\n+    }\n+\n+    public int getColNumber() {\n+        return _colNum;\n+    }\n+\n+    public void setColNumber(int colNum) {\n+        _colNum = colNum;\n+    }\n+    \n     public String getResourceName() {\n         return _name;\n     }"},{"sha":"a02bf86a84ecc3bd67793c081dabfd2d2b16a8a2","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -129,7 +129,7 @@ MaxFetchDepth-displayorder: 50\n MaxFetchDepth-expert: true\n \n FetchGroups-name: Fetch groups to add to default fetch group\n-FetchGroups-desc: A comma-separated list of fetch group names that wll be \\\n+FetchGroups-desc: A comma-separated list of fetch group names that will be \\\n \tloaded by default when fetching data from the data store.\n FetchGroups-type: Optimization\n FetchGroups-cat: Fetching"},{"sha":"014e0aca1d83f02cf4df3dc635da0cadc4603f70","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -29,7 +29,7 @@ was-transaction-id-exception: Unable to determine identity of the current \\\n \tWebSphere managed transaction. Please ensure that your are running the \\\r\n \tapplication from within WebSphere Application Server (version 5.0.2 or \\ \r\n \tnewer).\r\n-was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n+was-reflection-exception: An error occurred reflecting WebSphere proprietary \\\r\n \tinterfaces. Please ensure that you are running the application from within \\\r\n \tWebSphere Application Server (version 5.0.2 or newer).\r\n was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\r"},{"sha":"d82698b08a8b9d08e2457606f0fb0ad8978f430c","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -78,7 +78,7 @@ enhance-adddefaultconst: The type \"{0}\" must have a no-args constructor. \\\n \tAdding a {1} no-args constructor.\n enhance-cloneable:The type \"{0}\" implements Cloneable but does not call \\\n \tsuper.clone ().  Adding protected super.clone () invocation.\n-enhance-uid-access: An IllegalAccessException occured when trying to \\\n+enhance-uid-access: An IllegalAccessException occurred when trying to \\\n \tobtain the serialVersionUID field for the class \"{0}\". This is a known \\\n \tbug in JDK 1.4+ when using a custom ClassLoader to enhance a \\\n \tclass that implements java.io.Serializable. If compatibility with \\\n@@ -91,7 +91,7 @@ pcdata-created: Dynamic PCData created: name=\"{0}\", for type=\"{1}\"\n factory-not-oidloader: Attempt to run the application id tool under metadata \\\n \tconfiguration that does not support it.  The application id tool can only \\\n \trun under certain metadata factory settings.\n-str-cons: The id type \"{0}\" specfied by persistent type \"{1}\" \\  \n+str-cons: The id type \"{0}\" specified by persistent type \"{1}\" \\  \n \tdoes not have a public {0}(String) or {0}(Class, String) constructor.\n appid-start: Generating an application id for type \"{0}\".\n appid-invalid: Type \"{0}\" does not have metadata, does not use application \\"},{"sha":"b44c422062c6094d9e2d1d2ba5d42fa941ff9631","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -30,7 +30,7 @@ cant-resolve-type: The entity \"{0}\" cannot be resolved; please ensure that \\\n not-identifer: The specified node (\"{0}\") is not a valid identifier.\n no-field: No field named \"{1}\" in class \"{0}\".\n unaccessible-field: The field named \"{1}\" in class \"{0}\" could not be accessed.\n-multi-children: Expression \"{0}\" does not allow mutliple children (\"{1}\").\n+multi-children: Expression \"{0}\" does not allow multiple children (\"{1}\").\n no-children: Expression \"{0}\" requires at least one child.\n unknown-comp: Unknown comparison operator \"{0}\".\n wrong-child-count: Wrong number of arguments to expression \\"},{"sha":"985d7de11dbaa70307fbd8eb0bbb374b467406f5","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":402,"deletions":402,"changes":804,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -1,402 +1,402 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-# http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.  \n-\n-cant-convert-result: There is no conversion between query projection type \\\n-\t\"{0}\" and result type \"{1}\".\n-unloaded-detached: Attempt to access an unloaded field of detached instance \\\n-\t\"{0}\".\n-meta-unknownid: Cannot manipulate identity of type \"{0}\": it''s identity type \\\n-\tis unknown.\n-new-abstract: Cannot create an instance of \"{0}\": abstract classes are not \\\n-    yet supported.\n-bad-new-query: Attempt to construct a query from an extent or class.  You must \\\n-\tpass a (possibly null) query string or template to the query factory \\\n-\tmethod when creating the query. \n-update-restrict: Detected attempt to modify field \"{0}\" with value strategy \\\n-\t\"restrict\".\n-reentrant-flush: Detected reentrant flush.  Make sure your flush-time instance \\\n-\tcallback methods or event listeners do not invoke any operations that \\\n-\trequire the in-progress flush to complete.\n-rolled-back: The transaction has been rolled back.  See the nested exceptions \\\n-\tfor details on the errors that occurred.\n-bad-lock-level: This lock manager does not recognize lock level \"{0}\".\n-pessimistic-mutate: You are attempting to directly mutate a persistent second \\\n-\tclass object (such as a collection or map field) that you obtained before \\\n-\tthe transaction began.  After beginning a datastore transaction, you \\\n-\tmust re-obtain any references to mutable second class objects from the \\\n-\towning persistent object.  Detected attmpt to mutate value of field \"{0}\" \\\n-\tin instance \"{1}\".  This instance may not be locked correctly.\n-not-derefed: Encountered unknown dependent instance \"{0}\".  This error is \\\n-\toften caused by either removing a dependent instance from one dependent \\\n-\tfield, but not other dependent fields that reference it, or by removing a \\\n-\tdependent instance from its owning field, flushing \\\n-\t(causing the unreferenced dependent instance to be deleted), and then \\\n-\ttrying to assign the deleted instance to another field before commit.  \\\n-\tThe instance cannot be un-deleted, resulting in an error.  Make sure not \\\n-\tto leave dangling dependent references to objects, and to reassign \\\n-\tdependent objects before flush so that OpenJPA does not think they are \\\n-\tunreferenced and therefore safe to delete.\n-init-null-pc: Attempt to initialize a state manager with a null \\\n-\tpersistence-capable instance for type \"{0}\".  This is often caused by \\\n-\tattempting to load an instance of an abstract class, or \\\n-\tneglecting to use a class indicator when the base persistence-capable \\\n-\tclass in an inheritance tree is abstract.\n-init-sm-pc: Attempt to initialize a state manager with an instance that is \\\n-\talready managed (\"{0}\").  You might be trying to persist this instance \\\n-\tin two threads at the same time.\n-bad-ds-oid: The type \"{0}\" declares datastore identity but the value \\\n-\tpassed to lookup of type \"{1}\" is not a OpenJPA id instance.\n-null-oids: Some of the object ids passed to getObjectsById were null.\n-marked-rollback: The transaction cannot be committed, because it was already \\\n-\tmarked for rollback only.  The transaction will be rolled back instead. \\\n-    The cause of the rollback-only status is reported in the embedded stack.\n-refresh-flushed: You cannot refresh an instance that has been flushed to the \\\n-\tdata store.\n-pc-loader-different: Attempt to cast instance \"{0}\" to PersistenceCapable failed. \\\n-    The object implemented org.apache.openjpa.enhance.PersistenceCapable, \\\n-    but the instance of that interface was loaded by two different ClassLoaders: \\\n-    \"{1}\" and \"{2}\".\n-pc-cast: Attempt to cast instance \"{0}\" to PersistenceCapable failed.  Ensure \\\n-\tthat it has been enhanced.\n-del-instance: The instance of type \"{0}\" with oid \"{1}\" no longer exists in \\\n-\tthe data store.  This may mean that you deleted the instance in a separate \\\n-\ttransaction, but this context still has a cached version.\n-no-broker-class: The specified type \"{0}\" could not be loaded. Please ensure \\\n-\tthat the class exists in the project class path.\n-bad-embed: Attempt to set an embedded value for unembeddable field \"{0}\". \\\n-\tPlease report this error to OpenJPA support.\n-embed-ref: You are attempting to access an embedded object reference \\\n-\tthat was obtained before the last transaction status change. After \\\n-\ttransactions begin and end, all references to embedded objects become \\\n-\tinvalid; you have to re-acquire the reference from the owning persistent \\\n-\tobject.\n-deleted: Operation attempted on a deleted instance.\n-dirty: Illegal operation attempted on a dirty instance: dirty objects cannot \\\n-\tbe evicted or made transient or non-transactional.\n-nested-exceps: This operation failed for some instances.  See the nested \\\n-\texceptions array for details.\n-new: Illegal operation attempted on a newly persisted instance: new objects \\\n-\tcannot be evicted or made transient or non-transactional.\n-transient: Illegal operation attempted on a transient instance.\n-not-active: Can only perform operation while a transaction is active.\n-trans-active: The \"{0}\" transaction property cannot be set during an \\\n-\tactive transaction.\n-active: This operation cannot be performed while a Transaction is active.\n-closed: The context has been closed.  The stack trace at which the \\\n-\tcontext was closed is held in the embedded exception.\n-closed-notrace: The context has been closed.  The stack trace at which the \\\n-\tcontext was closed is available if Runtime=TRACE logging is enabled.\n-closed-factory: The factory has been closed.  The stack trace at \\\n-\twhich the factory was closed is held in the embedded exception.\n-closed-factory-notrace: The factory has been closed.  The stack trace at \\\n-\twhich the factory was closed is available if Runtime=TRACE logging is \\\n-\tenabled.\n-non-trans-read: To perform reads on persistent data outside of a transaction, \\\n-\tthe \"NontransactionalRead\" property must be set on the Transaction.\n-non-trans-write: To perform writes on persistent data outside of a \\\n-\ttransaction, the \"NontransactionalWrite\" property must be set to true.\n-write-operation: To perform this operation, it must be written within a transaction, \\\n-\tor your settings must allow nontransactional writes and must not detach \\\n-\tall nontransactional reads.\n-not-managed: The given instance \"{0}\" is not managed by this context.\n-trans-not-managed: This broker is not configured to use managed transactions.\n-bad-detached-op: You cannot perform operation {0} on detached object \"{1}\". \\\n-\tThis operation only applies to managed objects.\n-persist-detached: Attempt to persist detached object \"{0}\".  If this is a new \\\n-  instance, make sure any version and/or auto-generated primary key fields are \\\n-  null/default when persisting.\n-null-value: The field \"{0}\" of instance \"{1}\" contained a null value; \\\n-\tthe metadata for this field specifies that nulls are illegal.\n-change-identity: Attempt to change a primary key field of an instance that \\\n-\talready has a final object id.  Only new, unflushed instances whose id you \\\n-\thave not retrieved can have their primary keys changed.\n-managed-oid: You cannot assign managed object \"{0}\" to the primary key field \\\n-\tof \"{1}\".  Embedded primary key values must be transient objects.\n-changed-oid: You have modified the object id field of \"{2}\".  Its old value \\\n-\twas \"{0}\", and its new value is \"{1}\".  Object id fields are immutable \\\n-\tonce the object id of the instance has been assigned. \n-cache-exists: An object of type \"{0}\" with oid \"{1}\" already exists in this \\\n-\tcontext; another cannot be persisted.\n-null-trans: Attempt to commit a null javax.transaction.Transaction.  Some \\\n-\tapplication servers set the transaction to null if a rollback occurs.\n-end-trans-error: An exception occurred while ending the transaction.  This \\\n-\texception will be re-thrown.\n-not-bound: The file named \"{0}\" could not be found.\n-naming-exception: A NamingException was thrown while obtaining the \\\n-\tfactory at \"{0}\" from JNDI.\n-attach-deleted: The object \"{0}\" with id \"{1}\" has been deleted and \\\n-\tcannot be attached.\n-not-detachable: The class \"{0}\" does not declare the \"detachable\" metadata \\\n-\textension, so cannot be detached.\n-not-copyable: Attempt to copy field \"{0}\" failed.  The field is \\\n-\tnot copyable.  This can occur with custom SCO types. Only standard or \\\n-    immutable SCO types can be attached and detached.\n-no-detach-object-id: Cannot access the detached object id of class \"{0}\". \\\n-\tEnsure that the class has the \"detachable\" metadata extension, and \\\n-\tthe the class has been re-enhanced.\n-attach-version-del: Attempted to attach deleted instance type \"{0}\" with oid \\\n-\t\"{1}\".  If the instance is new, the version field should be left to its \\\n-\tdefault value.\n-attach-wrongclass: Attempted to attach instance \"{0}\" of type \"{1}\", but this \\\n-\tinstance is already in the datastore as type \"{2}\".\n-sjvm-acquired-lock: Acquired an exclusive lock \"{0}\" on oid \"{1}\".\n-sjvm-released-lock: Released lock \"{0}\".\n-conn-not-supported: This data store cannot return connections.\n-incremental-flush-not-supported: This data store does not support incremental \\\n-\tflushing.  If you got this error while performing a query, make sure that \\\n-\tyou have not set the FlushBeforeQueries option to true, either by \\\n-\tsetting that option in your configuration file, or by programmatically \\\n-\tsetting the current FetchConfiguration''s FlushBeforeQueries property \\\n-\tto QueryFlushModes.FLUSH_TRUE.\n-nontrans-read-not-supported: This data store does not support nontransactional \\\n-\treads.  Set the NontransactionalRead property to false.\n-optimistic-not-supported: This datastore does not support optimistic \\\n-\ttransactions.  Set the Optimistic property to false.\n-restore-unset: The RestoreValues option is off, so initial values are \\\n-\tnot available. Turn on RestoreValues to be able to obtain initial \\\n-\tvalues.\n-mutable-restore-unset: The RestoreValues option is not set to \"all\", \\\n-\tinitial values of mutable fields are not available. Set RestoreValues to \\\n-\t\"all\" in your properties to be able to obtain initial mutable values.\n-initial-unloaded: OpenJPA cannot provide the initial value for field \"{0}\" \\\n-\tbecause the field was never loaded before being changed.\n-dup-oid-assign: Attempt to assign id \"{0}\" to new instance \"{1}\" failed; \\\n-\tthere is already an object in the L1 cache with this id. \\\n-\tYou must delete this object (in a previous transaction or the current one) \\\n-\tbefore reusing its id.  This error can also occur when a horizontally \\\n-\tor vertically mapped classes uses auto-increment application identity and \\\n-\tdoes not use a hierarchy of application identity classes.\n-dup-load: Cannot load object with id \"{0}\".  Instance \"{1}\" with the same id \\\n-\talready exists in the L1 cache.  This can occur when you \\\n-\tassign an existing id to a new instance, and before flushing attempt to \\\n-\tload the existing instance for that id.\n-bad-id-value: The given value \"{0}\" cannot be converted into an identity \\\n-\tfor \"{2}\".  The value is the wrong type ({1}).\n-factory-init: Starting OpenJPA {0}\n-factory-properties: Properties: {0}\n-inverse-consistency: An inverse inconsistency in the object featureSelection was \\\n-\tdetected while flushing the field \"{0}\" of the instance with id \"{1}\" \\\n-\tin context \"{2}\".\n-no-brokerfactory: You did not name the factory class with the required \\\n-\tproperty openjpa.BrokerFactory.  Normally this property defaults \\\n-    appropriately; have you forgotten to include all the OpenJPA jars in your \\\n-    classpath?\n-brokerfactory-excep: There was an error when invoking the static \\\n-\tgetInstance method on the named factory class \"{0}\".  See the \\\n-\tnested exception for details.\n-new-brokerfactory-excep: There was an error when invoking the static \\\n-\tnewInstance method on the named factory class \"{0}\".  See the \\\n-\tnested exception for details.\n-bad-brokerfactory: Could not invoke the static getInstance method on the \\\n-\tnamed factory class \"{0}\".\n-bad-new-brokerfactory: Could not invoke the static newInstance method on the \\\n-\tnamed factory class \"{0}\".\n-bad-brokerfactory-class: The named BrokerFactory \"{0}\" is not valid.\n-instantiate-abstract: Cannot instantiate abstract class of type \"{0}\" with \\\n-\tobject id \"{1}\"; this may indicate that the inheritance discriminator \\\n-\tfor the class is not configured correctly.\n-nontrans-proxied: You cannot make a property access object created with \"new\" \\\n-\tnontransactional.\n-no-field: Field \"{0}\" is not declared in \"{1}\", or is not managed.\n-no-field-index: \"{0}\" is not the index of any managed field in \"{1}\".\n-cant-cascade-persist: Encountered unmanaged object in persistent field \\\n-\t\"{0}\" during flush.  However, this field does not \\\n-\tallow cascade persist. Set the cascade attribute for this field to \\\n-    CascadeType.PERSIST or CascadeType.ALL (JPA annotations) or \\\n-    \"persist\" or \"all\" (JPA orm.xml), or enable cascade-persist globally, \\\n-    or manually persist the related field value prior to flushing. \\\n-\tYou cannot flush unmanaged objects or graphs that have persistent \\\n-    associations to unmanaged objects.\n-cant-cascade-attach: Encountered new object in persistent field \\\n-\t\"{0}\" during attach.  However, this field does not \\\n-\tallow cascade attach. Set the cascade attribute for this field to \\\n-    CascadeType.MERGE or CascadeType.ALL (JPA annotations) or \\\n-    \"merge\" or \"all\" (JPA orm.xml). \\\n-    You cannot attach a reference to a new object without cascading.\n-ref-to-deleted: Encountered deleted object \"{0}\" in persistent field \\\n-\t\"{1}\" of managed object \"{2}\" during flush.\n-no-version-field: Encountered object \"{0}\" without a version field during \\\n-\tattach.  In order to attach an object, it must either be enhanced or must \\\n-\thave a version field.\n-inmem-agg-proj-var: Queries with aggregates or projections using variables \\\n-\tcurrently cannot be executed in-memory.  Either set IgnoreCache to true, \\\n-\tset the openjpa.FlushBeforeQueries property to true, or execute the query \\\n-\tbefore changing any instances in the transaction.  The offending query was \\\n-\ton type \"{0}\" with filter \"{1}\".\n-merged-order-with-result: This query on candidate type \"{0}\" with filter \"{1}\" \\\n-\tinvolves combining the results of multiple queries in memory. \\\n-\tYou have chosen to order the results on \"{2}\", but you have not selected \\\n-\tthis data in your setResult() clause.  Please include this ordering data \\\n-\tin setResult() so that OpenJPA can extract it for in-memory ordering.\n-bad-grouping: Your query on type \"{0}\" with filter \"{1}\" is invalid.  Your \\\n-    select and having clauses must only include aggregates or values that also \\\n-    appear in your grouping clause.\n-query-nosupport: The \"{0}\" query type does not support this operation.\n-query-unmapped: You cannot query unmapped type \"{0}\".\n-range-too-big: The range of the query is too big. Start index: \"{0}\", end \\\n-\tindex: \"{1}\". The range must be less than Integer.MAX_VALUE.\n-invalid-range: The query range from {0} to {1} is not valid.\n-no-impls: Unable to execute a query on type \"{0}\".  This class or interface \\\n-\tis not mapped, and does not have any mapped implementors.\n-bad-param-name: The parameter name or position \"{0}\" passed to \\\n-\texecute() is not valid.  All map keys must be a declared parameter \\\n-\tname or a number matching the parameter position. Native queries only \\\n-\tallow the use of positional parameters.\n-force-in-mem: This query on type \"{0}\" must load the entire candidate class \\\n-\textent and evaluate the query in-memory.  This may be very slow.  The \\\n-\tquery must be executed in memory because OpenJPA is configured with \\\n-\tIgnoreCache=false and FlushBeforeQueries=false and \\\n-\tthere are dirty instances that may affect the query''s outcome in the \\\n-\tcache.\n-cant-exec-inmem: Queries of this type (\"{0}\") cannot be executed in-memory. \\\n-\tEither set IgnoreCache to true, set the openjpa.FlushBeforeQueries \\\n-\tproperty to true, or execute the query before changing any instances in \\\n-\tthe transaction.\n-executing-query: Executing query: {0}\n-executing-query-with-params: Executing query: [{0}] with parameters: {1}\n-not-unique: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n-\tconfigured to have a unique result, but more than one instance matched \\\n-\tthe query.\n-no-result: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n-\tconfigured to have a unique result, but no instance matched \\\n-\tthe query.\n-serialized: Queries that have been serialized do not support this operation.\n-read-only: Attempt to modify a read-only query object.\n-no-class: A candidate Class must be specified before executing a query.\n-no-modify-resultclass: A query that declares a result class cannot be used \\\n-\tto perform bulk updates.\n-no-modify-unique: A query that declares unique results cannot be used \\\n-\tto perform bulk updates.\n-no-modify-range: A query that declares a result range cannot be used \\\n-\tto perform bulk updates.\n-unbound-param: Cannot execute query; the declared parameter \"{0}\" was \\\n-\tnot given a value.\n-unbound-params: Cannot execute query; some declared parameters were not given \\\n-\tvalues.  You must supply a value for each of the following parameters, \\\n-\tin the given order: {0}\n-extra-params: More parameters were passed to execute() than were declared: \\\n-\t{1} parameters were specified for query execution, but only {0} \\\n-\tparameters were declared in the query.\n-null-primitive-param: Parameter \"{0}\" was declared with a primtive type, but \\\n-\thas been given a null value.\n-merged-aggregate: This query on candidate type \"{0}\" with filter \"{1}\" \\\n-\tinvolves combining the results of multiple sub-queries.  However, because \\\n-\tthis query is for aggregate data, OpenJPA cannot combine the sub-query \\\n-\taggregates into correct final values.\n-bad-dec: The {1} declaration \"{0}\" is \\\n-\tnot valid. Variables and imports must be delimited with \";\".  Parameters \\\n-\tand orderings must be delimited with \",\".  Imports require the \"import\" \\\n-\tkeyword, and orderings require the \"ascending\" or \"descending\" keyword.\n-mod-bigdecimal: You cannot use the modulo operator (%) on numbers of type \\\n-\tBigDecimal.\n-cant-convert: Cannot convert object \"{0}\" of type \"{1}\" into an instance of \\\n-\t\"{2}\".\n-bad-method-class: You set the method name of this openjpa.MethodQL query to \\\n-\t\"{1}\", but class \"{0}\" is not a valid class name.  Make sure to fully \\\n-\tqualify the class name or to import its package into this query if the \\\n-\tclass is not in the query candidate class'' package. \n-method-not-static: Method \"{0}\" named in the MethodQL query must be static.\n-method-return-type-invalid: Method \"{0}\" named in the MethodQL query must \\\n-    have a return type that is assignable from ResultObjectProvider. Return \\\n-    type is: {1}.\n-no-method: You must set the query filter to the name of the method to execute \\\n-\tfor this MethodQL query instance.\n-method-error: There was an error invoking method \"{0}\" with arguments \"{1}\".\n-bad-param-type: The type \"{0}\" as used in the parameter declarations \\\n-\tcould not be found in the imports.\n-cant-set: Result type \"{0}\" does not have any public fields or setter methods \\\n-\tfor the projection or aggregate result element \"{1}\", nor does it have a \\\n-\tgeneric put(Object,Object) method that can be used, nor does it have a \\\n-\tpublic constructor that takes the types {2}.\n-pack-err: There was an error packing the projection and/or aggregate results \\\n-\tof the query into result type \"{0}\".  See the nested Throwable exception \\\n-\tfor details.\n-pack-instantiation-err: There was an error creating an instance of type \"{0}\" \\\n-\twhen packing the projection and/or aggregate results of the query. Ensure \\\n-\tthat you have defined a public no-args constructor in \"{0}\".\n-bad-inmem-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Object, \\\n-\tMap, FetchConfiguration)\" is not declared in type \"{1}\". \\\n-\tCheck the method name supplied in your MethodQL query filter.  \\\n-\tOpenJPA is attempting to execute this query in-memory; if you implemented \\\n-    the datastore method instead (a method with the same signature but without \\\n-    the Object argument) and want this query to execute in the datastore, \\\n-    either create the query before modifying objects in the current transaction, \\\n-\tset IgnoreCache to true, or set the openjpa.FlushBeforeQueries property to \\\n-\ttrue.\n-bad-datastore-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Map, \\\n-\tFetchConfiguration)\" is not declared in type \"{1}\".  Check \\\n-\tthe method name supplied in your MethodQL query filter.  OpenJPA is \\\n-\tattempting to execute this query against the datastore; if you implemented \\\n-\tthe in-memory method instead (a method with the same signature but with an \\\n-\tObject argument) and want this query to execute in-memory, supplly a \\\n-\tCollection of candidates to filter.\n-only-update-constants: Bulk update queries when executed in memory \\\n-\tmay only update to constant values.\n-only-range-constants: Range values must be numeric constants.  Illegal query: \\\n-    {0}\n-no-savepoint-copy: Unable to copy field \"{0}\" for savepoint.\n-savepoint-exists: A savepoint with the name \"{0}\" already exists.  \\\n-\tEach savepoint name must be unique.\n-no-lastsavepoint: Cannot rollback/release last savepoint as no savepoint \\\n-\thas been set.\n-no-savepoint: You have not set a savepoint with the name \"{0}\"\n-savepoint-init: This savepoint has already been initialized.\n-savepoint-flush-not-supported: The configured SavepointManager does not \\\n-\tsupport incremental flushing when a savepoint has been set.  You must \\\n-\trelease your savepoints before flushing.\n-callback-err: Errors occured processing listener callbacks.  See the nested \\\n-    exceptions for details.\n-bad-agg-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted into \\\n-\tan aggregate listener.\n-bad-filter-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted \\\n-\tinto a filter listener.\n-bad-setter-hint-arg: In query hint \"{0}\", cannot convert hint value \"{1}\" to \\\n-    type \"{2}\".\n-detach-val-mismatch: The instance \"{0}\" is managed by another context and \\\n-\tcannot be inspected for field values.\n-detach-val-badsm: The instance \"{0}\" has an unknown state manager which \\\n-\tprevents field inspection.\n-null-oid: Cannot perform find using null object id.\n-illegal-op-in-prestore: This operation is illegal when called during \\\n-\ttransaction completion.\n-no-expressions: The query cannot be executed because it has no \\\n-\tvalid expressions.\n-null-fg: Attempt to add null/empty fetch group name to fetch configuration.\n-null-field: Attempt to add null/empty field name to fetch configuration.\n-container-projection: Query projections cannot include array, collection, or \\\n-    map fields.  Invalid query: \"{0}\"\n-existing-value-override-excep: The generated value processing detected an \\\n-existing value assigned to this field: {0}.  This existing value was either \\\n-provided via an initializer or by calling the setter method.  You either need \\\n-to remove the @GeneratedValue annotation or modify the code to remove the \\\n-initializer processing.\n-invalid-tran-status: The transaction was not in a valid state ({0}) to \\\n-accept the \"{1}\" method invocation.  Processing will continue.\n-multi-threaded-access: Multiple concurrent threads attempted to access a \\\n-    single broker. By default brokers are not thread safe; if you require \\\n-    and/or intend a broker to be accessed by more than one thread, set the \\\n-    openjpa.Multithreaded property to true to override the default behavior.\n-no-saved-fields: No state snapshot is available for instance of type \"{0}\", \\\n-    but this instance uses state-comparison for dirty detection.\n-cant-serialize-flushed-broker: Serialization not allowed once a broker has \\\n-    been flushed.\n-cant-serialize-pessimistic-broker: Serialization not allowed for brokers with \\\n-    an active datastore (pessimistic) transaction.\n-cant-serialize-connected-broker: Serialization not allowed for brokers with \\\n-    an active connection to the database.\n-no-interface-metadata: No metadata was found for managed interface {0}.\n-fetch-configuration-stack-empty: Fetch configuration stack is empty.\n+# Licensed to the Apache Software Foundation (ASF) under one\r\n+# or more contributor license agreements.  See the NOTICE file\r\n+# distributed with this work for additional information\r\n+# regarding copyright ownership.  The ASF licenses this file\r\n+# to you under the Apache License, Version 2.0 (the\r\n+# \"License\"); you may not use this file except in compliance\r\n+# with the License.  You may obtain a copy of the License at\r\n+#\r\n+# http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing,\r\n+# software distributed under the License is distributed on an\r\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+# KIND, either express or implied.  See the License for the\r\n+# specific language governing permissions and limitations\r\n+# under the License.  \r\n+\r\n+cant-convert-result: There is no conversion between query projection type \\\r\n+\t\"{0}\" and result type \"{1}\".\r\n+unloaded-detached: Attempt to access an unloaded field of detached instance \\\r\n+\t\"{0}\".\r\n+meta-unknownid: Cannot manipulate identity of type \"{0}\": it''s identity type \\\r\n+\tis unknown.\r\n+new-abstract: Cannot create an instance of \"{0}\": abstract classes are not \\\r\n+    yet supported.\r\n+bad-new-query: Attempt to construct a query from an extent or class.  You must \\\r\n+\tpass a (possibly null) query string or template to the query factory \\\r\n+\tmethod when creating the query. \r\n+update-restrict: Detected attempt to modify field \"{0}\" with value strategy \\\r\n+\t\"restrict\".\r\n+reentrant-flush: Detected reentrant flush.  Make sure your flush-time instance \\\r\n+\tcallback methods or event listeners do not invoke any operations that \\\r\n+\trequire the in-progress flush to complete.\r\n+rolled-back: The transaction has been rolled back.  See the nested exceptions \\\r\n+\tfor details on the errors that occurred.\r\n+bad-lock-level: This lock manager does not recognize lock level \"{0}\".\r\n+pessimistic-mutate: You are attempting to directly mutate a persistent second \\\r\n+\tclass object (such as a collection or map field) that you obtained before \\\r\n+\tthe transaction began.  After beginning a datastore transaction, you \\\r\n+\tmust re-obtain any references to mutable second class objects from the \\\r\n+\towning persistent object.  Detected attempt to mutate value of field \"{0}\" \\\r\n+\tin instance \"{1}\".  This instance may not be locked correctly.\r\n+not-derefed: Encountered unknown dependent instance \"{0}\".  This error is \\\r\n+\toften caused by either removing a dependent instance from one dependent \\\r\n+\tfield, but not other dependent fields that reference it, or by removing a \\\r\n+\tdependent instance from its owning field, flushing \\\r\n+\t(causing the unreferenced dependent instance to be deleted), and then \\\r\n+\ttrying to assign the deleted instance to another field before commit.  \\\r\n+\tThe instance cannot be un-deleted, resulting in an error.  Make sure not \\\r\n+\tto leave dangling dependent references to objects, and to reassign \\\r\n+\tdependent objects before flush so that OpenJPA does not think they are \\\r\n+\tunreferenced and therefore safe to delete.\r\n+init-null-pc: Attempt to initialize a state manager with a null \\\r\n+\tpersistence-capable instance for type \"{0}\".  This is often caused by \\\r\n+\tattempting to load an instance of an abstract class, or \\\r\n+\tneglecting to use a class indicator when the base persistence-capable \\\r\n+\tclass in an inheritance tree is abstract.\r\n+init-sm-pc: Attempt to initialize a state manager with an instance that is \\\r\n+\talready managed (\"{0}\").  You might be trying to persist this instance \\\r\n+\tin two threads at the same time.\r\n+bad-ds-oid: The type \"{0}\" declares datastore identity but the value \\\r\n+\tpassed to lookup of type \"{1}\" is not a OpenJPA id instance.\r\n+null-oids: Some of the object ids passed to getObjectsById were null.\r\n+marked-rollback: The transaction cannot be committed, because it was already \\\r\n+\tmarked for rollback only.  The transaction will be rolled back instead. \\\r\n+    The cause of the rollback-only status is reported in the embedded stack.\r\n+refresh-flushed: You cannot refresh an instance that has been flushed to the \\\r\n+\tdata store.\r\n+pc-loader-different: Attempt to cast instance \"{0}\" to PersistenceCapable failed. \\\r\n+    The object implemented org.apache.openjpa.enhance.PersistenceCapable, \\\r\n+    but the instance of that interface was loaded by two different ClassLoaders: \\\r\n+    \"{1}\" and \"{2}\".\r\n+pc-cast: Attempt to cast instance \"{0}\" to PersistenceCapable failed.  Ensure \\\r\n+\tthat it has been enhanced.\r\n+del-instance: The instance of type \"{0}\" with oid \"{1}\" no longer exists in \\\r\n+\tthe data store.  This may mean that you deleted the instance in a separate \\\r\n+\ttransaction, but this context still has a cached version.\r\n+no-broker-class: The specified type \"{0}\" could not be loaded. Please ensure \\\r\n+\tthat the class exists in the project class path.\r\n+bad-embed: Attempt to set an embedded value for unembeddable field \"{0}\". \\\r\n+\tPlease report this error to OpenJPA support.\r\n+embed-ref: You are attempting to access an embedded object reference \\\r\n+\tthat was obtained before the last transaction status change. After \\\r\n+\ttransactions begin and end, all references to embedded objects become \\\r\n+\tinvalid; you have to re-acquire the reference from the owning persistent \\\r\n+\tobject.\r\n+deleted: Operation attempted on a deleted instance.\r\n+dirty: Illegal operation attempted on a dirty instance: dirty objects cannot \\\r\n+\tbe evicted or made transient or non-transactional.\r\n+nested-exceps: This operation failed for some instances.  See the nested \\\r\n+\texceptions array for details.\r\n+new: Illegal operation attempted on a newly persisted instance: new objects \\\r\n+\tcannot be evicted or made transient or non-transactional.\r\n+transient: Illegal operation attempted on a transient instance.\r\n+not-active: Can only perform operation while a transaction is active.\r\n+trans-active: The \"{0}\" transaction property cannot be set during an \\\r\n+\tactive transaction.\r\n+active: This operation cannot be performed while a Transaction is active.\r\n+closed: The context has been closed.  The stack trace at which the \\\r\n+\tcontext was closed is held in the embedded exception.\r\n+closed-notrace: The context has been closed.  The stack trace at which the \\\r\n+\tcontext was closed is available if Runtime=TRACE logging is enabled.\r\n+closed-factory: The factory has been closed.  The stack trace at \\\r\n+\twhich the factory was closed is held in the embedded exception.\r\n+closed-factory-notrace: The factory has been closed.  The stack trace at \\\r\n+\twhich the factory was closed is available if Runtime=TRACE logging is \\\r\n+\tenabled.\r\n+non-trans-read: To perform reads on persistent data outside of a transaction, \\\r\n+\tthe \"NontransactionalRead\" property must be set on the Transaction.\r\n+non-trans-write: To perform writes on persistent data outside of a \\\r\n+\ttransaction, the \"NontransactionalWrite\" property must be set to true.\r\n+write-operation: To perform this operation, it must be written within a transaction, \\\r\n+\tor your settings must allow nontransactional writes and must not detach \\\r\n+\tall nontransactional reads.\r\n+not-managed: The given instance \"{0}\" is not managed by this context.\r\n+trans-not-managed: This broker is not configured to use managed transactions.\r\n+bad-detached-op: You cannot perform operation {0} on detached object \"{1}\". \\\r\n+\tThis operation only applies to managed objects.\r\n+persist-detached: Attempt to persist detached object \"{0}\".  If this is a new \\\r\n+  instance, make sure any version and/or auto-generated primary key fields are \\\r\n+  null/default when persisting.\r\n+null-value: The field \"{0}\" of instance \"{1}\" contained a null value; \\\r\n+\tthe metadata for this field specifies that nulls are illegal.\r\n+change-identity: Attempt to change a primary key field of an instance that \\\r\n+\talready has a final object id.  Only new, unflushed instances whose id you \\\r\n+\thave not retrieved can have their primary keys changed.\r\n+managed-oid: You cannot assign managed object \"{0}\" to the primary key field \\\r\n+\tof \"{1}\".  Embedded primary key values must be transient objects.\r\n+changed-oid: You have modified the object id field of \"{2}\".  Its old value \\\r\n+\twas \"{0}\", and its new value is \"{1}\".  Object id fields are immutable \\\r\n+\tonce the object id of the instance has been assigned. \r\n+cache-exists: An object of type \"{0}\" with oid \"{1}\" already exists in this \\\r\n+\tcontext; another cannot be persisted.\r\n+null-trans: Attempt to commit a null javax.transaction.Transaction.  Some \\\r\n+\tapplication servers set the transaction to null if a rollback occurs.\r\n+end-trans-error: An exception occurred while ending the transaction.  This \\\r\n+\texception will be re-thrown.\r\n+not-bound: The file named \"{0}\" could not be found.\r\n+naming-exception: A NamingException was thrown while obtaining the \\\r\n+\tfactory at \"{0}\" from JNDI.\r\n+attach-deleted: The object \"{0}\" with id \"{1}\" has been deleted and \\\r\n+\tcannot be attached.\r\n+not-detachable: The class \"{0}\" does not declare the \"detachable\" metadata \\\r\n+\textension, so cannot be detached.\r\n+not-copyable: Attempt to copy field \"{0}\" failed.  The field is \\\r\n+\tnot copyable.  This can occur with custom SCO types. Only standard or \\\r\n+    immutable SCO types can be attached and detached.\r\n+no-detach-object-id: Cannot access the detached object id of class \"{0}\". \\\r\n+\tEnsure that the class has the \"detachable\" metadata extension, and \\\r\n+\tthe the class has been re-enhanced.\r\n+attach-version-del: Attempted to attach deleted instance type \"{0}\" with oid \\\r\n+\t\"{1}\".  If the instance is new, the version field should be left to its \\\r\n+\tdefault value.\r\n+attach-wrongclass: Attempted to attach instance \"{0}\" of type \"{1}\", but this \\\r\n+\tinstance is already in the datastore as type \"{2}\".\r\n+sjvm-acquired-lock: Acquired an exclusive lock \"{0}\" on oid \"{1}\".\r\n+sjvm-released-lock: Released lock \"{0}\".\r\n+conn-not-supported: This data store cannot return connections.\r\n+incremental-flush-not-supported: This data store does not support incremental \\\r\n+\tflushing.  If you got this error while performing a query, make sure that \\\r\n+\tyou have not set the FlushBeforeQueries option to true, either by \\\r\n+\tsetting that option in your configuration file, or by programmatically \\\r\n+\tsetting the current FetchConfiguration''s FlushBeforeQueries property \\\r\n+\tto QueryFlushModes.FLUSH_TRUE.\r\n+nontrans-read-not-supported: This data store does not support nontransactional \\\r\n+\treads.  Set the NontransactionalRead property to false.\r\n+optimistic-not-supported: This datastore does not support optimistic \\\r\n+\ttransactions.  Set the Optimistic property to false.\r\n+restore-unset: The RestoreValues option is off, so initial values are \\\r\n+\tnot available. Turn on RestoreValues to be able to obtain initial \\\r\n+\tvalues.\r\n+mutable-restore-unset: The RestoreValues option is not set to \"all\", \\\r\n+\tinitial values of mutable fields are not available. Set RestoreValues to \\\r\n+\t\"all\" in your properties to be able to obtain initial mutable values.\r\n+initial-unloaded: OpenJPA cannot provide the initial value for field \"{0}\" \\\r\n+\tbecause the field was never loaded before being changed.\r\n+dup-oid-assign: Attempt to assign id \"{0}\" to new instance \"{1}\" failed; \\\r\n+\tthere is already an object in the L1 cache with this id. \\\r\n+\tYou must delete this object (in a previous transaction or the current one) \\\r\n+\tbefore reusing its id.  This error can also occur when a horizontally \\\r\n+\tor vertically mapped classes uses auto-increment application identity and \\\r\n+\tdoes not use a hierarchy of application identity classes.\r\n+dup-load: Cannot load object with id \"{0}\".  Instance \"{1}\" with the same id \\\r\n+\talready exists in the L1 cache.  This can occur when you \\\r\n+\tassign an existing id to a new instance, and before flushing attempt to \\\r\n+\tload the existing instance for that id.\r\n+bad-id-value: The given value \"{0}\" cannot be converted into an identity \\\r\n+\tfor \"{2}\".  The value is the wrong type ({1}).\r\n+factory-init: Starting OpenJPA {0}\r\n+factory-properties: Properties: {0}\r\n+inverse-consistency: An inverse inconsistency in the object featureSelection was \\\r\n+\tdetected while flushing the field \"{0}\" of the instance with id \"{1}\" \\\r\n+\tin context \"{2}\".\r\n+no-brokerfactory: You did not name the factory class with the required \\\r\n+\tproperty openjpa.BrokerFactory.  Normally this property defaults \\\r\n+    appropriately; have you forgotten to include all the OpenJPA jars in your \\\r\n+    classpath?\r\n+brokerfactory-excep: There was an error when invoking the static \\\r\n+\tgetInstance method on the named factory class \"{0}\".  See the \\\r\n+\tnested exception for details.\r\n+new-brokerfactory-excep: There was an error when invoking the static \\\r\n+\tnewInstance method on the named factory class \"{0}\".  See the \\\r\n+\tnested exception for details.\r\n+bad-brokerfactory: Could not invoke the static getInstance method on the \\\r\n+\tnamed factory class \"{0}\".\r\n+bad-new-brokerfactory: Could not invoke the static newInstance method on the \\\r\n+\tnamed factory class \"{0}\".\r\n+bad-brokerfactory-class: The named BrokerFactory \"{0}\" is not valid.\r\n+instantiate-abstract: Cannot instantiate abstract class of type \"{0}\" with \\\r\n+\tobject id \"{1}\"; this may indicate that the inheritance discriminator \\\r\n+\tfor the class is not configured correctly.\r\n+nontrans-proxied: You cannot make a property access object created with \"new\" \\\r\n+\tnontransactional.\r\n+no-field: Field \"{0}\" is not declared in \"{1}\", or is not managed.\r\n+no-field-index: \"{0}\" is not the index of any managed field in \"{1}\".\r\n+cant-cascade-persist: Encountered unmanaged object in persistent field \\\r\n+\t\"{0}\" during flush.  However, this field does not \\\r\n+\tallow cascade persist. Set the cascade attribute for this field to \\\r\n+    CascadeType.PERSIST or CascadeType.ALL (JPA annotations) or \\\r\n+    \"persist\" or \"all\" (JPA orm.xml), or enable cascade-persist globally, \\\r\n+    or manually persist the related field value prior to flushing. \\\r\n+\tYou cannot flush unmanaged objects or graphs that have persistent \\\r\n+    associations to unmanaged objects.\r\n+cant-cascade-attach: Encountered new object in persistent field \\\r\n+\t\"{0}\" during attach.  However, this field does not \\\r\n+\tallow cascade attach. Set the cascade attribute for this field to \\\r\n+    CascadeType.MERGE or CascadeType.ALL (JPA annotations) or \\\r\n+    \"merge\" or \"all\" (JPA orm.xml). \\\r\n+    You cannot attach a reference to a new object without cascading.\r\n+ref-to-deleted: Encountered deleted object \"{0}\" in persistent field \\\r\n+\t\"{1}\" of managed object \"{2}\" during flush.\r\n+no-version-field: Encountered object \"{0}\" without a version field during \\\r\n+\tattach.  In order to attach an object, it must either be enhanced or must \\\r\n+\thave a version field.\r\n+inmem-agg-proj-var: Queries with aggregates or projections using variables \\\r\n+\tcurrently cannot be executed in-memory.  Either set IgnoreCache to true, \\\r\n+\tset the openjpa.FlushBeforeQueries property to true, or execute the query \\\r\n+\tbefore changing any instances in the transaction.  The offending query was \\\r\n+\ton type \"{0}\" with filter \"{1}\".\r\n+merged-order-with-result: This query on candidate type \"{0}\" with filter \"{1}\" \\\r\n+\tinvolves combining the results of multiple queries in memory. \\\r\n+\tYou have chosen to order the results on \"{2}\", but you have not selected \\\r\n+\tthis data in your setResult() clause.  Please include this ordering data \\\r\n+\tin setResult() so that OpenJPA can extract it for in-memory ordering.\r\n+bad-grouping: Your query on type \"{0}\" with filter \"{1}\" is invalid.  Your \\\r\n+    select and having clauses must only include aggregates or values that also \\\r\n+    appear in your grouping clause.\r\n+query-nosupport: The \"{0}\" query type does not support this operation.\r\n+query-unmapped: You cannot query unmapped type \"{0}\".\r\n+range-too-big: The range of the query is too big. Start index: \"{0}\", end \\\r\n+\tindex: \"{1}\". The range must be less than Integer.MAX_VALUE.\r\n+invalid-range: The query range from {0} to {1} is not valid.\r\n+no-impls: Unable to execute a query on type \"{0}\".  This class or interface \\\r\n+\tis not mapped, and does not have any mapped implementors.\r\n+bad-param-name: The parameter name or position \"{0}\" passed to \\\r\n+\texecute() is not valid.  All map keys must be a declared parameter \\\r\n+\tname or a number matching the parameter position. Native queries only \\\r\n+\tallow the use of positional parameters.\r\n+force-in-mem: This query on type \"{0}\" must load the entire candidate class \\\r\n+\textent and evaluate the query in-memory.  This may be very slow.  The \\\r\n+\tquery must be executed in memory because OpenJPA is configured with \\\r\n+\tIgnoreCache=false and FlushBeforeQueries=false and \\\r\n+\tthere are dirty instances that may affect the query''s outcome in the \\\r\n+\tcache.\r\n+cant-exec-inmem: Queries of this type (\"{0}\") cannot be executed in-memory. \\\r\n+\tEither set IgnoreCache to true, set the openjpa.FlushBeforeQueries \\\r\n+\tproperty to true, or execute the query before changing any instances in \\\r\n+\tthe transaction.\r\n+executing-query: Executing query: {0}\r\n+executing-query-with-params: Executing query: [{0}] with parameters: {1}\r\n+not-unique: The query on candidate type \"{0}\" with filter \"{1}\" was \\\r\n+\tconfigured to have a unique result, but more than one instance matched \\\r\n+\tthe query.\r\n+no-result: The query on candidate type \"{0}\" with filter \"{1}\" was \\\r\n+\tconfigured to have a unique result, but no instance matched \\\r\n+\tthe query.\r\n+serialized: Queries that have been serialized do not support this operation.\r\n+read-only: Attempt to modify a read-only query object.\r\n+no-class: A candidate Class must be specified before executing a query.\r\n+no-modify-resultclass: A query that declares a result class cannot be used \\\r\n+\tto perform bulk updates.\r\n+no-modify-unique: A query that declares unique results cannot be used \\\r\n+\tto perform bulk updates.\r\n+no-modify-range: A query that declares a result range cannot be used \\\r\n+\tto perform bulk updates.\r\n+unbound-param: Cannot execute query; the declared parameter \"{0}\" was \\\r\n+\tnot given a value.\r\n+unbound-params: Cannot execute query; some declared parameters were not given \\\r\n+\tvalues.  You must supply a value for each of the following parameters, \\\r\n+\tin the given order: {0}\r\n+extra-params: More parameters were passed to execute() than were declared: \\\r\n+\t{1} parameters were specified for query execution, but only {0} \\\r\n+\tparameters were declared in the query.\r\n+null-primitive-param: Parameter \"{0}\" was declared with a primitive type, but \\\r\n+\thas been given a null value.\r\n+merged-aggregate: This query on candidate type \"{0}\" with filter \"{1}\" \\\r\n+\tinvolves combining the results of multiple sub-queries.  However, because \\\r\n+\tthis query is for aggregate data, OpenJPA cannot combine the sub-query \\\r\n+\taggregates into correct final values.\r\n+bad-dec: The {1} declaration \"{0}\" is \\\r\n+\tnot valid. Variables and imports must be delimited with \";\".  Parameters \\\r\n+\tand orderings must be delimited with \",\".  Imports require the \"import\" \\\r\n+\tkeyword, and orderings require the \"ascending\" or \"descending\" keyword.\r\n+mod-bigdecimal: You cannot use the modulo operator (%) on numbers of type \\\r\n+\tBigDecimal.\r\n+cant-convert: Cannot convert object \"{0}\" of type \"{1}\" into an instance of \\\r\n+\t\"{2}\".\r\n+bad-method-class: You set the method name of this openjpa.MethodQL query to \\\r\n+\t\"{1}\", but class \"{0}\" is not a valid class name.  Make sure to fully \\\r\n+\tqualify the class name or to import its package into this query if the \\\r\n+\tclass is not in the query candidate class'' package. \r\n+method-not-static: Method \"{0}\" named in the MethodQL query must be static.\r\n+method-return-type-invalid: Method \"{0}\" named in the MethodQL query must \\\r\n+    have a return type that is assignable from ResultObjectProvider. Return \\\r\n+    type is: {1}.\r\n+no-method: You must set the query filter to the name of the method to execute \\\r\n+\tfor this MethodQL query instance.\r\n+method-error: There was an error invoking method \"{0}\" with arguments \"{1}\".\r\n+bad-param-type: The type \"{0}\" as used in the parameter declarations \\\r\n+\tcould not be found in the imports.\r\n+cant-set: Result type \"{0}\" does not have any public fields or setter methods \\\r\n+\tfor the projection or aggregate result element \"{1}\", nor does it have a \\\r\n+\tgeneric put(Object,Object) method that can be used, nor does it have a \\\r\n+\tpublic constructor that takes the types {2}.\r\n+pack-err: There was an error packing the projection and/or aggregate results \\\r\n+\tof the query into result type \"{0}\".  See the nested Throwable exception \\\r\n+\tfor details.\r\n+pack-instantiation-err: There was an error creating an instance of type \"{0}\" \\\r\n+\twhen packing the projection and/or aggregate results of the query. Ensure \\\r\n+\tthat you have defined a public no-args constructor in \"{0}\".\r\n+bad-inmem-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Object, \\\r\n+\tMap, FetchConfiguration)\" is not declared in type \"{1}\". \\\r\n+\tCheck the method name supplied in your MethodQL query filter.  \\\r\n+\tOpenJPA is attempting to execute this query in-memory; if you implemented \\\r\n+    the datastore method instead (a method with the same signature but without \\\r\n+    the Object argument) and want this query to execute in the datastore, \\\r\n+    either create the query before modifying objects in the current transaction, \\\r\n+\tset IgnoreCache to true, or set the openjpa.FlushBeforeQueries property to \\\r\n+\ttrue.\r\n+bad-datastore-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Map, \\\r\n+\tFetchConfiguration)\" is not declared in type \"{1}\".  Check \\\r\n+\tthe method name supplied in your MethodQL query filter.  OpenJPA is \\\r\n+\tattempting to execute this query against the datastore; if you implemented \\\r\n+\tthe in-memory method instead (a method with the same signature but with an \\\r\n+\tObject argument) and want this query to execute in-memory, supply a \\\r\n+\tCollection of candidates to filter.\r\n+only-update-constants: Bulk update queries when executed in memory \\\r\n+\tmay only update to constant values.\r\n+only-range-constants: Range values must be numeric constants.  Illegal query: \\\r\n+    {0}\r\n+no-savepoint-copy: Unable to copy field \"{0}\" for savepoint.\r\n+savepoint-exists: A savepoint with the name \"{0}\" already exists.  \\\r\n+\tEach savepoint name must be unique.\r\n+no-lastsavepoint: Cannot rollback/release last savepoint as no savepoint \\\r\n+\thas been set.\r\n+no-savepoint: You have not set a savepoint with the name \"{0}\"\r\n+savepoint-init: This savepoint has already been initialized.\r\n+savepoint-flush-not-supported: The configured SavepointManager does not \\\r\n+\tsupport incremental flushing when a savepoint has been set.  You must \\\r\n+\trelease your savepoints before flushing.\r\n+callback-err: Errors occurred processing listener callbacks.  See the nested \\\r\n+    exceptions for details.\r\n+bad-agg-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted into \\\r\n+\tan aggregate listener.\r\n+bad-filter-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted \\\r\n+\tinto a filter listener.\r\n+bad-setter-hint-arg: In query hint \"{0}\", cannot convert hint value \"{1}\" to \\\r\n+    type \"{2}\".\r\n+detach-val-mismatch: The instance \"{0}\" is managed by another context and \\\r\n+\tcannot be inspected for field values.\r\n+detach-val-badsm: The instance \"{0}\" has an unknown state manager which \\\r\n+\tprevents field inspection.\r\n+null-oid: Cannot perform find using null object id.\r\n+illegal-op-in-prestore: This operation is illegal when called during \\\r\n+\ttransaction completion.\r\n+no-expressions: The query cannot be executed because it has no \\\r\n+\tvalid expressions.\r\n+null-fg: Attempt to add null/empty fetch group name to fetch configuration.\r\n+null-field: Attempt to add null/empty field name to fetch configuration.\r\n+container-projection: Query projections cannot include array, collection, or \\\r\n+    map fields.  Invalid query: \"{0}\"\r\n+existing-value-override-excep: The generated value processing detected an \\\r\n+existing value assigned to this field: {0}.  This existing value was either \\\r\n+provided via an initializer or by calling the setter method.  You either need \\\r\n+to remove the @GeneratedValue annotation or modify the code to remove the \\\r\n+initializer processing.\r\n+invalid-tran-status: The transaction was not in a valid state ({0}) to \\\r\n+accept the \"{1}\" method invocation.  Processing will continue.\r\n+multi-threaded-access: Multiple concurrent threads attempted to access a \\\r\n+    single broker. By default brokers are not thread safe; if you require \\\r\n+    and/or intend a broker to be accessed by more than one thread, set the \\\r\n+    openjpa.Multithreaded property to true to override the default behavior.\r\n+no-saved-fields: No state snapshot is available for instance of type \"{0}\", \\\r\n+    but this instance uses state-comparison for dirty detection.\r\n+cant-serialize-flushed-broker: Serialization not allowed once a broker has \\\r\n+    been flushed.\r\n+cant-serialize-pessimistic-broker: Serialization not allowed for brokers with \\\r\n+    an active datastore (pessimistic) transaction.\r\n+cant-serialize-connected-broker: Serialization not allowed for brokers with \\\r\n+    an active connection to the database.\r\n+no-interface-metadata: No metadata was found for managed interface {0}.\r\n+fetch-configuration-stack-empty: Fetch configuration stack is empty.\n\\ No newline at end of file"},{"sha":"1446b14175bf1b776d9147f99e076ad7d21e5546","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -311,8 +311,13 @@ scan-found-names: Scan of \"{1}\" found persistent types {0}.\n parse-found-names: parsePersistentTypeNames() found {0}.\n interface-load: Dynamic implementation of managed \"{0}\" can not be defined \\\n \tusing classloader \"{1}\". See nested exception for details.\n-interface-load2: Enhanced dynamic implementaion of managed \"{0}\" can not be \\\n+interface-load2: Enhanced dynamic implementation of managed \"{0}\" can not be \\\n \tdefined using classloader \"{1}\". See nested exception for details.\n-interface-badenhance: Dynamic implementaion of \"{0}\" can not be enhanced.\n+interface-badenhance: Dynamic implementation of \"{0}\" can not be enhanced.\n bad-externalized-value: Value \"{0}\" was not found in the list of \\\n \tExternalValues for field \"{2}\". Valid values are {1}\n+unexpected_proxy_sm_attribute_type: Unexpected attribute type \"{1}\" for \\\n+\tpersistence-capable class \"{0}\" is detected. If the entity is packaged in \\\n+    a jar file, this may be caused by one or more inherited class of the \\\n+    entity not being packaged in the same jar file. Please check all \\\n+    inherited class(es) are packaged in the same jar file."},{"sha":"ef55f95f89f3bb15968a45fc42256f1f8e1e0d06","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -34,7 +34,7 @@ lock-timeout: Could not obtain a lock on object \"{0}\" in {1} milliseconds.\n not-found: The instance \"{0}\" does not exist in the data store.\n obj-exists: The instance \"{0}\" cannot be persisted, because it conflicts with \\\n \tan existing instance.\n-not-found-multi: The follwing instnaces do not exist in the data store: {0}\n+not-found-multi: The following instances do not exist in the data store: {0}\n opt-lock: An optimistic lock violation was detected when flushing object \\\n \tinstance \"{0}\" to the data store.  This indicates that the \\\n \tobject was concurrently modified in another transaction.\n@@ -44,7 +44,7 @@ opt-lock-multi: Optimistic locking errors were detected when flushing to the \\\n opt-lock-nested: Optimistic locking errors were detected when \\\n \tflushing to the data store.  This indicates that some objects were \\\n \tconcurrently modified in another transaction.  Each exception in \\\n-\tthe nested throwables array contains a failed object representing \\\n+\tthe nested Throwables array contains a failed object representing \\\n \ta concurrently modified object.\n bad-array: Unable to copy array: {0}.\n no-proxy-final: Unable to create a second class object proxy for final class \\"},{"sha":"5e8f6527afd149a96ce72293c9224b2ff23140f9","filename":"openjpa-lib/pom.xml","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <dependencies>\n         <dependency>\n@@ -72,20 +72,14 @@\n     </dependencies>\n     <build>\n         <plugins>\n-            <plugin>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n             <!--\n                 get the svn revision number and set it in the\n                 subversion.revision setting - disabled for now\n                 since we need to be able to build from sources\n                 zip (when there is no .svn/ metadata)\n             -->\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <!--"},{"sha":"b9b7a6508b231e246c36ce6b9adfc391dcfdcb88","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -241,7 +241,7 @@ public static String getLevelName(short level) {\n      * Returns a symbolic constant for the specified string level.\r\n      */\r\n     public static short getLevel(String str) {\r\n-        str = str.toUpperCase().trim();\r\n+        str = str.toUpperCase(Locale.ENGLISH).trim();\r\n         short val = TRACE_STR.equals(str) ? Log.TRACE :\r\n             INFO_STR.equals(str) ? Log.INFO :\r\n                 WARN_STR.equals(str) ? Log.WARN :\r"},{"sha":"be7a2c5e468214b8a77c00f9adfe0c9c5e76df65","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -53,4 +53,15 @@\n      * class, this would return the name of the class.\n      */\n     public String getResourceName();\n+    \n+    /**\n+     * Return the line number of the file at which this instance was parsed.\n+     */\n+    public int getLineNumber();\n+\n+    /**\n+     * Return the column number in the line of the file at which this\n+     * instance was parsed.\n+     */\n+    public int getColNumber();\n }"},{"sha":"b8cefc0befad8b0d74b911ba1bd8ec9a67d4267a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -70,7 +70,10 @@ protected Class loadClass(String name, boolean resolve)\n                 bout.write(b, 0, n))\n                 ;\n             byte[] classBytes = bout.toByteArray();\n-            if (isAnnotation(classBytes))\n+            // To avoid classloader issues with the JVM (Sun and IBM), we\n+            // will not load Enums via the TemporaryClassLoader either.\n+            // Reference JIRA Issue OPENJPA-646 for more information.\n+            if (isAnnotation(classBytes) || isEnum(classBytes))\n                 return Class.forName(name, resolve, getClass().\n                     getClassLoader());\n \n@@ -97,4 +100,16 @@ private static boolean isAnnotation(byte[] b) {\n         int access = ConstantPoolTable.readUnsignedShort(b, idx);\n         return (access & 0x2000) != 0; // access constant for annotation type\n     }\n+\n+    /**\n+     * Fast-parse the given class bytecode to determine if it is an\n+     * enum class.\n+     */\n+    private static boolean isEnum(byte[] b) {\n+        if (JavaVersions.VERSION < 5)\n+            return false;\n+        int idx = ConstantPoolTable.getEndIndex(b);\n+        int access = ConstantPoolTable.readUnsignedShort(b, idx);\n+        return (access & 0x4000) != 0; // access constant for enum type\n+    }\n }"},{"sha":"8ddc13c3f109703b9425d880e36b7b787ca4fd3f","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -21,7 +21,7 @@ obj-create: An instance of the class \"{0}\" could not be instantiated.  Make \\\n \tsure the class has a public no-args constructor.\n prop-parse: There was an error parsing the properties string \"{0}\".  Please \\\n \tcheck that the format is: \"<name1>=<value1> <name2>=<value2> ...\".\n-naming-err:\tThere was an error duing JNDI lookup of the name \"{0}\".\n+naming-err:\tThere was an error during JNDI lookup of the name \"{0}\".\n invalid-config-params: There was an error while setting up the configuration \\\n \tplugin option \"{0}\". The plugin was of type \"{1}\". Setter methods for the \\\n \tfollowing plugin properties were not available in that type: {2}. \\"},{"sha":"18fa1181156b75ec3908898eff8e12967af920f9","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -35,7 +35,7 @@ tracker-total: total\n tracker-max: max\n tracker-average: average\n tracker-ms: ms\n-tracker-occurances: occurances\n+tracker-occurances: occurrences\n tracker-slowest-statements: slowest statements\n rsrc-closed: The connection \"{0}\" has already been closed.  The embedded \\\n \tstack trace for this exception details the closure point."},{"sha":"1d34e0b4420f1434674b79697b72a2b4ba75419c","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":142,"deletions":11,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,14 +31,19 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <properties>\n         <openjpa.loglevel>INFO</openjpa.loglevel>\n         <!-- to set debug arguments, you might set the following at the command line:\n             -Dtest.jvm.arguments=\"-Xmx500m -agentlib:jdwp=transport=dt_socket,server=y,address=8000\"\n         -->\n         <test.jvm.arguments>-Xmx500m</test.jvm.arguments>\n+        <dbcp.maxActive>10</dbcp.maxActive>\n+        <dbcp.maxIdle>5</dbcp.maxIdle>\n+        <dbcp.minIdle>2</dbcp.minIdle>\n+        <dbcp.maxWait>10000</dbcp.maxWait>\n+        <dbcp.args>MaxActive=${dbcp.maxActive},MaxIdle=${dbcp.maxIdle},MinIdle=${dbcp.minIdle},MaxWait=${dbcp.maxWait}</dbcp.args>\n     </properties>\n     <profiles>\n \n@@ -235,6 +240,140 @@\n                 <connection.password>${openjpa.custom.password}</connection.password>\n             </properties>\n         </profile>\n+        \n+        <!--  \n+            The test-custom2 profile does not work very well when used with a \n+            continuous build system. As a convenience I've added profiles for \n+            some of the proprietary databases to make testing easier. \n+          -->\n+        <profile>\n+            <!-- \n+                Example db2 profile. You can use this profile if you:\n+                1) have the DB2 artifacts installed in a local repo and supply\n+                the URL:\n+                    -Ddb2.maven.repo=http://my.local.repo\n+                2) have a copy of the DB2 JCC driver and run the following\n+                commands :\n+                    mvn install:install-file -Dfile=${path to db2jcc.jar} \\\n+                                             -DgroupId=com.ibm.db2 \\\n+                                             -DartifactId=jcc-driver \\\n+                                             -Dversion=9.5 \\\n+                                             -Dpackaging=jar\n+\n+                    mvn install:install-file -Dfile=${path to db2jcc_license.jar} \\\n+                                             -DgroupId=com.ibm.db2 \\\n+                                             -DartifactId=jcc-license \\\n+                                             -Dversion=9.5 \\\n+                                             -Dpackaging=jar\n+\n+                You must also set the following properties:\n+                    -Dopenjpa.db2.url=jdbc:db2://<HOST>:<PORT>/<DBNAME>\n+                    -Dopenjpa.db2.username=<db2_uid>\n+                    -Dopenjpa.db2.password=<db2_pwd>\n+\n+                Optionally, you can override the default DB2 groupId and version\n+                by also supplying the following properties:\n+                    -Ddb2.groupid=com.ibm.db2\n+                    -Ddb2.version=9.5\n+            -->\n+            <id>test-db2-jcc</id>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>${db2.groupid}</groupId>\n+                    <artifactId>jcc-driver</artifactId>\n+                    <version>${db2.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+                <dependency>\n+                    <groupId>${db2.groupid}</groupId>\n+                    <artifactId>jcc-license</artifactId>\n+                    <version>${db2.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <db2.maven.repo>http://not.a.real.repository</db2.maven.repo>\n+                <db2.groupid>com.ibm.db2</db2.groupid>\n+                <db2.version>9.5</db2.version>\n+                <connection.driver.name>com.ibm.db2.jcc.DB2Driver</connection.driver.name>\n+                <connection.url>${openjpa.db2.url}</connection.url>\n+                <connection.username>${openjpa.db2.username}</connection.username>\n+                <connection.password>${openjpa.db2.password}</connection.password>\n+            </properties>\n+            <repositories>\n+                <repository>\n+                    <id>db2.repository</id>\n+                    <name>DB2 Repository</name>\n+                    <url>${db2.maven.repo}</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>          \n+        <profile>\n+            <!-- \n+                Example oracle profile. You can use this profile if you:\n+                1) have the Oracle artifacts installed in a local repo and\n+                supply the URL:\n+                    -Doracle.maven.repo=http://my.local.repo\n+                2) have a copy of the Oracle driver and run the following\n+                command:\n+                    mvn install:install-file -Dfile=${path to ojdbc.jar} \\\n+                                             -DgroupId=com.oracle \\\n+                                             -DartifactId=jdbc-driver \\\n+                                             -Dversion=10g \\\n+                                             -Dpackaging=jar\n+\n+                You must also set the following properties:\n+                    -Dopenjpa.oracle.url\n+                    -Dopenjpa.oracle.username\n+                    -Dopenjpa.oracle.password\n+\n+                Optionally, you can override the default Oracle groupId and\n+                version by also supplying the following properties:\n+                    -Doracle.groupid=com.oracle\n+                    -Doracle.version=10g\n+            -->\n+            <id>test-oracle</id>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>${oracle.groupid}</groupId>\n+                    <artifactId>jdbc-driver</artifactId>\n+                    <version>${oracle.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <oracle.maven.repo>http://not.a.real.repository</oracle.maven.repo>\n+                <oracle.groupid>com.oracle</oracle.groupid>\n+                <oracle.version>10g</oracle.version>\n+                <connection.driver.name>oracle.jdbc.driver.OracleDriver</connection.driver.name>\n+                <connection.url>${openjpa.oracle.url}</connection.url>\n+                <connection.username>${openjpa.oracle.username}</connection.username>\n+                <connection.password>${openjpa.oracle.password}</connection.password>\n+            </properties>\n+            <repositories>\n+                <repository>\n+                    <id>oracle.repository</id>\n+                    <name>Oracle Repository</name>\n+                    <url>${oracle.maven.repo}</url>\n+                    <layout>default</layout>\n+                    <snapshots>\n+                        <enabled>false</enabled>\n+                    </snapshots>\n+                    <releases>\n+                        <enabled>true</enabled>\n+                        <checksumPolicy>ignore</checksumPolicy>\n+                    </releases>\n+                </repository>\n+            </repositories>\n+        </profile>  \n     </profiles>\n \n     <dependencies>\n@@ -253,13 +392,11 @@\n         <dependency>\n             <groupId>commons-dbcp</groupId>\n             <artifactId>commons-dbcp</artifactId>\n-            <version>1.2.1</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>commons-collections</groupId>\n             <artifactId>commons-collections</artifactId>\n-            <version>3.2</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n@@ -271,13 +408,7 @@\n     <build>\n         <plugins>\n             <plugin>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.5</source>\n-                    <target>1.5</target>\n-                </configuration>\n-            </plugin>\n-            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -486,7 +617,7 @@\n                         </property>\n                         <property>\n                             <name>openjpa.ConnectionProperties</name>\n-                            <value>DriverClassName=${connection.driver.name},Url=${connection.url},MaxActive=100,MaxIdle=0,MaxWait=10000,TestOnBorrow=true,Username=${connection.username},Password=${connection.password}</value>\n+                            <value>DriverClassName=${connection.driver.name},Url=${connection.url},Username=${connection.username},Password=${connection.password},${dbcp.args}</value>\n                         </property>\n                     </systemProperties>\n                 </configuration>"},{"sha":"7d82e160213908362cd5fb3df0ab8a6e8d4296ec","filename":"openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -59,8 +59,6 @@\n           -->\n         <path id=\"cp\">\n             <path refid=\"maven.test.classpath\" />\n-            <path refid=\"maven.compile.classpath\" />\n-            <path refid=\"maven.dependency.classpath\" />\n         </path>\n \n         <taskdef name=\"openjpac\""},{"sha":"6060bca21831fb1938c36b42d96d8829ef689560","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -33,6 +33,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.xml.sax.Attributes;\n+import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -61,6 +62,7 @@\n import org.apache.openjpa.util.InternalException;\n \n import static org.apache.openjpa.persistence.jdbc.MappingTag.*;\n+import serp.util.Numbers;\n \n /**\n  * Custom SAX parser used by the system to parse persistence mapping files.\n@@ -414,6 +416,11 @@ private boolean startTableGenerator(Attributes attrs) {\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n         seq.setSource(getSourceFile(), scope, seq.SRC_XML);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n         pushElement(seq);\n         return true;\n     }\n@@ -829,7 +836,11 @@ private boolean startSQLResultSetMapping(Attributes attrs) {\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n         result.setSource(getSourceFile(), scope, result.SRC_XML);\n-\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            result.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            result.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n         pushElement(result);\n         return true;\n     }"},{"sha":"c2fd9b852cbdc01a6998014e534d74e64f477e9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+// Try not to collide with other Employee entities\n+@Table(name = \"PER_JDBC_KERN_EMP\")\n+public class Employee {\n+\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    private String firstName;\n+    private String lastName;\n+\n+    @OneToMany(mappedBy = \"employee\", cascade = { CascadeType.MERGE,\n+        CascadeType.PERSIST })     \n+    private Collection<Task> tasks;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public Collection<Task> getTasks() {\n+        return tasks;\n+    }\n+\n+    public void setTasks(Collection<Task> tasks) {\n+        this.tasks = tasks;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"3aaf100f583121badb6addc62b3f4ab00b9cd00f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M21UniDepartment {\n+\n+\t@Id\t\n+\tprivate String deptid;\n+\t\n+\tString name;\n+\t\n+\tpublic String getDeptid() {\n+        return deptid;\n+    }\n+\n+    public void setDeptid(String deptid) {\n+        this.deptid = deptid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getCostCode() {\n+        return costCode;\n+    }\n+\n+    public void setCostCode(String costCode) {\n+        this.costCode = costCode;\n+    }\n+\n+    @Version\n+\tprivate int version;\n+\t\n+\tprivate String costCode;\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"32e6593bdd9df677d97d12251c80480927467be6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M21UniEmployee {\n+    \n+    @Id    \n+    public String empid;\n+    \n+    @Version\n+    private int version;\n+    \n+    @ManyToOne\n+    M21UniDepartment department;\n+    \n+    public M21UniDepartment getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(M21UniDepartment department) {\n+        this.department = department;\n+    }\n+\n+    public String getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(String empid) {\n+        this.empid = empid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String name;\n+    \n+    public float salary;\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+}"},{"sha":"7470cd5ad9a9e62c87cd6c4caa27144627c0cb77","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M2MBiDepartment {\n+\n+\t@Id\t\n+\tprivate String deptid;\n+\t\n+\tString name;\n+\t\n+\t@ManyToMany(mappedBy=\"departments\", fetch=FetchType.EAGER)\t\n+\tpublic Collection<M2MBiEmployee> employees = new ArrayList<M2MBiEmployee>();\n+\t\n+\t@Version\n+    private int version;\n+\n+    private String costCode;\n+\n+    public Collection<M2MBiEmployee> getEmployees() {\n+        return employees;\n+    }\n+\n+    public void setEmployees(Collection<M2MBiEmployee> employees) {\n+        this.employees = employees;\n+    }\n+\n+    public String getDeptid() {\n+        return deptid;\n+    }\n+\n+    public void setDeptid(String deptid) {\n+        this.deptid = deptid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getCostCode() {\n+        return costCode;\n+    }\n+\n+    public void setCostCode(String costCode) {\n+        this.costCode = costCode;\n+    }\n+\n+    public String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\t\n+}"},{"sha":"1d9151f2f5c31db6fded29ad5d4b7e48c1c2bfef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class M2MBiEmployee {\n+    \n+    @Id    \n+    public String empid;\n+    \n+    @Version\n+    private int version;\n+    \n+    @ManyToMany(fetch=FetchType.EAGER)\n+    public Collection<M2MBiDepartment> departments = new ArrayList\n+        <M2MBiDepartment>();\n+    \n+    public String name;\n+\n+    public float salary;\n+\n+    public Collection<M2MBiDepartment> getDepartments() {\n+        return departments;\n+    }\n+\n+    public void setDepartments(Collection<M2MBiDepartment> departments) {\n+        this.departments = departments;\n+    }\n+\n+    public String getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(String empid) {\n+        this.empid = empid;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+}"},{"sha":"d2ed6bb9b4fcb81121e1f306d638cee48f248d7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"PER_JDBC_KERN_STORY\") // try not to collide\n+public class Story {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+    \n+    @ManyToOne(cascade = { CascadeType.MERGE, CascadeType.PERSIST })\n+    private Task task;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Task getTask() {\n+        return task;\n+    }\n+\n+    public void setTask(Task task) {\n+        this.task = task;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    } \n+\n+}"},{"sha":"d3aef7c7e3abf668d893f84d43d1b304df7eb8ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"PER_JDBC_KERN_TASK\")\n+// try not to collide\n+public class Task {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @OneToMany(mappedBy = \"task\", cascade = { CascadeType.MERGE,\n+        CascadeType.PERSIST })\n+    private Collection<Story> stories;\n+    \n+    @ManyToOne(cascade = { CascadeType.MERGE, CascadeType.PERSIST })\n+    private Employee employee;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Collection<Story> getStories() {\n+        return stories;\n+    }\n+\n+    public void setStories(Collection<Story> stories) {\n+        this.stories = stories;\n+    }\n+\n+    public Employee getEmployee() {\n+        return employee;\n+    }\n+\n+    public void setEmployee(Employee employee) {\n+        this.employee = employee;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    } \n+}"},{"sha":"6e86aa208ac24d57aa7c37bc16c3f91a12d2a9e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test that insert order is preserved when using the ConstraintUpdateManager\n+ * for entities which are not annotated with ForeignKey constraints.\n+ */\n+public class TestInsertOrder extends SQLListenerTestCase {\n+    private String empTableName;\n+    private String taskTableName;\n+    private String storyTableName;\n+\n+    public void setUp() {\n+        setUp(Employee.class, Task.class, Story.class);\n+        empTableName = getMapping(Employee.class).getTable().getFullName();\n+        taskTableName = getMapping(Task.class).getTable().getFullName();\n+        storyTableName = getMapping(Story.class).getTable().getFullName();\n+    }\n+\n+    /**\n+     * <P>Persist an Employee entity and allow the cascade to insert the children.\n+     * The inserts should be executed in this order, Employee, Task, Story.\n+     * </P>\n+     * \n+     * <P> \n+     * Originally this test would pass in some scenarios. I believe the order \n+     * relied on the hashcode of the underlying entities. \n+     * </P>\n+     */\n+    public void testCascadePersist() {\n+        Employee e = newTree(10);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertSQLOrder(\"INSERT INTO \" + empTableName + \".*\", \"INSERT INTO \"\n+            + taskTableName + \".*\", \"INSERT INTO \" + storyTableName + \".*\");\n+    }\n+    \n+    /**\n+     * Merge an Employee entity and allow the cascade to insert the children.\n+     * The inserts should be executed in this order, Employee, Task, Story.\n+     */\n+    public void testCascadeMerge() {\n+        Employee e = newTree(11);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.merge(e);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        assertSQLOrder(\"INSERT INTO \" + empTableName + \".*\", \"INSERT INTO \"\n+            + taskTableName + \".*\", \"INSERT INTO \" + storyTableName + \".*\");\n+    }\n+\n+\n+    /**\n+     * Helper to create a tree of entities\n+     * \n+     * @param id\n+     *            ID for the entities.\n+     * @return an unmanaged Employee instance with the appropriate relationships\n+     *         set.\n+     */\n+    private Employee newTree(int id) {\n+        Employee e = new Employee();\n+        e.setId(id);\n+\n+        Task t = new Task();\n+        t.setId(id);\n+\n+        Story s = new Story();\n+        s.setId(id);\n+\n+        Collection<Task> tasks = new ArrayList<Task>();\n+        tasks.add(t);\n+\n+        Collection<Story> stories = new ArrayList<Story>();\n+        stories.add(s);\n+\n+        e.setTasks(tasks);\n+        t.setEmployee(e);\n+\n+        t.setStories(stories);\n+        s.setTask(t);\n+\n+        return e;\n+    }\n+}"},{"sha":"093774627730694a835ceff1d686fdb731c93b4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","status":"modified","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n@@ -34,6 +35,9 @@\n import org.apache.openjpa.persistence.EntityManagerImpl;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.relations.TblChild;\n+import org.apache.openjpa.persistence.relations.TblGrandChild;\n+import org.apache.openjpa.persistence.relations.TblParent;\n import org.apache.openjpa.persistence.simple.Person;\n \n /*\n@@ -271,6 +275,72 @@ public void testMultiEMCachingTrue() {\n         runMultiEMCaching(props);\n     }\n \n+    /*\n+     * Verify QuerySQLCacheValue setting \"true\" uses the expected cache\n+     * implementation and is caching.\n+     */\n+    public void testEagerFetch() {\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\"\n+            + TblChild.class.getName() + \";\"\n+            + TblGrandChild.class.getName() + \";\"\n+            + TblParent.class.getName() + \")\");\n+        props.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(\n+                Persistence.createEntityManagerFactory(\"test\", props));\n+        \n+        EntityManagerImpl em = (EntityManagerImpl)emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n+        for (int i = 0; i < 2; i++) {\n+        \tTblParent p = new TblParent();\n+        \tp.setParentId(i);\n+    \t\tTblChild c = new TblChild();\n+    \t\tc.setChildId(i);\n+            c.setTblParent(p);\n+            p.addTblChild(c);\n+     \t\tem.persist(p);\n+    \t\tem.persist(c);\n+\n+    \t\tTblGrandChild gc = new TblGrandChild();\n+    \t\tgc.setGrandChildId(i);\n+    \t\tgc.setTblChild(c);\n+    \t\tc.addTblGrandChild(gc);\n+    \t\t\n+    \t\tem.persist(p);\n+    \t\tem.persist(c);\n+    \t\tem.persist(gc);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        for (int i = 0; i < 2; i++) {\n+        \tTblParent p = em.find(TblParent.class, i);\n+        \tint pid = p.getParentId();\n+        \tassertEquals(pid, i);\n+        \tCollection<TblChild> children = p.getTblChildren();\n+        \tboolean hasChild = false;\n+        \tfor (TblChild c : children) {\n+        \t\thasChild = true;\n+        \t\tCollection<TblGrandChild> gchildren = c.getTblGrandChildren();\n+        \t\tint cid = c.getChildId();\n+        \t\tassertEquals(cid, i);\n+\t        \tboolean hasGrandChild = false;\n+        \t\tfor (TblGrandChild gc : gchildren) {\n+        \t\t\thasGrandChild = true;\n+        \t\t\tint gcId = gc.getGrandChildId();\n+        \t\t\tassertEquals(gcId, i);\n+        \t\t}\n+        \t\tassertTrue(hasGrandChild);\n+        \t}\n+        \tassertTrue(hasChild);\n+        }\n+        em.close();\n+        emf.close();\n+    }\n+\n     private void runMultiEMCaching(Map props) {\n \n         EntityManagerFactory emfac = "},{"sha":"a6f4832876f032ea7fcbb8422ec3a2960119b59b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Embeddable;\n+import javax.persistence.ManyToOne;\n+\n+@Embeddable\n+public class PColl_EmbedB {\n+    private String name;\n+    \n+    @ManyToOne(cascade = CascadeType.PERSIST)\n+    private PColl_EntityC m2oC;\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public PColl_EntityC getM2oC() {\n+        return m2oC;\n+    }\n+\n+    public void setM2oC(PColl_EntityC m2oC) {\n+        this.m2oC = m2oC;\n+    }\n+}"},{"sha":"072536f8aa986c5ec9d139a70d79d1b06f5c264c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class PColl_EntityA {\n+\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection(elementEmbedded = true)\n+    private Set<PColl_EmbedB> embedCollection = new HashSet<PColl_EmbedB>();\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Set<PColl_EmbedB> getEmbedCollection() {\n+        return embedCollection;\n+    }\n+\n+    public void setEmbedCollection(Set<PColl_EmbedB> embedCollection) {\n+        this.embedCollection = embedCollection;\n+    }\n+\n+    public void addEmbedElement(PColl_EmbedB element) {\n+        this.embedCollection.add(element);\n+    }\n+\n+    public String toString() {\n+        return \"PColl_EntityD<id=\" + id + \",ver=\" + version\n+            + \",embedBCollection#=\" + embedCollection.size() + \">\";\n+    }\n+}"},{"sha":"59e67da81614791e6380faa569e701ce06e9dd2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class PColl_EntityA1 {\n+\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection(elementEmbedded = true)\n+    private Set<PColl_EntityB> embedCollection = new HashSet<PColl_EntityB>();\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Set<PColl_EntityB> getEmbedCollection() {\n+        return embedCollection;\n+    }\n+\n+    public void setEmbedCollection(Set<PColl_EntityB> embedCollection) {\n+        this.embedCollection = embedCollection;\n+    }\n+\n+    public void addEmbedElement(PColl_EntityB element) {\n+        this.embedCollection.add(element);\n+    }\n+\n+    public String toString() {\n+        return \"PColl_EntityD<id=\" + id + \",ver=\" + version\n+            + \",embedBCollection#=\" + embedCollection.size() + \">\";\n+    }\n+}"},{"sha":"fa4e20cf9975d6eab28de4144c66e3924286070c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class PColl_EntityB {\n+    private String name;\n+    \n+    @ManyToOne(cascade = CascadeType.PERSIST)\n+    private PColl_EntityC m2oC;\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public PColl_EntityC getM2oC() {\n+        return m2oC;\n+    }\n+\n+    public void setM2oC(PColl_EntityC m2oC) {\n+        this.m2oC = m2oC;\n+    }\n+}"},{"sha":"81c220a18b987c23f40df008c2a74802d9aff7ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class PColl_EntityC {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String toString() {\n+        return \"PColl_EntityC<id=\" + id + \",ver=\" + version + \">\";\n+    }\n+}"},{"sha":"a61c645b5bdd7411a7d54d30b86ddb1dc9da1d60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for PersistentCollection Annotation\n+ * \n+ * @author Albert Lee\n+ */\n+public class TestPersistentCollection extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(PColl_EntityA.class, PColl_EmbedB.class, PColl_EntityC.class,\n+                PColl_EntityA1.class, PColl_EntityB.class, CLEAR_TABLES);\n+    }\n+\n+    public void testPersistentCollectionOfEmbeddables() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            em.getTransaction().begin();\n+\n+            PColl_EntityC c = new PColl_EntityC();\n+            c.setId(101);\n+\n+            PColl_EmbedB b01 = new PColl_EmbedB();\n+            b01.setName(\"b01\");\n+            b01.setM2oC(c);\n+\n+            PColl_EntityA a = new PColl_EntityA();\n+            a.setId(1);\n+            a.getEmbedCollection().add(b01);\n+            em.persist(a);\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            Query q = em.createQuery(\"SELECT o FROM PColl_EntityA o\"); \n+            List<PColl_EntityA> oList = q.getResultList();\n+            PColl_EntityA d1 = oList.get(0);\n+            \n+            Set<PColl_EmbedB> b1s = d1.getEmbedCollection();\n+\n+            PColl_EmbedB b1 = b1s.iterator().next();\n+            PColl_EntityC c1 = b1.getM2oC();\n+            assertEquals(\"b01\", b1.getName());\n+            assertEquals(101, c1.getId());\n+            assertEquals(1, d1.getId());\n+            em.close();\n+        } catch (Throwable t) {\n+            fail(t.getMessage());\n+        }\n+    }\n+\n+    public void testPersistentCollectionOfEntities() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            em.getTransaction().begin();\n+\n+            PColl_EntityC c = new PColl_EntityC();\n+            c.setId(101);\n+\n+            PColl_EntityB b01 = new PColl_EntityB();\n+            b01.setName(\"b01\");\n+            b01.setM2oC(c);\n+\n+            PColl_EntityA1 a = new PColl_EntityA1();\n+            a.setId(1);\n+            a.getEmbedCollection().add(b01);\n+            em.persist(a);\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            Query q = em.createQuery(\"SELECT o FROM PColl_EntityA1 o\"); \n+            List<PColl_EntityA1> oList = q.getResultList();\n+            PColl_EntityA1 a1 = oList.get(0);\n+            \n+            Set<PColl_EntityB> b1s = a1.getEmbedCollection();\n+\n+            PColl_EntityB b1 = b1s.iterator().next();\n+            PColl_EntityC c1 = b1.getM2oC();\n+            assertEquals(\"b01\", b1.getName());\n+            assertEquals(101, c1.getId());\n+            assertEquals(1, a1.getId());\n+            em.close();\n+        } catch (Throwable t) {\n+            fail(t.getMessage());\n+        }\n+    }    \n+}"},{"sha":"dcada8c8675ffabf398814d3e5562896037b4f78","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachedEntityCascadePersist.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomer;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomerInventory;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMItem;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachedEntityCascadePersist extends SingleEMFTestCase {\n+\n+    public void setUp() {\t\t\n+        setUp(\n+            CLEAR_TABLES,\n+            DMCustomer.class,\n+            DMItem.class,\n+            DMCustomerInventory.class\n+        );\n+    }\n+\n+    public void testDetachedEntityCascadePersist() {\n+        // Persist an item for finding later \n+        EntityManager em = emf.createEntityManager();\n+        DMItem item = new DMItem(); \n+        item.setName(\"openjpa\");\n+        item.setPrice(0.0);\n+        em.getTransaction().begin();        \n+        em.persist(item);\n+        // Persist a customer for finding later\n+        DMCustomer customer = new DMCustomer();\n+        customer.setFirstName(\"Open\");\n+        customer.setLastName(\"JPA\");\n+        em.persist(customer);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        DMItem itemDetached = em.find(DMItem.class, item.getId());\n+        em.close();        \n+        em = emf.createEntityManager();\n+        DMCustomer customer2 = em.find(DMCustomer.class, customer.getId());       \n+        DMCustomerInventory customerInventory = new DMCustomerInventory();\n+        customerInventory.setCustomer(customer2);\n+        customerInventory.setItem(itemDetached);\n+        customerInventory.setQuantity(20);\n+        customer2.getCustomerInventories().add(customerInventory);\n+        em.getTransaction().begin();\n+        em.merge(customer2);        \n+        // At this point, itemDetached is still detached.\n+        // The following commit causes a persist on CustomerInventory,\n+        // which leads to a cascade-persist on the detached item.\n+        // This cascade-persist on a detached item should be ignored, \n+        // instead of a EntityExistsException being thrown\n+        em.getTransaction().commit();\n+    }\n+}"},{"sha":"94c216f4c964f789df41427aa2b435da1292f603","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+@Entity \n+public class DMCustomer {\n+\n+    private static long idCounter = System.currentTimeMillis();\t\n+    @Id private long id = idCounter++;    \n+    private String firstName;    \n+    private String lastName;    \n+\n+    @OneToMany(mappedBy=\"customer\", \n+            fetch=FetchType.EAGER,\n+            cascade=CascadeType.ALL)\n+            private List<DMCustomerInventory> customerInventories = new ArrayList<DMCustomerInventory>();\n+\n+    public DMCustomer() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public List<DMCustomerInventory> getCustomerInventories() {\n+        return customerInventories;\n+    }\n+\n+    public void setCustomerInventories(List<DMCustomerInventory> customerInventories) {\n+        this.customerInventories = customerInventories;\n+    }\n+}"},{"sha":"a3758efbffda0ad94b2f084840bd2ec805fc24fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class DMCustomerInventory  {\n+    private static long idCounter = System.currentTimeMillis();\n+    @Id private long id = idCounter++;\n+\n+    @ManyToOne(cascade=CascadeType.ALL)\n+    @JoinColumn(name = \"CI_ITEMID\")\n+    private DMItem  item;    \n+    private int quantity;\n+\n+    @ManyToOne(cascade=CascadeType.MERGE)\n+    @JoinColumn(name=\"CI_CUSTOMERID\")\n+    private DMCustomer customer;\n+\n+    public DMCustomerInventory() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public DMItem getItem() {\n+        return item;\n+    }\n+\n+    public void setItem(DMItem item) {\n+        this.item = item;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public DMCustomer getCustomer() {\n+        return customer;\n+    }\n+\n+    public void setCustomer(DMCustomer customer) {\n+        this.customer = customer;\n+    }    \n+}"},{"sha":"5b153fb626c09b9ea775ac81caaef7cdd5103129","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class DMItem {\n+    private static long idCounter = System.currentTimeMillis();\t\n+    @Id private long id = idCounter++;\n+\n+    private String name;\n+    private double price;\n+\n+\n+    public long getId() {\n+        return id;\n+    }\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public double getPrice() {\n+        return price;\n+    }\n+    public void setPrice(double price) {\n+        this.price = price;\n+    }\n+}"},{"sha":"bfabe6691f7157b659534e001e418163ee509bfc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","status":"modified","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -18,7 +18,11 @@\n  */\r\n package org.apache.openjpa.persistence.embed;\r\n \r\n+import java.util.List;\r\n+\r\n import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n public class TestEmbedded extends SingleEMFTestCase {\r\n@@ -43,4 +47,71 @@ public void testInsertEmbedded() {\n         em.getTransaction().commit();\r\n     }\r\n \r\n+    /*\r\n+     * This variation verifies that an embedded entity can be accessed after\r\n+     * being detached. An entity /w embedded is persisted and then queried. The\r\n+     * em is closed, detaching the entities, and then a getter is called on the\r\n+     * embeddeded. If the embedded is still attached (it should not be) an\r\n+     * IllegalStateException will be thrown.\r\n+     * \r\n+     * JIRA Ref: OPENJPA-733 Authors: Chris Tillman, Jeremy Bauer\r\n+     */\r\n+    public void testDetachedQueryEmbedded() {\r\n+        Address a = new Address();\r\n+        a.setStreetAddress(\"456 Main St\");\r\n+        a.setCity(\"New York\");\r\n+        a.setState(\"NY\");\r\n+        a.setZip(12955);\r\n+        Geocode g = new Geocode();\r\n+        g.setLatitude(1.0f);\r\n+        g.setLongtitude(2.0f);\r\n+        a.setGeocode(g);\r\n+\r\n+        persistAddress(a);\r\n+\r\n+        Address a2 =\r\n+            queryAddresses(\r\n+                \"select address from Address address\"\r\n+                    + \" where address.streetAddress = '456 Main St'\").get(0);\r\n+\r\n+        assertEquals(a2.getGeocode().getLatitude(), 1.0f);\r\n+    }\r\n+\r\n+    private void persistAddress(Address address) {\r\n+        final EntityManager em = emf.createEntityManager();\r\n+        final EntityTransaction tx = em.getTransaction();\r\n+\r\n+        tx.begin();\r\n+\r\n+        try {\r\n+            em.persist(address);\r\n+            tx.commit();\r\n+        } finally {\r\n+            if (tx.isActive()) {\r\n+                tx.rollback();\r\n+            }\r\n+            em.close();\r\n+        }\r\n+        assertEquals(address.getGeocode().getLatitude(), 1.0f);\r\n+    }\r\n+\r\n+    private List<Address> queryAddresses(String query) {\r\n+        final EntityManager em = emf.createEntityManager();\r\n+        final EntityTransaction tx = em.getTransaction();\r\n+\r\n+        tx.begin();\r\n+\r\n+        try {\r\n+            final List<Address> list =\r\n+                (List<Address>) em.createQuery(query).getResultList();\r\n+            tx.commit();\r\n+            return list;\r\n+        } finally {\r\n+            if (tx.isActive()) {\r\n+                tx.rollback();\r\n+            }\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n }\n\\ No newline at end of file"},{"sha":"636f14afd0129814b50f991b78e1edc4dbd3ec02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.DerbyProcedureList;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.ProcedureList;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that Native queries use only 1-based positional parameters and \n+ * disallows named parameters.\n+ * \n+ * Originally reported in \n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-112>OPENJPA-112</A>\n+ *  \n+ * @author B.J. Reed\n+ *\n+ */\n+public class TestNativeQueryProcedures extends SingleEMFTestCase {\n+    ProcedureList procedureList = null;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(Applicant.class, CLEAR_TABLES);\n+\n+        // Figure out which DB we have and get the proper DB Procedure List\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration) ojpaEmf.getConfiguration();\n+        \n+        if (conf.getDBDictionaryInstance() instanceof DerbyDictionary) {\n+            procedureList = new DerbyProcedureList();\n+        }\n+\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> createList = procedureList.getCreateProcedureList();\n+            try {\n+                for (String createProcedure : createList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(createProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+    }\n+\n+    public void tearDown() throws Exception {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> dropList = procedureList.getDropProcedureList();\n+            try {\n+                for (String dropProcedure : dropList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(dropProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+        super.tearDown();\n+    }\n+    \n+    public void testNoReturnNoParamProcedure() {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+\n+            Applicant applicant1 = new Applicant();\n+            applicant1.setName(\"Charlie\");\n+            Applicant applicant2 = new Applicant();\n+            applicant2.setName(\"Snoopy\");\n+\n+            em.getTransaction().begin();\n+            em.persist(applicant1);\n+            em.persist(applicant2);\n+            em.getTransaction().commit();\n+\n+            String sql = procedureList.callAddXToCharlie();\n+\n+            // query.getSingleResult() and query.getResultList() both throw an\n+            // exception: Statement.executeQuery() cannot be called with a\n+            // statement that returns a row count\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getSingleResult();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getSingleResult() with no returns \"+ \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getResultList();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getResultList() with no returns \" + \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+\n+            // This one should work properly\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.executeUpdate();\n+                em.getTransaction().commit();\n+            } catch (Exception e) {\n+                fail(\"Caught unexpected exception executing stored procedure: \"\n+                    + e.getMessage());\n+                em.getTransaction().commit();\n+            }\n+        \n+            em.clear();\n+            em.close();\n+            em = emf.createEntityManager();\n+            applicant1 = em.find(Applicant.class, applicant1.getId());\n+            applicant2 = em.find(Applicant.class, applicant2.getId());\n+\n+            // verify one changed and one didn't\n+            assertEquals(\"Charliex\", applicant1.getName());\n+            assertEquals(\"Snoopy\", applicant2.getName());\n+        \n+            em.clear();\n+            em.close();\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"ba0cce7f3b0b7b513446fc4956f5847759c0832b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+@Entity\n+@IdClass(InvoiceKey.class)\n+public class Invoice {\n+\n+    @Id\n+    private int id;\n+    @Id\n+    private String brandName;\n+    \n+    private double price;\n+\n+    @OneToMany(cascade={CascadeType.ALL})\n+    private List<LineItem> lineItems = new ArrayList<LineItem>();\n+\n+    public Invoice() {\n+    }\n+\n+    public Invoice(int id, String brandName, double price) {\n+        this.id = id;\n+        this.brandName = brandName;\n+        this.price = price;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getBrandName() {\n+        return brandName;\n+    }\n+\n+    public void setBrandName(String brandName) {\n+        this.brandName = brandName;\n+    }\n+\n+    public double getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(double price) {\n+        this.price = price;\n+    }\n+\n+    public List<LineItem> getLineItems() {\n+        return lineItems;\n+    }\n+\n+    public void setLineItems(List<LineItem> lineItems) {\n+        this.lineItems = lineItems;\n+    }\n+}"},{"sha":"0d49deb27a0bb235b9b4444b8037b24fa171a822","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+public class InvoiceKey {\n+\n+    private int id;\n+    private String brandName;\n+\n+    public InvoiceKey() {\n+    }\n+\n+    public InvoiceKey(int id, String brandName) {\n+        this.id = id;\n+        this.brandName = brandName;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        InvoiceKey invoiceKey = (InvoiceKey) o;\n+\n+        if (id != invoiceKey.id) return false;\n+        if (!brandName.equals(invoiceKey.brandName)) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = id;\n+        result = 31 * result + brandName.hashCode();\n+        return result;\n+    }\n+}"},{"sha":"e3c6fff092c6330432be1713af7bd33e2531170f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+import javax.persistence.*;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+@Entity\n+public class LineItem {\n+\n+    @Id\n+    private String id;\n+    private int quantity;\n+    \n+    @ManyToOne\n+    private Invoice invoice;\n+\n+    public LineItem() {\n+    }\n+\n+    public LineItem(String id, int quantity) {\n+        this.id = id;\n+        this.quantity = quantity;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public Invoice getInvoice() {\n+        return invoice;\n+    }\n+\n+    public void setInvoice(Invoice invoice) {\n+        this.invoice = invoice;\n+    }\n+}\n+"},{"sha":"3808a49e149bbe48a1121d563f3124b048299c13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -18,10 +18,10 @@\n  */\r\n package org.apache.openjpa.persistence.jdbc.query.cache;\r\n \r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n+import java.util.List;\r\n \r\n import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n import javax.persistence.Query;\r\n \r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n@@ -45,18 +45,21 @@\n  * \r\n  * @author Pinaki Poddar\r\n  * @author Vikram Bhatia\r\n- * \r\n+ * @author David Blevins\r\n  */\r\n public class TestNonPrimaryKeyQueryParameters extends SQLListenerTestCase {\r\n \tprivate static final int FULLTIME_EMPLOYEE_COUNT = 3;\r\n \tprivate static final int PARTTIME_EMPLOYEE_COUNT = 2;\r\n+    private static final int LINEITEM_PER_INVOICE = 1;\r\n \tprivate static final String DEPT_NAME = \"ENGINEERING\";\r\n \r\n \tpublic void setUp() {\r\n \t\tsuper.setUp(CLEAR_TABLES, Department.class, Employee.class,\r\n \t\t\t\tFullTimeEmployee.class, PartTimeEmployee.class,\r\n+\t\t\t\tInvoice.class, LineItem.class,\r\n \t\t\t\t\"openjpa.jdbc.QuerySQLCache\", \"true\");\r\n \t\tcreateDepartment(DEPT_NAME);\r\n+\t\tcreateInvoice();\r\n \t\tsql.clear();\r\n \t}\r\n \r\n@@ -103,6 +106,10 @@ public void testFind() {\n \t\t\t\t.size());\r\n \r\n \t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\t\r\n+        Invoice invoice = em.find(Invoice.class, new InvoiceKey(1, \"Red\"));\r\n+        List<LineItem> list = invoice.getLineItems();\r\n+        assertEquals(LINEITEM_PER_INVOICE, list.size());\r\n \t\tem.close();\r\n \t}\r\n \r\n@@ -154,4 +161,20 @@ private void createDepartment(String deptName) {\n \t\tem.close();\r\n \r\n \t}\r\n+\t\r\n+    private void createInvoice() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        tran.begin();\r\n+        Invoice invoice = new Invoice(1, \"Red\", 1.30);\r\n+        for (int i = 1;  i <= LINEITEM_PER_INVOICE; i++) {\r\n+            LineItem item = new LineItem(String.valueOf(i), 10);\r\n+            item.setInvoice(invoice);\r\n+            invoice.getLineItems().add(item);\r\n+            em.persist(invoice);\r\n+        }\r\n+        em.flush();\r\n+        tran.commit();\r\n+        em.close();        \r\n+    }\t\r\n }\r"},{"sha":"d3ad3c153f673864cdb77f788cf50c35242bfafc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,66 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.procedure;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/*\n+ * holds the stored procedures that will be used by test cases\n+ */\n+public class DerbyProcedureList extends ProcedureList {\n+\n+    public List<String> getCreateProcedureList () {\n+        ArrayList<String> retList = new ArrayList<String>();\n+\n+        retList.add (\"create procedure ADD_X_TO_CHARLIE () \" +\n+                     \"PARAMETER STYLE JAVA LANGUAGE JAVA MODIFIES SQL DATA \" +\n+                     \"EXTERNAL NAME 'org.apache.openjpa.persistence.jdbc.\" + \n+                     \"query.procedure.DerbyProcedureList.addXToCharlie'\");\n+        \n+\n+        return retList;\n+    }\n+\n+    public List<String> getDropProcedureList () {\n+        ArrayList<String> retList = new ArrayList<String>();\n+\n+        retList.add (\"drop procedure ADD_X_TO_CHARLIE\");\n+\n+        return retList;\n+    }\n+\n+    public String callAddXToCharlie () {\n+        return \"{ call ADD_X_TO_CHARLIE () }\";\n+    }\n+\n+    public static void addXToCharlie () throws Exception {\n+        Connection conn = DriverManager.getConnection(\n+            \"jdbc:default:connection\");\n+        PreparedStatement ps1 = conn.prepareStatement(\"update APPLICANT set \" + \n+            \"name = 'Charliex' where name = 'Charlie'\");\n+        ps1.executeUpdate();\n+\n+        conn.close();\n+    }\n+}"},{"sha":"e23b64816e5143bbf3a7e830a2f4eedae5da869c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.procedure;\n+\n+import java.util.List;\n+\n+/*\n+ * holds the stored procedures that will be used by test cases\n+ */\n+public abstract class ProcedureList {\n+\n+    abstract public List<String> getCreateProcedureList ();\n+\n+    abstract public List<String> getDropProcedureList ();\n+\n+    abstract public String callAddXToCharlie ();\n+\n+    // This method should also be overriden, but it needs to be static so \n+    // that it can be called as a stored procedure\n+    public static void addXToCharlie () throws Exception {\n+        Exception e = new Exception (\"Method not implemented by inheriting \" + \n+            \"class\");\n+        throw e;\n+    }\n+}"},{"sha":"91ef920112e76d7d94bf409dae392734e00c8b76","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public abstract class AbstractNullityTestCase extends SingleEMFTestCase {\n+    protected static boolean NEW = true;\n+    \n+    /**\n+     * Asserts that the given instance can not be committed.\n+     */\n+    void assertCommitFails(Object pc, boolean isNew,\n+        Class<? extends Exception> expected) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        if (isNew) {\n+            em.persist(pc);\n+        }\n+        else {\n+            em.merge(pc);\n+        }\n+        try {\n+            em.getTransaction().commit();\n+            fail();\n+        } catch (Exception e) {\n+            if (!expected.isAssignableFrom(e.getClass())) {\n+                e.printStackTrace();\n+                fail(\"Expected \" + expected.getName());\n+            } \n+        }\n+    }\n+    \n+    void assertCommitSucceeds(Object pc, boolean isNew) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        if (isNew)\n+            em.persist(pc);\n+        else \n+            em.merge(pc);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RuntimeException e) {\n+            e.printStackTrace();\n+            fail();\n+        }\n+    }\n+}"},{"sha":"4105983867eefec3807d1874f11f3e80a19b2a18","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -30,4 +30,23 @@\n     private String  strVal;\n     private int     intVal;\n     private byte[]  bytes;\n+    \n+    public String getStrVal() {\n+        return strVal;\n+    }\n+    public void setStrVal(String strVal) {\n+        this.strVal = strVal;\n+    }\n+    public int getIntVal() {\n+        return intVal;\n+    }\n+    public void setIntVal(int intVal) {\n+        this.intVal = intVal;\n+    }\n+    public byte[] getBytes() {\n+        return bytes;\n+    }\n+    public void setBytes(byte[] bytes) {\n+        this.bytes = bytes;\n+    }\n }"},{"sha":"4487c807169f74317002a2a7d6a91476a9e39c3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -147,4 +147,8 @@ public BlobValue getNotOptionalBlob() {\n \tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\r\n \t\tthis.notOptionalBlob = notOptionalBlob;\r\n \t}\r\n+\t\r\n+\tpublic int getVersion() { \r\n+\t    return version;\r\n+\t}\r\n }\r"},{"sha":"f1ef9da4aa92cbc53031fdaa2a344b51f18449ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":1,"deletions":43,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -18,13 +18,10 @@\n  */\r\n package org.apache.openjpa.persistence.nullity;\r\n \r\n-import javax.persistence.EntityManager;\r\n import javax.persistence.RollbackException;\r\n \r\n import org.apache.openjpa.persistence.InvalidStateException;\r\n import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n \r\n /**\r\n  * Test @Basic(optional=true|false) and @Column(nullable=true|false) \r\n@@ -34,8 +31,7 @@\n  *\r\n  * @author Pinaki Poddar\r\n  */\r\n-public class TestBasicFieldNullity extends SingleEMFTestCase {\r\n-\tprivate static boolean NEW = true;\r\n+public class TestBasicFieldNullity extends AbstractNullityTestCase {\r\n \r\n     public void setUp() {\r\n         setUp(CLEAR_TABLES, NullValues.class);\r\n@@ -116,44 +112,6 @@ public void testX() {\n     \t\r\n     \tpc.setNotNullableBlob(null);\r\n     \tassertCommitFails(pc, !NEW, RollbackException.class);\r\n-    \t\r\n-    }\r\n-    \r\n-    /**\r\n-     * Asserts that the given instance can not be committed.\r\n-     */\r\n-    void assertCommitFails(Object pc, boolean isNew, Class expected) {\r\n-    \tEntityManager em = emf.createEntityManager();\r\n-    \tem.getTransaction().begin();\r\n-    \tif (isNew)\r\n-    \t\tem.persist(pc);\r\n-    \telse {\r\n-    \t\tObject merged = em.merge(pc);\r\n-    \t}\r\n-    \ttry {\r\n-\t\t\tem.getTransaction().commit();\r\n-\t\t\tfail();\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tif (!expected.isAssignableFrom(e.getClass())) {\r\n-\t\t\t\te.printStackTrace();\r\n-\t\t\t\tfail(\"Expected \" + expected.getName());\r\n-\t\t\t} \r\n-\t\t}\r\n-    }\r\n-    \r\n-    void assertCommitSucceeds(Object pc, boolean isNew) {\r\n-    \tEntityManager em = emf.createEntityManager();\r\n-    \tem.getTransaction().begin();\r\n-    \tif (isNew)\r\n-    \t\tem.persist(pc);\r\n-    \telse \r\n-    \t\tem.merge(pc);\r\n-    \ttry {\r\n-\t\t\tem.getTransaction().commit();\r\n-\t\t} catch (RuntimeException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t\tfail();\r\n-\t\t}\r\n     }\r\n }\r\n \r"},{"sha":"2623fa148766b336a2203b09ba61a946fd6b57ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.AbstractDB2Dictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Testcase that verifies that null checking is omitted for \"read only\" fields.\n+ * An example use case is a Date field that is set by the database (although in\n+ * that case the field would be updateable=false and insertable=false).  \n+ */\n+public class TestReadOnlyNullity extends AbstractNullityTestCase {\n+\n+    private boolean skip = false;\n+\n+    public void setUp() {\n+        OpenJPAEntityManagerFactorySPI emf = createEMF(new Object[] {});\n+        if (((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance() instanceof AbstractDB2Dictionary) {\n+\n+            setUp(CLEAR_TABLES, TimestampedEntity.class);\n+        } else {\n+            skip = true;\n+        }\n+    }\n+\n+    /**\n+     * Test that a non-insertable field may be set to null. This test is skipped\n+     * for non-db2 databases. \n+     */\n+    public void testNonInsertableBlobDoesNotFail() {\n+        if (!skip) {\n+            TimestampedEntity pc = new TimestampedEntity();\n+            pc.setNonInsertableNonNullableDate(null);\n+            assertCommitSucceeds(pc, NEW);\n+        }\n+        // else no-op\n+    }\n+\n+    /**\n+     * Test that a non-updatable field may be set to null. This test is skipped\n+     * for non-db2 databases. \n+     */\n+    public void testNonUpdatableBlobDoesNotFail() {\n+        if (!skip) {\n+            TimestampedEntity pc = new TimestampedEntity();\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.persist(pc);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            pc.setNonUpdatableNonNullableDate(null);\n+            assertCommitSucceeds(pc, !NEW);\n+        }\n+        // else no-op\n+    }\n+}"},{"sha":"84d9a2f77e3bea86669d9ba58c9080c912b310f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import java.sql.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * This Entity contains two date fields which are updated by the database. The\n+ * fields are non-insertable and non-updatable respectively making them read\n+ * only in many situations. The fields should be ignored when persisting or\n+ * updating an entity (again respectively).\n+ * \n+ * <P>\n+ * <b>The syntax used for the database to generate the date column is specific\n+ * to Derby and DB2. Any testcase which uses this entity must ensure that one of\n+ * those databases is used, or use pre-existing tables</b>\n+ * </P>\n+ */\n+@Entity\n+public class TimestampedEntity {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @Column(nullable = false, insertable = false, \n+        columnDefinition = \"DATE default '2008-01-01'\")\n+    private Date nonInsertableNonNullableDate;\n+\n+    @Column(nullable = false, updatable = false, \n+        columnDefinition = \"DATE default '2008-01-01'\")\n+    private Date nonUpdatableNonNullableDate;\n+\n+    public TimestampedEntity() { \n+        setNonUpdatableNonNullableDate(new Date(52349606));\n+    }\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public Date getNonInsertableNonNullableDate() {\n+        return nonInsertableNonNullableDate;\n+    }\n+\n+    public void setNonInsertableNonNullableDate(\n+        Date nonInsertableNonNullableDate) {\n+        this.nonInsertableNonNullableDate = nonInsertableNonNullableDate;\n+    }\n+\n+    public Date getNonUpdatableNonNullableDate() {\n+        return nonUpdatableNonNullableDate;\n+    }\n+\n+    public void setNonUpdatableNonNullableDate(\n+        Date nonUpdatableNonNullableDate) {\n+        this.nonUpdatableNonNullableDate = nonUpdatableNonNullableDate;\n+    }\n+}"},{"sha":"b465a61170b7ea6b3cfb596360c456a094709d4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Table(name=\"SUBQ_DEPENDENT\")\n+public class Dependent {\n+    @EmbeddedId\n+    private DependentId id;\n+\n+    @OneToOne\n+    private Employee emp;\n+    \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date endDate;\n+    \n+    private int curStatusId;\n+\n+    public int getCurStatusId() {\n+        return curStatusId;\n+    }\n+\n+    public void setCurStatusId(int curStatusId) {\n+        this.curStatusId = curStatusId;\n+    }\n+\n+    public DependentId getId() {\n+        return id;\n+    }\n+\n+    public void setId(DependentId id) {\n+        this.id = id;\n+    }\n+\n+    public Employee getEmp() {\n+        return emp;\n+    }\n+\n+    public void setEmp(Employee emp) {\n+        this.emp = emp;\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+}"},{"sha":"24c0a7ec5f64df1c3d3e5999b09c7b048bbbf27e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class DependentId {\n+    private String name;\n+    private long empid; \n+    private Date effDate;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(long empid) {\n+        this.empid = empid;\n+    }\n+\n+    public Date getEffDate() {\n+        return effDate;\n+    }\n+\n+    public void setEffDate(Date effDate) {\n+        this.effDate = effDate;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((effDate == null) ? 0 : effDate.hashCode());\n+        result = prime * result + (int) (empid ^ (empid >>> 32));\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        DependentId other = (DependentId) obj;\n+        if (effDate == null) {\n+            if (other.effDate != null)\n+                return false;\n+        } else if (!effDate.equals(other.effDate))\n+            return false;\n+        if (empid != other.empid)\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"e8321a100318ab8e3032ce24b567b9db4642bfd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SUBQ_EMPLOYEE\")\n+public class Employee {\n+\n+    @Id \n+    private long empId;\n+    private String name;\n+    \n+    private long someLong;\n+\n+    private int statusId; \n+\n+    public int getStatusId() {\n+        return statusId;\n+    }\n+\n+    public void setStatusId(int statusId) {\n+        this.statusId = statusId;\n+    }\n+\n+    public long getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(long empId) {\n+        this.empId = empId;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getSomeLong() {\n+        return someLong;\n+    }\n+\n+    public void setSomeLong(long someLong) {\n+        this.someLong = someLong;\n+    }\n+\n+    \n+}\n\\ No newline at end of file"},{"sha":"664bae729d13c43f77c8dac2200d878b8fa31a44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.FetchType;\n+import java.sql.Date;\n+\n+@Entity\n+public class Magazine implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+    \n+    @Column(name=\"date_published\")\n+    private Date datePublished;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"id_publisher\")\n+    private Publisher idPublisher;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Publisher getIdPublisher() {\n+        return this.idPublisher;\n+    }\n+\n+    public void setIdPublisher(Publisher idPublisher) {\n+        this.idPublisher = idPublisher;\n+    }\n+    \n+    public Date getDatePublished() {\n+        return datePublished;\n+    }\n+\n+    public void setDatePublished(Date datePublished) {\n+        this.datePublished = datePublished;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"ea0f51d8fde0e536156494a07a287aa572139084","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.OneToMany;\n+import java.util.Set;\n+\n+@Entity\n+public class Publisher implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"idPublisher\",  fetch=FetchType.EAGER)\n+    private Set<Magazine> magazineCollection;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<Magazine> getMagazineCollection() {\n+        return this.magazineCollection;\n+    }\n+\n+    public void setMagazineCollection(Set<Magazine> magazineCollection) {\n+        this.magazineCollection = magazineCollection;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"528efaaadccf1a4c2a41c465226a422ac5bb4b0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.util.Date;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -31,8 +33,9 @@\n     extends SingleEMFTestCase {\n \n     public void setUp() {\n-        setUp(Customer.class, Customer.CustomerKey.class,\n-            Order.class, OrderItem.class, CLEAR_TABLES);\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n+            OrderItem.class, Magazine.class, Publisher.class, Employee.class,\n+            Dependent.class, DependentId.class, CLEAR_TABLES);\n     }\n \n     static String[]  querys = new String[] {\n@@ -66,6 +69,18 @@ public void setUp() {\n             \" and (select min(o2.amount) from Customer c, in(c.orders) o2)\",\n         \"select o.oid from Customer c, in(c.orders)o where o.amount >\" +\n             \" (select sum(o2.amount) from c.orders o2)\",\n+        \"select o1.oid, c.name from Order o1, Customer c where o1.amount = \" +\n+            \" any(select o2.amount from in(c.orders) o2)\",\n+        \"SELECT p, m \"+\n+            \"FROM Publisher p \"+\n+            \"LEFT OUTER JOIN p.magazineCollection m \"+\n+            \"WHERE m.id = (SELECT MAX(m2.id) \"+\n+            \"FROM Magazine m2 \"+\n+            \"WHERE m2.idPublisher.id = p.id \"+\n+            \"AND m2.datePublished = \"+\n+            \"(SELECT MAX(m3.datePublished) \"+\n+            \"FROM Magazine m3 \"+\n+            \"WHERE m3.idPublisher.id = p.id)) \", \n     // outstanding problem subqueries:\n     //\"select o from Order o where o.amount > (select count(o) from Order o)\",\n     //\"select o from Order o where o.amount > (select count(o2) from Order o2)\",\n@@ -98,4 +113,25 @@ public void testSubquery() {\n         em.getTransaction().rollback();\n         em.close();\n     }\n+    \n+    /**\n+     * Verify a sub query can contain MAX and additional date comparisons \n+     * without losing the correct alias information. This sort of query \n+     * originally caused problems for DBDictionaries which used DATABASE syntax. \n+     */\n+    public void testSubSelectMaxDateRange() {        \n+        String query =\n+            \"SELECT e,d from Employee e, Dependent d \"\n+                + \"WHERE e.empId = :empid \"\n+                + \"AND d.id.empid = (SELECT MAX (e2.empId) FROM Employee e2) \"\n+                + \"AND d.id.effDate > :minDate \"\n+                + \"AND d.id.effDate < :maxDate \";\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(query);\n+        q.setParameter(\"empid\", (long) 101);\n+        q.setParameter(\"minDate\", new Date(100));\n+        q.setParameter(\"maxDate\", new Date(100000));\n+        q.getResultList();\n+        em.close();\n+    }\n }"},{"sha":"6f785cd647c178698b94acde6a172b39b222d248","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@IdClass(C.CId.class)\n+@Table(name=\"C4\")\n+public class C {\n+\t\n+\t@Id\n+\tprivate String cId;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+    private CM cm;\n+\n+\t@OneToMany(mappedBy=\"c\")\n+\tprivate Set<D> ds = new HashSet<D>();\n+\n+    public C() {\n+    }\n+    \n+    public String getCId() {\n+        return cId;\n+    }\n+\n+    public void setCId(String cId) {\n+        this.cId = cId;\n+    }\n+\n+    public CM getCm() {\n+\t\treturn cm;\n+\t}\n+\n+\tpublic void setCm(CM cm) {\n+\t\tthis.cm = cm;\n+\t}\n+\n+\tpublic Set<D> getDs() {\n+\t\treturn ds;\n+\t}\n+\n+\tpublic void setDs(Set<D> ds) {\n+\t\tthis.ds = ds;\n+\t}\n+    \n+    public static class CId{\n+    \tString cId;\n+    \tCM.CMId  cm;\n+    \t\n+\t\tpublic String getCId() {\n+\t\t\treturn cId;\n+\t\t}\n+\t\tpublic void setCId(String id) {\n+\t\t\tcId = id;\n+\t\t}\n+    \t\n+\t\t\n+\t\tpublic CM.CMId getCm() {\n+\t\t\treturn cm;\n+\t\t}\n+\t\tpublic void setCm(CM.CMId cm) {\n+\t\t\tthis.cm = cm;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj) return true;\n+\t\t\tif (obj == null || !(obj instanceof CId))\n+\t\t\t\treturn false;\n+\t\t\t\n+\t\t\tCId id = (CId) obj;\n+\t\t\t\n+\t\t\treturn (this.getCId() == id.getCId() || (this.getCId() != null &&\n+                this.getCId().equals(id.getCId())))\n+\t\t\t\t&& (this.getCm() == id.getCm() || (this.getCm() != null &&\n+                this.getCm().equals(id.getCm())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn ((this.getCId() != null) ? this.getCId().hashCode():0)\n+\t\t\t\t ^ ((this.getCm() != null)? this.getCm().hashCode():0);\n+\t\t}\n+    }\n+}"},{"sha":"7af46e7c0c0ac6ef8e3d6842817f4cab13a60802","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@IdClass(CM.CMId.class)\n+@Table(name=\"CM4\")\n+public class CM {\n+\t\n+\t@Id\n+    private String cmId;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"cm\")\n+    private Set<C> cs = new HashSet<C>();\n+\n+    @ManyToOne\n+    @ForeignKey\n+    @Id\n+    private E e;\n+    \n+    public CM() {\n+    }\n+\n+    public String getCmId() {\n+        return cmId;\n+    }\n+\n+    public void setCmId(String cmId) {\n+        this.cmId = cmId;\n+    }\n+\n+\tpublic Set<C> getCs() {\n+\t\treturn cs;\n+\t}\n+\n+\tpublic void setCs(Set<C> cs) {\n+\t\tthis.cs = cs;\n+\t}\n+\t\n+\tpublic void addC(C c){\n+\t\tcs.add(c);\n+\t\tc.setCm(this);\n+\t}\n+\n+\tpublic E getE() {\n+\t\treturn e;\n+\t}\n+\n+\tpublic void setE(E e) {\n+\t\tthis.e = e;\n+\t}\n+\n+\tpublic static class CMId{\n+\t\tprivate String cmId;\n+\t\tprivate String e;\n+\t\t\n+\t\tpublic String getCmId() {\n+\t\t\treturn cmId;\n+\t\t}\n+\t\tpublic void setCmId(String id) {\n+\t\t\tcmId = id;\n+\t\t}\n+\t\t\n+\t\tpublic String getE() {\n+\t\t\treturn e;\n+\t\t}\n+\t\tpublic void setE(String e) {\n+\t\t\tthis.e = e;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\t\t\t\n+\t\t\tif (obj == null && ! (obj instanceof CMId))\n+\t\t\t\treturn false;\n+\t\t\tCMId id = (CMId) obj;\n+\t\t\treturn ( this.getCmId() == id.getCmId() ||\n+                (this.getCmId() != null && this.getCmId().equals(id.getCmId())))\n+\t\t\t\t&& ( this.getE() == id.getE() || (this.getE() != null &&\n+                this.getE().equals(id.getE())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getCmId() != null? this.getCmId().hashCode():0) \n+\t\t\t\t ^ (this.getE()!= null ? this.getE().hashCode():0);\n+\t\t}\n+\t}\n+\n+}"},{"sha":"17b318d58c2c5c1921c877bb219d6ef505d70c67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityA {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long aId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+\tprotected Set<ChainEntityB> chainEntityBSet;\n+\n+\tpublic ChainEntityA () {\n+\t\tsuper ();\n+\t}\n+\n+\tpublic void addChildEntityB (ChainEntityB bean) {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\tchainEntityBSet.add (bean);\n+\t}\n+\n+\tpublic Collection<ChainEntityB> getChildren () {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\treturn chainEntityBSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn aId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.aId = id;\n+\t}\n+}"},{"sha":"5722823e6c30d045a298b7fcc5dd5e2d9efcad97","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityB {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long bId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t//cascade = CascadeType.ALL, \n+\t@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"chainEntityB\")\n+\tprotected Set<ChainEntityC> chainEntityCSet = null;\n+\n+\tpublic void addChainEntityC (ChainEntityC bean) {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\tchainEntityCSet.add (bean);\n+\t\tbean.setChainEntityB (this);\n+\t}\n+\n+\tpublic Collection<ChainEntityC> getChainEntityCSet () {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\treturn chainEntityCSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn bId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.bId = id;\n+\t}\n+\n+}"},{"sha":"334ed5c76b9363219615f4d5e1b6ea4f9f02964e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityC {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long cId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.ALL)\n+\tprotected ChainEntityB chainEntityB;\n+\n+\t@Basic\n+\tprotected long chainEntityBId;\n+\n+\tpublic void setChainEntityB (ChainEntityB b) {\n+\t\tthis.chainEntityB = b;\n+//\t\tthis.chainEntityBId = null == b ? 0 : b.getId ();\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn cId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.cId = id;\n+\t}\n+\n+}"},{"sha":"6c6129b6a2d434c12e6607d8dd546eb2b0fa985f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+\n+@Entity\n+@Table(name=\"D4\")\n+@IdClass(D.CId.class)\n+public class D {\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\tprivate C c;\n+\n+\t@Id\n+\tprivate String id;\n+\t\n+\tprivate String a;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate VC vc;\n+\n+\tpublic D() {\n+\t}\n+\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n+\tpublic String getA() {\n+\t\treturn a;\n+\t}\n+\n+\tpublic void setA(String a) {\n+\t\tthis.a = a;\n+\t}\n+\n+\tpublic C getC() {\n+\t\treturn c;\n+\t}\n+\n+\tpublic void setC(C c) {\n+\t\tthis.c = c;\n+\t}\n+\n+\tpublic VC getVc() {\n+\t\treturn vc;\n+\t}\n+\n+\tpublic void setVc(VC vc) {\n+\t\tthis.vc = vc;\n+\t}\n+\t\n+\t\n+\tpublic static class CId{\n+\t\tprivate String id;\n+\t\t\n+\t\tprivate VC.VCId vc;\n+\t\t\n+\t\tpublic VC.VCId getVc() {\n+\t\t\treturn vc;\n+\t\t}\n+\t\tpublic void setVc(VC.VCId vc) {\n+\t\t\tthis.vc = vc;\n+\t\t}\n+\t\t\n+\t\tpublic String getId() {\n+\t\t\treturn id;\n+\t\t}\n+\t\tpublic void setId(String id) {\n+\t\t\tthis.id = id;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null ||  ! (obj instanceof CId))\n+\t\t\t\treturn false;\n+\t\t\tCId id = (CId) obj;\n+\t\t\treturn (this.getId() == id.getId() || (this.getId() != null &&\n+                this.getId().equals(id.getId())))\n+\t\t\t\t&& (this.getVc() == id.getVc() || (this.getVc() != null &&\n+                this.getVc().equals(id.getVc())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getId() != null ? this.getId().hashCode():0)\n+\t\t\t     ^ (this.getVc() != null ? this.getVc().hashCode():0);\n+\t\t}\n+\t\t\t\t\n+\t}\n+\n+}"},{"sha":"2e0bb1fd2194b602d829b11e1810e24c31f92f9e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"E4\")\n+public class E {\n+\n+\t@Id\n+\tprivate String eId;\n+\n+\tprivate String name;\n+\n+\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"e\")\n+\tprivate Set<VCS> vcss = new HashSet<VCS>();\n+\n+\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"e\")\n+\tprivate Set<CM> cms = new HashSet<CM>();\n+\n+\tpublic E() {\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Set<CM> getCms() {\n+\t\treturn cms;\n+\t}\n+\n+\tpublic void setCms(Set<CM> cms) {\n+\t\tthis.cms = cms;\n+\t}\n+\n+\tpublic String getEId() {\n+\t\treturn eId;\n+\t}\n+\n+\tpublic void setEId(String id) {\n+\t\teId = id;\n+\t}\n+\n+\tpublic Set<VCS> getVcss() {\n+\t\treturn vcss;\n+\t}\n+\n+\tpublic void setVcss(Set<VCS> vcss) {\n+\t\tthis.vcss = vcss;\n+\t}\n+}"},{"sha":"ec9e484577f9e2dca7aefab62d5abee786648f16","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyEagerChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"PARENT_ID\")\n+    private OneManyEagerParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneManyEagerParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneManyEagerParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"672691ac18eb748ca8907dd29bca089be7418571","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyEagerParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<OneManyLazyChild> lazychildren = \n+        new ArrayList<OneManyLazyChild>();\n+\n+    @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<OneManyEagerChild> eagerchildren = \n+        new ArrayList<OneManyEagerChild>();\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<OneManyLazyChild> getLazyChildren() { \n+        return lazychildren; \n+    }\n+\n+    public void addLazyChild(OneManyLazyChild child) {\n+        child.setParent(this);\n+        lazychildren.add(child);\n+    }\n+\n+    public List<OneManyEagerChild> getEagerChildren() { \n+        return eagerchildren; \n+    }\n+\n+    public void addEagerChild(OneManyEagerChild child) {\n+        child.setParent(this);\n+        eagerchildren.add(child);\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"62ff6addaf907cb99e310c7406c7671d8f4fd343","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyLazyChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"PARENT_ID\")\n+    private OneManyEagerParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneManyEagerParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneManyEagerParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"c88f0fef1207c0334d8ece9b41f7f67ad89ba45a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneOneChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne\n+    private OneOneParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneOneParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneOneParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"311b62a9b685eb28ea1725578ba9e0bb314a412e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneOneParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne(mappedBy=\"parent\")\n+    private OneOneChild child;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneOneChild getChild() { \n+        return child; \n+    }\n+\n+    public void setChild(OneOneChild child) { \n+        this.child = child; \n+    }\n+}"},{"sha":"7b8bced0530305804cbd934f1f770f585b18337a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+public class TblChild {\n+\n+\t@Id\n+\t@Column(name = \"CHILD_ID\",nullable=false)\n+\tprivate Integer childId;   \n+\n+\t@Version\n+\t@Column(name = \"VRS_NBR\")\n+\tprivate Integer vrsNbr;   \n+\n+\t@OneToMany(mappedBy=\"tblChild\",fetch = FetchType.EAGER,\n+\t\t\tcascade = {CascadeType.PERSIST,CascadeType.MERGE})\n+\tprivate Collection<TblGrandChild> tblGrandChildren = \n+        new ArrayList<TblGrandChild>();\n+\n+\t@ManyToOne(fetch = FetchType.LAZY,\n+\t\t\tcascade = {CascadeType.PERSIST,CascadeType.MERGE })\n+\t@JoinColumns({@JoinColumn(name =\n+\t\t\"PARENT_ID\",referencedColumnName=\"PARENT_ID\")})   \n+\t@ForeignKey\n+\tprivate TblParent tblParent;\n+\n+\tpublic Integer getChildId() {\n+\t\treturn childId;\n+\t}\n+\t\n+\tpublic void setChildId(Integer childId) {\n+\t\tthis.childId = childId;\n+\t}\n+\t\n+\tpublic Integer getVrsNbr() {\n+\t\treturn vrsNbr;\n+\t}\n+\t\n+\tpublic void setVrsNbr(Integer vrsNbr) {\n+\t\tthis.vrsNbr = vrsNbr;\n+\t}\n+\n+\tpublic Collection<TblGrandChild> getTblGrandChildren() {\n+\t\treturn tblGrandChildren;\n+\t}\n+\t\n+\tpublic void setTblGrandChildren(Collection<TblGrandChild>\n+        tblGrandChildren) {\n+\t\tthis.tblGrandChildren = tblGrandChildren;\n+\t}\n+\t\n+\tpublic void addTblGrandChild(TblGrandChild tblGrandChild) {\n+\t\ttblGrandChild.setTblChild(this);\n+\t\ttblGrandChildren.add(tblGrandChild);\n+\t}\n+\t\n+\tpublic void removeTblGrandChild(TblGrandChild tblGrandChild) {\n+\t\ttblGrandChild.setTblChild(null);\n+\t\ttblGrandChildren.remove(tblGrandChild);\n+\t}\n+\t\n+\tpublic TblParent getTblParent() {\n+\t\treturn tblParent;\n+\t}\n+\n+\tpublic void setTblParent(TblParent tblParent) {\n+\t\tthis.tblParent = tblParent;\n+\t}\n+}"},{"sha":"aa064f20483d31dadec4233cf5905cc0ed72a9e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+public class TblGrandChild {\n+\n+\t@Id\n+\t@Column(name = \"GC_ID\",nullable=false)\n+\tprivate Integer grandChildId;   \n+\n+\t@Version\n+\t@Column(name = \"VRS_NBR\")\n+\tprivate Integer vrsNbr;   \n+\n+\t@ManyToOne(fetch = FetchType.LAZY,\n+\t\tcascade = {CascadeType.PERSIST,CascadeType.MERGE })\n+\t@JoinColumns({@JoinColumn(name =\n+\t\t\"CHILD_ID\",referencedColumnName=\"CHILD_ID\")})   \n+\t@ForeignKey\n+\tprivate TblChild tblChild;\n+\t\n+\tpublic Integer getGrandChildId() {\n+\t\treturn grandChildId;\n+\t}\n+\t\n+\tpublic void setGrandChildId(Integer grandChildId) {\n+\t\tthis.grandChildId = grandChildId;\n+\t}\n+\t\n+\tpublic Integer getVrsNbr() {\n+\t\treturn vrsNbr;\n+\t}\n+\t\n+\tpublic void setVrsNbr(Integer vrsNbr) {\n+\t\tthis.vrsNbr = vrsNbr;\n+\t}\n+\n+\tpublic TblChild getTblChild() {\n+\t\treturn tblChild;\n+\t}\n+\t\n+\tpublic void setTblChild(TblChild tblChild) {\n+\t\tthis.tblChild = tblChild;\n+\t}\n+}\n+\n+"},{"sha":"f4f64ab64571ac9af82b26d1c732e7721b5a0290","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+@Entity\n+public class TblParent {\n+\n+\t@Id\n+\t@Column(name = \"PARENT_ID\")\n+\tprivate Integer parentId;\n+\t\n+\t@OneToMany(mappedBy=\"tblParent\",fetch = FetchType.LAZY,cascade = {\n+\t\tCascadeType.PERSIST,CascadeType.MERGE })\n+\tprivate Collection<TblChild> tblChildren = new ArrayList<TblChild>();\t\n+\t\n+\tpublic Integer getParentId() {\n+\t\treturn parentId;\n+\t}\n+\t\n+\tpublic void setParentId(Integer parentId) {\n+\t\tthis.parentId = parentId;\n+\t}\n+\n+\tpublic Collection<TblChild> getTblChildren() {\n+\t\treturn tblChildren;\n+\t}\n+\t\n+\tpublic void setTblChildren(Collection<TblChild> tblChildren) {\n+\t\tthis.tblChildren = tblChildren;\n+\t}\n+\t\n+\tpublic void addTblChild(TblChild tblChild) {\n+\t\ttblChildren.add(tblChild);\n+\t} \n+}"},{"sha":"2b32fff481a900d5735762757502f25971dae713","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestChainEntities extends SingleEMFTestCase {\n+\n+\t/*\n+\t * Set this magical number to 3 or less to avoid the error.\n+\t */\n+\tprivate static final int MAGICAL_NUMBER = 50;\n+\t\n+\tlong aid;\n+\n+\tpublic void setUp () {\n+\t\tsetUp (DROP_TABLES,\n+\t\t    ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n+\t\t// Create A\n+\t\tChainEntityA a = new ChainEntityA ();\n+\t\ta.setName (\"TEST_A\");\n+\t\t// Persist A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\tem.persist (a);\n+\t\taid = a.getId ();\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\tSystem.out.println (\"ChainEntityA id = \" + aid);\n+\t}\n+\n+\tpublic void testChainEntities () {\n+\t\tchainUpdate ();\n+\t}\n+\t\n+\tprotected void chainUpdate () {\n+\t\t// Get A\n+\t\tChainEntityA a = getA ();\n+\t\t// Create B\n+\t\tChainEntityB b = new ChainEntityB ();\n+\t\tb.setName (\"Test_B_\");\n+\t\tChainEntityC c;\n+\t\t/*\n+\t\t * Create and add C to B. Increasing the number of iterations (number of\n+\t\t * ChainEntityC) increases the probability to get the unique key\n+\t\t * constraint violation error.\n+\t\t */\n+\t\tfor (int i = 1; i <= MAGICAL_NUMBER; i++) {\n+\t\t\tc = new ChainEntityC ();\n+\t\t\tc.setName (\"Test_C_\" + i);\n+\t\t\tb.addChainEntityC (c);\n+\t\t}\n+\t\ta.addChildEntityB (b);\n+\t\t// dump (a);  // debug\n+\t\t// Merge A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\ta = em.merge (a);\n+\t\t/*\n+\t\t * workaround: Uncommenting following line is a workaround. If we\n+\t\t * retrive Ids of ChainEntityC objects after merge but before commit we\n+\t\t * don't get the error.\n+\t\t */\n+\t\t//dump (a);\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\t// dump (getA ());  // debug\n+\t}\n+\n+\t/**\n+\t * Get created ChainEntityA using aid field.\n+\t * \n+\t * @return\n+\t */\n+\tprotected ChainEntityA getA () {\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tChainEntityA a = em.find (ChainEntityA.class, aid);\n+\t\tem.close ();\n+\t\treturn a;\n+\t}\n+\n+\t/**\n+\t * Print the object graph of given ChainEntityA to System.out\n+\t * \n+\t * @param testA\n+\t */\n+\tprotected void dump (ChainEntityA testA) {\n+\t\tSystem.out.println (\"-------\");\n+\t\tSystem.out.println (testA.getName () + \"[\" + testA.getId () + \"]\");\n+\t\tfor (ChainEntityB testB : testA.getChildren ()) {\n+\t\t\tSystem.out.println (testB.getName () + \"[\" + testB.getId () + \"]\");\n+\t\t\tfor (ChainEntityC testC : testB.getChainEntityCSet ()) {\n+\t\t\t\tSystem.out.println (testC.getName () + \"[\" + testC.getId ()\n+\t\t\t\t\t\t+ \"]\");\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println (\"-------\");\n+\t}\n+\n+}"},{"sha":"d4be3634cd884256e95fdeddeac6b779ebf50d1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":56,"deletions":2,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -21,12 +21,16 @@\n import java.util.Collection;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n+import java.util.Set;\r\n+\r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n import junit.textui.TestRunner;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.query.Magazine;\r\n+import org.apache.openjpa.persistence.query.Publisher;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n \r\n@@ -36,7 +40,8 @@\n     public void setUp() {\r\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class, \r\n         \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \r\n-        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class);\r\n+        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class,\r\n+            Publisher.class, Magazine.class);\r\n         \r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n@@ -93,7 +98,29 @@ public void setUp() {\n             c1.setD(d1);\r\n             d1.setC(c1);\r\n         }\r\n-        \r\n+\r\n+        Publisher p1 = new Publisher();\r\n+        p1.setName(\"publisher1\");\r\n+        em.persist(p1);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p1);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p1.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n+        Publisher p2 = new Publisher();\r\n+        p2.setName(\"publisher2\");\r\n+        em.persist(p2);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p2);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n         em.flush();\r\n         em.getTransaction().commit();\r\n         em.close();\r\n@@ -197,6 +224,33 @@ public void testOneToManyInheritanceQuery() {\n         em.close();\r\n     }\r\n \r\n+    public void testOneToManyEagerInverseLazyQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select p FROM Publisher p\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(2, list.size());\r\n+        assertEquals(2, sql.size());\r\n+\r\n+        sql.clear();\r\n+        em.clear();\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            Publisher p = (Publisher) list.get(i);\r\n+            Set<Magazine> magazines = p.getMagazineCollection();\r\n+            assertEquals(4, magazines.size());\r\n+            for (Iterator iter = magazines.iterator(); iter.hasNext();) {\r\n+                Magazine m = (Magazine) iter.next();\r\n+                Publisher mp = m.getIdPublisher();\r\n+                assertEquals(p, mp);\r\n+            }\r\n+        }\r\n+\r\n+        assertEquals(0, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n     public static void main(String[] args) {\r\n         TestRunner.run(TestInverseEagerSQL.class);\r\n     }\r"},{"sha":"2de819e446cf481e952e9b07bcf350821ceb075b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+\n+public class TestManyEagerSQL\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(DROP_TABLES,\n+            OneManyEagerParent.class, OneManyEagerChild.class,\n+            OneManyLazyChild.class, OneOneParent.class, \n+            OneOneChild.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        for (int j = 0; j < 2; j++) {\n+            OneManyEagerParent parent = new OneManyEagerParent();\n+            parent.setName(\"parent\"+j);\n+            for (int i = 0; i < 2; i++) {\n+                OneManyEagerChild child = new OneManyEagerChild();\n+                child.setName(\"eagerchild\" + i);\n+                parent.addEagerChild(child);\n+                em.persist(child);\n+                OneManyLazyChild lazychild = new OneManyLazyChild();\n+                lazychild.setName(\"lazychild\" + i);\n+                parent.addLazyChild(lazychild);\n+                em.persist(lazychild);\n+            }\n+            em.persist(parent);\n+        }\n+\n+        for (int i = 0; i < 3; i++) {\n+            OneOneParent parent = new OneOneParent();\n+            parent.setName(\"parent\" + i);\n+            OneOneChild child = new OneOneChild();\n+            child.setName(\"child\" + i);\n+            parent.setChild(child);\n+            child.setParent(parent);\n+            em.persist(child);\n+            em.persist(parent);\n+        }\n+\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testManyToOneEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneManyEagerChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(4, list.size());\n+        \n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t0.name, t1.id, t1.optLock, t1.name\n+        //       FROM OneManyEagerChild t0\n+        //       LEFT OUTER JOIN OneManyEagerParent t1 ON t0.PARENT_ID = t1.id\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerChild t0\n+        //       WHERE t0.PARENT_ID = ? ORDER BY t0.name ASC [params=(long) 2]\n+        //   SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //       FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //       ORDER BY t0.name ASC [params=(long) 2]\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerChild t0\n+        //       WHERE t0.PARENT_ID = ? ORDER BY t0.name ASC [params=(long) 1]\n+        //   SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID \n+        //       FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //       ORDER BY t0.name ASC [params=(long) 1]\n+\n+        assertEquals(5, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyEagerChild child = (OneManyEagerChild) list.get(i);\n+            assertEquals(2, child.getParent().getLazyChildren().size());\n+            assertEquals(2, child.getParent().getEagerChildren().size());\n+        }\n+        assertEquals(0, sql.size());\n+\n+        em.close();\n+    }\n+\n+    public void testManyToOneLazyQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneManyLazyChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(4, list.size());\n+\n+        // Expected SQL:\n+        // SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //     FROM OneManyLazyChild t0\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyLazyChild child = (OneManyLazyChild) list.get(i);\n+            assertEquals(2, child.getParent().getLazyChildren().size());\n+            assertEquals(2, child.getParent().getEagerChildren().size());\n+        }\n+\n+        // Expected SQLs: (fired on child.getParent())\n+        //  SELECT t0.optLock, t0.name, t1.PARENT_ID, t1.id, t1.optLock, t1.name\n+        //      FROM OneManyEagerParent t0\n+        //      LEFT OUTER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //      WHERE t0.id = ? \n+        //      ORDER BY t1.PARENT_ID ASC, t1.name ASC [params=(long) 252]\n+        //  SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //      FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //      ORDER BY t0.name ASC [params=(long) 252]\n+        //  SELECT t0.optLock, t0.name, t1.PARENT_ID, t1.id, t1.optLock, t1.name\n+        //      FROM OneManyEagerParent t0\n+        //      LEFT OUTER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //      WHERE t0.id = ? \n+        //      ORDER BY t1.PARENT_ID ASC, t1.name ASC [params=(long) 251]\n+        //  SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //      FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //      ORDER BY t0.name ASC [params=(long) 251]\n+\n+        assertEquals(4, sql.size());\n+\n+        em.close();\n+    }\n+\n+    public void testOneToManyEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM OneManyEagerParent p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(2, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerParent t0\n+        //   SELECT t0.id, t1.id, t1.optLock, t1.name FROM OneManyEagerParent t0\n+        //       INNER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //       ORDER BY t0.id ASC, t1.name ASC\n+        //   SELECT t0.id, t1.id, t1.optLock, t1.name, t1.PARENT_ID\n+        //       FROM OneManyEagerParent t0\n+        //       INNER JOIN OneManyLazyChild t1 ON t0.id = t1.PARENT_ID\n+        //       ORDER BY t0.id ASC, t1.name ASC\n+\n+        assertEquals(3, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyEagerParent p = (OneManyEagerParent) list.get(i);\n+            long id = p.getId();\n+            assertEquals(2, p.getEagerChildren().size());\n+            assertEquals(p, p.getEagerChildren().get(0).getParent());\n+            assertEquals(p, p.getEagerChildren().get(1).getParent());\n+            assertEquals(id, p.getEagerChildren().get(0).getParent().getId());\n+            assertEquals(id, p.getEagerChildren().get(1).getParent().getId());\n+            assertEquals(\"eagerchild0\", p.getEagerChildren().get(0).getName());\n+            assertEquals(\"eagerchild1\", p.getEagerChildren().get(1).getName());\n+            assertEquals(2, p.getLazyChildren().size());\n+            assertEquals(p, p.getLazyChildren().get(0).getParent());\n+            assertEquals(p, p.getLazyChildren().get(1).getParent());\n+            assertEquals(id, p.getLazyChildren().get(0).getParent().getId());\n+            assertEquals(id, p.getLazyChildren().get(1).getParent().getId());\n+            assertEquals(\"lazychild0\", p.getLazyChildren().get(0).getName());\n+            assertEquals(\"lazychild1\", p.getLazyChildren().get(1).getName());            \n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToOneParentQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM OneOneParent p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(3, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t0.name\n+        //   FROM OneOneParent t0 \n+        //   LEFT OUTER JOIN OneOneChild t1 ON t0.id = t1.PARENT_ID\n+\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneOneParent p = (OneOneParent) list.get(i);\n+            assertEquals(p, p.getChild().getParent());\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToOneChildQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneOneChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(3, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t0.name \n+        //   FROM OneOneParent t0 \n+        //   LEFT OUTER JOIN OneOneChild t1 ON t0.id = t1.PARENT_ID\n+\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneOneChild c = (OneOneChild) list.get(i);\n+            assertEquals(c, c.getParent().getChild());\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestManyEagerSQL.class);\n+    }\n+}\n+"},{"sha":"7d9babe02dad45027c411dbfa729e70deddde082","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+public class TestRelationFieldAsPrimaryKeyAndForeignKey \n+    extends SingleEMFTestCase {\n+\n+\tpublic void setUp() {\n+\t    setUp(C.class, CM.class, D.class, E.class, VC.class, VCS.class);\n+\t    \n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            List<E> es = (List<E>) em.createQuery(\n+            \"Select e from E e\").getResultList();\n+            for (E e : es) \n+                em.remove(e);\n+\n+            em.getTransaction().commit();\n+            em.close();\n+        } catch (Exception e) {\n+            \n+        }\n+\t    \n+\t    em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\n+\t    E e = new E();\n+\t    e.setEId(\"E1\");\n+\t    e.setName(\"E1\");\n+\n+\t    VC vc = new VC();\n+\t    vc.setVcId(\"VC1\");\n+\n+\t    VCS vcset = new VCS();\n+\t    vcset.setVcsId(\"VCS1\");\n+\t    vcset.setName(\"VCSET1\");\n+\t    vcset.addVC(vc);\n+\t    vcset.setE(e);\n+\n+\t    C c = new C();\n+\t    c.setCId(\"C1\");\n+\n+\t    CM cm = new CM();\n+\t    cm.setCmId(\"CM1\");\n+\t    cm.setE(e);\n+\t    cm.addC(c);\n+\n+\t    D d = new D();\n+\t    d.setA(\"addr\");\n+\t    d.setVc(vc);\n+\t    d.setId(\"IM1\");\n+\n+\t    em.persist(e);\n+\t    em.persist(vc);\n+\t    em.persist(vcset);\n+\t    em.persist(c);\n+\t    em.persist(cm);\n+\t    em.persist(d);\n+\n+\t    em.getTransaction().commit();\n+\t    em.close();\n+\t}\n+\n+\tpublic void testUnboundEntities() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    VCS vcSet = new VCS();\n+\t    vcSet.setVcsId(\"VCSET2\");\n+\t    vcSet.setName(\"VCSET2\");\n+\t    try {\n+\t        em.persist(vcSet);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    VC vc = new VC();\n+\t    vc.setVcId(\"VC2\");\n+\t    try {\n+\t        em.persist(vc);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    CM cm = new CM();\n+\t    cm.setCmId(\"CMID2\");\n+\t    try {\n+\t        em.persist(cm);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    C c = new C();\n+\t    c.setCId(\"CID2\");\n+\t    try {\n+\t        em.persist(c);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.close();\n+\t}\n+\n+\tpublic void testQuery() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e where e.name='E1'\").getResultList();\n+\t    Assert.assertEquals(1, es.size());\n+\t    E e = (E) es.get(0);\n+\t    Assert.assertEquals(\"E1\", e.getName());\n+\t    Assert.assertEquals(1, e.getVcss().size());\n+\t    Assert.assertEquals(1, e.getCms().size());\n+\t    Assert.assertEquals(1, e.getVcss().size());\n+\n+\t    // Get virtual container set and check that it has a reference to the\n+\t    // ensemble\n+\t    List<VCS> vcss = (List<VCS>) em.createQuery(\n+\t        \"Select vcset from VCS vcset where vcset.vcsId='VCS1'\")\n+\t        .getResultList();\n+\t    Assert.assertEquals(1, vcss.size());\n+\t    Assert.assertEquals(e, ((VCS) vcss.get(0)).getE());\n+\t    em.close();\n+\t}\n+\n+\tpublic void testDeletes() {\n+\t    // Remove VC set and check that all VCs belonging to that set are\n+\t    // deleted but not the ensemble itself\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    VCS vcset = (VCS) em.createQuery(\n+\t        \"Select vcset from VCS vcset where vcset.vcsId='VCS1'\")\n+\t        .getSingleResult();\n+\t    em.remove(vcset);\n+\t    em.getTransaction().commit();\n+\n+\t    // Get virtualContainer\n+\t    List<VC> vcs = (List<VC>) em.createQuery(\n+\t        \"Select vc from VC vc where vc.vcId='VC1'\")\n+\t        .getResultList();\n+\t    Assert.assertEquals(0, vcs.size());\n+\n+\t    // Make sure E and I are still there\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e\").getResultList();\n+\t    Assert.assertEquals(1, es.size());\n+\t}\n+\n+\tpublic void tearDown() throws Exception {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e\").getResultList();\n+\t    for (E e : es) {\n+\t        em.remove(e);\n+\t    }\n+\n+\t    em.getTransaction().commit();\n+\t    em.close();\n+\t}\n+}"},{"sha":"178314050e033e08280e7c0a82a79db9be9b6509","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.relations.VCS.VCSId;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name=\"VC4\")\n+@IdClass(VC.VCId.class)\n+\n+public class VC {\n+\n+\t@Id\n+\tprivate String vcId;\n+\n+\t// @ManyToOne\n+\t// @ForeignKey\n+\t// private I i;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate VCS vcs;\n+\n+\t@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"vc\")\n+\tprivate Set<D> ds = new HashSet<D>();\n+\n+\tpublic VC() {\n+\t}\n+\n+\tpublic String getVcId() {\n+\t\treturn vcId;\n+\t}\n+\n+\tpublic void setVcId(String vcId) {\n+\t\tthis.vcId = vcId;\n+\t}\n+\n+\tpublic Set<D> getDs() {\n+\t\treturn ds;\n+\t}\n+\n+\tpublic void setDs(Set<D> ds) {\n+\t\tthis.ds = ds;\n+\t}\n+\n+\tpublic VCS getVcs() {\n+\t\treturn vcs;\n+\t}\n+\n+\tpublic void setVcs(VCS vcs) {\n+\t\tthis.vcs = vcs;\n+\t}\n+\n+\tpublic static class VCId {\n+\t\tprivate String vcId;\n+\n+\t\tprivate VCSId vcs;\n+\n+\t\tpublic String getVcId() {\n+\t\t\treturn vcId;\n+\t\t}\n+\n+\t\tpublic void setVcId(String vcId) {\n+\t\t\tthis.vcId = vcId;\n+\t\t}\n+\n+\t\tpublic VCSId getVcs() {\n+\t\t\treturn vcs;\n+\t\t}\n+\n+\t\tpublic void setVcs(VCSId vcs) {\n+\t\t\tthis.vcs = vcs;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null || !(obj instanceof VCId))\n+\t\t\t\treturn false;\n+\t\t\tVCId id = (VCId) obj;\n+\t\t\treturn (this.getVcId() == id.getVcId() ||\n+                (this.getVcId() == null &&\n+                this.getVcId().equals(id.getVcId()))) && \n+\t\t\t    (this.getVcs() == id.getVcs() ||\n+                (this.getVcs() == null && this\n+\t\t\t\t.getVcs().equals(id.getVcs())));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getVcId() != null ? this.getVcId().hashCode() : 0)\n+\t\t\t\t\t^ (this.getVcs() != null ? this.getVcs().hashCode() : 0);\n+\t\t}\n+\t}\n+}"},{"sha":"443ebc48ecc6ffb777ad02c899a100c9ef77da34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name=\"VCS4\")\n+@IdClass(VCS.VCSId.class)\n+public class VCS {\n+\n+\t@Id\n+\tprivate String vcsId;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate E e;\n+\t\n+\t@Basic\n+\tprivate String name;\n+\n+\t@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy = \"vcs\")\n+\tprivate Set<VC> vcs = new HashSet<VC>();\n+\n+\tpublic VCS() {\n+\t}\n+\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\n+\tpublic String getVcsId() {\n+\t\treturn vcsId;\n+\t}\n+\n+\n+\tpublic void setVcsId(String vcsId) {\n+\t\tthis.vcsId = vcsId;\n+\t}\n+\n+\n+\tpublic E getE() {\n+\t\treturn e;\n+\t}\n+\n+\n+\tpublic void setE(E e) {\n+\t\tthis.e = e;\n+\t}\n+\n+\n+\tpublic Set<VC> getVcs() {\n+\t\treturn vcs;\n+\t}\n+\n+\n+\tpublic void setVcs(Set<VC> vcs) {\n+\t\tthis.vcs = vcs;\n+\t}\n+\t\n+\tpublic void addVC(VC vc){\n+\t\tvcs.add(vc);\n+\t\tvc.setVcs(this);\n+\t}\n+\tpublic static class VCSId{\n+\t\tprivate String vcsId;\n+\t\tprivate String e;\n+\t\n+\t\t\n+\t\tpublic String getE() {\n+\t\t\treturn e;\n+\t\t}\n+\n+\t\tpublic void setE(String e) {\n+\t\t\tthis.e = e;\n+\t\t}\n+\n+\t\tpublic String getVcsId() {\n+\t\t\treturn vcsId;\n+\t\t}\n+\n+\t\tpublic void setVcsId(String vcsId) {\n+\t\t\tthis.vcsId = vcsId;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null ||  ! (obj instanceof VCSId))\n+\t\t\t\treturn false;\n+\t\t\tVCSId id = (VCSId) obj;\n+\t\t\treturn (this.getVcsId() == id.getVcsId() || \n+                (this.getVcsId() != null && \n+                this.getVcsId().equals(id.getVcsId())))\n+\t\t\t\t&& (this.getE() == id.getE() || (this.getE() != null\n+                && this.getE().equals(id.getE())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getVcsId() != null ?this.getVcsId().hashCode():0)\n+\t\t\t\t^ (this.getE() != null ? this.getE().hashCode():0);\n+\t\t}\n+\t}\n+\n+}"},{"sha":"9eba7afe03f809307a1ad4f45f046f807dafd4d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.ArrayList;\n-import java.util.Map;\n \n import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n import org.apache.openjpa.lib.jdbc.JDBCEvent;\n@@ -33,7 +32,7 @@\n  */\n public abstract class SQLListenerTestCase\n     extends SingleEMFTestCase {\n-\n+    private static String _nl = System.getProperty(\"line.separator\");\n     protected List<String> sql = new ArrayList<String>();\n     protected int sqlCount;\n     \n@@ -122,4 +121,28 @@ public void beforeExecuteStatement(JDBCEvent event) {\n             }\n \t\t}\n \t}\n+    \n+    public void assertSQLOrder(String... expected) {\n+        int hits = 0;\n+\n+        for (String executedSQL : sql) {\n+            if (executedSQL.matches(expected[hits])) {\n+                hits++;\n+            }\n+        }\n+\n+        if (hits != expected.length) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"Did not find SQL in expected order : \").append(_nl);\n+            for (String s : expected) {\n+                sb.append(s).append(_nl);\n+            }\n+\n+            sb.append(\"SQL Statements issued : \");\n+            for (String s : sql) {\n+                sb.append(s).append(_nl);\n+            }\n+            fail(sb.toString());\n+        }\n+    }\n }"},{"sha":"fa6143d05275a297594218a1263339e266fcbe8c","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -52,7 +52,6 @@\n \t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ConcreteMappedAppIdSub</class>\r\n \t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DateVersion</class>\r\n \t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachAttachEvent</class>\r\n \t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC</class>\r\n \t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC</class>\r\n \t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC</class>\r"},{"sha":"52804ac36cd9f7bb193255e10037212fc248f11a","filename":"openjpa-persistence/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"94e10c18bb66d0f29bcc87900a2c5f08c0cd9d8b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -1277,6 +1277,14 @@ public String getResourceName() {\n             return _seqs[0].getResourceName();\n         }\n \n+        public int getLineNumber() {\n+            return _seqs[0].getLineNumber();\n+        }\n+\n+        public int getColNumber() {\n+            return _seqs[0].getColNumber();\n+        }\n+        \n         public int compareTo(ClassSeqs other) {\n             if (other == this)\n                 return 0;\n@@ -1346,6 +1354,14 @@ public String getResourceName() {\n             return _queries[0].getResourceName();\n         }\n \n+        public int getLineNumber() {\n+            return _queries[0].getLineNumber();\n+        }\n+\n+        public int getColNumber() {\n+            return _queries[0].getColNumber();\n+        }\n+        \n         public int compareTo(ClassQueries other) {\n             if (other == this)\n                 return 0;"},{"sha":"ecd046c8a3c36739b60e0492e4b6ebaaae306bf5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -68,7 +68,7 @@ public RuntimeException translate(RuntimeException re) {\n                     try {\n                         throwing = true;\n                         if (em.isOpen() && ((EntityManagerImpl) em).isActive())\n-                            ((EntityManagerImpl) em).setRollbackOnly(re);\n+                            ((EntityManagerImpl) em).setRollbackOnly(ex);\n                     } finally {\n                         // handle re-entrancy\n                         throwing = false;"},{"sha":"c3bf7dc16f09d948a9ba11481219257e41ecc1ec","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -471,6 +471,14 @@ public Object getSourceScope() {\n     public int getSourceType() {\n         return SRC_XML;\n     }\n+    \n+    public int getLineNumber() {\n+        return 0;\n+    }\n+        \n+    public int getColNumber() {\n+        return 0;\n+    }\n \n     public String getResourceName() {\n         return \"PersistenceUnitInfo:\" + _name;"},{"sha":"3c1a68d306f2061f9763e46d692e763ca757681c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -240,7 +240,8 @@ public OpenJPAQuery compile() {\n     }\n \n     private Object execute() {\n-        if (_query.getOperation() != QueryOperations.OP_SELECT)\n+        if ((!isNative()) &&\n+            _query.getOperation() != QueryOperations.OP_SELECT)\n             throw new InvalidStateException(_loc.get(\"not-select-query\",\n                 _query.getQueryString()), null, null, false);\n "},{"sha":"3c5a083734684de4f07c0110ca76bc1f199e0c48","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -36,6 +36,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.xml.sax.Attributes;\n+import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -67,6 +68,8 @@\n import static org.apache.openjpa.persistence.PersistenceStrategy.*;\n import org.apache.openjpa.util.ImplHelper;\n \n+import serp.util.Numbers;\n+\n /**\n  * Custom SAX parser used by the system to quickly parse persistence i\n  * metadata files.\n@@ -774,6 +777,11 @@ protected boolean startClass(String elem, Attributes attrs)\n         if (isMetaDataMode()) {\n             meta.setSource(getSourceFile(), meta.SRC_XML);\n             meta.setSourceMode(MODE_META, true);\n+            Locator locator = getLocation().getLocator();\n+            if (locator != null) {\n+                meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+                meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            }\n             meta.setListingIndex(_clsPos);\n             String name = attrs.getValue(\"name\");\n             if (!StringUtils.isEmpty(name))\n@@ -896,6 +904,11 @@ protected boolean startSequenceGenerator(Attributes attrs) {\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n         meta.setSource(getSourceFile(), scope, meta.SRC_XML);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n         return true;\n     }\n \n@@ -1399,7 +1412,11 @@ protected boolean startNamedQuery(Attributes attrs)\n         meta.setDefiningType(_cls);\n         meta.setQueryString(attrs.getValue(\"query\"));\n         meta.setLanguage(JPQLParser.LANG_JPQL);\n-\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n         Object cur = currentElement();\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n@@ -1482,6 +1499,11 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n         meta.setSource(getSourceFile(), scope, meta.SRC_XML);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n         if (isMetaDataMode())\n             meta.setSourceMode(MODE_META);\n         else if (isMappingMode())"},{"sha":"c76f1f6afbc55763620149a48d5464c1139aee0e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -1229,6 +1229,14 @@ public String getResourceName() {\n             return _seqs[0].getResourceName();\n         }\n \n+        public int getLineNumber() {\n+            return _seqs[0].getLineNumber();\n+        }\n+\n+        public int getColNumber() {\n+            return _seqs[0].getColNumber();\n+        }\n+        \n         public int compareTo(ClassSeqs other) {\n             if (other == this)\n                 return 0;\n@@ -1298,6 +1306,14 @@ public String getResourceName() {\n             return _queries[0].getResourceName();\n         }\n \n+        public int getLineNumber() {\n+            return _queries[0].getLineNumber();\n+        }\n+\n+        public int getColNumber() {\n+            return _queries[0].getColNumber();\n+        }\n+\n         public int compareTo(ClassQueries other) {\n             if (other == this)\n                 return 0;"},{"sha":"2323f27df46eff6e056cc37aebe611197356abdd","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -59,7 +59,7 @@ unnamed-fg: \"{0}\" declares an unnamed fetch group.  All fetch groups \\\n bad-fg-field: Fetch group \"{0}\" in type \"{1}\" includes field \"{2}\", but \\\n \tthis field is not declared in \"{1}\", or is not persistent.  Currently, \\\n \tOpenJPA only supports declared fields in fetch groups.\n-missing-included-fg:\"{0}\" declares a fecth group \"{1}\" includes \"{2}\". But \\\n+missing-included-fg:\"{0}\" declares a fetch group \"{1}\" includes \"{2}\". But \\\n \tthe included fetch group \"{2}\" can not be found in \"{0}\". Currently, all \\\n \tincluded fetch groups must be declared within the same entity scope.\n not-update-delete-query: Cannot perform an update or delete operation \\"},{"sha":"837b1bced5bd2fdfe457a26a7abd05e1ec201b6b","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":72,"deletions":146,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -1,4 +1,4 @@\n-                           Release Notes for OpenJPA\n+                           Release Notes for OpenJPA 1.2.1\n \n         * Overview\n         * License\n@@ -13,8 +13,8 @@\n \n Overview\n \n-   These notes describe the difference between OpenJPA release 1.2.0 and the\n-   preceding releases: 1.0.0, and 1.1.0. \n+   These notes describe the difference between OpenJPA release 1.2.1 and the\n+   preceding release: 1.2.0. \n \n    OpenJPA is a feature-rich implementation of the persistence part of Java\n    Community Process JSR-220 (Enterprise JavaBeans 3.0), which is known as\n@@ -78,159 +78,85 @@ Getting Involved\n    How do I Contribute?\n         * To discuss Apache OpenJPA topics check out the mailing lists.\n         * Informal discussion also occurs on the #openjpa IRC channel on\n-       freenode.net.\n+          freenode.net.\n         * Bugs and other issues can be posted on the project JIRA.\n \n-                          OpenJPA 1.2.0 Release Notes\n+                          OpenJPA 1.2.1 Release Notes\n Sub-task\n \n-    * [OPENJPA-159] - Make ManagedRuntime amenable to more transaction execution\n-                      strategies\n-    * [OPENJPA-545] - Replace UUID implementation with JDK 5 alternatives\n-    * [OPENJPA-575] - Use do priv for to get CL for Oracle empty blob/clob\n-    * [OPENJPA-591] - Entities are flushed before being detached or serialized\n-    * [OPENJPA-598] - Make BatchingPreparedStatementManagerImpl more flexible and\n-                      extensible\n-    * [OPENJPA-616] - InMemoryUpdate support for functions returning numeric value\n-                      such as ABS, SQRT, SIZE etc.\n-    * [OPENJPA-648] - Table generator uses incorrect schema name\n-    * [OPENJPA-661] - Duplicate files included in binary assembly when using \n-                      docbook-plugin\n+    * [OPENJPA-681] - Subquery generates SQL with syntax error\n+    * [OPENJPA-708] - sub-sub-query generates SQL with syntax error\n+    * [OPENJPA-744] - Extra SQL on LAZY/EAGER ManyToOne relation\n+    * [OPENJPA-765] - Check for insertable or updateable before checking value \n+                      for null\n \n Bug\n \n-    * [OPENJPA-20] - Query can return embeddable class\n-    * [OPENJPA-44] - metadata-complete element in orm.xml is ignored\n-    * [OPENJPA-51] - bad sql pushdown, sub select is missing from clause\n-    * [OPENJPA-112] - Native queries and named parameters: poor error message\n-    * [OPENJPA-209] - Query returning 2 entities w/unidir 1-1 relationship gets \n-                      openjpa.persistence.ArgumentException: Address with the same \n-                      id already exists in the L1 cache.\n-    * [OPENJPA-210] - Query returning 2 entities w/1-1 relationship returns wrong\n-                      types in the result list\n-    * [OPENJPA-220] - Examples of using ElementJoinColumn show the wrong usage\n-    * [OPENJPA-241] - Extra SQL on lazy CMR load\n-    * [OPENJPA-286] - Can't merge detached One-To-Many child instance. The \n-                      entities were implement by an internal Hash container.\n-    * [OPENJPA-340] - @UniqueConstraint and corresponding XML ignored\n-    * [OPENJPA-349] - No object inserted if entity only contain ID attribute and \n-                      set to IDENTITY\n-    * [OPENJPA-365] - Unexpected behavior on finding a Composite Key entity with \n-                      a single value.\n-    * [OPENJPA-393] - @Column(nullable=false) setting not taken into account for\n-                      String field values\n-    * [OPENJPA-442] - JIRA-407 introduced backward compatibility problem in \n-                      QueryImpl\n-    * [OPENJPA-456] - Missed to validate the column name length for Join Column\n-    * [OPENJPA-458] - OpenJPA doesn't throw standard JPA exceptions\n-    * [OPENJPA-459] - Problem with bulk updates in mySQL\n-    * [OPENJPA-462] - OptimisticException is thrown instead of \n-                      OptimisticLockException\n-    * [OPENJPA-470] - Custom sequences specified via @SequenceGenerator must have\n-                      parentheses at the end of the class name\n-    * [OPENJPA-494] - Single Table Inheritance Strategy causes errors when reading\n-                      entities from the database (discriminator problem)\n-    * [OPENJPA-504] - Duplicate order numbers in relationshiptable for the same\n-                      List field\n-    * [OPENJPA-533] - Bulk update can`t set null embedded object\n-    * [OPENJPA-565] - Duplicate @NamedQuery terminates subsequent @NameQuery\n-                      definitions in @NamedQueries\n-    * [OPENJPA-567] - @OrderColumn generates duplicate order numbers.\n-    * [OPENJPA-572] - Merge operation fails with IdClass composite key\n-    * [OPENJPA-573] - JPQL: The combination LIKE ESCAPE does not accept\n-                      parameters\n-    * [OPENJPA-574] - Cached object in DataCache not evicted due to\n-                      StatementBatching not reporting OptimisticException\n-    * [OPENJPA-581] - JNDI lookup failures are not generating useful messages\n-    * [OPENJPA-586] - Binding Query parameter fails validation for Externalized\n-                      field\n-    * [OPENJPA-589] - Can not retrieve M-to-M data when DataCache is on\n-    * [OPENJPA-590] - The push-down sql for JPQL has unpredictable ordering in\n-                      the set clause for update statement\n-    * [OPENJPA-594] - Incorrect schema separator used for Informix tables\n-    * [OPENJPA-595] - An error occurred while parsing the query filter \"SELECT\n-                      t FROM PessimisticA t WHERE t.id = ?1\". Error message: No\n-                      field named \"id\" in class \"t\"\n-    * [OPENJPA-596] - ClassCastException during in-memory update with Informix\n-                      IDS 10.0\n-    * [OPENJPA-602] - NullPointerException at org.apache.openjpa.jdbc.meta.\n-                      strats.RelationToManyInverseKeyFieldStrategy.map\n-    * [OPENJPA-605] - Informix will throw an exception when a unique index is\n-                      explictily created on the primary key columns\n-    * [OPENJPA-606] - InformixDictionary default setting beaks many testcases\n-    * [OPENJPA-607] - Extraneous \"( )\" on DISTINCT, ALL, ANY results in SQL\n-                      syntax errors on some database systems\n-    * [OPENJPA-612] - Add support for calculating update value in \n-                      QueryImpl.updateInMemory\n-    * [OPENJPA-614] - SqlServer does not support Timestamp precision in nano\n-                      second\n-    * [OPENJPA-617] - Use of hardcoded DB platform strings should be avoided\n-    * [OPENJPA-619] - Typos in the manual\n-    * [OPENJPA-622] - Informix -lock timieout, cursor not open problem for\n-                      NonJTA datasource transaction RESOURCE_LOCAL in JEE\n-    * [OPENJPA-625] - Error when removing embeddable entities from a persistent\n-                      collection\n-    * [OPENJPA-629] - When creating foreign keys the schema name is not trimmed\n-                      for WS before checking DB\n-    * [OPENJPA-630] - Honor batchlimit=1 in statement batching support.\n-    * [OPENJPA-634] - SQLException not reported from Batched statement\n-    * [OPENJPA-637] - Significant performance degradation when data cache is\n-                      enabled\n-    * [OPENJPA-642] - Sybase create foreign key on delete set null failed with\n-                      syntax error\n-    * [OPENJPA-644] - Handle databaseProductVersion string from newer jcc driver\n-                      for DB2 ISeries\n-    * [OPENJPA-647] - Dynamic update to DataCacheTimeout property is not updated\n-                      in the ClassMetadata\n-    * [OPENJPA-653] - Concurrency issue with query cache enabled\n-    * [OPENJPA-656] - Incorrect connection URL causes NPE when using JDBC Driver\n-    * [OPENJPA-657] - Compile error: \"The method getTextContent() is undefined\n-                      for the type Node\"\n-    * [OPENJPA-659] - No state snapshot is available on @Embedded class when\n-                      using runtime enhancement via spring-tomcat-weaver\n-    * [OPENJPA-660] - ClassCastException when using OneToMany Relation and\n-                      collection is subclass using Discriminator with\n-                      SINGLE_TABLE strategy.\n-    * [OPENJPA-664] - OpenJPA should prohibit when the name of a schema\n-                      components such as Table, Column, Constraint exceeds\n-                      maximum permissible length for the database platform\n-    * [OPENJPA-665] - OpenJPA allows commit where fields with\n-                      @Column(nullable=false) set to null\n-    * [OPENJPA-668] - Test failures with IBM JDK (xml parsing)\n-    * [OPENJPA-669] - NativeSequences can be incremented within the business\n-                      transaction\n-    * [OPENJPA-670] - Discriminator column is missing from table when\n-                      inheritance is used without annotation\n+    * [OPENJPA-646] - JDK problems with defineClass and enum class types\n+    * [OPENJPA-650] - Document openjpa.RuntimeUnenhancedClasses=unsupported/\n+                      warn configuration property\n+    * [OPENJPA-676] - Connection used for NativeSequences is not closed\n+    * [OPENJPA-679] - java.lang.ArrayIndexOutOfBoundsException may occur when\n+                      a relation field is annotated as a primary key and a foreign key\n+    * [OPENJPA-685] - Problem enhancing test cases with Maven 2.0.9\n+    * [OPENJPA-702] - MappingTool fails requires appropriate DESCSTAT parm \n+                      value on DB2 for z/OS\n+    * [OPENJPA-710] - Unordered collection field adds ORDER BY clause\n+    * [OPENJPA-711] - PDF manual lacks images\n+    * [OPENJPA-713] - openjpa-1.2.0.jar file is 11 MB\n+    * [OPENJPA-715] - OpenJpa does not generate IDs properly. \"duplicate key \n+                      value in a unique or primary key constraint\" while merging object tree.\n+    * [OPENJPA-719] - GeneralException in PCEnhancer during class transform in \n+                      Turkish locale AppServer setting\n+    * [OPENJPA-724] - Corrections for the manual\n+    * [OPENJPA-727] - Image mapping-table.png missing in HTML manual\n+    * [OPENJPA-731] - Bug on FetchType.EAGER when QuerySQLCache is turned on\n+    * [OPENJPA-733] - Entity contains pseudo-attached embeddable after detach\n+    * [OPENJPA-745] - Sybase by default silently truncates a string which is \n+                      longer than the column length without raising an exception\n+    * [OPENJPA-755] - OpenJPA thows EntityExistsException trying persist a\n+                      preexisting, detached entity\n+    * [OPENJPA-762] - Batch execution fails for Oracle when batch limit set to\n+                      -1 (unlimited batch size)\n+    * [OPENJPA-777] - Exception is thrown during retrieval of an entity which \n+                      contains a persistent collection of embeddable\n+    * [OPENJPA-811] - With Oracle, OpenJPA allows setting non-nullable field to null \n+    * [OPENJPA-835] - Loading nested toMany EAGER relation resuled in \n+                      PersistenceException\n+    * [OPENJPA-838] - fix parameter setting problem when QuerySQLCache is on\n+    * [OPENJPA-843] - Unnecessary version update on inverse-side of a 1-m \n+                      relationship\n+    * [OPENJPA-853] - Informix cursor not open problem if synchronizeMapping \n+                      set true\n+    * [OPENJPA-864] - Subquery problems with SYNTAX_DATABASE (Oracle)\n+    * [OPENJPA-872] - Compound custom id in bidirectional many-to-one\n+    * [OPENJPA-912] - Potential NPE in setInverseRelation\n+    * [OPENJPA-917] - stored procedures throw InvalidStateException when using \n+                      getSingleResult() or getResultList()\n+    * [OPENJPA-919] - JUnit for Bi-directional OneToOne with null relationships\n+    * [OPENJPA-925] - Bidirectional OneToOne relation incorrectly set in \n+                      loadEagerJoin\n \n Improvement\n \n-    * [OPENJPA-149] - non-jta-data-source must be specified in WebSphere\n-                      environments\n-    * [OPENJPA-235] - SQL reordering to avoid non-nullable foreign key\n-                      constraint violations\n-    * [OPENJPA-407] - Cache SQL (or closer precursors to SQL) more aggressively\n-    * [OPENJPA-515] - OpenJPA extension for distributed databases\n-    * [OPENJPA-570] - Misleading \"Found duplicate query\" warning message\n-    * [OPENJPA-578] - Specifying a default for VersionStrategy in \n-                      persistence.xml has no effect when a version field is\n-                      present in the entity class.\n-    * [OPENJPA-584] - OpenJPA-149 changes are not IDE friendly\n-    * [OPENJPA-601] - Remove connection requirement for build action in\n-                      SchemaTool\n-    * [OPENJPA-604] - Log spec sets in persistence unit's property fail with\n-                      exception when run in different locale\n-    * [OPENJPA-631] - Report detailed message when executeBatch throws \n-                      SQLException for DB2\n-    * [OPENJPA-633] - Update the release process to use maven plugins\n-    * [OPENJPA-666] - MS SQL Server 2005 does not support native sequences.\n-    * [OPENJPA-667] - Documentaion on configuration properties should link to\n-                      corresponding JavaDoc method description\n-\n-New Feature\n-\n-    * [OPENJPA-187] - MEMBER OF query fails on OpenJPA, but works fine with\n-                      TopLink and Hibernate EM\n-    * [OPENJPA-305] - Dynamic configuration of EntityManagerFactory\n+    * [OPENJPA-686] - Openjpa manual needs to be updated for database \n+                      restriction on BigDecimal field on Sybase\n+    * [OPENJPA-726] - Provide MD5Sums for latest downloads\n+    * [OPENJPA-742] - Add line number and column number to QueryMetaData\n+    * [OPENJPA-752] - ProxySetupStateManager.setProxyData routing through \n+                      PersistanceCapable caused \"PersistenceException: null\"\n+    * [OPENJPA-772] - Proper maven pluginManagement and use ianal-maven-plugin\n+                      for enforcing legal files\n+    * [OPENJPA-779] - patch for eclipse .project and .classpath files...\n+    * [OPENJPA-817] - Order of inserts lost when using ConstraintUpdateManager\n+    * [OPENJPA-876] - Better test profiles for proprietary databases (DB2, \n+                      Oracle) and continuous build\n+    * [OPENJPA-881] - Enable connection pooling for testcases.\n+    * [OPENJPA-901] - Use hosted JAI artifacts as the default for the docbook build\n+\n+Changes for previous releases\n+\n+OpenJPA 1.2.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/CHANGES.txt?view=markup\n \n OpenJPA 1.1.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/CHANGES.txt?view=markup\n "},{"sha":"1b8e35d0cf0070d767e2e68851b0a18d229bf0c3","filename":"openjpa-project/NOTICE.txt","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/NOTICE.txt?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -16,5 +16,7 @@ COPYRIGHT NOTICES\n     Sun Microsystems and licensed under the CDDL 1.0. The source code is\r\n     available at: https://glassfish.dev.java.net/source/browse/glassfish/\r\n \r\n-* OpenJPA includes software written by Miroslav Nachev\r\n+* OpenJPA includes software written by Miroslav Nachev.\r\n+\r\n+* OpenJPA uses test code written by Charles Tillman.\r\n \r"},{"sha":"3cd421f8deabca48a20e033656aeb4144e04a23a","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":54,"deletions":139,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -1,5 +1,5 @@\n <html>\n-<title>Release Notes for OpenJPA</title>\n+<title>Release Notes for OpenJPA 1.2.1</title>\n <body>\n <h1>Release Notes for OpenJPA</h1>\n \n@@ -18,8 +18,8 @@ <h1>Release Notes for OpenJPA</h1>\n \n <h2><a name=\"Overview\"></a>Overview</h2>\n \n-<p> These notes describe the difference between OpenJPA release 1.2.0\n-and the preceding releases: 1.0.0 and 1.1.0.\n+<p> These notes describe the difference between OpenJPA release 1.2.1\n+and the preceding release: 1.2.0.\n <P>\n OpenJPA is a feature-rich implementation of the persistence part of \n Java Community Process JSR-220 (Enterprise JavaBeans 3.0), which is\n@@ -97,200 +97,115 @@ <h2><a name=\"GetInvolved\"></a>Getting Involved</h2>\n </ul>\n \n \n-        Release Notes - OpenJPA - Version 1.2.0\n+        Release Notes - OpenJPA - Version 1.2.1.\n     \n <h2><a name='Sub-task'>        Sub-task\n </h2>\n <ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-159'>OPENJPA-159</a>] -         Make ManagedRuntime amenable to more transaction execution strategies\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-681'>OPENJPA-681</a>] -         Subquery generates SQL with syntax error\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-545'>OPENJPA-545</a>] -         Replace UUID implementation with JDK 5 alternatives\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-708'>OPENJPA-708</a>] -         sub-sub-query generates SQL with syntax error\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-575'>OPENJPA-575</a>] -         Use do priv for to get CL for Oracle empty blob/clob\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-744'>OPENJPA-744</a>] -         Extra SQL on LAZY/EAGER  ManyToOne relation\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-591'>OPENJPA-591</a>] -         Entities are flushed before being detached or serialized\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-765'>OPENJPA-765</a>] -         Check for insertable or updateable before checking value for null\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-598'>OPENJPA-598</a>] -         Make BatchingPreparedStatementManagerImpl more flexible and extensible\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-616'>OPENJPA-616</a>] -         InMemoryUpdate support for functions returning numeric value such as ABS, SQRT, SIZE etc.\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-648'>OPENJPA-648</a>] -         Table generator uses incorrect schema name\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-661'>OPENJPA-661</a>] -         Duplicate files included in binary assembly when using docbook-plugin\n-</li>\n-</ul>\n-    \n+</ul>    \n+\n <h2><a name='Bug'>        Bug\n </h2>\n <ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-20'>OPENJPA-20</a>] -         Query can return embeddable class\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-44'>OPENJPA-44</a>] -         metadata-complete element in orm.xml is ignored\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-51'>OPENJPA-51</a>] -         bad sql pushdown, sub select is missing from clause\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-112'>OPENJPA-112</a>] -         Native queries and named parameters: poor error message\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-209'>OPENJPA-209</a>] -         Query returning 2 entities w/unidir 1-1 relationship gets openjpa.persistence.ArgumentException: Address with the same id already exists in the L1 cache.\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-210'>OPENJPA-210</a>] -         Query returning 2 entities w/1-1 relationship returns wrong types in the result list\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-220'>OPENJPA-220</a>] -         Examples of using ElementJoinColumn show the wrong usage\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-241'>OPENJPA-241</a>] -         Extra SQL on lazy CMR load\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-286'>OPENJPA-286</a>] -         Can't merge detached One-To-Many child instance. The entities were implement by an internal Hash container.\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-340'>OPENJPA-340</a>] -         @UniqueConstraint and corresponding XML ignored\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-349'>OPENJPA-349</a>] -         No object inserted if entity only contain ID attribute and set to IDENTITY\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-365'>OPENJPA-365</a>] -         Unexpected behavior on finding a Composite Key entity with a single value.\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-393'>OPENJPA-393</a>] -         @Column(nullable=false) setting not taken into account for String field values\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-442'>OPENJPA-442</a>] -         JIRA-407 introduced backward compatibility problem in QueryImpl\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-456'>OPENJPA-456</a>] -         Missed to validate the column name length for Join Column\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-458'>OPENJPA-458</a>] -         OpenJPA doesn't throw standard JPA exceptions\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-459'>OPENJPA-459</a>] -         Problem with bulk updates in mySQL\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-462'>OPENJPA-462</a>] -         OptimisticException is thrown instead of OptimisticLockException\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-470'>OPENJPA-470</a>] -         Custom sequences specified via @SequenceGenerator must have parentheses at the end of the class name\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-494'>OPENJPA-494</a>] -         Single Table Inheritance Strategy causes errors when reading entities from the database (discriminator problem)\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-646'>OPENJPA-646</a>] -         JDK problems with defineClass and enum class types\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-504'>OPENJPA-504</a>] -         Duplicate order numbers in relationshiptable for the same List field\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-650'>OPENJPA-650</a>] -         Document openjpa.RuntimeUnenhancedClasses=unsupported/warn configuration property\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-533'>OPENJPA-533</a>] -         Bulk update can`t set null embedded object\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-676'>OPENJPA-676</a>] -         Connection used for NativeSequences is not closed\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-565'>OPENJPA-565</a>] -         Duplicate @NamedQuery terminates subsequent @NameQuery definitions in @NamedQueries \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-679'>OPENJPA-679</a>] -         java.lang.ArrayIndexOutOfBoundsException may occur when a relation field is annotated as a primary key and a foreign key\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-567'>OPENJPA-567</a>] -         @OrderColumn generates duplicate order numbers.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-685'>OPENJPA-685</a>] -         Problem enhancing test cases with Maven 2.0.9 \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-572'>OPENJPA-572</a>] -         Merge operation fails with IdClass composite key\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-702'>OPENJPA-702</a>] -         MappingTool fails requires appropriate DESCSTAT parm value on DB2 for z/OS\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-573'>OPENJPA-573</a>] -         JPQL: The combination LIKE ESCAPE does not accept parameters\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-710'>OPENJPA-710</a>] -         Unordered collection field adds ORDER BY clause\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-574'>OPENJPA-574</a>] -         Cached object in DataCache not evicted due to StatementBatching not reporting OptimisticException \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-711'>OPENJPA-711</a>] -         PDF manual lacks images\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-581'>OPENJPA-581</a>] -         JNDI lookup failures are not generating useful messages\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-713'>OPENJPA-713</a>] -         openjpa-1.2.0.jar file is 11 MB\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-586'>OPENJPA-586</a>] -         Binding Query parameter fails validation for Externalized field\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-715'>OPENJPA-715</a>] -         OpenJpa does not generate IDs properly. &quot;duplicate key value in a unique or primary key constraint&quot; while merging object tree.\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-589'>OPENJPA-589</a>] -         Can not retrieve M-to-M data when DataCache is on\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-719'>OPENJPA-719</a>] -         GeneralException in PCEnhancer during class transform in Turkish locale AppServer setting\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-590'>OPENJPA-590</a>] -         The push-down sql for JPQL has unpredictable ordering in the set clause for update statement\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-724'>OPENJPA-724</a>] -         Corrections for the manual\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-594'>OPENJPA-594</a>] -         Incorrect schema separator used for Informix tables\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-727'>OPENJPA-727</a>] -         Image mapping-table.png missing in HTML manual\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-595'>OPENJPA-595</a>] -         An error occurred while parsing the query filter &quot;SELECT t FROM PessimisticA t WHERE t.id = ?1&quot;. Error message: No field named &quot;id&quot; in class &quot;t&quot;\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-731'>OPENJPA-731</a>] -         Bug on FetchType.EAGER when QuerySQLCache is turned on\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-596'>OPENJPA-596</a>] -         ClassCastException during in-memory update with Informix IDS 10.0 \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-733'>OPENJPA-733</a>] -         Entity contains pseudo-attached embeddable after detach\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-602'>OPENJPA-602</a>] -         NullPointerException at org.apache.openjpa.jdbc.meta.strats.RelationToManyInverseKeyFieldStrategy.map\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-745'>OPENJPA-745</a>] -         Sybase by default silently truncates a string which is longer than the column length without raising an exception \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-605'>OPENJPA-605</a>] -         Informix will throw an exception when a unique index is explictily created on the primary key columns\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-755'>OPENJPA-755</a>] -         OpenJPA thows EntityExistsException trying persist a preexisting, detached entity\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-606'>OPENJPA-606</a>] -         InformixDictionary default setting beaks many testcases\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-762'>OPENJPA-762</a>] -         Batch execution fails for Oracle when batch limit set to -1 (unlimited batch size)\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-607'>OPENJPA-607</a>] -         Extraneous &quot;( )&quot; on DISTINCT, ALL, ANY results in  SQL syntax errors on some database systems\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-777'>OPENJPA-777</a>] -         Exception is thrown during retrieval of an entity which contains a persistent collection of embeddable\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-612'>OPENJPA-612</a>] -         Add support for calculating update value in QueryImpl.updateInMemory\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-835'>OPENJPA-835</a>] -         Loading nested toMany EAGER relation resuled in PersistenceException\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-614'>OPENJPA-614</a>] -         SqlServer does not support Timestamp precision in nano second\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-811'>OPENJPA-811</a>] -         With Oracle, OpenJPA allows setting non-nullable field to null\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-617'>OPENJPA-617</a>] -         Use of hardcoded DB platform strings should be avoided\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-838'>OPENJPA-838</a>] -         fix parameter setting problem when QuerySQLCache is on\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-619'>OPENJPA-619</a>] -         Typos in the manual\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-843'>OPENJPA-843</a>] -         Unnecessary version update on inverse-side of a 1-m relationship\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-622'>OPENJPA-622</a>] -         Informix -lock timieout, cursor not open problem for NonJTA datasource transaction RESOURCE_LOCAL in JEE\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-853'>OPENJPA-853</a>] -         Informix cursor not open problem if synchronizeMapping set true\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-625'>OPENJPA-625</a>] -         Error when removing embeddable entities from a persistent collection\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-864'>OPENJPA-864</a>] -         Subquery problems with SYNTAX_DATABASE (Oracle)\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-629'>OPENJPA-629</a>] -         When creating foreign keys the schema name is not trimmed for WS before checking DB\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-872'>OPENJPA-872</a>] -         Compound custom id in bidirectional many-to-one\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-630'>OPENJPA-630</a>] -         Honor batchlimit=1 in statement batching support.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-912'>OPENJPA-912</a>] -         Potential NPE in setInverseRelation\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-634'>OPENJPA-634</a>] -         SQLException not reported from Batched statement\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-917'>OPENJPA-917</a>] -         stored procedures throw InvalidStateException when using getSingleResult() or getResultList()\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-637'>OPENJPA-637</a>] -         Significant performance degradation when data cache is enabled\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-919'>OPENJPA-919</a>] -         JUnit for Bi-directional OneToOne with null relationships\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-642'>OPENJPA-642</a>] -         Sybase create foreign key on delete set null failed with syntax error\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-925'>OPENJPA-925</a>] -         Bidirectional OneToOne relation incorrectly set in loadEagerJoin\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-644'>OPENJPA-644</a>] -         Handle databaseProductVersion string from newer jcc driver for DB2 ISeries\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-647'>OPENJPA-647</a>] -         Dynamic update to DataCacheTimeout property is not updated in the ClassMetadata\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-653'>OPENJPA-653</a>] -         Concurrency issue with query cache enabled\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-656'>OPENJPA-656</a>] -         Incorrect connection URL causes NPE when using JDBC Driver\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-657'>OPENJPA-657</a>] -         Compile error: &quot;The method getTextContent() is undefined for the type Node&quot;\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-659'>OPENJPA-659</a>] -         No state snapshot is available on @Embedded class when using runtime enhancement via spring-tomcat-weaver \n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-660'>OPENJPA-660</a>] -         ClassCastException when using OneToMany Relation and collection is subclass using Discriminator with SINGLE_TABLE strategy.\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-664'>OPENJPA-664</a>] -         OpenJPA should prohibit when the name of a schema components such as Table, Column, Constraint exceeds maximum permissible length for the database platform \n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-665'>OPENJPA-665</a>] -         OpenJPA allows commit where fields with @Column(nullable=false) set to null \n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-668'>OPENJPA-668</a>] -         Test failures with IBM JDK (xml parsing)\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-669'>OPENJPA-669</a>] -         NativeSequences can be incremented within the business transaction\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-670'>OPENJPA-670</a>] -         Discriminator column is missing from table when inheritance is used without annotation\n-</li>\n-</ul>\n-    \n+</ul>    \n+\n <h2><a name='Improvement'>        Improvement\n </h2>\n-<ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-149'>OPENJPA-149</a>] -         non-jta-data-source must be specified in WebSphere environments\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-235'>OPENJPA-235</a>] -         SQL reordering to avoid non-nullable foreign key constraint violations\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-407'>OPENJPA-407</a>] -         Cache SQL (or closer precursors to SQL) more aggressively\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-515'>OPENJPA-515</a>] -         OpenJPA extension for distributed databases  \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-686'>OPENJPA-686</a>] -         Openjpa manual needs to be updated for database restriction on BigDecimal field on Sybase\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-570'>OPENJPA-570</a>] -         Misleading &quot;Found duplicate query&quot; warning message\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-726'>OPENJPA-726</a>] -         Provide MD5Sums for latest downloads\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-578'>OPENJPA-578</a>] -         Specifying a default for VersionStrategy in persistence.xml has no effect when a version field is present in the entity class.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-742'>OPENJPA-742</a>] -         Add line number and column number to QueryMetaData\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-584'>OPENJPA-584</a>] -         OpenJPA-149 changes are not IDE friendly\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-752'>OPENJPA-752</a>] -         ProxySetupStateManager.setProxyData routing through PersistanceCapable caused &quot;PersistenceException: null&quot;\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-601'>OPENJPA-601</a>] -         Remove connection requirement for build action in SchemaTool\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-772'>OPENJPA-772</a>] -         Proper maven pluginManagement and use ianal-maven-plugin for enforcing legal files\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-604'>OPENJPA-604</a>] -         Log spec sets in persistence unit's property fail with exception when run in different locale\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-779'>OPENJPA-779</a>] -         patch for eclipse .project and .classpath files...\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-631'>OPENJPA-631</a>] -         Report detailed message when executeBatch throws SQLException for DB2\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-817'>OPENJPA-817</a>] -         Order of inserts lost when using ConstraintUpdateManager\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-633'>OPENJPA-633</a>] -         Update the release process to use maven plugins\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-876'>OPENJPA-876</a>] -         Better test profiles for proprietary databases (DB2, Oracle) and continuous build\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-666'>OPENJPA-666</a>] -         MS SQL Server 2005 does not support native sequences.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-881'>OPENJPA-881</a>] -         Enable connection pooling for testcases. \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-667'>OPENJPA-667</a>] -         Documentaion on configuration properties should link to corresponding JavaDoc method description\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-901'>OPENJPA-901</a>] -         Use hosted JAI artifacts as the default for the docbook build\n </li>\n-</ul>    \n+</ul> \n \n-<h2><a name='New Feature'>        New Feature\n-</h2>\n-<ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-187'>OPENJPA-187</a>] -         MEMBER OF query fails on OpenJPA, but works fine with TopLink and Hibernate EM\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-305'>OPENJPA-305</a>] -         Dynamic configuration of EntityManagerFactory\n-</li>\n-</ul>\n-                            \n \n <h2><a name=\"Previous\"></a>         Previous Releases\n </h2>\n Release notes for earlier releases of OpenJPA may be found in SVN at the following locations. \n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.2.0 RELEASE-NOTES.html</a></li>\n  <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.1.0 RELEASE-NOTES.html</a></li>\n <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.0.0 RELEASE-NOTES.html</a></li>\n </body>"},{"sha":"13e9b5917af1fdea26a210712979e3ff34e8d0c3","filename":"openjpa-project/pom.xml","status":"modified","additions":124,"deletions":2,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -41,7 +41,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n \n     <properties>\n@@ -79,6 +79,30 @@\n         <docbook.target>${project.basedir}/target/manual</docbook.target>\n         <docbook.version>1.67.2</docbook.version>\n         <local.repository>${settings.localRepository}</local.repository>\n+        \n+        <!-- \n+            Java imaging apis are needed to include images in a PDF.\n+            JIMI or JAI may be used. Neither is available in a maven\n+            repository and should be downloaded and installed manually\n+            to your local repository.\n+\n+            ie :\n+            $ mvn install:install-file -Dfile=jai_core.jar \\\n+              -DgroupId=javax.media -DartifactId=jai-core \\ \n+              -Dversion=1.1.3 -Dpackaging=jar\n+\n+            Alternatively if you have installed the JAI artifacts to an \n+            internal repository you can specify it on the command line:\n+              -Djai.maven.repo=REPOS_URL\n+              -Djai.groupId=javax.media\n+            -->\n+        <jai.maven.repo>https://m2proxy.atlassian.com/repository/public</jai.maven.repo>\n+        <jai.groupId>com.sun</jai.groupId>\n+        <jai.version>1.1.3</jai.version>\n+\n+        <!-- authentication for nightly uploads -->\n+        <nightly.user.name>${user.name}</nightly.user.name>\n+        <nightly.password>passw0rd</nightly.password>\n         </properties>\n \n         <build>\n@@ -97,6 +121,7 @@\n \n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-assembly-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -132,6 +157,7 @@\n                 content from the openjpa-project module.\n             -->\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-resources-plugin</artifactId>\n                 <executions>\n                     <execution>\n@@ -147,11 +173,26 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-site-plugin</artifactId>\n-                <version>2.0-beta-5</version>\n                 <configuration>\n                     <siteDirectory>target/filtered-site</siteDirectory>\n                 </configuration>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>ianal-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>verify-legal-files</goal>\n+                        </goals>\n+                        <configuration>\n+                            <!-- Do not fail the build, as ianal will fail on source zips due to included META-INF dirs -->\n+                            <strict>false</strict>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n         </plugins>\n     </build>\n \n@@ -285,6 +326,18 @@\n                             <version>4.4</version>\n                             <scope>runtime</scope>\n                         </dependency>\n+                        <dependency>\n+                            <groupId>${jai.groupId}</groupId>\n+                            <artifactId>jai_core</artifactId>\n+                            <version>${jai.version}</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n+                        <dependency>\n+                            <groupId>${jai.groupId}</groupId>\n+                            <artifactId>jai_codec</artifactId>\n+                            <version>${jai.version}</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n                         </dependencies>\n                     </plugin>\n                 </plugins>\n@@ -302,6 +355,75 @@\n                     <url>http://agilejava.com/maven</url>\n                 </pluginRepository>\n             </pluginRepositories>\n+            <repositories>\n+                <repository>\n+                    <id>jai.repository</id>\n+                    <name>JAI Repository (indirectly used by Docbook plugin)</name>\n+                    <url>${jai.maven.repo}</url>\n+                </repository>\n+            </repositories>\n+        </profile>\n+        <!-- \n+          Upload distribution files, javadoc and manual to openjpa.apache.org/builds/latest. \n+          This profile is designed to be run nightly by a continuous build server, but can\n+          also be run manually.\n+\n+          The nightly.user.name and nightly.password properties need to be set prior to using\n+          this profile, ie : \n+          $ mvn -Dnightly.user.name=mikedd -Dnightly.password=mikesPassword -Pnightly-upload package\n+          or (using a profile defined in $user.home/.m2/settings.xml )\n+          $ mvn -Pnightly-upload,mikes-nightly-credentials package\n+          -->\n+        <profile>\n+            <id>nightly-upload</id>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-antrun-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <phase>package</phase>\n+                                <configuration>\n+                                    <tasks>\n+                                        <mkdir dir=\"target/site/tempDocs\" />\n+                                        <unzip dest=\"target/site/tempDocs\">\n+                                            <fileset dir=\"target/site/downloads\">\n+                                                <include name=\"*binary*.zip\" />\n+                                            </fileset>\n+                                            <patternset>\n+                                                <include name=\"**/javadoc/**\" />\n+                                                <include name=\"**/manual/**\" />\n+                                            </patternset>\n+                                        </unzip>\n+                                        <move todir=\"target/site/tempDocs/docs\">\n+                                            <fileset dir=\"target/site/tempDocs/apache-openjpa-${pom.version}/docs\" /> \n+                                        </move>\n+                                        <checksum> \n+                                            <fileset dir=\"target/site/downloads/\">\n+                                                <include name=\"*.zip\" />\n+                                            </fileset>\n+                                        </checksum>\n+                                        <scp todir=\"${nightly.user.name}:${nightly.password}@people.apache.org:/www/openjpa.apache.org/builds/latest-1.2.x/downloads\" trust=\"true\">\n+                                            <fileset dir=\"target/site/downloads\" />\n+                                        </scp>\n+                                        <scp todir=\"${nightly.user.name}:${nightly.password}@people.apache.org:/www/openjpa.apache.org/builds/latest-1.2.x/docs\" trust=\"true\">\n+                                            <fileset dir=\"target/site/tempDocs/docs\" /> \n+                                        </scp>\n+                                        <sshexec host=\"people.apache.org\" username=\"${nightly.user.name}\" password=\"${nightly.password}\" command=\"chmod -R g+w /www/openjpa.apache.org/builds/latest-1.2.x\" trust=\"true\" />\n+                                        <delete>\n+                                            <fileset dir=\"target/site/tempDocs\" />\n+                                        </delete>\n+                                    </tasks>\n+                                </configuration>\n+                                <goals>\n+                                    <goal>run</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n         </profile>\n     </profiles>\n "},{"sha":"f8c9f656b18beb864a26cce6931de19fe4d5398e","filename":"openjpa-project/src/doc/manual/jpa_overview_mapping.xml","status":"modified","additions":10,"deletions":18,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_mapping.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -184,22 +184,10 @@ consider the class' primary table. Later, we will see how to map certain fields\n to other tables.\n         </para>\n         <para>\n-The example below maps classes to tables according to the following diagram. The\n+The example below maps classes to tables to separate schemas. The\n <literal>CONTRACT</literal>, <literal>SUB</literal>, and <literal>LINE_ITEM\n </literal> tables are in the <literal>CNTRCT</literal> schema; all other tables\n are in the default schema.\n-        </para>\n-        <mediaobject>\n-            <imageobject>\n-                <!-- PNG image data, 513 x 410 (see README) -->\n-                <imagedata fileref=\"img/mapping-tables.png\" width=\"341px\"/>\n-                \n-            </imageobject>\n-        </mediaobject>\n-        <para>\n-Note that the diagram does not include our featureSelection's <classname>Document\n-</classname> and <classname>Address</classname> classes. Mapped superclasses and\n-embeddable classes are never mapped to tables.\n         </para>\n         <example id=\"jpa_overview_mapping_classex\">\n             <title>\n@@ -4127,6 +4115,7 @@ The same metadata expressed in XML:\n             &lt;join-table name=\"MAG_ARTS\"&gt;\n                 &lt;join-column name=\"MAG_ISBN\" referenced-column-name=\"ISBN\"/&gt;\n                 &lt;join-column name=\"MAG_TITLE\" referenced-column-name=\"TITLE\"/&gt;\n+                &lt;inverse-join-column name=\"ART_ID\" referenced-column-name=\"ID\"/&gt;\n             &lt;/join-table&gt;\n         &lt;/one-to-many&gt;\n         ...\n@@ -4136,12 +4125,15 @@ The same metadata expressed in XML:\n     &lt;table name=\"ART\"/&gt;\n         &lt;attributes&gt;\n             &lt;id name=\"id\"/&gt;\n-            &lt;many-to-many name=\"articles\"&gt;\n+            &lt;many-to-many name=\"authors\"&gt;\n                 &lt;order-by&gt;lastName, firstName&lt;/order-by&gt;\n                 &lt;join-table name=\"ART_AUTHS\"&gt;\n                     &lt;join-column name=\"ART_ID\" referenced-column-name=\"ID\"/&gt;\n                     &lt;inverse-join-column name=\"AUTH_ID\" referenced-column-name=\"AID\"/&gt;\n                 &lt;/join-table&gt;\n+            &lt;cascade&gt;\n+                &lt;cascade-persist/&gt;\n+            &lt;/cascade&gt;\n             &lt;/many-to-many&gt;\n             ...\n        &lt;/attributes&gt;\n@@ -4182,7 +4174,7 @@ complete mappings below:\n             <itemizedlist>\n                 <listitem>\n                     <para>\n-<literal>Magazine.publisher</literal> and <literal>Company.ags</literal>.\n+<literal>Magazine.publisher</literal> and <literal>Company.mags</literal>.\n                     </para>\n                 </listitem>\n                 <listitem>\n@@ -4276,9 +4268,9 @@ The same metadata expressed in XML:\n         ...\n         &lt;one-to-many name=\"items\"&gt;\n             &lt;map-key name=\"num\"&gt;\n-            &lt;join-table name=\"MAG_ARTS\"&gt;\n-                &lt;join-column name=\"MAG_ISBN\" referenced-column-name=\"ISBN\"/&gt;\n-                &lt;join-column name=\"MAG_TITLE\" referenced-column-name=\"TITLE\"/&gt;\n+            &lt;join-table name=\"SUB_ITEMS\" schema=\"CNTRCT\"&gt;\n+                &lt;join-column name=\"SUB_ID\"/&gt;\n+                &lt;inverse-join-column name=\"ITEM_ID\"/&gt;\n             &lt;/join-table&gt;\n             &lt;cascade&gt;\n                 &lt;cascade-persist/&gt;"},{"sha":"9a21a71feeb026374294a16b01cbbe5e20047072","filename":"openjpa-project/src/doc/manual/jpa_overview_query.xml","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/jpa_overview_query.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/jpa_overview_query.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_query.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -130,7 +130,7 @@ Keywords in JPQL expressions are case-insensitive, but entity, identifier, and\n member names are not. For example, the expression above could also be expressed\n as:\n             </para>\n-<programlisting>SELECT x FROM Magazine x WHERE x.title = 'JDJ'</programlisting>\n+<programlisting>select x from Magazine x where x.title = 'JDJ'</programlisting>\n             <para>\n But it could not be expressed as:\n             </para>\n@@ -175,18 +175,18 @@ they are evaluated. This is similar to how parentheses are used in Java. For\n example:\n             </para>\n <programlisting>\n-SELECT x FROM Magazine x WHERE (x.price &gt; 3.00 AND x.price &lt;= 5.00) OR x.price = 7.00\n+SELECT x FROM Magazine x WHERE (x.price &gt; 3.00 AND x.price &lt;= 5.00) OR x.price &lt; 7.00\n </programlisting>\n             <para>\n-This expression would match magazines whose price is 4.00, 5.00, or 7.00, but\n-not 6.00. Alternately:\n+This expression would match magazines whose price is less than 7.00.\n+Alternately:\n             </para>\n <programlisting>\n-SELECT x FROM Magazine x WHERE x.price &gt; 3.00 AND (x.price &lt;= 5.00 OR x.price = 7.00)\n+SELECT x FROM Magazine x WHERE x.price &gt; 3.00 AND (x.price &lt;= 5.00 OR x.price &lt; 7.00)\n </programlisting>\n             <para>\n-This expression will magazines whose price is 5.00 or 7.00, but not 4.00 or\n-6.00.\n+This expression would match magazines whose price is 4.00, 5.00 or 6.00, but not\n+1.00, 2.00 or 3.00.\n             </para>\n             <para>\n JPQL also includes the following conditionals:\n@@ -2247,7 +2247,7 @@ for '_foo' and false for 'bar'\n                         <listitem>\n                             <para>\n <programlisting>address.phone NOT LIKE '12%3'</programlisting> is false for\n-'123' and '12993' and true for '1234' If the value of the string_expression or\n+'123' and '12993' and true for '1234'. If the value of the string_expression or\n pattern_value is <literal>NULL</literal> or unknown, the value of the <literal>\n LIKE</literal> expression is unknown. If the escape_character is specified and\n is <literal>NULL</literal>, the value of the <literal>LIKE</literal> expression\n@@ -2301,8 +2301,10 @@ comparison expression is unknown.\n                     JPQL Collection Member Expressions\n                 </title>\n                 <para>\n-The use of the comparison collection_member_expression is as follows: syntax for\n-the operator <literal>MEMBER OF</literal> in an <itemizedlist><listitem><para>\n+The use of the comparison collection_member_expression is as follows:\n+                    <itemizedlist>\n+                        <listitem>\n+                            <para>\n collection_member_expression ::= entity_expression [NOT] MEMBER [OF]\n collection_valued_path_expression\n                             </para>\n@@ -2331,6 +2333,9 @@ single-valued association-field path expression in the collection member\n expression is <literal>NULL</literal> or unknown, the value of the collection\n member expression is unknown.\n                 </para>\n+                <para>\n+The use of the reserved word OF is optional in this expression.\n+                </para>\n             </section>\n             <section id=\"jpa_langref_exists\">\n                 <title>\n@@ -2346,9 +2351,6 @@ exists_expression ::= [NOT] EXISTS (subquery)\n                     </itemizedlist>\n                 </para>\n                 <para>\n-The use of the reserved word OF is optional in this expression.\n-                </para>\n-                <para>\n Example: <programlisting>SELECT DISTINCT auth FROM Author auth\n     WHERE EXISTS\n         (SELECT spouseAuthor FROM Author spouseAuthor WHERE spouseAuthor = auth.spouse)\n@@ -2802,7 +2804,10 @@ COUNT</literal> can be applied, the result of the aggregate function is 0.\n                 <para>\n The argument to an aggregate function may be preceded by the keyword <literal>\n DISTINCT</literal> to specify that duplicate values are to be eliminated before\n-the aggregate function is applied. Null values are eliminated before the\n+the aggregate function is applied.\n+It is legal to specify <literal>DISTINCT</literal> with <literal>MAX</literal>\n+or <literal>MIN</literal>, but it does not affect the result.\n+Null values are eliminated before the\n aggregate function is applied, regardless of whether the keyword <literal>\n DISTINCT</literal> is specified.\n                 </para>\n@@ -2813,7 +2818,7 @@ DISTINCT</literal> is specified.\n                     <para>\n The following query returns the average price of all magazines:\n <programlisting>SELECT AVG(mag.price) FROM Magazine mag</programlisting> The\n-following query returns the sum total cost of all the prices from all the\n+following query returns the sum of all the prices from all the\n magazines published by 'Larry': <programlisting>SELECT SUM(mag.price) FROM Publisher pub JOIN pub.magazines mag pub.firstName = 'Larry'\n </programlisting> The following query returns the total number of magazines:\n <programlisting>SELECT COUNT(mag) FROM Magazine mag</programlisting>\n@@ -2843,16 +2848,12 @@ orderby_item ::= state_field_path_expression [ASC | DESC]\n                 </itemizedlist>\n             </para>\n             <para>\n-It is legal to specify <literal>DISTINCT</literal> with <literal>MAX</literal>\n-or <literal>MIN</literal>, but it does not affect the result.\n-            </para>\n-            <para>\n When the <literal>ORDER BY</literal> clause is used in a query, each element of\n the <literal>SELECT</literal> clause of the query must be one of the following:\n an identification variable x, optionally denoted as <literal>OBJECT(x)</literal>\n , a single_valued_association_path_expression, or a state_field_path_expression.\n For example: <programlisting>\n-SELECT pub FROM Publisher pub JOIN pub.magazines mag ORDER BY o.revenue, o.name\n+SELECT pub FROM Publisher pub ORDER BY pub.revenue, pub.name\n </programlisting> If more than one orderby_item is specified, the left-to-right\n sequence of the orderby_item elements determines the precedence, whereby the\n leftmost orderby_item has highest precedence. The keyword <literal>ASC</literal>"},{"sha":"e2ec681e5d81e3d19e9bace6e27504271c974b49","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -2753,6 +2753,50 @@ reading registered classes. Setting this to true unnecessarily may obscure more\n serious problems.\n             </para>\n         </section>\n+        <section id=\"openjpa.RuntimeUnenhancedClasses\">\n+            <title>openjpa.RuntimeUnenhancedClasses</title>\n+            <para> \n+                <emphasis role=\"bold\">Property name: </emphasis>\n+                <literal>openjpa.RuntimeUnenhancedClasses</literal>\n+            </para>\n+            <para>\n+                 <emphasis role=\"bold\">Configuration API: </emphasis>\n+                 <ulink url=\"../javadoc/org/apache/openjpa/conf/OpenJPAConfiguration.html#getRuntimeUnenhancedClasses()\">org.apache.openjpa.conf.OpenJPAConfiguration.getRuntimeUnenhancedClasses</ulink>\n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Resource adaptor config property:</emphasis>\n+                RuntimeUnenhancedClasses\n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Default: </emphasis>\n+                <literal>supported</literal>\n+                \n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Possible values:</emphasis>\n+                <literal>supported</literal>, \n+                <literal>unsupported</literal>, \n+                <literal>warn</literal>\n+            </para>\n+            <para>\n+                <emphasis role=\"bold\">Description:</emphasis>\n+                The RuntimeUnenhancedClasses property controls how OpenJPA \n+                handles classes that have not been enhanced byt the PCEnhancer \n+                tool or automatically by a javaagent. If RuntimeUnenhanced is \n+                set to <literal>supported</literal> OpenJPA will automatically \n+                create subclasses for unenhanced entity classes. If set to \n+                <literal>unsupported</literal>OpenJPA will not create subclasses \n+                for unenhanced entity classes and will throw an exception when \n+                they are detected. If set to <literal>warn</literal> OpenJPA \n+                will not create subclasses for unenhanced entity classes \n+                but will log a warning message.  \n+            </para>\n+            <para>\n+                See the reference guide section on unenhanced types for more \n+                information \n+                <xref linkend=\"ref_guide_pc_enhance_unenhanced_types\"/>\n+            </para>\n+        </section>\n         <section id=\"openjpa.SavepointManager\">\n             <title>\n                 openjpa.SavepointManager"},{"sha":"c30123171871d95b7aa46876fdbab86d353c6b29","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -3471,7 +3471,7 @@ SQL 92 syntax or a database-specific syntax with outer join support.\n         </para>\n         <para>\n The <link linkend=\"openjpa.jdbc.DBDictionary\"><literal>\n-openjpa.jdbc.DBDictionary</literal></link> plugin accepts the the <literal>\n+openjpa.jdbc.DBDictionary</literal></link> plugin accepts the <literal>\n JoinSyntax</literal> property to set the system's default syntax. The available\n values are:\n         </para>"},{"sha":"53c78471133c5fc4f2e211de708bdb52e765332a","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -436,13 +436,23 @@ if you set the <literal>classLoadEnhancement</literal> javaagent flag to\n runtime enhancement process for some reason.\n                 </para></listitem>\n                 <listitem><para>\n-<emphasis>state comparison and subclassing</emphasis>: if you are running\n+<emphasis>Runtime Unenhanced Classes</emphasis>: AKA statte comparison and \n+subclassing. If you are running\n in a Java 5 environment without a javaagent, or in a Java 6 environment that\n does not support class retransformation, OpenJPA will still create subclasses\n as outlined above. However, in some cases, OpenJPA may not be able to receive\n notifications when you read or write persistent data.\n                 </para>\n                 <para>\n+                <note>\n+Runtime Unenhanced Classes has some known limitations which are discussed below\n+and documented in JIRA issues on the OpenJPA website. Support for this method \n+of automatic enhancement may be enabled or disabled via the \n+<xref linkend=\"openjpa.RuntimeUnenhancedClasses\">\n+openjpa.RuntimeUnenhancedClasses configuration </xref>option.\n+                </note>\n+                </para>\n+                <para>\n If you are using <emphasis>property access</emphasis> for your persistent data,\n then OpenJPA will be able to track all accesses for instances that you load\n from the database, but not for instances that you create. This is because\n@@ -634,9 +644,9 @@ method:\n                     Finding an Entity with an Entity Identity Field\n                 </title>\n <programlisting>\n-public Delivery createDelivery(EntityManager em, Order order) {\n+public Delivery createDelivery(Order order) {\n     Delivery delivery = new Delivery();\n-    delivery.setId(o);\n+    delivery.setId(order);\n     delivery.setDelivered(new Date());\n     return delivery;\n }"},{"sha":"aa4c2eb765f391acec35a61d6bf6bae9316adf0d","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -570,6 +570,15 @@ construction. For example, you might set the <literal>java.naming.provider.url\n To configure a factory to use the JMS provider, your properties might look like\n the following:\n                 </para>\n+                <example id=\"ref_guide_event_conf_jmsex\">\n+                    <title>\n+                        JMS Remote Commit Provider Configuration\n+                    </title>\n+<programlisting>\n+&lt;property name=\"openjpa.RemoteCommitProvider\"\n+    value=\"jms(ExceptionReconnectAttempts=5)\"/&gt;\n+</programlisting>\n+                </example>\n                 <note>\n                     <para>\n Because of the nature of JMS, it is important that you invoke <methodname>\n@@ -631,7 +640,7 @@ which notifications should be sent. No default value.\n <literal>NumBroadcastThreads</literal>: The number of threads to create for the\n purpose of transmitting events to peers. You sould increase this value as the\n number of concurrent transactions increases. The maximum number of concurrent\n-transactions is a function of the size of the connection pool. See the the\n+transactions is a function of the size of the connection pool. See the\n <literal>MaxActive</literal> property of <literal>\n openjpa.ConnectionFactoryProperties</literal> in\n <xref linkend=\"ref_guide_dbsetup_builtin\"/>. Setting a value of 0 will\n@@ -709,6 +718,15 @@ persisted object ids as well.\n To transmit persisted object ids in our remote commit events using the JMS\n provider, we modify the previous example as follows:\n                 </para>\n+                <example id=\"ref_guide_event_conf_jms2ex\">\n+                    <title>\n+                        JMS Remote Commit Provider transmitting Persisted Object Ids\n+                    </title>\n+<programlisting>\n+&lt;property name=\"openjpa.RemoteCommitProvider\"\n+    value=\"jms(ExceptionReconnectAttempts=5, TransmitPersistedObjectIds=true)\"/&gt;\n+</programlisting>\n+                </example>\n             </section>\n         </section>\n         <section id=\"ref_guide_event_customization\">"},{"sha":"8298bfe4218a27bf68ee19502239b361296c7a67","filename":"openjpa-project/src/doc/manual/ref_guide_slice.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_slice.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/ref_guide_slice.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_slice.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -174,13 +174,13 @@\n          <section><title>Distributed Transaction</title>\r\n             <para> \r\n             The database slices participate in a global transaction provided\r\n-            each slice is configured with a XA-complaint JDBC driver, even\r\n+            each slice is configured with a XA-compliant JDBC driver, even\r\n             when the persistence unit is configured for <code>RESOURCE_LOCAL</code>\r\n             transaction.\r\n             </para>\r\n             <para>\r\n             <warning>\r\n-            If any of the configured slices is not XA-complaint <emphasis>and</emphasis> \r\n+            If any of the configured slices is not XA-compliant <emphasis>and</emphasis> \r\n             the persistence unit is configured for <code>RESOURCE_LOCAL</code>\r\n             transaction then each slice is committed without any two-phase\r\n             commit protocol. If commit on any slice fails, then atomic nature of\r\n@@ -512,13 +512,13 @@ the JDBC connection URL of a slice.\n       or rolls back transaction on individual\r\n       slices using a two-phase commit protocol. The prerequisite to use this scheme\r\n       is, of course, that all the slices must be configured to use\r\n-      XA-complaint JDBC driver. \r\n+      XA-compliant JDBC driver. \r\n       </para>\r\n       <para>\r\n       The <code>jndi</code> policy employs a Transaction Manager by looking up the\r\n       JNDI context. The prerequisite to use this transaction\r\n       manager is, of course, that all the slices must be configured to use\r\n-      XA-complaint JDBC driver. \r\n+      XA-compliant JDBC driver. \r\n       <warning>This JNDI based policy is not available currently.</warning>\r\n       </para>\r\n     </section>\r"},{"sha":"fa9d9c74ec9c31745fa208e17d257ce6a18170d7","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":38,"deletions":15,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -429,20 +429,30 @@ Fields of type BLOB and CLOB are limited to 1M. This number can be increased by\n extending <classname>DB2Dictionary</classname>.\n                     </para>\n                 </listitem>\n-                <listitem>\r\n-                    <para>\r\n-Explicit creation of indexes specified by the OpenJPA @Index annotation will \r\n-fail on DB2 for iSeries if the default schema used by the JDBC driver does not \r\n-exist.  If a default schema is not specified on the connection, the iSeries \r\n-will default to the user profile name.  If a schema of that name does not \r\n-exist, DB2 on iSeries will not create the schema, resulting in a failure when \r\n-creating the index.  The failure message will look similar to: \"[SQL0204] \r\n-USERNAME in QSYS type *LIB not found.\"  To work around this issue, specify a \r\n-default schema on the JDBC URL or data source property and make sure that \r\n-schema exists or create a schema which matches the user profile of the \r\n-connection.\r\n-                    </para>\r\n-                </listitem>\r\n+                <listitem>\n+                    <para>\n+Explicit creation of indexes specified by the OpenJPA @Index annotation will \n+fail on DB2 for iSeries if the default schema used by the JDBC driver does not \n+exist.  If a default schema is not specified on the connection, the iSeries \n+will default to the user profile name.  If a schema of that name does not \n+exist, DB2 on iSeries will not create the schema, resulting in a failure when \n+creating the index.  The failure message will look similar to: \"[SQL0204] \n+USERNAME in QSYS type *LIB not found.\"  To work around this issue, specify a \n+default schema on the JDBC URL or data source property and make sure that \n+schema exists or create a schema which matches the user profile of the \n+connection.\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+Use of DB2 on z/OS with the IBM JCC driver requires the DESCSTAT subsystem \n+parameter value to be set to 'YES'.  If this parameter is set to 'NO', the \n+mapping tool will fail with a persistence exception containing this text: \n+\"Invalid parameter: Unknown column name TABLE_SCHEM\".  After changing the value \n+of DESCSTAT, DB2 metadata tables must be recreated by running the DSNTIJMS job. \n+See DB2 for z/OS documentation for additional information.\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n         </section>\n     </section>\n@@ -829,7 +839,7 @@ openjpa.ConnectionURL: jdbc:oracle:thin:@SERVER_NAME:1521:DB_NAME\n Oracle has support for \"query hints\", which are formatted comments embedded in\n SQL that provide some hint for how the query should be executed. These hints are\n usually designed to provide suggestions to the Oracle query optimizer for how to\n-efficiently perform a certainly query, and aren't typically needed for any but\n+efficiently perform a certain query, and aren't typically needed for any but\n the most intensive queries.\n             </para>\n             <example id=\"dbsupport_oracle_query_hints_ex\">\n@@ -1004,6 +1014,19 @@ not part of the declaration of a cursor or which is not inside a stored\n procedure.</literal> \".\n                     </para>\n                 </listitem>\n+                <listitem>\n+                    <para> \n+Applications performing update/insert data of the BigDecimal java type may fail \n+with OptimisticException if the data exceeds the scale or precision of the\n+column on Sybase. To avoid this problem, applications can specify the precision\n+and scale for the numeric type by setting numericTypeName='NUMERIC(p,s)' for\n+the column type mapped by the BigDecimal java type. See\n+<link linkend=\"openjpa.jdbc.DBDictionary\">openjpa.jdbc.DBDictionary</link> for\n+more detail. Alternatively, application can set the precision and scale using\n+the standard <classname>Column</classname> annotation, described in\n+<xref linkend=\"jpa_overview_mapping_column\"/>.\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n         </section>\n     </section>"},{"sha":"6b14ef4489c05c6538af3345f267ca15c26b9ab0","filename":"openjpa-slice/pom.xml","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,7 +31,7 @@\n \t<parent>\n \t\t<groupId>org.apache.openjpa</groupId>\n \t\t<artifactId>openjpa-parent</artifactId>\n-\t\t<version>1.2.0</version>\n+\t\t<version>1.2.1</version>\n \t</parent>\n \t<properties>\n \t\t<openjpa.loglevel>INFO</openjpa.loglevel>\n@@ -127,13 +127,6 @@\n \t\t<plugins>\n \t\t\t<plugin>\n \t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n-\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n-\t\t\t\t<configuration>\n-\t\t\t\t\t<source>1.5</source>\n-\t\t\t\t\t<target>1.5</target>\n-\t\t\t\t</configuration>\n-\t\t\t</plugin>\n-\t\t\t<plugin>\n \t\t\t\t<artifactId>maven-antrun-plugin</artifactId>\n \t\t\t\t<executions>\n \t\t\t\t\t<execution>"},{"sha":"0c9ec649d1b91124ac6a95cbefa5ebaf7c04241e","filename":"openjpa-slice/src/main/ant/enhancer.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-slice/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-slice/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/ant/enhancer.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -59,8 +59,6 @@\n           -->\r\n         <path id=\"cp\">\r\n             <path refid=\"maven.test.classpath\" />\r\n-            <path refid=\"maven.compile.classpath\" />\r\n-            <path refid=\"maven.dependency.classpath\" />\r\n         </path>\r\n \r\n         <taskdef name=\"openjpac\"\r"},{"sha":"b17633333b8448b27525b4dc235255d0392efc24","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.0</version>\n+        <version>1.2.1</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"3efd7941e4ec59ae4db5afacde3e30303e904aa0","filename":"pom.xml","status":"modified","additions":123,"deletions":10,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/26dbc39431ad73a66752053fb278bb5027edc07e/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/26dbc39431ad73a66752053fb278bb5027edc07e/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=26dbc39431ad73a66752053fb278bb5027edc07e","patch":"@@ -32,14 +32,15 @@\n     <description>OpenJPA</description>\n \n     <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n         <openjpa.version>${pom.version}</openjpa.version>\n     </properties>\n \n     <!--\n         Changing this version needs to also be done in all children poms\n         See: http://jira.codehaus.org/browse/MNG-624\n     -->\n-    <version>1.2.0</version>\n+    <version>1.2.1</version>\n     <url>http://openjpa.apache.org</url>\n     <issueManagement>\n         <system>jira</system>\n@@ -106,6 +107,37 @@\n             </modules>\n             <build>\n                 <plugins>\n+                <plugin>\n+                    <!--\n+                        javadoc plugin doesn't copy resources like the normal jar plugin.\n+                        Unzip license,etc from normal jar and add to javadoc jar.\n+                     -->\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-antrun-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>javadoc.resources</id>\n+                                <phase>package</phase>\n+                                <goals>\n+                                    <goal>run</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <tasks>\n+                                        <!-- create output dir for nested parent poms -->\n+                                        <mkdir dir=\"${project.build.directory}\" />\n+                                        <unzip dest=\"${project.build.directory}/apidocs\">\n+                                            <patternset>\n+                                                <include name=\"META-INF/*.txt\" />\n+                                            </patternset>\n+                                            <fileset dir=\"${project.build.directory}\">\n+                                                <include name=\"${artifactId}-${pom.version}.jar\" />\n+                                            </fileset>\n+                                        </unzip>\n+                                    </tasks>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-source-plugin</artifactId>\n@@ -122,7 +154,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-javadoc-plugin</artifactId>\n-                        <version>2.4</version>\n                         <executions>\n                             <execution>\n                                 <id>attach-javadoc</id>\n@@ -154,7 +185,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-gpg-plugin</artifactId>\n-                        <version>1.0-alpha-3</version>\n                         <executions>\n                             <execution>\n                                 <id>sign-artifacts</id>\n@@ -168,7 +198,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-release-plugin</artifactId>\n-                        <version>2.0-beta-7</version>\n                         <configuration>\n                             <useReleaseProfile>false</useReleaseProfile>\n                             <goals>deploy site site-deploy</goals>\n@@ -179,7 +208,6 @@\n                         <plugin>\n                             <groupId>org.codehaus.mojo</groupId>\n                             <artifactId>rat-maven-plugin</artifactId>\n-                            <version>1.0-alpha-3</version>\n                             <executions>\n                                 <execution>\n                                     <phase>verify</phase>\n@@ -264,7 +292,6 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-javadoc-plugin</artifactId>\n-                        <version>2.2</version>\n                         <executions>\n                             <execution>\n                                 <phase>process-classes</phase>\n@@ -311,7 +338,6 @@\n                     <plugin>\n                         <groupId>org.codehaus.mojo</groupId>\n                         <artifactId>rat-maven-plugin</artifactId>\n-                        <version>1.0-alpha-3</version>\n                         <executions>\n                             <execution>\n                                 <phase>verify</phase>\n@@ -481,6 +507,7 @@\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-compiler-plugin</artifactId>\n+                    <version>2.0.2</version>\n                     <configuration>\n                         <source>1.5</source>\n                         <target>1.5</target>\n@@ -513,6 +540,7 @@\n                 <plugin>\n                     <groupId>org.codehaus.mojo</groupId>\n                     <artifactId>rat-maven-plugin</artifactId>\n+                    <version>1.0-alpha-3</version>\n                     <configuration>\n                         <excludeSubProjects>false</excludeSubProjects>\n                         <numUnapprovedLicenses>0</numUnapprovedLicenses>\n@@ -542,12 +570,96 @@\n                         </excludes>\n                     </configuration>\n                 </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-resources-plugin</artifactId>\n+                    <version>2.3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-site-plugin</artifactId>\n+                    <version>2.0-beta-7</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <version>2.2-beta-3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-antrun-plugin</artifactId>\n+                    <version>1.3</version>\n+                    <dependencies>\n+                        <dependency>\n+                            <groupId>org.apache.ant</groupId>\n+                            <artifactId>ant-jsch</artifactId>\n+                            <version>1.7.0</version>\n+                        </dependency>\n+                    </dependencies>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-gpg-plugin</artifactId>\n+                    <version>1.0-alpha-4</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-javadoc-plugin</artifactId>\n+                    <version>2.4</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-release-plugin</artifactId>\n+                    <version>2.0-beta-7</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-source-plugin</artifactId>\n+                    <version>2.0.4</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-project-info-reports-plugin</artifactId>\n+                    <version>2.1</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.codehaus.mojo</groupId>\n+                    <artifactId>taglist-maven-plugin</artifactId>\n+                    <version>2.3</version>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.codehaus.mojo</groupId>\n+                    <artifactId>ianal-maven-plugin</artifactId>\n+                    <version>1.0-alpha-1</version>\n+                </plugin>\n             </plugins>\n         </pluginManagement>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>ianal-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>verify-legal-files</goal>\n+                        </goals>\n+                        <configuration>\n+                            <!-- Fail the build if any artifacts are missing legal files -->\n+                            <strict>true</strict>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+       </plugins>\n     </build>\n     <reporting>\n         <plugins>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-project-info-reports-plugin</artifactId>\n                 <reportSets>\n                     <reportSet>\n@@ -564,6 +676,7 @@\n                 </reportSets>\n             </plugin>\n             <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n             </plugin>\n             <plugin>\n@@ -590,8 +703,8 @@\n       </site>\n     </distributionManagement>\n     <scm>\n-        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/tags/1.2.0</connection>\n-        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/tags/1.2.0</developerConnection>\n-        <url>http://svn.apache.org/repos/asf/openjpa/tags/1.2.0</url>\n+        <connection>scm:svn:http://svn.apache.org/repos/asf/openjpa/tags/1.2.1</connection>\n+        <developerConnection>scm:svn:https://svn.apache.org/repos/asf/openjpa/tags/1.2.1</developerConnection>\n+        <url>http://svn.apache.org/repos/asf/openjpa/tags/1.2.1</url>\n     </scm>\n </project>"}]}

